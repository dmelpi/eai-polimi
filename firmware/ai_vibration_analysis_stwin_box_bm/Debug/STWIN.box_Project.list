
STWIN.box_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140f0  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005537c  08014340  08014340  00024340  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080696bc  080696bc  000796bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080696c4  080696c4  000796c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080696c8  080696c8  000796c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000009ac  20000000  080696cc  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001538  200009c0  0806a078  000809c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  20001ef8  0806a078  00081ef8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000809ac  2**0
                  CONTENTS, READONLY
 10 .debug_info   000434b9  00000000  00000000  000809e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000062f5  00000000  00000000  000c3e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002480  00000000  00000000  000ca190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000021e0  00000000  00000000  000cc610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a802  00000000  00000000  000ce7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027a50  00000000  00000000  00108ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b4d8  00000000  00000000  00130a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000140  00000000  00000000  0029bf1a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ae1c  00000000  00000000  0029c05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00004344  00000000  00000000  002a6e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200009c0 	.word	0x200009c0
 8000254:	00000000 	.word	0x00000000
 8000258:	08014310 	.word	0x08014310

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200009c4 	.word	0x200009c4
 8000274:	08014310 	.word	0x08014310

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9b8 	b.w	8001018 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d32:	4604      	mov	r4, r0
 8000d34:	460f      	mov	r7, r1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d148      	bne.n	8000dcc <__udivmoddi4+0xa0>
 8000d3a:	428a      	cmp	r2, r1
 8000d3c:	4694      	mov	ip, r2
 8000d3e:	d961      	bls.n	8000e04 <__udivmoddi4+0xd8>
 8000d40:	fab2 f382 	clz	r3, r2
 8000d44:	b143      	cbz	r3, 8000d58 <__udivmoddi4+0x2c>
 8000d46:	f1c3 0120 	rsb	r1, r3, #32
 8000d4a:	409f      	lsls	r7, r3
 8000d4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d50:	409c      	lsls	r4, r3
 8000d52:	fa20 f101 	lsr.w	r1, r0, r1
 8000d56:	430f      	orrs	r7, r1
 8000d58:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	0c22      	lsrs	r2, r4, #16
 8000d62:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d66:	fb01 7716 	mls	r7, r1, r6, r7
 8000d6a:	fb06 f00e 	mul.w	r0, r6, lr
 8000d6e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d72:	4290      	cmp	r0, r2
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x5c>
 8000d76:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7a:	f106 37ff 	add.w	r7, r6, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x5a>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f200 8137 	bhi.w	8000ff4 <__udivmoddi4+0x2c8>
 8000d86:	463e      	mov	r6, r7
 8000d88:	1a12      	subs	r2, r2, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d90:	fb01 2210 	mls	r2, r1, r0, r2
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x86>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da8:	d202      	bcs.n	8000db0 <__udivmoddi4+0x84>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f200 811c 	bhi.w	8000fe8 <__udivmoddi4+0x2bc>
 8000db0:	4610      	mov	r0, r2
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	2600      	movs	r6, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0x9a>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0xb8>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	f000 80fd 	beq.w	8000fd0 <__udivmoddi4+0x2a4>
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4631      	mov	r1, r6
 8000de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de4:	fab3 f683 	clz	r6, r3
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d14b      	bne.n	8000e84 <__udivmoddi4+0x158>
 8000dec:	428b      	cmp	r3, r1
 8000dee:	f0c0 80f2 	bcc.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f240 80ef 	bls.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df8:	4630      	mov	r0, r6
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e3      	beq.n	8000dc6 <__udivmoddi4+0x9a>
 8000dfe:	e9c5 4700 	strd	r4, r7, [r5]
 8000e02:	e7e0      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000e04:	b902      	cbnz	r2, 8000e08 <__udivmoddi4+0xdc>
 8000e06:	deff      	udf	#255	; 0xff
 8000e08:	fab2 f382 	clz	r3, r2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f040 809d 	bne.w	8000f4c <__udivmoddi4+0x220>
 8000e12:	1a89      	subs	r1, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b297      	uxth	r7, r2
 8000e1a:	2601      	movs	r6, #1
 8000e1c:	0c20      	lsrs	r0, r4, #16
 8000e1e:	fbb1 f2fe 	udiv	r2, r1, lr
 8000e22:	fb0e 1112 	mls	r1, lr, r2, r1
 8000e26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2a:	fb07 f002 	mul.w	r0, r7, r2
 8000e2e:	4288      	cmp	r0, r1
 8000e30:	d90f      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f102 38ff 	add.w	r8, r2, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	4288      	cmp	r0, r1
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80cf 	beq.w	8000fee <__udivmoddi4+0x2c2>
 8000e50:	4642      	mov	r2, r8
 8000e52:	1a09      	subs	r1, r1, r0
 8000e54:	b2a4      	uxth	r4, r4
 8000e56:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e5a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e5e:	fb00 f707 	mul.w	r7, r0, r7
 8000e62:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e66:	42a7      	cmp	r7, r4
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x150>
 8000e6a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x14e>
 8000e74:	42a7      	cmp	r7, r4
 8000e76:	f200 80b4 	bhi.w	8000fe2 <__udivmoddi4+0x2b6>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	1be4      	subs	r4, r4, r7
 8000e7e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e82:	e79b      	b.n	8000dbc <__udivmoddi4+0x90>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa01 f406 	lsl.w	r4, r1, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	40f9      	lsrs	r1, r7
 8000e94:	40b2      	lsls	r2, r6
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	431c      	orrs	r4, r3
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fa00 f306 	lsl.w	r3, r0, r6
 8000eac:	0c20      	lsrs	r0, r4, #16
 8000eae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eb2:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eba:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebe:	4288      	cmp	r0, r1
 8000ec0:	d90f      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 808d 	beq.w	8000ffa <__udivmoddi4+0x2ce>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	1a09      	subs	r1, r1, r0
 8000ee4:	b2a4      	uxth	r4, r4
 8000ee6:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eea:	fb09 1110 	mls	r1, r9, r0, r1
 8000eee:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef2:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef6:	458e      	cmp	lr, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1de>
 8000efa:	eb1c 0101 	adds.w	r1, ip, r1
 8000efe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f02:	d201      	bcs.n	8000f08 <__udivmoddi4+0x1dc>
 8000f04:	458e      	cmp	lr, r1
 8000f06:	d87f      	bhi.n	8001008 <__udivmoddi4+0x2dc>
 8000f08:	4620      	mov	r0, r4
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	fba0 9802 	umull	r9, r8, r0, r2
 8000f16:	4541      	cmp	r1, r8
 8000f18:	464c      	mov	r4, r9
 8000f1a:	46c6      	mov	lr, r8
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x1f8>
 8000f1e:	d106      	bne.n	8000f2e <__udivmoddi4+0x202>
 8000f20:	454b      	cmp	r3, r9
 8000f22:	d204      	bcs.n	8000f2e <__udivmoddi4+0x202>
 8000f24:	3801      	subs	r0, #1
 8000f26:	ebb9 0402 	subs.w	r4, r9, r2
 8000f2a:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d070      	beq.n	8001014 <__udivmoddi4+0x2e8>
 8000f32:	1b1a      	subs	r2, r3, r4
 8000f34:	eb61 010e 	sbc.w	r1, r1, lr
 8000f38:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3c:	fa01 f707 	lsl.w	r7, r1, r7
 8000f40:	40f1      	lsrs	r1, r6
 8000f42:	2600      	movs	r6, #0
 8000f44:	431f      	orrs	r7, r3
 8000f46:	e9c5 7100 	strd	r7, r1, [r5]
 8000f4a:	e73c      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	f1c3 0020 	rsb	r0, r3, #32
 8000f54:	fa01 f203 	lsl.w	r2, r1, r3
 8000f58:	fa21 f600 	lsr.w	r6, r1, r0
 8000f5c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f60:	fa24 f100 	lsr.w	r1, r4, r0
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	409c      	lsls	r4, r3
 8000f6a:	4311      	orrs	r1, r2
 8000f6c:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f70:	0c0a      	lsrs	r2, r1, #16
 8000f72:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f76:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f7a:	fb00 f607 	mul.w	r6, r0, r7
 8000f7e:	4296      	cmp	r6, r2
 8000f80:	d90e      	bls.n	8000fa0 <__udivmoddi4+0x274>
 8000f82:	eb1c 0202 	adds.w	r2, ip, r2
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	bf2c      	ite	cs
 8000f8c:	f04f 0901 	movcs.w	r9, #1
 8000f90:	f04f 0900 	movcc.w	r9, #0
 8000f94:	4296      	cmp	r6, r2
 8000f96:	d902      	bls.n	8000f9e <__udivmoddi4+0x272>
 8000f98:	f1b9 0f00 	cmp.w	r9, #0
 8000f9c:	d031      	beq.n	8001002 <__udivmoddi4+0x2d6>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	1b92      	subs	r2, r2, r6
 8000fa2:	b289      	uxth	r1, r1
 8000fa4:	fbb2 f6fe 	udiv	r6, r2, lr
 8000fa8:	fb0e 2216 	mls	r2, lr, r6, r2
 8000fac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000fb0:	fb06 f207 	mul.w	r2, r6, r7
 8000fb4:	428a      	cmp	r2, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x29c>
 8000fb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc0:	d201      	bcs.n	8000fc6 <__udivmoddi4+0x29a>
 8000fc2:	428a      	cmp	r2, r1
 8000fc4:	d823      	bhi.n	800100e <__udivmoddi4+0x2e2>
 8000fc6:	4646      	mov	r6, r8
 8000fc8:	1a89      	subs	r1, r1, r2
 8000fca:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fce:	e725      	b.n	8000e1c <__udivmoddi4+0xf0>
 8000fd0:	462e      	mov	r6, r5
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	e6f7      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000fd6:	1a84      	subs	r4, r0, r2
 8000fd8:	eb61 0303 	sbc.w	r3, r1, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	461f      	mov	r7, r3
 8000fe0:	e70b      	b.n	8000dfa <__udivmoddi4+0xce>
 8000fe2:	4464      	add	r4, ip
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	e749      	b.n	8000e7c <__udivmoddi4+0x150>
 8000fe8:	4464      	add	r4, ip
 8000fea:	3802      	subs	r0, #2
 8000fec:	e6e1      	b.n	8000db2 <__udivmoddi4+0x86>
 8000fee:	3a02      	subs	r2, #2
 8000ff0:	4461      	add	r1, ip
 8000ff2:	e72e      	b.n	8000e52 <__udivmoddi4+0x126>
 8000ff4:	3e02      	subs	r6, #2
 8000ff6:	4462      	add	r2, ip
 8000ff8:	e6c6      	b.n	8000d88 <__udivmoddi4+0x5c>
 8000ffa:	f1a8 0802 	sub.w	r8, r8, #2
 8000ffe:	4461      	add	r1, ip
 8001000:	e76f      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001002:	3802      	subs	r0, #2
 8001004:	4462      	add	r2, ip
 8001006:	e7cb      	b.n	8000fa0 <__udivmoddi4+0x274>
 8001008:	3802      	subs	r0, #2
 800100a:	4461      	add	r1, ip
 800100c:	e77d      	b.n	8000f0a <__udivmoddi4+0x1de>
 800100e:	3e02      	subs	r6, #2
 8001010:	4461      	add	r1, ip
 8001012:	e7d9      	b.n	8000fc8 <__udivmoddi4+0x29c>
 8001014:	462e      	mov	r6, r5
 8001016:	e6d6      	b.n	8000dc6 <__udivmoddi4+0x9a>

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <set_mems_int_pin_a_exti>:
extern volatile HAL_StatusTypeDef ret_hal_status;
static void mems_int_pin_a_hardware_event_isr(void);
volatile int Mems_Interrupt = 0;

void set_mems_int_pin_a_exti(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	/* register event irq handler */
  ret_hal_status = HAL_EXTI_GetHandle(&hexti8, EXTI_LINE_8);
 8001020:	490d      	ldr	r1, [pc, #52]	; (8001058 <set_mems_int_pin_a_exti+0x3c>)
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <set_mems_int_pin_a_exti+0x40>)
 8001024:	f004 fd66 	bl	8005af4 <HAL_EXTI_GetHandle>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <set_mems_int_pin_a_exti+0x44>)
 800102e:	701a      	strb	r2, [r3, #0]
  ret_hal_status = HAL_EXTI_RegisterCallback(&hexti8, HAL_EXTI_COMMON_CB_ID, mems_int_pin_a_hardware_event_isr);
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <set_mems_int_pin_a_exti+0x48>)
 8001032:	2100      	movs	r1, #0
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <set_mems_int_pin_a_exti+0x40>)
 8001036:	f004 fd31 	bl	8005a9c <HAL_EXTI_RegisterCallback>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <set_mems_int_pin_a_exti+0x44>)
 8001040:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2013      	movs	r0, #19
 8001048:	f004 fc09 	bl	800585e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 800104c:	2013      	movs	r0, #19
 800104e:	f004 fc20 	bl	8005892 <HAL_NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	06000008 	.word	0x06000008
 800105c:	20000000 	.word	0x20000000
 8001060:	20000d9c 	.word	0x20000d9c
 8001064:	08001069 	.word	0x08001069

08001068 <mems_int_pin_a_hardware_event_isr>:

static void mems_int_pin_a_hardware_event_isr(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

	MemsEventDetected = 1;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <mems_int_pin_a_hardware_event_isr+0x14>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]

}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000d9d 	.word	0x20000d9d

08001080 <__io_putchar>:
static void MX_ICACHE_Init(void);

static char string_out[MAX_STRING_BUF_SIZE];
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

 8001088:	1d39      	adds	r1, r7, #4
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	2201      	movs	r2, #1
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <__io_putchar+0x20>)
 8001092:	f00a f8f9 	bl	800b288 <HAL_UART_Transmit>
/* Private user code ---------------------------------------------------------*/
 8001096:	687b      	ldr	r3, [r7, #4]
/* USER CODE BEGIN 0 */
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000a6c 	.word	0x20000a6c

080010a4 <main>:
	(void)HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
	return ch;
}
/* USER CODE END 0 */

/**
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
 80010aa:	f004 fa79 	bl	80055a0 <HAL_Init>
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
 80010ae:	f000 f825 	bl	80010fc <SystemClock_Config>

  /* USER CODE END Init */

 80010b2:	f000 f86c 	bl	800118e <SystemPower_Config>
  SystemClock_Config();

  /* Configure the System Power */
  SystemPower_Config();

  /* USER CODE BEGIN SysInit */
 80010b6:	f000 f94d 	bl	8001354 <MX_GPIO_Init>

 80010ba:	f000 f86f 	bl	800119c <MX_SPI2_Init>
  /* Configure the peripherals common clocks */
 80010be:	f000 f8fd 	bl	80012bc <MX_USART2_UART_Init>
  //PeriphCommonClock_Config();

 80010c2:	f000 f8d9 	bl	8001278 <MX_CRC_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	480b      	ldr	r0, [pc, #44]	; (80010f4 <main+0x50>)
 80010c8:	f004 fbfe 	bl	80058c8 <HAL_CRC_Init>
  MX_SPI2_Init();
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <main+0x54>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <main+0x54>)
 80010d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <main+0x54>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  MX_USART2_UART_Init();

  MX_CRC_Init();
 80010ea:	f000 f9e3 	bl	80014b4 <sensor_init>
  // CRC init needed to use AI on STM32
  HAL_CRC_Init(&hcrc);
  __HAL_RCC_CRC_CLK_ENABLE();

  // Sensor app init
  sensor_init();
 80010ee:	f000 fa5b 	bl	80015a8 <sensor_process>
 80010f2:	e7fc      	b.n	80010ee <main+0x4a>
 80010f4:	20000afc 	.word	0x20000afc
 80010f8:	46020c00 	.word	0x46020c00

080010fc <SystemClock_Config>:

  uint8_t data_transmit[4];

  for(int i=0;i<4;i++){
	  data_transmit[i]=i;
  }
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09e      	sub	sp, #120	; 0x78
 8001100:	af00      	add	r7, sp, #0
  CDC_Transmit_FS(data_transmit, 4);
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	2260      	movs	r2, #96	; 0x60
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f00e fb19 	bl	800f742 <memset>
  /* Infinite loop */
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
 800111e:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN WHILE */


  while (1)
 8001120:	2000      	movs	r0, #0
 8001122:	f005 f865 	bl	80061f0 <HAL_PWREx_ControlVoltageScaling>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x34>
  {
	//printf(string_out, sizeof(string_out), "Prova\r\n");
 800112c:	f000 f9bc 	bl	80014a8 <Error_Handler>
	//C_Transmit_FS((uint8_t*)string_out, strlen(string_out));

	//printf("Prova \r\n");
	/* USER CODE END WHILE */

 8001130:	2310      	movs	r3, #16
 8001132:	61bb      	str	r3, [r7, #24]
    /* USER CODE BEGIN 3 */
 8001134:	2301      	movs	r3, #1
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
    //nsor_process();
 8001138:	2310      	movs	r3, #16
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  }
 800113c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001140:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 3 */
 8001142:	2300      	movs	r3, #0
 8001144:	653b      	str	r3, [r7, #80]	; 0x50
}
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	4618      	mov	r0, r3
 800114c:	f005 f8e2 	bl	8006314 <HAL_RCC_OscConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x5e>


 8001156:	f000 f9a7 	bl	80014a8 <Error_Handler>
/**
  * @brief System Clock Configuration
  * @retval None

void SystemClock_Config(void)
 800115a:	231f      	movs	r3, #31
 800115c:	603b      	str	r3, [r7, #0]
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]

 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  * Configure the main internal regulator output voltage
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]

 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  {
    Error_Handler();
 8001172:	463b      	mov	r3, r7
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f005 ffa2 	bl	80070c0 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x8a>
  }

 8001182:	f000 f991 	bl	80014a8 <Error_Handler>
  * Initializes the CPU, AHB and APB busses clocks

 8001186:	bf00      	nop
 8001188:	3778      	adds	r7, #120	; 0x78
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <SystemPower_Config>:
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
    Error_Handler();
  }

  * Initializes the CPU, AHB and APB busses clocks

 8001192:	f005 f8af 	bl	80062f4 <HAL_PWREx_DisableUCPDDeadBattery>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <MX_SPI2_Init>:
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;

 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}*/

 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011ae:	4a31      	ldr	r2, [pc, #196]	; (8001274 <MX_SPI2_Init+0xd8>)
 80011b0:	601a      	str	r2, [r3, #0]
{
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011b8:	605a      	str	r2, [r3, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011c2:	2207      	movs	r2, #7
 80011c4:	60da      	str	r2, [r3, #12]

 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  /** Configure the main internal regulator output voltage
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  */
 80011d2:	4b27      	ldr	r3, [pc, #156]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  {
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
    Error_Handler();
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
  }
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28

 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /** Initializes the CPU, AHB and APB buses clocks
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_SPI2_Init+0xd4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
  */
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_SPI2_Init+0xd4>)
 8001200:	2200      	movs	r2, #0
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_SPI2_Init+0xd4>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_SPI2_Init+0xd4>)
 800120c:	2200      	movs	r2, #0
 800120e:	649a      	str	r2, [r3, #72]	; 0x48
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_SPI2_Init+0xd4>)
 8001212:	2200      	movs	r2, #0
 8001214:	64da      	str	r2, [r3, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_SPI2_Init+0xd4>)
 8001218:	2200      	movs	r2, #0
 800121a:	651a      	str	r2, [r3, #80]	; 0x50
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_SPI2_Init+0xd4>)
 800121e:	2200      	movs	r2, #0
 8001220:	655a      	str	r2, [r3, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_SPI2_Init+0xd4>)
 8001224:	2200      	movs	r2, #0
 8001226:	659a      	str	r2, [r3, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_SPI2_Init+0xd4>)
 800122a:	2200      	movs	r2, #0
 800122c:	65da      	str	r2, [r3, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_SPI2_Init+0xd4>)
 8001230:	2200      	movs	r2, #0
 8001232:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <MX_SPI2_Init+0xd4>)
 8001236:	f008 ff63 	bl	800a100 <HAL_SPI_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_SPI2_Init+0xa8>
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001240:	f000 f932 	bl	80014a8 <Error_Handler>
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001248:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800124c:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <MX_SPI2_Init+0xd4>)
 8001258:	f009 ff85 	bl	800b166 <HAL_SPIEx_SetConfigAutonomousMode>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_SPI2_Init+0xca>
  {
    Error_Handler();
 8001262:	f000 f921 	bl	80014a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200009dc 	.word	0x200009dc
 8001274:	40003800 	.word	0x40003800

08001278 <MX_CRC_Init>:
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
}

/**
  * @brief Power Configuration
  * @retval None
  */
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_CRC_Init+0x3c>)
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <MX_CRC_Init+0x40>)
 8001280:	601a      	str	r2, [r3, #0]
static void SystemPower_Config(void)
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_CRC_Init+0x3c>)
 8001284:	2200      	movs	r2, #0
 8001286:	711a      	strb	r2, [r3, #4]
{
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_CRC_Init+0x3c>)
 800128a:	2200      	movs	r2, #0
 800128c:	715a      	strb	r2, [r3, #5]

 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_CRC_Init+0x3c>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  /*
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_CRC_Init+0x3c>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_CRC_Init+0x3c>)
 800129c:	2201      	movs	r2, #1
 800129e:	621a      	str	r2, [r3, #32]
   */
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_CRC_Init+0x3c>)
 80012a2:	f004 fb11 	bl	80058c8 <HAL_CRC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_CRC_Init+0x38>
  HAL_PWREx_DisableUCPDDeadBattery();
}
 80012ac:	f000 f8fc 	bl	80014a8 <Error_Handler>

/**
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000afc 	.word	0x20000afc
 80012b8:	40023000 	.word	0x40023000

080012bc <MX_USART2_UART_Init>:

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  /* USER CODE BEGIN ICACHE_Init 1 */
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
  {
    Error_Handler();
  }
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012c2:	4a23      	ldr	r2, [pc, #140]	; (8001350 <MX_USART2_UART_Init+0x94>)
 80012c4:	601a      	str	r2, [r3, #0]
  if (HAL_ICACHE_Enable() != HAL_OK)
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  {
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
    Error_Handler();
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  }
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ICACHE_Init 2 */
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]

 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  /* USER CODE END ICACHE_Init 2 */
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]

 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
}
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24

 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_USART2_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
/**
 8001304:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_USART2_UART_Init+0x90>)
 8001306:	f009 ff6f 	bl	800b1e8 <HAL_UART_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART2_UART_Init+0x58>
  * @brief SPI2 Initialization Function
  * @param None
 8001310:	f000 f8ca 	bl	80014a8 <Error_Handler>
  * @retval None
  */
 8001314:	2100      	movs	r1, #0
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_USART2_UART_Init+0x90>)
 8001318:	f00a fbec 	bl	800baf4 <HAL_UARTEx_SetTxFifoThreshold>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART2_UART_Init+0x6a>
static void MX_SPI2_Init(void)
{
 8001322:	f000 f8c1 	bl	80014a8 <Error_Handler>

  /* USER CODE BEGIN SPI2_Init 0 */
 8001326:	2100      	movs	r1, #0
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <MX_USART2_UART_Init+0x90>)
 800132a:	f00a fc21 	bl	800bb70 <HAL_UARTEx_SetRxFifoThreshold>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART2_UART_Init+0x7c>

  /* USER CODE END SPI2_Init 0 */
 8001334:	f000 f8b8 	bl	80014a8 <Error_Handler>

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_USART2_UART_Init+0x90>)
 800133a:	f00a fba2 	bl	800ba82 <HAL_UARTEx_DisableFifoMode>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_USART2_UART_Init+0x8c>

  /* USER CODE BEGIN SPI2_Init 1 */
 8001344:	f000 f8b0 	bl	80014a8 <Error_Handler>

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000a6c 	.word	0x20000a6c
 8001350:	40004400 	.word	0x40004400

08001354 <MX_GPIO_Init>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None

void PeriphCommonClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	; 0x30
 8001358:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  * Initializes the peripherals clock

 800136a:	4b4a      	ldr	r3, [pc, #296]	; (8001494 <MX_GPIO_Init+0x140>)
 800136c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001370:	4a48      	ldr	r2, [pc, #288]	; (8001494 <MX_GPIO_Init+0x140>)
 8001372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001376:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <MX_GPIO_Init+0x140>)
 800137c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	69bb      	ldr	r3, [r7, #24]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADF1;
 8001388:	4b42      	ldr	r3, [pc, #264]	; (8001494 <MX_GPIO_Init+0x140>)
 800138a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800138e:	4a41      	ldr	r2, [pc, #260]	; (8001494 <MX_GPIO_Init+0x140>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <MX_GPIO_Init+0x140>)
 800139a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL1;
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <MX_GPIO_Init+0x140>)
 80013a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ac:	4a39      	ldr	r2, [pc, #228]	; (8001494 <MX_GPIO_Init+0x140>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013b6:	4b37      	ldr	r3, [pc, #220]	; (8001494 <MX_GPIO_Init+0x140>)
 80013b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
  PeriphClkInit.Adf1ClockSelection = RCC_CK48CLKSOURCE_PLLSAIP;
 80013c4:	4b33      	ldr	r3, [pc, #204]	; (8001494 <MX_GPIO_Init+0x140>)
 80013c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ca:	4a32      	ldr	r2, [pc, #200]	; (8001494 <MX_GPIO_Init+0x140>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013d4:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <MX_GPIO_Init+0x140>)
 80013d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80013e2:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <MX_GPIO_Init+0x140>)
 80013e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013e8:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <MX_GPIO_Init+0x140>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <MX_GPIO_Init+0x140>)
 80013f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <MX_GPIO_Init+0x140>)
 8001402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001406:	4a23      	ldr	r2, [pc, #140]	; (8001494 <MX_GPIO_Init+0x140>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <MX_GPIO_Init+0x140>)
 8001412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLL3_DIVP;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLL3_DIVP;
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001424:	481c      	ldr	r0, [pc, #112]	; (8001498 <MX_GPIO_Init+0x144>)
 8001426:	f004 fe8f 	bl	8006148 <HAL_GPIO_WritePin>
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLL3_DIVP;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800142e:	61fb      	str	r3, [r7, #28]
  {
 8001430:	2301      	movs	r3, #1
 8001432:	623b      	str	r3, [r7, #32]
    Error_Handler();
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  }
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
}*/
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4815      	ldr	r0, [pc, #84]	; (8001498 <MX_GPIO_Init+0x144>)
 8001444:	f004 fbb2 	bl	8005bac <HAL_GPIO_Init>

/**
  * @brief CRC Initialization Function
 8001448:	2301      	movs	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
  * @param None
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  * @retval None
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  */
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4810      	ldr	r0, [pc, #64]	; (800149c <MX_GPIO_Init+0x148>)
 800145c:	f004 fba6 	bl	8005bac <HAL_GPIO_Init>
static void MX_CRC_Init(void)
{

 8001460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001464:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN CRC_Init 0 */
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_GPIO_Init+0x14c>)
 8001468:	623b      	str	r3, [r7, #32]

 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END CRC_Init 0 */
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <MX_GPIO_Init+0x150>)
 8001476:	f004 fb99 	bl	8005bac <HAL_GPIO_Init>

  /* USER CODE BEGIN CRC_Init 1 */

 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2013      	movs	r0, #19
 8001480:	f004 f9ed 	bl	800585e <HAL_NVIC_SetPriority>
  /* USER CODE END CRC_Init 1 */
 8001484:	2013      	movs	r0, #19
 8001486:	f004 fa04 	bl	8005892 <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	; 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	46020c00 	.word	0x46020c00
 8001498:	42021c00 	.word	0x42021c00
 800149c:	42021000 	.word	0x42021000
 80014a0:	10110000 	.word	0x10110000
 80014a4:	42020400 	.word	0x42020400

080014a8 <Error_Handler>:
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop

}

/**
 80014b0:	e7fe      	b.n	80014b0 <Error_Handler+0x8>
	...

080014b4 <sensor_init>:
// time measurement variables
int32_t time_elapsed=0;
int32_t post_FIFO_read;
int32_t pre_FIFO_read;

void sensor_init(void){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0

	// init GREEN LED and Turn it on
	BSP_LED_Init(LED1);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f003 f967 	bl	800478c <BSP_LED_Init>

	// init user button
	ret = BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80014be:	2101      	movs	r1, #1
 80014c0:	2000      	movs	r0, #0
 80014c2:	f003 f8a5 	bl	8004610 <BSP_PB_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a31      	ldr	r2, [pc, #196]	; (8001590 <sensor_init+0xdc>)
 80014ca:	6013      	str	r3, [r2, #0]
	PushButtonState = (BSP_PB_GetState(BUTTON_USER)) ?  0 : 1;
 80014cc:	2000      	movs	r0, #0
 80014ce:	f003 f935 	bl	800473c <BSP_PB_GetState>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <sensor_init+0xe0>)
 80014e2:	601a      	str	r2, [r3, #0]


	// init mems exti 8
	set_mems_int_pin_a_exti();
 80014e4:	f7ff fd9a 	bl	800101c <set_mems_int_pin_a_exti>

	// init ism330dhcx sensor
	ret_uint = Sensor_IO_SPI_CS_Init_All();
 80014e8:	f003 f9cc 	bl	8004884 <Sensor_IO_SPI_CS_Init_All>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <sensor_init+0xe4>)
 80014f2:	701a      	strb	r2, [r3, #0]
	ret = BSP_MOTION_SENSOR_Init(ISM330DHCX_0,MOTION_ACCELERO);
 80014f4:	2102      	movs	r1, #2
 80014f6:	2000      	movs	r0, #0
 80014f8:	f003 fbe6 	bl	8004cc8 <BSP_MOTION_SENSOR_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a24      	ldr	r2, [pc, #144]	; (8001590 <sensor_init+0xdc>)
 8001500:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_SetOutputDataRate(ISM330DHCX_0, MOTION_ACCELERO,ISM330DHCX_ODR);
 8001502:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800159c <sensor_init+0xe8>
 8001506:	2102      	movs	r1, #2
 8001508:	2000      	movs	r0, #0
 800150a:	f003 fca9 	bl	8004e60 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800150e:	4603      	mov	r3, r0
 8001510:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <sensor_init+0xdc>)
 8001512:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_BDR( ISM330DHCX_0,  MOTION_ACCELERO, ISM330DHCX_ODR);
 8001514:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800159c <sensor_init+0xe8>
 8001518:	2102      	movs	r1, #2
 800151a:	2000      	movs	r0, #0
 800151c:	f003 feea 	bl	80052f4 <BSP_MOTION_SENSOR_FIFO_Set_BDR>
 8001520:	4603      	mov	r3, r0
 8001522:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <sensor_init+0xdc>)
 8001524:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_SetFullScale( ISM330DHCX_0,  MOTION_ACCELERO, ISM330DHCX_FS);
 8001526:	2202      	movs	r2, #2
 8001528:	2102      	movs	r1, #2
 800152a:	2000      	movs	r0, #0
 800152c:	f003 fcde 	bl	8004eec <BSP_MOTION_SENSOR_SetFullScale>
 8001530:	4603      	mov	r3, r0
 8001532:	4a17      	ldr	r2, [pc, #92]	; (8001590 <sensor_init+0xdc>)
 8001534:	6013      	str	r3, [r2, #0]


	// get sensor sensitivity
	ret = BSP_MOTION_SENSOR_GetSensitivity(ISM330DHCX_0, MOTION_ACCELERO, &ism330dhcx_acc_sensitivity);
 8001536:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <sensor_init+0xec>)
 8001538:	2102      	movs	r1, #2
 800153a:	2000      	movs	r0, #0
 800153c:	f003 fc4c 	bl	8004dd8 <BSP_MOTION_SENSOR_GetSensitivity>
 8001540:	4603      	mov	r3, r0
 8001542:	4a13      	ldr	r2, [pc, #76]	; (8001590 <sensor_init+0xdc>)
 8001544:	6013      	str	r3, [r2, #0]

	// sensor fifo init
	ret = BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(ISM330DHCX_0, ENABLE);
 8001546:	2101      	movs	r1, #1
 8001548:	2000      	movs	r0, #0
 800154a:	f003 ff1d 	bl	8005388 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>
 800154e:	4603      	mov	r3, r0
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <sensor_init+0xdc>)
 8001552:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level( ISM330DHCX_0, INPUT_BUFFER_SIZE);
 8001554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001558:	2000      	movs	r0, #0
 800155a:	f003 ff3d 	bl	80053d8 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level>
 800155e:	4603      	mov	r3, r0
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <sensor_init+0xdc>)
 8001562:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(ISM330DHCX_0,  ENABLE);
 8001564:	2101      	movs	r1, #1
 8001566:	2000      	movs	r0, #0
 8001568:	f003 ff5e 	bl	8005428 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>
 800156c:	4603      	mov	r3, r0
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <sensor_init+0xdc>)
 8001570:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_Mode(ISM330DHCX_0,  ISM330DHCX_STREAM_MODE);
 8001572:	2106      	movs	r1, #6
 8001574:	2000      	movs	r0, #0
 8001576:	f003 ffc5 	bl	8005504 <BSP_MOTION_SENSOR_FIFO_Set_Mode>
 800157a:	4603      	mov	r3, r0
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <sensor_init+0xdc>)
 800157e:	6013      	str	r3, [r2, #0]

	// AI init
	aiInit();
 8001580:	f00a fb82 	bl	800bc88 <aiInit>
	// PRE PROCESSING init
	pre_processing_init(&pre_processing_data);
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <sensor_init+0xf0>)
 8001586:	f000 fbc6 	bl	8001d16 <pre_processing_init>

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000b20 	.word	0x20000b20
 8001594:	20000d94 	.word	0x20000d94
 8001598:	20000b24 	.word	0x20000b24
 800159c:	43500000 	.word	0x43500000
 80015a0:	20000d98 	.word	0x20000d98
 80015a4:	20000b28 	.word	0x20000b28

080015a8 <sensor_process>:

void sensor_process(void){
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af02      	add	r7, sp, #8
		}
	}*/

	/*if(ButtonEventDetected==1){
		ButtonEventDetected = 0;*/
		if (MemsEventDetected == 1){
 80015ae:	4b5e      	ldr	r3, [pc, #376]	; (8001728 <sensor_process+0x180>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	f040 80a9 	bne.w	800170a <sensor_process+0x162>

			//pre_FIFO_read = BSP_GetTick();
			MemsEventDetected = 0;
 80015b8:	4b5b      	ldr	r3, [pc, #364]	; (8001728 <sensor_process+0x180>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]

			BSP_LED_On(LED1);
 80015be:	2000      	movs	r0, #0
 80015c0:	f003 f92c 	bl	800481c <BSP_LED_On>

			for(int jj=0;jj<num_samples;jj++){
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	e075      	b.n	80016b6 <sensor_process+0x10e>
				BSP_MOTION_SENSOR_FIFO_Get_Data_Word(ISM330DHCX_0, MOTION_ACCELERO, &DataOut);
 80015ca:	4a58      	ldr	r2, [pc, #352]	; (800172c <sensor_process+0x184>)
 80015cc:	2102      	movs	r1, #2
 80015ce:	2000      	movs	r0, #0
 80015d0:	f003 ff52 	bl	8005478 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word>
				ism330dhcx_acc[jj].x = ((float)DataOut[0])*ism330dhcx_acc_sensitivity*0.001; // from [mg] to [g]
 80015d4:	4b55      	ldr	r3, [pc, #340]	; (800172c <sensor_process+0x184>)
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e2:	4b53      	ldr	r3, [pc, #332]	; (8001730 <sensor_process+0x188>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	ee17 0a90 	vmov	r0, s15
 80015f0:	f7fe ffae 	bl	8000550 <__aeabi_f2d>
 80015f4:	a34a      	add	r3, pc, #296	; (adr r3, 8001720 <sensor_process+0x178>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7ff f801 	bl	8000600 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff faf3 	bl	8000bf0 <__aeabi_d2f>
 800160a:	4601      	mov	r1, r0
 800160c:	4849      	ldr	r0, [pc, #292]	; (8001734 <sensor_process+0x18c>)
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4403      	add	r3, r0
 800161a:	6019      	str	r1, [r3, #0]
				ism330dhcx_acc[jj].y = ((float)DataOut[1])*ism330dhcx_acc_sensitivity*0.001;
 800161c:	4b43      	ldr	r3, [pc, #268]	; (800172c <sensor_process+0x184>)
 800161e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <sensor_process+0x188>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001634:	ee17 0a90 	vmov	r0, s15
 8001638:	f7fe ff8a 	bl	8000550 <__aeabi_f2d>
 800163c:	a338      	add	r3, pc, #224	; (adr r3, 8001720 <sensor_process+0x178>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe ffdd 	bl	8000600 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff facf 	bl	8000bf0 <__aeabi_d2f>
 8001652:	4601      	mov	r1, r0
 8001654:	4837      	ldr	r0, [pc, #220]	; (8001734 <sensor_process+0x18c>)
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4403      	add	r3, r0
 8001662:	3304      	adds	r3, #4
 8001664:	6019      	str	r1, [r3, #0]
				ism330dhcx_acc[jj].z = ((float)DataOut[2])*ism330dhcx_acc_sensitivity*0.001;
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <sensor_process+0x184>)
 8001668:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001674:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <sensor_process+0x188>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167e:	ee17 0a90 	vmov	r0, s15
 8001682:	f7fe ff65 	bl	8000550 <__aeabi_f2d>
 8001686:	a326      	add	r3, pc, #152	; (adr r3, 8001720 <sensor_process+0x178>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ffb8 	bl	8000600 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff faaa 	bl	8000bf0 <__aeabi_d2f>
 800169c:	4601      	mov	r1, r0
 800169e:	4825      	ldr	r0, [pc, #148]	; (8001734 <sensor_process+0x18c>)
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4403      	add	r3, r0
 80016ac:	3308      	adds	r3, #8
 80016ae:	6019      	str	r1, [r3, #0]
			for(int jj=0;jj<num_samples;jj++){
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3301      	adds	r3, #1
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <sensor_process+0x190>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d384      	bcc.n	80015ca <sensor_process+0x22>
			}

			// call pre_processing_functions
			pre_processing_process(ism330dhcx_acc, INPUT_BUFFER_SIZE, preprocessing_output_array, INPUT_BUFFER_SIZE/2, &pre_processing_data);
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <sensor_process+0x194>)
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <sensor_process+0x198>)
 80016c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016cc:	4819      	ldr	r0, [pc, #100]	; (8001734 <sensor_process+0x18c>)
 80016ce:	f000 fb4d 	bl	8001d6c <pre_processing_process>

			// call ai process
			aiProcess(preprocessing_output_array, ai_out);
 80016d2:	491c      	ldr	r1, [pc, #112]	; (8001744 <sensor_process+0x19c>)
 80016d4:	481a      	ldr	r0, [pc, #104]	; (8001740 <sensor_process+0x198>)
 80016d6:	f00a fb03 	bl	800bce0 <aiProcess>

			BSP_LED_Off(LED1);
 80016da:	2000      	movs	r0, #0
 80016dc:	f003 f8b8 	bl	8004850 <BSP_LED_Off>
			//post_FIFO_read = BSP_GetTick();

			//time_elapsed = post_FIFO_read - pre_FIFO_read;

			printf("Class: %f, Accuracy: %f \r\n",ai_out[0],ai_out[1]);
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <sensor_process+0x19c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff33 	bl	8000550 <__aeabi_f2d>
 80016ea:	4604      	mov	r4, r0
 80016ec:	460d      	mov	r5, r1
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <sensor_process+0x19c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff2c 	bl	8000550 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001700:	4622      	mov	r2, r4
 8001702:	462b      	mov	r3, r5
 8001704:	4810      	ldr	r0, [pc, #64]	; (8001748 <sensor_process+0x1a0>)
 8001706:	f00e ff83 	bl	8010610 <iprintf>
			//snprintf(string_out, sizeof(string_out), "label: %.0f , Accuracy: %.2f \r\n", ai_out[0], ai_out[1]);
			//CDC_Transmit_FS((uint8_t*)string_out, strlen(string_out));

		}

 800170a:	490b      	ldr	r1, [pc, #44]	; (8001738 <sensor_process+0x190>)
 800170c:	2000      	movs	r0, #0
 800170e:	f003 ff21 	bl	8005554 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples>
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bdb0      	pop	{r4, r5, r7, pc}
 800171a:	bf00      	nop
 800171c:	f3af 8000 	nop.w
 8001720:	d2f1a9fc 	.word	0xd2f1a9fc
 8001724:	3f50624d 	.word	0x3f50624d
 8001728:	20000d9d 	.word	0x20000d9d
 800172c:	20000da8 	.word	0x20000da8
 8001730:	20000d98 	.word	0x20000d98
 8001734:	20000db0 	.word	0x20000db0
 8001738:	20000da4 	.word	0x20000da4
 800173c:	20000b28 	.word	0x20000b28
 8001740:	200019b0 	.word	0x200019b0
 8001744:	20001bb0 	.word	0x20001bb0
 8001748:	08014340 	.word	0x08014340

0800174c <BSP_PB_Callback>:
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <BSP_PB_Callback+0x1c>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	20000da0 	.word	0x20000da0

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_MspInit+0x50>)
 8001774:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001778:	4a10      	ldr	r2, [pc, #64]	; (80017bc <HAL_MspInit+0x50>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_MspInit+0x50>)
 8001784:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_MspInit+0x50>)
 8001792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001796:	4a09      	ldr	r2, [pc, #36]	; (80017bc <HAL_MspInit+0x50>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_MspInit+0x50>)
 80017a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	46020c00 	.word	0x46020c00

080017c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0be      	sub	sp, #248	; 0xf8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	f107 0318 	add.w	r3, r7, #24
 80017dc:	22c8      	movs	r2, #200	; 0xc8
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00d ffae 	bl	800f742 <memset>
  if(hspi->Instance==SPI2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a39      	ldr	r2, [pc, #228]	; (80018d0 <HAL_SPI_MspInit+0x110>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d16a      	bne.n	80018c6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80017f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80017fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	4618      	mov	r0, r3
 800180a:	f006 f82f 	bl	800786c <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001814:	f7ff fe48 	bl	80014a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <HAL_SPI_MspInit+0x114>)
 800181a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800181e:	4a2d      	ldr	r2, [pc, #180]	; (80018d4 <HAL_SPI_MspInit+0x114>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_SPI_MspInit+0x114>)
 800182a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001836:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_SPI_MspInit+0x114>)
 8001838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800183c:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <HAL_SPI_MspInit+0x114>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_SPI_MspInit+0x114>)
 8001848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800184c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_SPI_MspInit+0x114>)
 8001856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800185a:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <HAL_SPI_MspInit+0x114>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_SPI_MspInit+0x114>)
 8001866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001872:	230a      	movs	r3, #10
 8001874:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800188a:	2305      	movs	r3, #5
 800188c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001890:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001894:	4619      	mov	r1, r3
 8001896:	4810      	ldr	r0, [pc, #64]	; (80018d8 <HAL_SPI_MspInit+0x118>)
 8001898:	f004 f988 	bl	8005bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800189c:	2309      	movs	r3, #9
 800189e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b4:	2305      	movs	r3, #5
 80018b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018be:	4619      	mov	r1, r3
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <HAL_SPI_MspInit+0x11c>)
 80018c2:	f004 f973 	bl	8005bac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	37f8      	adds	r7, #248	; 0xf8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40003800 	.word	0x40003800
 80018d4:	46020c00 	.word	0x46020c00
 80018d8:	42022000 	.word	0x42022000
 80018dc:	42020c00 	.word	0x42020c00

080018e0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_SPI_MspDeInit+0x3c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10f      	bne.n	8001912 <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_SPI_MspDeInit+0x40>)
 80018f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018f8:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_SPI_MspDeInit+0x40>)
 80018fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_1|GPIO_PIN_3);
 8001902:	210a      	movs	r1, #10
 8001904:	4807      	ldr	r0, [pc, #28]	; (8001924 <HAL_SPI_MspDeInit+0x44>)
 8001906:	f004 fb29 	bl	8005f5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_3);
 800190a:	2109      	movs	r1, #9
 800190c:	4806      	ldr	r0, [pc, #24]	; (8001928 <HAL_SPI_MspDeInit+0x48>)
 800190e:	f004 fb25 	bl	8005f5c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40003800 	.word	0x40003800
 8001920:	46020c00 	.word	0x46020c00
 8001924:	42022000 	.word	0x42022000
 8001928:	42020c00 	.word	0x42020c00

0800192c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_CRC_MspInit+0x3c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10e      	bne.n	800195c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_CRC_MspInit+0x40>)
 8001940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001944:	4a09      	ldr	r2, [pc, #36]	; (800196c <HAL_CRC_MspInit+0x40>)
 8001946:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800194a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <HAL_CRC_MspInit+0x40>)
 8001950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40023000 	.word	0x40023000
 800196c:	46020c00 	.word	0x46020c00

08001970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b0bc      	sub	sp, #240	; 0xf0
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	22c8      	movs	r2, #200	; 0xc8
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f00d fed6 	bl	800f742 <memset>
  if(huart->Instance==USART2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_UART_MspInit+0xc4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d144      	bne.n	8001a2a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019a0:	f04f 0202 	mov.w	r2, #2
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4618      	mov	r0, r3
 80019b6:	f005 ff59 	bl	800786c <HAL_RCCEx_PeriphCLKConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80019c0:	f7ff fd72 	bl	80014a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_UART_MspInit+0xc8>)
 80019c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019ca:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_UART_MspInit+0xc8>)
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_UART_MspInit+0xc8>)
 80019d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_UART_MspInit+0xc8>)
 80019e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019e8:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <HAL_UART_MspInit+0xc8>)
 80019ea:	f043 0308 	orr.w	r3, r3, #8
 80019ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_UART_MspInit+0xc8>)
 80019f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001a00:	2360      	movs	r3, #96	; 0x60
 8001a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a22:	4619      	mov	r1, r3
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <HAL_UART_MspInit+0xcc>)
 8001a26:	f004 f8c1 	bl	8005bac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	37f0      	adds	r7, #240	; 0xf0
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40004400 	.word	0x40004400
 8001a38:	46020c00 	.word	0x46020c00
 8001a3c:	42020c00 	.word	0x42020c00

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8c:	f003 fdec 	bl	8005668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <EXTI0_IRQHandler>:
  UNUSED(Button);

}

void EXTI0_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f004 fb6d 	bl	8006178 <HAL_GPIO_EXTI_IRQHandler>
	BSP_PB_Callback(BUTTON_USER_PIN);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f7ff fe54 	bl	800174c <BSP_PB_Callback>
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <EXTI8_IRQHandler>:
/* USER CODE END 1 */

void EXTI8_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	HAL_EXTI_IRQHandler(&H_EXTI_8);
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <EXTI8_IRQHandler+0x18>)
 8001aae:	f004 f835 	bl	8005b1c <HAL_EXTI_IRQHandler>
	count++;
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <EXTI8_IRQHandler+0x1c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a02      	ldr	r2, [pc, #8]	; (8001ac4 <EXTI8_IRQHandler+0x1c>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20001bb8 	.word	0x20001bb8

08001ac8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	return 1;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_kill>:

int _kill(int pid, int sig)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ae2:	f00d fdef 	bl	800f6c4 <__errno>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2216      	movs	r2, #22
 8001aea:	601a      	str	r2, [r3, #0]
	return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_exit>:

void _exit (int status)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffe7 	bl	8001ad8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b0a:	e7fe      	b.n	8001b0a <_exit+0x12>

08001b0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e00a      	b.n	8001b34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b1e:	e000      	b.n	8001b22 <_read+0x16>
 8001b20:	bf00      	nop
 8001b22:	4601      	mov	r1, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	b2ca      	uxtb	r2, r1
 8001b2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf0      	blt.n	8001b1e <_read+0x12>
	}

return len;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e009      	b.n	8001b6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	60ba      	str	r2, [r7, #8]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fa8d 	bl	8001080 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbf1      	blt.n	8001b58 <_write+0x12>
	}
	return len;
 8001b74:	687b      	ldr	r3, [r7, #4]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_close>:

int _close(int file)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
	return -1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_isatty>:

int _isatty(int file)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	return 1;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c18:	f00d fd54 	bl	800f6c4 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200c0000 	.word	0x200c0000
 8001c48:	00000400 	.word	0x00000400
 8001c4c:	20001bbc 	.word	0x20001bbc
 8001c50:	20001ef8 	.word	0x20001ef8

08001c54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <SystemInit+0x68>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5e:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <SystemInit+0x68>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <SystemInit+0x6c>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <SystemInit+0x6c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <SystemInit+0x6c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <SystemInit+0x6c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <SystemInit+0x6c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <SystemInit+0x6c>)
 8001c86:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c8a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c8e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <SystemInit+0x6c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <SystemInit+0x6c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <SystemInit+0x6c>)
 8001c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <SystemInit+0x6c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <SystemInit+0x68>)
 8001caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cae:	609a      	str	r2, [r3, #8]
  #endif
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00
 8001cc0:	46020c00 	.word	0x46020c00

08001cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cfc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cc8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cca:	e003      	b.n	8001cd4 <LoopCopyDataInit>

08001ccc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cd0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cd2:	3104      	adds	r1, #4

08001cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cd4:	480b      	ldr	r0, [pc, #44]	; (8001d04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cd8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cda:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cdc:	d3f6      	bcc.n	8001ccc <CopyDataInit>
	ldr	r2, =_sbss
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ce0:	e002      	b.n	8001ce8 <LoopFillZerobss>

08001ce2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ce2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ce4:	f842 3b04 	str.w	r3, [r2], #4

08001ce8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <LoopForever+0x16>)
	cmp	r2, r3
 8001cea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cec:	d3f9      	bcc.n	8001ce2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cee:	f7ff ffb1 	bl	8001c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f00d fced 	bl	800f6d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cf6:	f7ff f9d5 	bl	80010a4 <main>

08001cfa <LoopForever>:

LoopForever:
    b LoopForever
 8001cfa:	e7fe      	b.n	8001cfa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001cfc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001d00:	080696cc 	.word	0x080696cc
	ldr	r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d08:	200009ac 	.word	0x200009ac
	ldr	r2, =_sbss
 8001d0c:	200009c0 	.word	0x200009c0
	ldr	r3, = _ebss
 8001d10:	20001ef8 	.word	0x20001ef8

08001d14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC1_IRQHandler>

08001d16 <pre_processing_init>:

#include "arm_math.h"
#include "params.h"
#include "pre_processing_app.h"

void pre_processing_init(pre_processing_data_t * pre_processing_data) {
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af02      	add	r7, sp, #8
 8001d1c:	6078      	str	r0, [r7, #4]
	arm_status status;

	arm_rfft_fast_init_f32(&((*pre_processing_data).fft_handler), INPUT_BUFFER_SIZE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3318      	adds	r3, #24
 8001d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00a fbbc 	bl	800c4a4 <arm_rfft_fast_init_f32>
	status=arm_dct4_init_f32(&((*pre_processing_data).dct4f32), &((*pre_processing_data).rfftf32), &((*pre_processing_data).cfftradix4f32), TRIANGULAR_FILTERS_BANK_SIZE, TRIANGULAR_FILTERS_BANK_SIZE/2, 0.125);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001d3a:	2340      	movs	r3, #64	; 0x40
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	f00b f852 	bl	800cdec <arm_dct4_init_f32>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	73fb      	strb	r3, [r7, #15]


	pre_processing_data->axis = SELECTED_AXIS;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
	pre_processing_data->triangular_filters_scale = TRIANGULAR_FILTERS_SCALE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
	pre_processing_data->signal_windowing = SIGNAL_WINDOWING;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a

	// Calculation of the triangular filters bank.
	//triangular_filters_bank(INPUT_BUFFER_SIZE, ISM330DHCX_ODR, pre_processing_data->triangular_filters_scale, (*pre_processing_data).bin);
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <pre_processing_process>:

void pre_processing_process(tridimensional_data_t * data_in , uint32_t data_in_size , float32_t * data_out, uint32_t data_out_size, pre_processing_data_t * pre_processing_data) {
 8001d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d70:	b08d      	sub	sp, #52	; 0x34
 8001d72:	af02      	add	r7, sp, #8
 8001d74:	6178      	str	r0, [r7, #20]
 8001d76:	6139      	str	r1, [r7, #16]
 8001d78:	60fa      	str	r2, [r7, #12]
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	466b      	mov	r3, sp
 8001d7e:	461e      	mov	r6, r3
	// Accelerometer axes selection among X, Y, Z.
	float32_t data_1[data_in_size];
 8001d80:	6939      	ldr	r1, [r7, #16]
 8001d82:	460b      	mov	r3, r1
 8001d84:	3b01      	subs	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6039      	str	r1, [r7, #0]
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	0143      	lsls	r3, r0, #5
 8001d9a:	6838      	ldr	r0, [r7, #0]
 8001d9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001da0:	6838      	ldr	r0, [r7, #0]
 8001da2:	0142      	lsls	r2, r0, #5
 8001da4:	2300      	movs	r3, #0
 8001da6:	468a      	mov	sl, r1
 8001da8:	469b      	mov	fp, r3
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001db6:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001dba:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001dbe:	008b      	lsls	r3, r1, #2
 8001dc0:	3307      	adds	r3, #7
 8001dc2:	08db      	lsrs	r3, r3, #3
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	ebad 0d03 	sub.w	sp, sp, r3
 8001dca:	ab02      	add	r3, sp, #8
 8001dcc:	3303      	adds	r3, #3
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	623b      	str	r3, [r7, #32]
	axis_selection(data_in, data_in_size, data_1, data_in_size, pre_processing_data->axis);
 8001dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd6:	f893 3268 	ldrb.w	r3, [r3, #616]	; 0x268
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	6a3a      	ldr	r2, [r7, #32]
 8001de0:	6939      	ldr	r1, [r7, #16]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f000 f85c 	bl	8001ea0 <axis_selection>

	// Remove mean value from the signal.
	float32_t data_2[data_in_size];
 8001de8:	6939      	ldr	r1, [r7, #16]
 8001dea:	460b      	mov	r3, r1
 8001dec:	3b01      	subs	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	2300      	movs	r3, #0
 8001df2:	4688      	mov	r8, r1
 8001df4:	4699      	mov	r9, r3
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001e02:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001e06:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	461d      	mov	r5, r3
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	016b      	lsls	r3, r5, #5
 8001e1a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001e1e:	0162      	lsls	r2, r4, #5
 8001e20:	008b      	lsls	r3, r1, #2
 8001e22:	3307      	adds	r3, #7
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	ebad 0d03 	sub.w	sp, sp, r3
 8001e2c:	ab02      	add	r3, sp, #8
 8001e2e:	3303      	adds	r3, #3
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
	mean_removal(data_1, data_in_size, data_2, data_in_size);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	6939      	ldr	r1, [r7, #16]
 8001e3c:	6a38      	ldr	r0, [r7, #32]
 8001e3e:	f000 f893 	bl	8001f68 <mean_removal>

	// Mel Frequency Cepstral Coefficient calculation.
	//mfcc(data_2, data_in_size, data_out, data_out_size, ((*pre_processing_data).bin), &((*pre_processing_data).dct4f32), &((*pre_processing_data).fft_handler), (*pre_processing_data).signal_windowing);
	fft( data_2,  data_in_size, data_out,  data_out_size, &((*pre_processing_data).fft_handler), (*pre_processing_data).signal_windowing);
 8001e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e44:	3318      	adds	r3, #24
 8001e46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e48:	f892 226a 	ldrb.w	r2, [r2, #618]	; 0x26a
 8001e4c:	9201      	str	r2, [sp, #4]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	6939      	ldr	r1, [r7, #16]
 8001e56:	69b8      	ldr	r0, [r7, #24]
 8001e58:	f000 f90a 	bl	8002070 <fft>
 8001e5c:	46b5      	mov	sp, r6
}
 8001e5e:	bf00      	nop
 8001e60:	372c      	adds	r7, #44	; 0x2c
 8001e62:	46bd      	mov	sp, r7
 8001e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e68 <complex_abs>:
/*----------------------------------------------------------------------------*/
/* Support functions          			      						          */
/*----------------------------------------------------------------------------*/

// calculation of the complex absolute value
float complex_abs(float real, float compl) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e72:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8001e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e7e:	edd7 7a00 	vldr	s15, [r7]
 8001e82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8e:	f012 f91f 	bl	80140d0 <sqrtf>
 8001e92:	eef0 7a40 	vmov.f32	s15, s0
}
 8001e96:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <axis_selection>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Axis selection        						      */
/*----------------------------------------------------------------------------*/

void axis_selection( tridimensional_data_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, axis_t axis) {
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
	if (axis == X)
 8001eae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d118      	bne.n	8001ee8 <axis_selection+0x48>
	{
		for (int i=0; i<data_out_size ; i++){
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e010      	b.n	8001ede <axis_selection+0x3e>
	    	data_out[i]=data_in[i].x;
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	441a      	add	r2, r3
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	440b      	add	r3, r1
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	3301      	adds	r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d8ea      	bhi.n	8001ebc <axis_selection+0x1c>
	{
		for (int i=0; i<data_out_size ; i++){
	    	data_out[i]=data_in[i].z;
	    }
	}
}
 8001ee6:	e038      	b.n	8001f5a <axis_selection+0xba>
	else if (axis == Y)
 8001ee8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d118      	bne.n	8001f22 <axis_selection+0x82>
		for (int i=0; i<data_out_size ; i++){
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e010      	b.n	8001f18 <axis_selection+0x78>
	    	data_out[i]=data_in[i].y;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	461a      	mov	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	441a      	add	r2, r3
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	440b      	add	r3, r1
 8001f0e:	6852      	ldr	r2, [r2, #4]
 8001f10:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8ea      	bhi.n	8001ef6 <axis_selection+0x56>
}
 8001f20:	e01b      	b.n	8001f5a <axis_selection+0xba>
	else if (axis == Z)
 8001f22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d117      	bne.n	8001f5a <axis_selection+0xba>
		for (int i=0; i<data_out_size ; i++){
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e010      	b.n	8001f52 <axis_selection+0xb2>
	    	data_out[i]=data_in[i].z;
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	441a      	add	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	440b      	add	r3, r1
 8001f48:	6892      	ldr	r2, [r2, #8]
 8001f4a:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d8ea      	bhi.n	8001f30 <axis_selection+0x90>
}
 8001f5a:	bf00      	nop
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <mean_removal>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Remove mean from signal     			          */
/*----------------------------------------------------------------------------*/

void mean_removal (float32_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]

	static float32_t mean;

	// calculation of the signal mean value
	arm_mean_f32(data_in, data_in_size, &mean);
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <mean_removal+0x58>)
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f00a f91e 	bl	800c1bc <arm_mean_f32>

	// subtract the mean value from the signal in order to remove gravity effect on the accelerometric data
	for (int i=0 ; i < data_out_size ; i++){
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	e013      	b.n	8001fae <mean_removal+0x46>
		data_out[i] = data_in[i] - mean;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	ed93 7a00 	vldr	s14, [r3]
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <mean_removal+0x58>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa4:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0 ; i < data_out_size ; i++){
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3301      	adds	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d8e7      	bhi.n	8001f86 <mean_removal+0x1e>
	}
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20001bc0 	.word	0x20001bc0

08001fc4 <hanning>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Multiply the Hanning window to the input signal   */
/*----------------------------------------------------------------------------*/

void hanning(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < data_in_size; i++) {
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e03e      	b.n	8002056 <hanning+0x92>
		float32_t multiplier = 0.5 * (1 - arm_cos_f32((float32_t) 2*PI*i/(data_out_size-1)));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002068 <hanning+0xa4>
 8001fe6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ffa:	eeb0 0a66 	vmov.f32	s0, s13
 8001ffe:	f00a ff69 	bl	800ced4 <arm_cos_f32>
 8002002:	eef0 7a40 	vmov.f32	s15, s0
 8002006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200e:	ee17 0a90 	vmov	r0, s15
 8002012:	f7fe fa9d 	bl	8000550 <__aeabi_f2d>
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <hanning+0xa8>)
 800201c:	f7fe faf0 	bl	8000600 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fde2 	bl	8000bf0 <__aeabi_d2f>
 800202c:	4603      	mov	r3, r0
 800202e:	613b      	str	r3, [r7, #16]
		data_out[i] = multiplier * data_in[i];
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	ed93 7a00 	vldr	s14, [r3]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	edd7 7a04 	vldr	s15, [r7, #16]
 8002048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204c:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < data_in_size; i++) {
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	429a      	cmp	r2, r3
 800205c:	d8bc      	bhi.n	8001fd8 <hanning+0x14>
	}
}
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40c90fdb 	.word	0x40c90fdb
 800206c:	3fe00000 	.word	0x3fe00000

08002070 <fft>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  FFT Calculation using CMSIS DSP Library           */
/*----------------------------------------------------------------------------*/

void fft(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, arm_rfft_fast_instance_f32 * fft_handler, signal_windowing_t signal_windowing) {
 8002070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002074:	b089      	sub	sp, #36	; 0x24
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	466b      	mov	r3, sp
 8002082:	461e      	mov	r6, r3

	float32_t fft_out_buf[data_in_size];
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	460b      	mov	r3, r1
 8002088:	3b01      	subs	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	2300      	movs	r3, #0
 800208e:	4688      	mov	r8, r1
 8002090:	4699      	mov	r9, r3
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800209e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80020a2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80020a6:	2300      	movs	r3, #0
 80020a8:	460c      	mov	r4, r1
 80020aa:	461d      	mov	r5, r3
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	016b      	lsls	r3, r5, #5
 80020b6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80020ba:	0162      	lsls	r2, r4, #5
 80020bc:	008b      	lsls	r3, r1, #2
 80020be:	3307      	adds	r3, #7
 80020c0:	08db      	lsrs	r3, r3, #3
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	ebad 0d03 	sub.w	sp, sp, r3
 80020c8:	466b      	mov	r3, sp
 80020ca:	3303      	adds	r3, #3
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	613b      	str	r3, [r7, #16]

	switch (signal_windowing){
 80020d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d106      	bne.n	80020e8 <fft+0x78>
		case HANNING:
		{
			hanning(data_in, data_in_size, data_in, data_in_size);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7ff ff6f 	bl	8001fc4 <hanning>
			break;
 80020e6:	e000      	b.n	80020ea <fft+0x7a>
		}
		default: {
			// no window applied (rectangular case)
			break;
 80020e8:	bf00      	nop
		}
	}

	arm_rfft_fast_f32(fft_handler, (float32_t*)  data_in, (float32_t*) fft_out_buf, 0);
 80020ea:	2300      	movs	r3, #0
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68f9      	ldr	r1, [r7, #12]
 80020f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020f2:	f00a fabd 	bl	800c670 <arm_rfft_fast_f32>

	int freqpoint = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]

	for (int i=0;   i<data_in_size   ; i=i+2) {
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e036      	b.n	800216e <fft+0xfe>
	  data_out[freqpoint] =(complex_abs(fft_out_buf[i], fft_out_buf[i+1])); //(sqrt(data_in_size));
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	3301      	adds	r3, #1
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	ed93 7a00 	vldr	s14, [r3]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	18d4      	adds	r4, r2, r3
 8002122:	eef0 0a47 	vmov.f32	s1, s14
 8002126:	eeb0 0a67 	vmov.f32	s0, s15
 800212a:	f7ff fe9d 	bl	8001e68 <complex_abs>
 800212e:	eef0 7a40 	vmov.f32	s15, s0
 8002132:	edc4 7a00 	vstr	s15, [r4]
	  //data_out[freqpoint] = 2 * data_out[freqpoint]*data_out[freqpoint] /(float32_t)ISM330DHCX_ODR;

	  if(data_out[freqpoint] < 1e-3){
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fa05 	bl	8000550 <__aeabi_f2d>
 8002146:	a311      	add	r3, pc, #68	; (adr r3, 800218c <fft+0x11c>)
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	f7fe fcca 	bl	8000ae4 <__aeabi_dcmplt>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <fft+0xf2>
		  data_out[freqpoint] = 1e-3;
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <fft+0x118>)
 8002160:	601a      	str	r2, [r3, #0]
	  }
	  freqpoint++;
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	3301      	adds	r3, #1
 8002166:	61bb      	str	r3, [r7, #24]
	for (int i=0;   i<data_in_size   ; i=i+2) {
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	3302      	adds	r3, #2
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	429a      	cmp	r2, r3
 8002174:	d8c4      	bhi.n	8002100 <fft+0x90>
 8002176:	46b5      	mov	sp, r6
	}
}
 8002178:	bf00      	nop
 800217a:	3724      	adds	r7, #36	; 0x24
 800217c:	46bd      	mov	sp, r7
 800217e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002182:	bf00      	nop
 8002184:	f3af 8000 	nop.w
 8002188:	3a83126f 	.word	0x3a83126f
 800218c:	d2f1a9fc 	.word	0xd2f1a9fc
 8002190:	3f50624d 	.word	0x3f50624d

08002194 <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	e04d      	b.n	800224c <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	7b1a      	ldrb	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	699a      	ldr	r2, [r3, #24]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <ISM330DHCX_RegisterBusIO+0xc4>)
 80021ec:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1a      	ldr	r2, [pc, #104]	; (800225c <ISM330DHCX_RegisterBusIO+0xc8>)
 80021f2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e020      	b.n	800224c <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4798      	blx	r3
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e016      	b.n	800224c <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d112      	bne.n	800224c <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10d      	bne.n	800224c <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002230:	230c      	movs	r3, #12
 8002232:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8002234:	7afb      	ldrb	r3, [r7, #11]
 8002236:	461a      	mov	r2, r3
 8002238:	2112      	movs	r1, #18
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fd61 	bl	8002d02 <ISM330DHCX_Write_Reg>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800224c:	68fb      	ldr	r3, [r7, #12]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	08003595 	.word	0x08003595
 800225c:	080035cb 	.word	0x080035cb

08002260 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	331c      	adds	r3, #28
 800226c:	2101      	movs	r1, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f001 ff43 	bl	80040fa <ism330dhcx_device_conf_set>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	e078      	b.n	8002372 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	331c      	adds	r3, #28
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f001 ffba 	bl	8004200 <ism330dhcx_auto_increment_set>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e06c      	b.n	8002372 <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	331c      	adds	r3, #28
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f001 ff88 	bl	80041b4 <ism330dhcx_reset_set>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	e060      	b.n	8002372 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	331c      	adds	r3, #28
 80022b4:	2101      	movs	r1, #1
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 ffa2 	bl	8004200 <ism330dhcx_auto_increment_set>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	e054      	b.n	8002372 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	331c      	adds	r3, #28
 80022cc:	2101      	movs	r1, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 fe46 	bl	8003f60 <ism330dhcx_block_data_update_set>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	e048      	b.n	8002372 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	331c      	adds	r3, #28
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 f858 	bl	800439c <ism330dhcx_fifo_mode_set>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	e03c      	b.n	8002372 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2204      	movs	r2, #4
 80022fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	331c      	adds	r3, #28
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f001 fa08 	bl	800371c <ism330dhcx_xl_data_rate_set>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	e02c      	b.n	8002372 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	331c      	adds	r3, #28
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f001 f99e 	bl	8003660 <ism330dhcx_xl_full_scale_set>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	e020      	b.n	8002372 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2204      	movs	r2, #4
 8002334:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	331c      	adds	r3, #28
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f001 fc3c 	bl	8003bbc <ism330dhcx_gy_data_rate_set>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	e010      	b.n	8002372 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	331c      	adds	r3, #28
 8002354:	210c      	movs	r1, #12
 8002356:	4618      	mov	r0, r3
 8002358:	f001 fbb8 	bl	8003acc <ism330dhcx_gy_full_scale_set>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	e004      	b.n	8002372 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f888 	bl	8002498 <ISM330DHCX_ACC_Disable>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	e015      	b.n	80023c0 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 fa92 	bl	80028be <ISM330DHCX_GYRO_Disable>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
 80023a4:	e00c      	b.n	80023c0 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	331c      	adds	r3, #28
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f001 feda 	bl	8004192 <ism330dhcx_device_id_get>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
 80023e8:	e000      	b.n	80023ec <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2201      	movs	r2, #1
 8002408:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2200      	movs	r2, #0
 800240e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800241c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2210      	movs	r2, #16
 8002422:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <ISM330DHCX_GetCapabilities+0x58>)
 800242e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4a06      	ldr	r2, [pc, #24]	; (800244c <ISM330DHCX_GetCapabilities+0x58>)
 8002434:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	45d05800 	.word	0x45d05800

08002450 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e014      	b.n	8002490 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f103 021c 	add.w	r2, r3, #28
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f001 f951 	bl	800371c <ism330dhcx_xl_data_rate_set>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8002480:	f04f 33ff 	mov.w	r3, #4294967295
 8002484:	e004      	b.n	8002490 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e01f      	b.n	80024ee <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f103 021c 	add.w	r2, r3, #28
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	332b      	adds	r3, #43	; 0x2b
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f001 fa9e 	bl	80039fc <ism330dhcx_xl_data_rate_get>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	e010      	b.n	80024ee <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	331c      	adds	r3, #28
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f001 f922 	bl	800371c <ism330dhcx_xl_data_rate_set>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	e004      	b.n	80024ee <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	331c      	adds	r3, #28
 800250a:	f107 020b 	add.w	r2, r7, #11
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f001 f8cb 	bl	80036ac <ism330dhcx_xl_full_scale_get>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295
 8002520:	e023      	b.n	800256a <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002522:	7afb      	ldrb	r3, [r7, #11]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d81b      	bhi.n	8002560 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8002528:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 800252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252e:	bf00      	nop
 8002530:	08002541 	.word	0x08002541
 8002534:	08002559 	.word	0x08002559
 8002538:	08002549 	.word	0x08002549
 800253c:	08002551 	.word	0x08002551
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8002544:	601a      	str	r2, [r3, #0]
      break;
 8002546:	e00f      	b.n	8002568 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 800254c:	601a      	str	r2, [r3, #0]
      break;
 800254e:	e00b      	b.n	8002568 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8002554:	601a      	str	r2, [r3, #0]
      break;
 8002556:	e007      	b.n	8002568 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 800255c:	601a      	str	r2, [r3, #0]
      break;
 800255e:	e003      	b.n	8002568 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	60fb      	str	r3, [r7, #12]
      break;
 8002566:	bf00      	nop
  }

  return ret;
 8002568:	68fb      	ldr	r3, [r7, #12]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	3d79db23 	.word	0x3d79db23
 8002578:	3df9db23 	.word	0x3df9db23
 800257c:	3e79db23 	.word	0x3e79db23
 8002580:	3ef9db23 	.word	0x3ef9db23

08002584 <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	331c      	adds	r3, #28
 8002596:	f107 020b 	add.w	r2, r7, #11
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f001 fa2d 	bl	80039fc <ism330dhcx_xl_data_rate_get>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ac:	e04e      	b.n	800264c <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80025ae:	7afb      	ldrb	r3, [r7, #11]
 80025b0:	2b0a      	cmp	r3, #10
 80025b2:	d846      	bhi.n	8002642 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 80025b4:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025e9 	.word	0x080025e9
 80025c0:	080025f3 	.word	0x080025f3
 80025c4:	080025fb 	.word	0x080025fb
 80025c8:	08002603 	.word	0x08002603
 80025cc:	0800260b 	.word	0x0800260b
 80025d0:	08002613 	.word	0x08002613
 80025d4:	0800261b 	.word	0x0800261b
 80025d8:	08002623 	.word	0x08002623
 80025dc:	0800262b 	.word	0x0800262b
 80025e0:	08002633 	.word	0x08002633
 80025e4:	0800263b 	.word	0x0800263b
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
      break;
 80025f0:	e02b      	b.n	800264a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	4a17      	ldr	r2, [pc, #92]	; (8002654 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 80025f6:	601a      	str	r2, [r3, #0]
      break;
 80025f8:	e027      	b.n	800264a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	4a16      	ldr	r2, [pc, #88]	; (8002658 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 80025fe:	601a      	str	r2, [r3, #0]
      break;
 8002600:	e023      	b.n	800264a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8002606:	601a      	str	r2, [r3, #0]
      break;
 8002608:	e01f      	b.n	800264a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 800260e:	601a      	str	r2, [r3, #0]
      break;
 8002610:	e01b      	b.n	800264a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	4a13      	ldr	r2, [pc, #76]	; (8002664 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8002616:	601a      	str	r2, [r3, #0]
      break;
 8002618:	e017      	b.n	800264a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	4a12      	ldr	r2, [pc, #72]	; (8002668 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 800261e:	601a      	str	r2, [r3, #0]
      break;
 8002620:	e013      	b.n	800264a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	4a11      	ldr	r2, [pc, #68]	; (800266c <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8002626:	601a      	str	r2, [r3, #0]
      break;
 8002628:	e00f      	b.n	800264a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	4a10      	ldr	r2, [pc, #64]	; (8002670 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 800262e:	601a      	str	r2, [r3, #0]
      break;
 8002630:	e00b      	b.n	800264a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8002636:	601a      	str	r2, [r3, #0]
      break;
 8002638:	e007      	b.n	800264a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 800263e:	601a      	str	r2, [r3, #0]
      break;
 8002640:	e003      	b.n	800264a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	60fb      	str	r3, [r7, #12]
      break;
 8002648:	bf00      	nop
  }

  return ret;
 800264a:	68fb      	ldr	r3, [r7, #12]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	41480000 	.word	0x41480000
 8002658:	41d00000 	.word	0x41d00000
 800265c:	42500000 	.word	0x42500000
 8002660:	42d00000 	.word	0x42d00000
 8002664:	43500000 	.word	0x43500000
 8002668:	43d00000 	.word	0x43d00000
 800266c:	44504000 	.word	0x44504000
 8002670:	44d04000 	.word	0x44d04000
 8002674:	45504000 	.word	0x45504000
 8002678:	45d05800 	.word	0x45d05800

0800267c <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800268e:	2b01      	cmp	r3, #1
 8002690:	d106      	bne.n	80026a0 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002692:	ed97 0a00 	vldr	s0, [r7]
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fd60 	bl	800315c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 800269c:	4603      	mov	r3, r0
 800269e:	e005      	b.n	80026ac <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80026a0:	ed97 0a00 	vldr	s0, [r7]
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fde5 	bl	8003274 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 80026aa:	4603      	mov	r3, r0
  }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	331c      	adds	r3, #28
 80026c6:	f107 020b 	add.w	r2, r7, #11
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 ffed 	bl	80036ac <ism330dhcx_xl_full_scale_get>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295
 80026dc:	e023      	b.n	8002726 <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80026de:	7afb      	ldrb	r3, [r7, #11]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d81b      	bhi.n	800271c <ISM330DHCX_ACC_GetFullScale+0x68>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <ISM330DHCX_ACC_GetFullScale+0x38>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	080026fd 	.word	0x080026fd
 80026f0:	08002715 	.word	0x08002715
 80026f4:	08002705 	.word	0x08002705
 80026f8:	0800270d 	.word	0x0800270d
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2202      	movs	r2, #2
 8002700:	601a      	str	r2, [r3, #0]
      break;
 8002702:	e00f      	b.n	8002724 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2204      	movs	r2, #4
 8002708:	601a      	str	r2, [r3, #0]
      break;
 800270a:	e00b      	b.n	8002724 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2208      	movs	r2, #8
 8002710:	601a      	str	r2, [r3, #0]
      break;
 8002712:	e007      	b.n	8002724 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2210      	movs	r2, #16
 8002718:	601a      	str	r2, [r3, #0]
      break;
 800271a:	e003      	b.n	8002724 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	60fb      	str	r3, [r7, #12]
      break;
 8002722:	bf00      	nop
  }

  return ret;
 8002724:	68fb      	ldr	r3, [r7, #12]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop

08002730 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b02      	cmp	r3, #2
 800273e:	dd0b      	ble.n	8002758 <ISM330DHCX_ACC_SetFullScale+0x28>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b04      	cmp	r3, #4
 8002744:	dd06      	ble.n	8002754 <ISM330DHCX_ACC_SetFullScale+0x24>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b08      	cmp	r3, #8
 800274a:	dc01      	bgt.n	8002750 <ISM330DHCX_ACC_SetFullScale+0x20>
 800274c:	2303      	movs	r3, #3
 800274e:	e004      	b.n	800275a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002750:	2301      	movs	r3, #1
 8002752:	e002      	b.n	800275a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002754:	2302      	movs	r3, #2
 8002756:	e000      	b.n	800275a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002758:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 800275a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	331c      	adds	r3, #28
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f000 ff7b 	bl	8003660 <ism330dhcx_xl_full_scale_set>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8002770:	f04f 33ff 	mov.w	r3, #4294967295
 8002774:	e000      	b.n	8002778 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	331c      	adds	r3, #28
 800278e:	f107 0208 	add.w	r2, r7, #8
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f001 fc54 	bl	8004042 <ism330dhcx_acceleration_raw_get>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	e00c      	b.n	80027c0 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80027a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80027ae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80027b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	331c      	adds	r3, #28
 80027dc:	f107 0210 	add.w	r2, r7, #16
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 fc2d 	bl	8004042 <ism330dhcx_acceleration_raw_get>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	e03c      	b.n	800286e <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fe7c 	bl	80024f8 <ISM330DHCX_ACC_GetSensitivity>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	e030      	b.n	800286e <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800280c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002818:	edd7 7a03 	vldr	s15, [r7, #12]
 800281c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002824:	ee17 2a90 	vmov	r2, s15
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800282c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002838:	edd7 7a03 	vldr	s15, [r7, #12]
 800283c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002844:	ee17 2a90 	vmov	r2, s15
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800284c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002858:	edd7 7a03 	vldr	s15, [r7, #12]
 800285c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002864:	ee17 2a90 	vmov	r2, s15
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e014      	b.n	80028b6 <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f103 021c 	add.w	r2, r3, #28
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f001 f98e 	bl	8003bbc <ism330dhcx_gy_data_rate_set>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
 80028aa:	e004      	b.n	80028b6 <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e01f      	b.n	8002914 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f103 021c 	add.w	r2, r3, #28
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	332c      	adds	r3, #44	; 0x2c
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f001 fadb 	bl	8003e9c <ism330dhcx_gy_data_rate_get>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
 80028f0:	e010      	b.n	8002914 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	331c      	adds	r3, #28
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 f95f 	bl	8003bbc <ism330dhcx_gy_data_rate_set>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	e004      	b.n	8002914 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	331c      	adds	r3, #28
 800292e:	f107 020b 	add.w	r2, r7, #11
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f001 f8ef 	bl	8003b18 <ism330dhcx_gy_full_scale_get>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295
 8002944:	e039      	b.n	80029ba <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8002946:	7afb      	ldrb	r3, [r7, #11]
 8002948:	2b0c      	cmp	r3, #12
 800294a:	d831      	bhi.n	80029b0 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 800294c:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 800294e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002952:	bf00      	nop
 8002954:	08002991 	.word	0x08002991
 8002958:	080029b1 	.word	0x080029b1
 800295c:	08002989 	.word	0x08002989
 8002960:	080029b1 	.word	0x080029b1
 8002964:	08002999 	.word	0x08002999
 8002968:	080029b1 	.word	0x080029b1
 800296c:	080029b1 	.word	0x080029b1
 8002970:	080029b1 	.word	0x080029b1
 8002974:	080029a1 	.word	0x080029a1
 8002978:	080029b1 	.word	0x080029b1
 800297c:	080029b1 	.word	0x080029b1
 8002980:	080029b1 	.word	0x080029b1
 8002984:	080029a9 	.word	0x080029a9
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 800298c:	601a      	str	r2, [r3, #0]
      break;
 800298e:	e013      	b.n	80029b8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8002994:	601a      	str	r2, [r3, #0]
      break;
 8002996:	e00f      	b.n	80029b8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 800299c:	601a      	str	r2, [r3, #0]
      break;
 800299e:	e00b      	b.n	80029b8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 80029a4:	601a      	str	r2, [r3, #0]
      break;
 80029a6:	e007      	b.n	80029b8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 80029ac:	601a      	str	r2, [r3, #0]
      break;
 80029ae:	e003      	b.n	80029b8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	60fb      	str	r3, [r7, #12]
      break;
 80029b6:	bf00      	nop
  }

  return ret;
 80029b8:	68fb      	ldr	r3, [r7, #12]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	408c0000 	.word	0x408c0000
 80029c8:	410c0000 	.word	0x410c0000
 80029cc:	418c0000 	.word	0x418c0000
 80029d0:	420c0000 	.word	0x420c0000
 80029d4:	428c0000 	.word	0x428c0000

080029d8 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	331c      	adds	r3, #28
 80029ea:	f107 020b 	add.w	r2, r7, #11
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 fa53 	bl	8003e9c <ism330dhcx_gy_data_rate_get>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002a00:	e04e      	b.n	8002aa0 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8002a02:	7afb      	ldrb	r3, [r7, #11]
 8002a04:	2b0a      	cmp	r3, #10
 8002a06:	d846      	bhi.n	8002a96 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8002a08:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a3d 	.word	0x08002a3d
 8002a14:	08002a47 	.word	0x08002a47
 8002a18:	08002a4f 	.word	0x08002a4f
 8002a1c:	08002a57 	.word	0x08002a57
 8002a20:	08002a5f 	.word	0x08002a5f
 8002a24:	08002a67 	.word	0x08002a67
 8002a28:	08002a6f 	.word	0x08002a6f
 8002a2c:	08002a77 	.word	0x08002a77
 8002a30:	08002a7f 	.word	0x08002a7f
 8002a34:	08002a87 	.word	0x08002a87
 8002a38:	08002a8f 	.word	0x08002a8f
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
      break;
 8002a44:	e02b      	b.n	8002a9e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8002a4a:	601a      	str	r2, [r3, #0]
      break;
 8002a4c:	e027      	b.n	8002a9e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	4a16      	ldr	r2, [pc, #88]	; (8002aac <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8002a52:	601a      	str	r2, [r3, #0]
      break;
 8002a54:	e023      	b.n	8002a9e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8002a5a:	601a      	str	r2, [r3, #0]
      break;
 8002a5c:	e01f      	b.n	8002a9e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8002a62:	601a      	str	r2, [r3, #0]
      break;
 8002a64:	e01b      	b.n	8002a9e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8002a6a:	601a      	str	r2, [r3, #0]
      break;
 8002a6c:	e017      	b.n	8002a9e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	4a12      	ldr	r2, [pc, #72]	; (8002abc <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8002a72:	601a      	str	r2, [r3, #0]
      break;
 8002a74:	e013      	b.n	8002a9e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8002a7a:	601a      	str	r2, [r3, #0]
      break;
 8002a7c:	e00f      	b.n	8002a9e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	4a10      	ldr	r2, [pc, #64]	; (8002ac4 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8002a82:	601a      	str	r2, [r3, #0]
      break;
 8002a84:	e00b      	b.n	8002a9e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	4a0f      	ldr	r2, [pc, #60]	; (8002ac8 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8002a8a:	601a      	str	r2, [r3, #0]
      break;
 8002a8c:	e007      	b.n	8002a9e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8002a92:	601a      	str	r2, [r3, #0]
      break;
 8002a94:	e003      	b.n	8002a9e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	60fb      	str	r3, [r7, #12]
      break;
 8002a9c:	bf00      	nop
  }

  return ret;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	41480000 	.word	0x41480000
 8002aac:	41d00000 	.word	0x41d00000
 8002ab0:	42500000 	.word	0x42500000
 8002ab4:	42d00000 	.word	0x42d00000
 8002ab8:	43500000 	.word	0x43500000
 8002abc:	43d00000 	.word	0x43d00000
 8002ac0:	44504000 	.word	0x44504000
 8002ac4:	44d04000 	.word	0x44d04000
 8002ac8:	45504000 	.word	0x45504000
 8002acc:	45d05800 	.word	0x45d05800

08002ad0 <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d106      	bne.n	8002af4 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002ae6:	ed97 0a00 	vldr	s0, [r7]
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fc44 	bl	8003378 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8002af0:	4603      	mov	r3, r0
 8002af2:	e005      	b.n	8002b00 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002af4:	ed97 0a00 	vldr	s0, [r7]
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fcc9 	bl	8003490 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 8002afe:	4603      	mov	r3, r0
  }
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	331c      	adds	r3, #28
 8002b1a:	f107 020b 	add.w	r2, r7, #11
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fff9 	bl	8003b18 <ism330dhcx_gy_full_scale_get>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b30:	e03c      	b.n	8002bac <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 8002b32:	7afb      	ldrb	r3, [r7, #11]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	d834      	bhi.n	8002ba2 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b7d 	.word	0x08002b7d
 8002b44:	08002ba3 	.word	0x08002ba3
 8002b48:	08002b75 	.word	0x08002b75
 8002b4c:	08002ba3 	.word	0x08002ba3
 8002b50:	08002b85 	.word	0x08002b85
 8002b54:	08002ba3 	.word	0x08002ba3
 8002b58:	08002ba3 	.word	0x08002ba3
 8002b5c:	08002ba3 	.word	0x08002ba3
 8002b60:	08002b8f 	.word	0x08002b8f
 8002b64:	08002ba3 	.word	0x08002ba3
 8002b68:	08002ba3 	.word	0x08002ba3
 8002b6c:	08002ba3 	.word	0x08002ba3
 8002b70:	08002b99 	.word	0x08002b99
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	227d      	movs	r2, #125	; 0x7d
 8002b78:	601a      	str	r2, [r3, #0]
      break;
 8002b7a:	e016      	b.n	8002baa <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	22fa      	movs	r2, #250	; 0xfa
 8002b80:	601a      	str	r2, [r3, #0]
      break;
 8002b82:	e012      	b.n	8002baa <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b8a:	601a      	str	r2, [r3, #0]
      break;
 8002b8c:	e00d      	b.n	8002baa <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b94:	601a      	str	r2, [r3, #0]
      break;
 8002b96:	e008      	b.n	8002baa <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b9e:	601a      	str	r2, [r3, #0]
      break;
 8002ba0:	e003      	b.n	8002baa <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba6:	60fb      	str	r3, [r7, #12]
      break;
 8002ba8:	bf00      	nop
  }

  return ret;
 8002baa:	68fb      	ldr	r3, [r7, #12]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b7d      	cmp	r3, #125	; 0x7d
 8002bc2:	dd12      	ble.n	8002bea <ISM330DHCX_GYRO_SetFullScale+0x36>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2bfa      	cmp	r3, #250	; 0xfa
 8002bc8:	dd0d      	ble.n	8002be6 <ISM330DHCX_GYRO_SetFullScale+0x32>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bd0:	dd07      	ble.n	8002be2 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd8:	dc01      	bgt.n	8002bde <ISM330DHCX_GYRO_SetFullScale+0x2a>
 8002bda:	2308      	movs	r3, #8
 8002bdc:	e006      	b.n	8002bec <ISM330DHCX_GYRO_SetFullScale+0x38>
 8002bde:	230c      	movs	r3, #12
 8002be0:	e004      	b.n	8002bec <ISM330DHCX_GYRO_SetFullScale+0x38>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e002      	b.n	8002bec <ISM330DHCX_GYRO_SetFullScale+0x38>
 8002be6:	2300      	movs	r3, #0
 8002be8:	e000      	b.n	8002bec <ISM330DHCX_GYRO_SetFullScale+0x38>
 8002bea:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8002bec:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	331c      	adds	r3, #28
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 ff68 	bl	8003acc <ism330dhcx_gy_full_scale_set>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	e000      	b.n	8002c0a <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	331c      	adds	r3, #28
 8002c20:	f107 0208 	add.w	r2, r7, #8
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 f9c0 	bl	8003fac <ism330dhcx_angular_rate_raw_get>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
 8002c36:	e00c      	b.n	8002c52 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002c38:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002c40:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002c48:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	331c      	adds	r3, #28
 8002c68:	f107 0210 	add.w	r2, r7, #16
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 f99c 	bl	8003fac <ism330dhcx_angular_rate_raw_get>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	e03c      	b.n	8002cfa <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fe48 	bl	800291c <ISM330DHCX_GYRO_GetSensitivity>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	e030      	b.n	8002cfa <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002c98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb0:	ee17 2a90 	vmov	r2, s15
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002cb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cbc:	ee07 3a90 	vmov	s15, r3
 8002cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd0:	ee17 2a90 	vmov	r2, s15
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002cd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf0:	ee17 2a90 	vmov	r2, s15
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70fb      	strb	r3, [r7, #3]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f103 001c 	add.w	r0, r3, #28
 8002d18:	1cba      	adds	r2, r7, #2
 8002d1a:	78f9      	ldrb	r1, [r7, #3]
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f000 fc87 	bl	8003630 <ism330dhcx_write_reg>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2c:	e000      	b.n	8002d30 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <ISM330DHCX_FIFO_Get_Num_Samples>:
  * @param  pObj the device pObj
  * @param  NumSamples number of samples
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Num_Samples(ISM330DHCX_Object_t *pObj, uint16_t *NumSamples)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_fifo_data_level_get(&(pObj->Ctx), NumSamples) != ISM330DHCX_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	331c      	adds	r3, #28
 8002d46:	6839      	ldr	r1, [r7, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fb4d 	bl	80043e8 <ism330dhcx_fifo_data_level_get>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <ISM330DHCX_FIFO_Get_Num_Samples+0x22>
  {
    return ISM330DHCX_ERROR;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
 8002d58:	e000      	b.n	8002d5c <ISM330DHCX_FIFO_Get_Num_Samples+0x24>
  }

  return ISM330DHCX_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <ISM330DHCX_FIFO_ACC_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Odr FIFO ODR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_ACC_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_xl_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz
 8002d70:	edd7 7a00 	vldr	s15, [r7]
 8002d74:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	d801      	bhi.n	8002d86 <ISM330DHCX_FIFO_ACC_Set_BDR+0x22>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e058      	b.n	8002e38 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002d86:	edd7 7a00 	vldr	s15, [r7]
 8002d8a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d96:	d801      	bhi.n	8002d9c <ISM330DHCX_FIFO_ACC_Set_BDR+0x38>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e04d      	b.n	8002e38 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002d9c:	edd7 7a00 	vldr	s15, [r7]
 8002da0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002e60 <ISM330DHCX_FIFO_ACC_Set_BDR+0xfc>
 8002da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	d801      	bhi.n	8002db2 <ISM330DHCX_FIFO_ACC_Set_BDR+0x4e>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e042      	b.n	8002e38 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002db2:	edd7 7a00 	vldr	s15, [r7]
 8002db6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002e64 <ISM330DHCX_FIFO_ACC_Set_BDR+0x100>
 8002dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	d801      	bhi.n	8002dc8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x64>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	e037      	b.n	8002e38 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002dc8:	edd7 7a00 	vldr	s15, [r7]
 8002dcc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002e68 <ISM330DHCX_FIFO_ACC_Set_BDR+0x104>
 8002dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd8:	d801      	bhi.n	8002dde <ISM330DHCX_FIFO_ACC_Set_BDR+0x7a>
 8002dda:	2305      	movs	r3, #5
 8002ddc:	e02c      	b.n	8002e38 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002dde:	edd7 7a00 	vldr	s15, [r7]
 8002de2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002e6c <ISM330DHCX_FIFO_ACC_Set_BDR+0x108>
 8002de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dee:	d801      	bhi.n	8002df4 <ISM330DHCX_FIFO_ACC_Set_BDR+0x90>
 8002df0:	2306      	movs	r3, #6
 8002df2:	e021      	b.n	8002e38 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002df4:	edd7 7a00 	vldr	s15, [r7]
 8002df8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002e70 <ISM330DHCX_FIFO_ACC_Set_BDR+0x10c>
 8002dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e04:	d801      	bhi.n	8002e0a <ISM330DHCX_FIFO_ACC_Set_BDR+0xa6>
 8002e06:	2307      	movs	r3, #7
 8002e08:	e016      	b.n	8002e38 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002e0a:	edd7 7a00 	vldr	s15, [r7]
 8002e0e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002e74 <ISM330DHCX_FIFO_ACC_Set_BDR+0x110>
 8002e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1a:	d801      	bhi.n	8002e20 <ISM330DHCX_FIFO_ACC_Set_BDR+0xbc>
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	e00b      	b.n	8002e38 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002e20:	edd7 7a00 	vldr	s15, [r7]
 8002e24:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002e78 <ISM330DHCX_FIFO_ACC_Set_BDR+0x114>
 8002e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e30:	d801      	bhi.n	8002e36 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd2>
 8002e32:	2309      	movs	r3, #9
 8002e34:	e000      	b.n	8002e38 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002e36:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
 8002e38:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_XL_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_XL_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_XL_BATCHED_AT_3333Hz
            :                    ISM330DHCX_XL_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_xl_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	331c      	adds	r3, #28
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 fa5e 	bl	8004304 <ism330dhcx_fifo_xl_batch_set>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <ISM330DHCX_FIFO_ACC_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e52:	e000      	b.n	8002e56 <ISM330DHCX_FIFO_ACC_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	42500000 	.word	0x42500000
 8002e64:	42d00000 	.word	0x42d00000
 8002e68:	43500000 	.word	0x43500000
 8002e6c:	43d08000 	.word	0x43d08000
 8002e70:	44504000 	.word	0x44504000
 8002e74:	44d06000 	.word	0x44d06000
 8002e78:	45505000 	.word	0x45505000

08002e7c <ISM330DHCX_FIFO_GYRO_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Odr FIFO ODR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_GYRO_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_gy_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz
 8002e88:	edd7 7a00 	vldr	s15, [r7]
 8002e8c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e98:	d801      	bhi.n	8002e9e <ISM330DHCX_FIFO_GYRO_Set_BDR+0x22>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e058      	b.n	8002f50 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002e9e:	edd7 7a00 	vldr	s15, [r7]
 8002ea2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eae:	d801      	bhi.n	8002eb4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x38>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e04d      	b.n	8002f50 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002eb4:	edd7 7a00 	vldr	s15, [r7]
 8002eb8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002f78 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xfc>
 8002ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec4:	d801      	bhi.n	8002eca <ISM330DHCX_FIFO_GYRO_Set_BDR+0x4e>
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e042      	b.n	8002f50 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002eca:	edd7 7a00 	vldr	s15, [r7]
 8002ece:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002f7c <ISM330DHCX_FIFO_GYRO_Set_BDR+0x100>
 8002ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eda:	d801      	bhi.n	8002ee0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x64>
 8002edc:	2304      	movs	r3, #4
 8002ede:	e037      	b.n	8002f50 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002ee0:	edd7 7a00 	vldr	s15, [r7]
 8002ee4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002f80 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x104>
 8002ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	d801      	bhi.n	8002ef6 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x7a>
 8002ef2:	2305      	movs	r3, #5
 8002ef4:	e02c      	b.n	8002f50 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002ef6:	edd7 7a00 	vldr	s15, [r7]
 8002efa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002f84 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x108>
 8002efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	d801      	bhi.n	8002f0c <ISM330DHCX_FIFO_GYRO_Set_BDR+0x90>
 8002f08:	2306      	movs	r3, #6
 8002f0a:	e021      	b.n	8002f50 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002f0c:	edd7 7a00 	vldr	s15, [r7]
 8002f10:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002f88 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x10c>
 8002f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1c:	d801      	bhi.n	8002f22 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xa6>
 8002f1e:	2307      	movs	r3, #7
 8002f20:	e016      	b.n	8002f50 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002f22:	edd7 7a00 	vldr	s15, [r7]
 8002f26:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002f8c <ISM330DHCX_FIFO_GYRO_Set_BDR+0x110>
 8002f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f32:	d801      	bhi.n	8002f38 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xbc>
 8002f34:	2308      	movs	r3, #8
 8002f36:	e00b      	b.n	8002f50 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002f38:	edd7 7a00 	vldr	s15, [r7]
 8002f3c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002f90 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x114>
 8002f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f48:	d801      	bhi.n	8002f4e <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd2>
 8002f4a:	2309      	movs	r3, #9
 8002f4c:	e000      	b.n	8002f50 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002f4e:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
 8002f50:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_GY_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_GY_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_GY_BATCHED_AT_3333Hz
            :                    ISM330DHCX_GY_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_gy_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	331c      	adds	r3, #28
 8002f56:	7bfa      	ldrb	r2, [r7, #15]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 f9f8 	bl	8004350 <ism330dhcx_fifo_gy_batch_set>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	e000      	b.n	8002f6e <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	42500000 	.word	0x42500000
 8002f7c:	42d00000 	.word	0x42d00000
 8002f80:	43500000 	.word	0x43500000
 8002f84:	43d08000 	.word	0x43d08000
 8002f88:	44504000 	.word	0x44504000
 8002f8c:	44d06000 	.word	0x44d06000
 8002f90:	45505000 	.word	0x45505000

08002f94 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>:
  * @param  pObj the device pObj
  * @param  Status FIFO full interrupt on INT1 pin status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_INT1_FIFO_Full(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_reg_t reg;

  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f103 001c 	add.w	r0, r3, #28
 8002fa6:	f107 020c 	add.w	r2, r7, #12
 8002faa:	2301      	movs	r3, #1
 8002fac:	210d      	movs	r1, #13
 8002fae:	f000 fb27 	bl	8003600 <ism330dhcx_read_reg>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbc:	e017      	b.n	8002fee <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  reg.int1_ctrl.int1_fifo_full = Status;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	7b3b      	ldrb	r3, [r7, #12]
 8002fc8:	f362 1345 	bfi	r3, r2, #5, #1
 8002fcc:	733b      	strb	r3, [r7, #12]

  if (ism330dhcx_write_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f103 001c 	add.w	r0, r3, #28
 8002fd4:	f107 020c 	add.w	r2, r7, #12
 8002fd8:	2301      	movs	r3, #1
 8002fda:	210d      	movs	r1, #13
 8002fdc:	f000 fb28 	bl	8003630 <ism330dhcx_write_reg>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x58>
  {
    return ISM330DHCX_ERROR;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	e000      	b.n	8002fee <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  return ISM330DHCX_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <ISM330DHCX_FIFO_Set_Watermark_Level>:
  * @param  pObj the device pObj
  * @param  Watermark FIFO watermark level
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Watermark_Level(ISM330DHCX_Object_t *pObj, uint16_t Watermark)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	807b      	strh	r3, [r7, #2]
  if (ism330dhcx_fifo_watermark_set(&(pObj->Ctx), Watermark) != ISM330DHCX_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	331c      	adds	r3, #28
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f001 f91e 	bl	800424c <ism330dhcx_fifo_watermark_set>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <ISM330DHCX_FIFO_Set_Watermark_Level+0x26>
  {
    return ISM330DHCX_ERROR;
 8003016:	f04f 33ff 	mov.w	r3, #4294967295
 800301a:	e000      	b.n	800301e <ISM330DHCX_FIFO_Set_Watermark_Level+0x28>
  }

  return ISM330DHCX_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <ISM330DHCX_FIFO_Set_Stop_On_Fth>:
  * @param  pObj the device pObj
  * @param  Status FIFO stop on watermark status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Stop_On_Fth(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	70fb      	strb	r3, [r7, #3]
  if (ism330dhcx_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != ISM330DHCX_OK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	331c      	adds	r3, #28
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f001 f93c 	bl	80042b8 <ism330dhcx_fifo_stop_on_wtm_set>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x26>
  {
    return ISM330DHCX_ERROR;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	e000      	b.n	800304e <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x28>
  }

  return ISM330DHCX_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <ISM330DHCX_FIFO_Set_Mode>:
  * @param  pObj the device pObj
  * @param  Mode FIFO mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Mode(ISM330DHCX_Object_t *pObj, uint8_t Mode)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
  int32_t ret = ISM330DHCX_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((ism330dhcx_fifo_mode_t)Mode)
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	2b06      	cmp	r3, #6
 800306a:	bf8c      	ite	hi
 800306c:	2201      	movhi	r2, #1
 800306e:	2200      	movls	r2, #0
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	2a00      	cmp	r2, #0
 8003074:	d10b      	bne.n	800308e <ISM330DHCX_FIFO_Set_Mode+0x38>
 8003076:	2201      	movs	r2, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d103      	bne.n	8003096 <ISM330DHCX_FIFO_Set_Mode+0x40>
    case ISM330DHCX_BYPASS_TO_STREAM_MODE:
    case ISM330DHCX_STREAM_MODE:
      break;

    default:
      ret = ISM330DHCX_ERROR;
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	60fb      	str	r3, [r7, #12]
      break;
 8003094:	e000      	b.n	8003098 <ISM330DHCX_FIFO_Set_Mode+0x42>
      break;
 8003096:	bf00      	nop
  }

  if (ret == ISM330DHCX_ERROR)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d101      	bne.n	80030a4 <ISM330DHCX_FIFO_Set_Mode+0x4e>
  {
    return ret;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	e00d      	b.n	80030c0 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), (ism330dhcx_fifo_mode_t)Mode) != ISM330DHCX_OK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	331c      	adds	r3, #28
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f001 f975 	bl	800439c <ism330dhcx_fifo_mode_set>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <ISM330DHCX_FIFO_Set_Mode+0x68>
  {
    return ISM330DHCX_ERROR;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	e000      	b.n	80030c0 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  return ret;
 80030be:	68fb      	ldr	r3, [r7, #12]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <ISM330DHCX_FIFO_Get_Data>:
  * @param  pObj the device pObj
  * @param  Data FIFO raw data array [6]
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Data(ISM330DHCX_Object_t *pObj, uint8_t *Data)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_fifo_out_raw_get(&(pObj->Ctx), Data) != ISM330DHCX_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	331c      	adds	r3, #28
 80030d6:	6839      	ldr	r1, [r7, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fffd 	bl	80040d8 <ism330dhcx_fifo_out_raw_get>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <ISM330DHCX_FIFO_Get_Data+0x22>
  {
    return ISM330DHCX_ERROR;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295
 80030e8:	e000      	b.n	80030ec <ISM330DHCX_FIFO_Get_Data+0x24>
  }

  return ISM330DHCX_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <ISM330DHCX_FIFO_Get_Data_Word>:
  * @param  pObj the device pObj
  * @param  Acceleration FIFO single data
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Data_Word(ISM330DHCX_Object_t *pObj, int16_t *data_raw)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint8_t data[6];

  if (ISM330DHCX_FIFO_Get_Data(pObj, data) != ISM330DHCX_OK)
 80030fe:	f107 0308 	add.w	r3, r7, #8
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ffdf 	bl	80030c8 <ISM330DHCX_FIFO_Get_Data>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <ISM330DHCX_FIFO_Get_Data_Word+0x22>
  {
    return ISM330DHCX_ERROR;
 8003110:	f04f 33ff 	mov.w	r3, #4294967295
 8003114:	e01d      	b.n	8003152 <ISM330DHCX_FIFO_Get_Data_Word+0x5e>
  }

  data_raw[0] = ((int16_t)data[1] << 8) | data[0];
 8003116:	7a7b      	ldrb	r3, [r7, #9]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	b21a      	sxth	r2, r3
 800311c:	7a3b      	ldrb	r3, [r7, #8]
 800311e:	b21b      	sxth	r3, r3
 8003120:	4313      	orrs	r3, r2
 8003122:	b21a      	sxth	r2, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	801a      	strh	r2, [r3, #0]
  data_raw[1] = ((int16_t)data[3] << 8) | data[2];
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	b219      	sxth	r1, r3
 800312e:	7abb      	ldrb	r3, [r7, #10]
 8003130:	b21a      	sxth	r2, r3
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	3302      	adds	r3, #2
 8003136:	430a      	orrs	r2, r1
 8003138:	b212      	sxth	r2, r2
 800313a:	801a      	strh	r2, [r3, #0]
  data_raw[2] = ((int16_t)data[5] << 8) | data[4];
 800313c:	7b7b      	ldrb	r3, [r7, #13]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	b219      	sxth	r1, r3
 8003142:	7b3b      	ldrb	r3, [r7, #12]
 8003144:	b21a      	sxth	r2, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	3304      	adds	r3, #4
 800314a:	430a      	orrs	r2, r1
 800314c:	b212      	sxth	r2, r2
 800314e:	801a      	strh	r2, [r3, #0]

  return ISM330DHCX_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003168:	edd7 7a00 	vldr	s15, [r7]
 800316c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003178:	d801      	bhi.n	800317e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 800317a:	2301      	movs	r3, #1
 800317c:	e058      	b.n	8003230 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800317e:	edd7 7a00 	vldr	s15, [r7]
 8003182:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318e:	d801      	bhi.n	8003194 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003190:	2302      	movs	r3, #2
 8003192:	e04d      	b.n	8003230 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003194:	edd7 7a00 	vldr	s15, [r7]
 8003198:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003258 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800319c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a4:	d801      	bhi.n	80031aa <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80031a6:	2303      	movs	r3, #3
 80031a8:	e042      	b.n	8003230 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80031aa:	edd7 7a00 	vldr	s15, [r7]
 80031ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800325c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 80031b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	d801      	bhi.n	80031c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 80031bc:	2304      	movs	r3, #4
 80031be:	e037      	b.n	8003230 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80031c0:	edd7 7a00 	vldr	s15, [r7]
 80031c4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003260 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 80031c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d801      	bhi.n	80031d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80031d2:	2305      	movs	r3, #5
 80031d4:	e02c      	b.n	8003230 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80031d6:	edd7 7a00 	vldr	s15, [r7]
 80031da:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003264 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 80031de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e6:	d801      	bhi.n	80031ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 80031e8:	2306      	movs	r3, #6
 80031ea:	e021      	b.n	8003230 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80031ec:	edd7 7a00 	vldr	s15, [r7]
 80031f0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003268 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80031f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fc:	d801      	bhi.n	8003202 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80031fe:	2307      	movs	r3, #7
 8003200:	e016      	b.n	8003230 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003202:	edd7 7a00 	vldr	s15, [r7]
 8003206:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800326c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800320a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	d801      	bhi.n	8003218 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003214:	2308      	movs	r3, #8
 8003216:	e00b      	b.n	8003230 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003218:	edd7 7a00 	vldr	s15, [r7]
 800321c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003270 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8003220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003228:	d801      	bhi.n	800322e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800322a:	2309      	movs	r3, #9
 800322c:	e000      	b.n	8003230 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800322e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8003230:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	331c      	adds	r3, #28
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fa6e 	bl	800371c <ism330dhcx_xl_data_rate_set>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
 800324a:	e000      	b.n	800324e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	42500000 	.word	0x42500000
 800325c:	42d00000 	.word	0x42d00000
 8003260:	43500000 	.word	0x43500000
 8003264:	43d00000 	.word	0x43d00000
 8003268:	44504000 	.word	0x44504000
 800326c:	44d04000 	.word	0x44d04000
 8003270:	45504000 	.word	0x45504000

08003274 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003280:	edd7 7a00 	vldr	s15, [r7]
 8003284:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003290:	d801      	bhi.n	8003296 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003292:	2301      	movs	r3, #1
 8003294:	e058      	b.n	8003348 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003296:	edd7 7a00 	vldr	s15, [r7]
 800329a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800329e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a6:	d801      	bhi.n	80032ac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e04d      	b.n	8003348 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80032ac:	edd7 7a00 	vldr	s15, [r7]
 80032b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800335c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80032b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032bc:	d801      	bhi.n	80032c2 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80032be:	2303      	movs	r3, #3
 80032c0:	e042      	b.n	8003348 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80032c2:	edd7 7a00 	vldr	s15, [r7]
 80032c6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003360 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 80032ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	d801      	bhi.n	80032d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 80032d4:	2304      	movs	r3, #4
 80032d6:	e037      	b.n	8003348 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80032d8:	edd7 7a00 	vldr	s15, [r7]
 80032dc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003364 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80032e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e8:	d801      	bhi.n	80032ee <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80032ea:	2305      	movs	r3, #5
 80032ec:	e02c      	b.n	8003348 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80032ee:	edd7 7a00 	vldr	s15, [r7]
 80032f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003368 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80032f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	d801      	bhi.n	8003304 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003300:	2306      	movs	r3, #6
 8003302:	e021      	b.n	8003348 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003304:	edd7 7a00 	vldr	s15, [r7]
 8003308:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800336c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800330c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	d801      	bhi.n	800331a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003316:	2307      	movs	r3, #7
 8003318:	e016      	b.n	8003348 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800331a:	edd7 7a00 	vldr	s15, [r7]
 800331e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003370 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8003322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332a:	d801      	bhi.n	8003330 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800332c:	2308      	movs	r3, #8
 800332e:	e00b      	b.n	8003348 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003330:	edd7 7a00 	vldr	s15, [r7]
 8003334:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003374 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003340:	d801      	bhi.n	8003346 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8003342:	2309      	movs	r3, #9
 8003344:	e000      	b.n	8003348 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003346:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	42500000 	.word	0x42500000
 8003360:	42d00000 	.word	0x42d00000
 8003364:	43500000 	.word	0x43500000
 8003368:	43d00000 	.word	0x43d00000
 800336c:	44504000 	.word	0x44504000
 8003370:	44d04000 	.word	0x44d04000
 8003374:	45504000 	.word	0x45504000

08003378 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003384:	edd7 7a00 	vldr	s15, [r7]
 8003388:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800338c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003394:	d801      	bhi.n	800339a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003396:	2301      	movs	r3, #1
 8003398:	e058      	b.n	800344c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800339a:	edd7 7a00 	vldr	s15, [r7]
 800339e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80033a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033aa:	d801      	bhi.n	80033b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e04d      	b.n	800344c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80033b0:	edd7 7a00 	vldr	s15, [r7]
 80033b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003474 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80033b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	d801      	bhi.n	80033c6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80033c2:	2303      	movs	r3, #3
 80033c4:	e042      	b.n	800344c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80033c6:	edd7 7a00 	vldr	s15, [r7]
 80033ca:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003478 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80033ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	d801      	bhi.n	80033dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80033d8:	2304      	movs	r3, #4
 80033da:	e037      	b.n	800344c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80033dc:	edd7 7a00 	vldr	s15, [r7]
 80033e0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800347c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80033e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ec:	d801      	bhi.n	80033f2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80033ee:	2305      	movs	r3, #5
 80033f0:	e02c      	b.n	800344c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80033f2:	edd7 7a00 	vldr	s15, [r7]
 80033f6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003480 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80033fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	d801      	bhi.n	8003408 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003404:	2306      	movs	r3, #6
 8003406:	e021      	b.n	800344c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003408:	edd7 7a00 	vldr	s15, [r7]
 800340c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003484 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	d801      	bhi.n	800341e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800341a:	2307      	movs	r3, #7
 800341c:	e016      	b.n	800344c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800341e:	edd7 7a00 	vldr	s15, [r7]
 8003422:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003488 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8003426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342e:	d801      	bhi.n	8003434 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003430:	2308      	movs	r3, #8
 8003432:	e00b      	b.n	800344c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003434:	edd7 7a00 	vldr	s15, [r7]
 8003438:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800348c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800343c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	d801      	bhi.n	800344a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8003446:	2309      	movs	r3, #9
 8003448:	e000      	b.n	800344c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800344a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 800344c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	331c      	adds	r3, #28
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fbb0 	bl	8003bbc <ism330dhcx_gy_data_rate_set>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	e000      	b.n	800346a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	42500000 	.word	0x42500000
 8003478:	42d00000 	.word	0x42d00000
 800347c:	43500000 	.word	0x43500000
 8003480:	43d00000 	.word	0x43d00000
 8003484:	44504000 	.word	0x44504000
 8003488:	44d04000 	.word	0x44d04000
 800348c:	45504000 	.word	0x45504000

08003490 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800349c:	edd7 7a00 	vldr	s15, [r7]
 80034a0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80034a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ac:	d801      	bhi.n	80034b2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e058      	b.n	8003564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80034b2:	edd7 7a00 	vldr	s15, [r7]
 80034b6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80034ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c2:	d801      	bhi.n	80034c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e04d      	b.n	8003564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80034c8:	edd7 7a00 	vldr	s15, [r7]
 80034cc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003578 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80034d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	d801      	bhi.n	80034de <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80034da:	2303      	movs	r3, #3
 80034dc:	e042      	b.n	8003564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80034de:	edd7 7a00 	vldr	s15, [r7]
 80034e2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800357c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80034e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ee:	d801      	bhi.n	80034f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80034f0:	2304      	movs	r3, #4
 80034f2:	e037      	b.n	8003564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80034f4:	edd7 7a00 	vldr	s15, [r7]
 80034f8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003580 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80034fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003504:	d801      	bhi.n	800350a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8003506:	2305      	movs	r3, #5
 8003508:	e02c      	b.n	8003564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800350a:	edd7 7a00 	vldr	s15, [r7]
 800350e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003584 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8003512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351a:	d801      	bhi.n	8003520 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800351c:	2306      	movs	r3, #6
 800351e:	e021      	b.n	8003564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003520:	edd7 7a00 	vldr	s15, [r7]
 8003524:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003588 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8003528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800352c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003530:	d801      	bhi.n	8003536 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8003532:	2307      	movs	r3, #7
 8003534:	e016      	b.n	8003564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003536:	edd7 7a00 	vldr	s15, [r7]
 800353a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800358c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800353e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003546:	d801      	bhi.n	800354c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8003548:	2308      	movs	r3, #8
 800354a:	e00b      	b.n	8003564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800354c:	edd7 7a00 	vldr	s15, [r7]
 8003550:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003590 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8003554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355c:	d801      	bhi.n	8003562 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800355e:	2309      	movs	r3, #9
 8003560:	e000      	b.n	8003564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003562:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	42500000 	.word	0x42500000
 800357c:	42d00000 	.word	0x42d00000
 8003580:	43500000 	.word	0x43500000
 8003584:	43d00000 	.word	0x43d00000
 8003588:	44504000 	.word	0x44504000
 800358c:	44d04000 	.word	0x44d04000
 8003590:	45504000 	.word	0x45504000

08003594 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	461a      	mov	r2, r3
 80035a0:	460b      	mov	r3, r1
 80035a2:	72fb      	strb	r3, [r7, #11]
 80035a4:	4613      	mov	r3, r2
 80035a6:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	695c      	ldr	r4, [r3, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	7b1b      	ldrb	r3, [r3, #12]
 80035b4:	b298      	uxth	r0, r3
 80035b6:	7afb      	ldrb	r3, [r7, #11]
 80035b8:	b299      	uxth	r1, r3
 80035ba:	893b      	ldrh	r3, [r7, #8]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	47a0      	blx	r4
 80035c0:	4603      	mov	r3, r0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}

080035ca <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80035ca:	b590      	push	{r4, r7, lr}
 80035cc:	b087      	sub	sp, #28
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	461a      	mov	r2, r3
 80035d6:	460b      	mov	r3, r1
 80035d8:	72fb      	strb	r3, [r7, #11]
 80035da:	4613      	mov	r3, r2
 80035dc:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	691c      	ldr	r4, [r3, #16]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	7b1b      	ldrb	r3, [r3, #12]
 80035ea:	b298      	uxth	r0, r3
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	b299      	uxth	r1, r3
 80035f0:	893b      	ldrh	r3, [r7, #8]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	47a0      	blx	r4
 80035f6:	4603      	mov	r3, r0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd90      	pop	{r4, r7, pc}

08003600 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	461a      	mov	r2, r3
 800360c:	460b      	mov	r3, r1
 800360e:	72fb      	strb	r3, [r7, #11]
 8003610:	4613      	mov	r3, r2
 8003612:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685c      	ldr	r4, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6898      	ldr	r0, [r3, #8]
 800361c:	893b      	ldrh	r3, [r7, #8]
 800361e:	7af9      	ldrb	r1, [r7, #11]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	47a0      	blx	r4
 8003624:	6178      	str	r0, [r7, #20]

  return ret;
 8003626:	697b      	ldr	r3, [r7, #20]
}
 8003628:	4618      	mov	r0, r3
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	bd90      	pop	{r4, r7, pc}

08003630 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	461a      	mov	r2, r3
 800363c:	460b      	mov	r3, r1
 800363e:	72fb      	strb	r3, [r7, #11]
 8003640:	4613      	mov	r3, r2
 8003642:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681c      	ldr	r4, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6898      	ldr	r0, [r3, #8]
 800364c:	893b      	ldrh	r3, [r7, #8]
 800364e:	7af9      	ldrb	r1, [r7, #11]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	47a0      	blx	r4
 8003654:	6178      	str	r0, [r7, #20]

  return ret;
 8003656:	697b      	ldr	r3, [r7, #20]
}
 8003658:	4618      	mov	r0, r3
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	bd90      	pop	{r4, r7, pc}

08003660 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800366c:	f107 0208 	add.w	r2, r7, #8
 8003670:	2301      	movs	r3, #1
 8003672:	2110      	movs	r1, #16
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ffc3 	bl	8003600 <ism330dhcx_read_reg>
 800367a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10f      	bne.n	80036a2 <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	b2da      	uxtb	r2, r3
 800368a:	7a3b      	ldrb	r3, [r7, #8]
 800368c:	f362 0383 	bfi	r3, r2, #2, #2
 8003690:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003692:	f107 0208 	add.w	r2, r7, #8
 8003696:	2301      	movs	r3, #1
 8003698:	2110      	movs	r1, #16
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff ffc8 	bl	8003630 <ism330dhcx_write_reg>
 80036a0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80036b6:	f107 0208 	add.w	r2, r7, #8
 80036ba:	2301      	movs	r3, #1
 80036bc:	2110      	movs	r1, #16
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ff9e 	bl	8003600 <ism330dhcx_read_reg>
 80036c4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 80036c6:	7a3b      	ldrb	r3, [r7, #8]
 80036c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d81a      	bhi.n	8003708 <ism330dhcx_xl_full_scale_get+0x5c>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <ism330dhcx_xl_full_scale_get+0x2c>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	080036e9 	.word	0x080036e9
 80036dc:	080036f1 	.word	0x080036f1
 80036e0:	080036f9 	.word	0x080036f9
 80036e4:	08003701 	.word	0x08003701
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
      break;
 80036ee:	e00f      	b.n	8003710 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
      break;
 80036f6:	e00b      	b.n	8003710 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2202      	movs	r2, #2
 80036fc:	701a      	strb	r2, [r3, #0]
      break;
 80036fe:	e007      	b.n	8003710 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2203      	movs	r2, #3
 8003704:	701a      	strb	r2, [r3, #0]
      break;
 8003706:	e003      	b.n	8003710 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
      break;
 800370e:	bf00      	nop
  }

  return ret;
 8003710:	68fb      	ldr	r3, [r7, #12]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop

0800371c <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 800372c:	f107 030c 	add.w	r3, r7, #12
 8003730:	4619      	mov	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fe86 	bl	8004444 <ism330dhcx_fsm_enable_get>
 8003738:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f040 80c4 	bne.w	80038ca <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003742:	7b3b      	ldrb	r3, [r7, #12]
 8003744:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003748:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800374a:	7b3b      	ldrb	r3, [r7, #12]
 800374c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003750:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003752:	4313      	orrs	r3, r2
 8003754:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003756:	7b3b      	ldrb	r3, [r7, #12]
 8003758:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800375c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800375e:	4313      	orrs	r3, r2
 8003760:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003762:	7b3b      	ldrb	r3, [r7, #12]
 8003764:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003768:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800376a:	4313      	orrs	r3, r2
 800376c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800376e:	7b3b      	ldrb	r3, [r7, #12]
 8003770:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003774:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003776:	4313      	orrs	r3, r2
 8003778:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800377a:	7b3b      	ldrb	r3, [r7, #12]
 800377c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003780:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003782:	4313      	orrs	r3, r2
 8003784:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003786:	7b3b      	ldrb	r3, [r7, #12]
 8003788:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800378c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800378e:	4313      	orrs	r3, r2
 8003790:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003792:	7b3b      	ldrb	r3, [r7, #12]
 8003794:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003798:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800379a:	4313      	orrs	r3, r2
 800379c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800379e:	7b7b      	ldrb	r3, [r7, #13]
 80037a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80037a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80037b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80037b2:	4313      	orrs	r3, r2
 80037b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80037b6:	7b7b      	ldrb	r3, [r7, #13]
 80037b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80037bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80037be:	4313      	orrs	r3, r2
 80037c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80037c2:	7b7b      	ldrb	r3, [r7, #13]
 80037c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80037c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80037ca:	4313      	orrs	r3, r2
 80037cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80037ce:	7b7b      	ldrb	r3, [r7, #13]
 80037d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80037d6:	4313      	orrs	r3, r2
 80037d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80037da:	7b7b      	ldrb	r3, [r7, #13]
 80037dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80037e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80037e2:	4313      	orrs	r3, r2
 80037e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80037e6:	7b7b      	ldrb	r3, [r7, #13]
 80037e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80037ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80037ee:	4313      	orrs	r3, r2
 80037f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80037f2:	7b7b      	ldrb	r3, [r7, #13]
 80037f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80037f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80037fa:	4313      	orrs	r3, r2
 80037fc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d163      	bne.n	80038ca <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8003802:	f107 030b 	add.w	r3, r7, #11
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fe47 	bl	800449c <ism330dhcx_fsm_data_rate_get>
 800380e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d159      	bne.n	80038ca <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003816:	7afb      	ldrb	r3, [r7, #11]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d853      	bhi.n	80038c4 <ism330dhcx_xl_data_rate_set+0x1a8>
 800381c:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <ism330dhcx_xl_data_rate_set+0x108>)
 800381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003822:	bf00      	nop
 8003824:	08003835 	.word	0x08003835
 8003828:	08003847 	.word	0x08003847
 800382c:	08003865 	.word	0x08003865
 8003830:	0800388f 	.word	0x0800388f
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800383e:	e045      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	75fb      	strb	r3, [r7, #23]
            break;
 8003844:	e042      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800384c:	2302      	movs	r3, #2
 800384e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003850:	e03c      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d102      	bne.n	800385e <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003858:	2302      	movs	r3, #2
 800385a:	75fb      	strb	r3, [r7, #23]
            break;
 800385c:	e036      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	75fb      	strb	r3, [r7, #23]
            break;
 8003862:	e033      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800386a:	2303      	movs	r3, #3
 800386c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800386e:	e02d      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d102      	bne.n	800387c <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003876:	2303      	movs	r3, #3
 8003878:	75fb      	strb	r3, [r7, #23]
            break;
 800387a:	e027      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d102      	bne.n	8003888 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003882:	2303      	movs	r3, #3
 8003884:	75fb      	strb	r3, [r7, #23]
            break;
 8003886:	e021      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	75fb      	strb	r3, [r7, #23]
            break;
 800388c:	e01e      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003894:	2304      	movs	r3, #4
 8003896:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003898:	e018      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d102      	bne.n	80038a6 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80038a0:	2304      	movs	r3, #4
 80038a2:	75fb      	strb	r3, [r7, #23]
            break;
 80038a4:	e012      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d102      	bne.n	80038b2 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80038ac:	2304      	movs	r3, #4
 80038ae:	75fb      	strb	r3, [r7, #23]
            break;
 80038b0:	e00c      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d102      	bne.n	80038be <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80038b8:	2304      	movs	r3, #4
 80038ba:	75fb      	strb	r3, [r7, #23]
            break;
 80038bc:	e006      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	75fb      	strb	r3, [r7, #23]
            break;
 80038c2:	e003      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	75fb      	strb	r3, [r7, #23]
            break;
 80038c8:	e000      	b.n	80038cc <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 80038ca:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d16d      	bne.n	80039b2 <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 80038d6:	f107 030a 	add.w	r3, r7, #10
 80038da:	4619      	mov	r1, r3
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fe25 	bl	800452c <ism330dhcx_mlc_get>
 80038e2:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 80038e4:	7abb      	ldrb	r3, [r7, #10]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d163      	bne.n	80039b2 <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80038ea:	f107 0309 	add.w	r3, r7, #9
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fe45 	bl	8004580 <ism330dhcx_mlc_data_rate_get>
 80038f6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d159      	bne.n	80039b2 <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 80038fe:	7a7b      	ldrb	r3, [r7, #9]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d853      	bhi.n	80039ac <ism330dhcx_xl_data_rate_set+0x290>
 8003904:	a201      	add	r2, pc, #4	; (adr r2, 800390c <ism330dhcx_xl_data_rate_set+0x1f0>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	0800391d 	.word	0x0800391d
 8003910:	0800392f 	.word	0x0800392f
 8003914:	0800394d 	.word	0x0800394d
 8003918:	08003977 	.word	0x08003977
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003922:	2301      	movs	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003926:	e045      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	75fb      	strb	r3, [r7, #23]
            break;
 800392c:	e042      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003934:	2302      	movs	r3, #2
 8003936:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003938:	e03c      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d102      	bne.n	8003946 <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003940:	2302      	movs	r3, #2
 8003942:	75fb      	strb	r3, [r7, #23]
            break;
 8003944:	e036      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	75fb      	strb	r3, [r7, #23]
            break;
 800394a:	e033      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003952:	2303      	movs	r3, #3
 8003954:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003956:	e02d      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d102      	bne.n	8003964 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800395e:	2303      	movs	r3, #3
 8003960:	75fb      	strb	r3, [r7, #23]
            break;
 8003962:	e027      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d102      	bne.n	8003970 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800396a:	2303      	movs	r3, #3
 800396c:	75fb      	strb	r3, [r7, #23]
            break;
 800396e:	e021      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	75fb      	strb	r3, [r7, #23]
            break;
 8003974:	e01e      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800397c:	2304      	movs	r3, #4
 800397e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003980:	e018      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d102      	bne.n	800398e <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003988:	2304      	movs	r3, #4
 800398a:	75fb      	strb	r3, [r7, #23]
            break;
 800398c:	e012      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d102      	bne.n	800399a <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003994:	2304      	movs	r3, #4
 8003996:	75fb      	strb	r3, [r7, #23]
            break;
 8003998:	e00c      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d102      	bne.n	80039a6 <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80039a0:	2304      	movs	r3, #4
 80039a2:	75fb      	strb	r3, [r7, #23]
            break;
 80039a4:	e006      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	75fb      	strb	r3, [r7, #23]
            break;
 80039aa:	e003      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	75fb      	strb	r3, [r7, #23]
            break;
 80039b0:	e000      	b.n	80039b4 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 80039b2:	bf00      	nop
    }
  }

  if (ret == 0)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d107      	bne.n	80039ca <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80039ba:	f107 0208 	add.w	r2, r7, #8
 80039be:	2301      	movs	r3, #1
 80039c0:	2110      	movs	r1, #16
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fe1c 	bl	8003600 <ism330dhcx_read_reg>
 80039c8:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10f      	bne.n	80039f0 <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	7a3b      	ldrb	r3, [r7, #8]
 80039da:	f362 1307 	bfi	r3, r2, #4, #4
 80039de:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80039e0:	f107 0208 	add.w	r2, r7, #8
 80039e4:	2301      	movs	r3, #1
 80039e6:	2110      	movs	r1, #16
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff fe21 	bl	8003630 <ism330dhcx_write_reg>
 80039ee:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80039f0:	693b      	ldr	r3, [r7, #16]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop

080039fc <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003a06:	f107 0208 	add.w	r2, r7, #8
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	2110      	movs	r1, #16
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff fdf6 	bl	8003600 <ism330dhcx_read_reg>
 8003a14:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8003a16:	7a3b      	ldrb	r3, [r7, #8]
 8003a18:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b0b      	cmp	r3, #11
 8003a20:	d84a      	bhi.n	8003ab8 <ism330dhcx_xl_data_rate_get+0xbc>
 8003a22:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <ism330dhcx_xl_data_rate_get+0x2c>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a59 	.word	0x08003a59
 8003a2c:	08003a61 	.word	0x08003a61
 8003a30:	08003a69 	.word	0x08003a69
 8003a34:	08003a71 	.word	0x08003a71
 8003a38:	08003a79 	.word	0x08003a79
 8003a3c:	08003a81 	.word	0x08003a81
 8003a40:	08003a89 	.word	0x08003a89
 8003a44:	08003a91 	.word	0x08003a91
 8003a48:	08003a99 	.word	0x08003a99
 8003a4c:	08003aa1 	.word	0x08003aa1
 8003a50:	08003aa9 	.word	0x08003aa9
 8003a54:	08003ab1 	.word	0x08003ab1
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
      break;
 8003a5e:	e02f      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
      break;
 8003a66:	e02b      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	701a      	strb	r2, [r3, #0]
      break;
 8003a6e:	e027      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2203      	movs	r2, #3
 8003a74:	701a      	strb	r2, [r3, #0]
      break;
 8003a76:	e023      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	701a      	strb	r2, [r3, #0]
      break;
 8003a7e:	e01f      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2205      	movs	r2, #5
 8003a84:	701a      	strb	r2, [r3, #0]
      break;
 8003a86:	e01b      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2206      	movs	r2, #6
 8003a8c:	701a      	strb	r2, [r3, #0]
      break;
 8003a8e:	e017      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2207      	movs	r2, #7
 8003a94:	701a      	strb	r2, [r3, #0]
      break;
 8003a96:	e013      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	701a      	strb	r2, [r3, #0]
      break;
 8003a9e:	e00f      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2209      	movs	r2, #9
 8003aa4:	701a      	strb	r2, [r3, #0]
      break;
 8003aa6:	e00b      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	220a      	movs	r2, #10
 8003aac:	701a      	strb	r2, [r3, #0]
      break;
 8003aae:	e007      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	220b      	movs	r2, #11
 8003ab4:	701a      	strb	r2, [r3, #0]
      break;
 8003ab6:	e003      	b.n	8003ac0 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
      break;
 8003abe:	bf00      	nop
  }

  return ret;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop

08003acc <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003ad8:	f107 0208 	add.w	r2, r7, #8
 8003adc:	2301      	movs	r3, #1
 8003ade:	2111      	movs	r1, #17
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fd8d 	bl	8003600 <ism330dhcx_read_reg>
 8003ae6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	7a3b      	ldrb	r3, [r7, #8]
 8003af8:	f362 0303 	bfi	r3, r2, #0, #4
 8003afc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8003afe:	f107 0208 	add.w	r2, r7, #8
 8003b02:	2301      	movs	r3, #1
 8003b04:	2111      	movs	r1, #17
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff fd92 	bl	8003630 <ism330dhcx_write_reg>
 8003b0c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003b22:	f107 0208 	add.w	r2, r7, #8
 8003b26:	2301      	movs	r3, #1
 8003b28:	2111      	movs	r1, #17
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fd68 	bl	8003600 <ism330dhcx_read_reg>
 8003b30:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 8003b32:	7a3b      	ldrb	r3, [r7, #8]
 8003b34:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d834      	bhi.n	8003ba8 <ism330dhcx_gy_full_scale_get+0x90>
 8003b3e:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <ism330dhcx_gy_full_scale_get+0x2c>)
 8003b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b44:	08003b81 	.word	0x08003b81
 8003b48:	08003ba1 	.word	0x08003ba1
 8003b4c:	08003b79 	.word	0x08003b79
 8003b50:	08003ba9 	.word	0x08003ba9
 8003b54:	08003b89 	.word	0x08003b89
 8003b58:	08003ba9 	.word	0x08003ba9
 8003b5c:	08003ba9 	.word	0x08003ba9
 8003b60:	08003ba9 	.word	0x08003ba9
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003ba9 	.word	0x08003ba9
 8003b6c:	08003ba9 	.word	0x08003ba9
 8003b70:	08003ba9 	.word	0x08003ba9
 8003b74:	08003b99 	.word	0x08003b99
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
      break;
 8003b7e:	e017      	b.n	8003bb0 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
      break;
 8003b86:	e013      	b.n	8003bb0 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	701a      	strb	r2, [r3, #0]
      break;
 8003b8e:	e00f      	b.n	8003bb0 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2208      	movs	r2, #8
 8003b94:	701a      	strb	r2, [r3, #0]
      break;
 8003b96:	e00b      	b.n	8003bb0 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	701a      	strb	r2, [r3, #0]
      break;
 8003b9e:	e007      	b.n	8003bb0 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
      break;
 8003ba6:	e003      	b.n	8003bb0 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2202      	movs	r2, #2
 8003bac:	701a      	strb	r2, [r3, #0]
      break;
 8003bae:	bf00      	nop
  }

  return ret;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop

08003bbc <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fc36 	bl	8004444 <ism330dhcx_fsm_enable_get>
 8003bd8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f040 80c4 	bne.w	8003d6a <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003be2:	7b3b      	ldrb	r3, [r7, #12]
 8003be4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003be8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003bea:	7b3b      	ldrb	r3, [r7, #12]
 8003bec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003bf0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003bf6:	7b3b      	ldrb	r3, [r7, #12]
 8003bf8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003bfc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003c02:	7b3b      	ldrb	r3, [r7, #12]
 8003c04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003c0e:	7b3b      	ldrb	r3, [r7, #12]
 8003c10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003c1a:	7b3b      	ldrb	r3, [r7, #12]
 8003c1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003c20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003c22:	4313      	orrs	r3, r2
 8003c24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003c26:	7b3b      	ldrb	r3, [r7, #12]
 8003c28:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003c2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003c32:	7b3b      	ldrb	r3, [r7, #12]
 8003c34:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003c38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003c3e:	7b7b      	ldrb	r3, [r7, #13]
 8003c40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003c46:	4313      	orrs	r3, r2
 8003c48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003c4a:	7b7b      	ldrb	r3, [r7, #13]
 8003c4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003c52:	4313      	orrs	r3, r2
 8003c54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003c56:	7b7b      	ldrb	r3, [r7, #13]
 8003c58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003c62:	7b7b      	ldrb	r3, [r7, #13]
 8003c64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003c6e:	7b7b      	ldrb	r3, [r7, #13]
 8003c70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003c76:	4313      	orrs	r3, r2
 8003c78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003c7a:	7b7b      	ldrb	r3, [r7, #13]
 8003c7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003c80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003c82:	4313      	orrs	r3, r2
 8003c84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003c86:	7b7b      	ldrb	r3, [r7, #13]
 8003c88:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003c8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003c92:	7b7b      	ldrb	r3, [r7, #13]
 8003c94:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003c98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d163      	bne.n	8003d6a <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8003ca2:	f107 030b 	add.w	r3, r7, #11
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fbf7 	bl	800449c <ism330dhcx_fsm_data_rate_get>
 8003cae:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d159      	bne.n	8003d6a <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003cb6:	7afb      	ldrb	r3, [r7, #11]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d853      	bhi.n	8003d64 <ism330dhcx_gy_data_rate_set+0x1a8>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <ism330dhcx_gy_data_rate_set+0x108>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003ce7 	.word	0x08003ce7
 8003ccc:	08003d05 	.word	0x08003d05
 8003cd0:	08003d2f 	.word	0x08003d2f
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003cde:	e045      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ce4:	e042      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003cec:	2302      	movs	r3, #2
 8003cee:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003cf0:	e03c      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d102      	bne.n	8003cfe <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	75fb      	strb	r3, [r7, #23]
            break;
 8003cfc:	e036      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	75fb      	strb	r3, [r7, #23]
            break;
 8003d02:	e033      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003d0e:	e02d      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d102      	bne.n	8003d1c <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003d16:	2303      	movs	r3, #3
 8003d18:	75fb      	strb	r3, [r7, #23]
            break;
 8003d1a:	e027      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d102      	bne.n	8003d28 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003d22:	2303      	movs	r3, #3
 8003d24:	75fb      	strb	r3, [r7, #23]
            break;
 8003d26:	e021      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	75fb      	strb	r3, [r7, #23]
            break;
 8003d2c:	e01e      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003d34:	2304      	movs	r3, #4
 8003d36:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003d38:	e018      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d102      	bne.n	8003d46 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003d40:	2304      	movs	r3, #4
 8003d42:	75fb      	strb	r3, [r7, #23]
            break;
 8003d44:	e012      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d102      	bne.n	8003d52 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	75fb      	strb	r3, [r7, #23]
            break;
 8003d50:	e00c      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d102      	bne.n	8003d5e <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003d58:	2304      	movs	r3, #4
 8003d5a:	75fb      	strb	r3, [r7, #23]
            break;
 8003d5c:	e006      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	75fb      	strb	r3, [r7, #23]
            break;
 8003d62:	e003      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	75fb      	strb	r3, [r7, #23]
            break;
 8003d68:	e000      	b.n	8003d6c <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 8003d6a:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d16d      	bne.n	8003e52 <ism330dhcx_gy_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8003d76:	f107 030a 	add.w	r3, r7, #10
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fbd5 	bl	800452c <ism330dhcx_mlc_get>
 8003d82:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8003d84:	7abb      	ldrb	r3, [r7, #10]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d163      	bne.n	8003e52 <ism330dhcx_gy_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8003d8a:	f107 0309 	add.w	r3, r7, #9
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fbf5 	bl	8004580 <ism330dhcx_mlc_data_rate_get>
 8003d96:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d159      	bne.n	8003e52 <ism330dhcx_gy_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8003d9e:	7a7b      	ldrb	r3, [r7, #9]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d853      	bhi.n	8003e4c <ism330dhcx_gy_data_rate_set+0x290>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <ism330dhcx_gy_data_rate_set+0x1f0>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dcf 	.word	0x08003dcf
 8003db4:	08003ded 	.word	0x08003ded
 8003db8:	08003e17 	.word	0x08003e17
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <ism330dhcx_gy_data_rate_set+0x20c>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003dc6:	e045      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	75fb      	strb	r3, [r7, #23]
            break;
 8003dcc:	e042      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <ism330dhcx_gy_data_rate_set+0x21e>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003dd8:	e03c      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d102      	bne.n	8003de6 <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003de0:	2302      	movs	r3, #2
 8003de2:	75fb      	strb	r3, [r7, #23]
            break;
 8003de4:	e036      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	75fb      	strb	r3, [r7, #23]
            break;
 8003dea:	e033      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <ism330dhcx_gy_data_rate_set+0x23c>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003df2:	2303      	movs	r3, #3
 8003df4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003df6:	e02d      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	75fb      	strb	r3, [r7, #23]
            break;
 8003e02:	e027      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d102      	bne.n	8003e10 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	75fb      	strb	r3, [r7, #23]
            break;
 8003e0e:	e021      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	75fb      	strb	r3, [r7, #23]
            break;
 8003e14:	e01e      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <ism330dhcx_gy_data_rate_set+0x266>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003e20:	e018      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d102      	bne.n	8003e2e <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003e28:	2304      	movs	r3, #4
 8003e2a:	75fb      	strb	r3, [r7, #23]
            break;
 8003e2c:	e012      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d102      	bne.n	8003e3a <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003e34:	2304      	movs	r3, #4
 8003e36:	75fb      	strb	r3, [r7, #23]
            break;
 8003e38:	e00c      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d102      	bne.n	8003e46 <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003e40:	2304      	movs	r3, #4
 8003e42:	75fb      	strb	r3, [r7, #23]
            break;
 8003e44:	e006      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8003e46:	78fb      	ldrb	r3, [r7, #3]
 8003e48:	75fb      	strb	r3, [r7, #23]
            break;
 8003e4a:	e003      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	75fb      	strb	r3, [r7, #23]
            break;
 8003e50:	e000      	b.n	8003e54 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8003e52:	bf00      	nop
    }
  }

  if (ret == 0)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <ism330dhcx_gy_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003e5a:	f107 0208 	add.w	r2, r7, #8
 8003e5e:	2301      	movs	r3, #1
 8003e60:	2111      	movs	r1, #17
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff fbcc 	bl	8003600 <ism330dhcx_read_reg>
 8003e68:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10f      	bne.n	8003e90 <ism330dhcx_gy_data_rate_set+0x2d4>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	7a3b      	ldrb	r3, [r7, #8]
 8003e7a:	f362 1307 	bfi	r3, r2, #4, #4
 8003e7e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8003e80:	f107 0208 	add.w	r2, r7, #8
 8003e84:	2301      	movs	r3, #1
 8003e86:	2111      	movs	r1, #17
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff fbd1 	bl	8003630 <ism330dhcx_write_reg>
 8003e8e:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003e90:	693b      	ldr	r3, [r7, #16]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop

08003e9c <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003ea6:	f107 0208 	add.w	r2, r7, #8
 8003eaa:	2301      	movs	r3, #1
 8003eac:	2111      	movs	r1, #17
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fba6 	bl	8003600 <ism330dhcx_read_reg>
 8003eb4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 8003eb6:	7a3b      	ldrb	r3, [r7, #8]
 8003eb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b0a      	cmp	r3, #10
 8003ec0:	d844      	bhi.n	8003f4c <ism330dhcx_gy_data_rate_get+0xb0>
 8003ec2:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <ism330dhcx_gy_data_rate_get+0x2c>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003ef5 	.word	0x08003ef5
 8003ecc:	08003efd 	.word	0x08003efd
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08003f0d 	.word	0x08003f0d
 8003ed8:	08003f15 	.word	0x08003f15
 8003edc:	08003f1d 	.word	0x08003f1d
 8003ee0:	08003f25 	.word	0x08003f25
 8003ee4:	08003f2d 	.word	0x08003f2d
 8003ee8:	08003f35 	.word	0x08003f35
 8003eec:	08003f3d 	.word	0x08003f3d
 8003ef0:	08003f45 	.word	0x08003f45
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
      break;
 8003efa:	e02b      	b.n	8003f54 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
      break;
 8003f02:	e027      	b.n	8003f54 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2202      	movs	r2, #2
 8003f08:	701a      	strb	r2, [r3, #0]
      break;
 8003f0a:	e023      	b.n	8003f54 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2203      	movs	r2, #3
 8003f10:	701a      	strb	r2, [r3, #0]
      break;
 8003f12:	e01f      	b.n	8003f54 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2204      	movs	r2, #4
 8003f18:	701a      	strb	r2, [r3, #0]
      break;
 8003f1a:	e01b      	b.n	8003f54 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2205      	movs	r2, #5
 8003f20:	701a      	strb	r2, [r3, #0]
      break;
 8003f22:	e017      	b.n	8003f54 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2206      	movs	r2, #6
 8003f28:	701a      	strb	r2, [r3, #0]
      break;
 8003f2a:	e013      	b.n	8003f54 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2207      	movs	r2, #7
 8003f30:	701a      	strb	r2, [r3, #0]
      break;
 8003f32:	e00f      	b.n	8003f54 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2208      	movs	r2, #8
 8003f38:	701a      	strb	r2, [r3, #0]
      break;
 8003f3a:	e00b      	b.n	8003f54 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2209      	movs	r2, #9
 8003f40:	701a      	strb	r2, [r3, #0]
      break;
 8003f42:	e007      	b.n	8003f54 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	220a      	movs	r2, #10
 8003f48:	701a      	strb	r2, [r3, #0]
      break;
 8003f4a:	e003      	b.n	8003f54 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
      break;
 8003f52:	bf00      	nop
  }

  return ret;
 8003f54:	68fb      	ldr	r3, [r7, #12]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop

08003f60 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8003f6c:	f107 0208 	add.w	r2, r7, #8
 8003f70:	2301      	movs	r3, #1
 8003f72:	2112      	movs	r1, #18
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fb43 	bl	8003600 <ism330dhcx_read_reg>
 8003f7a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	7a3b      	ldrb	r3, [r7, #8]
 8003f8c:	f362 1386 	bfi	r3, r2, #6, #1
 8003f90:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8003f92:	f107 0208 	add.w	r2, r7, #8
 8003f96:	2301      	movs	r3, #1
 8003f98:	2112      	movs	r1, #18
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fb48 	bl	8003630 <ism330dhcx_write_reg>
 8003fa0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8003fb6:	f107 020c 	add.w	r2, r7, #12
 8003fba:	2306      	movs	r3, #6
 8003fbc:	2122      	movs	r1, #34	; 0x22
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fb1e 	bl	8003600 <ism330dhcx_read_reg>
 8003fc4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003fc6:	7b7b      	ldrb	r3, [r7, #13]
 8003fc8:	b21a      	sxth	r2, r3
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	7b3b      	ldrb	r3, [r7, #12]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	b21a      	sxth	r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	3302      	adds	r3, #2
 8003fee:	b212      	sxth	r2, r2
 8003ff0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	7bbb      	ldrb	r3, [r7, #14]
 8004002:	b29b      	uxth	r3, r3
 8004004:	4413      	add	r3, r2
 8004006:	b29a      	uxth	r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	3302      	adds	r3, #2
 800400c:	b212      	sxth	r2, r2
 800400e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004010:	7c7a      	ldrb	r2, [r7, #17]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	3304      	adds	r3, #4
 8004016:	b212      	sxth	r2, r2
 8004018:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	3304      	adds	r3, #4
 800401e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004022:	b29b      	uxth	r3, r3
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	b29a      	uxth	r2, r3
 8004028:	7c3b      	ldrb	r3, [r7, #16]
 800402a:	b29b      	uxth	r3, r3
 800402c:	4413      	add	r3, r2
 800402e:	b29a      	uxth	r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	3304      	adds	r3, #4
 8004034:	b212      	sxth	r2, r2
 8004036:	801a      	strh	r2, [r3, #0]

  return ret;
 8004038:	697b      	ldr	r3, [r7, #20]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b086      	sub	sp, #24
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 800404c:	f107 020c 	add.w	r2, r7, #12
 8004050:	2306      	movs	r3, #6
 8004052:	2128      	movs	r1, #40	; 0x28
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fad3 	bl	8003600 <ism330dhcx_read_reg>
 800405a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800405c:	7b7b      	ldrb	r3, [r7, #13]
 800405e:	b21a      	sxth	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800406a:	b29b      	uxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b29a      	uxth	r2, r3
 8004070:	7b3b      	ldrb	r3, [r7, #12]
 8004072:	b29b      	uxth	r3, r3
 8004074:	4413      	add	r3, r2
 8004076:	b29b      	uxth	r3, r3
 8004078:	b21a      	sxth	r2, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800407e:	7bfa      	ldrb	r2, [r7, #15]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	3302      	adds	r3, #2
 8004084:	b212      	sxth	r2, r2
 8004086:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	3302      	adds	r3, #2
 800408c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004090:	b29b      	uxth	r3, r3
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	b29a      	uxth	r2, r3
 8004096:	7bbb      	ldrb	r3, [r7, #14]
 8004098:	b29b      	uxth	r3, r3
 800409a:	4413      	add	r3, r2
 800409c:	b29a      	uxth	r2, r3
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	3302      	adds	r3, #2
 80040a2:	b212      	sxth	r2, r2
 80040a4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80040a6:	7c7a      	ldrb	r2, [r7, #17]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	3304      	adds	r3, #4
 80040ac:	b212      	sxth	r2, r2
 80040ae:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	3304      	adds	r3, #4
 80040b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	b29a      	uxth	r2, r3
 80040be:	7c3b      	ldrb	r3, [r7, #16]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	3304      	adds	r3, #4
 80040ca:	b212      	sxth	r2, r2
 80040cc:	801a      	strh	r2, [r3, #0]

  return ret;
 80040ce:	697b      	ldr	r3, [r7, #20]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <ism330dhcx_fifo_out_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_out_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_DATA_OUT_X_L, buff, 6);
 80040e2:	2306      	movs	r3, #6
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	2179      	movs	r1, #121	; 0x79
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff fa89 	bl	8003600 <ism330dhcx_read_reg>
 80040ee:	60f8      	str	r0, [r7, #12]

  return ret;
 80040f0:	68fb      	ldr	r3, [r7, #12]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8004106:	f107 0208 	add.w	r2, r7, #8
 800410a:	2301      	movs	r3, #1
 800410c:	2118      	movs	r1, #24
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff fa76 	bl	8003600 <ism330dhcx_read_reg>
 8004114:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10f      	bne.n	800413c <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	b2da      	uxtb	r2, r3
 8004124:	7a3b      	ldrb	r3, [r7, #8]
 8004126:	f362 0341 	bfi	r3, r2, #1, #1
 800412a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800412c:	f107 0208 	add.w	r2, r7, #8
 8004130:	2301      	movs	r3, #1
 8004132:	2118      	movs	r1, #24
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fa7b 	bl	8003630 <ism330dhcx_write_reg>
 800413a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800413c:	68fb      	ldr	r3, [r7, #12]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	460b      	mov	r3, r1
 8004150:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8004152:	f107 0208 	add.w	r2, r7, #8
 8004156:	2301      	movs	r3, #1
 8004158:	2101      	movs	r1, #1
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fa50 	bl	8003600 <ism330dhcx_read_reg>
 8004160:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10f      	bne.n	8004188 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	b2da      	uxtb	r2, r3
 8004170:	7a3b      	ldrb	r3, [r7, #8]
 8004172:	f362 1387 	bfi	r3, r2, #6, #2
 8004176:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8004178:	f107 0208 	add.w	r2, r7, #8
 800417c:	2301      	movs	r3, #1
 800417e:	2101      	movs	r1, #1
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fa55 	bl	8003630 <ism330dhcx_write_reg>
 8004186:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8004188:	68fb      	ldr	r3, [r7, #12]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 800419c:	2301      	movs	r3, #1
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	210f      	movs	r1, #15
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff fa2c 	bl	8003600 <ism330dhcx_read_reg>
 80041a8:	60f8      	str	r0, [r7, #12]

  return ret;
 80041aa:	68fb      	ldr	r3, [r7, #12]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80041c0:	f107 0208 	add.w	r2, r7, #8
 80041c4:	2301      	movs	r3, #1
 80041c6:	2112      	movs	r1, #18
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff fa19 	bl	8003600 <ism330dhcx_read_reg>
 80041ce:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10f      	bne.n	80041f6 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	7a3b      	ldrb	r3, [r7, #8]
 80041e0:	f362 0300 	bfi	r3, r2, #0, #1
 80041e4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80041e6:	f107 0208 	add.w	r2, r7, #8
 80041ea:	2301      	movs	r3, #1
 80041ec:	2112      	movs	r1, #18
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fa1e 	bl	8003630 <ism330dhcx_write_reg>
 80041f4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80041f6:	68fb      	ldr	r3, [r7, #12]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800420c:	f107 0208 	add.w	r2, r7, #8
 8004210:	2301      	movs	r3, #1
 8004212:	2112      	movs	r1, #18
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff f9f3 	bl	8003600 <ism330dhcx_read_reg>
 800421a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	b2da      	uxtb	r2, r3
 800422a:	7a3b      	ldrb	r3, [r7, #8]
 800422c:	f362 0382 	bfi	r3, r2, #2, #1
 8004230:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004232:	f107 0208 	add.w	r2, r7, #8
 8004236:	2301      	movs	r3, #1
 8004238:	2112      	movs	r1, #18
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff f9f8 	bl	8003630 <ism330dhcx_write_reg>
 8004240:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <ism330dhcx_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	807b      	strh	r3, [r7, #2]
  ism330dhcx_fifo_ctrl1_t fifo_ctrl1;
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8004258:	f107 020c 	add.w	r2, r7, #12
 800425c:	2301      	movs	r3, #1
 800425e:	2108      	movs	r1, #8
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff f9cd 	bl	8003600 <ism330dhcx_read_reg>
 8004266:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d111      	bne.n	8004292 <ism330dhcx_fifo_watermark_set+0x46>
  {
    fifo_ctrl2.wtm = (uint8_t)(val / 256U) & 0x01U;
 800426e:	887b      	ldrh	r3, [r7, #2]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	b29b      	uxth	r3, r3
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	b2da      	uxtb	r2, r3
 800427a:	7b3b      	ldrb	r3, [r7, #12]
 800427c:	f362 0300 	bfi	r3, r2, #0, #1
 8004280:	733b      	strb	r3, [r7, #12]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8004282:	f107 020c 	add.w	r2, r7, #12
 8004286:	2301      	movs	r3, #1
 8004288:	2108      	movs	r1, #8
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff f9d0 	bl	8003630 <ism330dhcx_write_reg>
 8004290:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  if (ret == 0)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <ism330dhcx_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.wtm = (uint8_t)(val - (fifo_ctrl2.wtm * 256U));
 8004298:	887b      	ldrh	r3, [r7, #2]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	743b      	strb	r3, [r7, #16]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL1,
 800429e:	f107 0210 	add.w	r2, r7, #16
 80042a2:	2301      	movs	r3, #1
 80042a4:	2107      	movs	r1, #7
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff f9c2 	bl	8003630 <ism330dhcx_write_reg>
 80042ac:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl1, 1);
  }

  return ret;
 80042ae:	697b      	ldr	r3, [r7, #20]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <ism330dhcx_fifo_stop_on_wtm_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 80042c4:	f107 0208 	add.w	r2, r7, #8
 80042c8:	2301      	movs	r3, #1
 80042ca:	2108      	movs	r1, #8
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff f997 	bl	8003600 <ism330dhcx_read_reg>
 80042d2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <ism330dhcx_fifo_stop_on_wtm_set+0x42>
  {
    fifo_ctrl2.stop_on_wtm = (uint8_t)val;
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	7a3b      	ldrb	r3, [r7, #8]
 80042e4:	f362 13c7 	bfi	r3, r2, #7, #1
 80042e8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 80042ea:	f107 0208 	add.w	r2, r7, #8
 80042ee:	2301      	movs	r3, #1
 80042f0:	2108      	movs	r1, #8
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff f99c 	bl	8003630 <ism330dhcx_write_reg>
 80042f8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8004310:	f107 0208 	add.w	r2, r7, #8
 8004314:	2301      	movs	r3, #1
 8004316:	2109      	movs	r1, #9
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff f971 	bl	8003600 <ism330dhcx_read_reg>
 800431e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <ism330dhcx_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	b2da      	uxtb	r2, r3
 800432e:	7a3b      	ldrb	r3, [r7, #8]
 8004330:	f362 0303 	bfi	r3, r2, #0, #4
 8004334:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8004336:	f107 0208 	add.w	r2, r7, #8
 800433a:	2301      	movs	r3, #1
 800433c:	2109      	movs	r1, #9
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff f976 	bl	8003630 <ism330dhcx_write_reg>
 8004344:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 800435c:	f107 0208 	add.w	r2, r7, #8
 8004360:	2301      	movs	r3, #1
 8004362:	2109      	movs	r1, #9
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff f94b 	bl	8003600 <ism330dhcx_read_reg>
 800436a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10f      	bne.n	8004392 <ism330dhcx_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	b2da      	uxtb	r2, r3
 800437a:	7a3b      	ldrb	r3, [r7, #8]
 800437c:	f362 1307 	bfi	r3, r2, #4, #4
 8004380:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8004382:	f107 0208 	add.w	r2, r7, #8
 8004386:	2301      	movs	r3, #1
 8004388:	2109      	movs	r1, #9
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff f950 	bl	8003630 <ism330dhcx_write_reg>
 8004390:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8004392:	68fb      	ldr	r3, [r7, #12]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80043a8:	f107 0208 	add.w	r2, r7, #8
 80043ac:	2301      	movs	r3, #1
 80043ae:	210a      	movs	r1, #10
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff f925 	bl	8003600 <ism330dhcx_read_reg>
 80043b6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10f      	bne.n	80043de <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	7a3b      	ldrb	r3, [r7, #8]
 80043c8:	f362 0302 	bfi	r3, r2, #0, #3
 80043cc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80043ce:	f107 0208 	add.w	r2, r7, #8
 80043d2:	2301      	movs	r3, #1
 80043d4:	210a      	movs	r1, #10
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff f92a 	bl	8003630 <ism330dhcx_write_reg>
 80043dc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 80043de:	68fb      	ldr	r3, [r7, #12]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <ism330dhcx_fifo_data_level_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_data_level_get(stmdev_ctx_t *ctx,
                                       uint16_t *val)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  ism330dhcx_fifo_status1_t fifo_status1;
  ism330dhcx_fifo_status2_t fifo_status2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_STATUS1,
 80043f2:	f107 0210 	add.w	r2, r7, #16
 80043f6:	2301      	movs	r3, #1
 80043f8:	213a      	movs	r1, #58	; 0x3a
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff f900 	bl	8003600 <ism330dhcx_read_reg>
 8004400:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_status1, 1);

  if (ret == 0)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d118      	bne.n	800443a <ism330dhcx_fifo_data_level_get+0x52>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_STATUS2,
 8004408:	f107 020c 	add.w	r2, r7, #12
 800440c:	2301      	movs	r3, #1
 800440e:	213b      	movs	r1, #59	; 0x3b
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff f8f5 	bl	8003600 <ism330dhcx_read_reg>
 8004416:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_status2, 1);
    *val = fifo_status2.diff_fifo;
 8004418:	7b3b      	ldrb	r3, [r7, #12]
 800441a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800441e:	b2db      	uxtb	r3, r3
 8004420:	b29a      	uxth	r2, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256U) +  fifo_status1.diff_fifo;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	b29a      	uxth	r2, r3
 800442e:	7c3b      	ldrb	r3, [r7, #16]
 8004430:	b29b      	uxth	r3, r3
 8004432:	4413      	add	r3, r2
 8004434:	b29a      	uxth	r2, r3
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800443a:	697b      	ldr	r3, [r7, #20]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800444e:	2102      	movs	r1, #2
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff fe78 	bl	8004146 <ism330dhcx_mem_bank_set>
 8004456:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 800445e:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8004460:	2301      	movs	r3, #1
 8004462:	2146      	movs	r1, #70	; 0x46
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff f8cb 	bl	8003600 <ism330dhcx_read_reg>
 800446a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d107      	bne.n	8004482 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8004476:	2301      	movs	r3, #1
 8004478:	2147      	movs	r1, #71	; 0x47
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff f8c0 	bl	8003600 <ism330dhcx_read_reg>
 8004480:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004488:	2100      	movs	r1, #0
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff fe5b 	bl	8004146 <ism330dhcx_mem_bank_set>
 8004490:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004492:	68fb      	ldr	r3, [r7, #12]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80044a6:	2102      	movs	r1, #2
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fe4c 	bl	8004146 <ism330dhcx_mem_bank_set>
 80044ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d107      	bne.n	80044c6 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 80044b6:	f107 0208 	add.w	r2, r7, #8
 80044ba:	2301      	movs	r3, #1
 80044bc:	215f      	movs	r1, #95	; 0x5f
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff f89e 	bl	8003600 <ism330dhcx_read_reg>
 80044c4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d104      	bne.n	80044d6 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80044cc:	2100      	movs	r1, #0
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff fe39 	bl	8004146 <ism330dhcx_mem_bank_set>
 80044d4:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80044d6:	7a3b      	ldrb	r3, [r7, #8]
 80044d8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d81a      	bhi.n	8004518 <ism330dhcx_fsm_data_rate_get+0x7c>
 80044e2:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <ism330dhcx_fsm_data_rate_get+0x4c>)
 80044e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e8:	080044f9 	.word	0x080044f9
 80044ec:	08004501 	.word	0x08004501
 80044f0:	08004509 	.word	0x08004509
 80044f4:	08004511 	.word	0x08004511
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]
      break;
 80044fe:	e00f      	b.n	8004520 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]
      break;
 8004506:	e00b      	b.n	8004520 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2202      	movs	r2, #2
 800450c:	701a      	strb	r2, [r3, #0]
      break;
 800450e:	e007      	b.n	8004520 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2203      	movs	r2, #3
 8004514:	701a      	strb	r2, [r3, #0]
      break;
 8004516:	e003      	b.n	8004520 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
      break;
 800451e:	bf00      	nop
  }

  return ret;
 8004520:	68fb      	ldr	r3, [r7, #12]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop

0800452c <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004536:	2102      	movs	r1, #2
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff fe04 	bl	8004146 <ism330dhcx_mem_bank_set>
 800453e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d107      	bne.n	8004556 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8004546:	f107 0208 	add.w	r2, r7, #8
 800454a:	2301      	movs	r3, #1
 800454c:	2105      	movs	r1, #5
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff f856 	bl	8003600 <ism330dhcx_read_reg>
 8004554:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800455c:	2100      	movs	r1, #0
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fdf1 	bl	8004146 <ism330dhcx_mem_bank_set>
 8004564:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8004566:	7a3b      	ldrb	r3, [r7, #8]
 8004568:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004574:	68fb      	ldr	r3, [r7, #12]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800458a:	2102      	movs	r1, #2
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff fdda 	bl	8004146 <ism330dhcx_mem_bank_set>
 8004592:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d107      	bne.n	80045aa <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 800459a:	f107 0208 	add.w	r2, r7, #8
 800459e:	2301      	movs	r3, #1
 80045a0:	2160      	movs	r1, #96	; 0x60
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff f82c 	bl	8003600 <ism330dhcx_read_reg>
 80045a8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d12a      	bne.n	8004606 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 80045b0:	7a3b      	ldrb	r3, [r7, #8]
 80045b2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d81b      	bhi.n	80045f4 <ism330dhcx_mlc_data_rate_get+0x74>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <ism330dhcx_mlc_data_rate_get+0x44>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045dd 	.word	0x080045dd
 80045cc:	080045e5 	.word	0x080045e5
 80045d0:	080045ed 	.word	0x080045ed
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
        break;
 80045da:	e00f      	b.n	80045fc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2201      	movs	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
        break;
 80045e2:	e00b      	b.n	80045fc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2202      	movs	r2, #2
 80045e8:	701a      	strb	r2, [r3, #0]
        break;
 80045ea:	e007      	b.n	80045fc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2203      	movs	r2, #3
 80045f0:	701a      	strb	r2, [r3, #0]
        break;
 80045f2:	e003      	b.n	80045fc <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
        break;
 80045fa:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80045fc:	2100      	movs	r1, #0
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff fda1 	bl	8004146 <ism330dhcx_mem_bank_set>
 8004604:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004606:	68fb      	ldr	r3, [r7, #12]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <BSP_PB_Init>:
 *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
 *                                    with interrupt generation capability
 * @retval BSP status
 */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	460a      	mov	r2, r1
 800461a:	71fb      	strb	r3, [r7, #7]
 800461c:	4613      	mov	r3, r2
 800461e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock*/
  if(Button == BUTTON_USER)
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10f      	bne.n	8004646 <BSP_PB_Init+0x36>
  {
    BUTTON_USER_GPIO_CLK_ENABLE();
 8004626:	4b3c      	ldr	r3, [pc, #240]	; (8004718 <BSP_PB_Init+0x108>)
 8004628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800462c:	4a3a      	ldr	r2, [pc, #232]	; (8004718 <BSP_PB_Init+0x108>)
 800462e:	f043 0310 	orr.w	r3, r3, #16
 8004632:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004636:	4b38      	ldr	r3, [pc, #224]	; (8004718 <BSP_PB_Init+0x108>)
 8004638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	e00e      	b.n	8004664 <BSP_PB_Init+0x54>
  }
  else
  {
    BUTTON_PWR_GPIO_CLK_ENABLE();
 8004646:	4b34      	ldr	r3, [pc, #208]	; (8004718 <BSP_PB_Init+0x108>)
 8004648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464c:	4a32      	ldr	r2, [pc, #200]	; (8004718 <BSP_PB_Init+0x108>)
 800464e:	f043 0308 	orr.w	r3, r3, #8
 8004652:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004656:	4b30      	ldr	r3, [pc, #192]	; (8004718 <BSP_PB_Init+0x108>)
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	68fb      	ldr	r3, [r7, #12]
  }
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	4a2d      	ldr	r2, [pc, #180]	; (800471c <BSP_PB_Init+0x10c>)
 8004668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800466c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800466e:	2302      	movs	r3, #2
 8004670:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004672:	2302      	movs	r3, #2
 8004674:	623b      	str	r3, [r7, #32]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8004676:	79bb      	ldrb	r3, [r7, #6]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10c      	bne.n	8004696 <BSP_PB_Init+0x86>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init((GPIO_TypeDef*) BUTTON_PORT[Button], &gpio_init_structure);
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	4a27      	ldr	r2, [pc, #156]	; (8004720 <BSP_PB_Init+0x110>)
 8004684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004688:	f107 0214 	add.w	r2, r7, #20
 800468c:	4611      	mov	r1, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f001 fa8c 	bl	8005bac <HAL_GPIO_Init>
 8004694:	e03a      	b.n	800470c <BSP_PB_Init+0xfc>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004696:	4b23      	ldr	r3, [pc, #140]	; (8004724 <BSP_PB_Init+0x114>)
 8004698:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init((GPIO_TypeDef*) BUTTON_PORT[Button], &gpio_init_structure);
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	4a20      	ldr	r2, [pc, #128]	; (8004720 <BSP_PB_Init+0x110>)
 800469e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a2:	f107 0214 	add.w	r2, r7, #20
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fa7f 	bl	8005bac <HAL_GPIO_Init>

    (void) HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80046ae:	79fa      	ldrb	r2, [r7, #7]
 80046b0:	4613      	mov	r3, r2
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <BSP_PB_Init+0x118>)
 80046ba:	441a      	add	r2, r3
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	491b      	ldr	r1, [pc, #108]	; (800472c <BSP_PB_Init+0x11c>)
 80046c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f001 fa14 	bl	8005af4 <HAL_EXTI_GetHandle>
    (void) HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, BUTTON_CALLBACK[Button]);
 80046cc:	79fa      	ldrb	r2, [r7, #7]
 80046ce:	4613      	mov	r3, r2
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4a14      	ldr	r2, [pc, #80]	; (8004728 <BSP_PB_Init+0x118>)
 80046d8:	1898      	adds	r0, r3, r2
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	4a14      	ldr	r2, [pc, #80]	; (8004730 <BSP_PB_Init+0x120>)
 80046de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e2:	461a      	mov	r2, r3
 80046e4:	2100      	movs	r1, #0
 80046e6:	f001 f9d9 	bl	8005a9c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BUTTON_PRIO[Button], 0x00);
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	4a11      	ldr	r2, [pc, #68]	; (8004734 <BSP_PB_Init+0x124>)
 80046ee:	56d0      	ldrsb	r0, [r2, r3]
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	4a11      	ldr	r2, [pc, #68]	; (8004738 <BSP_PB_Init+0x128>)
 80046f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f8:	2200      	movs	r2, #0
 80046fa:	4619      	mov	r1, r3
 80046fc:	f001 f8af 	bl	800585e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	4a0c      	ldr	r2, [pc, #48]	; (8004734 <BSP_PB_Init+0x124>)
 8004704:	56d3      	ldrsb	r3, [r2, r3]
 8004706:	4618      	mov	r0, r3
 8004708:	f001 f8c3 	bl	8005892 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3728      	adds	r7, #40	; 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	46020c00 	.word	0x46020c00
 800471c:	080143e8 	.word	0x080143e8
 8004720:	20000068 	.word	0x20000068
 8004724:	10110000 	.word	0x10110000
 8004728:	20000070 	.word	0x20000070
 800472c:	08014400 	.word	0x08014400
 8004730:	080143f0 	.word	0x080143f0
 8004734:	080143ec 	.word	0x080143ec
 8004738:	080143f8 	.word	0x080143f8

0800473c <BSP_PB_GetState>:
 * @param  Button: Specifies the Button to be checked.
 *   This parameter should be: BUTTON_USER
 * @retval The Button GPIO pin value.
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	71fb      	strb	r3, [r7, #7]
  return (int32_t) (HAL_GPIO_ReadPin((GPIO_TypeDef*) BUTTON_PORT[Button], BUTTON_PIN[Button]));
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	4a07      	ldr	r2, [pc, #28]	; (8004768 <BSP_PB_GetState+0x2c>)
 800474a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	4906      	ldr	r1, [pc, #24]	; (800476c <BSP_PB_GetState+0x30>)
 8004752:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004756:	4619      	mov	r1, r3
 8004758:	4610      	mov	r0, r2
 800475a:	f001 fcdd 	bl	8006118 <HAL_GPIO_ReadPin>
 800475e:	4603      	mov	r3, r0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000068 	.word	0x20000068
 800476c:	080143e8 	.word	0x080143e8

08004770 <BUTTON_USER_EXTI_Callback>:
/**
 * @brief  User EXTI line detection callbacks.
 * @retval None
 */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8004774:	2000      	movs	r0, #0
 8004776:	f7fc ffe9 	bl	800174c <BSP_PB_Callback>
}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}

0800477e <BUTTON_PWR_EXTI_Callback>:
/**
 * @brief  Pwr EXTI line detection callbacks.
 * @retval None
 */
static void BUTTON_PWR_EXTI_Callback(void)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_PWR);
 8004782:	2001      	movs	r0, #1
 8004784:	f7fc ffe2 	bl	800174c <BSP_PB_Callback>
}
 8004788:	bf00      	nop
 800478a:	bd80      	pop	{r7, pc}

0800478c <BSP_LED_Init>:
 *          This parameter can be one of the following values:
 *            @arg  LED1
 * @retval None
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t )Led);
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10f      	bne.n	80047bc <BSP_LED_Init+0x30>
 800479c:	4b1c      	ldr	r3, [pc, #112]	; (8004810 <BSP_LED_Init+0x84>)
 800479e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a2:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <BSP_LED_Init+0x84>)
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047ac:	4b18      	ldr	r3, [pc, #96]	; (8004810 <BSP_LED_Init+0x84>)
 80047ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	e00e      	b.n	80047da <BSP_LED_Init+0x4e>
 80047bc:	4b14      	ldr	r3, [pc, #80]	; (8004810 <BSP_LED_Init+0x84>)
 80047be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <BSP_LED_Init+0x84>)
 80047c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047cc:	4b10      	ldr	r3, [pc, #64]	; (8004810 <BSP_LED_Init+0x84>)
 80047ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <BSP_LED_Init+0x88>)
 80047de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047e4:	2301      	movs	r3, #1
 80047e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ec:	2302      	movs	r3, #2
 80047ee:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <BSP_LED_Init+0x8c>)
 80047f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f8:	f107 0214 	add.w	r2, r7, #20
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 f9d4 	bl	8005bac <HAL_GPIO_Init>

  return BSP_ERROR_NONE;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3728      	adds	r7, #40	; 0x28
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	46020c00 	.word	0x46020c00
 8004814:	08014408 	.word	0x08014408
 8004818:	20000088 	.word	0x20000088

0800481c <BSP_LED_On>:
 *            @arg  LED1
 *            @arg  LED2
 * @retval None
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	4a07      	ldr	r2, [pc, #28]	; (8004848 <BSP_LED_On+0x2c>)
 800482a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	4a06      	ldr	r2, [pc, #24]	; (800484c <BSP_LED_On+0x30>)
 8004832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004836:	2201      	movs	r2, #1
 8004838:	4619      	mov	r1, r3
 800483a:	f001 fc85 	bl	8006148 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000088 	.word	0x20000088
 800484c:	08014408 	.word	0x08014408

08004850 <BSP_LED_Off>:
 *            @arg  LED1
 *            @arg  LED2
 * @retval None
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	4a07      	ldr	r2, [pc, #28]	; (800487c <BSP_LED_Off+0x2c>)
 800485e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	4a06      	ldr	r2, [pc, #24]	; (8004880 <BSP_LED_Off+0x30>)
 8004866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800486a:	2200      	movs	r2, #0
 800486c:	4619      	mov	r1, r3
 800486e:	f001 fc6b 	bl	8006148 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000088 	.word	0x20000088
 8004880:	08014408 	.word	0x08014408

08004884 <Sensor_IO_SPI_CS_Init_All>:
 * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
 * @param  None
 * @retval HAL_StatusTypeDef HAL Status
 */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	; 0x28
 8004888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_IIS2DLPC_CS_GPIO_CLK_ENABLE();
 800488a:	4b4e      	ldr	r3, [pc, #312]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 800488c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004890:	4a4c      	ldr	r2, [pc, #304]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8004892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004896:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800489a:	4b4a      	ldr	r3, [pc, #296]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 800489c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	693b      	ldr	r3, [r7, #16]
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 80048a8:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80048aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ae:	4a45      	ldr	r2, [pc, #276]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80048b0:	f043 0320 	orr.w	r3, r3, #32
 80048b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048b8:	4b42      	ldr	r3, [pc, #264]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80048ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 80048c6:	4b3f      	ldr	r3, [pc, #252]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80048c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048cc:	4a3d      	ldr	r2, [pc, #244]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80048ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048d6:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80048d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	68bb      	ldr	r3, [r7, #8]
  BSP_IIS2ICLX_CS_GPIO_CLK_ENABLE();
 80048e4:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80048e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ea:	4a36      	ldr	r2, [pc, #216]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048f4:	4b33      	ldr	r3, [pc, #204]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80048f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	607b      	str	r3, [r7, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
  BSP_EXT_SPI3_CS_GPIO_CLK_ENABLE();
 8004902:	4b30      	ldr	r3, [pc, #192]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8004904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004908:	4a2e      	ldr	r2, [pc, #184]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004912:	4b2c      	ldr	r3, [pc, #176]	; (80049c4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(BSP_IIS2DLPC_CS_PORT, BSP_IIS2DLPC_CS_PIN, GPIO_PIN_SET);
 8004920:	2201      	movs	r2, #1
 8004922:	2140      	movs	r1, #64	; 0x40
 8004924:	4828      	ldr	r0, [pc, #160]	; (80049c8 <Sensor_IO_SPI_CS_Init_All+0x144>)
 8004926:	f001 fc0f 	bl	8006148 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 800492a:	2201      	movs	r2, #1
 800492c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004930:	4826      	ldr	r0, [pc, #152]	; (80049cc <Sensor_IO_SPI_CS_Init_All+0x148>)
 8004932:	f001 fc09 	bl	8006148 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8004936:	2201      	movs	r2, #1
 8004938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800493c:	4822      	ldr	r0, [pc, #136]	; (80049c8 <Sensor_IO_SPI_CS_Init_All+0x144>)
 800493e:	f001 fc03 	bl	8006148 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_IIS2ICLX_CS_PORT, BSP_IIS2ICLX_CS_PIN, GPIO_PIN_SET);
 8004942:	2201      	movs	r2, #1
 8004944:	2180      	movs	r1, #128	; 0x80
 8004946:	4822      	ldr	r0, [pc, #136]	; (80049d0 <Sensor_IO_SPI_CS_Init_All+0x14c>)
 8004948:	f001 fbfe 	bl	8006148 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_EXT_SPI3_CS_PORT, BSP_EXT_SPI3_CS_PIN, GPIO_PIN_SET);
 800494c:	2201      	movs	r2, #1
 800494e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004952:	4820      	ldr	r0, [pc, #128]	; (80049d4 <Sensor_IO_SPI_CS_Init_All+0x150>)
 8004954:	f001 fbf8 	bl	8006148 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004958:	2300      	movs	r3, #0
 800495a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495c:	2300      	movs	r3, #0
 800495e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004960:	2301      	movs	r3, #1
 8004962:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Pin = BSP_IIS2DLPC_CS_PIN;
 8004964:	2340      	movs	r3, #64	; 0x40
 8004966:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_IIS2DLPC_CS_PORT, &GPIO_InitStruct);
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	4619      	mov	r1, r3
 800496e:	4816      	ldr	r0, [pc, #88]	; (80049c8 <Sensor_IO_SPI_CS_Init_All+0x144>)
 8004970:	f001 f91c 	bl	8005bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8004974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004978:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 800497a:	f107 0314 	add.w	r3, r7, #20
 800497e:	4619      	mov	r1, r3
 8004980:	4812      	ldr	r0, [pc, #72]	; (80049cc <Sensor_IO_SPI_CS_Init_All+0x148>)
 8004982:	f001 f913 	bl	8005bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8004986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	4619      	mov	r1, r3
 8004992:	480d      	ldr	r0, [pc, #52]	; (80049c8 <Sensor_IO_SPI_CS_Init_All+0x144>)
 8004994:	f001 f90a 	bl	8005bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_IIS2ICLX_CS_PIN;
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_IIS2ICLX_CS_PORT, &GPIO_InitStruct);
 800499c:	f107 0314 	add.w	r3, r7, #20
 80049a0:	4619      	mov	r1, r3
 80049a2:	480b      	ldr	r0, [pc, #44]	; (80049d0 <Sensor_IO_SPI_CS_Init_All+0x14c>)
 80049a4:	f001 f902 	bl	8005bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_EXT_SPI3_CS_PIN;
 80049a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_EXT_SPI3_CS_PORT, &GPIO_InitStruct);
 80049ae:	f107 0314 	add.w	r3, r7, #20
 80049b2:	4619      	mov	r1, r3
 80049b4:	4807      	ldr	r0, [pc, #28]	; (80049d4 <Sensor_IO_SPI_CS_Init_All+0x150>)
 80049b6:	f001 f8f9 	bl	8005bac <HAL_GPIO_Init>

  return 0;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3728      	adds	r7, #40	; 0x28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	46020c00 	.word	0x46020c00
 80049c8:	42021c00 	.word	0x42021c00
 80049cc:	42021400 	.word	0x42021400
 80049d0:	42022000 	.word	0x42022000
 80049d4:	42020000 	.word	0x42020000

080049d8 <BSP_SPI2_Init>:
 * @brief  Initializes SPI HAL.
 * @retval None
 * @retval BSP status
 */
int32_t BSP_SPI2_Init(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80049de:	2300      	movs	r3, #0
 80049e0:	607b      	str	r3, [r7, #4]

  hbusspi2.Instance = SPI2;
 80049e2:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <BSP_SPI2_Init+0x50>)
 80049e4:	4a11      	ldr	r2, [pc, #68]	; (8004a2c <BSP_SPI2_Init+0x54>)
 80049e6:	601a      	str	r2, [r3, #0]
  if(HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET)
 80049e8:	480f      	ldr	r0, [pc, #60]	; (8004a28 <BSP_SPI2_Init+0x50>)
 80049ea:	f006 fac5 	bl	800af78 <HAL_SPI_GetState>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <BSP_SPI2_Init+0x34>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI2_MspInit(&hbusspi2);
 80049f4:	480c      	ldr	r0, [pc, #48]	; (8004a28 <BSP_SPI2_Init+0x50>)
 80049f6:	f000 f8ed 	bl	8004bd4 <SPI2_MspInit>
      }
    }
#endif   

    /* Init the SPI */
    if(MX_SPI2_Init(&hbusspi2) != HAL_OK)
 80049fa:	480b      	ldr	r0, [pc, #44]	; (8004a28 <BSP_SPI2_Init+0x50>)
 80049fc:	f000 f870 	bl	8004ae0 <MX_SPI2_Init>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <BSP_SPI2_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004a06:	f06f 0307 	mvn.w	r3, #7
 8004a0a:	607b      	str	r3, [r7, #4]
    }
  }

  __HAL_SPI_ENABLE(&hbusspi2);
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <BSP_SPI2_Init+0x50>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <BSP_SPI2_Init+0x50>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

  return ret;
 8004a1c:	687b      	ldr	r3, [r7, #4]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20001bc4 	.word	0x20001bc4
 8004a2c:	40003800 	.word	0x40003800

08004a30 <BSP_SPI2_DeInit>:
 * @brief  DeInitializes SPI HAL.
 * @retval None
 * @retval BSP status
 */
int32_t BSP_SPI2_DeInit(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004a36:	f06f 0307 	mvn.w	r3, #7
 8004a3a:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
  SPI2_MspDeInit(&hbusspi2);
 8004a3c:	4807      	ldr	r0, [pc, #28]	; (8004a5c <BSP_SPI2_DeInit+0x2c>)
 8004a3e:	f000 f925 	bl	8004c8c <SPI2_MspDeInit>
#endif  

  if(HAL_SPI_DeInit(&hbusspi2) == HAL_OK)
 8004a42:	4806      	ldr	r0, [pc, #24]	; (8004a5c <BSP_SPI2_DeInit+0x2c>)
 8004a44:	f005 fc54 	bl	800a2f0 <HAL_SPI_DeInit>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <BSP_SPI2_DeInit+0x22>
  {
    ret = BSP_ERROR_NONE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8004a52:	687b      	ldr	r3, [r7, #4]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20001bc4 	.word	0x20001bc4

08004a60 <BSP_SPI2_Send>:
 * @param  pData: Data
 * @param  len: Length of data in byte
 * @retval BSP status
 */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t len)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004a6c:	f06f 0305 	mvn.w	r3, #5
 8004a70:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8004a72:	887a      	ldrh	r2, [r7, #2]
 8004a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4806      	ldr	r0, [pc, #24]	; (8004a94 <BSP_SPI2_Send+0x34>)
 8004a7c:	f005 fc62 	bl	800a344 <HAL_SPI_Transmit>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <BSP_SPI2_Send+0x2a>
  {
    ret = BSP_ERROR_NONE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20001bc4 	.word	0x20001bc4

08004a98 <BSP_SPI2_Recv>:
 * @param  pData: Data
 * @param  len: Length of data in byte
 * @retval BSP status
 */
int32_t BSP_SPI2_Recv(uint8_t *pData, uint16_t len)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004aa4:	f06f 0305 	mvn.w	r3, #5
 8004aa8:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8004aaa:	887a      	ldrh	r2, [r7, #2]
 8004aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4806      	ldr	r0, [pc, #24]	; (8004acc <BSP_SPI2_Recv+0x34>)
 8004ab4:	f005 fe58 	bl	800a768 <HAL_SPI_Receive>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <BSP_SPI2_Recv+0x2a>
  {
    ret = BSP_ERROR_NONE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20001bc4 	.word	0x20001bc4

08004ad0 <BSP_GetTick>:
/**
 * @brief  Return system tick in ms
 * @retval Current HAL time base time stamp
 */
int32_t BSP_GetTick(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  return (int32_t) HAL_GetTick();
 8004ad4:	f000 fddc 	bl	8005690 <HAL_GetTick>
 8004ad8:	4603      	mov	r3, r0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <MX_SPI2_Init>:
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4);
}

/* SPI2 init function */
__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef *hspi)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	75fb      	strb	r3, [r7, #23]

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct =
 8004aec:	f107 0308 	add.w	r3, r7, #8
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi->Instance = SPI2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a35      	ldr	r2, [pc, #212]	; (8004bd0 <MX_SPI2_Init+0xf0>)
 8004afc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004b04:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2207      	movs	r2, #7
 8004b10:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b18:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b20:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004b28:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004b30:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 0x7;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2207      	movs	r2, #7
 8004b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi->Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	659a      	str	r2, [r3, #88]	; 0x58
  hspi->Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	661a      	str	r2, [r3, #96]	; 0x60
  if(HAL_SPI_Init(hspi) != HAL_OK)
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f005 fab4 	bl	800a100 <HAL_SPI_Init>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <MX_SPI2_Init+0xc2>
  {
    ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	75fb      	strb	r3, [r7, #23]
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8004ba6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004baa:	60fb      	str	r3, [r7, #12]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8004bac:	2300      	movs	r3, #0
 8004bae:	613b      	str	r3, [r7, #16]
  if(HAL_SPIEx_SetConfigAutonomousMode(hspi, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f006 fad5 	bl	800b166 <HAL_SPIEx_SetConfigAutonomousMode>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <MX_SPI2_Init+0xe6>
  {
    ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40003800 	.word	0x40003800

08004bd4 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef *spiHandle)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(spiHandle);
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable Peripheral clock */
  __HAL_RCC_SPI2_CLK_ENABLE();
 8004bdc:	4b28      	ldr	r3, [pc, #160]	; (8004c80 <SPI2_MspInit+0xac>)
 8004bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004be2:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <SPI2_MspInit+0xac>)
 8004be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004be8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <SPI2_MspInit+0xac>)
 8004bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004bfa:	4b21      	ldr	r3, [pc, #132]	; (8004c80 <SPI2_MspInit+0xac>)
 8004bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c00:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <SPI2_MspInit+0xac>)
 8004c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c0a:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <SPI2_MspInit+0xac>)
 8004c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <SPI2_MspInit+0xac>)
 8004c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1e:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <SPI2_MspInit+0xac>)
 8004c20:	f043 0308 	orr.w	r3, r3, #8
 8004c24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c28:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <SPI2_MspInit+0xac>)
 8004c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	68bb      	ldr	r3, [r7, #8]
   PI1     ------> SPI2_SCK
   PD3     ------> SPI2_MISO
   PI3     ------> SPI2_MOSI
   */

  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 8004c36:	230a      	movs	r3, #10
 8004c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c42:	2303      	movs	r3, #3
 8004c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c46:	2305      	movs	r3, #5
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004c4a:	f107 0314 	add.w	r3, r7, #20
 8004c4e:	4619      	mov	r1, r3
 8004c50:	480c      	ldr	r0, [pc, #48]	; (8004c84 <SPI2_MspInit+0xb0>)
 8004c52:	f000 ffab 	bl	8005bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004c56:	2308      	movs	r3, #8
 8004c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c62:	2303      	movs	r3, #3
 8004c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c66:	2305      	movs	r3, #5
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c6a:	f107 0314 	add.w	r3, r7, #20
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4805      	ldr	r0, [pc, #20]	; (8004c88 <SPI2_MspInit+0xb4>)
 8004c72:	f000 ff9b 	bl	8005bac <HAL_GPIO_Init>
}
 8004c76:	bf00      	nop
 8004c78:	3728      	adds	r7, #40	; 0x28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	46020c00 	.word	0x46020c00
 8004c84:	42022000 	.word	0x42022000
 8004c88:	42020c00 	.word	0x42020c00

08004c8c <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef *spiHandle)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(spiHandle);

  /* Peripheral clock disable */
  __HAL_RCC_SPI2_CLK_DISABLE();
 8004c94:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <SPI2_MspDeInit+0x30>)
 8004c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c9a:	4a08      	ldr	r2, [pc, #32]	; (8004cbc <SPI2_MspDeInit+0x30>)
 8004c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ca0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  /**SPI2 GPIO Configuration
   PI1     ------> SPI2_SCK
   PD3     ------> SPI2_MISO
   PI3     ------> SPI2_MOSI
   */
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_1 | GPIO_PIN_3);
 8004ca4:	210a      	movs	r1, #10
 8004ca6:	4806      	ldr	r0, [pc, #24]	; (8004cc0 <SPI2_MspDeInit+0x34>)
 8004ca8:	f001 f958 	bl	8005f5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3);
 8004cac:	2108      	movs	r1, #8
 8004cae:	4805      	ldr	r0, [pc, #20]	; (8004cc4 <SPI2_MspDeInit+0x38>)
 8004cb0:	f001 f954 	bl	8005f5c <HAL_GPIO_DeInit>
}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	46020c00 	.word	0x46020c00
 8004cc0:	42022000 	.word	0x42022000
 8004cc4:	42020c00 	.word	0x42020c00

08004cc8 <BSP_MOTION_SENSOR_Init>:
 * @brief  Initializes the motion sensors
 * @param  Instance Motion sensor instance
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08e      	sub	sp, #56	; 0x38
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  MOTION_SENSOR_Capabilities_t cap;

  switch(Instance)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d131      	bne.n	8004d48 <BSP_MOTION_SENSOR_Init+0x80>
      break;
#endif

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8004ce4:	6838      	ldr	r0, [r7, #0]
 8004ce6:	f000 f945 	bl	8004f74 <ISM330DHCX_0_Probe>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <BSP_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	e064      	b.n	8004dc0 <BSP_MOTION_SENSOR_Init+0xf8>
      }
      if(MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void*) &cap) != BSP_ERROR_NONE)
 8004cf6:	4a34      	ldr	r2, [pc, #208]	; (8004dc8 <BSP_MOTION_SENSOR_Init+0x100>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4932      	ldr	r1, [pc, #200]	; (8004dcc <BSP_MOTION_SENSOR_Init+0x104>)
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d08:	f107 010c 	add.w	r1, r7, #12
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4798      	blx	r3
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <BSP_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004d16:	f06f 0306 	mvn.w	r3, #6
 8004d1a:	e051      	b.n	8004dc0 <BSP_MOTION_SENSOR_Init+0xf8>
      }
      if(cap.Acc == 1U)
 8004d1c:	7b3b      	ldrb	r3, [r7, #12]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d103      	bne.n	8004d2a <BSP_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	f043 0302 	orr.w	r3, r3, #2
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if(cap.Gyro == 1U)
 8004d2a:	7b7b      	ldrb	r3, [r7, #13]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d103      	bne.n	8004d38 <BSP_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if(cap.Magneto == 1U)
 8004d38:	7bbb      	ldrb	r3, [r7, #14]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d108      	bne.n	8004d50 <BSP_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	f043 0304 	orr.w	r3, r3, #4
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004d46:	e003      	b.n	8004d50 <BSP_MOTION_SENSOR_Init+0x88>
        component_functions |= MOTION_MAGNETO;
      }
      break;
#endif      
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004d48:	f06f 0301 	mvn.w	r3, #1
 8004d4c:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8004d4e:	e000      	b.n	8004d52 <BSP_MOTION_SENSOR_Init+0x8a>
      break;
 8004d50:	bf00      	nop
  }

  if(ret != BSP_ERROR_NONE)
 8004d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <BSP_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 8004d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5a:	e031      	b.n	8004dc0 <BSP_MOTION_SENSOR_Init+0xf8>
  }

  for(i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d60:	e02a      	b.n	8004db8 <BSP_MOTION_SENSOR_Init+0xf0>
  {
    if(((Functions & function) == function) && ((component_functions & function) == function))
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	4013      	ands	r3, r2
 8004d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d11e      	bne.n	8004dac <BSP_MOTION_SENSOR_Init+0xe4>
 8004d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	4013      	ands	r3, r2
 8004d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d118      	bne.n	8004dac <BSP_MOTION_SENSOR_Init+0xe4>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004d7a:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <BSP_MOTION_SENSOR_Init+0x108>)
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d82:	4814      	ldr	r0, [pc, #80]	; (8004dd4 <BSP_MOTION_SENSOR_Init+0x10c>)
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	490d      	ldr	r1, [pc, #52]	; (8004dcc <BSP_MOTION_SENSOR_Init+0x104>)
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4798      	blx	r3
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <BSP_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004da6:	f06f 0304 	mvn.w	r3, #4
 8004daa:	e009      	b.n	8004dc0 <BSP_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	633b      	str	r3, [r7, #48]	; 0x30
  for(i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	3301      	adds	r3, #1
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d9d1      	bls.n	8004d62 <BSP_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 8004dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3738      	adds	r7, #56	; 0x38
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20001c64 	.word	0x20001c64
 8004dcc:	20001c54 	.word	0x20001c54
 8004dd0:	20000090 	.word	0x20000090
 8004dd4:	20001c58 	.word	0x20001c58

08004dd8 <BSP_MOTION_SENSOR_GetSensitivity>:
 *         - MOTION_MAGNETO
 * @param  Sensitivity pointer to sensitivity read value
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float *Sensitivity)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= MOTION_INSTANCES_NBR)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <BSP_MOTION_SENSOR_GetSensitivity+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004dea:	f06f 0301 	mvn.w	r3, #1
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e029      	b.n	8004e46 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
  }
  else
  {
    if((MotionCtx[Instance].Functions & Function) == Function)
 8004df2:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <BSP_MOTION_SENSOR_GetSensitivity+0x78>)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d11d      	bne.n	8004e40 <BSP_MOTION_SENSOR_GetSensitivity+0x68>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance], Sensitivity) != BSP_ERROR_NONE)
 8004e04:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <BSP_MOTION_SENSOR_GetSensitivity+0x7c>)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e0c:	4812      	ldr	r0, [pc, #72]	; (8004e58 <BSP_MOTION_SENSOR_GetSensitivity+0x80>)
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4613      	mov	r3, r2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4413      	add	r3, r2
 8004e16:	440b      	add	r3, r1
 8004e18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	490f      	ldr	r1, [pc, #60]	; (8004e5c <BSP_MOTION_SENSOR_GetSensitivity+0x84>)
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4798      	blx	r3
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <BSP_MOTION_SENSOR_GetSensitivity+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004e32:	f06f 0304 	mvn.w	r3, #4
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e005      	b.n	8004e46 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e002      	b.n	8004e46 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004e40:	f06f 0301 	mvn.w	r3, #1
 8004e44:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004e46:	697b      	ldr	r3, [r7, #20]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20001c68 	.word	0x20001c68
 8004e54:	20000090 	.word	0x20000090
 8004e58:	20001c58 	.word	0x20001c58
 8004e5c:	20001c54 	.word	0x20001c54

08004e60 <BSP_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if(Instance >= MOTION_INSTANCES_NBR)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <BSP_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004e74:	f06f 0301 	mvn.w	r3, #1
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e02a      	b.n	8004ed2 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if((MotionCtx[Instance].Functions & Function) == Function)
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4013      	ands	r3, r2
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d11e      	bne.n	8004ecc <BSP_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8004e8e:	4a14      	ldr	r2, [pc, #80]	; (8004ee0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e96:	4813      	ldr	r0, [pc, #76]	; (8004ee4 <BSP_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	4413      	add	r3, r2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	490f      	ldr	r1, [pc, #60]	; (8004ee8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004eb0:	ed97 0a01 	vldr	s0, [r7, #4]
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4798      	blx	r3
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <BSP_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ebe:	f06f 0304 	mvn.w	r3, #4
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e005      	b.n	8004ed2 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e002      	b.n	8004ed2 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004ecc:	f06f 0301 	mvn.w	r3, #1
 8004ed0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004ed2:	697b      	ldr	r3, [r7, #20]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20001c68 	.word	0x20001c68
 8004ee0:	20000090 	.word	0x20000090
 8004ee4:	20001c58 	.word	0x20001c58
 8004ee8:	20001c54 	.word	0x20001c54

08004eec <BSP_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= MOTION_INSTANCES_NBR)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <BSP_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004efe:	f06f 0301 	mvn.w	r3, #1
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e029      	b.n	8004f5a <BSP_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if((MotionCtx[Instance].Functions & Function) == Function)
 8004f06:	4a17      	ldr	r2, [pc, #92]	; (8004f64 <BSP_MOTION_SENSOR_SetFullScale+0x78>)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4013      	ands	r3, r2
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d11d      	bne.n	8004f54 <BSP_MOTION_SENSOR_SetFullScale+0x68>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 8004f18:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <BSP_MOTION_SENSOR_SetFullScale+0x7c>)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f20:	4812      	ldr	r0, [pc, #72]	; (8004f6c <BSP_MOTION_SENSOR_SetFullScale+0x80>)
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4613      	mov	r3, r2
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	4413      	add	r3, r2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	490f      	ldr	r1, [pc, #60]	; (8004f70 <BSP_MOTION_SENSOR_SetFullScale+0x84>)
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4798      	blx	r3
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <BSP_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f46:	f06f 0304 	mvn.w	r3, #4
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e005      	b.n	8004f5a <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e002      	b.n	8004f5a <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004f54:	f06f 0301 	mvn.w	r3, #1
 8004f58:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004f5a:	697b      	ldr	r3, [r7, #20]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20001c68 	.word	0x20001c68
 8004f68:	20000090 	.word	0x20000090
 8004f6c:	20001c58 	.word	0x20001c58
 8004f70:	20001c54 	.word	0x20001c54

08004f74 <ISM330DHCX_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b092      	sub	sp, #72	; 0x48
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t io_ctx;
  uint8_t id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t cap;
  int32_t ret = BSP_ERROR_NONE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8004f80:	2301      	movs	r3, #1
 8004f82:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address = 0x0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init = BSP_ISM330DHCX_Init;
 8004f8a:	4b47      	ldr	r3, [pc, #284]	; (80050a8 <ISM330DHCX_0_Probe+0x134>)
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit = BSP_ISM330DHCX_DeInit;
 8004f8e:	4b47      	ldr	r3, [pc, #284]	; (80050ac <ISM330DHCX_0_Probe+0x138>)
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg = BSP_ISM330DHCX_ReadReg;
 8004f92:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <ISM330DHCX_0_Probe+0x13c>)
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg = BSP_ISM330DHCX_WriteReg;
 8004f96:	4b47      	ldr	r3, [pc, #284]	; (80050b4 <ISM330DHCX_0_Probe+0x140>)
 8004f98:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick = BSP_GetTick;
 8004f9a:	4b47      	ldr	r3, [pc, #284]	; (80050b8 <ISM330DHCX_0_Probe+0x144>)
 8004f9c:	643b      	str	r3, [r7, #64]	; 0x40

  if(ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8004f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4845      	ldr	r0, [pc, #276]	; (80050bc <ISM330DHCX_0_Probe+0x148>)
 8004fa6:	f7fd f8f5 	bl	8002194 <ISM330DHCX_RegisterBusIO>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004fb0:	f06f 0306 	mvn.w	r3, #6
 8004fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb6:	e071      	b.n	800509c <ISM330DHCX_0_Probe+0x128>
  }
  else if(ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8004fb8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	483f      	ldr	r0, [pc, #252]	; (80050bc <ISM330DHCX_0_Probe+0x148>)
 8004fc0:	f7fd fa02 	bl	80023c8 <ISM330DHCX_ReadID>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004fca:	f06f 0306 	mvn.w	r3, #6
 8004fce:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd0:	e064      	b.n	800509c <ISM330DHCX_0_Probe+0x128>
  }
  else if(id != ISM330DHCX_ID)
 8004fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fd6:	2b6b      	cmp	r3, #107	; 0x6b
 8004fd8:	d003      	beq.n	8004fe2 <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004fda:	f06f 0306 	mvn.w	r3, #6
 8004fde:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe0:	e05c      	b.n	800509c <ISM330DHCX_0_Probe+0x128>
  }
  else
  {
    (void) ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8004fe2:	f107 0308 	add.w	r3, r7, #8
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4834      	ldr	r0, [pc, #208]	; (80050bc <ISM330DHCX_0_Probe+0x148>)
 8004fea:	f7fd fa03 	bl	80023f4 <ISM330DHCX_GetCapabilities>
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t) cap.Gyro) | ((uint32_t) cap.Acc << 1) | ((uint32_t) cap.Magneto << 2);
 8004fee:	7a7b      	ldrb	r3, [r7, #9]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	7a3b      	ldrb	r3, [r7, #8]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	7abb      	ldrb	r3, [r7, #10]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	4a30      	ldr	r2, [pc, #192]	; (80050c0 <ISM330DHCX_0_Probe+0x14c>)
 8005000:	6013      	str	r3, [r2, #0]

    MotionCompObj[ISM330DHCX_0] = &ism330dhcx_obj_0;
 8005002:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <ISM330DHCX_0_Probe+0x150>)
 8005004:	4a2d      	ldr	r2, [pc, #180]	; (80050bc <ISM330DHCX_0_Probe+0x148>)
 8005006:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t*) (void*) &ISM330DHCX_COMMON_Driver;
 8005008:	4b2f      	ldr	r3, [pc, #188]	; (80050c8 <ISM330DHCX_0_Probe+0x154>)
 800500a:	4a30      	ldr	r2, [pc, #192]	; (80050cc <ISM330DHCX_0_Probe+0x158>)
 800500c:	601a      	str	r2, [r3, #0]

    if(((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d018      	beq.n	800504a <ISM330DHCX_0_Probe+0xd6>
 8005018:	7a3b      	ldrb	r3, [r7, #8]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d115      	bne.n	800504a <ISM330DHCX_0_Probe+0xd6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t*) (void*) &ISM330DHCX_ACC_Driver;
 800501e:	4b2c      	ldr	r3, [pc, #176]	; (80050d0 <ISM330DHCX_0_Probe+0x15c>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <ISM330DHCX_0_Probe+0x160>)
 8005024:	492c      	ldr	r1, [pc, #176]	; (80050d8 <ISM330DHCX_0_Probe+0x164>)
 8005026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if(MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 800502a:	4b27      	ldr	r3, [pc, #156]	; (80050c8 <ISM330DHCX_0_Probe+0x154>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a24      	ldr	r2, [pc, #144]	; (80050c4 <ISM330DHCX_0_Probe+0x150>)
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	4610      	mov	r0, r2
 8005036:	4798      	blx	r3
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <ISM330DHCX_0_Probe+0xd2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800503e:	f06f 0304 	mvn.w	r3, #4
 8005042:	647b      	str	r3, [r7, #68]	; 0x44
 8005044:	e001      	b.n	800504a <ISM330DHCX_0_Probe+0xd6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005046:	2300      	movs	r3, #0
 8005048:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }

    if(((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d018      	beq.n	8005086 <ISM330DHCX_0_Probe+0x112>
 8005054:	7a7b      	ldrb	r3, [r7, #9]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d115      	bne.n	8005086 <ISM330DHCX_0_Probe+0x112>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t*) (void*) &ISM330DHCX_GYRO_Driver;
 800505a:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <ISM330DHCX_0_Probe+0x15c>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <ISM330DHCX_0_Probe+0x160>)
 8005060:	491e      	ldr	r1, [pc, #120]	; (80050dc <ISM330DHCX_0_Probe+0x168>)
 8005062:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if(MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8005066:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <ISM330DHCX_0_Probe+0x154>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <ISM330DHCX_0_Probe+0x150>)
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	4610      	mov	r0, r2
 8005072:	4798      	blx	r3
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <ISM330DHCX_0_Probe+0x10e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800507a:	f06f 0304 	mvn.w	r3, #4
 800507e:	647b      	str	r3, [r7, #68]	; 0x44
 8005080:	e001      	b.n	8005086 <ISM330DHCX_0_Probe+0x112>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005082:	2300      	movs	r3, #0
 8005084:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if(((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 0U))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <ISM330DHCX_0_Probe+0x128>
 8005090:	7abb      	ldrb	r3, [r7, #10]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d102      	bne.n	800509c <ISM330DHCX_0_Probe+0x128>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005096:	f06f 0304 	mvn.w	r3, #4
 800509a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800509c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3748      	adds	r7, #72	; 0x48
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	080050e1 	.word	0x080050e1
 80050ac:	080051f9 	.word	0x080051f9
 80050b0:	08005285 	.word	0x08005285
 80050b4:	0800521d 	.word	0x0800521d
 80050b8:	08004ad1 	.word	0x08004ad1
 80050bc:	20001c6c 	.word	0x20001c6c
 80050c0:	20001c68 	.word	0x20001c68
 80050c4:	20001c54 	.word	0x20001c54
 80050c8:	20001c64 	.word	0x20001c64
 80050cc:	20000010 	.word	0x20000010
 80050d0:	20000090 	.word	0x20000090
 80050d4:	20001c58 	.word	0x20001c58
 80050d8:	20000020 	.word	0x20000020
 80050dc:	20000044 	.word	0x20000044

080050e0 <BSP_ISM330DHCX_Init>:

static int32_t BSP_ISM330DHCX_Init(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80050e6:	f06f 0305 	mvn.w	r3, #5
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure ISM330DHCX INT1 pin */
  BSP_ISM330DHCX_INT1_GPIO_CLK_ENABLE();
 80050ec:	4b3d      	ldr	r3, [pc, #244]	; (80051e4 <BSP_ISM330DHCX_Init+0x104>)
 80050ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f2:	4a3c      	ldr	r2, [pc, #240]	; (80051e4 <BSP_ISM330DHCX_Init+0x104>)
 80050f4:	f043 0302 	orr.w	r3, r3, #2
 80050f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050fc:	4b39      	ldr	r3, [pc, #228]	; (80051e4 <BSP_ISM330DHCX_Init+0x104>)
 80050fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT1_PIN;
 800510a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800510e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005110:	4b35      	ldr	r3, [pc, #212]	; (80051e8 <BSP_ISM330DHCX_Init+0x108>)
 8005112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005114:	2302      	movs	r3, #2
 8005116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005118:	2300      	movs	r3, #0
 800511a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT1_PORT, &GPIO_InitStruct);
 800511c:	f107 0310 	add.w	r3, r7, #16
 8005120:	4619      	mov	r1, r3
 8005122:	4832      	ldr	r0, [pc, #200]	; (80051ec <BSP_ISM330DHCX_Init+0x10c>)
 8005124:	f000 fd42 	bl	8005bac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  /* Enable and set EXTI Interrupt priority */
  HAL_NVIC_SetPriority(BSP_ISM330DHCX_INT1_EXTI_IRQn, BSP_ISM330DHCX_INT1_EXTI_IRQ_PP, BSP_ISM330DHCX_INT1_EXTI_IRQ_SP);
 8005128:	2200      	movs	r2, #0
 800512a:	2101      	movs	r1, #1
 800512c:	2013      	movs	r0, #19
 800512e:	f000 fb96 	bl	800585e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_ISM330DHCX_INT1_EXTI_IRQn);
 8005132:	2013      	movs	r0, #19
 8005134:	f000 fbad 	bl	8005892 <HAL_NVIC_EnableIRQ>

  /* Configure ISM330DHCX INT2 pin */
  BSP_ISM330DHCX_INT2_GPIO_CLK_ENABLE();
 8005138:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <BSP_ISM330DHCX_Init+0x104>)
 800513a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513e:	4a29      	ldr	r2, [pc, #164]	; (80051e4 <BSP_ISM330DHCX_Init+0x104>)
 8005140:	f043 0320 	orr.w	r3, r3, #32
 8005144:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005148:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <BSP_ISM330DHCX_Init+0x104>)
 800514a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT2_PIN;
 8005156:	2310      	movs	r3, #16
 8005158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800515a:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <BSP_ISM330DHCX_Init+0x108>)
 800515c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800515e:	2302      	movs	r3, #2
 8005160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005162:	2300      	movs	r3, #0
 8005164:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 8005166:	f107 0310 	add.w	r3, r7, #16
 800516a:	4619      	mov	r1, r3
 800516c:	4820      	ldr	r0, [pc, #128]	; (80051f0 <BSP_ISM330DHCX_Init+0x110>)
 800516e:	f000 fd1d 	bl	8005bac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  /* Enable and set EXTI Interrupt priority */
  HAL_NVIC_SetPriority(BSP_ISM330DHCX_INT2_EXTI_IRQn, BSP_ISM330DHCX_INT2_EXTI_IRQ_PP, BSP_ISM330DHCX_INT2_EXTI_IRQ_SP);
 8005172:	2200      	movs	r2, #0
 8005174:	2101      	movs	r1, #1
 8005176:	200f      	movs	r0, #15
 8005178:	f000 fb71 	bl	800585e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_ISM330DHCX_INT2_EXTI_IRQn);
 800517c:	200f      	movs	r0, #15
 800517e:	f000 fb88 	bl	8005892 <HAL_NVIC_EnableIRQ>

  /* Configure ISM330DHCX CS pin */
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8005182:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <BSP_ISM330DHCX_Init+0x104>)
 8005184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005188:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <BSP_ISM330DHCX_Init+0x104>)
 800518a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005192:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <BSP_ISM330DHCX_Init+0x104>)
 8005194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519c:	607b      	str	r3, [r7, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80051a0:	2201      	movs	r2, #1
 80051a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051a6:	4813      	ldr	r0, [pc, #76]	; (80051f4 <BSP_ISM330DHCX_Init+0x114>)
 80051a8:	f000 ffce 	bl	8006148 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051ac:	2302      	movs	r3, #2
 80051ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051b4:	2301      	movs	r3, #1
 80051b6:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 80051b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 80051be:	f107 0310 	add.w	r3, r7, #16
 80051c2:	4619      	mov	r1, r3
 80051c4:	480b      	ldr	r0, [pc, #44]	; (80051f4 <BSP_ISM330DHCX_Init+0x114>)
 80051c6:	f000 fcf1 	bl	8005bac <HAL_GPIO_Init>

  if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 80051ca:	f7ff fc05 	bl	80049d8 <BSP_SPI2_Init>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <BSP_ISM330DHCX_Init+0xf8>
  {
    ret = BSP_ERROR_NONE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3728      	adds	r7, #40	; 0x28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	46020c00 	.word	0x46020c00
 80051e8:	10110000 	.word	0x10110000
 80051ec:	42020400 	.word	0x42020400
 80051f0:	42021400 	.word	0x42021400
 80051f4:	42021c00 	.word	0x42021c00

080051f8 <BSP_ISM330DHCX_DeInit>:

static int32_t BSP_ISM330DHCX_DeInit(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80051fe:	f06f 0305 	mvn.w	r3, #5
 8005202:	607b      	str	r3, [r7, #4]

  if(BSP_SPI2_DeInit() == BSP_ERROR_NONE)
 8005204:	f7ff fc14 	bl	8004a30 <BSP_SPI2_DeInit>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <BSP_ISM330DHCX_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8005212:	687b      	ldr	r3, [r7, #4]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <BSP_ISM330DHCX_WriteReg>:

static int32_t BSP_ISM330DHCX_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60ba      	str	r2, [r7, #8]
 8005224:	461a      	mov	r2, r3
 8005226:	4603      	mov	r3, r0
 8005228:	81fb      	strh	r3, [r7, #14]
 800522a:	460b      	mov	r3, r1
 800522c:	81bb      	strh	r3, [r7, #12]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t) Reg;
 8005236:	89bb      	ldrh	r3, [r7, #12]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 800523c:	2200      	movs	r2, #0
 800523e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005242:	480f      	ldr	r0, [pc, #60]	; (8005280 <BSP_ISM330DHCX_WriteReg+0x64>)
 8005244:	f000 ff80 	bl	8006148 <HAL_GPIO_WritePin>

  ret = BSP_SPI2_Send(&dataReg, 1);
 8005248:	f107 0313 	add.w	r3, r7, #19
 800524c:	2101      	movs	r1, #1
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fc06 	bl	8004a60 <BSP_SPI2_Send>
 8005254:	6178      	str	r0, [r7, #20]

  if(ret == BSP_ERROR_NONE)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d105      	bne.n	8005268 <BSP_ISM330DHCX_WriteReg+0x4c>
  {
    ret = BSP_SPI2_Send(pdata, len);
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	4619      	mov	r1, r3
 8005260:	68b8      	ldr	r0, [r7, #8]
 8005262:	f7ff fbfd 	bl	8004a60 <BSP_SPI2_Send>
 8005266:	6178      	str	r0, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8005268:	2201      	movs	r2, #1
 800526a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800526e:	4804      	ldr	r0, [pc, #16]	; (8005280 <BSP_ISM330DHCX_WriteReg+0x64>)
 8005270:	f000 ff6a 	bl	8006148 <HAL_GPIO_WritePin>

  return ret;
 8005274:	697b      	ldr	r3, [r7, #20]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	42021c00 	.word	0x42021c00

08005284 <BSP_ISM330DHCX_ReadReg>:

static int32_t BSP_ISM330DHCX_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60ba      	str	r2, [r7, #8]
 800528c:	461a      	mov	r2, r3
 800528e:	4603      	mov	r3, r0
 8005290:	81fb      	strh	r3, [r7, #14]
 8005292:	460b      	mov	r3, r1
 8005294:	81bb      	strh	r3, [r7, #12]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t) Reg;
 800529e:	89bb      	ldrh	r3, [r7, #12]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80U;
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 80052ae:	2200      	movs	r2, #0
 80052b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052b4:	480e      	ldr	r0, [pc, #56]	; (80052f0 <BSP_ISM330DHCX_ReadReg+0x6c>)
 80052b6:	f000 ff47 	bl	8006148 <HAL_GPIO_WritePin>

  ret = BSP_SPI2_Send(&dataReg, 1);
 80052ba:	f107 0313 	add.w	r3, r7, #19
 80052be:	2101      	movs	r1, #1
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff fbcd 	bl	8004a60 <BSP_SPI2_Send>
 80052c6:	6178      	str	r0, [r7, #20]

  if(ret == BSP_ERROR_NONE)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d105      	bne.n	80052da <BSP_ISM330DHCX_ReadReg+0x56>
  {
    ret = BSP_SPI2_Recv(pdata, len);
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	4619      	mov	r1, r3
 80052d2:	68b8      	ldr	r0, [r7, #8]
 80052d4:	f7ff fbe0 	bl	8004a98 <BSP_SPI2_Recv>
 80052d8:	6178      	str	r0, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80052da:	2201      	movs	r2, #1
 80052dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052e0:	4803      	ldr	r0, [pc, #12]	; (80052f0 <BSP_ISM330DHCX_ReadReg+0x6c>)
 80052e2:	f000 ff31 	bl	8006148 <HAL_GPIO_WritePin>

  return ret;
 80052e6:	697b      	ldr	r3, [r7, #20]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	42021c00 	.word	0x42021c00

080052f4 <BSP_MOTION_SENSOR_FIFO_Set_BDR>:
 * @param  Instance the device instance
 * @param  Odr FIFO ODR value
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_BDR(uint32_t Instance, uint32_t Function, float Bdr)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  switch(Instance)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d133      	bne.n	8005370 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x7c>
      break;
#endif

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d012      	beq.n	8005338 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x44>
      {
        if(ISM330DHCX_FIFO_ACC_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 8005312:	4a1c      	ldr	r2, [pc, #112]	; (8005384 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531a:	ed97 0a01 	vldr	s0, [r7, #4]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fd fd20 	bl	8002d64 <ISM330DHCX_FIFO_ACC_Set_BDR>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x3e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800532a:	f06f 0304 	mvn.w	r3, #4
 800532e:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 8005330:	e022      	b.n	8005378 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
          ret = BSP_ERROR_NONE;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
      break;
 8005336:	e01f      	b.n	8005378 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
      else if((Function & MOTION_GYRO) == MOTION_GYRO)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d012      	beq.n	8005368 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x74>
        if(ISM330DHCX_FIFO_GYRO_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 8005342:	4a10      	ldr	r2, [pc, #64]	; (8005384 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534a:	ed97 0a01 	vldr	s0, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	f7fd fd94 	bl	8002e7c <ISM330DHCX_FIFO_GYRO_Set_BDR>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x6e>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800535a:	f06f 0304 	mvn.w	r3, #4
 800535e:	617b      	str	r3, [r7, #20]
      break;
 8005360:	e00a      	b.n	8005378 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
          ret = BSP_ERROR_NONE;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]
      break;
 8005366:	e007      	b.n	8005378 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
        ret = BSP_ERROR_WRONG_PARAM;
 8005368:	f06f 0301 	mvn.w	r3, #1
 800536c:	617b      	str	r3, [r7, #20]
      break;
 800536e:	e003      	b.n	8005378 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005370:	f06f 0301 	mvn.w	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
      break;
 8005376:	bf00      	nop
  }

  return ret;
 8005378:	697b      	ldr	r3, [r7, #20]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20001c54 	.word	0x20001c54

08005388 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT1 pin
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(uint32_t Instance, uint8_t Status)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch(Instance)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d112      	bne.n	80053c0 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x38>
      break;
#endif      

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_INT1_FIFO_Full(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800539a:	4a0e      	ldr	r2, [pc, #56]	; (80053d4 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x4c>)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	4611      	mov	r1, r2
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fd fdf4 	bl	8002f94 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80053b2:	f06f 0304 	mvn.w	r3, #4
 80053b6:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80053b8:	e006      	b.n	80053c8 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
        ret = BSP_ERROR_NONE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
      break;
 80053be:	e003      	b.n	80053c8 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
#endif      

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80053c0:	f06f 0301 	mvn.w	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
      break;
 80053c6:	bf00      	nop
  }

  return ret;
 80053c8:	68fb      	ldr	r3, [r7, #12]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20001c54 	.word	0x20001c54

080053d8 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level>:
 * @param  Instance the device instance
 * @param  Watermark FIFO watermark level
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level(uint32_t Instance, uint16_t Watermark)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	807b      	strh	r3, [r7, #2]
  int32_t ret;

  switch(Instance)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d112      	bne.n	8005410 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x38>
      break;
#endif 

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_Watermark_Level(MotionCompObj[Instance], Watermark) != BSP_ERROR_NONE)
 80053ea:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x4c>)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f2:	887a      	ldrh	r2, [r7, #2]
 80053f4:	4611      	mov	r1, r2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fd fdfd 	bl	8002ff6 <ISM330DHCX_FIFO_Set_Watermark_Level>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005402:	f06f 0304 	mvn.w	r3, #4
 8005406:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8005408:	e006      	b.n	8005418 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
        ret = BSP_ERROR_NONE;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
      break;
 800540e:	e003      	b.n	8005418 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005410:	f06f 0301 	mvn.w	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
      break;
 8005416:	bf00      	nop
  }

  return ret;
 8005418:	68fb      	ldr	r3, [r7, #12]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20001c54 	.word	0x20001c54

08005428 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>:
 * @param  Instance the device instance
 * @param  Status FIFO stop on watermark status
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(uint32_t Instance, uint8_t Status)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch(Instance)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d112      	bne.n	8005460 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x38>
      break;
#endif      

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_Stop_On_Fth(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800543a:	4a0e      	ldr	r2, [pc, #56]	; (8005474 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x4c>)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd fded 	bl	8003026 <ISM330DHCX_FIFO_Set_Stop_On_Fth>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005452:	f06f 0304 	mvn.w	r3, #4
 8005456:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8005458:	e006      	b.n	8005468 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
        ret = BSP_ERROR_NONE;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
      break;
 800545e:	e003      	b.n	8005468 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
#endif 

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005460:	f06f 0301 	mvn.w	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]
      break;
 8005466:	bf00      	nop
  }

  return ret;
 8005468:	68fb      	ldr	r3, [r7, #12]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20001c54 	.word	0x20001c54

08005478 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word>:
 *         - MOTION_GYRO or MOTION_ACCELERO
 * @param  Data FIFO single axis data
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Get_Data_Word(uint32_t Instance, uint32_t Function, int16_t *Data)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  int32_t ret;

  switch(Instance)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d131      	bne.n	80054ee <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x76>
  {
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d011      	beq.n	80054b8 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x40>
      {
        if(ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 8005494:	4a1a      	ldr	r2, [pc, #104]	; (8005500 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fd fe28 	bl	80030f4 <ISM330DHCX_FIFO_Get_Data_Word>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x3a>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80054aa:	f06f 0304 	mvn.w	r3, #4
 80054ae:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 80054b0:	e021      	b.n	80054f6 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
          ret = BSP_ERROR_NONE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
      break;
 80054b6:	e01e      	b.n	80054f6 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
      else if((Function & MOTION_GYRO) == MOTION_GYRO)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d011      	beq.n	80054e6 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x6e>
        if(ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 80054c2:	4a0f      	ldr	r2, [pc, #60]	; (8005500 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fd fe11 	bl	80030f4 <ISM330DHCX_FIFO_Get_Data_Word>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x68>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80054d8:	f06f 0304 	mvn.w	r3, #4
 80054dc:	617b      	str	r3, [r7, #20]
      break;
 80054de:	e00a      	b.n	80054f6 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
          ret = BSP_ERROR_NONE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
      break;
 80054e4:	e007      	b.n	80054f6 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
        ret = BSP_ERROR_WRONG_PARAM;
 80054e6:	f06f 0301 	mvn.w	r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
      break;
 80054ec:	e003      	b.n	80054f6 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80054ee:	f06f 0301 	mvn.w	r3, #1
 80054f2:	617b      	str	r3, [r7, #20]
      break;
 80054f4:	bf00      	nop
  }

  return ret;
 80054f6:	697b      	ldr	r3, [r7, #20]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20001c54 	.word	0x20001c54

08005504 <BSP_MOTION_SENSOR_FIFO_Set_Mode>:
 * @param  Instance the device instance
 * @param  Mode FIFO mode
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Mode(uint32_t Instance, uint8_t Mode)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch(Instance)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d112      	bne.n	800553c <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x38>
      break;
#endif   

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_Mode(MotionCompObj[Instance], Mode) != BSP_ERROR_NONE)
 8005516:	4a0e      	ldr	r2, [pc, #56]	; (8005550 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x4c>)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551e:	78fa      	ldrb	r2, [r7, #3]
 8005520:	4611      	mov	r1, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f7fd fd97 	bl	8003056 <ISM330DHCX_FIFO_Set_Mode>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800552e:	f06f 0304 	mvn.w	r3, #4
 8005532:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8005534:	e006      	b.n	8005544 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x40>
        ret = BSP_ERROR_NONE;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
      break;
 800553a:	e003      	b.n	8005544 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800553c:	f06f 0301 	mvn.w	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
      break;
 8005542:	bf00      	nop
  }

  return ret;
 8005544:	68fb      	ldr	r3, [r7, #12]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20001c54 	.word	0x20001c54

08005554 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples>:
 * @param  Instance the device instance
 * @param  NumSamples number of unread FIFO samples
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Get_Num_Samples(uint32_t Instance, uint16_t *NumSamples)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch(Instance)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d111      	bne.n	8005588 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x34>
      break;
#endif

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Get_Num_Samples(MotionCompObj[Instance], NumSamples) != BSP_ERROR_NONE)
 8005564:	4a0d      	ldr	r2, [pc, #52]	; (800559c <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x48>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f7fd fbe2 	bl	8002d38 <ISM330DHCX_FIFO_Get_Num_Samples>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800557a:	f06f 0304 	mvn.w	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8005580:	e006      	b.n	8005590 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x3c>
        ret = BSP_ERROR_NONE;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
      break;
 8005586:	e003      	b.n	8005590 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005588:	f06f 0301 	mvn.w	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]
      break;
 800558e:	bf00      	nop
  }

  return ret;
 8005590:	68fb      	ldr	r3, [r7, #12]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20001c54 	.word	0x20001c54

080055a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055a4:	4b11      	ldr	r3, [pc, #68]	; (80055ec <HAL_Init+0x4c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a10      	ldr	r2, [pc, #64]	; (80055ec <HAL_Init+0x4c>)
 80055aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055b0:	2003      	movs	r0, #3
 80055b2:	f000 f949 	bl	8005848 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80055b6:	f001 ff75 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 80055ba:	4602      	mov	r2, r0
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <HAL_Init+0x50>)
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	490b      	ldr	r1, [pc, #44]	; (80055f4 <HAL_Init+0x54>)
 80055c6:	5ccb      	ldrb	r3, [r1, r3]
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
 80055cc:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <HAL_Init+0x58>)
 80055ce:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055d0:	200f      	movs	r0, #15
 80055d2:	f000 f813 	bl	80055fc <HAL_InitTick>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e002      	b.n	80055e6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80055e0:	f7fc f8c4 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40022000 	.word	0x40022000
 80055f0:	46020c00 	.word	0x46020c00
 80055f4:	08014390 	.word	0x08014390
 80055f8:	2000000c 	.word	0x2000000c

080055fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8005604:	4b15      	ldr	r3, [pc, #84]	; (800565c <HAL_InitTick+0x60>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e021      	b.n	8005654 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005610:	4b13      	ldr	r3, [pc, #76]	; (8005660 <HAL_InitTick+0x64>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4b11      	ldr	r3, [pc, #68]	; (800565c <HAL_InitTick+0x60>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	4619      	mov	r1, r3
 800561a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800561e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f941 	bl	80058ae <HAL_SYSTICK_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e00e      	b.n	8005654 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b0f      	cmp	r3, #15
 800563a:	d80a      	bhi.n	8005652 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800563c:	2200      	movs	r2, #0
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	f000 f90b 	bl	800585e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005648:	4a06      	ldr	r2, [pc, #24]	; (8005664 <HAL_InitTick+0x68>)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	e000      	b.n	8005654 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	200000a8 	.word	0x200000a8
 8005660:	2000000c 	.word	0x2000000c
 8005664:	200000a4 	.word	0x200000a4

08005668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <HAL_IncTick+0x20>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	4b06      	ldr	r3, [pc, #24]	; (800568c <HAL_IncTick+0x24>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4413      	add	r3, r2
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <HAL_IncTick+0x24>)
 800567a:	6013      	str	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	200000a8 	.word	0x200000a8
 800568c:	20001c9c 	.word	0x20001c9c

08005690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return uwTick;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_GetTick+0x14>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20001c9c 	.word	0x20001c9c

080056a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <__NVIC_SetPriorityGrouping+0x44>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056c4:	4013      	ands	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056da:	4a04      	ldr	r2, [pc, #16]	; (80056ec <__NVIC_SetPriorityGrouping+0x44>)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	60d3      	str	r3, [r2, #12]
}
 80056e0:	bf00      	nop
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	e000ed00 	.word	0xe000ed00

080056f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <__NVIC_GetPriorityGrouping+0x18>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	f003 0307 	and.w	r3, r3, #7
}
 80056fe:	4618      	mov	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	e000ed00 	.word	0xe000ed00

0800570c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571a:	2b00      	cmp	r3, #0
 800571c:	db0b      	blt.n	8005736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	f003 021f 	and.w	r2, r3, #31
 8005724:	4907      	ldr	r1, [pc, #28]	; (8005744 <__NVIC_EnableIRQ+0x38>)
 8005726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	2001      	movs	r0, #1
 800572e:	fa00 f202 	lsl.w	r2, r0, r2
 8005732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	e000e100 	.word	0xe000e100

08005748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	6039      	str	r1, [r7, #0]
 8005752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005758:	2b00      	cmp	r3, #0
 800575a:	db0a      	blt.n	8005772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	b2da      	uxtb	r2, r3
 8005760:	490c      	ldr	r1, [pc, #48]	; (8005794 <__NVIC_SetPriority+0x4c>)
 8005762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005766:	0112      	lsls	r2, r2, #4
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	440b      	add	r3, r1
 800576c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005770:	e00a      	b.n	8005788 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	4908      	ldr	r1, [pc, #32]	; (8005798 <__NVIC_SetPriority+0x50>)
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	3b04      	subs	r3, #4
 8005780:	0112      	lsls	r2, r2, #4
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	440b      	add	r3, r1
 8005786:	761a      	strb	r2, [r3, #24]
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	e000e100 	.word	0xe000e100
 8005798:	e000ed00 	.word	0xe000ed00

0800579c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800579c:	b480      	push	{r7}
 800579e:	b089      	sub	sp, #36	; 0x24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f1c3 0307 	rsb	r3, r3, #7
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	bf28      	it	cs
 80057ba:	2304      	movcs	r3, #4
 80057bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3304      	adds	r3, #4
 80057c2:	2b06      	cmp	r3, #6
 80057c4:	d902      	bls.n	80057cc <NVIC_EncodePriority+0x30>
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	3b03      	subs	r3, #3
 80057ca:	e000      	b.n	80057ce <NVIC_EncodePriority+0x32>
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d0:	f04f 32ff 	mov.w	r2, #4294967295
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43da      	mvns	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	401a      	ands	r2, r3
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057e4:	f04f 31ff 	mov.w	r1, #4294967295
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	43d9      	mvns	r1, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f4:	4313      	orrs	r3, r2
         );
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3724      	adds	r7, #36	; 0x24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3b01      	subs	r3, #1
 8005810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005814:	d301      	bcc.n	800581a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005816:	2301      	movs	r3, #1
 8005818:	e00f      	b.n	800583a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800581a:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <SysTick_Config+0x40>)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3b01      	subs	r3, #1
 8005820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005822:	210f      	movs	r1, #15
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	f7ff ff8e 	bl	8005748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800582c:	4b05      	ldr	r3, [pc, #20]	; (8005844 <SysTick_Config+0x40>)
 800582e:	2200      	movs	r2, #0
 8005830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005832:	4b04      	ldr	r3, [pc, #16]	; (8005844 <SysTick_Config+0x40>)
 8005834:	2207      	movs	r2, #7
 8005836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	e000e010 	.word	0xe000e010

08005848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff ff29 	bl	80056a8 <__NVIC_SetPriorityGrouping>
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b086      	sub	sp, #24
 8005862:	af00      	add	r7, sp, #0
 8005864:	4603      	mov	r3, r0
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
 800586a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800586c:	f7ff ff40 	bl	80056f0 <__NVIC_GetPriorityGrouping>
 8005870:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	6978      	ldr	r0, [r7, #20]
 8005878:	f7ff ff90 	bl	800579c <NVIC_EncodePriority>
 800587c:	4602      	mov	r2, r0
 800587e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005882:	4611      	mov	r1, r2
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff ff5f 	bl	8005748 <__NVIC_SetPriority>
}
 800588a:	bf00      	nop
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	4603      	mov	r3, r0
 800589a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800589c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff ff33 	bl	800570c <__NVIC_EnableIRQ>
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff ffa4 	bl	8005804 <SysTick_Config>
 80058bc:	4603      	mov	r3, r0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e054      	b.n	8005984 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7f5b      	ldrb	r3, [r3, #29]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d105      	bne.n	80058f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fc f81e 	bl	800192c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	791b      	ldrb	r3, [r3, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10c      	bne.n	8005918 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a22      	ldr	r2, [pc, #136]	; (800598c <HAL_CRC_Init+0xc4>)
 8005904:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0218 	bic.w	r2, r2, #24
 8005914:	609a      	str	r2, [r3, #8]
 8005916:	e00c      	b.n	8005932 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6899      	ldr	r1, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	461a      	mov	r2, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f834 	bl	8005990 <HAL_CRCEx_Polynomial_Set>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e028      	b.n	8005984 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	795b      	ldrb	r3, [r3, #5]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d105      	bne.n	8005946 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f04f 32ff 	mov.w	r2, #4294967295
 8005942:	611a      	str	r2, [r3, #16]
 8005944:	e004      	b.n	8005950 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6912      	ldr	r2, [r2, #16]
 800594e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695a      	ldr	r2, [r3, #20]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	04c11db7 	.word	0x04c11db7

08005990 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80059a0:	231f      	movs	r3, #31
 80059a2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80059a4:	bf00      	nop
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1e5a      	subs	r2, r3, #1
 80059aa:	613a      	str	r2, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d009      	beq.n	80059c4 <HAL_CRCEx_Polynomial_Set+0x34>
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0f0      	beq.n	80059a6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b18      	cmp	r3, #24
 80059c8:	d846      	bhi.n	8005a58 <HAL_CRCEx_Polynomial_Set+0xc8>
 80059ca:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	08005a5f 	.word	0x08005a5f
 80059d4:	08005a59 	.word	0x08005a59
 80059d8:	08005a59 	.word	0x08005a59
 80059dc:	08005a59 	.word	0x08005a59
 80059e0:	08005a59 	.word	0x08005a59
 80059e4:	08005a59 	.word	0x08005a59
 80059e8:	08005a59 	.word	0x08005a59
 80059ec:	08005a59 	.word	0x08005a59
 80059f0:	08005a4d 	.word	0x08005a4d
 80059f4:	08005a59 	.word	0x08005a59
 80059f8:	08005a59 	.word	0x08005a59
 80059fc:	08005a59 	.word	0x08005a59
 8005a00:	08005a59 	.word	0x08005a59
 8005a04:	08005a59 	.word	0x08005a59
 8005a08:	08005a59 	.word	0x08005a59
 8005a0c:	08005a59 	.word	0x08005a59
 8005a10:	08005a41 	.word	0x08005a41
 8005a14:	08005a59 	.word	0x08005a59
 8005a18:	08005a59 	.word	0x08005a59
 8005a1c:	08005a59 	.word	0x08005a59
 8005a20:	08005a59 	.word	0x08005a59
 8005a24:	08005a59 	.word	0x08005a59
 8005a28:	08005a59 	.word	0x08005a59
 8005a2c:	08005a59 	.word	0x08005a59
 8005a30:	08005a35 	.word	0x08005a35
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b06      	cmp	r3, #6
 8005a38:	d913      	bls.n	8005a62 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005a3e:	e010      	b.n	8005a62 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b07      	cmp	r3, #7
 8005a44:	d90f      	bls.n	8005a66 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005a4a:	e00c      	b.n	8005a66 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	d90b      	bls.n	8005a6a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005a56:	e008      	b.n	8005a6a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a5c:	e006      	b.n	8005a6c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005a5e:	bf00      	nop
 8005a60:	e004      	b.n	8005a6c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005a62:	bf00      	nop
 8005a64:	e002      	b.n	8005a6c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005a66:	bf00      	nop
 8005a68:	e000      	b.n	8005a6c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005a6a:	bf00      	nop
  }
  if (status == HAL_OK)
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10d      	bne.n	8005a8e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f023 0118 	bic.w	r1, r3, #24
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005aae:	7afb      	ldrb	r3, [r7, #11]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d011      	beq.n	8005ad8 <HAL_EXTI_RegisterCallback+0x3c>
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	dc13      	bgt.n	8005ae0 <HAL_EXTI_RegisterCallback+0x44>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_EXTI_RegisterCallback+0x26>
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d007      	beq.n	8005ad0 <HAL_EXTI_RegisterCallback+0x34>
 8005ac0:	e00e      	b.n	8005ae0 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	609a      	str	r2, [r3, #8]
      break;
 8005ace:	e00a      	b.n	8005ae6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	605a      	str	r2, [r3, #4]
      break;
 8005ad6:	e006      	b.n	8005ae6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	609a      	str	r2, [r3, #8]
      break;
 8005ade:	e002      	b.n	8005ae6 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae4:	bf00      	nop
  }

  return status;
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e003      	b.n	8005b10 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
  }
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	0c1b      	lsrs	r3, r3, #16
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	2201      	movs	r2, #1
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	4b17      	ldr	r3, [pc, #92]	; (8005ba4 <HAL_EXTI_IRQHandler+0x88>)
 8005b46:	4413      	add	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4013      	ands	r3, r2
 8005b52:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <HAL_EXTI_IRQHandler+0x8c>)
 8005b74:	4413      	add	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d009      	beq.n	8005b9c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4798      	blx	r3
    }
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	4602200c 	.word	0x4602200c
 8005ba8:	46022010 	.word	0x46022010

08005bac <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b089      	sub	sp, #36	; 0x24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005bbe:	e1ba      	b.n	8005f36 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 81aa 	beq.w	8005f30 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a55      	ldr	r2, [pc, #340]	; (8005d34 <HAL_GPIO_Init+0x188>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d15d      	bne.n	8005ca0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005bea:	2201      	movs	r2, #1
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f003 0201 	and.w	r2, r3, #1
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005c14:	4a48      	ldr	r2, [pc, #288]	; (8005d38 <HAL_GPIO_Init+0x18c>)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c1c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005c1e:	4a46      	ldr	r2, [pc, #280]	; (8005d38 <HAL_GPIO_Init+0x18c>)
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	4413      	add	r3, r2
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	08da      	lsrs	r2, r3, #3
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3208      	adds	r2, #8
 8005c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c36:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	220f      	movs	r2, #15
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43db      	mvns	r3, r3
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	220b      	movs	r2, #11
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	08da      	lsrs	r2, r3, #3
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	3208      	adds	r2, #8
 8005c6a:	69f9      	ldr	r1, [r7, #28]
 8005c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	43db      	mvns	r3, r3
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	4013      	ands	r3, r2
 8005c86:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	e067      	b.n	8005d70 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d003      	beq.n	8005cb0 <HAL_GPIO_Init+0x104>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b12      	cmp	r3, #18
 8005cae:	d145      	bne.n	8005d3c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	08da      	lsrs	r2, r3, #3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3208      	adds	r2, #8
 8005cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	220f      	movs	r2, #15
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 020f 	and.w	r2, r3, #15
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	08da      	lsrs	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3208      	adds	r2, #8
 8005cf6:	69f9      	ldr	r1, [r7, #28]
 8005cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	2203      	movs	r2, #3
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	4013      	ands	r3, r2
 8005d12:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 0203 	and.w	r2, r3, #3
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	e01e      	b.n	8005d70 <HAL_GPIO_Init+0x1c4>
 8005d32:	bf00      	nop
 8005d34:	46020000 	.word	0x46020000
 8005d38:	0801440c 	.word	0x0801440c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	2203      	movs	r2, #3
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	69fa      	ldr	r2, [r7, #28]
 8005d50:	4013      	ands	r3, r2
 8005d52:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 0203 	and.w	r2, r3, #3
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d00b      	beq.n	8005d90 <HAL_GPIO_Init+0x1e4>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d007      	beq.n	8005d90 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d84:	2b11      	cmp	r3, #17
 8005d86:	d003      	beq.n	8005d90 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b12      	cmp	r3, #18
 8005d8e:	d130      	bne.n	8005df2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	43db      	mvns	r3, r3
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	4013      	ands	r3, r2
 8005da6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	091b      	lsrs	r3, r3, #4
 8005ddc:	f003 0201 	and.w	r2, r3, #1
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d017      	beq.n	8005e2a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	2203      	movs	r2, #3
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d07c      	beq.n	8005f30 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005e36:	4a47      	ldr	r2, [pc, #284]	; (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	089b      	lsrs	r3, r3, #2
 8005e3c:	3318      	adds	r3, #24
 8005e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e42:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	220f      	movs	r2, #15
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	43db      	mvns	r3, r3
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	4013      	ands	r3, r2
 8005e58:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	0a9a      	lsrs	r2, r3, #10
 8005e5e:	4b3e      	ldr	r3, [pc, #248]	; (8005f58 <HAL_GPIO_Init+0x3ac>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	f002 0203 	and.w	r2, r2, #3
 8005e68:	00d2      	lsls	r2, r2, #3
 8005e6a:	4093      	lsls	r3, r2
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005e72:	4938      	ldr	r1, [pc, #224]	; (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	089b      	lsrs	r3, r3, #2
 8005e78:	3318      	adds	r3, #24
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005e80:	4b34      	ldr	r3, [pc, #208]	; (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005ea4:	4a2b      	ldr	r2, [pc, #172]	; (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005eaa:	4b2a      	ldr	r3, [pc, #168]	; (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005ece:	4a21      	ldr	r2, [pc, #132]	; (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005ed4:	4b1f      	ldr	r3, [pc, #124]	; (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eda:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005efa:	4a16      	ldr	r2, [pc, #88]	; (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8005f02:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f08:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005f28:	4a0a      	ldr	r2, [pc, #40]	; (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	3301      	adds	r3, #1
 8005f34:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f47f ae3d 	bne.w	8005bc0 <HAL_GPIO_Init+0x14>
  }
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	3724      	adds	r7, #36	; 0x24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	46022000 	.word	0x46022000
 8005f58:	002f7f7f 	.word	0x002f7f7f

08005f5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8005f6e:	e0bc      	b.n	80060ea <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005f70:	2201      	movs	r2, #1
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 80ad 	beq.w	80060e4 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a5e      	ldr	r2, [pc, #376]	; (8006108 <HAL_GPIO_DeInit+0x1ac>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d115      	bne.n	8005fbe <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8005f92:	4a5e      	ldr	r2, [pc, #376]	; (800610c <HAL_GPIO_DeInit+0x1b0>)
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f9a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005f9c:	4a5b      	ldr	r2, [pc, #364]	; (800610c <HAL_GPIO_DeInit+0x1b0>)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8005fa8:	4b57      	ldr	r3, [pc, #348]	; (8006108 <HAL_GPIO_DeInit+0x1ac>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	2101      	movs	r1, #1
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	4954      	ldr	r1, [pc, #336]	; (8006108 <HAL_GPIO_DeInit+0x1ac>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]
 8005fbc:	e053      	b.n	8006066 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8005fbe:	4a54      	ldr	r2, [pc, #336]	; (8006110 <HAL_GPIO_DeInit+0x1b4>)
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	089b      	lsrs	r3, r3, #2
 8005fc4:	3318      	adds	r3, #24
 8005fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fca:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	220f      	movs	r2, #15
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	0a9a      	lsrs	r2, r3, #10
 8005fe4:	4b4b      	ldr	r3, [pc, #300]	; (8006114 <HAL_GPIO_DeInit+0x1b8>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	f002 0203 	and.w	r2, r2, #3
 8005fee:	00d2      	lsls	r2, r2, #3
 8005ff0:	4093      	lsls	r3, r2
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d136      	bne.n	8006066 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8005ff8:	4b45      	ldr	r3, [pc, #276]	; (8006110 <HAL_GPIO_DeInit+0x1b4>)
 8005ffa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	43db      	mvns	r3, r3
 8006002:	4943      	ldr	r1, [pc, #268]	; (8006110 <HAL_GPIO_DeInit+0x1b4>)
 8006004:	4013      	ands	r3, r2
 8006006:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800600a:	4b41      	ldr	r3, [pc, #260]	; (8006110 <HAL_GPIO_DeInit+0x1b4>)
 800600c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	43db      	mvns	r3, r3
 8006014:	493e      	ldr	r1, [pc, #248]	; (8006110 <HAL_GPIO_DeInit+0x1b4>)
 8006016:	4013      	ands	r3, r2
 8006018:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800601c:	4b3c      	ldr	r3, [pc, #240]	; (8006110 <HAL_GPIO_DeInit+0x1b4>)
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	43db      	mvns	r3, r3
 8006024:	493a      	ldr	r1, [pc, #232]	; (8006110 <HAL_GPIO_DeInit+0x1b4>)
 8006026:	4013      	ands	r3, r2
 8006028:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800602a:	4b39      	ldr	r3, [pc, #228]	; (8006110 <HAL_GPIO_DeInit+0x1b4>)
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	43db      	mvns	r3, r3
 8006032:	4937      	ldr	r1, [pc, #220]	; (8006110 <HAL_GPIO_DeInit+0x1b4>)
 8006034:	4013      	ands	r3, r2
 8006036:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	220f      	movs	r2, #15
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8006048:	4a31      	ldr	r2, [pc, #196]	; (8006110 <HAL_GPIO_DeInit+0x1b4>)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	089b      	lsrs	r3, r3, #2
 800604e:	3318      	adds	r3, #24
 8006050:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	43da      	mvns	r2, r3
 8006058:	482d      	ldr	r0, [pc, #180]	; (8006110 <HAL_GPIO_DeInit+0x1b4>)
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	089b      	lsrs	r3, r3, #2
 800605e:	400a      	ands	r2, r1
 8006060:	3318      	adds	r3, #24
 8006062:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	2103      	movs	r1, #3
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	431a      	orrs	r2, r3
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	08da      	lsrs	r2, r3, #3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	3208      	adds	r2, #8
 8006082:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	220f      	movs	r2, #15
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	43db      	mvns	r3, r3
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	08d2      	lsrs	r2, r2, #3
 800609a:	4019      	ands	r1, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	3208      	adds	r2, #8
 80060a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	2103      	movs	r1, #3
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	401a      	ands	r2, r3
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	2101      	movs	r1, #1
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	43db      	mvns	r3, r3
 80060c8:	401a      	ands	r2, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	2103      	movs	r1, #3
 80060d8:	fa01 f303 	lsl.w	r3, r1, r3
 80060dc:	43db      	mvns	r3, r3
 80060de:	401a      	ands	r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	3301      	adds	r3, #1
 80060e8:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	fa22 f303 	lsr.w	r3, r2, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f47f af3c 	bne.w	8005f70 <HAL_GPIO_DeInit+0x14>
  }
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	3724      	adds	r7, #36	; 0x24
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	46020000 	.word	0x46020000
 800610c:	0801440c 	.word	0x0801440c
 8006110:	46022000 	.word	0x46022000
 8006114:	002f7f7f 	.word	0x002f7f7f

08006118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	887b      	ldrh	r3, [r7, #2]
 800612a:	4013      	ands	r3, r2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
 8006134:	e001      	b.n	800613a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	807b      	strh	r3, [r7, #2]
 8006154:	4613      	mov	r3, r2
 8006156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006158:	787b      	ldrb	r3, [r7, #1]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800615e:	887a      	ldrh	r2, [r7, #2]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8006164:	e002      	b.n	800616c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8006166:	887a      	ldrh	r2, [r7, #2]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8006182:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	4013      	ands	r3, r2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d006      	beq.n	800619c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800618e:	4a0c      	ldr	r2, [pc, #48]	; (80061c0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f814 	bl	80061c4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800619c:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	88fb      	ldrh	r3, [r7, #6]
 80061a2:	4013      	ands	r3, r2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d006      	beq.n	80061b6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80061a8:	4a05      	ldr	r2, [pc, #20]	; (80061c0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 f812 	bl	80061da <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	46022000 	.word	0x46022000

080061c4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	4603      	mov	r3, r0
 80061e2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80061f8:	4b34      	ldr	r3, [pc, #208]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80061fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006200:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d101      	bne.n	800620e <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	e057      	b.n	80062be <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006214:	d90a      	bls.n	800622c <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006216:	4b2d      	ldr	r3, [pc, #180]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4313      	orrs	r3, r2
 8006222:	4a2a      	ldr	r2, [pc, #168]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006228:	60d3      	str	r3, [r2, #12]
 800622a:	e007      	b.n	800623c <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800622c:	4b27      	ldr	r3, [pc, #156]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006234:	4925      	ldr	r1, [pc, #148]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4313      	orrs	r3, r2
 800623a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800623c:	4b24      	ldr	r3, [pc, #144]	; (80062d0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a24      	ldr	r2, [pc, #144]	; (80062d4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	099b      	lsrs	r3, r3, #6
 8006248:	2232      	movs	r2, #50	; 0x32
 800624a:	fb02 f303 	mul.w	r3, r2, r3
 800624e:	4a21      	ldr	r2, [pc, #132]	; (80062d4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006250:	fba2 2303 	umull	r2, r3, r2, r3
 8006254:	099b      	lsrs	r3, r3, #6
 8006256:	3301      	adds	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800625a:	e002      	b.n	8006262 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3b01      	subs	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006262:	4b1a      	ldr	r3, [pc, #104]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <HAL_PWREx_ControlVoltageScaling+0x84>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1f3      	bne.n	800625c <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01b      	beq.n	80062b2 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006280:	fba2 2303 	umull	r2, r3, r2, r3
 8006284:	099b      	lsrs	r3, r3, #6
 8006286:	2232      	movs	r2, #50	; 0x32
 8006288:	fb02 f303 	mul.w	r3, r2, r3
 800628c:	4a11      	ldr	r2, [pc, #68]	; (80062d4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800628e:	fba2 2303 	umull	r2, r3, r2, r3
 8006292:	099b      	lsrs	r3, r3, #6
 8006294:	3301      	adds	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006298:	e002      	b.n	80062a0 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3b01      	subs	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80062a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d102      	bne.n	80062b2 <HAL_PWREx_ControlVoltageScaling+0xc2>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f3      	bne.n	800629a <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e000      	b.n	80062be <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	46020800 	.word	0x46020800
 80062d0:	2000000c 	.word	0x2000000c
 80062d4:	10624dd3 	.word	0x10624dd3

080062d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80062dc:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80062de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	46020800 	.word	0x46020800

080062f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80062f8:	4b05      	ldr	r3, [pc, #20]	; (8006310 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	4a04      	ldr	r2, [pc, #16]	; (8006310 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	46020800 	.word	0x46020800

08006314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08e      	sub	sp, #56	; 0x38
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800631c:	2300      	movs	r3, #0
 800631e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	f000 bec3 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800632e:	4b9c      	ldr	r3, [pc, #624]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006338:	4b99      	ldr	r3, [pc, #612]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 8172 	beq.w	8006634 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <HAL_RCC_OscConfig+0x52>
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2b0c      	cmp	r3, #12
 800635a:	f040 80e4 	bne.w	8006526 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	2b01      	cmp	r3, #1
 8006362:	f040 80e0 	bne.w	8006526 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006366:	4b8e      	ldr	r3, [pc, #568]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d006      	beq.n	8006380 <HAL_RCC_OscConfig+0x6c>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f000 be9a 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006384:	4b86      	ldr	r3, [pc, #536]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <HAL_RCC_OscConfig+0x86>
 8006390:	4b83      	ldr	r3, [pc, #524]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006398:	e005      	b.n	80063a6 <HAL_RCC_OscConfig+0x92>
 800639a:	4b81      	ldr	r3, [pc, #516]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 800639c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063a0:	041b      	lsls	r3, r3, #16
 80063a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d255      	bcs.n	8006456 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 f9d3 	bl	8007760 <RCC_SetFlashLatencyFromMSIRange>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f000 be77 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80063c6:	4b76      	ldr	r3, [pc, #472]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	4a75      	ldr	r2, [pc, #468]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 80063cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063d0:	6093      	str	r3, [r2, #8]
 80063d2:	4b73      	ldr	r3, [pc, #460]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	4970      	ldr	r1, [pc, #448]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80063ec:	d309      	bcc.n	8006402 <HAL_RCC_OscConfig+0xee>
 80063ee:	4b6c      	ldr	r3, [pc, #432]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f023 021f 	bic.w	r2, r3, #31
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	4969      	ldr	r1, [pc, #420]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60cb      	str	r3, [r1, #12]
 8006400:	e07e      	b.n	8006500 <HAL_RCC_OscConfig+0x1ec>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	2b00      	cmp	r3, #0
 8006408:	da0a      	bge.n	8006420 <HAL_RCC_OscConfig+0x10c>
 800640a:	4b65      	ldr	r3, [pc, #404]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	015b      	lsls	r3, r3, #5
 8006418:	4961      	ldr	r1, [pc, #388]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 800641a:	4313      	orrs	r3, r2
 800641c:	60cb      	str	r3, [r1, #12]
 800641e:	e06f      	b.n	8006500 <HAL_RCC_OscConfig+0x1ec>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006428:	d30a      	bcc.n	8006440 <HAL_RCC_OscConfig+0x12c>
 800642a:	4b5d      	ldr	r3, [pc, #372]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	029b      	lsls	r3, r3, #10
 8006438:	4959      	ldr	r1, [pc, #356]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 800643a:	4313      	orrs	r3, r2
 800643c:	60cb      	str	r3, [r1, #12]
 800643e:	e05f      	b.n	8006500 <HAL_RCC_OscConfig+0x1ec>
 8006440:	4b57      	ldr	r3, [pc, #348]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	03db      	lsls	r3, r3, #15
 800644e:	4954      	ldr	r1, [pc, #336]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006450:	4313      	orrs	r3, r2
 8006452:	60cb      	str	r3, [r1, #12]
 8006454:	e054      	b.n	8006500 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006456:	4b52      	ldr	r3, [pc, #328]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	4a51      	ldr	r2, [pc, #324]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 800645c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006460:	6093      	str	r3, [r2, #8]
 8006462:	4b4f      	ldr	r3, [pc, #316]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	494c      	ldr	r1, [pc, #304]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006470:	4313      	orrs	r3, r2
 8006472:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800647c:	d309      	bcc.n	8006492 <HAL_RCC_OscConfig+0x17e>
 800647e:	4b48      	ldr	r3, [pc, #288]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f023 021f 	bic.w	r2, r3, #31
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	4945      	ldr	r1, [pc, #276]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 800648c:	4313      	orrs	r3, r2
 800648e:	60cb      	str	r3, [r1, #12]
 8006490:	e028      	b.n	80064e4 <HAL_RCC_OscConfig+0x1d0>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	2b00      	cmp	r3, #0
 8006498:	da0a      	bge.n	80064b0 <HAL_RCC_OscConfig+0x19c>
 800649a:	4b41      	ldr	r3, [pc, #260]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	015b      	lsls	r3, r3, #5
 80064a8:	493d      	ldr	r1, [pc, #244]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60cb      	str	r3, [r1, #12]
 80064ae:	e019      	b.n	80064e4 <HAL_RCC_OscConfig+0x1d0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d30a      	bcc.n	80064d0 <HAL_RCC_OscConfig+0x1bc>
 80064ba:	4b39      	ldr	r3, [pc, #228]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	029b      	lsls	r3, r3, #10
 80064c8:	4935      	ldr	r1, [pc, #212]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60cb      	str	r3, [r1, #12]
 80064ce:	e009      	b.n	80064e4 <HAL_RCC_OscConfig+0x1d0>
 80064d0:	4b33      	ldr	r3, [pc, #204]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	03db      	lsls	r3, r3, #15
 80064de:	4930      	ldr	r1, [pc, #192]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 f936 	bl	8007760 <RCC_SetFlashLatencyFromMSIRange>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f000 bdda 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006500:	f001 f8d8 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006504:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <HAL_RCC_OscConfig+0x290>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff f877 	bl	80055fc <HAL_InitTick>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8006514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 808a 	beq.w	8006632 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800651e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006522:	f000 bdc7 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d066      	beq.n	80065fc <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800652e:	4b1c      	ldr	r3, [pc, #112]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1b      	ldr	r2, [pc, #108]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006534:	f043 0301 	orr.w	r3, r3, #1
 8006538:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800653a:	f7ff f8a9 	bl	8005690 <HAL_GetTick>
 800653e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006540:	e009      	b.n	8006556 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006542:	f7ff f8a5 	bl	8005690 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d902      	bls.n	8006556 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	f000 bdaf 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0ef      	beq.n	8006542 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006562:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	4a0e      	ldr	r2, [pc, #56]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006568:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800656c:	6093      	str	r3, [r2, #8]
 800656e:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	4909      	ldr	r1, [pc, #36]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 800657c:	4313      	orrs	r3, r2
 800657e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006588:	d30e      	bcc.n	80065a8 <HAL_RCC_OscConfig+0x294>
 800658a:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f023 021f 	bic.w	r2, r3, #31
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	4902      	ldr	r1, [pc, #8]	; (80065a0 <HAL_RCC_OscConfig+0x28c>)
 8006598:	4313      	orrs	r3, r2
 800659a:	60cb      	str	r3, [r1, #12]
 800659c:	e04a      	b.n	8006634 <HAL_RCC_OscConfig+0x320>
 800659e:	bf00      	nop
 80065a0:	46020c00 	.word	0x46020c00
 80065a4:	200000a4 	.word	0x200000a4
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	da0a      	bge.n	80065c6 <HAL_RCC_OscConfig+0x2b2>
 80065b0:	4b9b      	ldr	r3, [pc, #620]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	015b      	lsls	r3, r3, #5
 80065be:	4998      	ldr	r1, [pc, #608]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60cb      	str	r3, [r1, #12]
 80065c4:	e036      	b.n	8006634 <HAL_RCC_OscConfig+0x320>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ce:	d30a      	bcc.n	80065e6 <HAL_RCC_OscConfig+0x2d2>
 80065d0:	4b93      	ldr	r3, [pc, #588]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	029b      	lsls	r3, r3, #10
 80065de:	4990      	ldr	r1, [pc, #576]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60cb      	str	r3, [r1, #12]
 80065e4:	e026      	b.n	8006634 <HAL_RCC_OscConfig+0x320>
 80065e6:	4b8e      	ldr	r3, [pc, #568]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	03db      	lsls	r3, r3, #15
 80065f4:	498a      	ldr	r1, [pc, #552]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60cb      	str	r3, [r1, #12]
 80065fa:	e01b      	b.n	8006634 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80065fc:	4b88      	ldr	r3, [pc, #544]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a87      	ldr	r2, [pc, #540]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006608:	f7ff f842 	bl	8005690 <HAL_GetTick>
 800660c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800660e:	e009      	b.n	8006624 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006610:	f7ff f83e 	bl	8005690 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d902      	bls.n	8006624 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	f000 bd48 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006624:	4b7e      	ldr	r3, [pc, #504]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1ef      	bne.n	8006610 <HAL_RCC_OscConfig+0x2fc>
 8006630:	e000      	b.n	8006634 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006632:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8094 	beq.w	800676a <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	2b08      	cmp	r3, #8
 8006646:	d005      	beq.n	8006654 <HAL_RCC_OscConfig+0x340>
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	2b0c      	cmp	r3, #12
 800664c:	d110      	bne.n	8006670 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	2b03      	cmp	r3, #3
 8006652:	d10d      	bne.n	8006670 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006654:	4b72      	ldr	r3, [pc, #456]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8083 	beq.w	8006768 <HAL_RCC_OscConfig+0x454>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d17e      	bne.n	8006768 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	f000 bd22 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006678:	d106      	bne.n	8006688 <HAL_RCC_OscConfig+0x374>
 800667a:	4b69      	ldr	r3, [pc, #420]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a68      	ldr	r2, [pc, #416]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 8006680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	e041      	b.n	800670c <HAL_RCC_OscConfig+0x3f8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006690:	d112      	bne.n	80066b8 <HAL_RCC_OscConfig+0x3a4>
 8006692:	4b63      	ldr	r3, [pc, #396]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a62      	ldr	r2, [pc, #392]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 8006698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	4b60      	ldr	r3, [pc, #384]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a5f      	ldr	r2, [pc, #380]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	4b5d      	ldr	r3, [pc, #372]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a5c      	ldr	r2, [pc, #368]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	e029      	b.n	800670c <HAL_RCC_OscConfig+0x3f8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80066c0:	d112      	bne.n	80066e8 <HAL_RCC_OscConfig+0x3d4>
 80066c2:	4b57      	ldr	r3, [pc, #348]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a56      	ldr	r2, [pc, #344]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	4b54      	ldr	r3, [pc, #336]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a53      	ldr	r2, [pc, #332]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	4b51      	ldr	r3, [pc, #324]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a50      	ldr	r2, [pc, #320]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e011      	b.n	800670c <HAL_RCC_OscConfig+0x3f8>
 80066e8:	4b4d      	ldr	r3, [pc, #308]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a4c      	ldr	r2, [pc, #304]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	4b4a      	ldr	r3, [pc, #296]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a49      	ldr	r2, [pc, #292]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80066fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	4b47      	ldr	r3, [pc, #284]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a46      	ldr	r2, [pc, #280]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 8006706:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800670a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d014      	beq.n	800673e <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8006714:	f7fe ffbc 	bl	8005690 <HAL_GetTick>
 8006718:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800671a:	e009      	b.n	8006730 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800671c:	f7fe ffb8 	bl	8005690 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	; 0x64
 8006728:	d902      	bls.n	8006730 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	f000 bcc2 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006730:	4b3b      	ldr	r3, [pc, #236]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0ef      	beq.n	800671c <HAL_RCC_OscConfig+0x408>
 800673c:	e015      	b.n	800676a <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800673e:	f7fe ffa7 	bl	8005690 <HAL_GetTick>
 8006742:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006744:	e009      	b.n	800675a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006746:	f7fe ffa3 	bl	8005690 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b64      	cmp	r3, #100	; 0x64
 8006752:	d902      	bls.n	800675a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	f000 bcad 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800675a:	4b31      	ldr	r3, [pc, #196]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1ef      	bne.n	8006746 <HAL_RCC_OscConfig+0x432>
 8006766:	e000      	b.n	800676a <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d066      	beq.n	8006844 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	2b04      	cmp	r3, #4
 800677a:	d005      	beq.n	8006788 <HAL_RCC_OscConfig+0x474>
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	2b0c      	cmp	r3, #12
 8006780:	d11a      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	2b02      	cmp	r3, #2
 8006786:	d117      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006788:	4b25      	ldr	r3, [pc, #148]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006790:	2b00      	cmp	r3, #0
 8006792:	d006      	beq.n	80067a2 <HAL_RCC_OscConfig+0x48e>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d102      	bne.n	80067a2 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	f000 bc89 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80067a2:	4b1f      	ldr	r3, [pc, #124]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	041b      	lsls	r3, r3, #16
 80067b0:	491b      	ldr	r1, [pc, #108]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067b6:	e045      	b.n	8006844 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d024      	beq.n	800680a <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80067c0:	4b17      	ldr	r3, [pc, #92]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a16      	ldr	r2, [pc, #88]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80067c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80067cc:	f7fe ff60 	bl	8005690 <HAL_GetTick>
 80067d0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067d2:	e009      	b.n	80067e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067d4:	f7fe ff5c 	bl	8005690 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d902      	bls.n	80067e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	f000 bc66 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067e8:	4b0d      	ldr	r3, [pc, #52]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0ef      	beq.n	80067d4 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80067f4:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	4907      	ldr	r1, [pc, #28]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 8006804:	4313      	orrs	r3, r2
 8006806:	610b      	str	r3, [r1, #16]
 8006808:	e01c      	b.n	8006844 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800680a:	4b05      	ldr	r3, [pc, #20]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a04      	ldr	r2, [pc, #16]	; (8006820 <HAL_RCC_OscConfig+0x50c>)
 8006810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006814:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006816:	f7fe ff3b 	bl	8005690 <HAL_GetTick>
 800681a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800681c:	e00c      	b.n	8006838 <HAL_RCC_OscConfig+0x524>
 800681e:	bf00      	nop
 8006820:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006824:	f7fe ff34 	bl	8005690 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d902      	bls.n	8006838 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	f000 bc3e 	b.w	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006838:	4baf      	ldr	r3, [pc, #700]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1ef      	bne.n	8006824 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80c7 	beq.w	80069e0 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006852:	2300      	movs	r3, #0
 8006854:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006858:	4ba7      	ldr	r3, [pc, #668]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 800685a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d111      	bne.n	800688a <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006866:	4ba4      	ldr	r3, [pc, #656]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800686c:	4aa2      	ldr	r2, [pc, #648]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 800686e:	f043 0304 	orr.w	r3, r3, #4
 8006872:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006876:	4ba0      	ldr	r3, [pc, #640]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006884:	2301      	movs	r3, #1
 8006886:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800688a:	4b9c      	ldr	r3, [pc, #624]	; (8006afc <HAL_RCC_OscConfig+0x7e8>)
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d118      	bne.n	80068c8 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006896:	4b99      	ldr	r3, [pc, #612]	; (8006afc <HAL_RCC_OscConfig+0x7e8>)
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	4a98      	ldr	r2, [pc, #608]	; (8006afc <HAL_RCC_OscConfig+0x7e8>)
 800689c:	f043 0301 	orr.w	r3, r3, #1
 80068a0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068a2:	f7fe fef5 	bl	8005690 <HAL_GetTick>
 80068a6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068aa:	f7fe fef1 	bl	8005690 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e3fb      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80068bc:	4b8f      	ldr	r3, [pc, #572]	; (8006afc <HAL_RCC_OscConfig+0x7e8>)
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d05f      	beq.n	8006990 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80068d0:	4b89      	ldr	r3, [pc, #548]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 80068d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068d6:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699a      	ldr	r2, [r3, #24]
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d037      	beq.n	8006956 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d006      	beq.n	80068fe <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e3da      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01b      	beq.n	8006940 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8006908:	4b7b      	ldr	r3, [pc, #492]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 800690a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800690e:	4a7a      	ldr	r2, [pc, #488]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006910:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006914:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8006918:	f7fe feba 	bl	8005690 <HAL_GetTick>
 800691c:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006920:	f7fe feb6 	bl	8005690 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e3c0      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006932:	4b71      	ldr	r3, [pc, #452]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1ef      	bne.n	8006920 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006940:	4b6d      	ldr	r3, [pc, #436]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006946:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	496a      	ldr	r1, [pc, #424]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006950:	4313      	orrs	r3, r2
 8006952:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006956:	4b68      	ldr	r3, [pc, #416]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800695c:	4a66      	ldr	r2, [pc, #408]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 800695e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006962:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006966:	f7fe fe93 	bl	8005690 <HAL_GetTick>
 800696a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800696c:	e008      	b.n	8006980 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800696e:	f7fe fe8f 	bl	8005690 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e399      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006980:	4b5d      	ldr	r3, [pc, #372]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0ef      	beq.n	800696e <HAL_RCC_OscConfig+0x65a>
 800698e:	e01b      	b.n	80069c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006990:	4b59      	ldr	r3, [pc, #356]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006996:	4a58      	ldr	r2, [pc, #352]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006998:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800699c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80069a0:	f7fe fe76 	bl	8005690 <HAL_GetTick>
 80069a4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a8:	f7fe fe72 	bl	8005690 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e37c      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80069ba:	4b4f      	ldr	r3, [pc, #316]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 80069bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1ef      	bne.n	80069a8 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069c8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d107      	bne.n	80069e0 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069d0:	4b49      	ldr	r3, [pc, #292]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 80069d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d6:	4a48      	ldr	r2, [pc, #288]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 80069d8:	f023 0304 	bic.w	r3, r3, #4
 80069dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 8112 	beq.w	8006c12 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80069ee:	2300      	movs	r3, #0
 80069f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069f4:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 80069f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d111      	bne.n	8006a26 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a02:	4b3d      	ldr	r3, [pc, #244]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a08:	4a3b      	ldr	r2, [pc, #236]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006a0a:	f043 0304 	orr.w	r3, r3, #4
 8006a0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006a12:	4b39      	ldr	r3, [pc, #228]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	613b      	str	r3, [r7, #16]
 8006a1e:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006a20:	2301      	movs	r3, #1
 8006a22:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006a26:	4b35      	ldr	r3, [pc, #212]	; (8006afc <HAL_RCC_OscConfig+0x7e8>)
 8006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d118      	bne.n	8006a64 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006a32:	4b32      	ldr	r3, [pc, #200]	; (8006afc <HAL_RCC_OscConfig+0x7e8>)
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	4a31      	ldr	r2, [pc, #196]	; (8006afc <HAL_RCC_OscConfig+0x7e8>)
 8006a38:	f043 0301 	orr.w	r3, r3, #1
 8006a3c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a3e:	f7fe fe27 	bl	8005690 <HAL_GetTick>
 8006a42:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a46:	f7fe fe23 	bl	8005690 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e32d      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006a58:	4b28      	ldr	r3, [pc, #160]	; (8006afc <HAL_RCC_OscConfig+0x7e8>)
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0f0      	beq.n	8006a46 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01f      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d010      	beq.n	8006a9e <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a7c:	4b1e      	ldr	r3, [pc, #120]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a82:	4a1d      	ldr	r2, [pc, #116]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006a84:	f043 0304 	orr.w	r3, r3, #4
 8006a88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a8c:	4b1a      	ldr	r3, [pc, #104]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a92:	4a19      	ldr	r2, [pc, #100]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006a94:	f043 0301 	orr.w	r3, r3, #1
 8006a98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006a9c:	e018      	b.n	8006ad0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a9e:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aa4:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006aae:	e00f      	b.n	8006ad0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006ab0:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ab6:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006ab8:	f023 0301 	bic.w	r3, r3, #1
 8006abc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ac0:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ac6:	4a0c      	ldr	r2, [pc, #48]	; (8006af8 <HAL_RCC_OscConfig+0x7e4>)
 8006ac8:	f023 0304 	bic.w	r3, r3, #4
 8006acc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d058      	beq.n	8006b8a <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8006ad8:	f7fe fdda 	bl	8005690 <HAL_GetTick>
 8006adc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ade:	e00f      	b.n	8006b00 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae0:	f7fe fdd6 	bl	8005690 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d906      	bls.n	8006b00 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e2de      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
 8006af6:	bf00      	nop
 8006af8:	46020c00 	.word	0x46020c00
 8006afc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b00:	4b9c      	ldr	r3, [pc, #624]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0e8      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d01b      	beq.n	8006b52 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006b1a:	4b96      	ldr	r3, [pc, #600]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b20:	4a94      	ldr	r2, [pc, #592]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006b2a:	e00a      	b.n	8006b42 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b2c:	f7fe fdb0 	bl	8005690 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e2b8      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006b42:	4b8c      	ldr	r3, [pc, #560]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0ed      	beq.n	8006b2c <HAL_RCC_OscConfig+0x818>
 8006b50:	e053      	b.n	8006bfa <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006b52:	4b88      	ldr	r3, [pc, #544]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b58:	4a86      	ldr	r2, [pc, #536]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006b62:	e00a      	b.n	8006b7a <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b64:	f7fe fd94 	bl	8005690 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e29c      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006b7a:	4b7e      	ldr	r3, [pc, #504]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ed      	bne.n	8006b64 <HAL_RCC_OscConfig+0x850>
 8006b88:	e037      	b.n	8006bfa <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006b8a:	f7fe fd81 	bl	8005690 <HAL_GetTick>
 8006b8e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b90:	e00a      	b.n	8006ba8 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b92:	f7fe fd7d 	bl	8005690 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e285      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ba8:	4b72      	ldr	r3, [pc, #456]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1ed      	bne.n	8006b92 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006bb6:	4b6f      	ldr	r3, [pc, #444]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01a      	beq.n	8006bfa <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006bc4:	4b6b      	ldr	r3, [pc, #428]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bca:	4a6a      	ldr	r2, [pc, #424]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bd4:	e00a      	b.n	8006bec <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd6:	f7fe fd5b 	bl	8005690 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e263      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bec:	4b61      	ldr	r3, [pc, #388]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1ed      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bfa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d107      	bne.n	8006c12 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c02:	4b5c      	ldr	r3, [pc, #368]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c08:	4a5a      	ldr	r2, [pc, #360]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006c0a:	f023 0304 	bic.w	r3, r3, #4
 8006c0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d036      	beq.n	8006c8c <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d019      	beq.n	8006c5a <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006c26:	4b53      	ldr	r3, [pc, #332]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a52      	ldr	r2, [pc, #328]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c30:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006c32:	f7fe fd2d 	bl	8005690 <HAL_GetTick>
 8006c36:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c3a:	f7fe fd29 	bl	8005690 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e233      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006c4c:	4b49      	ldr	r3, [pc, #292]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f0      	beq.n	8006c3a <HAL_RCC_OscConfig+0x926>
 8006c58:	e018      	b.n	8006c8c <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006c5a:	4b46      	ldr	r3, [pc, #280]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a45      	ldr	r2, [pc, #276]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c64:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006c66:	f7fe fd13 	bl	8005690 <HAL_GetTick>
 8006c6a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006c6c:	e008      	b.n	8006c80 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c6e:	f7fe fd0f 	bl	8005690 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e219      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006c80:	4b3c      	ldr	r3, [pc, #240]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1f0      	bne.n	8006c6e <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d036      	beq.n	8006d06 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d019      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006ca0:	4b34      	ldr	r3, [pc, #208]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a33      	ldr	r2, [pc, #204]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006caa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006cac:	f7fe fcf0 	bl	8005690 <HAL_GetTick>
 8006cb0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006cb4:	f7fe fcec 	bl	8005690 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e1f6      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006cc6:	4b2b      	ldr	r3, [pc, #172]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0f0      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x9a0>
 8006cd2:	e018      	b.n	8006d06 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006cd4:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a26      	ldr	r2, [pc, #152]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cde:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ce0:	f7fe fcd6 	bl	8005690 <HAL_GetTick>
 8006ce4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006ce8:	f7fe fcd2 	bl	8005690 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e1dc      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006cfa:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f0      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d07f      	beq.n	8006e12 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d062      	beq.n	8006de0 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006d1a:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	4a15      	ldr	r2, [pc, #84]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006d20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d24:	6093      	str	r3, [r2, #8]
 8006d26:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	4910      	ldr	r1, [pc, #64]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006d40:	d309      	bcc.n	8006d56 <HAL_RCC_OscConfig+0xa42>
 8006d42:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f023 021f 	bic.w	r2, r3, #31
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	4909      	ldr	r1, [pc, #36]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60cb      	str	r3, [r1, #12]
 8006d54:	e02a      	b.n	8006dac <HAL_RCC_OscConfig+0xa98>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da0c      	bge.n	8006d78 <HAL_RCC_OscConfig+0xa64>
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	015b      	lsls	r3, r3, #5
 8006d6c:	4901      	ldr	r1, [pc, #4]	; (8006d74 <HAL_RCC_OscConfig+0xa60>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60cb      	str	r3, [r1, #12]
 8006d72:	e01b      	b.n	8006dac <HAL_RCC_OscConfig+0xa98>
 8006d74:	46020c00 	.word	0x46020c00
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d80:	d30a      	bcc.n	8006d98 <HAL_RCC_OscConfig+0xa84>
 8006d82:	4ba5      	ldr	r3, [pc, #660]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	029b      	lsls	r3, r3, #10
 8006d90:	49a1      	ldr	r1, [pc, #644]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60cb      	str	r3, [r1, #12]
 8006d96:	e009      	b.n	8006dac <HAL_RCC_OscConfig+0xa98>
 8006d98:	4b9f      	ldr	r3, [pc, #636]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	03db      	lsls	r3, r3, #15
 8006da6:	499c      	ldr	r1, [pc, #624]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006dac:	4b9a      	ldr	r3, [pc, #616]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a99      	ldr	r2, [pc, #612]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006db2:	f043 0310 	orr.w	r3, r3, #16
 8006db6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006db8:	f7fe fc6a 	bl	8005690 <HAL_GetTick>
 8006dbc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006dc0:	f7fe fc66 	bl	8005690 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e170      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006dd2:	4b91      	ldr	r3, [pc, #580]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0f0      	beq.n	8006dc0 <HAL_RCC_OscConfig+0xaac>
 8006dde:	e018      	b.n	8006e12 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006de0:	4b8d      	ldr	r3, [pc, #564]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a8c      	ldr	r2, [pc, #560]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006de6:	f023 0310 	bic.w	r3, r3, #16
 8006dea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006dec:	f7fe fc50 	bl	8005690 <HAL_GetTick>
 8006df0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006df4:	f7fe fc4c 	bl	8005690 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e156      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006e06:	4b84      	ldr	r3, [pc, #528]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 814b 	beq.w	80070b2 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e22:	4b7d      	ldr	r3, [pc, #500]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f003 030c 	and.w	r3, r3, #12
 8006e2a:	2b0c      	cmp	r3, #12
 8006e2c:	f000 80fa 	beq.w	8007024 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	f040 80cc 	bne.w	8006fd2 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006e3a:	4b77      	ldr	r3, [pc, #476]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a76      	ldr	r2, [pc, #472]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e44:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006e46:	f7fe fc23 	bl	8005690 <HAL_GetTick>
 8006e4a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006e4c:	e008      	b.n	8006e60 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e4e:	f7fe fc1f 	bl	8005690 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e129      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006e60:	4b6d      	ldr	r3, [pc, #436]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1f0      	bne.n	8006e4e <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e6c:	4b6a      	ldr	r3, [pc, #424]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d111      	bne.n	8006e9e <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006e7a:	4b67      	ldr	r3, [pc, #412]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e80:	4a65      	ldr	r2, [pc, #404]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006e82:	f043 0304 	orr.w	r3, r3, #4
 8006e86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006e8a:	4b63      	ldr	r3, [pc, #396]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006e9e:	4b5f      	ldr	r3, [pc, #380]	; (800701c <HAL_RCC_OscConfig+0xd08>)
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006eaa:	d102      	bne.n	8006eb2 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006eb2:	4b5a      	ldr	r3, [pc, #360]	; (800701c <HAL_RCC_OscConfig+0xd08>)
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	4a59      	ldr	r2, [pc, #356]	; (800701c <HAL_RCC_OscConfig+0xd08>)
 8006eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ebc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006ebe:	4b56      	ldr	r3, [pc, #344]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ed2:	3a01      	subs	r2, #1
 8006ed4:	0212      	lsls	r2, r2, #8
 8006ed6:	4311      	orrs	r1, r2
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006edc:	430a      	orrs	r2, r1
 8006ede:	494e      	ldr	r1, [pc, #312]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	628b      	str	r3, [r1, #40]	; 0x28
 8006ee4:	4b4c      	ldr	r3, [pc, #304]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee8:	4b4d      	ldr	r3, [pc, #308]	; (8007020 <HAL_RCC_OscConfig+0xd0c>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ef0:	3a01      	subs	r2, #1
 8006ef2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006efa:	3a01      	subs	r2, #1
 8006efc:	0252      	lsls	r2, r2, #9
 8006efe:	b292      	uxth	r2, r2
 8006f00:	4311      	orrs	r1, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f06:	3a01      	subs	r2, #1
 8006f08:	0412      	lsls	r2, r2, #16
 8006f0a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006f0e:	4311      	orrs	r1, r2
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006f14:	3a01      	subs	r2, #1
 8006f16:	0612      	lsls	r2, r2, #24
 8006f18:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	493e      	ldr	r1, [pc, #248]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006f24:	4b3c      	ldr	r3, [pc, #240]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	4a3b      	ldr	r2, [pc, #236]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f2a:	f023 0310 	bic.w	r3, r3, #16
 8006f2e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006f30:	4b39      	ldr	r3, [pc, #228]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006f40:	00d2      	lsls	r2, r2, #3
 8006f42:	4935      	ldr	r1, [pc, #212]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006f48:	4b33      	ldr	r3, [pc, #204]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	4a32      	ldr	r2, [pc, #200]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f4e:	f043 0310 	orr.w	r3, r3, #16
 8006f52:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006f54:	4b30      	ldr	r3, [pc, #192]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	f023 020c 	bic.w	r2, r3, #12
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f60:	492d      	ldr	r1, [pc, #180]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8006f66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d105      	bne.n	8006f7a <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006f6e:	4b2b      	ldr	r3, [pc, #172]	; (800701c <HAL_RCC_OscConfig+0xd08>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	4a2a      	ldr	r2, [pc, #168]	; (800701c <HAL_RCC_OscConfig+0xd08>)
 8006f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f78:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006f7a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d107      	bne.n	8006f92 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006f82:	4b25      	ldr	r3, [pc, #148]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f88:	4a23      	ldr	r2, [pc, #140]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f8a:	f023 0304 	bic.w	r3, r3, #4
 8006f8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f92:	4b21      	ldr	r3, [pc, #132]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	4a20      	ldr	r2, [pc, #128]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f9c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006f9e:	4b1e      	ldr	r3, [pc, #120]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1d      	ldr	r2, [pc, #116]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006fa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fa8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006faa:	f7fe fb71 	bl	8005690 <HAL_GetTick>
 8006fae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fb2:	f7fe fb6d 	bl	8005690 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e077      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006fc4:	4b14      	ldr	r3, [pc, #80]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0f0      	beq.n	8006fb2 <HAL_RCC_OscConfig+0xc9e>
 8006fd0:	e06f      	b.n	80070b2 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006fd2:	4b11      	ldr	r3, [pc, #68]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a10      	ldr	r2, [pc, #64]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fdc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006fde:	f7fe fb57 	bl	8005690 <HAL_GetTick>
 8006fe2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe6:	f7fe fb53 	bl	8005690 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e05d      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006ff8:	4b07      	ldr	r3, [pc, #28]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f0      	bne.n	8006fe6 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007004:	4b04      	ldr	r3, [pc, #16]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 8007006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007008:	4a03      	ldr	r2, [pc, #12]	; (8007018 <HAL_RCC_OscConfig+0xd04>)
 800700a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	6293      	str	r3, [r2, #40]	; 0x28
 8007014:	e04d      	b.n	80070b2 <HAL_RCC_OscConfig+0xd9e>
 8007016:	bf00      	nop
 8007018:	46020c00 	.word	0x46020c00
 800701c:	46020800 	.word	0x46020800
 8007020:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007024:	4b25      	ldr	r3, [pc, #148]	; (80070bc <HAL_RCC_OscConfig+0xda8>)
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800702a:	4b24      	ldr	r3, [pc, #144]	; (80070bc <HAL_RCC_OscConfig+0xda8>)
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	2b01      	cmp	r3, #1
 8007036:	d03a      	beq.n	80070ae <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	f003 0203 	and.w	r2, r3, #3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d133      	bne.n	80070ae <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	0a1b      	lsrs	r3, r3, #8
 800704a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007054:	429a      	cmp	r2, r3
 8007056:	d12a      	bne.n	80070ae <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	0b1b      	lsrs	r3, r3, #12
 800705c:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007064:	429a      	cmp	r2, r3
 8007066:	d122      	bne.n	80070ae <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007072:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007074:	429a      	cmp	r2, r3
 8007076:	d11a      	bne.n	80070ae <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	0a5b      	lsrs	r3, r3, #9
 800707c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007084:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007086:	429a      	cmp	r2, r3
 8007088:	d111      	bne.n	80070ae <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	0c1b      	lsrs	r3, r3, #16
 800708e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007096:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007098:	429a      	cmp	r2, r3
 800709a:	d108      	bne.n	80070ae <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	0e1b      	lsrs	r3, r3, #24
 80070a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d001      	beq.n	80070b2 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e000      	b.n	80070b4 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3738      	adds	r7, #56	; 0x38
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	46020c00 	.word	0x46020c00

080070c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e1d9      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070d4:	4b9b      	ldr	r3, [pc, #620]	; (8007344 <HAL_RCC_ClockConfig+0x284>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 030f 	and.w	r3, r3, #15
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d910      	bls.n	8007104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070e2:	4b98      	ldr	r3, [pc, #608]	; (8007344 <HAL_RCC_ClockConfig+0x284>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f023 020f 	bic.w	r2, r3, #15
 80070ea:	4996      	ldr	r1, [pc, #600]	; (8007344 <HAL_RCC_ClockConfig+0x284>)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070f2:	4b94      	ldr	r3, [pc, #592]	; (8007344 <HAL_RCC_ClockConfig+0x284>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d001      	beq.n	8007104 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e1c1      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b00      	cmp	r3, #0
 800710e:	d010      	beq.n	8007132 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	695a      	ldr	r2, [r3, #20]
 8007114:	4b8c      	ldr	r3, [pc, #560]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800711c:	429a      	cmp	r2, r3
 800711e:	d908      	bls.n	8007132 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007120:	4b89      	ldr	r3, [pc, #548]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	4986      	ldr	r1, [pc, #536]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 800712e:	4313      	orrs	r3, r2
 8007130:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d012      	beq.n	8007164 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691a      	ldr	r2, [r3, #16]
 8007142:	4b81      	ldr	r3, [pc, #516]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	091b      	lsrs	r3, r3, #4
 8007148:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800714c:	429a      	cmp	r2, r3
 800714e:	d909      	bls.n	8007164 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007150:	4b7d      	ldr	r3, [pc, #500]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	497a      	ldr	r1, [pc, #488]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007160:	4313      	orrs	r3, r2
 8007162:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b00      	cmp	r3, #0
 800716e:	d010      	beq.n	8007192 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	4b74      	ldr	r3, [pc, #464]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800717c:	429a      	cmp	r2, r3
 800717e:	d908      	bls.n	8007192 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007180:	4b71      	ldr	r3, [pc, #452]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	496e      	ldr	r1, [pc, #440]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 800718e:	4313      	orrs	r3, r2
 8007190:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d010      	beq.n	80071c0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	4b69      	ldr	r3, [pc, #420]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d908      	bls.n	80071c0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80071ae:	4b66      	ldr	r3, [pc, #408]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f023 020f 	bic.w	r2, r3, #15
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	4963      	ldr	r1, [pc, #396]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 80d2 	beq.w	8007372 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d143      	bne.n	8007262 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071da:	4b5b      	ldr	r3, [pc, #364]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 80071dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d110      	bne.n	800720a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80071e8:	4b57      	ldr	r3, [pc, #348]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 80071ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ee:	4a56      	ldr	r2, [pc, #344]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 80071f0:	f043 0304 	orr.w	r3, r3, #4
 80071f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80071f8:	4b53      	ldr	r3, [pc, #332]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 80071fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	60bb      	str	r3, [r7, #8]
 8007204:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007206:	2301      	movs	r3, #1
 8007208:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800720a:	f7fe fa41 	bl	8005690 <HAL_GetTick>
 800720e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007210:	4b4e      	ldr	r3, [pc, #312]	; (800734c <HAL_RCC_ClockConfig+0x28c>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00f      	beq.n	800723c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800721c:	e008      	b.n	8007230 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800721e:	f7fe fa37 	bl	8005690 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d901      	bls.n	8007230 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e12b      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007230:	4b46      	ldr	r3, [pc, #280]	; (800734c <HAL_RCC_ClockConfig+0x28c>)
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0f0      	beq.n	800721e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d107      	bne.n	8007252 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007242:	4b41      	ldr	r3, [pc, #260]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007248:	4a3f      	ldr	r2, [pc, #252]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 800724a:	f023 0304 	bic.w	r3, r3, #4
 800724e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007252:	4b3d      	ldr	r3, [pc, #244]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d121      	bne.n	80072a2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e112      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d107      	bne.n	800727a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800726a:	4b37      	ldr	r3, [pc, #220]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d115      	bne.n	80072a2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e106      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d107      	bne.n	8007292 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007282:	4b31      	ldr	r3, [pc, #196]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d109      	bne.n	80072a2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e0fa      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007292:	4b2d      	ldr	r3, [pc, #180]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e0f2      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80072a2:	4b29      	ldr	r3, [pc, #164]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f023 0203 	bic.w	r2, r3, #3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	4926      	ldr	r1, [pc, #152]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80072b4:	f7fe f9ec 	bl	8005690 <HAL_GetTick>
 80072b8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d112      	bne.n	80072e8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072c2:	e00a      	b.n	80072da <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072c4:	f7fe f9e4 	bl	8005690 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d901      	bls.n	80072da <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e0d6      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072da:	4b1b      	ldr	r3, [pc, #108]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f003 030c 	and.w	r3, r3, #12
 80072e2:	2b0c      	cmp	r3, #12
 80072e4:	d1ee      	bne.n	80072c4 <HAL_RCC_ClockConfig+0x204>
 80072e6:	e044      	b.n	8007372 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d112      	bne.n	8007316 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80072f0:	e00a      	b.n	8007308 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072f2:	f7fe f9cd 	bl	8005690 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007300:	4293      	cmp	r3, r2
 8007302:	d901      	bls.n	8007308 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e0bf      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007308:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f003 030c 	and.w	r3, r3, #12
 8007310:	2b08      	cmp	r3, #8
 8007312:	d1ee      	bne.n	80072f2 <HAL_RCC_ClockConfig+0x232>
 8007314:	e02d      	b.n	8007372 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d123      	bne.n	8007366 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800731e:	e00a      	b.n	8007336 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007320:	f7fe f9b6 	bl	8005690 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	f241 3288 	movw	r2, #5000	; 0x1388
 800732e:	4293      	cmp	r3, r2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e0a8      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007336:	4b04      	ldr	r3, [pc, #16]	; (8007348 <HAL_RCC_ClockConfig+0x288>)
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f003 030c 	and.w	r3, r3, #12
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1ee      	bne.n	8007320 <HAL_RCC_ClockConfig+0x260>
 8007342:	e016      	b.n	8007372 <HAL_RCC_ClockConfig+0x2b2>
 8007344:	40022000 	.word	0x40022000
 8007348:	46020c00 	.word	0x46020c00
 800734c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007350:	f7fe f99e 	bl	8005690 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	f241 3288 	movw	r2, #5000	; 0x1388
 800735e:	4293      	cmp	r3, r2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e090      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007366:	4b4a      	ldr	r3, [pc, #296]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f003 030c 	and.w	r3, r3, #12
 800736e:	2b04      	cmp	r3, #4
 8007370:	d1ee      	bne.n	8007350 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d010      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	4b43      	ldr	r3, [pc, #268]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	429a      	cmp	r2, r3
 800738c:	d208      	bcs.n	80073a0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800738e:	4b40      	ldr	r3, [pc, #256]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 020f 	bic.w	r2, r3, #15
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	493d      	ldr	r1, [pc, #244]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 800739c:	4313      	orrs	r3, r2
 800739e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073a0:	4b3c      	ldr	r3, [pc, #240]	; (8007494 <HAL_RCC_ClockConfig+0x3d4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 030f 	and.w	r3, r3, #15
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d210      	bcs.n	80073d0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ae:	4b39      	ldr	r3, [pc, #228]	; (8007494 <HAL_RCC_ClockConfig+0x3d4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f023 020f 	bic.w	r2, r3, #15
 80073b6:	4937      	ldr	r1, [pc, #220]	; (8007494 <HAL_RCC_ClockConfig+0x3d4>)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073be:	4b35      	ldr	r3, [pc, #212]	; (8007494 <HAL_RCC_ClockConfig+0x3d4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d001      	beq.n	80073d0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e05b      	b.n	8007488 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0304 	and.w	r3, r3, #4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d010      	beq.n	80073fe <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	4b2b      	ldr	r3, [pc, #172]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d208      	bcs.n	80073fe <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80073ec:	4b28      	ldr	r3, [pc, #160]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	4925      	ldr	r1, [pc, #148]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0308 	and.w	r3, r3, #8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d012      	beq.n	8007430 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691a      	ldr	r2, [r3, #16]
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	091b      	lsrs	r3, r3, #4
 8007414:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007418:	429a      	cmp	r2, r3
 800741a:	d209      	bcs.n	8007430 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800741c:	4b1c      	ldr	r3, [pc, #112]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	011b      	lsls	r3, r3, #4
 800742a:	4919      	ldr	r1, [pc, #100]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 800742c:	4313      	orrs	r3, r2
 800742e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b00      	cmp	r3, #0
 800743a:	d010      	beq.n	800745e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	695a      	ldr	r2, [r3, #20]
 8007440:	4b13      	ldr	r3, [pc, #76]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007448:	429a      	cmp	r2, r3
 800744a:	d208      	bcs.n	800745e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800744c:	4b10      	ldr	r3, [pc, #64]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	490d      	ldr	r1, [pc, #52]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 800745a:	4313      	orrs	r3, r2
 800745c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800745e:	f000 f821 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 8007462:	4602      	mov	r2, r0
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <HAL_RCC_ClockConfig+0x3d0>)
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	490a      	ldr	r1, [pc, #40]	; (8007498 <HAL_RCC_ClockConfig+0x3d8>)
 800746e:	5ccb      	ldrb	r3, [r1, r3]
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
 8007474:	4a09      	ldr	r2, [pc, #36]	; (800749c <HAL_RCC_ClockConfig+0x3dc>)
 8007476:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007478:	4b09      	ldr	r3, [pc, #36]	; (80074a0 <HAL_RCC_ClockConfig+0x3e0>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe f8bd 	bl	80055fc <HAL_InitTick>
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]

  return status;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3718      	adds	r7, #24
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	46020c00 	.word	0x46020c00
 8007494:	40022000 	.word	0x40022000
 8007498:	08014390 	.word	0x08014390
 800749c:	2000000c 	.word	0x2000000c
 80074a0:	200000a4 	.word	0x200000a4

080074a4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b08b      	sub	sp, #44	; 0x2c
 80074a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074b2:	4b7b      	ldr	r3, [pc, #492]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f003 030c 	and.w	r3, r3, #12
 80074ba:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074bc:	4b78      	ldr	r3, [pc, #480]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	f003 0303 	and.w	r3, r3, #3
 80074c4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <HAL_RCC_GetSysClockFreq+0x34>
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b0c      	cmp	r3, #12
 80074d0:	d121      	bne.n	8007516 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d11e      	bne.n	8007516 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80074d8:	4b71      	ldr	r3, [pc, #452]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d107      	bne.n	80074f4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80074e4:	4b6e      	ldr	r3, [pc, #440]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80074e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074ea:	0b1b      	lsrs	r3, r3, #12
 80074ec:	f003 030f 	and.w	r3, r3, #15
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
 80074f2:	e005      	b.n	8007500 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80074f4:	4b6a      	ldr	r3, [pc, #424]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	0f1b      	lsrs	r3, r3, #28
 80074fa:	f003 030f 	and.w	r3, r3, #15
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007500:	4a68      	ldr	r2, [pc, #416]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007508:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d110      	bne.n	8007532 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007514:	e00d      	b.n	8007532 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007516:	4b62      	ldr	r3, [pc, #392]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f003 030c 	and.w	r3, r3, #12
 800751e:	2b04      	cmp	r3, #4
 8007520:	d102      	bne.n	8007528 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007522:	4b61      	ldr	r3, [pc, #388]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007524:	623b      	str	r3, [r7, #32]
 8007526:	e004      	b.n	8007532 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b08      	cmp	r3, #8
 800752c:	d101      	bne.n	8007532 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800752e:	4b5e      	ldr	r3, [pc, #376]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007530:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	2b0c      	cmp	r3, #12
 8007536:	f040 80ac 	bne.w	8007692 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800753a:	4b59      	ldr	r3, [pc, #356]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007544:	4b56      	ldr	r3, [pc, #344]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	3301      	adds	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007552:	4b53      	ldr	r3, [pc, #332]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	091b      	lsrs	r3, r3, #4
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800755e:	4b50      	ldr	r3, [pc, #320]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007562:	08db      	lsrs	r3, r3, #3
 8007564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007576:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 8086 	beq.w	800768e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	2b02      	cmp	r3, #2
 8007586:	d003      	beq.n	8007590 <HAL_RCC_GetSysClockFreq+0xec>
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2b03      	cmp	r3, #3
 800758c:	d022      	beq.n	80075d4 <HAL_RCC_GetSysClockFreq+0x130>
 800758e:	e043      	b.n	8007618 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759a:	eddf 6a44 	vldr	s13, [pc, #272]	; 80076ac <HAL_RCC_GetSysClockFreq+0x208>
 800759e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a2:	4b3f      	ldr	r3, [pc, #252]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80075a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80075b2:	ed97 6a01 	vldr	s12, [r7, #4]
 80075b6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80076b0 <HAL_RCC_GetSysClockFreq+0x20c>
 80075ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80075be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80075c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80075ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ce:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80075d2:	e046      	b.n	8007662 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075de:	eddf 6a33 	vldr	s13, [pc, #204]	; 80076ac <HAL_RCC_GetSysClockFreq+0x208>
 80075e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e6:	4b2e      	ldr	r3, [pc, #184]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80075e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80075f6:	ed97 6a01 	vldr	s12, [r7, #4]
 80075fa:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80076b0 <HAL_RCC_GetSysClockFreq+0x20c>
 80075fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007602:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800760e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007612:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007616:	e024      	b.n	8007662 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007630:	4b1b      	ldr	r3, [pc, #108]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007640:	ed97 6a01 	vldr	s12, [r7, #4]
 8007644:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80076b0 <HAL_RCC_GetSysClockFreq+0x20c>
 8007648:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800764c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007654:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007660:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007662:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007666:	0e1b      	lsrs	r3, r3, #24
 8007668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766c:	3301      	adds	r3, #1
 800766e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800767a:	edd7 6a07 	vldr	s13, [r7, #28]
 800767e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007686:	ee17 3a90 	vmov	r3, s15
 800768a:	623b      	str	r3, [r7, #32]
 800768c:	e001      	b.n	8007692 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8007692:	6a3b      	ldr	r3, [r7, #32]
}
 8007694:	4618      	mov	r0, r3
 8007696:	372c      	adds	r7, #44	; 0x2c
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	46020c00 	.word	0x46020c00
 80076a4:	080143a8 	.word	0x080143a8
 80076a8:	00f42400 	.word	0x00f42400
 80076ac:	4b742400 	.word	0x4b742400
 80076b0:	46000000 	.word	0x46000000

080076b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80076b8:	f7ff fef4 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 80076bc:	4602      	mov	r2, r0
 80076be:	4b07      	ldr	r3, [pc, #28]	; (80076dc <HAL_RCC_GetHCLKFreq+0x28>)
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	4906      	ldr	r1, [pc, #24]	; (80076e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80076c8:	5ccb      	ldrb	r3, [r1, r3]
 80076ca:	fa22 f303 	lsr.w	r3, r2, r3
 80076ce:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80076d0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80076d2:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80076d4:	681b      	ldr	r3, [r3, #0]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	46020c00 	.word	0x46020c00
 80076e0:	08014390 	.word	0x08014390
 80076e4:	2000000c 	.word	0x2000000c

080076e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80076ec:	f7ff ffe2 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
 80076f0:	4602      	mov	r2, r0
 80076f2:	4b05      	ldr	r3, [pc, #20]	; (8007708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	091b      	lsrs	r3, r3, #4
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	4903      	ldr	r1, [pc, #12]	; (800770c <HAL_RCC_GetPCLK1Freq+0x24>)
 80076fe:	5ccb      	ldrb	r3, [r1, r3]
 8007700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007704:	4618      	mov	r0, r3
 8007706:	bd80      	pop	{r7, pc}
 8007708:	46020c00 	.word	0x46020c00
 800770c:	080143a0 	.word	0x080143a0

08007710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007714:	f7ff ffce 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
 8007718:	4602      	mov	r2, r0
 800771a:	4b05      	ldr	r3, [pc, #20]	; (8007730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	f003 0307 	and.w	r3, r3, #7
 8007724:	4903      	ldr	r1, [pc, #12]	; (8007734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007726:	5ccb      	ldrb	r3, [r1, r3]
 8007728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800772c:	4618      	mov	r0, r3
 800772e:	bd80      	pop	{r7, pc}
 8007730:	46020c00 	.word	0x46020c00
 8007734:	080143a0 	.word	0x080143a0

08007738 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800773c:	f7ff ffba 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
 8007740:	4602      	mov	r2, r0
 8007742:	4b05      	ldr	r3, [pc, #20]	; (8007758 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	091b      	lsrs	r3, r3, #4
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	4903      	ldr	r1, [pc, #12]	; (800775c <HAL_RCC_GetPCLK3Freq+0x24>)
 800774e:	5ccb      	ldrb	r3, [r1, r3]
 8007750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007754:	4618      	mov	r0, r3
 8007756:	bd80      	pop	{r7, pc}
 8007758:	46020c00 	.word	0x46020c00
 800775c:	080143a0 	.word	0x080143a0

08007760 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007768:	4b3e      	ldr	r3, [pc, #248]	; (8007864 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800776a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800776e:	f003 0304 	and.w	r3, r3, #4
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007776:	f7fe fdaf 	bl	80062d8 <HAL_PWREx_GetVoltageRange>
 800777a:	6178      	str	r0, [r7, #20]
 800777c:	e019      	b.n	80077b2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800777e:	4b39      	ldr	r3, [pc, #228]	; (8007864 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007784:	4a37      	ldr	r2, [pc, #220]	; (8007864 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007786:	f043 0304 	orr.w	r3, r3, #4
 800778a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800778e:	4b35      	ldr	r3, [pc, #212]	; (8007864 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800779c:	f7fe fd9c 	bl	80062d8 <HAL_PWREx_GetVoltageRange>
 80077a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80077a2:	4b30      	ldr	r3, [pc, #192]	; (8007864 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80077a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077a8:	4a2e      	ldr	r2, [pc, #184]	; (8007864 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80077aa:	f023 0304 	bic.w	r3, r3, #4
 80077ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077b8:	d003      	beq.n	80077c2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c0:	d109      	bne.n	80077d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077c8:	d202      	bcs.n	80077d0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80077ca:	2301      	movs	r3, #1
 80077cc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80077ce:	e033      	b.n	8007838 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80077d0:	2300      	movs	r3, #0
 80077d2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80077d4:	e030      	b.n	8007838 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077dc:	d208      	bcs.n	80077f0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e4:	d102      	bne.n	80077ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80077e6:	2303      	movs	r3, #3
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	e025      	b.n	8007838 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e035      	b.n	800785c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077f6:	d90f      	bls.n	8007818 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007804:	d902      	bls.n	800780c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007806:	2300      	movs	r3, #0
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	e015      	b.n	8007838 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800780c:	2301      	movs	r3, #1
 800780e:	613b      	str	r3, [r7, #16]
 8007810:	e012      	b.n	8007838 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007812:	2300      	movs	r3, #0
 8007814:	613b      	str	r3, [r7, #16]
 8007816:	e00f      	b.n	8007838 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800781e:	d109      	bne.n	8007834 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007826:	d102      	bne.n	800782e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007828:	2301      	movs	r3, #1
 800782a:	613b      	str	r3, [r7, #16]
 800782c:	e004      	b.n	8007838 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800782e:	2302      	movs	r3, #2
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	e001      	b.n	8007838 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007834:	2301      	movs	r3, #1
 8007836:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007838:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f023 020f 	bic.w	r2, r3, #15
 8007840:	4909      	ldr	r1, [pc, #36]	; (8007868 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	4313      	orrs	r3, r2
 8007846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007848:	4b07      	ldr	r3, [pc, #28]	; (8007868 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	429a      	cmp	r2, r3
 8007854:	d001      	beq.n	800785a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	46020c00 	.word	0x46020c00
 8007868:	40022000 	.word	0x40022000

0800786c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800786c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007870:	b0ba      	sub	sp, #232	; 0xe8
 8007872:	af00      	add	r7, sp, #0
 8007874:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007878:	2300      	movs	r3, #0
 800787a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800787e:	2300      	movs	r3, #0
 8007880:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f002 0401 	and.w	r4, r2, #1
 8007890:	2500      	movs	r5, #0
 8007892:	ea54 0305 	orrs.w	r3, r4, r5
 8007896:	d00b      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007898:	4bcb      	ldr	r3, [pc, #812]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800789a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800789e:	f023 0103 	bic.w	r1, r3, #3
 80078a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a8:	4ac7      	ldr	r2, [pc, #796]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078aa:	430b      	orrs	r3, r1
 80078ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f002 0802 	and.w	r8, r2, #2
 80078bc:	f04f 0900 	mov.w	r9, #0
 80078c0:	ea58 0309 	orrs.w	r3, r8, r9
 80078c4:	d00b      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80078c6:	4bc0      	ldr	r3, [pc, #768]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078cc:	f023 010c 	bic.w	r1, r3, #12
 80078d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d6:	4abc      	ldr	r2, [pc, #752]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078d8:	430b      	orrs	r3, r1
 80078da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	f002 0a04 	and.w	sl, r2, #4
 80078ea:	f04f 0b00 	mov.w	fp, #0
 80078ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80078f2:	d00b      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80078f4:	4bb4      	ldr	r3, [pc, #720]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078fa:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80078fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007904:	4ab0      	ldr	r2, [pc, #704]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007906:	430b      	orrs	r3, r1
 8007908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800790c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f002 0308 	and.w	r3, r2, #8
 8007918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800791c:	2300      	movs	r3, #0
 800791e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007922:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007926:	460b      	mov	r3, r1
 8007928:	4313      	orrs	r3, r2
 800792a:	d00b      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800792c:	4ba6      	ldr	r3, [pc, #664]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800792e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007932:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800793a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800793c:	4aa2      	ldr	r2, [pc, #648]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800793e:	430b      	orrs	r3, r1
 8007940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007944:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f002 0310 	and.w	r3, r2, #16
 8007950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007954:	2300      	movs	r3, #0
 8007956:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800795a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800795e:	460b      	mov	r3, r1
 8007960:	4313      	orrs	r3, r2
 8007962:	d00b      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007964:	4b98      	ldr	r3, [pc, #608]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800796a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800796e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007974:	4a94      	ldr	r2, [pc, #592]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007976:	430b      	orrs	r3, r1
 8007978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800797c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f002 0320 	and.w	r3, r2, #32
 8007988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800798c:	2300      	movs	r3, #0
 800798e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007992:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007996:	460b      	mov	r3, r1
 8007998:	4313      	orrs	r3, r2
 800799a:	d00b      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800799c:	4b8a      	ldr	r3, [pc, #552]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800799e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079a2:	f023 0107 	bic.w	r1, r3, #7
 80079a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ac:	4a86      	ldr	r2, [pc, #536]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079ae:	430b      	orrs	r3, r1
 80079b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80079c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079c4:	2300      	movs	r3, #0
 80079c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4313      	orrs	r3, r2
 80079d2:	d00b      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80079d4:	4b7c      	ldr	r3, [pc, #496]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079da:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80079de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079e4:	4a78      	ldr	r2, [pc, #480]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079e6:	430b      	orrs	r3, r1
 80079e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80079f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079fc:	2300      	movs	r3, #0
 80079fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a02:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a06:	460b      	mov	r3, r1
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	d00b      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007a0c:	4b6e      	ldr	r3, [pc, #440]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1c:	4a6a      	ldr	r2, [pc, #424]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8007a30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a34:	2300      	movs	r3, #0
 8007a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a3a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4313      	orrs	r3, r2
 8007a42:	d00b      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007a44:	4b60      	ldr	r3, [pc, #384]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a54:	4a5c      	ldr	r2, [pc, #368]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a56:	430b      	orrs	r3, r1
 8007a58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007a76:	460b      	mov	r3, r1
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	d00b      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007a7c:	4b52      	ldr	r3, [pc, #328]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a82:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8007a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a8c:	4a4e      	ldr	r2, [pc, #312]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007a94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8007aa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007aaa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	d00b      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007ab4:	4b44      	ldr	r3, [pc, #272]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007aba:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8007abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac4:	4a40      	ldr	r2, [pc, #256]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ac6:	430b      	orrs	r3, r1
 8007ac8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007acc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007adc:	2300      	movs	r3, #0
 8007ade:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ae2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	d00b      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007aec:	4b36      	ldr	r3, [pc, #216]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007af2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8007af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007afc:	4a32      	ldr	r2, [pc, #200]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007afe:	430b      	orrs	r3, r1
 8007b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b14:	2300      	movs	r3, #0
 8007b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b1a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4313      	orrs	r3, r2
 8007b22:	d00c      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007b24:	4b28      	ldr	r3, [pc, #160]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b36:	4a24      	ldr	r2, [pc, #144]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007b4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b50:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007b54:	460b      	mov	r3, r1
 8007b56:	4313      	orrs	r3, r2
 8007b58:	d04f      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b62:	2b80      	cmp	r3, #128	; 0x80
 8007b64:	d02d      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007b66:	2b80      	cmp	r3, #128	; 0x80
 8007b68:	d827      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007b6a:	2b60      	cmp	r3, #96	; 0x60
 8007b6c:	d02e      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007b6e:	2b60      	cmp	r3, #96	; 0x60
 8007b70:	d823      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007b72:	2b40      	cmp	r3, #64	; 0x40
 8007b74:	d006      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d81f      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d011      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007b82:	e01a      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b84:	4b10      	ldr	r3, [pc, #64]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b88:	4a0f      	ldr	r2, [pc, #60]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b8e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007b90:	e01d      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b96:	3308      	adds	r3, #8
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f002 f981 	bl	8009ea0 <RCCEx_PLL2_Config>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007ba4:	e013      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007baa:	332c      	adds	r3, #44	; 0x2c
 8007bac:	4618      	mov	r0, r3
 8007bae:	f002 fa0f 	bl	8009fd0 <RCCEx_PLL3_Config>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007bb8:	e009      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007bc0:	e005      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8007bc2:	bf00      	nop
 8007bc4:	e003      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007bc6:	bf00      	nop
 8007bc8:	46020c00 	.word	0x46020c00
        break;
 8007bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bce:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10d      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007bd6:	4bb6      	ldr	r3, [pc, #728]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007bd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007bdc:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8007be0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be8:	4ab1      	ldr	r2, [pc, #708]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007bea:	430b      	orrs	r3, r1
 8007bec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007bf0:	e003      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007bf6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007c06:	673b      	str	r3, [r7, #112]	; 0x70
 8007c08:	2300      	movs	r3, #0
 8007c0a:	677b      	str	r3, [r7, #116]	; 0x74
 8007c0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007c10:	460b      	mov	r3, r1
 8007c12:	4313      	orrs	r3, r2
 8007c14:	d053      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c22:	d033      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c28:	d82c      	bhi.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c2e:	d02f      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c34:	d826      	bhi.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c3a:	d008      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8007c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c40:	d820      	bhi.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8007c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4a:	d011      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007c4c:	e01a      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c4e:	4b98      	ldr	r3, [pc, #608]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c52:	4a97      	ldr	r2, [pc, #604]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c58:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007c5a:	e01a      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c60:	3308      	adds	r3, #8
 8007c62:	4618      	mov	r0, r3
 8007c64:	f002 f91c 	bl	8009ea0 <RCCEx_PLL2_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007c6e:	e010      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c74:	332c      	adds	r3, #44	; 0x2c
 8007c76:	4618      	mov	r0, r3
 8007c78:	f002 f9aa 	bl	8009fd0 <RCCEx_PLL3_Config>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007c82:	e006      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007c8a:	e002      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007c8c:	bf00      	nop
 8007c8e:	e000      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c92:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10d      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007c9a:	4b85      	ldr	r3, [pc, #532]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ca0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007ca4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cac:	4a80      	ldr	r2, [pc, #512]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007cae:	430b      	orrs	r3, r1
 8007cb0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007cb4:	e003      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007cba:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007cca:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ccc:	2300      	movs	r3, #0
 8007cce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cd0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	d046      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ce2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007ce6:	d028      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007ce8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007cec:	d821      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cf2:	d022      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cf8:	d81b      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007cfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cfe:	d01c      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d04:	d815      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d0a:	d008      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d10:	d80f      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d011      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d1a:	d00e      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007d1c:	e009      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d22:	3308      	adds	r3, #8
 8007d24:	4618      	mov	r0, r3
 8007d26:	f002 f8bb 	bl	8009ea0 <RCCEx_PLL2_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007d30:	e004      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007d38:	e000      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8007d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10d      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007d44:	4b5a      	ldr	r3, [pc, #360]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007d46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d4a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d56:	4a56      	ldr	r2, [pc, #344]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007d5e:	e003      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d60:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007d64:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007d68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007d74:	663b      	str	r3, [r7, #96]	; 0x60
 8007d76:	2300      	movs	r3, #0
 8007d78:	667b      	str	r3, [r7, #100]	; 0x64
 8007d7a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4313      	orrs	r3, r2
 8007d82:	d03f      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007d84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d81e      	bhi.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x562>
 8007d90:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8007d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d96:	bf00      	nop
 8007d98:	08007dd7 	.word	0x08007dd7
 8007d9c:	08007dad 	.word	0x08007dad
 8007da0:	08007dbb 	.word	0x08007dbb
 8007da4:	08007dd7 	.word	0x08007dd7
 8007da8:	08007dd7 	.word	0x08007dd7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007dac:	4b40      	ldr	r3, [pc, #256]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db0:	4a3f      	ldr	r2, [pc, #252]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007db6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007db8:	e00e      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dbe:	332c      	adds	r3, #44	; 0x2c
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f002 f905 	bl	8009fd0 <RCCEx_PLL3_Config>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007dcc:	e004      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007dd4:	e000      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8007dd6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007dd8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10d      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007de0:	4b33      	ldr	r3, [pc, #204]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007de2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007de6:	f023 0107 	bic.w	r1, r3, #7
 8007dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df2:	4a2f      	ldr	r2, [pc, #188]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007df4:	430b      	orrs	r3, r1
 8007df6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007dfa:	e003      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007e00:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e12:	2300      	movs	r3, #0
 8007e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	d04d      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e2c:	d028      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007e2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e32:	d821      	bhi.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007e34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e38:	d024      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007e3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e3e:	d81b      	bhi.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e44:	d00e      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8007e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e4a:	d815      	bhi.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01b      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8007e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e54:	d110      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e56:	4b16      	ldr	r3, [pc, #88]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5a:	4a15      	ldr	r2, [pc, #84]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e60:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007e62:	e012      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e68:	332c      	adds	r3, #44	; 0x2c
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f002 f8b0 	bl	8009fd0 <RCCEx_PLL3_Config>
 8007e70:	4603      	mov	r3, r0
 8007e72:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007e76:	e008      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007e7e:	e004      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007e80:	bf00      	nop
 8007e82:	e002      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007e84:	bf00      	nop
 8007e86:	e000      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007e88:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007e8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d110      	bne.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007e92:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e98:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ea4:	4a02      	ldr	r2, [pc, #8]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ea6:	430b      	orrs	r3, r1
 8007ea8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007eac:	e006      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007eae:	bf00      	nop
 8007eb0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007eb8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec4:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8007eca:	2300      	movs	r3, #0
 8007ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8007ece:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	f000 80b5 	beq.w	8008044 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eda:	2300      	movs	r3, #0
 8007edc:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ee0:	4b9d      	ldr	r3, [pc, #628]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ee6:	f003 0304 	and.w	r3, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d113      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eee:	4b9a      	ldr	r3, [pc, #616]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ef4:	4a98      	ldr	r2, [pc, #608]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ef6:	f043 0304 	orr.w	r3, r3, #4
 8007efa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007efe:	4b96      	ldr	r3, [pc, #600]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007f16:	4b91      	ldr	r3, [pc, #580]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1a:	4a90      	ldr	r2, [pc, #576]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007f1c:	f043 0301 	orr.w	r3, r3, #1
 8007f20:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f22:	f7fd fbb5 	bl	8005690 <HAL_GetTick>
 8007f26:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007f2a:	e00b      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f2c:	f7fd fbb0 	bl	8005690 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d903      	bls.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007f42:	e005      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007f44:	4b85      	ldr	r3, [pc, #532]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d0ed      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8007f50:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d165      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f58:	4b7f      	ldr	r3, [pc, #508]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d023      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8007f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d01b      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f7e:	4b76      	ldr	r3, [pc, #472]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f8c:	4b72      	ldr	r3, [pc, #456]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f92:	4a71      	ldr	r2, [pc, #452]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f9c:	4b6e      	ldr	r3, [pc, #440]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fa2:	4a6d      	ldr	r2, [pc, #436]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fa8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007fac:	4a6a      	ldr	r2, [pc, #424]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d019      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc2:	f7fd fb65 	bl	8005690 <HAL_GetTick>
 8007fc6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fca:	e00d      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fcc:	f7fd fb60 	bl	8005690 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fd6:	1ad2      	subs	r2, r2, r3
 8007fd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d903      	bls.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8007fe6:	e006      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fe8:	4b5b      	ldr	r3, [pc, #364]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0ea      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8007ff6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10d      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007ffe:	4b56      	ldr	r3, [pc, #344]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008004:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008008:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800800c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008010:	4a51      	ldr	r2, [pc, #324]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008012:	430b      	orrs	r3, r1
 8008014:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008018:	e008      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800801a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800801e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8008022:	e003      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008024:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008028:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800802c:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8008030:	2b01      	cmp	r3, #1
 8008032:	d107      	bne.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008034:	4b48      	ldr	r3, [pc, #288]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800803a:	4a47      	ldr	r2, [pc, #284]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800803c:	f023 0304 	bic.w	r3, r3, #4
 8008040:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008044:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008050:	64bb      	str	r3, [r7, #72]	; 0x48
 8008052:	2300      	movs	r3, #0
 8008054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008056:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800805a:	460b      	mov	r3, r1
 800805c:	4313      	orrs	r3, r2
 800805e:	d042      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008060:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008064:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008068:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800806c:	d022      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800806e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008072:	d81b      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x840>
 8008074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008078:	d011      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800807a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800807e:	d815      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x840>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d019      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8008084:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008088:	d110      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800808a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800808e:	3308      	adds	r3, #8
 8008090:	4618      	mov	r0, r3
 8008092:	f001 ff05 	bl	8009ea0 <RCCEx_PLL2_Config>
 8008096:	4603      	mov	r3, r0
 8008098:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800809c:	e00d      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800809e:	4b2e      	ldr	r3, [pc, #184]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a2:	4a2d      	ldr	r2, [pc, #180]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080a8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80080aa:	e006      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80080b2:	e002      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80080b4:	bf00      	nop
 80080b6:	e000      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80080b8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80080ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10d      	bne.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80080c2:	4b25      	ldr	r3, [pc, #148]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080c8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80080cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080d4:	4a20      	ldr	r2, [pc, #128]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080d6:	430b      	orrs	r3, r1
 80080d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080dc:	e003      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080de:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80080e2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80080f2:	643b      	str	r3, [r7, #64]	; 0x40
 80080f4:	2300      	movs	r3, #0
 80080f6:	647b      	str	r3, [r7, #68]	; 0x44
 80080f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80080fc:	460b      	mov	r3, r1
 80080fe:	4313      	orrs	r3, r2
 8008100:	d032      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008106:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800810a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800810e:	d00b      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008114:	d804      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8008116:	2b00      	cmp	r3, #0
 8008118:	d008      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800811a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811e:	d007      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008126:	e004      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8008128:	bf00      	nop
 800812a:	e002      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800812c:	bf00      	nop
 800812e:	e000      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8008130:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008132:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d112      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800813a:	4b07      	ldr	r3, [pc, #28]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800813c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008140:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008144:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800814c:	4a02      	ldr	r2, [pc, #8]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800814e:	430b      	orrs	r3, r1
 8008150:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008154:	e008      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8008156:	bf00      	nop
 8008158:	46020c00 	.word	0x46020c00
 800815c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008160:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008164:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8008168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008174:	63bb      	str	r3, [r7, #56]	; 0x38
 8008176:	2300      	movs	r3, #0
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800817a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800817e:	460b      	mov	r3, r1
 8008180:	4313      	orrs	r3, r2
 8008182:	d00c      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8008184:	4b98      	ldr	r3, [pc, #608]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008186:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800818a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800818e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008196:	4a94      	ldr	r2, [pc, #592]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008198:	430b      	orrs	r3, r1
 800819a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800819e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80081aa:	633b      	str	r3, [r7, #48]	; 0x30
 80081ac:	2300      	movs	r3, #0
 80081ae:	637b      	str	r3, [r7, #52]	; 0x34
 80081b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80081b4:	460b      	mov	r3, r1
 80081b6:	4313      	orrs	r3, r2
 80081b8:	d019      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80081ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081c6:	d105      	bne.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081c8:	4b87      	ldr	r3, [pc, #540]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081cc:	4a86      	ldr	r2, [pc, #536]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d2:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80081d4:	4b84      	ldr	r3, [pc, #528]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80081da:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80081de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081e6:	4a80      	ldr	r2, [pc, #512]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081e8:	430b      	orrs	r3, r1
 80081ea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80081ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80081fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80081fc:	2300      	movs	r3, #0
 80081fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008200:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008204:	460b      	mov	r3, r1
 8008206:	4313      	orrs	r3, r2
 8008208:	d00c      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800820a:	4b77      	ldr	r3, [pc, #476]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800820c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008214:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008218:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800821c:	4972      	ldr	r1, [pc, #456]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800821e:	4313      	orrs	r3, r2
 8008220:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008224:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008230:	623b      	str	r3, [r7, #32]
 8008232:	2300      	movs	r3, #0
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
 8008236:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800823a:	460b      	mov	r3, r1
 800823c:	4313      	orrs	r3, r2
 800823e:	d00c      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008240:	4b69      	ldr	r3, [pc, #420]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008246:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800824a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800824e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008252:	4965      	ldr	r1, [pc, #404]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008254:	4313      	orrs	r3, r2
 8008256:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800825a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008266:	61bb      	str	r3, [r7, #24]
 8008268:	2300      	movs	r3, #0
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008270:	460b      	mov	r3, r1
 8008272:	4313      	orrs	r3, r2
 8008274:	d00c      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008276:	4b5c      	ldr	r3, [pc, #368]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800827c:	f023 0218 	bic.w	r2, r3, #24
 8008280:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008284:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008288:	4957      	ldr	r1, [pc, #348]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800828a:	4313      	orrs	r3, r2
 800828c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800829c:	613b      	str	r3, [r7, #16]
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]
 80082a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80082a6:	460b      	mov	r3, r1
 80082a8:	4313      	orrs	r3, r2
 80082aa:	d032      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80082ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082b8:	d105      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082ba:	4b4b      	ldr	r3, [pc, #300]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082be:	4a4a      	ldr	r2, [pc, #296]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082c4:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80082c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082d2:	d108      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80082d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082d8:	3308      	adds	r3, #8
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 fde0 	bl	8009ea0 <RCCEx_PLL2_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80082e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10d      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80082ee:	4b3e      	ldr	r3, [pc, #248]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80082f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008300:	4939      	ldr	r1, [pc, #228]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008302:	4313      	orrs	r3, r2
 8008304:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8008308:	e003      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800830e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800831e:	60bb      	str	r3, [r7, #8]
 8008320:	2300      	movs	r3, #0
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008328:	460b      	mov	r3, r1
 800832a:	4313      	orrs	r3, r2
 800832c:	d03a      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800832e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800833a:	d00e      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800833c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008340:	d815      	bhi.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d017      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008346:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800834a:	d110      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800834c:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	4a25      	ldr	r2, [pc, #148]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008356:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008358:	e00e      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800835a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800835e:	3308      	adds	r3, #8
 8008360:	4618      	mov	r0, r3
 8008362:	f001 fd9d 	bl	8009ea0 <RCCEx_PLL2_Config>
 8008366:	4603      	mov	r3, r0
 8008368:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800836c:	e004      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008374:	e000      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8008376:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008378:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10d      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008380:	4b19      	ldr	r3, [pc, #100]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008386:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800838a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800838e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008392:	4915      	ldr	r1, [pc, #84]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008394:	4313      	orrs	r3, r2
 8008396:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800839a:	e003      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80083a0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80083a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80083b0:	603b      	str	r3, [r7, #0]
 80083b2:	2300      	movs	r3, #0
 80083b4:	607b      	str	r3, [r7, #4]
 80083b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80083ba:	460b      	mov	r3, r1
 80083bc:	4313      	orrs	r3, r2
 80083be:	d00c      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80083c0:	4b09      	ldr	r3, [pc, #36]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80083c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083c6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80083ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083d2:	4905      	ldr	r1, [pc, #20]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80083da:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80083de:	4618      	mov	r0, r3
 80083e0:	37e8      	adds	r7, #232	; 0xe8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083e8:	46020c00 	.word	0x46020c00

080083ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b089      	sub	sp, #36	; 0x24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80083f4:	4bac      	ldr	r3, [pc, #688]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80083f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083fc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80083fe:	4baa      	ldr	r3, [pc, #680]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008408:	4ba7      	ldr	r3, [pc, #668]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	0a1b      	lsrs	r3, r3, #8
 800840e:	f003 030f 	and.w	r3, r3, #15
 8008412:	3301      	adds	r3, #1
 8008414:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8008416:	4ba4      	ldr	r3, [pc, #656]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008420:	4ba1      	ldr	r3, [pc, #644]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	08db      	lsrs	r3, r3, #3
 8008426:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	fb02 f303 	mul.w	r3, r2, r3
 8008430:	ee07 3a90 	vmov	s15, r3
 8008434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008438:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 8123 	beq.w	800868a <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2b03      	cmp	r3, #3
 8008448:	d062      	beq.n	8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2b03      	cmp	r3, #3
 800844e:	f200 8081 	bhi.w	8008554 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d024      	beq.n	80084a2 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d17a      	bne.n	8008554 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	ee07 3a90 	vmov	s15, r3
 8008464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008468:	eddf 6a90 	vldr	s13, [pc, #576]	; 80086ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800846c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008470:	4b8d      	ldr	r3, [pc, #564]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008478:	ee07 3a90 	vmov	s15, r3
 800847c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008480:	ed97 6a02 	vldr	s12, [r7, #8]
 8008484:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80086b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8008488:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800848c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008494:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084a0:	e08f      	b.n	80085c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80084a2:	4b81      	ldr	r3, [pc, #516]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 80084ae:	4b7e      	ldr	r3, [pc, #504]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	0f1b      	lsrs	r3, r3, #28
 80084b4:	f003 030f 	and.w	r3, r3, #15
 80084b8:	e006      	b.n	80084c8 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 80084ba:	4b7b      	ldr	r3, [pc, #492]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80084bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084c0:	041b      	lsls	r3, r3, #16
 80084c2:	0f1b      	lsrs	r3, r3, #28
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	4a7a      	ldr	r2, [pc, #488]	; (80086b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80084ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ce:	ee07 3a90 	vmov	s15, r3
 80084d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80084f2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80086b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80084f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008502:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800850a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800850e:	e058      	b.n	80085c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80086ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800851e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008522:	4b61      	ldr	r3, [pc, #388]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008532:	ed97 6a02 	vldr	s12, [r7, #8]
 8008536:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80086b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800853a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800853e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008546:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800854a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008552:	e036      	b.n	80085c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008554:	4b54      	ldr	r3, [pc, #336]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d005      	beq.n	800856c <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8008560:	4b51      	ldr	r3, [pc, #324]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	0f1b      	lsrs	r3, r3, #28
 8008566:	f003 030f 	and.w	r3, r3, #15
 800856a:	e006      	b.n	800857a <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800856c:	4b4e      	ldr	r3, [pc, #312]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800856e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008572:	041b      	lsls	r3, r3, #16
 8008574:	0f1b      	lsrs	r3, r3, #28
 8008576:	f003 030f 	and.w	r3, r3, #15
 800857a:	4a4e      	ldr	r2, [pc, #312]	; (80086b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800857c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80085a4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80086b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80085a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80085b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085c0:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80085c2:	4b39      	ldr	r3, [pc, #228]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d017      	beq.n	80085fe <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80085ce:	4b36      	ldr	r3, [pc, #216]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80085d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d2:	0a5b      	lsrs	r3, r3, #9
 80085d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80085e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085e4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80085e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085f4:	ee17 2a90 	vmov	r2, s15
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	e002      	b.n	8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008604:	4b28      	ldr	r3, [pc, #160]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d017      	beq.n	8008640 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008610:	4b25      	ldr	r3, [pc, #148]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008614:	0c1b      	lsrs	r3, r3, #16
 8008616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008626:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800862a:	edd7 6a07 	vldr	s13, [r7, #28]
 800862e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008636:	ee17 2a90 	vmov	r2, s15
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	605a      	str	r2, [r3, #4]
 800863e:	e002      	b.n	8008646 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008646:	4b18      	ldr	r3, [pc, #96]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d017      	beq.n	8008682 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008652:	4b15      	ldr	r3, [pc, #84]	; (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008656:	0e1b      	lsrs	r3, r3, #24
 8008658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008664:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008668:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800866c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008678:	ee17 2a90 	vmov	r2, s15
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008680:	e00c      	b.n	800869c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	609a      	str	r2, [r3, #8]
}
 8008688:	e008      	b.n	800869c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	609a      	str	r2, [r3, #8]
}
 800869c:	bf00      	nop
 800869e:	3724      	adds	r7, #36	; 0x24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	46020c00 	.word	0x46020c00
 80086ac:	4b742400 	.word	0x4b742400
 80086b0:	46000000 	.word	0x46000000
 80086b4:	080143a8 	.word	0x080143a8

080086b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b089      	sub	sp, #36	; 0x24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80086c0:	4bac      	ldr	r3, [pc, #688]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80086c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80086ca:	4baa      	ldr	r3, [pc, #680]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	f003 0303 	and.w	r3, r3, #3
 80086d2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80086d4:	4ba7      	ldr	r3, [pc, #668]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	0a1b      	lsrs	r3, r3, #8
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	3301      	adds	r3, #1
 80086e0:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80086e2:	4ba4      	ldr	r3, [pc, #656]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e6:	f003 0310 	and.w	r3, r3, #16
 80086ea:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80086ec:	4ba1      	ldr	r3, [pc, #644]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80086ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f0:	08db      	lsrs	r3, r3, #3
 80086f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	fb02 f303 	mul.w	r3, r2, r3
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008704:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 8123 	beq.w	8008956 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2b03      	cmp	r3, #3
 8008714:	d062      	beq.n	80087dc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b03      	cmp	r3, #3
 800871a:	f200 8081 	bhi.w	8008820 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d024      	beq.n	800876e <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d17a      	bne.n	8008820 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	ee07 3a90 	vmov	s15, r3
 8008730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008734:	eddf 6a90 	vldr	s13, [pc, #576]	; 8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8008738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873c:	4b8d      	ldr	r3, [pc, #564]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800873e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800874c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008750:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008754:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008758:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800875c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008760:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008768:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800876c:	e08f      	b.n	800888e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800876e:	4b81      	ldr	r3, [pc, #516]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d005      	beq.n	8008786 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800877a:	4b7e      	ldr	r3, [pc, #504]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	0f1b      	lsrs	r3, r3, #28
 8008780:	f003 030f 	and.w	r3, r3, #15
 8008784:	e006      	b.n	8008794 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8008786:	4b7b      	ldr	r3, [pc, #492]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008788:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800878c:	041b      	lsls	r3, r3, #16
 800878e:	0f1b      	lsrs	r3, r3, #28
 8008790:	f003 030f 	and.w	r3, r3, #15
 8008794:	4a7a      	ldr	r2, [pc, #488]	; (8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800879a:	ee07 3a90 	vmov	s15, r3
 800879e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	ee07 3a90 	vmov	s15, r3
 80087a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80087be:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80087c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80087d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087da:	e058      	b.n	800888e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80087ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ee:	4b61      	ldr	r3, [pc, #388]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80087f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80087fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008802:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008806:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800880a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800880e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008812:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800881e:	e036      	b.n	800888e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008820:	4b54      	ldr	r3, [pc, #336]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d005      	beq.n	8008838 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800882c:	4b51      	ldr	r3, [pc, #324]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	0f1b      	lsrs	r3, r3, #28
 8008832:	f003 030f 	and.w	r3, r3, #15
 8008836:	e006      	b.n	8008846 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8008838:	4b4e      	ldr	r3, [pc, #312]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800883a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800883e:	041b      	lsls	r3, r3, #16
 8008840:	0f1b      	lsrs	r3, r3, #28
 8008842:	f003 030f 	and.w	r3, r3, #15
 8008846:	4a4e      	ldr	r2, [pc, #312]	; (8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884c:	ee07 3a90 	vmov	s15, r3
 8008850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	ee07 3a90 	vmov	s15, r3
 8008868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008870:	eddf 5a42 	vldr	s11, [pc, #264]	; 800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008880:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008888:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800888c:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800888e:	4b39      	ldr	r3, [pc, #228]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d017      	beq.n	80088ca <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800889a:	4b36      	ldr	r3, [pc, #216]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800889c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889e:	0a5b      	lsrs	r3, r3, #9
 80088a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a4:	ee07 3a90 	vmov	s15, r3
 80088a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80088ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088b0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80088b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088c0:	ee17 2a90 	vmov	r2, s15
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	e002      	b.n	80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80088d0:	4b28      	ldr	r3, [pc, #160]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d017      	beq.n	800890c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80088dc:	4b25      	ldr	r3, [pc, #148]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80088de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e0:	0c1b      	lsrs	r3, r3, #16
 80088e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80088ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088f2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80088f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008902:	ee17 2a90 	vmov	r2, s15
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	e002      	b.n	8008912 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008912:	4b18      	ldr	r3, [pc, #96]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d017      	beq.n	800894e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800891e:	4b15      	ldr	r3, [pc, #84]	; (8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008922:	0e1b      	lsrs	r3, r3, #24
 8008924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008928:	ee07 3a90 	vmov	s15, r3
 800892c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008934:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008938:	edd7 6a07 	vldr	s13, [r7, #28]
 800893c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008944:	ee17 2a90 	vmov	r2, s15
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800894c:	e00c      	b.n	8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	609a      	str	r2, [r3, #8]
}
 8008954:	e008      	b.n	8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	609a      	str	r2, [r3, #8]
}
 8008968:	bf00      	nop
 800896a:	3724      	adds	r7, #36	; 0x24
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	46020c00 	.word	0x46020c00
 8008978:	4b742400 	.word	0x4b742400
 800897c:	46000000 	.word	0x46000000
 8008980:	080143a8 	.word	0x080143a8

08008984 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008984:	b480      	push	{r7}
 8008986:	b089      	sub	sp, #36	; 0x24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800898c:	4bac      	ldr	r3, [pc, #688]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800898e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008994:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008996:	4baa      	ldr	r3, [pc, #680]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80089a0:	4ba7      	ldr	r3, [pc, #668]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	0a1b      	lsrs	r3, r3, #8
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	3301      	adds	r3, #1
 80089ac:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80089ae:	4ba4      	ldr	r3, [pc, #656]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80089b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b2:	f003 0310 	and.w	r3, r3, #16
 80089b6:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80089b8:	4ba1      	ldr	r3, [pc, #644]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80089ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089bc:	08db      	lsrs	r3, r3, #3
 80089be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	fb02 f303 	mul.w	r3, r2, r3
 80089c8:	ee07 3a90 	vmov	s15, r3
 80089cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f000 8123 	beq.w	8008c22 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d062      	beq.n	8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	f200 8081 	bhi.w	8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d024      	beq.n	8008a3a <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d17a      	bne.n	8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	ee07 3a90 	vmov	s15, r3
 80089fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a00:	eddf 6a90 	vldr	s13, [pc, #576]	; 8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8008a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a08:	4b8d      	ldr	r3, [pc, #564]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a10:	ee07 3a90 	vmov	s15, r3
 8008a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a18:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a1c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8008c48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a34:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8008a38:	e08f      	b.n	8008b5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008a3a:	4b81      	ldr	r3, [pc, #516]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d005      	beq.n	8008a52 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8008a46:	4b7e      	ldr	r3, [pc, #504]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	0f1b      	lsrs	r3, r3, #28
 8008a4c:	f003 030f 	and.w	r3, r3, #15
 8008a50:	e006      	b.n	8008a60 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8008a52:	4b7b      	ldr	r3, [pc, #492]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008a54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a58:	041b      	lsls	r3, r3, #16
 8008a5a:	0f1b      	lsrs	r3, r3, #28
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	4a7a      	ldr	r2, [pc, #488]	; (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	ee07 3a90 	vmov	s15, r3
 8008a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a8a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008c48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aa6:	e058      	b.n	8008b5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8008ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aba:	4b61      	ldr	r3, [pc, #388]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ace:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008c48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aea:	e036      	b.n	8008b5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008aec:	4b54      	ldr	r3, [pc, #336]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d005      	beq.n	8008b04 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8008af8:	4b51      	ldr	r3, [pc, #324]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	0f1b      	lsrs	r3, r3, #28
 8008afe:	f003 030f 	and.w	r3, r3, #15
 8008b02:	e006      	b.n	8008b12 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8008b04:	4b4e      	ldr	r3, [pc, #312]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b0a:	041b      	lsls	r3, r3, #16
 8008b0c:	0f1b      	lsrs	r3, r3, #28
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	4a4e      	ldr	r2, [pc, #312]	; (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b18:	ee07 3a90 	vmov	s15, r3
 8008b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	ee07 3a90 	vmov	s15, r3
 8008b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b38:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b3c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8008c48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b58:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008b5a:	4b39      	ldr	r3, [pc, #228]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d017      	beq.n	8008b96 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b66:	4b36      	ldr	r3, [pc, #216]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6a:	0a5b      	lsrs	r3, r3, #9
 8008b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b70:	ee07 3a90 	vmov	s15, r3
 8008b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b7c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b8c:	ee17 2a90 	vmov	r2, s15
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	e002      	b.n	8008b9c <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008b9c:	4b28      	ldr	r3, [pc, #160]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d017      	beq.n	8008bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008ba8:	4b25      	ldr	r3, [pc, #148]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bac:	0c1b      	lsrs	r3, r3, #16
 8008bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bce:	ee17 2a90 	vmov	r2, s15
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	605a      	str	r2, [r3, #4]
 8008bd6:	e002      	b.n	8008bde <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008bde:	4b18      	ldr	r3, [pc, #96]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d017      	beq.n	8008c1a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008bea:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bee:	0e1b      	lsrs	r3, r3, #24
 8008bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf4:	ee07 3a90 	vmov	s15, r3
 8008bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c00:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c10:	ee17 2a90 	vmov	r2, s15
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008c18:	e00c      	b.n	8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	609a      	str	r2, [r3, #8]
}
 8008c20:	e008      	b.n	8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	609a      	str	r2, [r3, #8]
}
 8008c34:	bf00      	nop
 8008c36:	3724      	adds	r7, #36	; 0x24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	46020c00 	.word	0x46020c00
 8008c44:	4b742400 	.word	0x4b742400
 8008c48:	46000000 	.word	0x46000000
 8008c4c:	080143a8 	.word	0x080143a8

08008c50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08e      	sub	sp, #56	; 0x38
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c5e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8008c62:	430b      	orrs	r3, r1
 8008c64:	d145      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008c66:	4ba7      	ldr	r3, [pc, #668]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c70:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008c72:	4ba4      	ldr	r3, [pc, #656]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d108      	bne.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c86:	d104      	bne.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c8e:	f001 b8fc 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008c92:	4b9c      	ldr	r3, [pc, #624]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ca0:	d114      	bne.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca8:	d110      	bne.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008caa:	4b96      	ldr	r3, [pc, #600]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cb8:	d103      	bne.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008cba:	23fa      	movs	r3, #250	; 0xfa
 8008cbc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008cbe:	f001 b8e4 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008cc2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008cc6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008cc8:	f001 b8df 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008ccc:	4b8d      	ldr	r3, [pc, #564]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cd8:	d107      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ce0:	d103      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008ce2:	4b89      	ldr	r3, [pc, #548]	; (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ce6:	f001 b8d0 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	637b      	str	r3, [r7, #52]	; 0x34
 8008cee:	f001 b8cc 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008cfa:	430b      	orrs	r3, r1
 8008cfc:	d151      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008cfe:	4b81      	ldr	r3, [pc, #516]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008d00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d04:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008d08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	2b80      	cmp	r3, #128	; 0x80
 8008d0e:	d035      	beq.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d12:	2b80      	cmp	r3, #128	; 0x80
 8008d14:	d841      	bhi.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	2b60      	cmp	r3, #96	; 0x60
 8008d1a:	d02a      	beq.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1e:	2b60      	cmp	r3, #96	; 0x60
 8008d20:	d83b      	bhi.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	2b40      	cmp	r3, #64	; 0x40
 8008d26:	d009      	beq.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	2b40      	cmp	r3, #64	; 0x40
 8008d2c:	d835      	bhi.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00c      	beq.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	d012      	beq.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008d3a:	e02e      	b.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff fb53 	bl	80083ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d4a:	f001 b89e 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d4e:	f107 0318 	add.w	r3, r7, #24
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7ff fcb0 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d5c:	f001 b895 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d60:	f107 030c 	add.w	r3, r7, #12
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff fe0d 	bl	8008984 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d6e:	f001 b88c 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008d72:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008d76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d78:	f001 b887 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d7c:	4b61      	ldr	r3, [pc, #388]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d88:	d103      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008d8a:	4b60      	ldr	r3, [pc, #384]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008d8c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008d8e:	f001 b87c 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d96:	f001 b878 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d9e:	f001 b874 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008daa:	430b      	orrs	r3, r1
 8008dac:	d158      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008dae:	4b55      	ldr	r3, [pc, #340]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008db0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008db4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008db8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc0:	d03b      	beq.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc8:	d846      	bhi.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dd0:	d02e      	beq.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dd8:	d83e      	bhi.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008de0:	d00b      	beq.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008de8:	d836      	bhi.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00d      	beq.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008df6:	d012      	beq.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008df8:	e02e      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff faf4 	bl	80083ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e08:	f001 b83f 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e0c:	f107 0318 	add.w	r3, r7, #24
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff fc51 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e1a:	f001 b836 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e1e:	f107 030c 	add.w	r3, r7, #12
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff fdae 	bl	8008984 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e2c:	f001 b82d 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008e30:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008e34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e36:	f001 b828 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e3a:	4b32      	ldr	r3, [pc, #200]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e46:	d103      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008e48:	4b30      	ldr	r3, [pc, #192]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008e4a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008e4c:	f001 b81d 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e54:	f001 b819 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e5c:	f001 b815 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e64:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008e68:	430b      	orrs	r3, r1
 8008e6a:	d126      	bne.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008e6c:	4b25      	ldr	r3, [pc, #148]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e76:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008e78:	4b22      	ldr	r3, [pc, #136]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e84:	d106      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d103      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8008e8c:	4b1f      	ldr	r3, [pc, #124]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e90:	f000 bffb 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008e94:	4b1b      	ldr	r3, [pc, #108]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea0:	d107      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ea8:	d103      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8008eaa:	4b19      	ldr	r3, [pc, #100]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008eac:	637b      	str	r3, [r7, #52]	; 0x34
 8008eae:	f000 bfec 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb6:	f000 bfe8 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ebe:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8008ec2:	430b      	orrs	r3, r1
 8008ec4:	d164      	bne.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ecc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008ed0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008ed8:	d03d      	beq.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008ee0:	d852      	bhi.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ee8:	d014      	beq.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ef0:	d84a      	bhi.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d01f      	beq.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008efe:	d012      	beq.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008f00:	e042      	b.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008f02:	bf00      	nop
 8008f04:	46020c00 	.word	0x46020c00
 8008f08:	0007a120 	.word	0x0007a120
 8008f0c:	00f42400 	.word	0x00f42400
 8008f10:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff fa67 	bl	80083ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f22:	f000 bfb2 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f26:	f107 0318 	add.w	r3, r7, #24
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7ff fbc4 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f34:	f000 bfa9 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008f38:	4bab      	ldr	r3, [pc, #684]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f44:	d103      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008f46:	4ba9      	ldr	r3, [pc, #676]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008f48:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f4a:	f000 bf9e 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f52:	f000 bf9a 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f56:	4ba4      	ldr	r3, [pc, #656]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d005      	beq.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008f62:	4ba1      	ldr	r3, [pc, #644]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	0e1b      	lsrs	r3, r3, #24
 8008f68:	f003 030f 	and.w	r3, r3, #15
 8008f6c:	e006      	b.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8008f6e:	4b9e      	ldr	r3, [pc, #632]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f74:	041b      	lsls	r3, r3, #16
 8008f76:	0e1b      	lsrs	r3, r3, #24
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	4a9c      	ldr	r2, [pc, #624]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f84:	f000 bf81 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f8c:	f000 bf7d 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f94:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	d175      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008f9c:	4b92      	ldr	r3, [pc, #584]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fa6:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d15b      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008fae:	4b8e      	ldr	r3, [pc, #568]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fb4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008fb8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008fc0:	d034      	beq.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008fc8:	d849      	bhi.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fd0:	d00b      	beq.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fd8:	d841      	bhi.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d016      	beq.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fe6:	d009      	beq.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008fe8:	e039      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff f9fc 	bl	80083ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008ff8:	f000 bf47 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ffc:	f107 0318 	add.w	r3, r7, #24
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff fb59 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800900a:	f000 bf3e 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800900e:	4b76      	ldr	r3, [pc, #472]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800901a:	d103      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800901c:	4b73      	ldr	r3, [pc, #460]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800901e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009020:	f000 bf33 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009028:	f000 bf2f 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800902c:	4b6e      	ldr	r3, [pc, #440]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d005      	beq.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8009038:	4b6b      	ldr	r3, [pc, #428]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	0e1b      	lsrs	r3, r3, #24
 800903e:	f003 030f 	and.w	r3, r3, #15
 8009042:	e006      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8009044:	4b68      	ldr	r3, [pc, #416]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800904a:	041b      	lsls	r3, r3, #16
 800904c:	0e1b      	lsrs	r3, r3, #24
 800904e:	f003 030f 	and.w	r3, r3, #15
 8009052:	4a67      	ldr	r2, [pc, #412]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009058:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800905a:	f000 bf16 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009062:	f000 bf12 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800906c:	d108      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800906e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff f9ba 	bl	80083ec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	637b      	str	r3, [r7, #52]	; 0x34
 800907c:	f000 bf05 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	637b      	str	r3, [r7, #52]	; 0x34
 8009084:	f000 bf01 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800908c:	1e51      	subs	r1, r2, #1
 800908e:	430b      	orrs	r3, r1
 8009090:	d136      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009092:	4b55      	ldr	r3, [pc, #340]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d104      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80090a4:	f7fe fb34 	bl	8007710 <HAL_RCC_GetPCLK2Freq>
 80090a8:	6378      	str	r0, [r7, #52]	; 0x34
 80090aa:	f000 beee 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d104      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090b4:	f7fe f9f6 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 80090b8:	6378      	str	r0, [r7, #52]	; 0x34
 80090ba:	f000 bee6 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80090be:	4b4a      	ldr	r3, [pc, #296]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ca:	d106      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d103      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 80090d2:	4b48      	ldr	r3, [pc, #288]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80090d4:	637b      	str	r3, [r7, #52]	; 0x34
 80090d6:	f000 bed8 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80090da:	4b43      	ldr	r3, [pc, #268]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80090dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d107      	bne.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80090e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d104      	bne.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 80090ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090f2:	637b      	str	r3, [r7, #52]	; 0x34
 80090f4:	f000 bec9 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80090f8:	2300      	movs	r3, #0
 80090fa:	637b      	str	r3, [r7, #52]	; 0x34
 80090fc:	f000 bec5 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8009100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009104:	1e91      	subs	r1, r2, #2
 8009106:	430b      	orrs	r3, r1
 8009108:	d136      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800910a:	4b37      	ldr	r3, [pc, #220]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800910c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009110:	f003 030c 	and.w	r3, r3, #12
 8009114:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009118:	2b00      	cmp	r3, #0
 800911a:	d104      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800911c:	f7fe fae4 	bl	80076e8 <HAL_RCC_GetPCLK1Freq>
 8009120:	6378      	str	r0, [r7, #52]	; 0x34
 8009122:	f000 beb2 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	2b04      	cmp	r3, #4
 800912a:	d104      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800912c:	f7fe f9ba 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 8009130:	6378      	str	r0, [r7, #52]	; 0x34
 8009132:	f000 beaa 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009136:	4b2c      	ldr	r3, [pc, #176]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800913e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009142:	d106      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	2b08      	cmp	r3, #8
 8009148:	d103      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800914a:	4b2a      	ldr	r3, [pc, #168]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800914c:	637b      	str	r3, [r7, #52]	; 0x34
 800914e:	f000 be9c 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009152:	4b25      	ldr	r3, [pc, #148]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009158:	f003 0302 	and.w	r3, r3, #2
 800915c:	2b02      	cmp	r3, #2
 800915e:	d107      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	2b0c      	cmp	r3, #12
 8009164:	d104      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8009166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800916a:	637b      	str	r3, [r7, #52]	; 0x34
 800916c:	f000 be8d 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	637b      	str	r3, [r7, #52]	; 0x34
 8009174:	f000 be89 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800917c:	1f11      	subs	r1, r2, #4
 800917e:	430b      	orrs	r3, r1
 8009180:	d13e      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009182:	4b19      	ldr	r3, [pc, #100]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009188:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800918c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	2b00      	cmp	r3, #0
 8009192:	d104      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009194:	f7fe faa8 	bl	80076e8 <HAL_RCC_GetPCLK1Freq>
 8009198:	6378      	str	r0, [r7, #52]	; 0x34
 800919a:	f000 be76 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	2b10      	cmp	r3, #16
 80091a2:	d104      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80091a4:	f7fe f97e 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 80091a8:	6378      	str	r0, [r7, #52]	; 0x34
 80091aa:	f000 be6e 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80091ae:	4b0e      	ldr	r3, [pc, #56]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ba:	d106      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80091bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091be:	2b20      	cmp	r3, #32
 80091c0:	d103      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80091c2:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80091c4:	637b      	str	r3, [r7, #52]	; 0x34
 80091c6:	f000 be60 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80091ca:	4b07      	ldr	r3, [pc, #28]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80091cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d10f      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	2b30      	cmp	r3, #48	; 0x30
 80091dc:	d10c      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 80091de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091e2:	637b      	str	r3, [r7, #52]	; 0x34
 80091e4:	f000 be51 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80091e8:	46020c00 	.word	0x46020c00
 80091ec:	02dc6c00 	.word	0x02dc6c00
 80091f0:	080143a8 	.word	0x080143a8
 80091f4:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	637b      	str	r3, [r7, #52]	; 0x34
 80091fc:	f000 be45 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009204:	f1a2 0108 	sub.w	r1, r2, #8
 8009208:	430b      	orrs	r3, r1
 800920a:	d136      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800920c:	4b9f      	ldr	r3, [pc, #636]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800920e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009212:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009216:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	2b00      	cmp	r3, #0
 800921c:	d104      	bne.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800921e:	f7fe fa63 	bl	80076e8 <HAL_RCC_GetPCLK1Freq>
 8009222:	6378      	str	r0, [r7, #52]	; 0x34
 8009224:	f000 be31 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	2b40      	cmp	r3, #64	; 0x40
 800922c:	d104      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800922e:	f7fe f939 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 8009232:	6378      	str	r0, [r7, #52]	; 0x34
 8009234:	f000 be29 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009238:	4b94      	ldr	r3, [pc, #592]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009244:	d106      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	2b80      	cmp	r3, #128	; 0x80
 800924a:	d103      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800924c:	4b90      	ldr	r3, [pc, #576]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800924e:	637b      	str	r3, [r7, #52]	; 0x34
 8009250:	f000 be1b 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009254:	4b8d      	ldr	r3, [pc, #564]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800925a:	f003 0302 	and.w	r3, r3, #2
 800925e:	2b02      	cmp	r3, #2
 8009260:	d107      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	2bc0      	cmp	r3, #192	; 0xc0
 8009266:	d104      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8009268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800926c:	637b      	str	r3, [r7, #52]	; 0x34
 800926e:	f000 be0c 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009272:	2300      	movs	r3, #0
 8009274:	637b      	str	r3, [r7, #52]	; 0x34
 8009276:	f000 be08 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800927a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800927e:	f1a2 0110 	sub.w	r1, r2, #16
 8009282:	430b      	orrs	r3, r1
 8009284:	d139      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009286:	4b81      	ldr	r3, [pc, #516]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800928c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009290:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	2b00      	cmp	r3, #0
 8009296:	d104      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009298:	f7fe fa26 	bl	80076e8 <HAL_RCC_GetPCLK1Freq>
 800929c:	6378      	str	r0, [r7, #52]	; 0x34
 800929e:	f000 bdf4 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092a8:	d104      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80092aa:	f7fe f8fb 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 80092ae:	6378      	str	r0, [r7, #52]	; 0x34
 80092b0:	f000 bdeb 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80092b4:	4b75      	ldr	r3, [pc, #468]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c0:	d107      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092c8:	d103      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 80092ca:	4b71      	ldr	r3, [pc, #452]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80092cc:	637b      	str	r3, [r7, #52]	; 0x34
 80092ce:	f000 bddc 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80092d2:	4b6e      	ldr	r3, [pc, #440]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80092d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d108      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092e6:	d104      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 80092e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ec:	637b      	str	r3, [r7, #52]	; 0x34
 80092ee:	f000 bdcc 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80092f2:	2300      	movs	r3, #0
 80092f4:	637b      	str	r3, [r7, #52]	; 0x34
 80092f6:	f000 bdc8 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80092fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092fe:	f1a2 0120 	sub.w	r1, r2, #32
 8009302:	430b      	orrs	r3, r1
 8009304:	d158      	bne.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009306:	4b61      	ldr	r3, [pc, #388]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800930c:	f003 0307 	and.w	r3, r3, #7
 8009310:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	2b00      	cmp	r3, #0
 8009316:	d104      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8009318:	f7fe fa0e 	bl	8007738 <HAL_RCC_GetPCLK3Freq>
 800931c:	6378      	str	r0, [r7, #52]	; 0x34
 800931e:	f000 bdb4 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	2b01      	cmp	r3, #1
 8009326:	d104      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009328:	f7fe f8bc 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 800932c:	6378      	str	r0, [r7, #52]	; 0x34
 800932e:	f000 bdac 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009332:	4b56      	ldr	r3, [pc, #344]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800933a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800933e:	d106      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8009340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009342:	2b02      	cmp	r3, #2
 8009344:	d103      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8009346:	4b52      	ldr	r3, [pc, #328]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009348:	637b      	str	r3, [r7, #52]	; 0x34
 800934a:	f000 bd9e 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800934e:	4b4f      	ldr	r3, [pc, #316]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009354:	f003 0302 	and.w	r3, r3, #2
 8009358:	2b02      	cmp	r3, #2
 800935a:	d107      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	2b03      	cmp	r3, #3
 8009360:	d104      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8009362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009366:	637b      	str	r3, [r7, #52]	; 0x34
 8009368:	f000 bd8f 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800936c:	4b47      	ldr	r3, [pc, #284]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0320 	and.w	r3, r3, #32
 8009374:	2b20      	cmp	r3, #32
 8009376:	d11b      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8009378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937a:	2b04      	cmp	r3, #4
 800937c:	d118      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800937e:	4b43      	ldr	r3, [pc, #268]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d005      	beq.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800938a:	4b40      	ldr	r3, [pc, #256]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	0e1b      	lsrs	r3, r3, #24
 8009390:	f003 030f 	and.w	r3, r3, #15
 8009394:	e006      	b.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8009396:	4b3d      	ldr	r3, [pc, #244]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800939c:	041b      	lsls	r3, r3, #16
 800939e:	0e1b      	lsrs	r3, r3, #24
 80093a0:	f003 030f 	and.w	r3, r3, #15
 80093a4:	4a3b      	ldr	r2, [pc, #236]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80093a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093aa:	637b      	str	r3, [r7, #52]	; 0x34
 80093ac:	f000 bd6d 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	637b      	str	r3, [r7, #52]	; 0x34
 80093b4:	f000 bd69 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80093b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093bc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80093c0:	430b      	orrs	r3, r1
 80093c2:	d169      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80093c4:	4b31      	ldr	r3, [pc, #196]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80093c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80093ca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80093ce:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d6:	d104      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80093d8:	f7fe f864 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 80093dc:	6378      	str	r0, [r7, #52]	; 0x34
 80093de:	f000 bd54 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093e8:	d108      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093ea:	f107 0318 	add.w	r3, r7, #24
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff f962 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	637b      	str	r3, [r7, #52]	; 0x34
 80093f8:	f000 bd47 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80093fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d104      	bne.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8009402:	f7fe f957 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
 8009406:	6378      	str	r0, [r7, #52]	; 0x34
 8009408:	f000 bd3f 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009412:	d118      	bne.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8009414:	4b1d      	ldr	r3, [pc, #116]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d005      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8009420:	4b1a      	ldr	r3, [pc, #104]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	0f1b      	lsrs	r3, r3, #28
 8009426:	f003 030f 	and.w	r3, r3, #15
 800942a:	e006      	b.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800942c:	4b17      	ldr	r3, [pc, #92]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800942e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009432:	041b      	lsls	r3, r3, #16
 8009434:	0f1b      	lsrs	r3, r3, #28
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	4a16      	ldr	r2, [pc, #88]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800943c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009440:	637b      	str	r3, [r7, #52]	; 0x34
 8009442:	f000 bd22 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009446:	4b11      	ldr	r3, [pc, #68]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800944e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009452:	d107      	bne.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800945a:	d103      	bne.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800945c:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800945e:	637b      	str	r3, [r7, #52]	; 0x34
 8009460:	f000 bd13 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009464:	4b09      	ldr	r3, [pc, #36]	; (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800946c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009470:	d107      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009478:	d103      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800947a:	4b05      	ldr	r3, [pc, #20]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800947c:	637b      	str	r3, [r7, #52]	; 0x34
 800947e:	f000 bd04 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	637b      	str	r3, [r7, #52]	; 0x34
 8009486:	f000 bd00 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800948a:	bf00      	nop
 800948c:	46020c00 	.word	0x46020c00
 8009490:	00f42400 	.word	0x00f42400
 8009494:	080143a8 	.word	0x080143a8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800949c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80094a0:	430b      	orrs	r3, r1
 80094a2:	d14e      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80094a4:	4ba8      	ldr	r3, [pc, #672]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80094a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	d841      	bhi.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80094b6:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	080094f5 	.word	0x080094f5
 80094c0:	080094d1 	.word	0x080094d1
 80094c4:	080094e3 	.word	0x080094e3
 80094c8:	080094ff 	.word	0x080094ff
 80094cc:	08009509 	.word	0x08009509
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe ff89 	bl	80083ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80094da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094de:	f000 bcd4 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094e2:	f107 030c 	add.w	r3, r7, #12
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff fa4c 	bl	8008984 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094f0:	f000 bccb 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80094f4:	f7fe f8de 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
 80094f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80094fa:	f000 bcc6 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80094fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009502:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009504:	f000 bcc1 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009508:	4b8f      	ldr	r3, [pc, #572]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d005      	beq.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8009514:	4b8c      	ldr	r3, [pc, #560]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	0e1b      	lsrs	r3, r3, #24
 800951a:	f003 030f 	and.w	r3, r3, #15
 800951e:	e006      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009520:	4b89      	ldr	r3, [pc, #548]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009526:	041b      	lsls	r3, r3, #16
 8009528:	0e1b      	lsrs	r3, r3, #24
 800952a:	f003 030f 	and.w	r3, r3, #15
 800952e:	4a87      	ldr	r2, [pc, #540]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009536:	f000 bca8 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800953e:	f000 bca4 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009546:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800954a:	430b      	orrs	r3, r1
 800954c:	d15d      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800954e:	4b7e      	ldr	r3, [pc, #504]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009554:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009558:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009560:	d036      	beq.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009568:	d84b      	bhi.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009570:	d029      	beq.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009578:	d843      	bhi.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800957a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009580:	d013      	beq.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009588:	d83b      	bhi.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	2b00      	cmp	r3, #0
 800958e:	d015      	beq.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8009590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009596:	d134      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe ff25 	bl	80083ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095a6:	f000 bc70 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095aa:	f107 030c 	add.w	r3, r7, #12
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7ff f9e8 	bl	8008984 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095b8:	f000 bc67 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80095bc:	f7fe f87a 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
 80095c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80095c2:	f000 bc62 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80095c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80095ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095cc:	f000 bc5d 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80095d0:	4b5d      	ldr	r3, [pc, #372]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d005      	beq.n	80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80095dc:	4b5a      	ldr	r3, [pc, #360]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	0e1b      	lsrs	r3, r3, #24
 80095e2:	f003 030f 	and.w	r3, r3, #15
 80095e6:	e006      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80095e8:	4b57      	ldr	r3, [pc, #348]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095ee:	041b      	lsls	r3, r3, #16
 80095f0:	0e1b      	lsrs	r3, r3, #24
 80095f2:	f003 030f 	and.w	r3, r3, #15
 80095f6:	4a55      	ldr	r2, [pc, #340]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80095f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095fe:	f000 bc44 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009602:	2300      	movs	r3, #0
 8009604:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009606:	f000 bc40 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800960a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800960e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8009612:	430b      	orrs	r3, r1
 8009614:	d14a      	bne.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009616:	4b4c      	ldr	r3, [pc, #304]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800961c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009620:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009624:	2b00      	cmp	r3, #0
 8009626:	d104      	bne.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009628:	f7fe f85e 	bl	80076e8 <HAL_RCC_GetPCLK1Freq>
 800962c:	6378      	str	r0, [r7, #52]	; 0x34
 800962e:	f000 bc2c 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009638:	d104      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800963a:	f7fd ff33 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 800963e:	6378      	str	r0, [r7, #52]	; 0x34
 8009640:	f000 bc23 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009644:	4b40      	ldr	r3, [pc, #256]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800964c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009650:	d107      	bne.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009658:	d103      	bne.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800965a:	4b3d      	ldr	r3, [pc, #244]	; (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800965c:	637b      	str	r3, [r7, #52]	; 0x34
 800965e:	f000 bc14 	b.w	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009662:	4b39      	ldr	r3, [pc, #228]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 0320 	and.w	r3, r3, #32
 800966a:	2b20      	cmp	r3, #32
 800966c:	d11b      	bne.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009670:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009674:	d117      	bne.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009676:	4b34      	ldr	r3, [pc, #208]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d005      	beq.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8009682:	4b31      	ldr	r3, [pc, #196]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	0e1b      	lsrs	r3, r3, #24
 8009688:	f003 030f 	and.w	r3, r3, #15
 800968c:	e006      	b.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800968e:	4b2e      	ldr	r3, [pc, #184]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009694:	041b      	lsls	r3, r3, #16
 8009696:	0e1b      	lsrs	r3, r3, #24
 8009698:	f003 030f 	and.w	r3, r3, #15
 800969c:	4a2b      	ldr	r2, [pc, #172]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800969e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096a2:	637b      	str	r3, [r7, #52]	; 0x34
 80096a4:	e3f1      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80096a6:	2300      	movs	r3, #0
 80096a8:	637b      	str	r3, [r7, #52]	; 0x34
 80096aa:	e3ee      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80096ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096b0:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80096b4:	430b      	orrs	r3, r1
 80096b6:	d14d      	bne.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80096b8:	4b23      	ldr	r3, [pc, #140]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80096ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80096c2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80096c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80096ca:	f7fe f80d 	bl	80076e8 <HAL_RCC_GetPCLK1Freq>
 80096ce:	6378      	str	r0, [r7, #52]	; 0x34
 80096d0:	e3db      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80096d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d8:	d103      	bne.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80096da:	f7fd fee3 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 80096de:	6378      	str	r0, [r7, #52]	; 0x34
 80096e0:	e3d3      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80096e2:	4b19      	ldr	r3, [pc, #100]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096ee:	d106      	bne.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80096f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096f6:	d102      	bne.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 80096f8:	4b15      	ldr	r3, [pc, #84]	; (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34
 80096fc:	e3c5      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80096fe:	4b12      	ldr	r3, [pc, #72]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0320 	and.w	r3, r3, #32
 8009706:	2b20      	cmp	r3, #32
 8009708:	d11b      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009710:	d117      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009712:	4b0d      	ldr	r3, [pc, #52]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d005      	beq.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800971e:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	0e1b      	lsrs	r3, r3, #24
 8009724:	f003 030f 	and.w	r3, r3, #15
 8009728:	e006      	b.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800972a:	4b07      	ldr	r3, [pc, #28]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800972c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009730:	041b      	lsls	r3, r3, #16
 8009732:	0e1b      	lsrs	r3, r3, #24
 8009734:	f003 030f 	and.w	r3, r3, #15
 8009738:	4a04      	ldr	r2, [pc, #16]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800973a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800973e:	637b      	str	r3, [r7, #52]	; 0x34
 8009740:	e3a3      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	637b      	str	r3, [r7, #52]	; 0x34
 8009746:	e3a0      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8009748:	46020c00 	.word	0x46020c00
 800974c:	080143a8 	.word	0x080143a8
 8009750:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009758:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800975c:	430b      	orrs	r3, r1
 800975e:	d148      	bne.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009760:	4b9d      	ldr	r3, [pc, #628]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009766:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800976a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976e:	2bc0      	cmp	r3, #192	; 0xc0
 8009770:	d024      	beq.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	2bc0      	cmp	r3, #192	; 0xc0
 8009776:	d839      	bhi.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8009778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977a:	2b80      	cmp	r3, #128	; 0x80
 800977c:	d00d      	beq.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800977e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009780:	2b80      	cmp	r3, #128	; 0x80
 8009782:	d833      	bhi.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	2b40      	cmp	r3, #64	; 0x40
 800978e:	d011      	beq.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009790:	e02c      	b.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009792:	f7fd ffd1 	bl	8007738 <HAL_RCC_GetPCLK3Freq>
 8009796:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009798:	e377      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800979a:	4b8f      	ldr	r3, [pc, #572]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097a6:	d102      	bne.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 80097a8:	4b8c      	ldr	r3, [pc, #560]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80097aa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80097ac:	e36d      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80097ae:	2300      	movs	r3, #0
 80097b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097b2:	e36a      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80097b4:	f7fd fe76 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 80097b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80097ba:	e366      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80097bc:	4b86      	ldr	r3, [pc, #536]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d005      	beq.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80097c8:	4b83      	ldr	r3, [pc, #524]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	0f1b      	lsrs	r3, r3, #28
 80097ce:	f003 030f 	and.w	r3, r3, #15
 80097d2:	e006      	b.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 80097d4:	4b80      	ldr	r3, [pc, #512]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80097d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80097da:	041b      	lsls	r3, r3, #16
 80097dc:	0f1b      	lsrs	r3, r3, #28
 80097de:	f003 030f 	and.w	r3, r3, #15
 80097e2:	4a7f      	ldr	r2, [pc, #508]	; (80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80097e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097ea:	e34e      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097f0:	e34b      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80097f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097f6:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80097fa:	430b      	orrs	r3, r1
 80097fc:	d147      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80097fe:	4b76      	ldr	r3, [pc, #472]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009808:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	2b00      	cmp	r3, #0
 800980e:	d103      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009810:	f7fd ff6a 	bl	80076e8 <HAL_RCC_GetPCLK1Freq>
 8009814:	6378      	str	r0, [r7, #52]	; 0x34
 8009816:	e338      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800981e:	d103      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009820:	f7fd fe40 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 8009824:	6378      	str	r0, [r7, #52]	; 0x34
 8009826:	e330      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009828:	4b6b      	ldr	r3, [pc, #428]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009834:	d106      	bne.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8009836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800983c:	d102      	bne.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800983e:	4b67      	ldr	r3, [pc, #412]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009840:	637b      	str	r3, [r7, #52]	; 0x34
 8009842:	e322      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009844:	4b64      	ldr	r3, [pc, #400]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0320 	and.w	r3, r3, #32
 800984c:	2b20      	cmp	r3, #32
 800984e:	d11b      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8009850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009852:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009856:	d117      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009858:	4b5f      	ldr	r3, [pc, #380]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8009864:	4b5c      	ldr	r3, [pc, #368]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	0e1b      	lsrs	r3, r3, #24
 800986a:	f003 030f 	and.w	r3, r3, #15
 800986e:	e006      	b.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8009870:	4b59      	ldr	r3, [pc, #356]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009872:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009876:	041b      	lsls	r3, r3, #16
 8009878:	0e1b      	lsrs	r3, r3, #24
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	4a58      	ldr	r2, [pc, #352]	; (80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8009880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009884:	637b      	str	r3, [r7, #52]	; 0x34
 8009886:	e300      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009888:	2300      	movs	r3, #0
 800988a:	637b      	str	r3, [r7, #52]	; 0x34
 800988c:	e2fd      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800988e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009892:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009896:	430b      	orrs	r3, r1
 8009898:	d15b      	bne.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800989a:	4b4f      	ldr	r3, [pc, #316]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800989c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098a4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d117      	bne.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80098ac:	4b4a      	ldr	r3, [pc, #296]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d005      	beq.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 80098b8:	4b47      	ldr	r3, [pc, #284]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	0e1b      	lsrs	r3, r3, #24
 80098be:	f003 030f 	and.w	r3, r3, #15
 80098c2:	e006      	b.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 80098c4:	4b44      	ldr	r3, [pc, #272]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80098c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80098ca:	041b      	lsls	r3, r3, #16
 80098cc:	0e1b      	lsrs	r3, r3, #24
 80098ce:	f003 030f 	and.w	r3, r3, #15
 80098d2:	4a43      	ldr	r2, [pc, #268]	; (80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80098d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098d8:	637b      	str	r3, [r7, #52]	; 0x34
 80098da:	e2d6      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80098dc:	4b3e      	ldr	r3, [pc, #248]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80098de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80098e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098ea:	d112      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f2:	d10e      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80098f4:	4b38      	ldr	r3, [pc, #224]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80098f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80098fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009902:	d102      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8009904:	23fa      	movs	r3, #250	; 0xfa
 8009906:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009908:	e2bf      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800990a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800990e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009910:	e2bb      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009912:	4b31      	ldr	r3, [pc, #196]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800991a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800991e:	d106      	bne.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009926:	d102      	bne.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8009928:	4b2c      	ldr	r3, [pc, #176]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800992a:	637b      	str	r3, [r7, #52]	; 0x34
 800992c:	e2ad      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800992e:	4b2a      	ldr	r3, [pc, #168]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b02      	cmp	r3, #2
 800993a:	d107      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009942:	d103      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8009944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009948:	637b      	str	r3, [r7, #52]	; 0x34
 800994a:	e29e      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	637b      	str	r3, [r7, #52]	; 0x34
 8009950:	e29b      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009956:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800995a:	430b      	orrs	r3, r1
 800995c:	d162      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800995e:	4b1e      	ldr	r3, [pc, #120]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009964:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009968:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	2b00      	cmp	r3, #0
 800996e:	d117      	bne.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009970:	4b19      	ldr	r3, [pc, #100]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d005      	beq.n	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800997c:	4b16      	ldr	r3, [pc, #88]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	0e1b      	lsrs	r3, r3, #24
 8009982:	f003 030f 	and.w	r3, r3, #15
 8009986:	e006      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8009988:	4b13      	ldr	r3, [pc, #76]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800998a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800998e:	041b      	lsls	r3, r3, #16
 8009990:	0e1b      	lsrs	r3, r3, #24
 8009992:	f003 030f 	and.w	r3, r3, #15
 8009996:	4a12      	ldr	r2, [pc, #72]	; (80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8009998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800999c:	637b      	str	r3, [r7, #52]	; 0x34
 800999e:	e274      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80099a0:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80099a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099ae:	d119      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80099b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099b6:	d115      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099b8:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80099ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099c6:	d102      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 80099c8:	23fa      	movs	r3, #250	; 0xfa
 80099ca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099cc:	e25d      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80099ce:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80099d2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099d4:	e259      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80099d6:	bf00      	nop
 80099d8:	46020c00 	.word	0x46020c00
 80099dc:	00f42400 	.word	0x00f42400
 80099e0:	080143a8 	.word	0x080143a8
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80099e4:	4b9d      	ldr	r3, [pc, #628]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099f0:	d106      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099f8:	d102      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 80099fa:	4b99      	ldr	r3, [pc, #612]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80099fc:	637b      	str	r3, [r7, #52]	; 0x34
 80099fe:	e244      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009a00:	4b96      	ldr	r3, [pc, #600]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d107      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a14:	d103      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8009a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a1c:	e235      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	637b      	str	r3, [r7, #52]	; 0x34
 8009a22:	e232      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a28:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009a2c:	430b      	orrs	r3, r1
 8009a2e:	d147      	bne.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009a30:	4b8a      	ldr	r3, [pc, #552]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a36:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009a3a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d103      	bne.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009a42:	f7fd fe51 	bl	80076e8 <HAL_RCC_GetPCLK1Freq>
 8009a46:	6378      	str	r0, [r7, #52]	; 0x34
 8009a48:	e21f      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009a4a:	4b84      	ldr	r3, [pc, #528]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a58:	d112      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a60:	d10e      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a62:	4b7e      	ldr	r3, [pc, #504]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a70:	d102      	bne.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8009a72:	23fa      	movs	r3, #250	; 0xfa
 8009a74:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a76:	e208      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8009a78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009a7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a7e:	e204      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009a80:	4b76      	ldr	r3, [pc, #472]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a8c:	d106      	bne.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a94:	d102      	bne.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8009a96:	4b72      	ldr	r3, [pc, #456]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8009a98:	637b      	str	r3, [r7, #52]	; 0x34
 8009a9a:	e1f6      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009a9c:	4b6f      	ldr	r3, [pc, #444]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d107      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009ab0:	d103      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8009ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab8:	e1e7      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	637b      	str	r3, [r7, #52]	; 0x34
 8009abe:	e1e4      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ac4:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8009ac8:	430b      	orrs	r3, r1
 8009aca:	d12d      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009acc:	4b63      	ldr	r3, [pc, #396]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ad2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8009ad6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009ad8:	4b60      	ldr	r3, [pc, #384]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ae4:	d105      	bne.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d102      	bne.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8009aec:	4b5c      	ldr	r3, [pc, #368]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8009aee:	637b      	str	r3, [r7, #52]	; 0x34
 8009af0:	e1cb      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009af8:	d107      	bne.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe fc74 	bl	80083ec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b06:	637b      	str	r3, [r7, #52]	; 0x34
 8009b08:	e1bf      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b10:	d107      	bne.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b12:	f107 0318 	add.w	r3, r7, #24
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe fdce 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b20:	e1b3      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	637b      	str	r3, [r7, #52]	; 0x34
 8009b26:	e1b0      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b2c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8009b30:	430b      	orrs	r3, r1
 8009b32:	d14d      	bne.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009b34:	4b49      	ldr	r3, [pc, #292]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009b3e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b46:	d028      	beq.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8009b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b4e:	d83c      	bhi.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8009b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b56:	d013      	beq.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b5e:	d834      	bhi.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8009b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d004      	beq.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b6c:	d004      	beq.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8009b6e:	e02c      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009b70:	f7fd fdce 	bl	8007710 <HAL_RCC_GetPCLK2Freq>
 8009b74:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009b76:	e188      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009b78:	f7fd fc94 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 8009b7c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009b7e:	e184      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b80:	4b36      	ldr	r3, [pc, #216]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b8c:	d102      	bne.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8009b8e:	4b34      	ldr	r3, [pc, #208]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8009b90:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b92:	e17a      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b98:	e177      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b9a:	4b30      	ldr	r3, [pc, #192]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d005      	beq.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8009ba6:	4b2d      	ldr	r3, [pc, #180]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	0e1b      	lsrs	r3, r3, #24
 8009bac:	f003 030f 	and.w	r3, r3, #15
 8009bb0:	e006      	b.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8009bb2:	4b2a      	ldr	r3, [pc, #168]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bb8:	041b      	lsls	r3, r3, #16
 8009bba:	0e1b      	lsrs	r3, r3, #24
 8009bbc:	f003 030f 	and.w	r3, r3, #15
 8009bc0:	4a28      	ldr	r2, [pc, #160]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8009bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bc8:	e15f      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bce:	e15c      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd4:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	d154      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009bdc:	4b1f      	ldr	r3, [pc, #124]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009be2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009be6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bee:	d028      	beq.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bf6:	d843      	bhi.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bfe:	d013      	beq.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c06:	d83b      	bhi.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8009c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d004      	beq.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c14:	d004      	beq.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8009c16:	e033      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009c18:	f7fd fd66 	bl	80076e8 <HAL_RCC_GetPCLK1Freq>
 8009c1c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009c1e:	e134      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009c20:	f7fd fc40 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 8009c24:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009c26:	e130      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c28:	4b0c      	ldr	r3, [pc, #48]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c34:	d102      	bne.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8009c36:	4b0a      	ldr	r3, [pc, #40]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8009c38:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c3a:	e126      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c40:	e123      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c42:	4b06      	ldr	r3, [pc, #24]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00c      	beq.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8009c4e:	4b03      	ldr	r3, [pc, #12]	; (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	0e1b      	lsrs	r3, r3, #24
 8009c54:	f003 030f 	and.w	r3, r3, #15
 8009c58:	e00d      	b.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8009c5a:	bf00      	nop
 8009c5c:	46020c00 	.word	0x46020c00
 8009c60:	00f42400 	.word	0x00f42400
 8009c64:	080143a8 	.word	0x080143a8
 8009c68:	4b8a      	ldr	r3, [pc, #552]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c6e:	041b      	lsls	r3, r3, #16
 8009c70:	0e1b      	lsrs	r3, r3, #24
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	4a88      	ldr	r2, [pc, #544]	; (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8009c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c7e:	e104      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c84:	e101      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c8a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8009c8e:	430b      	orrs	r3, r1
 8009c90:	d16e      	bne.n	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009c92:	4b80      	ldr	r3, [pc, #512]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c98:	f003 0318 	and.w	r3, r3, #24
 8009c9c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	2b18      	cmp	r3, #24
 8009ca2:	d862      	bhi.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8009ca4:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8009ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009caa:	bf00      	nop
 8009cac:	08009d11 	.word	0x08009d11
 8009cb0:	08009d6b 	.word	0x08009d6b
 8009cb4:	08009d6b 	.word	0x08009d6b
 8009cb8:	08009d6b 	.word	0x08009d6b
 8009cbc:	08009d6b 	.word	0x08009d6b
 8009cc0:	08009d6b 	.word	0x08009d6b
 8009cc4:	08009d6b 	.word	0x08009d6b
 8009cc8:	08009d6b 	.word	0x08009d6b
 8009ccc:	08009d19 	.word	0x08009d19
 8009cd0:	08009d6b 	.word	0x08009d6b
 8009cd4:	08009d6b 	.word	0x08009d6b
 8009cd8:	08009d6b 	.word	0x08009d6b
 8009cdc:	08009d6b 	.word	0x08009d6b
 8009ce0:	08009d6b 	.word	0x08009d6b
 8009ce4:	08009d6b 	.word	0x08009d6b
 8009ce8:	08009d6b 	.word	0x08009d6b
 8009cec:	08009d21 	.word	0x08009d21
 8009cf0:	08009d6b 	.word	0x08009d6b
 8009cf4:	08009d6b 	.word	0x08009d6b
 8009cf8:	08009d6b 	.word	0x08009d6b
 8009cfc:	08009d6b 	.word	0x08009d6b
 8009d00:	08009d6b 	.word	0x08009d6b
 8009d04:	08009d6b 	.word	0x08009d6b
 8009d08:	08009d6b 	.word	0x08009d6b
 8009d0c:	08009d3b 	.word	0x08009d3b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009d10:	f7fd fd12 	bl	8007738 <HAL_RCC_GetPCLK3Freq>
 8009d14:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009d16:	e0b8      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009d18:	f7fd fbc4 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 8009d1c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009d1e:	e0b4      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d20:	4b5c      	ldr	r3, [pc, #368]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d2c:	d102      	bne.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8009d2e:	4b5b      	ldr	r3, [pc, #364]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8009d30:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009d32:	e0aa      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d38:	e0a7      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d3a:	4b56      	ldr	r3, [pc, #344]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d005      	beq.n	8009d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8009d46:	4b53      	ldr	r3, [pc, #332]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	0e1b      	lsrs	r3, r3, #24
 8009d4c:	f003 030f 	and.w	r3, r3, #15
 8009d50:	e006      	b.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8009d52:	4b50      	ldr	r3, [pc, #320]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d58:	041b      	lsls	r3, r3, #16
 8009d5a:	0e1b      	lsrs	r3, r3, #24
 8009d5c:	f003 030f 	and.w	r3, r3, #15
 8009d60:	4a4d      	ldr	r2, [pc, #308]	; (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8009d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d68:	e08f      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d6e:	e08c      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d74:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8009d78:	430b      	orrs	r3, r1
 8009d7a:	d14c      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009d7c:	4b45      	ldr	r3, [pc, #276]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009d7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009d82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009d86:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d8e:	d013      	beq.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d96:	d83b      	bhi.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8009d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d9e:	d013      	beq.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009da6:	d833      	bhi.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8009da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d014      	beq.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009db4:	d014      	beq.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8009db6:	e02b      	b.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009db8:	f107 0318 	add.w	r3, r7, #24
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fe fc7b 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009dc6:	e060      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fe fb0d 	bl	80083ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009dd6:	e058      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009dd8:	f7fd fb64 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 8009ddc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009dde:	e054      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009de0:	4b2c      	ldr	r3, [pc, #176]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d005      	beq.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8009dec:	4b29      	ldr	r3, [pc, #164]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	0e1b      	lsrs	r3, r3, #24
 8009df2:	f003 030f 	and.w	r3, r3, #15
 8009df6:	e006      	b.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8009df8:	4b26      	ldr	r3, [pc, #152]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009dfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009dfe:	041b      	lsls	r3, r3, #16
 8009e00:	0e1b      	lsrs	r3, r3, #24
 8009e02:	f003 030f 	and.w	r3, r3, #15
 8009e06:	4a24      	ldr	r2, [pc, #144]	; (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8009e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e0e:	e03c      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e14:	e039      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e1a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	d131      	bne.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009e22:	4b1c      	ldr	r3, [pc, #112]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e2c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009e2e:	4b19      	ldr	r3, [pc, #100]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e34:	f003 0302 	and.w	r3, r3, #2
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d106      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d103      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8009e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e46:	637b      	str	r3, [r7, #52]	; 0x34
 8009e48:	e01f      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009e4a:	4b12      	ldr	r3, [pc, #72]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e58:	d112      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e60:	d10e      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e62:	4b0c      	ldr	r3, [pc, #48]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e70:	d102      	bne.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8009e72:	23fa      	movs	r3, #250	; 0xfa
 8009e74:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e76:	e008      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8009e78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009e7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e7e:	e004      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	637b      	str	r3, [r7, #52]	; 0x34
 8009e84:	e001      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8009e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3738      	adds	r7, #56	; 0x38
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	46020c00 	.word	0x46020c00
 8009e98:	080143a8 	.word	0x080143a8
 8009e9c:	00f42400 	.word	0x00f42400

08009ea0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009ea8:	4b47      	ldr	r3, [pc, #284]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a46      	ldr	r2, [pc, #280]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009eae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009eb2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009eb4:	f7fb fbec 	bl	8005690 <HAL_GetTick>
 8009eb8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009eba:	e008      	b.n	8009ece <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ebc:	f7fb fbe8 	bl	8005690 <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d901      	bls.n	8009ece <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e077      	b.n	8009fbe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ece:	4b3e      	ldr	r3, [pc, #248]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1f0      	bne.n	8009ebc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009eda:	4b3b      	ldr	r3, [pc, #236]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ede:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009ee2:	f023 0303 	bic.w	r3, r3, #3
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	6811      	ldr	r1, [r2, #0]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	6852      	ldr	r2, [r2, #4]
 8009eee:	3a01      	subs	r2, #1
 8009ef0:	0212      	lsls	r2, r2, #8
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	4934      	ldr	r1, [pc, #208]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009efa:	4b33      	ldr	r3, [pc, #204]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009efc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009efe:	4b33      	ldr	r3, [pc, #204]	; (8009fcc <RCCEx_PLL2_Config+0x12c>)
 8009f00:	4013      	ands	r3, r2
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	6892      	ldr	r2, [r2, #8]
 8009f06:	3a01      	subs	r2, #1
 8009f08:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	68d2      	ldr	r2, [r2, #12]
 8009f10:	3a01      	subs	r2, #1
 8009f12:	0252      	lsls	r2, r2, #9
 8009f14:	b292      	uxth	r2, r2
 8009f16:	4311      	orrs	r1, r2
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	6912      	ldr	r2, [r2, #16]
 8009f1c:	3a01      	subs	r2, #1
 8009f1e:	0412      	lsls	r2, r2, #16
 8009f20:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009f24:	4311      	orrs	r1, r2
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6952      	ldr	r2, [r2, #20]
 8009f2a:	3a01      	subs	r2, #1
 8009f2c:	0612      	lsls	r2, r2, #24
 8009f2e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009f32:	430a      	orrs	r2, r1
 8009f34:	4924      	ldr	r1, [pc, #144]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f36:	4313      	orrs	r3, r2
 8009f38:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009f3a:	4b23      	ldr	r3, [pc, #140]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	f023 020c 	bic.w	r2, r3, #12
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	4920      	ldr	r1, [pc, #128]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009f4c:	4b1e      	ldr	r3, [pc, #120]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	491c      	ldr	r1, [pc, #112]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009f5a:	4b1b      	ldr	r3, [pc, #108]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5e:	4a1a      	ldr	r2, [pc, #104]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f60:	f023 0310 	bic.w	r3, r3, #16
 8009f64:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f66:	4b18      	ldr	r3, [pc, #96]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	69d2      	ldr	r2, [r2, #28]
 8009f76:	00d2      	lsls	r2, r2, #3
 8009f78:	4913      	ldr	r1, [pc, #76]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009f7e:	4b12      	ldr	r3, [pc, #72]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f82:	4a11      	ldr	r2, [pc, #68]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f84:	f043 0310 	orr.w	r3, r3, #16
 8009f88:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009f8a:	4b0f      	ldr	r3, [pc, #60]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a0e      	ldr	r2, [pc, #56]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009f90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f94:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f96:	f7fb fb7b 	bl	8005690 <HAL_GetTick>
 8009f9a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f9c:	e008      	b.n	8009fb0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f9e:	f7fb fb77 	bl	8005690 <HAL_GetTick>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d901      	bls.n	8009fb0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e006      	b.n	8009fbe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fb0:	4b05      	ldr	r3, [pc, #20]	; (8009fc8 <RCCEx_PLL2_Config+0x128>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d0f0      	beq.n	8009f9e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0

}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	46020c00 	.word	0x46020c00
 8009fcc:	80800000 	.word	0x80800000

08009fd0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009fd8:	4b47      	ldr	r3, [pc, #284]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a46      	ldr	r2, [pc, #280]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 8009fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fe2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009fe4:	f7fb fb54 	bl	8005690 <HAL_GetTick>
 8009fe8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fea:	e008      	b.n	8009ffe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fec:	f7fb fb50 	bl	8005690 <HAL_GetTick>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d901      	bls.n	8009ffe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e077      	b.n	800a0ee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ffe:	4b3e      	ldr	r3, [pc, #248]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1f0      	bne.n	8009fec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a00a:	4b3b      	ldr	r3, [pc, #236]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a012:	f023 0303 	bic.w	r3, r3, #3
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	6811      	ldr	r1, [r2, #0]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	6852      	ldr	r2, [r2, #4]
 800a01e:	3a01      	subs	r2, #1
 800a020:	0212      	lsls	r2, r2, #8
 800a022:	430a      	orrs	r2, r1
 800a024:	4934      	ldr	r1, [pc, #208]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a026:	4313      	orrs	r3, r2
 800a028:	630b      	str	r3, [r1, #48]	; 0x30
 800a02a:	4b33      	ldr	r3, [pc, #204]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a02c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a02e:	4b33      	ldr	r3, [pc, #204]	; (800a0fc <RCCEx_PLL3_Config+0x12c>)
 800a030:	4013      	ands	r3, r2
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	6892      	ldr	r2, [r2, #8]
 800a036:	3a01      	subs	r2, #1
 800a038:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	68d2      	ldr	r2, [r2, #12]
 800a040:	3a01      	subs	r2, #1
 800a042:	0252      	lsls	r2, r2, #9
 800a044:	b292      	uxth	r2, r2
 800a046:	4311      	orrs	r1, r2
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	6912      	ldr	r2, [r2, #16]
 800a04c:	3a01      	subs	r2, #1
 800a04e:	0412      	lsls	r2, r2, #16
 800a050:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a054:	4311      	orrs	r1, r2
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	6952      	ldr	r2, [r2, #20]
 800a05a:	3a01      	subs	r2, #1
 800a05c:	0612      	lsls	r2, r2, #24
 800a05e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a062:	430a      	orrs	r2, r1
 800a064:	4924      	ldr	r1, [pc, #144]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a066:	4313      	orrs	r3, r2
 800a068:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a06a:	4b23      	ldr	r3, [pc, #140]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06e:	f023 020c 	bic.w	r2, r3, #12
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	4920      	ldr	r1, [pc, #128]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a07c:	4b1e      	ldr	r3, [pc, #120]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a07e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	491c      	ldr	r1, [pc, #112]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a086:	4313      	orrs	r3, r2
 800a088:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a08a:	4b1b      	ldr	r3, [pc, #108]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08e:	4a1a      	ldr	r2, [pc, #104]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a090:	f023 0310 	bic.w	r3, r3, #16
 800a094:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a096:	4b18      	ldr	r3, [pc, #96]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a09a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a09e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	69d2      	ldr	r2, [r2, #28]
 800a0a6:	00d2      	lsls	r2, r2, #3
 800a0a8:	4913      	ldr	r1, [pc, #76]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a0ae:	4b12      	ldr	r3, [pc, #72]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b2:	4a11      	ldr	r2, [pc, #68]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a0b4:	f043 0310 	orr.w	r3, r3, #16
 800a0b8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a0ba:	4b0f      	ldr	r3, [pc, #60]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a0e      	ldr	r2, [pc, #56]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a0c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0c4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0c6:	f7fb fae3 	bl	8005690 <HAL_GetTick>
 800a0ca:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0cc:	e008      	b.n	800a0e0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0ce:	f7fb fadf 	bl	8005690 <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d901      	bls.n	800a0e0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e006      	b.n	800a0ee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0e0:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <RCCEx_PLL3_Config+0x128>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d0f0      	beq.n	800a0ce <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	46020c00 	.word	0x46020c00
 800a0fc:	80800000 	.word	0x80800000

0800a100 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e0dd      	b.n	800a2ce <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a70      	ldr	r2, [pc, #448]	; (800a2d8 <HAL_SPI_Init+0x1d8>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d004      	beq.n	800a126 <HAL_SPI_Init+0x26>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a6e      	ldr	r2, [pc, #440]	; (800a2dc <HAL_SPI_Init+0x1dc>)
 800a122:	4293      	cmp	r3, r2
 800a124:	e000      	b.n	800a128 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a126:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a69      	ldr	r2, [pc, #420]	; (800a2d8 <HAL_SPI_Init+0x1d8>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d004      	beq.n	800a142 <HAL_SPI_Init+0x42>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a67      	ldr	r2, [pc, #412]	; (800a2dc <HAL_SPI_Init+0x1dc>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d105      	bne.n	800a14e <HAL_SPI_Init+0x4e>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	2b0f      	cmp	r3, #15
 800a148:	d901      	bls.n	800a14e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e0bf      	b.n	800a2ce <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 ffee 	bl	800b130 <SPI_GetPacketSize>
 800a154:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a5f      	ldr	r2, [pc, #380]	; (800a2d8 <HAL_SPI_Init+0x1d8>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d004      	beq.n	800a16a <HAL_SPI_Init+0x6a>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a5d      	ldr	r2, [pc, #372]	; (800a2dc <HAL_SPI_Init+0x1dc>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d102      	bne.n	800a170 <HAL_SPI_Init+0x70>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b08      	cmp	r3, #8
 800a16e:	d816      	bhi.n	800a19e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a174:	4a5a      	ldr	r2, [pc, #360]	; (800a2e0 <HAL_SPI_Init+0x1e0>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d00e      	beq.n	800a198 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a59      	ldr	r2, [pc, #356]	; (800a2e4 <HAL_SPI_Init+0x1e4>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d009      	beq.n	800a198 <HAL_SPI_Init+0x98>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a57      	ldr	r2, [pc, #348]	; (800a2e8 <HAL_SPI_Init+0x1e8>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d004      	beq.n	800a198 <HAL_SPI_Init+0x98>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a56      	ldr	r2, [pc, #344]	; (800a2ec <HAL_SPI_Init+0x1ec>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d104      	bne.n	800a1a2 <HAL_SPI_Init+0xa2>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b10      	cmp	r3, #16
 800a19c:	d901      	bls.n	800a1a2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e095      	b.n	800a2ce <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d106      	bne.n	800a1bc <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7f7 fb02 	bl	80017c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f022 0201 	bic.w	r2, r2, #1
 800a1d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a1de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1e8:	d119      	bne.n	800a21e <HAL_SPI_Init+0x11e>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1f2:	d103      	bne.n	800a1fc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d008      	beq.n	800a20e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10c      	bne.n	800a21e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a20c:	d107      	bne.n	800a21e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a21c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	69da      	ldr	r2, [r3, #28]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a226:	431a      	orrs	r2, r3
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	431a      	orrs	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a230:	ea42 0103 	orr.w	r1, r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68da      	ldr	r2, [r3, #12]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	430a      	orrs	r2, r1
 800a23e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	431a      	orrs	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24e:	431a      	orrs	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	431a      	orrs	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	431a      	orrs	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	431a      	orrs	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	431a      	orrs	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	431a      	orrs	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a272:	431a      	orrs	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	431a      	orrs	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a27e:	431a      	orrs	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a284:	431a      	orrs	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a28a:	ea42 0103 	orr.w	r1, r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00a      	beq.n	800a2bc <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	430a      	orrs	r2, r1
 800a2ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	46002000 	.word	0x46002000
 800a2dc:	56002000 	.word	0x56002000
 800a2e0:	40013000 	.word	0x40013000
 800a2e4:	50013000 	.word	0x50013000
 800a2e8:	40003800 	.word	0x40003800
 800a2ec:	50003800 	.word	0x50003800

0800a2f0 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e01b      	b.n	800a33a <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2202      	movs	r2, #2
 800a306:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f022 0201 	bic.w	r2, r2, #1
 800a318:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7f7 fae0 	bl	80018e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State = HAL_SPI_STATE_RESET;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b08a      	sub	sp, #40	; 0x28
 800a348:	af02      	add	r7, sp, #8
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	603b      	str	r3, [r7, #0]
 800a350:	4613      	mov	r3, r2
 800a352:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3320      	adds	r3, #32
 800a35a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a366:	2b01      	cmp	r3, #1
 800a368:	d101      	bne.n	800a36e <HAL_SPI_Transmit+0x2a>
 800a36a:	2302      	movs	r3, #2
 800a36c:	e1f7      	b.n	800a75e <HAL_SPI_Transmit+0x41a>
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a376:	f7fb f98b 	bl	8005690 <HAL_GetTick>
 800a37a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b01      	cmp	r3, #1
 800a386:	d007      	beq.n	800a398 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a388:	2302      	movs	r3, #2
 800a38a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800a394:	7efb      	ldrb	r3, [r7, #27]
 800a396:	e1e2      	b.n	800a75e <HAL_SPI_Transmit+0x41a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <HAL_SPI_Transmit+0x60>
 800a39e:	88fb      	ldrh	r3, [r7, #6]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d107      	bne.n	800a3b4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800a3b0:	7efb      	ldrb	r3, [r7, #27]
 800a3b2:	e1d4      	b.n	800a75e <HAL_SPI_Transmit+0x41a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2203      	movs	r2, #3
 800a3b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	88fa      	ldrh	r2, [r7, #6]
 800a3ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	88fa      	ldrh	r2, [r7, #6]
 800a3d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a404:	d107      	bne.n	800a416 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a414:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	0c1b      	lsrs	r3, r3, #16
 800a41e:	041b      	lsls	r3, r3, #16
 800a420:	88f9      	ldrh	r1, [r7, #6]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	6812      	ldr	r2, [r2, #0]
 800a426:	430b      	orrs	r3, r1
 800a428:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f042 0201 	orr.w	r2, r2, #1
 800a438:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10c      	bne.n	800a462 <HAL_SPI_Transmit+0x11e>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a450:	d107      	bne.n	800a462 <HAL_SPI_Transmit+0x11e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a460:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	2b0f      	cmp	r3, #15
 800a468:	d95b      	bls.n	800a522 <HAL_SPI_Transmit+0x1de>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a8f      	ldr	r2, [pc, #572]	; (800a6ac <HAL_SPI_Transmit+0x368>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d04f      	beq.n	800a514 <HAL_SPI_Transmit+0x1d0>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a8d      	ldr	r2, [pc, #564]	; (800a6b0 <HAL_SPI_Transmit+0x36c>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d04a      	beq.n	800a514 <HAL_SPI_Transmit+0x1d0>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a8c      	ldr	r2, [pc, #560]	; (800a6b4 <HAL_SPI_Transmit+0x370>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d045      	beq.n	800a514 <HAL_SPI_Transmit+0x1d0>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a8a      	ldr	r2, [pc, #552]	; (800a6b8 <HAL_SPI_Transmit+0x374>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d147      	bne.n	800a522 <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a492:	e03f      	b.n	800a514 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	f003 0302 	and.w	r3, r3, #2
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d114      	bne.n	800a4cc <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4b2:	1d1a      	adds	r2, r3, #4
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a4ca:	e023      	b.n	800a514 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4cc:	f7fb f8e0 	bl	8005690 <HAL_GetTick>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d803      	bhi.n	800a4e4 <HAL_SPI_Transmit+0x1a0>
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e2:	d102      	bne.n	800a4ea <HAL_SPI_Transmit+0x1a6>
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d114      	bne.n	800a514 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fd52 	bl	800af94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e124      	b.n	800a75e <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1b9      	bne.n	800a494 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a520:	e0f7      	b.n	800a712 <HAL_SPI_Transmit+0x3ce>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	2b07      	cmp	r3, #7
 800a528:	f240 80ec 	bls.w	800a704 <HAL_SPI_Transmit+0x3c0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a52c:	e05d      	b.n	800a5ea <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	f003 0302 	and.w	r3, r3, #2
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d132      	bne.n	800a5a2 <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a542:	b29b      	uxth	r3, r3
 800a544:	2b01      	cmp	r3, #1
 800a546:	d918      	bls.n	800a57a <HAL_SPI_Transmit+0x236>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d014      	beq.n	800a57a <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6812      	ldr	r2, [r2, #0]
 800a55a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a560:	1d1a      	adds	r2, r3, #4
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	3b02      	subs	r3, #2
 800a570:	b29a      	uxth	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a578:	e037      	b.n	800a5ea <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a57e:	881a      	ldrh	r2, [r3, #0]
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a588:	1c9a      	adds	r2, r3, #2
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a594:	b29b      	uxth	r3, r3
 800a596:	3b01      	subs	r3, #1
 800a598:	b29a      	uxth	r2, r3
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a5a0:	e023      	b.n	800a5ea <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5a2:	f7fb f875 	bl	8005690 <HAL_GetTick>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d803      	bhi.n	800a5ba <HAL_SPI_Transmit+0x276>
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b8:	d102      	bne.n	800a5c0 <HAL_SPI_Transmit+0x27c>
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d114      	bne.n	800a5ea <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f000 fce7 	bl	800af94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e0b9      	b.n	800a75e <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d19b      	bne.n	800a52e <HAL_SPI_Transmit+0x1ea>
 800a5f6:	e08c      	b.n	800a712 <HAL_SPI_Transmit+0x3ce>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	f003 0302 	and.w	r3, r3, #2
 800a602:	2b02      	cmp	r3, #2
 800a604:	d15a      	bne.n	800a6bc <HAL_SPI_Transmit+0x378>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d918      	bls.n	800a644 <HAL_SPI_Transmit+0x300>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a616:	2b40      	cmp	r3, #64	; 0x40
 800a618:	d914      	bls.n	800a644 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6812      	ldr	r2, [r2, #0]
 800a624:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a62a:	1d1a      	adds	r2, r3, #4
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a636:	b29b      	uxth	r3, r3
 800a638:	3b04      	subs	r3, #4
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a642:	e05f      	b.n	800a704 <HAL_SPI_Transmit+0x3c0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d917      	bls.n	800a680 <HAL_SPI_Transmit+0x33c>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a654:	2b00      	cmp	r3, #0
 800a656:	d013      	beq.n	800a680 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a65c:	881a      	ldrh	r2, [r3, #0]
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a666:	1c9a      	adds	r2, r3, #2
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a672:	b29b      	uxth	r3, r3
 800a674:	3b02      	subs	r3, #2
 800a676:	b29a      	uxth	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a67e:	e041      	b.n	800a704 <HAL_SPI_Transmit+0x3c0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3320      	adds	r3, #32
 800a68a:	7812      	ldrb	r2, [r2, #0]
 800a68c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a6aa:	e02b      	b.n	800a704 <HAL_SPI_Transmit+0x3c0>
 800a6ac:	40013000 	.word	0x40013000
 800a6b0:	50013000 	.word	0x50013000
 800a6b4:	40003800 	.word	0x40003800
 800a6b8:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6bc:	f7fa ffe8 	bl	8005690 <HAL_GetTick>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d803      	bhi.n	800a6d4 <HAL_SPI_Transmit+0x390>
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d2:	d102      	bne.n	800a6da <HAL_SPI_Transmit+0x396>
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d114      	bne.n	800a704 <HAL_SPI_Transmit+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 fc5a 	bl	800af94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800a700:	2303      	movs	r3, #3
 800a702:	e02c      	b.n	800a75e <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f47f af73 	bne.w	800a5f8 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2200      	movs	r2, #0
 800a71a:	2108      	movs	r1, #8
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f000 fcd9 	bl	800b0d4 <SPI_WaitOnFlagUntilTimeout>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d007      	beq.n	800a738 <HAL_SPI_Transmit+0x3f4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a72e:	f043 0220 	orr.w	r2, r3, #32
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f000 fc2b 	bl	800af94 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <HAL_SPI_Transmit+0x418>
  {
    return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e000      	b.n	800a75e <HAL_SPI_Transmit+0x41a>
  }
  return errorcode;
 800a75c:	7efb      	ldrb	r3, [r7, #27]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3720      	adds	r7, #32
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop

0800a768 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08a      	sub	sp, #40	; 0x28
 800a76c:	af02      	add	r7, sp, #8
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	603b      	str	r3, [r7, #0]
 800a774:	4613      	mov	r3, r2
 800a776:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3330      	adds	r3, #48	; 0x30
 800a782:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a78c:	d112      	bne.n	800a7b4 <HAL_SPI_Receive+0x4c>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10e      	bne.n	800a7b4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2204      	movs	r2, #4
 800a79a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a79e:	88fa      	ldrh	r2, [r7, #6]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	68b9      	ldr	r1, [r7, #8]
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f000 f99a 	bl	800aae4 <HAL_SPI_TransmitReceive>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	e18a      	b.n	800aaca <HAL_SPI_Receive+0x362>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d101      	bne.n	800a7c2 <HAL_SPI_Receive+0x5a>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	e183      	b.n	800aaca <HAL_SPI_Receive+0x362>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7ca:	f7fa ff61 	bl	8005690 <HAL_GetTick>
 800a7ce:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d007      	beq.n	800a7ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800a7dc:	2302      	movs	r3, #2
 800a7de:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800a7e8:	7ffb      	ldrb	r3, [r7, #31]
 800a7ea:	e16e      	b.n	800aaca <HAL_SPI_Receive+0x362>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <HAL_SPI_Receive+0x90>
 800a7f2:	88fb      	ldrh	r3, [r7, #6]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d107      	bne.n	800a808 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800a804:	7ffb      	ldrb	r3, [r7, #31]
 800a806:	e160      	b.n	800aaca <HAL_SPI_Receive+0x362>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2204      	movs	r2, #4
 800a80c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	88fa      	ldrh	r2, [r7, #6]
 800a822:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	88fa      	ldrh	r2, [r7, #6]
 800a82a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a858:	d107      	bne.n	800a86a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a868:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	0c1b      	lsrs	r3, r3, #16
 800a872:	041b      	lsls	r3, r3, #16
 800a874:	88f9      	ldrh	r1, [r7, #6]
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	6812      	ldr	r2, [r2, #0]
 800a87a:	430b      	orrs	r3, r1
 800a87c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f042 0201 	orr.w	r2, r2, #1
 800a88c:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69db      	ldr	r3, [r3, #28]
 800a894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10c      	bne.n	800a8b6 <HAL_SPI_Receive+0x14e>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8a4:	d107      	bne.n	800a8b6 <HAL_SPI_Receive+0x14e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	2b0f      	cmp	r3, #15
 800a8bc:	d95c      	bls.n	800a978 <HAL_SPI_Receive+0x210>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a84      	ldr	r2, [pc, #528]	; (800aad4 <HAL_SPI_Receive+0x36c>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d050      	beq.n	800a96a <HAL_SPI_Receive+0x202>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a82      	ldr	r2, [pc, #520]	; (800aad8 <HAL_SPI_Receive+0x370>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d04b      	beq.n	800a96a <HAL_SPI_Receive+0x202>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a81      	ldr	r2, [pc, #516]	; (800aadc <HAL_SPI_Receive+0x374>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d046      	beq.n	800a96a <HAL_SPI_Receive+0x202>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a7f      	ldr	r2, [pc, #508]	; (800aae0 <HAL_SPI_Receive+0x378>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d148      	bne.n	800a978 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a8e6:	e040      	b.n	800a96a <HAL_SPI_Receive+0x202>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	695a      	ldr	r2, [r3, #20]
 800a8ee:	f248 0308 	movw	r3, #32776	; 0x8008
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d014      	beq.n	800a922 <HAL_SPI_Receive+0x1ba>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a900:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a902:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a908:	1d1a      	adds	r2, r3, #4
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800a914:	b29b      	uxth	r3, r3
 800a916:	3b01      	subs	r3, #1
 800a918:	b29a      	uxth	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800a920:	e023      	b.n	800a96a <HAL_SPI_Receive+0x202>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a922:	f7fa feb5 	bl	8005690 <HAL_GetTick>
 800a926:	4602      	mov	r2, r0
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d803      	bhi.n	800a93a <HAL_SPI_Receive+0x1d2>
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a938:	d102      	bne.n	800a940 <HAL_SPI_Receive+0x1d8>
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d114      	bne.n	800a96a <HAL_SPI_Receive+0x202>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 fb27 	bl	800af94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a954:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e0af      	b.n	800aaca <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800a970:	b29b      	uxth	r3, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1b8      	bne.n	800a8e8 <HAL_SPI_Receive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a976:	e095      	b.n	800aaa4 <HAL_SPI_Receive+0x33c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	2b07      	cmp	r3, #7
 800a97e:	f240 808b 	bls.w	800aa98 <HAL_SPI_Receive+0x330>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a982:	e03f      	b.n	800aa04 <HAL_SPI_Receive+0x29c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d114      	bne.n	800a9bc <HAL_SPI_Receive+0x254>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	8812      	ldrh	r2, [r2, #0]
 800a99a:	b292      	uxth	r2, r2
 800a99c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9a2:	1c9a      	adds	r2, r3, #2
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800a9ba:	e023      	b.n	800aa04 <HAL_SPI_Receive+0x29c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9bc:	f7fa fe68 	bl	8005690 <HAL_GetTick>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d803      	bhi.n	800a9d4 <HAL_SPI_Receive+0x26c>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d2:	d102      	bne.n	800a9da <HAL_SPI_Receive+0x272>
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d114      	bne.n	800aa04 <HAL_SPI_Receive+0x29c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 fada 	bl	800af94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e062      	b.n	800aaca <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1b9      	bne.n	800a984 <HAL_SPI_Receive+0x21c>
 800aa10:	e048      	b.n	800aaa4 <HAL_SPI_Receive+0x33c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	695b      	ldr	r3, [r3, #20]
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d117      	bne.n	800aa50 <HAL_SPI_Receive+0x2e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	b2d2      	uxtb	r2, r2
 800aa30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	3b01      	subs	r3, #1
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800aa4e:	e023      	b.n	800aa98 <HAL_SPI_Receive+0x330>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa50:	f7fa fe1e 	bl	8005690 <HAL_GetTick>
 800aa54:	4602      	mov	r2, r0
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d803      	bhi.n	800aa68 <HAL_SPI_Receive+0x300>
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa66:	d102      	bne.n	800aa6e <HAL_SPI_Receive+0x306>
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d114      	bne.n	800aa98 <HAL_SPI_Receive+0x330>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f000 fa90 	bl	800af94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e018      	b.n	800aaca <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1b6      	bne.n	800aa12 <HAL_SPI_Receive+0x2aa>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f000 fa75 	bl	800af94 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d001      	beq.n	800aac8 <HAL_SPI_Receive+0x360>
  {
    return HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	e000      	b.n	800aaca <HAL_SPI_Receive+0x362>
  }
  return errorcode;
 800aac8:	7ffb      	ldrb	r3, [r7, #31]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3720      	adds	r7, #32
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	40013000 	.word	0x40013000
 800aad8:	50013000 	.word	0x50013000
 800aadc:	40003800 	.word	0x40003800
 800aae0:	50003800 	.word	0x50003800

0800aae4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08e      	sub	sp, #56	; 0x38
 800aae8:	af02      	add	r7, sp, #8
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	3320      	adds	r3, #32
 800aafe:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3330      	adds	r3, #48	; 0x30
 800ab06:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d101      	bne.n	800ab16 <HAL_SPI_TransmitReceive+0x32>
 800ab12:	2302      	movs	r3, #2
 800ab14:	e22b      	b.n	800af6e <HAL_SPI_TransmitReceive+0x48a>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab1e:	f7fa fdb7 	bl	8005690 <HAL_GetTick>
 800ab22:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800ab24:	887b      	ldrh	r3, [r7, #2]
 800ab26:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800ab28:	887b      	ldrh	r3, [r7, #2]
 800ab2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ab32:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ab3a:	7efb      	ldrb	r3, [r7, #27]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d014      	beq.n	800ab6a <HAL_SPI_TransmitReceive+0x86>
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab46:	d106      	bne.n	800ab56 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d102      	bne.n	800ab56 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ab50:	7efb      	ldrb	r3, [r7, #27]
 800ab52:	2b04      	cmp	r3, #4
 800ab54:	d009      	beq.n	800ab6a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800ab56:	2302      	movs	r3, #2
 800ab58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800ab64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab68:	e201      	b.n	800af6e <HAL_SPI_TransmitReceive+0x48a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <HAL_SPI_TransmitReceive+0x98>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d002      	beq.n	800ab7c <HAL_SPI_TransmitReceive+0x98>
 800ab76:	887b      	ldrh	r3, [r7, #2]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d109      	bne.n	800ab90 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800ab8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab8e:	e1ee      	b.n	800af6e <HAL_SPI_TransmitReceive+0x48a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d003      	beq.n	800aba4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2205      	movs	r2, #5
 800aba0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	887a      	ldrh	r2, [r7, #2]
 800abb6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	887a      	ldrh	r2, [r7, #2]
 800abbe:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	887a      	ldrh	r2, [r7, #2]
 800abcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	887a      	ldrh	r2, [r7, #2]
 800abd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	0c1b      	lsrs	r3, r3, #16
 800abec:	041b      	lsls	r3, r3, #16
 800abee:	8879      	ldrh	r1, [r7, #2]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	6812      	ldr	r2, [r2, #0]
 800abf4:	430b      	orrs	r3, r1
 800abf6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f042 0201 	orr.w	r2, r2, #1
 800ac06:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10c      	bne.n	800ac30 <HAL_SPI_TransmitReceive+0x14c>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac1e:	d107      	bne.n	800ac30 <HAL_SPI_TransmitReceive+0x14c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	2b0f      	cmp	r3, #15
 800ac36:	f240 8085 	bls.w	800ad44 <HAL_SPI_TransmitReceive+0x260>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a7b      	ldr	r2, [pc, #492]	; (800ae2c <HAL_SPI_TransmitReceive+0x348>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d078      	beq.n	800ad36 <HAL_SPI_TransmitReceive+0x252>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a79      	ldr	r2, [pc, #484]	; (800ae30 <HAL_SPI_TransmitReceive+0x34c>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d073      	beq.n	800ad36 <HAL_SPI_TransmitReceive+0x252>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a78      	ldr	r2, [pc, #480]	; (800ae34 <HAL_SPI_TransmitReceive+0x350>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d06e      	beq.n	800ad36 <HAL_SPI_TransmitReceive+0x252>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a76      	ldr	r2, [pc, #472]	; (800ae38 <HAL_SPI_TransmitReceive+0x354>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d170      	bne.n	800ad44 <HAL_SPI_TransmitReceive+0x260>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ac62:	e068      	b.n	800ad36 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	f003 0302 	and.w	r3, r3, #2
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d11a      	bne.n	800aca8 <HAL_SPI_TransmitReceive+0x1c4>
 800ac72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d017      	beq.n	800aca8 <HAL_SPI_TransmitReceive+0x1c4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6812      	ldr	r2, [r2, #0]
 800ac82:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac88:	1d1a      	adds	r2, r3, #4
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	3b01      	subs	r3, #1
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aca6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	695a      	ldr	r2, [r3, #20]
 800acae:	f248 0308 	movw	r3, #32776	; 0x8008
 800acb2:	4013      	ands	r3, r2
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d01a      	beq.n	800acee <HAL_SPI_TransmitReceive+0x20a>
 800acb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d017      	beq.n	800acee <HAL_SPI_TransmitReceive+0x20a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800acc8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acce:	1d1a      	adds	r2, r3, #4
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800acda:	b29b      	uxth	r3, r3
 800acdc:	3b01      	subs	r3, #1
 800acde:	b29a      	uxth	r2, r3
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800acec:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acee:	f7fa fccf 	bl	8005690 <HAL_GetTick>
 800acf2:	4602      	mov	r2, r0
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d803      	bhi.n	800ad06 <HAL_SPI_TransmitReceive+0x222>
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad04:	d102      	bne.n	800ad0c <HAL_SPI_TransmitReceive+0x228>
 800ad06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d114      	bne.n	800ad36 <HAL_SPI_TransmitReceive+0x252>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f000 f941 	bl	800af94 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e11b      	b.n	800af6e <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ad36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d193      	bne.n	800ac64 <HAL_SPI_TransmitReceive+0x180>
 800ad3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d190      	bne.n	800ac64 <HAL_SPI_TransmitReceive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ad42:	e0ed      	b.n	800af20 <HAL_SPI_TransmitReceive+0x43c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	2b07      	cmp	r3, #7
 800ad4a:	f240 80e3 	bls.w	800af14 <HAL_SPI_TransmitReceive+0x430>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ad4e:	e066      	b.n	800ae1e <HAL_SPI_TransmitReceive+0x33a>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	f003 0302 	and.w	r3, r3, #2
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d119      	bne.n	800ad92 <HAL_SPI_TransmitReceive+0x2ae>
 800ad5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d016      	beq.n	800ad92 <HAL_SPI_TransmitReceive+0x2ae>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad68:	881a      	ldrh	r2, [r3, #0]
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad72:	1c9a      	adds	r2, r3, #2
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	3b01      	subs	r3, #1
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad90:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	695b      	ldr	r3, [r3, #20]
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d11a      	bne.n	800add6 <HAL_SPI_TransmitReceive+0x2f2>
 800ada0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d017      	beq.n	800add6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adaa:	6a3a      	ldr	r2, [r7, #32]
 800adac:	8812      	ldrh	r2, [r2, #0]
 800adae:	b292      	uxth	r2, r2
 800adb0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adb6:	1c9a      	adds	r2, r3, #2
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	3b01      	subs	r3, #1
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800add4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800add6:	f7fa fc5b 	bl	8005690 <HAL_GetTick>
 800adda:	4602      	mov	r2, r0
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	1ad3      	subs	r3, r2, r3
 800ade0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d803      	bhi.n	800adee <HAL_SPI_TransmitReceive+0x30a>
 800ade6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adec:	d102      	bne.n	800adf4 <HAL_SPI_TransmitReceive+0x310>
 800adee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d114      	bne.n	800ae1e <HAL_SPI_TransmitReceive+0x33a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 f8cd 	bl	800af94 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	e0a7      	b.n	800af6e <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ae1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d195      	bne.n	800ad50 <HAL_SPI_TransmitReceive+0x26c>
 800ae24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d192      	bne.n	800ad50 <HAL_SPI_TransmitReceive+0x26c>
 800ae2a:	e079      	b.n	800af20 <HAL_SPI_TransmitReceive+0x43c>
 800ae2c:	40013000 	.word	0x40013000
 800ae30:	50013000 	.word	0x50013000
 800ae34:	40003800 	.word	0x40003800
 800ae38:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d11b      	bne.n	800ae82 <HAL_SPI_TransmitReceive+0x39e>
 800ae4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d018      	beq.n	800ae82 <HAL_SPI_TransmitReceive+0x39e>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3320      	adds	r3, #32
 800ae5a:	7812      	ldrb	r2, [r2, #0]
 800ae5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae62:	1c5a      	adds	r2, r3, #1
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	3b01      	subs	r3, #1
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae80:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d11d      	bne.n	800aecc <HAL_SPI_TransmitReceive+0x3e8>
 800ae90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d01a      	beq.n	800aecc <HAL_SPI_TransmitReceive+0x3e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aea2:	7812      	ldrb	r2, [r2, #0]
 800aea4:	b2d2      	uxtb	r2, r2
 800aea6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeac:	1c5a      	adds	r2, r3, #1
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	3b01      	subs	r3, #1
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800aeca:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aecc:	f7fa fbe0 	bl	8005690 <HAL_GetTick>
 800aed0:	4602      	mov	r2, r0
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d803      	bhi.n	800aee4 <HAL_SPI_TransmitReceive+0x400>
 800aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee2:	d102      	bne.n	800aeea <HAL_SPI_TransmitReceive+0x406>
 800aee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d114      	bne.n	800af14 <HAL_SPI_TransmitReceive+0x430>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 f852 	bl	800af94 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aefe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e02c      	b.n	800af6e <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800af14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af16:	2b00      	cmp	r3, #0
 800af18:	d190      	bne.n	800ae3c <HAL_SPI_TransmitReceive+0x358>
 800af1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d18d      	bne.n	800ae3c <HAL_SPI_TransmitReceive+0x358>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	2200      	movs	r2, #0
 800af28:	2108      	movs	r1, #8
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f000 f8d2 	bl	800b0d4 <SPI_WaitOnFlagUntilTimeout>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d007      	beq.n	800af46 <HAL_SPI_TransmitReceive+0x462>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af3c:	f043 0220 	orr.w	r2, r3, #32
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f000 f824 	bl	800af94 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <HAL_SPI_TransmitReceive+0x486>
  {
    return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e001      	b.n	800af6e <HAL_SPI_TransmitReceive+0x48a>
  }
  return errorcode;
 800af6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3730      	adds	r7, #48	; 0x30
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop

0800af78 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800af86:	b2db      	uxtb	r3, r3
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	699a      	ldr	r2, [r3, #24]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f042 0208 	orr.w	r2, r2, #8
 800afb2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	699a      	ldr	r2, [r3, #24]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f042 0210 	orr.w	r2, r2, #16
 800afc2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f022 0201 	bic.w	r2, r2, #1
 800afd2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	6812      	ldr	r2, [r2, #0]
 800afde:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800afe2:	f023 0303 	bic.w	r3, r3, #3
 800afe6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	689a      	ldr	r2, [r3, #8]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800aff6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800affe:	b2db      	uxtb	r3, r3
 800b000:	2b04      	cmp	r3, #4
 800b002:	d014      	beq.n	800b02e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f003 0320 	and.w	r3, r3, #32
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00f      	beq.n	800b02e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b014:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	699a      	ldr	r2, [r3, #24]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f042 0220 	orr.w	r2, r2, #32
 800b02c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b03      	cmp	r3, #3
 800b038:	d014      	beq.n	800b064 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00f      	beq.n	800b064 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b04a:	f043 0204 	orr.w	r2, r3, #4
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	699a      	ldr	r2, [r3, #24]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b062:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00f      	beq.n	800b08e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b074:	f043 0201 	orr.w	r2, r3, #1
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	699a      	ldr	r2, [r3, #24]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b08c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00f      	beq.n	800b0b8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b09e:	f043 0208 	orr.w	r2, r3, #8
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	699a      	ldr	r2, [r3, #24]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800b0c8:	bf00      	nop
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b0e4:	e010      	b.n	800b108 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0e6:	f7fa fad3 	bl	8005690 <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d803      	bhi.n	800b0fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fc:	d102      	bne.n	800b104 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e00f      	b.n	800b128 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	695a      	ldr	r2, [r3, #20]
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	4013      	ands	r3, r2
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	429a      	cmp	r2, r3
 800b116:	bf0c      	ite	eq
 800b118:	2301      	moveq	r3, #1
 800b11a:	2300      	movne	r3, #0
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	461a      	mov	r2, r3
 800b120:	79fb      	ldrb	r3, [r7, #7]
 800b122:	429a      	cmp	r2, r3
 800b124:	d0df      	beq.n	800b0e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b13c:	095b      	lsrs	r3, r3, #5
 800b13e:	3301      	adds	r3, #1
 800b140:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	3301      	adds	r3, #1
 800b148:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	3307      	adds	r3, #7
 800b14e:	08db      	lsrs	r3, r3, #3
 800b150:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	fb02 f303 	mul.w	r3, r2, r3
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b176:	b2db      	uxtb	r3, r3
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d12e      	bne.n	800b1da <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b182:	2b01      	cmp	r3, #1
 800b184:	d101      	bne.n	800b18a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800b186:	2302      	movs	r3, #2
 800b188:	e028      	b.n	800b1dc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2202      	movs	r2, #2
 800b196:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f022 0201 	bic.w	r2, r2, #1
 800b1a8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800b1b6:	ea42 0103 	orr.w	r1, r2, r3
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	689a      	ldr	r2, [r3, #8]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	430a      	orrs	r2, r1
 800b1c4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	e000      	b.n	800b1dc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
  }
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e042      	b.n	800b280 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b200:	2b00      	cmp	r3, #0
 800b202:	d106      	bne.n	800b212 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7f6 fbaf 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2224      	movs	r2, #36	; 0x24
 800b216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f022 0201 	bic.w	r2, r2, #1
 800b228:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f8d2 	bl	800b3d4 <UART_SetConfig>
 800b230:	4603      	mov	r3, r0
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e022      	b.n	800b280 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d002      	beq.n	800b248 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fa68 	bl	800b718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689a      	ldr	r2, [r3, #8]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f042 0201 	orr.w	r2, r2, #1
 800b276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 faef 	bl	800b85c <UART_CheckIdleState>
 800b27e:	4603      	mov	r3, r0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08a      	sub	sp, #40	; 0x28
 800b28c:	af02      	add	r7, sp, #8
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	603b      	str	r3, [r7, #0]
 800b294:	4613      	mov	r3, r2
 800b296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b29e:	2b20      	cmp	r3, #32
 800b2a0:	f040 8092 	bne.w	800b3c8 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d002      	beq.n	800b2b0 <HAL_UART_Transmit+0x28>
 800b2aa:	88fb      	ldrh	r3, [r7, #6]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d101      	bne.n	800b2b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e08a      	b.n	800b3ca <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d101      	bne.n	800b2c2 <HAL_UART_Transmit+0x3a>
 800b2be:	2302      	movs	r3, #2
 800b2c0:	e083      	b.n	800b3ca <HAL_UART_Transmit+0x142>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d4:	2b80      	cmp	r3, #128	; 0x80
 800b2d6:	d107      	bne.n	800b2e8 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	689a      	ldr	r2, [r3, #8]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2e6:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2221      	movs	r2, #33	; 0x21
 800b2f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2f8:	f7fa f9ca 	bl	8005690 <HAL_GetTick>
 800b2fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	88fa      	ldrh	r2, [r7, #6]
 800b302:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	88fa      	ldrh	r2, [r7, #6]
 800b30a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b316:	d108      	bne.n	800b32a <HAL_UART_Transmit+0xa2>
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d104      	bne.n	800b32a <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 800b320:	2300      	movs	r3, #0
 800b322:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	61bb      	str	r3, [r7, #24]
 800b328:	e003      	b.n	800b332 <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b32e:	2300      	movs	r3, #0
 800b330:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b33a:	e02c      	b.n	800b396 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	2200      	movs	r2, #0
 800b344:	2180      	movs	r1, #128	; 0x80
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f000 fad3 	bl	800b8f2 <UART_WaitOnFlagUntilTimeout>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800b352:	2303      	movs	r3, #3
 800b354:	e039      	b.n	800b3ca <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10b      	bne.n	800b374 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	881b      	ldrh	r3, [r3, #0]
 800b360:	461a      	mov	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b36a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	3302      	adds	r3, #2
 800b370:	61bb      	str	r3, [r7, #24]
 800b372:	e007      	b.n	800b384 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	781a      	ldrb	r2, [r3, #0]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	3301      	adds	r3, #1
 800b382:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	3b01      	subs	r3, #1
 800b38e:	b29a      	uxth	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1cc      	bne.n	800b33c <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	9300      	str	r3, [sp, #0]
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2140      	movs	r1, #64	; 0x40
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f000 faa0 	bl	800b8f2 <UART_WaitOnFlagUntilTimeout>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	e006      	b.n	800b3ca <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2220      	movs	r2, #32
 800b3c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	e000      	b.n	800b3ca <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 800b3c8:	2302      	movs	r3, #2
  }
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3720      	adds	r7, #32
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
	...

0800b3d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3d8:	b094      	sub	sp, #80	; 0x50
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	4b7e      	ldr	r3, [pc, #504]	; (800b5e4 <UART_SetConfig+0x210>)
 800b3ea:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	689a      	ldr	r2, [r3, #8]
 800b3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	431a      	orrs	r2, r3
 800b3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	431a      	orrs	r2, r3
 800b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fe:	69db      	ldr	r3, [r3, #28]
 800b400:	4313      	orrs	r3, r2
 800b402:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4977      	ldr	r1, [pc, #476]	; (800b5e8 <UART_SetConfig+0x214>)
 800b40c:	4019      	ands	r1, r3
 800b40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b414:	430b      	orrs	r3, r1
 800b416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b424:	68d9      	ldr	r1, [r3, #12]
 800b426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	ea40 0301 	orr.w	r3, r0, r1
 800b42e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b432:	699b      	ldr	r3, [r3, #24]
 800b434:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	4b6a      	ldr	r3, [pc, #424]	; (800b5e4 <UART_SetConfig+0x210>)
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d009      	beq.n	800b454 <UART_SetConfig+0x80>
 800b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	4b69      	ldr	r3, [pc, #420]	; (800b5ec <UART_SetConfig+0x218>)
 800b446:	429a      	cmp	r2, r3
 800b448:	d004      	beq.n	800b454 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44c:	6a1a      	ldr	r2, [r3, #32]
 800b44e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b450:	4313      	orrs	r3, r2
 800b452:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800b45e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800b462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b468:	430b      	orrs	r3, r1
 800b46a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b472:	f023 000f 	bic.w	r0, r3, #15
 800b476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b478:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	ea40 0301 	orr.w	r3, r0, r1
 800b482:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	4b59      	ldr	r3, [pc, #356]	; (800b5f0 <UART_SetConfig+0x21c>)
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d102      	bne.n	800b494 <UART_SetConfig+0xc0>
 800b48e:	2301      	movs	r3, #1
 800b490:	64bb      	str	r3, [r7, #72]	; 0x48
 800b492:	e029      	b.n	800b4e8 <UART_SetConfig+0x114>
 800b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	4b56      	ldr	r3, [pc, #344]	; (800b5f4 <UART_SetConfig+0x220>)
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d102      	bne.n	800b4a4 <UART_SetConfig+0xd0>
 800b49e:	2302      	movs	r3, #2
 800b4a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4a2:	e021      	b.n	800b4e8 <UART_SetConfig+0x114>
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	4b53      	ldr	r3, [pc, #332]	; (800b5f8 <UART_SetConfig+0x224>)
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d102      	bne.n	800b4b4 <UART_SetConfig+0xe0>
 800b4ae:	2304      	movs	r3, #4
 800b4b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4b2:	e019      	b.n	800b4e8 <UART_SetConfig+0x114>
 800b4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	4b50      	ldr	r3, [pc, #320]	; (800b5fc <UART_SetConfig+0x228>)
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d102      	bne.n	800b4c4 <UART_SetConfig+0xf0>
 800b4be:	2308      	movs	r3, #8
 800b4c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4c2:	e011      	b.n	800b4e8 <UART_SetConfig+0x114>
 800b4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	4b4d      	ldr	r3, [pc, #308]	; (800b600 <UART_SetConfig+0x22c>)
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d102      	bne.n	800b4d4 <UART_SetConfig+0x100>
 800b4ce:	2310      	movs	r3, #16
 800b4d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4d2:	e009      	b.n	800b4e8 <UART_SetConfig+0x114>
 800b4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	4b42      	ldr	r3, [pc, #264]	; (800b5e4 <UART_SetConfig+0x210>)
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d102      	bne.n	800b4e4 <UART_SetConfig+0x110>
 800b4de:	2320      	movs	r3, #32
 800b4e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4e2:	e001      	b.n	800b4e8 <UART_SetConfig+0x114>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	4b3d      	ldr	r3, [pc, #244]	; (800b5e4 <UART_SetConfig+0x210>)
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d005      	beq.n	800b4fe <UART_SetConfig+0x12a>
 800b4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	4b3d      	ldr	r3, [pc, #244]	; (800b5ec <UART_SetConfig+0x218>)
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	f040 8085 	bne.w	800b608 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b4fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b500:	2200      	movs	r2, #0
 800b502:	623b      	str	r3, [r7, #32]
 800b504:	627a      	str	r2, [r7, #36]	; 0x24
 800b506:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b50a:	f7fd fba1 	bl	8008c50 <HAL_RCCEx_GetPeriphCLKFreq>
 800b50e:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 80e8 	beq.w	800b6e8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51c:	4a39      	ldr	r2, [pc, #228]	; (800b604 <UART_SetConfig+0x230>)
 800b51e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b522:	461a      	mov	r2, r3
 800b524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b526:	fbb3 f3f2 	udiv	r3, r3, r2
 800b52a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	4613      	mov	r3, r2
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	4413      	add	r3, r2
 800b536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b538:	429a      	cmp	r2, r3
 800b53a:	d305      	bcc.n	800b548 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b544:	429a      	cmp	r2, r3
 800b546:	d903      	bls.n	800b550 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b54e:	e048      	b.n	800b5e2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b552:	2200      	movs	r2, #0
 800b554:	61bb      	str	r3, [r7, #24]
 800b556:	61fa      	str	r2, [r7, #28]
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55c:	4a29      	ldr	r2, [pc, #164]	; (800b604 <UART_SetConfig+0x230>)
 800b55e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b562:	b29b      	uxth	r3, r3
 800b564:	2200      	movs	r2, #0
 800b566:	613b      	str	r3, [r7, #16]
 800b568:	617a      	str	r2, [r7, #20]
 800b56a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b56e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b572:	f7f5 fb8d 	bl	8000c90 <__aeabi_uldivmod>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4610      	mov	r0, r2
 800b57c:	4619      	mov	r1, r3
 800b57e:	f04f 0200 	mov.w	r2, #0
 800b582:	f04f 0300 	mov.w	r3, #0
 800b586:	020b      	lsls	r3, r1, #8
 800b588:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b58c:	0202      	lsls	r2, r0, #8
 800b58e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b590:	6849      	ldr	r1, [r1, #4]
 800b592:	0849      	lsrs	r1, r1, #1
 800b594:	2000      	movs	r0, #0
 800b596:	460c      	mov	r4, r1
 800b598:	4605      	mov	r5, r0
 800b59a:	eb12 0804 	adds.w	r8, r2, r4
 800b59e:	eb43 0905 	adc.w	r9, r3, r5
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	60bb      	str	r3, [r7, #8]
 800b5aa:	60fa      	str	r2, [r7, #12]
 800b5ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5b0:	4640      	mov	r0, r8
 800b5b2:	4649      	mov	r1, r9
 800b5b4:	f7f5 fb6c 	bl	8000c90 <__aeabi_uldivmod>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4613      	mov	r3, r2
 800b5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5c6:	d308      	bcc.n	800b5da <UART_SetConfig+0x206>
 800b5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5ce:	d204      	bcs.n	800b5da <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5d6:	60da      	str	r2, [r3, #12]
 800b5d8:	e003      	b.n	800b5e2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800b5e0:	e082      	b.n	800b6e8 <UART_SetConfig+0x314>
 800b5e2:	e081      	b.n	800b6e8 <UART_SetConfig+0x314>
 800b5e4:	46002400 	.word	0x46002400
 800b5e8:	cfff69f3 	.word	0xcfff69f3
 800b5ec:	56002400 	.word	0x56002400
 800b5f0:	40013800 	.word	0x40013800
 800b5f4:	40004400 	.word	0x40004400
 800b5f8:	40004800 	.word	0x40004800
 800b5fc:	40004c00 	.word	0x40004c00
 800b600:	40005000 	.word	0x40005000
 800b604:	0801448c 	.word	0x0801448c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b610:	d13c      	bne.n	800b68c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b614:	2200      	movs	r2, #0
 800b616:	603b      	str	r3, [r7, #0]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b61e:	f7fd fb17 	bl	8008c50 <HAL_RCCEx_GetPeriphCLKFreq>
 800b622:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b626:	2b00      	cmp	r3, #0
 800b628:	d05e      	beq.n	800b6e8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62e:	4a39      	ldr	r2, [pc, #228]	; (800b714 <UART_SetConfig+0x340>)
 800b630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b634:	461a      	mov	r2, r3
 800b636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b638:	fbb3 f3f2 	udiv	r3, r3, r2
 800b63c:	005a      	lsls	r2, r3, #1
 800b63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	085b      	lsrs	r3, r3, #1
 800b644:	441a      	add	r2, r3
 800b646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b64e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b652:	2b0f      	cmp	r3, #15
 800b654:	d916      	bls.n	800b684 <UART_SetConfig+0x2b0>
 800b656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b65c:	d212      	bcs.n	800b684 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b660:	b29b      	uxth	r3, r3
 800b662:	f023 030f 	bic.w	r3, r3, #15
 800b666:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b66a:	085b      	lsrs	r3, r3, #1
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	f003 0307 	and.w	r3, r3, #7
 800b672:	b29a      	uxth	r2, r3
 800b674:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b676:	4313      	orrs	r3, r2
 800b678:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b680:	60da      	str	r2, [r3, #12]
 800b682:	e031      	b.n	800b6e8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b68a:	e02d      	b.n	800b6e8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b68e:	2200      	movs	r2, #0
 800b690:	469a      	mov	sl, r3
 800b692:	4693      	mov	fp, r2
 800b694:	4650      	mov	r0, sl
 800b696:	4659      	mov	r1, fp
 800b698:	f7fd fada 	bl	8008c50 <HAL_RCCEx_GetPeriphCLKFreq>
 800b69c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800b69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d021      	beq.n	800b6e8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	4a1a      	ldr	r2, [pc, #104]	; (800b714 <UART_SetConfig+0x340>)
 800b6aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	085b      	lsrs	r3, r3, #1
 800b6bc:	441a      	add	r2, r3
 800b6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ca:	2b0f      	cmp	r3, #15
 800b6cc:	d909      	bls.n	800b6e2 <UART_SetConfig+0x30e>
 800b6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6d4:	d205      	bcs.n	800b6e2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	60da      	str	r2, [r3, #12]
 800b6e0:	e002      	b.n	800b6e8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	2200      	movs	r2, #0
 800b702:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b704:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3750      	adds	r7, #80	; 0x50
 800b70c:	46bd      	mov	sp, r7
 800b70e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b712:	bf00      	nop
 800b714:	0801448c 	.word	0x0801448c

0800b718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00a      	beq.n	800b742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	430a      	orrs	r2, r1
 800b740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b746:	f003 0302 	and.w	r3, r3, #2
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00a      	beq.n	800b764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	430a      	orrs	r2, r1
 800b762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b768:	f003 0304 	and.w	r3, r3, #4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00a      	beq.n	800b786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	430a      	orrs	r2, r1
 800b784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78a:	f003 0308 	and.w	r3, r3, #8
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00a      	beq.n	800b7a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	430a      	orrs	r2, r1
 800b7a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ac:	f003 0310 	and.w	r3, r3, #16
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00a      	beq.n	800b7ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	430a      	orrs	r2, r1
 800b7c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ce:	f003 0320 	and.w	r3, r3, #32
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00a      	beq.n	800b7ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	430a      	orrs	r2, r1
 800b7ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d01a      	beq.n	800b82e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	430a      	orrs	r2, r1
 800b80c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b816:	d10a      	bne.n	800b82e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	430a      	orrs	r2, r1
 800b82c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00a      	beq.n	800b850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	430a      	orrs	r2, r1
 800b84e:	605a      	str	r2, [r3, #4]
  }
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af02      	add	r7, sp, #8
 800b862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b86c:	f7f9 ff10 	bl	8005690 <HAL_GetTick>
 800b870:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0308 	and.w	r3, r3, #8
 800b87c:	2b08      	cmp	r3, #8
 800b87e:	d10e      	bne.n	800b89e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f82f 	bl	800b8f2 <UART_WaitOnFlagUntilTimeout>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d001      	beq.n	800b89e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b89a:	2303      	movs	r3, #3
 800b89c:	e025      	b.n	800b8ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 0304 	and.w	r3, r3, #4
 800b8a8:	2b04      	cmp	r3, #4
 800b8aa:	d10e      	bne.n	800b8ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f819 	bl	800b8f2 <UART_WaitOnFlagUntilTimeout>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	e00f      	b.n	800b8ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2220      	movs	r2, #32
 800b8ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2220      	movs	r2, #32
 800b8d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b09c      	sub	sp, #112	; 0x70
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	60f8      	str	r0, [r7, #12]
 800b8fa:	60b9      	str	r1, [r7, #8]
 800b8fc:	603b      	str	r3, [r7, #0]
 800b8fe:	4613      	mov	r3, r2
 800b900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b902:	e0a9      	b.n	800ba58 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90a:	f000 80a5 	beq.w	800ba58 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b90e:	f7f9 febf 	bl	8005690 <HAL_GetTick>
 800b912:	4602      	mov	r2, r0
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d302      	bcc.n	800b924 <UART_WaitOnFlagUntilTimeout+0x32>
 800b91e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b920:	2b00      	cmp	r3, #0
 800b922:	d140      	bne.n	800b9a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b92c:	e853 3f00 	ldrex	r3, [r3]
 800b930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b938:	667b      	str	r3, [r7, #100]	; 0x64
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	461a      	mov	r2, r3
 800b940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b942:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b944:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b94a:	e841 2300 	strex	r3, r2, [r1]
 800b94e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1e6      	bne.n	800b924 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3308      	adds	r3, #8
 800b95c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b960:	e853 3f00 	ldrex	r3, [r3]
 800b964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b968:	f023 0301 	bic.w	r3, r3, #1
 800b96c:	663b      	str	r3, [r7, #96]	; 0x60
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	3308      	adds	r3, #8
 800b974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b976:	64ba      	str	r2, [r7, #72]	; 0x48
 800b978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b97c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b97e:	e841 2300 	strex	r3, r2, [r1]
 800b982:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1e5      	bne.n	800b956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2220      	movs	r2, #32
 800b98e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2220      	movs	r2, #32
 800b996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	e069      	b.n	800ba7a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d051      	beq.n	800ba58 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	69db      	ldr	r3, [r3, #28]
 800b9ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9c2:	d149      	bne.n	800ba58 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	e853 3f00 	ldrex	r3, [r3]
 800b9da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b9e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9f4:	e841 2300 	strex	r3, r2, [r1]
 800b9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1e6      	bne.n	800b9ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	3308      	adds	r3, #8
 800ba06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	f023 0301 	bic.w	r3, r3, #1
 800ba16:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ba20:	623a      	str	r2, [r7, #32]
 800ba22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba24:	69f9      	ldr	r1, [r7, #28]
 800ba26:	6a3a      	ldr	r2, [r7, #32]
 800ba28:	e841 2300 	strex	r3, r2, [r1]
 800ba2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e5      	bne.n	800ba00 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2220      	movs	r2, #32
 800ba38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2220      	movs	r2, #32
 800ba40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2220      	movs	r2, #32
 800ba48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e010      	b.n	800ba7a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	69da      	ldr	r2, [r3, #28]
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	4013      	ands	r3, r2
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	bf0c      	ite	eq
 800ba68:	2301      	moveq	r3, #1
 800ba6a:	2300      	movne	r3, #0
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	461a      	mov	r2, r3
 800ba70:	79fb      	ldrb	r3, [r7, #7]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	f43f af46 	beq.w	800b904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3770      	adds	r7, #112	; 0x70
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba82:	b480      	push	{r7}
 800ba84:	b085      	sub	sp, #20
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d101      	bne.n	800ba98 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba94:	2302      	movs	r3, #2
 800ba96:	e027      	b.n	800bae8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2224      	movs	r2, #36	; 0x24
 800baa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f022 0201 	bic.w	r2, r2, #1
 800babe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bac6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2220      	movs	r2, #32
 800bada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d101      	bne.n	800bb0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb08:	2302      	movs	r3, #2
 800bb0a:	e02d      	b.n	800bb68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2224      	movs	r2, #36	; 0x24
 800bb18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f022 0201 	bic.w	r2, r2, #1
 800bb32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	430a      	orrs	r2, r1
 800bb46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f84f 	bl	800bbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d101      	bne.n	800bb88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb84:	2302      	movs	r3, #2
 800bb86:	e02d      	b.n	800bbe4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2224      	movs	r2, #36	; 0x24
 800bb94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f022 0201 	bic.w	r2, r2, #1
 800bbae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	430a      	orrs	r2, r1
 800bbc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f811 	bl	800bbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2220      	movs	r2, #32
 800bbd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d108      	bne.n	800bc0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc0c:	e031      	b.n	800bc72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc0e:	2308      	movs	r3, #8
 800bc10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc12:	2308      	movs	r3, #8
 800bc14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	0e5b      	lsrs	r3, r3, #25
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	f003 0307 	and.w	r3, r3, #7
 800bc24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	0f5b      	lsrs	r3, r3, #29
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	f003 0307 	and.w	r3, r3, #7
 800bc34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
 800bc38:	7b3a      	ldrb	r2, [r7, #12]
 800bc3a:	4911      	ldr	r1, [pc, #68]	; (800bc80 <UARTEx_SetNbDataToProcess+0x94>)
 800bc3c:	5c8a      	ldrb	r2, [r1, r2]
 800bc3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc42:	7b3a      	ldrb	r2, [r7, #12]
 800bc44:	490f      	ldr	r1, [pc, #60]	; (800bc84 <UARTEx_SetNbDataToProcess+0x98>)
 800bc46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc48:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
 800bc56:	7b7a      	ldrb	r2, [r7, #13]
 800bc58:	4909      	ldr	r1, [pc, #36]	; (800bc80 <UARTEx_SetNbDataToProcess+0x94>)
 800bc5a:	5c8a      	ldrb	r2, [r1, r2]
 800bc5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc60:	7b7a      	ldrb	r2, [r7, #13]
 800bc62:	4908      	ldr	r1, [pc, #32]	; (800bc84 <UARTEx_SetNbDataToProcess+0x98>)
 800bc64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc66:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bc72:	bf00      	nop
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	080144a4 	.word	0x080144a4
 800bc84:	080144ac 	.word	0x080144ac

0800bc88 <aiInit>:
float32_t *p_out1;



int aiInit(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 800bc8e:	4b10      	ldr	r3, [pc, #64]	; (800bcd0 <aiInit+0x48>)
 800bc90:	603b      	str	r3, [r7, #0]
  err = ai_network_create_and_init(&network, acts, NULL);
 800bc92:	463b      	mov	r3, r7
 800bc94:	2200      	movs	r2, #0
 800bc96:	4619      	mov	r1, r3
 800bc98:	480e      	ldr	r0, [pc, #56]	; (800bcd4 <aiInit+0x4c>)
 800bc9a:	f000 f973 	bl	800bf84 <ai_network_create_and_init>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {

  };

  /* Retrieve pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network , NULL);
 800bca2:	4b0c      	ldr	r3, [pc, #48]	; (800bcd4 <aiInit+0x4c>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2100      	movs	r1, #0
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f000 f9df 	bl	800c06c <ai_network_inputs_get>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	4a09      	ldr	r2, [pc, #36]	; (800bcd8 <aiInit+0x50>)
 800bcb2:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800bcb4:	4b07      	ldr	r3, [pc, #28]	; (800bcd4 <aiInit+0x4c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2100      	movs	r1, #0
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 f9f0 	bl	800c0a0 <ai_network_outputs_get>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	4a06      	ldr	r2, [pc, #24]	; (800bcdc <aiInit+0x54>)
 800bcc4:	6013      	str	r3, [r2, #0]

  return 0;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	20001cc0 	.word	0x20001cc0
 800bcd4:	20001cac 	.word	0x20001cac
 800bcd8:	20001e50 	.word	0x20001e50
 800bcdc:	20001e54 	.word	0x20001e54

0800bce0 <aiProcess>:



int aiProcess(float *p_inData, float p_out_data[2])
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(p_inData);
 800bcea:	4b23      	ldr	r3, [pc, #140]	; (800bd78 <aiProcess+0x98>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data[0]);
 800bcf2:	4b22      	ldr	r3, [pc, #136]	; (800bd7c <aiProcess+0x9c>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a22      	ldr	r2, [pc, #136]	; (800bd80 <aiProcess+0xa0>)
 800bcf8:	6812      	ldr	r2, [r2, #0]
 800bcfa:	605a      	str	r2, [r3, #4]
	  ai_output[1].data = AI_HANDLE_PTR(out_data[1]);
  }

  if (AI_NETWORK_OUT_NUM == 1){
	  /* 2 - Perform the inference */
	  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800bcfc:	4b21      	ldr	r3, [pc, #132]	; (800bd84 <aiProcess+0xa4>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a1d      	ldr	r2, [pc, #116]	; (800bd78 <aiProcess+0x98>)
 800bd02:	6811      	ldr	r1, [r2, #0]
 800bd04:	4a1d      	ldr	r2, [pc, #116]	; (800bd7c <aiProcess+0x9c>)
 800bd06:	6812      	ldr	r2, [r2, #0]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f000 fa1f 	bl	800c14c <ai_network_run>
 800bd0e:	6178      	str	r0, [r7, #20]
	  p_out0 = (float32_t*) ai_output[0].data;
 800bd10:	4b1a      	ldr	r3, [pc, #104]	; (800bd7c <aiProcess+0x9c>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	4a1c      	ldr	r2, [pc, #112]	; (800bd88 <aiProcess+0xa8>)
 800bd18:	6013      	str	r3, [r2, #0]
	  float32_t max_out = *p_out0;
 800bd1a:	4b1b      	ldr	r3, [pc, #108]	; (800bd88 <aiProcess+0xa8>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	613b      	str	r3, [r7, #16]
	  uint32_t max_idx = 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	60fb      	str	r3, [r7, #12]

	  arm_max_f32(p_out0,AI_NETWORK_OUT_1_SIZE, &max_out, &max_idx);
 800bd26:	4b18      	ldr	r3, [pc, #96]	; (800bd88 <aiProcess+0xa8>)
 800bd28:	6818      	ldr	r0, [r3, #0]
 800bd2a:	f107 030c 	add.w	r3, r7, #12
 800bd2e:	f107 0210 	add.w	r2, r7, #16
 800bd32:	2103      	movs	r1, #3
 800bd34:	f000 fa82 	bl	800c23c <arm_max_f32>
	  p_out_data[0] = (float32_t)max_idx;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	ee07 3a90 	vmov	s15, r3
 800bd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[1] = max_out * 100.0;
 800bd48:	edd7 7a04 	vldr	s15, [r7, #16]
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	3304      	adds	r3, #4
 800bd50:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800bd8c <aiProcess+0xac>
 800bd54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd58:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[0] = (float32_t)p_out0[0];
	  p_out_data[1] = (float32_t)p_out1[(int) p_out0[0]];

  }

  if (n_batch != 1) {
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d004      	beq.n	800bd6c <aiProcess+0x8c>
	  ai_network_get_error(network);
 800bd62:	4b08      	ldr	r3, [pc, #32]	; (800bd84 <aiProcess+0xa4>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f000 f8ea 	bl	800bf40 <ai_network_get_error>
  };


  return 0;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20001e50 	.word	0x20001e50
 800bd7c:	20001e54 	.word	0x20001e54
 800bd80:	200000ac 	.word	0x200000ac
 800bd84:	20001cac 	.word	0x20001cac
 800bd88:	20001e58 	.word	0x20001e58
 800bd8c:	42c80000 	.word	0x42c80000

0800bd90 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800bd9e:	f107 030c 	add.w	r3, r7, #12
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	2101      	movs	r1, #1
 800bda6:	4618      	mov	r0, r3
 800bda8:	f001 fcec 	bl	800d784 <ai_platform_get_activations_map>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d023      	beq.n	800bdfa <network_configure_activations+0x6a>
    /* Updating activations (byte) offsets */
    dense_3_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	4a16      	ldr	r2, [pc, #88]	; (800be10 <network_configure_activations+0x80>)
 800bdb6:	6093      	str	r3, [r2, #8]
    dense_3_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	4a15      	ldr	r2, [pc, #84]	; (800be10 <network_configure_activations+0x80>)
 800bdbc:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations_map[0] + 0);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	4a14      	ldr	r2, [pc, #80]	; (800be14 <network_configure_activations+0x84>)
 800bdc2:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4a13      	ldr	r2, [pc, #76]	; (800be14 <network_configure_activations+0x84>)
 800bdc8:	60d3      	str	r3, [r2, #12]
    dense_4_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	33c8      	adds	r3, #200	; 0xc8
 800bdce:	4a12      	ldr	r2, [pc, #72]	; (800be18 <network_configure_activations+0x88>)
 800bdd0:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	33c8      	adds	r3, #200	; 0xc8
 800bdd6:	4a10      	ldr	r2, [pc, #64]	; (800be18 <network_configure_activations+0x88>)
 800bdd8:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 0);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	4a0f      	ldr	r2, [pc, #60]	; (800be1c <network_configure_activations+0x8c>)
 800bdde:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4a0e      	ldr	r2, [pc, #56]	; (800be1c <network_configure_activations+0x8c>)
 800bde4:	60d3      	str	r3, [r2, #12]
    dense_5_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	33c8      	adds	r3, #200	; 0xc8
 800bdea:	4a0d      	ldr	r2, [pc, #52]	; (800be20 <network_configure_activations+0x90>)
 800bdec:	6093      	str	r3, [r2, #8]
    dense_5_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	33c8      	adds	r3, #200	; 0xc8
 800bdf2:	4a0b      	ldr	r2, [pc, #44]	; (800be20 <network_configure_activations+0x90>)
 800bdf4:	60d3      	str	r3, [r2, #12]
    
    return true;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e005      	b.n	800be06 <network_configure_activations+0x76>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800bdfa:	2213      	movs	r2, #19
 800bdfc:	2130      	movs	r1, #48	; 0x30
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 fdd0 	bl	800d9a4 <ai_platform_network_set_error>
  return false;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	200000c0 	.word	0x200000c0
 800be14:	200000d0 	.word	0x200000d0
 800be18:	200000e0 	.word	0x200000e0
 800be1c:	200000f0 	.word	0x200000f0
 800be20:	20000100 	.word	0x20000100

0800be24 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800be32:	f107 030c 	add.w	r3, r7, #12
 800be36:	683a      	ldr	r2, [r7, #0]
 800be38:	2101      	movs	r1, #1
 800be3a:	4618      	mov	r0, r3
 800be3c:	f001 fc52 	bl	800d6e4 <ai_platform_get_weights_map>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d065      	beq.n	800bf12 <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800be46:	4b38      	ldr	r3, [pc, #224]	; (800bf28 <network_configure_weights+0x104>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be4e:	4a36      	ldr	r2, [pc, #216]	; (800bf28 <network_configure_weights+0x104>)
 800be50:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(weights_map[0] + 0);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	4a34      	ldr	r2, [pc, #208]	; (800bf28 <network_configure_weights+0x104>)
 800be56:	6093      	str	r3, [r2, #8]
    dense_3_dense_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	4a33      	ldr	r2, [pc, #204]	; (800bf28 <network_configure_weights+0x104>)
 800be5c:	60d3      	str	r3, [r2, #12]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800be5e:	4b33      	ldr	r3, [pc, #204]	; (800bf2c <network_configure_weights+0x108>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be66:	4a31      	ldr	r2, [pc, #196]	; (800bf2c <network_configure_weights+0x108>)
 800be68:	6013      	str	r3, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(weights_map[0] + 25600);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 800be70:	4a2e      	ldr	r2, [pc, #184]	; (800bf2c <network_configure_weights+0x108>)
 800be72:	6093      	str	r3, [r2, #8]
    dense_3_dense_bias_array.data_start = AI_PTR(weights_map[0] + 25600);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 800be7a:	4a2c      	ldr	r2, [pc, #176]	; (800bf2c <network_configure_weights+0x108>)
 800be7c:	60d3      	str	r3, [r2, #12]
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800be7e:	4b2c      	ldr	r3, [pc, #176]	; (800bf30 <network_configure_weights+0x10c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be86:	4a2a      	ldr	r2, [pc, #168]	; (800bf30 <network_configure_weights+0x10c>)
 800be88:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(weights_map[0] + 25800);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 800be90:	3348      	adds	r3, #72	; 0x48
 800be92:	4a27      	ldr	r2, [pc, #156]	; (800bf30 <network_configure_weights+0x10c>)
 800be94:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(weights_map[0] + 25800);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 800be9c:	3348      	adds	r3, #72	; 0x48
 800be9e:	4a24      	ldr	r2, [pc, #144]	; (800bf30 <network_configure_weights+0x10c>)
 800bea0:	60d3      	str	r3, [r2, #12]
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800bea2:	4b24      	ldr	r3, [pc, #144]	; (800bf34 <network_configure_weights+0x110>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800beaa:	4a22      	ldr	r2, [pc, #136]	; (800bf34 <network_configure_weights+0x110>)
 800beac:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(weights_map[0] + 35800);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 800beb4:	33d8      	adds	r3, #216	; 0xd8
 800beb6:	4a1f      	ldr	r2, [pc, #124]	; (800bf34 <network_configure_weights+0x110>)
 800beb8:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(weights_map[0] + 35800);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 800bec0:	33d8      	adds	r3, #216	; 0xd8
 800bec2:	4a1c      	ldr	r2, [pc, #112]	; (800bf34 <network_configure_weights+0x110>)
 800bec4:	60d3      	str	r3, [r2, #12]
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800bec6:	4b1c      	ldr	r3, [pc, #112]	; (800bf38 <network_configure_weights+0x114>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bece:	4a1a      	ldr	r2, [pc, #104]	; (800bf38 <network_configure_weights+0x114>)
 800bed0:	6013      	str	r3, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(weights_map[0] + 36000);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800bed8:	33a0      	adds	r3, #160	; 0xa0
 800beda:	4a17      	ldr	r2, [pc, #92]	; (800bf38 <network_configure_weights+0x114>)
 800bedc:	6093      	str	r3, [r2, #8]
    dense_5_dense_weights_array.data_start = AI_PTR(weights_map[0] + 36000);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800bee4:	33a0      	adds	r3, #160	; 0xa0
 800bee6:	4a14      	ldr	r2, [pc, #80]	; (800bf38 <network_configure_weights+0x114>)
 800bee8:	60d3      	str	r3, [r2, #12]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800beea:	4b14      	ldr	r3, [pc, #80]	; (800bf3c <network_configure_weights+0x118>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bef2:	4a12      	ldr	r2, [pc, #72]	; (800bf3c <network_configure_weights+0x118>)
 800bef4:	6013      	str	r3, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 36600);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 800befc:	33f8      	adds	r3, #248	; 0xf8
 800befe:	4a0f      	ldr	r2, [pc, #60]	; (800bf3c <network_configure_weights+0x118>)
 800bf00:	6093      	str	r3, [r2, #8]
    dense_5_dense_bias_array.data_start = AI_PTR(weights_map[0] + 36600);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 800bf08:	33f8      	adds	r3, #248	; 0xf8
 800bf0a:	4a0c      	ldr	r2, [pc, #48]	; (800bf3c <network_configure_weights+0x118>)
 800bf0c:	60d3      	str	r3, [r2, #12]
    return true;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e005      	b.n	800bf1e <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800bf12:	2212      	movs	r2, #18
 800bf14:	2130      	movs	r1, #48	; 0x30
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f001 fd44 	bl	800d9a4 <ai_platform_network_set_error>
  return false;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20000120 	.word	0x20000120
 800bf2c:	20000130 	.word	0x20000130
 800bf30:	20000140 	.word	0x20000140
 800bf34:	20000150 	.word	0x20000150
 800bf38:	20000160 	.word	0x20000160
 800bf3c:	20000170 	.word	0x20000170

0800bf40 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f001 fc8d 	bl	800d868 <ai_platform_network_get_error>
 800bf4e:	4603      	mov	r3, r0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af02      	add	r7, sp, #8
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800bf62:	2300      	movs	r3, #0
 800bf64:	9301      	str	r3, [sp, #4]
 800bf66:	2305      	movs	r3, #5
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	4a04      	ldr	r2, [pc, #16]	; (800bf80 <ai_network_create+0x28>)
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f001 ff55 	bl	800de20 <ai_platform_network_create>
 800bf76:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	20000738 	.word	0x20000738

0800bf84 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b096      	sub	sp, #88	; 0x58
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800bf90:	2100      	movs	r1, #0
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f7ff ffe0 	bl	800bf58 <ai_network_create>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800bf9c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d001      	beq.n	800bfa8 <ai_network_create_and_init+0x24>
        return err;
 800bfa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa6:	e05d      	b.n	800c064 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 800bfa8:	f107 0314 	add.w	r3, r7, #20
 800bfac:	4618      	mov	r0, r3
 800bfae:	f000 f8dd 	bl	800c16c <ai_network_data_params_get>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	f083 0301 	eor.w	r3, r3, #1
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d008      	beq.n	800bfd0 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7ff ffbc 	bl	800bf40 <ai_network_get_error>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800bfcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfce:	e049      	b.n	800c064 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d016      	beq.n	800c004 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	657b      	str	r3, [r7, #84]	; 0x54
 800bfda:	e00e      	b.n	800bffa <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800bfdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	f107 0314 	add.w	r3, r7, #20
 800bfec:	330c      	adds	r3, #12
 800bfee:	4618      	mov	r0, r3
 800bff0:	f001 fb62 	bl	800d6b8 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800bff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bff6:	3301      	adds	r3, #1
 800bff8:	657b      	str	r3, [r7, #84]	; 0x54
 800bffa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bffc:	461a      	mov	r2, r3
 800bffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c000:	4293      	cmp	r3, r2
 800c002:	dbeb      	blt.n	800bfdc <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d016      	beq.n	800c038 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800c00a:	2300      	movs	r3, #0
 800c00c:	653b      	str	r3, [r7, #80]	; 0x50
 800c00e:	e00e      	b.n	800c02e <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800c010:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	4413      	add	r3, r2
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	f107 0314 	add.w	r3, r7, #20
 800c020:	3304      	adds	r3, #4
 800c022:	4618      	mov	r0, r3
 800c024:	f001 fb48 	bl	800d6b8 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800c028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c02a:	3301      	adds	r3, #1
 800c02c:	653b      	str	r3, [r7, #80]	; 0x50
 800c02e:	8b7b      	ldrh	r3, [r7, #26]
 800c030:	461a      	mov	r2, r3
 800c032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c034:	4293      	cmp	r3, r2
 800c036:	dbeb      	blt.n	800c010 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f107 0214 	add.w	r2, r7, #20
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f000 f846 	bl	800c0d4 <ai_network_init>
 800c048:	4603      	mov	r3, r0
 800c04a:	f083 0301 	eor.w	r3, r3, #1
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d006      	beq.n	800c062 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff ff71 	bl	800bf40 <ai_network_get_error>
 800c05e:	4603      	mov	r3, r0
 800c060:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800c062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800c064:	4618      	mov	r0, r3
 800c066:	3758      	adds	r7, #88	; 0x58
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d104      	bne.n	800c086 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800c07c:	4b06      	ldr	r3, [pc, #24]	; (800c098 <ai_network_inputs_get+0x2c>)
 800c07e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4a06      	ldr	r2, [pc, #24]	; (800c09c <ai_network_inputs_get+0x30>)
 800c084:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f001 fc91 	bl	800d9b0 <ai_platform_inputs_get>
 800c08e:	4603      	mov	r3, r0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	20000738 	.word	0x20000738
 800c09c:	a1c00100 	.word	0xa1c00100

0800c0a0 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d104      	bne.n	800c0ba <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800c0b0:	4b06      	ldr	r3, [pc, #24]	; (800c0cc <ai_network_outputs_get+0x2c>)
 800c0b2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4a06      	ldr	r2, [pc, #24]	; (800c0d0 <ai_network_outputs_get+0x30>)
 800c0b8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f001 fd91 	bl	800dbe4 <ai_platform_outputs_get>
 800c0c2:	4603      	mov	r3, r0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	20000738 	.word	0x20000738
 800c0d0:	a1c00100 	.word	0xa1c00100

0800c0d4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f001 ff9f 	bl	800e024 <ai_platform_network_init>
 800c0e6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <ai_network_init+0x1e>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e028      	b.n	800c144 <ai_network_init+0x70>

  ai_bool ok = true;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f7ff fe93 	bl	800be24 <network_configure_weights>
 800c0fe:	4603      	mov	r3, r0
 800c100:	461a      	mov	r2, r3
 800c102:	7afb      	ldrb	r3, [r7, #11]
 800c104:	4013      	ands	r3, r2
 800c106:	2b00      	cmp	r3, #0
 800c108:	bf14      	ite	ne
 800c10a:	2301      	movne	r3, #1
 800c10c:	2300      	moveq	r3, #0
 800c10e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f7ff fe3c 	bl	800bd90 <network_configure_activations>
 800c118:	4603      	mov	r3, r0
 800c11a:	461a      	mov	r2, r3
 800c11c:	7afb      	ldrb	r3, [r7, #11]
 800c11e:	4013      	ands	r3, r2
 800c120:	2b00      	cmp	r3, #0
 800c122:	bf14      	ite	ne
 800c124:	2301      	movne	r3, #1
 800c126:	2300      	moveq	r3, #0
 800c128:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f002 f8b0 	bl	800e290 <ai_platform_network_post_init>
 800c130:	4603      	mov	r3, r0
 800c132:	461a      	mov	r2, r3
 800c134:	7afb      	ldrb	r3, [r7, #11]
 800c136:	4013      	ands	r3, r2
 800c138:	2b00      	cmp	r3, #0
 800c13a:	bf14      	ite	ne
 800c13c:	2301      	movne	r3, #1
 800c13e:	2300      	moveq	r3, #0
 800c140:	72fb      	strb	r3, [r7, #11]

  return ok;
 800c142:	7afb      	ldrb	r3, [r7, #11]
}
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	68b9      	ldr	r1, [r7, #8]
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f002 f94f 	bl	800e400 <ai_platform_network_process>
 800c162:	4603      	mov	r3, r0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d101      	bne.n	800c17e <ai_network_data_params_get+0x12>
 800c17a:	2300      	movs	r3, #0
 800c17c:	e016      	b.n	800c1ac <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800c17e:	4a0d      	ldr	r2, [pc, #52]	; (800c1b4 <ai_network_data_params_get+0x48>)
 800c180:	f107 0310 	add.w	r3, r7, #16
 800c184:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c188:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800c18c:	4a0a      	ldr	r2, [pc, #40]	; (800c1b8 <ai_network_data_params_get+0x4c>)
 800c18e:	f107 0308 	add.w	r3, r7, #8
 800c192:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c196:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800c19a:	f107 0210 	add.w	r2, r7, #16
 800c19e:	f107 0308 	add.w	r3, r7, #8
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f001 fb3d 	bl	800d824 <ai_platform_bind_network_params>
 800c1aa:	4603      	mov	r3, r0
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3718      	adds	r7, #24
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	0801437c 	.word	0x0801437c
 800c1b8:	08014384 	.word	0x08014384

0800c1bc <arm_mean_f32>:
 800c1bc:	b430      	push	{r4, r5}
 800c1be:	088d      	lsrs	r5, r1, #2
 800c1c0:	d037      	beq.n	800c232 <arm_mean_f32+0x76>
 800c1c2:	f100 0310 	add.w	r3, r0, #16
 800c1c6:	462c      	mov	r4, r5
 800c1c8:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800c238 <arm_mean_f32+0x7c>
 800c1cc:	ed13 7a04 	vldr	s14, [r3, #-16]
 800c1d0:	3c01      	subs	r4, #1
 800c1d2:	ed13 6a03 	vldr	s12, [r3, #-12]
 800c1d6:	f103 0310 	add.w	r3, r3, #16
 800c1da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1de:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800c1e2:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800c1e6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1f2:	d1eb      	bne.n	800c1cc <arm_mean_f32+0x10>
 800c1f4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800c1f8:	f011 0303 	ands.w	r3, r1, #3
 800c1fc:	d00f      	beq.n	800c21e <arm_mean_f32+0x62>
 800c1fe:	ed90 7a00 	vldr	s14, [r0]
 800c202:	3b01      	subs	r3, #1
 800c204:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c208:	d009      	beq.n	800c21e <arm_mean_f32+0x62>
 800c20a:	ed90 7a01 	vldr	s14, [r0, #4]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c214:	d003      	beq.n	800c21e <arm_mean_f32+0x62>
 800c216:	ed90 7a02 	vldr	s14, [r0, #8]
 800c21a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c21e:	ee07 1a10 	vmov	s14, r1
 800c222:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c226:	bc30      	pop	{r4, r5}
 800c228:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c22c:	edc2 6a00 	vstr	s13, [r2]
 800c230:	4770      	bx	lr
 800c232:	eddf 7a01 	vldr	s15, [pc, #4]	; 800c238 <arm_mean_f32+0x7c>
 800c236:	e7df      	b.n	800c1f8 <arm_mean_f32+0x3c>
 800c238:	00000000 	.word	0x00000000

0800c23c <arm_max_f32>:
 800c23c:	f101 3cff 	add.w	ip, r1, #4294967295
 800c240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c242:	4607      	mov	r7, r0
 800c244:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800c248:	ecf7 7a01 	vldmia	r7!, {s15}
 800c24c:	d05c      	beq.n	800c308 <arm_max_f32+0xcc>
 800c24e:	2400      	movs	r4, #0
 800c250:	3014      	adds	r0, #20
 800c252:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800c256:	4625      	mov	r5, r4
 800c258:	ed10 7a04 	vldr	s14, [r0, #-16]
 800c25c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c264:	d502      	bpl.n	800c26c <arm_max_f32+0x30>
 800c266:	eef0 7a47 	vmov.f32	s15, s14
 800c26a:	1c65      	adds	r5, r4, #1
 800c26c:	ed10 7a03 	vldr	s14, [r0, #-12]
 800c270:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c278:	d502      	bpl.n	800c280 <arm_max_f32+0x44>
 800c27a:	eef0 7a47 	vmov.f32	s15, s14
 800c27e:	1ca5      	adds	r5, r4, #2
 800c280:	ed10 7a02 	vldr	s14, [r0, #-8]
 800c284:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28c:	d502      	bpl.n	800c294 <arm_max_f32+0x58>
 800c28e:	eef0 7a47 	vmov.f32	s15, s14
 800c292:	1ce5      	adds	r5, r4, #3
 800c294:	ed10 7a01 	vldr	s14, [r0, #-4]
 800c298:	3404      	adds	r4, #4
 800c29a:	3010      	adds	r0, #16
 800c29c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a4:	d502      	bpl.n	800c2ac <arm_max_f32+0x70>
 800c2a6:	eef0 7a47 	vmov.f32	s15, s14
 800c2aa:	4625      	mov	r5, r4
 800c2ac:	42a6      	cmp	r6, r4
 800c2ae:	d1d3      	bne.n	800c258 <arm_max_f32+0x1c>
 800c2b0:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800c2b4:	f01c 0003 	ands.w	r0, ip, #3
 800c2b8:	d01e      	beq.n	800c2f8 <arm_max_f32+0xbc>
 800c2ba:	ed97 7a00 	vldr	s14, [r7]
 800c2be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c6:	dc1b      	bgt.n	800c300 <arm_max_f32+0xc4>
 800c2c8:	3801      	subs	r0, #1
 800c2ca:	d015      	beq.n	800c2f8 <arm_max_f32+0xbc>
 800c2cc:	ed97 7a01 	vldr	s14, [r7, #4]
 800c2d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d8:	d502      	bpl.n	800c2e0 <arm_max_f32+0xa4>
 800c2da:	eef0 7a47 	vmov.f32	s15, s14
 800c2de:	1a0d      	subs	r5, r1, r0
 800c2e0:	2801      	cmp	r0, #1
 800c2e2:	d009      	beq.n	800c2f8 <arm_max_f32+0xbc>
 800c2e4:	ed97 7a02 	vldr	s14, [r7, #8]
 800c2e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f0:	dd02      	ble.n	800c2f8 <arm_max_f32+0xbc>
 800c2f2:	eef0 7a47 	vmov.f32	s15, s14
 800c2f6:	4665      	mov	r5, ip
 800c2f8:	edc2 7a00 	vstr	s15, [r2]
 800c2fc:	601d      	str	r5, [r3, #0]
 800c2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c300:	eef0 7a47 	vmov.f32	s15, s14
 800c304:	1a0d      	subs	r5, r1, r0
 800c306:	e7df      	b.n	800c2c8 <arm_max_f32+0x8c>
 800c308:	4675      	mov	r5, lr
 800c30a:	e7d3      	b.n	800c2b4 <arm_max_f32+0x78>

0800c30c <arm_rfft_32_fast_init_f32>:
 800c30c:	b180      	cbz	r0, 800c330 <arm_rfft_32_fast_init_f32+0x24>
 800c30e:	4603      	mov	r3, r0
 800c310:	2220      	movs	r2, #32
 800c312:	2010      	movs	r0, #16
 800c314:	4908      	ldr	r1, [pc, #32]	; (800c338 <arm_rfft_32_fast_init_f32+0x2c>)
 800c316:	b430      	push	{r4, r5}
 800c318:	2514      	movs	r5, #20
 800c31a:	4c08      	ldr	r4, [pc, #32]	; (800c33c <arm_rfft_32_fast_init_f32+0x30>)
 800c31c:	821a      	strh	r2, [r3, #16]
 800c31e:	4a08      	ldr	r2, [pc, #32]	; (800c340 <arm_rfft_32_fast_init_f32+0x34>)
 800c320:	8018      	strh	r0, [r3, #0]
 800c322:	2000      	movs	r0, #0
 800c324:	819d      	strh	r5, [r3, #12]
 800c326:	615a      	str	r2, [r3, #20]
 800c328:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c32c:	bc30      	pop	{r4, r5}
 800c32e:	4770      	bx	lr
 800c330:	f04f 30ff 	mov.w	r0, #4294967295
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	08053af4 	.word	0x08053af4
 800c33c:	080337b8 	.word	0x080337b8
 800c340:	08064874 	.word	0x08064874

0800c344 <arm_rfft_64_fast_init_f32>:
 800c344:	b180      	cbz	r0, 800c368 <arm_rfft_64_fast_init_f32+0x24>
 800c346:	4603      	mov	r3, r0
 800c348:	2240      	movs	r2, #64	; 0x40
 800c34a:	2020      	movs	r0, #32
 800c34c:	4908      	ldr	r1, [pc, #32]	; (800c370 <arm_rfft_64_fast_init_f32+0x2c>)
 800c34e:	b430      	push	{r4, r5}
 800c350:	2530      	movs	r5, #48	; 0x30
 800c352:	4c08      	ldr	r4, [pc, #32]	; (800c374 <arm_rfft_64_fast_init_f32+0x30>)
 800c354:	821a      	strh	r2, [r3, #16]
 800c356:	4a08      	ldr	r2, [pc, #32]	; (800c378 <arm_rfft_64_fast_init_f32+0x34>)
 800c358:	8018      	strh	r0, [r3, #0]
 800c35a:	2000      	movs	r0, #0
 800c35c:	819d      	strh	r5, [r3, #12]
 800c35e:	615a      	str	r2, [r3, #20]
 800c360:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c364:	bc30      	pop	{r4, r5}
 800c366:	4770      	bx	lr
 800c368:	f04f 30ff 	mov.w	r0, #4294967295
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	08058374 	.word	0x08058374
 800c374:	08035910 	.word	0x08035910
 800c378:	080690f4 	.word	0x080690f4

0800c37c <arm_rfft_256_fast_init_f32>:
 800c37c:	b188      	cbz	r0, 800c3a2 <arm_rfft_256_fast_init_f32+0x26>
 800c37e:	4603      	mov	r3, r0
 800c380:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c384:	2080      	movs	r0, #128	; 0x80
 800c386:	4908      	ldr	r1, [pc, #32]	; (800c3a8 <arm_rfft_256_fast_init_f32+0x2c>)
 800c388:	b430      	push	{r4, r5}
 800c38a:	25d0      	movs	r5, #208	; 0xd0
 800c38c:	4c07      	ldr	r4, [pc, #28]	; (800c3ac <arm_rfft_256_fast_init_f32+0x30>)
 800c38e:	821a      	strh	r2, [r3, #16]
 800c390:	4a07      	ldr	r2, [pc, #28]	; (800c3b0 <arm_rfft_256_fast_init_f32+0x34>)
 800c392:	8018      	strh	r0, [r3, #0]
 800c394:	2000      	movs	r0, #0
 800c396:	819d      	strh	r5, [r3, #12]
 800c398:	615a      	str	r2, [r3, #20]
 800c39a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c39e:	bc30      	pop	{r4, r5}
 800c3a0:	4770      	bx	lr
 800c3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a6:	4770      	bx	lr
 800c3a8:	080536f4 	.word	0x080536f4
 800c3ac:	08033618 	.word	0x08033618
 800c3b0:	08064474 	.word	0x08064474

0800c3b4 <arm_rfft_512_fast_init_f32>:
 800c3b4:	b198      	cbz	r0, 800c3de <arm_rfft_512_fast_init_f32+0x2a>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c3c0:	4908      	ldr	r1, [pc, #32]	; (800c3e4 <arm_rfft_512_fast_init_f32+0x30>)
 800c3c2:	b430      	push	{r4, r5}
 800c3c4:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800c3c8:	4c07      	ldr	r4, [pc, #28]	; (800c3e8 <arm_rfft_512_fast_init_f32+0x34>)
 800c3ca:	821a      	strh	r2, [r3, #16]
 800c3cc:	4a07      	ldr	r2, [pc, #28]	; (800c3ec <arm_rfft_512_fast_init_f32+0x38>)
 800c3ce:	8018      	strh	r0, [r3, #0]
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	819d      	strh	r5, [r3, #12]
 800c3d4:	615a      	str	r2, [r3, #20]
 800c3d6:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c3da:	bc30      	pop	{r4, r5}
 800c3dc:	4770      	bx	lr
 800c3de:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e2:	4770      	bx	lr
 800c3e4:	08057b74 	.word	0x08057b74
 800c3e8:	080355a0 	.word	0x080355a0
 800c3ec:	080688f4 	.word	0x080688f4

0800c3f0 <arm_rfft_1024_fast_init_f32>:
 800c3f0:	b198      	cbz	r0, 800c41a <arm_rfft_1024_fast_init_f32+0x2a>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c3f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c3fc:	4908      	ldr	r1, [pc, #32]	; (800c420 <arm_rfft_1024_fast_init_f32+0x30>)
 800c3fe:	b430      	push	{r4, r5}
 800c400:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800c404:	4c07      	ldr	r4, [pc, #28]	; (800c424 <arm_rfft_1024_fast_init_f32+0x34>)
 800c406:	821a      	strh	r2, [r3, #16]
 800c408:	4a07      	ldr	r2, [pc, #28]	; (800c428 <arm_rfft_1024_fast_init_f32+0x38>)
 800c40a:	8018      	strh	r0, [r3, #0]
 800c40c:	2000      	movs	r0, #0
 800c40e:	819d      	strh	r5, [r3, #12]
 800c410:	615a      	str	r2, [r3, #20]
 800c412:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c416:	bc30      	pop	{r4, r5}
 800c418:	4770      	bx	lr
 800c41a:	f04f 30ff 	mov.w	r0, #4294967295
 800c41e:	4770      	bx	lr
 800c420:	08060474 	.word	0x08060474
 800c424:	08035970 	.word	0x08035970
 800c428:	08061474 	.word	0x08061474

0800c42c <arm_rfft_2048_fast_init_f32>:
 800c42c:	b198      	cbz	r0, 800c456 <arm_rfft_2048_fast_init_f32+0x2a>
 800c42e:	4603      	mov	r3, r0
 800c430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c434:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c438:	4908      	ldr	r1, [pc, #32]	; (800c45c <arm_rfft_2048_fast_init_f32+0x30>)
 800c43a:	b430      	push	{r4, r5}
 800c43c:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800c440:	4c07      	ldr	r4, [pc, #28]	; (800c460 <arm_rfft_2048_fast_init_f32+0x34>)
 800c442:	821a      	strh	r2, [r3, #16]
 800c444:	4a07      	ldr	r2, [pc, #28]	; (800c464 <arm_rfft_2048_fast_init_f32+0x38>)
 800c446:	8018      	strh	r0, [r3, #0]
 800c448:	2000      	movs	r0, #0
 800c44a:	819d      	strh	r5, [r3, #12]
 800c44c:	615a      	str	r2, [r3, #20]
 800c44e:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c452:	bc30      	pop	{r4, r5}
 800c454:	4770      	bx	lr
 800c456:	f04f 30ff 	mov.w	r0, #4294967295
 800c45a:	4770      	bx	lr
 800c45c:	080516f4 	.word	0x080516f4
 800c460:	08032808 	.word	0x08032808
 800c464:	08062474 	.word	0x08062474

0800c468 <arm_rfft_4096_fast_init_f32>:
 800c468:	b198      	cbz	r0, 800c492 <arm_rfft_4096_fast_init_f32+0x2a>
 800c46a:	4603      	mov	r3, r0
 800c46c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c470:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c474:	4908      	ldr	r1, [pc, #32]	; (800c498 <arm_rfft_4096_fast_init_f32+0x30>)
 800c476:	b430      	push	{r4, r5}
 800c478:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800c47c:	4c07      	ldr	r4, [pc, #28]	; (800c49c <arm_rfft_4096_fast_init_f32+0x34>)
 800c47e:	821a      	strh	r2, [r3, #16]
 800c480:	4a07      	ldr	r2, [pc, #28]	; (800c4a0 <arm_rfft_4096_fast_init_f32+0x38>)
 800c482:	8018      	strh	r0, [r3, #0]
 800c484:	2000      	movs	r0, #0
 800c486:	819d      	strh	r5, [r3, #12]
 800c488:	615a      	str	r2, [r3, #20]
 800c48a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c48e:	bc30      	pop	{r4, r5}
 800c490:	4770      	bx	lr
 800c492:	f04f 30ff 	mov.w	r0, #4294967295
 800c496:	4770      	bx	lr
 800c498:	08053b74 	.word	0x08053b74
 800c49c:	080337e0 	.word	0x080337e0
 800c4a0:	080648f4 	.word	0x080648f4

0800c4a4 <arm_rfft_fast_init_f32>:
 800c4a4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c4a8:	d01f      	beq.n	800c4ea <arm_rfft_fast_init_f32+0x46>
 800c4aa:	d90b      	bls.n	800c4c4 <arm_rfft_fast_init_f32+0x20>
 800c4ac:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c4b0:	d019      	beq.n	800c4e6 <arm_rfft_fast_init_f32+0x42>
 800c4b2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c4b6:	d012      	beq.n	800c4de <arm_rfft_fast_init_f32+0x3a>
 800c4b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c4bc:	d00d      	beq.n	800c4da <arm_rfft_fast_init_f32+0x36>
 800c4be:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c2:	4770      	bx	lr
 800c4c4:	2940      	cmp	r1, #64	; 0x40
 800c4c6:	d00c      	beq.n	800c4e2 <arm_rfft_fast_init_f32+0x3e>
 800c4c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c4cc:	d003      	beq.n	800c4d6 <arm_rfft_fast_init_f32+0x32>
 800c4ce:	2920      	cmp	r1, #32
 800c4d0:	d1f5      	bne.n	800c4be <arm_rfft_fast_init_f32+0x1a>
 800c4d2:	4b07      	ldr	r3, [pc, #28]	; (800c4f0 <arm_rfft_fast_init_f32+0x4c>)
 800c4d4:	4718      	bx	r3
 800c4d6:	4b07      	ldr	r3, [pc, #28]	; (800c4f4 <arm_rfft_fast_init_f32+0x50>)
 800c4d8:	4718      	bx	r3
 800c4da:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <arm_rfft_fast_init_f32+0x54>)
 800c4dc:	4718      	bx	r3
 800c4de:	4b07      	ldr	r3, [pc, #28]	; (800c4fc <arm_rfft_fast_init_f32+0x58>)
 800c4e0:	4718      	bx	r3
 800c4e2:	4b07      	ldr	r3, [pc, #28]	; (800c500 <arm_rfft_fast_init_f32+0x5c>)
 800c4e4:	e7f6      	b.n	800c4d4 <arm_rfft_fast_init_f32+0x30>
 800c4e6:	4b07      	ldr	r3, [pc, #28]	; (800c504 <arm_rfft_fast_init_f32+0x60>)
 800c4e8:	e7f4      	b.n	800c4d4 <arm_rfft_fast_init_f32+0x30>
 800c4ea:	4b07      	ldr	r3, [pc, #28]	; (800c508 <arm_rfft_fast_init_f32+0x64>)
 800c4ec:	e7f2      	b.n	800c4d4 <arm_rfft_fast_init_f32+0x30>
 800c4ee:	bf00      	nop
 800c4f0:	0800c30d 	.word	0x0800c30d
 800c4f4:	0800c37d 	.word	0x0800c37d
 800c4f8:	0800c3f1 	.word	0x0800c3f1
 800c4fc:	0800c469 	.word	0x0800c469
 800c500:	0800c345 	.word	0x0800c345
 800c504:	0800c42d 	.word	0x0800c42d
 800c508:	0800c3b5 	.word	0x0800c3b5

0800c50c <stage_rfft_f32>:
 800c50c:	b470      	push	{r4, r5, r6}
 800c50e:	edd1 7a00 	vldr	s15, [r1]
 800c512:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c516:	ed91 7a01 	vldr	s14, [r1, #4]
 800c51a:	f101 0510 	add.w	r5, r1, #16
 800c51e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c522:	8806      	ldrh	r6, [r0, #0]
 800c524:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c528:	6943      	ldr	r3, [r0, #20]
 800c52a:	1e70      	subs	r0, r6, #1
 800c52c:	eeb0 4a46 	vmov.f32	s8, s12
 800c530:	f102 0410 	add.w	r4, r2, #16
 800c534:	3310      	adds	r3, #16
 800c536:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c53a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c53e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c542:	3908      	subs	r1, #8
 800c544:	ee26 7a86 	vmul.f32	s14, s13, s12
 800c548:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c54c:	ed82 7a00 	vstr	s14, [r2]
 800c550:	edc2 7a01 	vstr	s15, [r2, #4]
 800c554:	ed15 6a02 	vldr	s12, [r5, #-8]
 800c558:	3801      	subs	r0, #1
 800c55a:	ed91 7a02 	vldr	s14, [r1, #8]
 800c55e:	f105 0508 	add.w	r5, r5, #8
 800c562:	ed53 6a02 	vldr	s13, [r3, #-8]
 800c566:	f1a1 0108 	sub.w	r1, r1, #8
 800c56a:	ee77 5a46 	vsub.f32	s11, s14, s12
 800c56e:	edd1 4a05 	vldr	s9, [r1, #20]
 800c572:	ed55 7a03 	vldr	s15, [r5, #-12]
 800c576:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c57a:	ed13 6a01 	vldr	s12, [r3, #-4]
 800c57e:	f104 0408 	add.w	r4, r4, #8
 800c582:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c586:	f103 0308 	add.w	r3, r3, #8
 800c58a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c58e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c592:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c596:	ee37 7a23 	vadd.f32	s14, s14, s7
 800c59a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c59e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c5a2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c5a6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c5aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c5ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c5b2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c5b6:	ed04 7a04 	vstr	s14, [r4, #-16]
 800c5ba:	ed44 7a03 	vstr	s15, [r4, #-12]
 800c5be:	d1c9      	bne.n	800c554 <stage_rfft_f32+0x48>
 800c5c0:	bc70      	pop	{r4, r5, r6}
 800c5c2:	4770      	bx	lr

0800c5c4 <merge_rfft_f32>:
 800c5c4:	b410      	push	{r4}
 800c5c6:	edd1 7a00 	vldr	s15, [r1]
 800c5ca:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800c5ce:	edd1 6a01 	vldr	s13, [r1, #4]
 800c5d2:	8804      	ldrh	r4, [r0, #0]
 800c5d4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c5d8:	6940      	ldr	r0, [r0, #20]
 800c5da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c5de:	3c01      	subs	r4, #1
 800c5e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c5e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c5e8:	ed82 7a00 	vstr	s14, [r2]
 800c5ec:	edc2 7a01 	vstr	s15, [r2, #4]
 800c5f0:	b3dc      	cbz	r4, 800c66a <merge_rfft_f32+0xa6>
 800c5f2:	00e3      	lsls	r3, r4, #3
 800c5f4:	3010      	adds	r0, #16
 800c5f6:	3210      	adds	r2, #16
 800c5f8:	3b08      	subs	r3, #8
 800c5fa:	440b      	add	r3, r1
 800c5fc:	3110      	adds	r1, #16
 800c5fe:	ed11 6a02 	vldr	s12, [r1, #-8]
 800c602:	3c01      	subs	r4, #1
 800c604:	ed93 7a02 	vldr	s14, [r3, #8]
 800c608:	f101 0108 	add.w	r1, r1, #8
 800c60c:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c610:	f1a3 0308 	sub.w	r3, r3, #8
 800c614:	ee76 5a47 	vsub.f32	s11, s12, s14
 800c618:	edd3 4a05 	vldr	s9, [r3, #20]
 800c61c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c620:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c624:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c628:	f102 0208 	add.w	r2, r2, #8
 800c62c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c630:	f100 0008 	add.w	r0, r0, #8
 800c634:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c638:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c63c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c640:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c644:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c648:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c64c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c650:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c654:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c658:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c65c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c660:	ed02 7a04 	vstr	s14, [r2, #-16]
 800c664:	ed42 7a03 	vstr	s15, [r2, #-12]
 800c668:	d1c9      	bne.n	800c5fe <merge_rfft_f32+0x3a>
 800c66a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <arm_rfft_fast_f32>:
 800c670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c674:	8a05      	ldrh	r5, [r0, #16]
 800c676:	4604      	mov	r4, r0
 800c678:	4617      	mov	r7, r2
 800c67a:	461e      	mov	r6, r3
 800c67c:	086d      	lsrs	r5, r5, #1
 800c67e:	8005      	strh	r5, [r0, #0]
 800c680:	b14b      	cbz	r3, 800c696 <arm_rfft_fast_f32+0x26>
 800c682:	f7ff ff9f 	bl	800c5c4 <merge_rfft_f32>
 800c686:	4632      	mov	r2, r6
 800c688:	4639      	mov	r1, r7
 800c68a:	4620      	mov	r0, r4
 800c68c:	2301      	movs	r3, #1
 800c68e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c692:	f000 bb35 	b.w	800cd00 <arm_cfft_f32>
 800c696:	4688      	mov	r8, r1
 800c698:	461a      	mov	r2, r3
 800c69a:	2301      	movs	r3, #1
 800c69c:	f000 fb30 	bl	800cd00 <arm_cfft_f32>
 800c6a0:	463a      	mov	r2, r7
 800c6a2:	4641      	mov	r1, r8
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6aa:	f7ff bf2f 	b.w	800c50c <stage_rfft_f32>
 800c6ae:	bf00      	nop

0800c6b0 <arm_cfft_radix8by2_f32>:
 800c6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6b4:	4607      	mov	r7, r0
 800c6b6:	4608      	mov	r0, r1
 800c6b8:	ed2d 8b06 	vpush	{d8-d10}
 800c6bc:	f8b7 c000 	ldrh.w	ip, [r7]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800c6c6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800c6ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c6ce:	f000 80ac 	beq.w	800c82a <arm_cfft_radix8by2_f32+0x17a>
 800c6d2:	008c      	lsls	r4, r1, #2
 800c6d4:	f100 0310 	add.w	r3, r0, #16
 800c6d8:	3210      	adds	r2, #16
 800c6da:	f108 0610 	add.w	r6, r8, #16
 800c6de:	3410      	adds	r4, #16
 800c6e0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800c6e4:	1905      	adds	r5, r0, r4
 800c6e6:	4444      	add	r4, r8
 800c6e8:	ed16 7a04 	vldr	s14, [r6, #-16]
 800c6ec:	3310      	adds	r3, #16
 800c6ee:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800c6f2:	3510      	adds	r5, #16
 800c6f4:	ed56 0a03 	vldr	s1, [r6, #-12]
 800c6f8:	3210      	adds	r2, #16
 800c6fa:	ee74 9a87 	vadd.f32	s19, s9, s14
 800c6fe:	ed56 7a02 	vldr	s15, [r6, #-8]
 800c702:	ed56 2a01 	vldr	s5, [r6, #-4]
 800c706:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800c70a:	ed54 5a04 	vldr	s11, [r4, #-16]
 800c70e:	3610      	adds	r6, #16
 800c710:	ed14 5a03 	vldr	s10, [r4, #-12]
 800c714:	3410      	adds	r4, #16
 800c716:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800c71a:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800c71e:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800c722:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800c726:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800c72a:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800c72e:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800c732:	ee33 8a83 	vadd.f32	s16, s7, s6
 800c736:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800c73a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800c73e:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800c742:	ee34 0a06 	vadd.f32	s0, s8, s12
 800c746:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800c74a:	ee77 aa20 	vadd.f32	s21, s14, s1
 800c74e:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800c752:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800c756:	ee72 9a22 	vadd.f32	s19, s4, s5
 800c75a:	ee71 8a05 	vadd.f32	s17, s2, s10
 800c75e:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800c762:	ee37 7a60 	vsub.f32	s14, s14, s1
 800c766:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800c76a:	ee35 5a41 	vsub.f32	s10, s10, s2
 800c76e:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800c772:	ee36 6a44 	vsub.f32	s12, s12, s8
 800c776:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800c77a:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800c77e:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800c782:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800c786:	ee72 7a62 	vsub.f32	s15, s4, s5
 800c78a:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800c78e:	ee73 2a63 	vsub.f32	s5, s6, s7
 800c792:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800c796:	4563      	cmp	r3, ip
 800c798:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800c79c:	ee24 3a84 	vmul.f32	s6, s9, s8
 800c7a0:	ee27 2a26 	vmul.f32	s4, s14, s13
 800c7a4:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800c7a8:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800c7ac:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c7b0:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c7b4:	ee65 6a26 	vmul.f32	s13, s10, s13
 800c7b8:	ee25 5a04 	vmul.f32	s10, s10, s8
 800c7bc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c7c0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c7c4:	ee33 4a02 	vadd.f32	s8, s6, s4
 800c7c8:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800c7cc:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800c7d0:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800c7d4:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800c7d8:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800c7dc:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800c7e0:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c7e4:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800c7e8:	ee27 4a87 	vmul.f32	s8, s15, s14
 800c7ec:	ee61 5a87 	vmul.f32	s11, s3, s14
 800c7f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c7f4:	ee22 5a87 	vmul.f32	s10, s5, s14
 800c7f8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c7fc:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c800:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800c804:	ee74 4a84 	vadd.f32	s9, s9, s8
 800c808:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c80c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c810:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c814:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800c818:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800c81c:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800c820:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800c824:	f47f af60 	bne.w	800c6e8 <arm_cfft_radix8by2_f32+0x38>
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	b28c      	uxth	r4, r1
 800c82c:	2302      	movs	r3, #2
 800c82e:	4621      	mov	r1, r4
 800c830:	f000 fb9a 	bl	800cf68 <arm_radix8_butterfly_f32>
 800c834:	4621      	mov	r1, r4
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	4640      	mov	r0, r8
 800c83a:	2302      	movs	r3, #2
 800c83c:	ecbd 8b06 	vpop	{d8-d10}
 800c840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c844:	f000 bb90 	b.w	800cf68 <arm_radix8_butterfly_f32>

0800c848 <arm_cfft_radix8by4_f32>:
 800c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	ed2d 8b04 	vpush	{d8-d9}
 800c850:	8804      	ldrh	r4, [r0, #0]
 800c852:	b08d      	sub	sp, #52	; 0x34
 800c854:	6842      	ldr	r2, [r0, #4]
 800c856:	460d      	mov	r5, r1
 800c858:	0864      	lsrs	r4, r4, #1
 800c85a:	edd1 7a00 	vldr	s15, [r1]
 800c85e:	edd1 5a01 	vldr	s11, [r1, #4]
 800c862:	00a3      	lsls	r3, r4, #2
 800c864:	18ce      	adds	r6, r1, r3
 800c866:	18f7      	adds	r7, r6, r3
 800c868:	ed96 7a00 	vldr	s14, [r6]
 800c86c:	ed96 4a01 	vldr	s8, [r6, #4]
 800c870:	ed97 6a00 	vldr	s12, [r7]
 800c874:	edd7 4a01 	vldr	s9, [r7, #4]
 800c878:	ee77 6a86 	vadd.f32	s13, s15, s12
 800c87c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c880:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800c884:	ee77 2a26 	vadd.f32	s5, s14, s13
 800c888:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800c88c:	ee74 3a27 	vadd.f32	s7, s8, s15
 800c890:	ee76 4a44 	vsub.f32	s9, s12, s8
 800c894:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800c898:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800c89c:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800c8a0:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c8a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c8a8:	0860      	lsrs	r0, r4, #1
 800c8aa:	f102 0408 	add.w	r4, r2, #8
 800c8ae:	9405      	str	r4, [sp, #20]
 800c8b0:	f102 0410 	add.w	r4, r2, #16
 800c8b4:	9009      	str	r0, [sp, #36]	; 0x24
 800c8b6:	f1a0 0902 	sub.w	r9, r0, #2
 800c8ba:	9403      	str	r4, [sp, #12]
 800c8bc:	18fc      	adds	r4, r7, r3
 800c8be:	f102 0018 	add.w	r0, r2, #24
 800c8c2:	ed94 5a00 	vldr	s10, [r4]
 800c8c6:	ed94 3a01 	vldr	s6, [r4, #4]
 800c8ca:	ee72 2a85 	vadd.f32	s5, s5, s10
 800c8ce:	9004      	str	r0, [sp, #16]
 800c8d0:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800c8da:	9408      	str	r4, [sp, #32]
 800c8dc:	ee12 ca90 	vmov	ip, s5
 800c8e0:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800c8e4:	ee77 7a83 	vadd.f32	s15, s15, s6
 800c8e8:	f845 cb08 	str.w	ip, [r5], #8
 800c8ec:	ee13 ca90 	vmov	ip, s7
 800c8f0:	ed96 2a01 	vldr	s4, [r6, #4]
 800c8f4:	ee74 4a05 	vadd.f32	s9, s8, s10
 800c8f8:	edd4 2a01 	vldr	s5, [r4, #4]
 800c8fc:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c900:	ee36 6a02 	vadd.f32	s12, s12, s4
 800c904:	9500      	str	r5, [sp, #0]
 800c906:	460d      	mov	r5, r1
 800c908:	ee36 6a22 	vadd.f32	s12, s12, s5
 800c90c:	ed81 6a01 	vstr	s12, [r1, #4]
 800c910:	4631      	mov	r1, r6
 800c912:	f841 cb08 	str.w	ip, [r1], #8
 800c916:	ee16 ca90 	vmov	ip, s13
 800c91a:	9106      	str	r1, [sp, #24]
 800c91c:	4639      	mov	r1, r7
 800c91e:	edc6 4a01 	vstr	s9, [r6, #4]
 800c922:	f841 cb08 	str.w	ip, [r1], #8
 800c926:	9102      	str	r1, [sp, #8]
 800c928:	ee17 1a90 	vmov	r1, s15
 800c92c:	edc7 5a01 	vstr	s11, [r7, #4]
 800c930:	f840 1b08 	str.w	r1, [r0], #8
 800c934:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800c938:	9001      	str	r0, [sp, #4]
 800c93a:	ed84 7a01 	vstr	s14, [r4, #4]
 800c93e:	9107      	str	r1, [sp, #28]
 800c940:	f000 8135 	beq.w	800cbae <arm_cfft_radix8by4_f32+0x366>
 800c944:	3b0c      	subs	r3, #12
 800c946:	f102 0920 	add.w	r9, r2, #32
 800c94a:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800c94e:	4622      	mov	r2, r4
 800c950:	468b      	mov	fp, r1
 800c952:	f105 0e10 	add.w	lr, r5, #16
 800c956:	4423      	add	r3, r4
 800c958:	f1a6 0c0c 	sub.w	ip, r6, #12
 800c95c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800c960:	f106 0010 	add.w	r0, r6, #16
 800c964:	f1a7 010c 	sub.w	r1, r7, #12
 800c968:	f107 0510 	add.w	r5, r7, #16
 800c96c:	3c0c      	subs	r4, #12
 800c96e:	3210      	adds	r2, #16
 800c970:	ed15 7a02 	vldr	s14, [r5, #-8]
 800c974:	f1bb 0b01 	subs.w	fp, fp, #1
 800c978:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800c97c:	f1ac 0c08 	sub.w	ip, ip, #8
 800c980:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c984:	f10e 0e08 	add.w	lr, lr, #8
 800c988:	ee77 1a87 	vadd.f32	s3, s15, s14
 800c98c:	ed52 4a02 	vldr	s9, [r2, #-8]
 800c990:	ed55 5a01 	vldr	s11, [r5, #-4]
 800c994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c998:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800c99c:	f10a 0a08 	add.w	sl, sl, #8
 800c9a0:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800c9a4:	ed10 3a01 	vldr	s6, [r0, #-4]
 800c9a8:	ee37 4a25 	vadd.f32	s8, s14, s11
 800c9ac:	ed52 3a01 	vldr	s7, [r2, #-4]
 800c9b0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c9b4:	f100 0008 	add.w	r0, r0, #8
 800c9b8:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c9bc:	f1a1 0108 	sub.w	r1, r1, #8
 800c9c0:	ee73 2a27 	vadd.f32	s5, s6, s15
 800c9c4:	f109 0910 	add.w	r9, r9, #16
 800c9c8:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800c9cc:	f105 0508 	add.w	r5, r5, #8
 800c9d0:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800c9d4:	ee37 5a66 	vsub.f32	s10, s14, s13
 800c9d8:	ed50 5a03 	vldr	s11, [r0, #-12]
 800c9dc:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800c9e0:	ed12 6a01 	vldr	s12, [r2, #-4]
 800c9e4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c9e8:	ee74 5a25 	vadd.f32	s11, s8, s11
 800c9ec:	f1a4 0408 	sub.w	r4, r4, #8
 800c9f0:	ee34 4a43 	vsub.f32	s8, s8, s6
 800c9f4:	f108 0818 	add.w	r8, r8, #24
 800c9f8:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800c9fc:	f102 0208 	add.w	r2, r2, #8
 800ca00:	ee75 5a86 	vadd.f32	s11, s11, s12
 800ca04:	f1a3 0308 	sub.w	r3, r3, #8
 800ca08:	ee34 6a63 	vsub.f32	s12, s8, s7
 800ca0c:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800ca10:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800ca14:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ca18:	ed94 4a04 	vldr	s8, [r4, #16]
 800ca1c:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800ca20:	ed9c 3a04 	vldr	s6, [ip, #16]
 800ca24:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ca28:	edd1 7a04 	vldr	s15, [r1, #16]
 800ca2c:	ee73 6a04 	vadd.f32	s13, s6, s8
 800ca30:	ed93 8a04 	vldr	s16, [r3, #16]
 800ca34:	edd4 5a03 	vldr	s11, [r4, #12]
 800ca38:	ee33 3a44 	vsub.f32	s6, s6, s8
 800ca3c:	ed9c 2a03 	vldr	s4, [ip, #12]
 800ca40:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800ca44:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800ca48:	ed91 1a03 	vldr	s2, [r1, #12]
 800ca4c:	ee32 4a25 	vadd.f32	s8, s4, s11
 800ca50:	edd3 2a03 	vldr	s5, [r3, #12]
 800ca54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ca58:	ee70 0a88 	vadd.f32	s1, s1, s16
 800ca5c:	ee73 4a41 	vsub.f32	s9, s6, s2
 800ca60:	ee32 2a65 	vsub.f32	s4, s4, s11
 800ca64:	edcc 0a04 	vstr	s1, [ip, #16]
 800ca68:	ee74 0a41 	vsub.f32	s1, s8, s2
 800ca6c:	edd1 6a03 	vldr	s13, [r1, #12]
 800ca70:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800ca74:	ed93 9a03 	vldr	s18, [r3, #12]
 800ca78:	ee78 5a82 	vadd.f32	s11, s17, s4
 800ca7c:	ee34 4a26 	vadd.f32	s8, s8, s13
 800ca80:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800ca84:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800ca88:	ee34 4a09 	vadd.f32	s8, s8, s18
 800ca8c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ca90:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800ca94:	ed8c 4a03 	vstr	s8, [ip, #12]
 800ca98:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800ca9c:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800caa0:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800caa4:	ee60 2a01 	vmul.f32	s5, s0, s2
 800caa8:	ee64 6a81 	vmul.f32	s13, s9, s2
 800caac:	ee20 8a04 	vmul.f32	s16, s0, s8
 800cab0:	ee64 4a84 	vmul.f32	s9, s9, s8
 800cab4:	ee25 0a01 	vmul.f32	s0, s10, s2
 800cab8:	ee25 5a04 	vmul.f32	s10, s10, s8
 800cabc:	ee25 4a84 	vmul.f32	s8, s11, s8
 800cac0:	ee65 5a81 	vmul.f32	s11, s11, s2
 800cac4:	ee35 5a62 	vsub.f32	s10, s10, s5
 800cac8:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800cacc:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800cad0:	ee38 1a00 	vadd.f32	s2, s16, s0
 800cad4:	ed00 5a03 	vstr	s10, [r0, #-12]
 800cad8:	ed00 1a04 	vstr	s2, [r0, #-16]
 800cadc:	ed81 4a04 	vstr	s8, [r1, #16]
 800cae0:	edc1 5a03 	vstr	s11, [r1, #12]
 800cae4:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800cae8:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800caec:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800caf0:	ee66 2a25 	vmul.f32	s5, s12, s11
 800caf4:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800caf8:	ee21 4a85 	vmul.f32	s8, s3, s10
 800cafc:	ee60 7a85 	vmul.f32	s15, s1, s10
 800cb00:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800cb04:	ee26 6a05 	vmul.f32	s12, s12, s10
 800cb08:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800cb0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cb10:	ee34 5a22 	vadd.f32	s10, s8, s5
 800cb14:	ee36 6a61 	vsub.f32	s12, s12, s3
 800cb18:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800cb1c:	ed05 5a04 	vstr	s10, [r5, #-16]
 800cb20:	ed05 6a03 	vstr	s12, [r5, #-12]
 800cb24:	edc4 5a04 	vstr	s11, [r4, #16]
 800cb28:	edc4 6a03 	vstr	s13, [r4, #12]
 800cb2c:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800cb30:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800cb34:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800cb38:	ee67 5a27 	vmul.f32	s11, s14, s15
 800cb3c:	ee63 6a27 	vmul.f32	s13, s6, s15
 800cb40:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800cb44:	ee27 7a22 	vmul.f32	s14, s14, s5
 800cb48:	ee62 7a27 	vmul.f32	s15, s4, s15
 800cb4c:	ee23 3a22 	vmul.f32	s6, s6, s5
 800cb50:	ee22 2a22 	vmul.f32	s4, s4, s5
 800cb54:	ee36 6a25 	vadd.f32	s12, s12, s11
 800cb58:	ee37 7a63 	vsub.f32	s14, s14, s7
 800cb5c:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800cb60:	ee77 7a83 	vadd.f32	s15, s15, s6
 800cb64:	ed02 6a04 	vstr	s12, [r2, #-16]
 800cb68:	ed02 7a03 	vstr	s14, [r2, #-12]
 800cb6c:	ed83 2a04 	vstr	s4, [r3, #16]
 800cb70:	edc3 7a03 	vstr	s15, [r3, #12]
 800cb74:	f47f aefc 	bne.w	800c970 <arm_cfft_radix8by4_f32+0x128>
 800cb78:	9907      	ldr	r1, [sp, #28]
 800cb7a:	9803      	ldr	r0, [sp, #12]
 800cb7c:	00cb      	lsls	r3, r1, #3
 800cb7e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800cb82:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800cb86:	9103      	str	r1, [sp, #12]
 800cb88:	9900      	ldr	r1, [sp, #0]
 800cb8a:	4419      	add	r1, r3
 800cb8c:	9100      	str	r1, [sp, #0]
 800cb8e:	9905      	ldr	r1, [sp, #20]
 800cb90:	4419      	add	r1, r3
 800cb92:	9105      	str	r1, [sp, #20]
 800cb94:	9906      	ldr	r1, [sp, #24]
 800cb96:	4419      	add	r1, r3
 800cb98:	9106      	str	r1, [sp, #24]
 800cb9a:	9902      	ldr	r1, [sp, #8]
 800cb9c:	4419      	add	r1, r3
 800cb9e:	9102      	str	r1, [sp, #8]
 800cba0:	9901      	ldr	r1, [sp, #4]
 800cba2:	4419      	add	r1, r3
 800cba4:	9b04      	ldr	r3, [sp, #16]
 800cba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbaa:	9101      	str	r1, [sp, #4]
 800cbac:	9304      	str	r3, [sp, #16]
 800cbae:	9b00      	ldr	r3, [sp, #0]
 800cbb0:	9902      	ldr	r1, [sp, #8]
 800cbb2:	ed93 7a00 	vldr	s14, [r3]
 800cbb6:	edd1 7a00 	vldr	s15, [r1]
 800cbba:	9a06      	ldr	r2, [sp, #24]
 800cbbc:	ee37 6a27 	vadd.f32	s12, s14, s15
 800cbc0:	9d01      	ldr	r5, [sp, #4]
 800cbc2:	edd2 6a00 	vldr	s13, [r2]
 800cbc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cbca:	9b02      	ldr	r3, [sp, #8]
 800cbcc:	ee76 3a86 	vadd.f32	s7, s13, s12
 800cbd0:	ed95 3a00 	vldr	s6, [r5]
 800cbd4:	ed93 5a01 	vldr	s10, [r3, #4]
 800cbd8:	ee36 6a66 	vsub.f32	s12, s12, s13
 800cbdc:	9b00      	ldr	r3, [sp, #0]
 800cbde:	ee73 3a83 	vadd.f32	s7, s7, s6
 800cbe2:	edd5 2a01 	vldr	s5, [r5, #4]
 800cbe6:	ed93 4a01 	vldr	s8, [r3, #4]
 800cbea:	ee36 6a43 	vsub.f32	s12, s12, s6
 800cbee:	9b00      	ldr	r3, [sp, #0]
 800cbf0:	ee74 5a05 	vadd.f32	s11, s8, s10
 800cbf4:	edd2 7a01 	vldr	s15, [r2, #4]
 800cbf8:	edc3 3a00 	vstr	s7, [r3]
 800cbfc:	ee34 4a45 	vsub.f32	s8, s8, s10
 800cc00:	edd2 3a01 	vldr	s7, [r2, #4]
 800cc04:	ee77 4a87 	vadd.f32	s9, s15, s14
 800cc08:	ed95 2a01 	vldr	s4, [r5, #4]
 800cc0c:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800cc10:	9d05      	ldr	r5, [sp, #20]
 800cc12:	ee34 5a66 	vsub.f32	s10, s8, s13
 800cc16:	9b00      	ldr	r3, [sp, #0]
 800cc18:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800cc1c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800cc20:	ee73 3a82 	vadd.f32	s7, s7, s4
 800cc24:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800cc26:	ee35 5a03 	vadd.f32	s10, s10, s6
 800cc2a:	4621      	mov	r1, r4
 800cc2c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800cc30:	edc3 3a01 	vstr	s7, [r3, #4]
 800cc34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc38:	edd5 3a00 	vldr	s7, [r5]
 800cc3c:	ee76 6a84 	vadd.f32	s13, s13, s8
 800cc40:	ed95 7a01 	vldr	s14, [r5, #4]
 800cc44:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800cc48:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800cc4c:	2304      	movs	r3, #4
 800cc4e:	ee64 4a87 	vmul.f32	s9, s9, s14
 800cc52:	ee25 7a07 	vmul.f32	s14, s10, s14
 800cc56:	ee25 5a23 	vmul.f32	s10, s10, s7
 800cc5a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800cc5e:	ee34 7a07 	vadd.f32	s14, s8, s14
 800cc62:	ee35 5a64 	vsub.f32	s10, s10, s9
 800cc66:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800cc6a:	ed82 7a00 	vstr	s14, [r2]
 800cc6e:	ed82 5a01 	vstr	s10, [r2, #4]
 800cc72:	9a03      	ldr	r2, [sp, #12]
 800cc74:	edd2 4a01 	vldr	s9, [r2, #4]
 800cc78:	ed92 7a00 	vldr	s14, [r2]
 800cc7c:	9a02      	ldr	r2, [sp, #8]
 800cc7e:	ee26 5a07 	vmul.f32	s10, s12, s14
 800cc82:	ee26 6a24 	vmul.f32	s12, s12, s9
 800cc86:	ee25 7a87 	vmul.f32	s14, s11, s14
 800cc8a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800cc8e:	ee37 6a46 	vsub.f32	s12, s14, s12
 800cc92:	ee75 5a25 	vadd.f32	s11, s10, s11
 800cc96:	edc2 5a00 	vstr	s11, [r2]
 800cc9a:	ed82 6a01 	vstr	s12, [r2, #4]
 800cc9e:	9a04      	ldr	r2, [sp, #16]
 800cca0:	9d01      	ldr	r5, [sp, #4]
 800cca2:	edd2 5a01 	vldr	s11, [r2, #4]
 800cca6:	ed92 7a00 	vldr	s14, [r2]
 800ccaa:	ee27 6a87 	vmul.f32	s12, s15, s14
 800ccae:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ccb2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ccb6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ccba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccbe:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ccc2:	edc5 7a01 	vstr	s15, [r5, #4]
 800ccc6:	edc5 6a00 	vstr	s13, [r5]
 800ccca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cccc:	686a      	ldr	r2, [r5, #4]
 800ccce:	f000 f94b 	bl	800cf68 <arm_radix8_butterfly_f32>
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	4621      	mov	r1, r4
 800ccd6:	686a      	ldr	r2, [r5, #4]
 800ccd8:	2304      	movs	r3, #4
 800ccda:	f000 f945 	bl	800cf68 <arm_radix8_butterfly_f32>
 800ccde:	4638      	mov	r0, r7
 800cce0:	4621      	mov	r1, r4
 800cce2:	686a      	ldr	r2, [r5, #4]
 800cce4:	2304      	movs	r3, #4
 800cce6:	f000 f93f 	bl	800cf68 <arm_radix8_butterfly_f32>
 800ccea:	4621      	mov	r1, r4
 800ccec:	686a      	ldr	r2, [r5, #4]
 800ccee:	2304      	movs	r3, #4
 800ccf0:	9808      	ldr	r0, [sp, #32]
 800ccf2:	b00d      	add	sp, #52	; 0x34
 800ccf4:	ecbd 8b04 	vpop	{d8-d9}
 800ccf8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	f000 b934 	b.w	800cf68 <arm_radix8_butterfly_f32>

0800cd00 <arm_cfft_f32>:
 800cd00:	2a01      	cmp	r2, #1
 800cd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd06:	4606      	mov	r6, r0
 800cd08:	4617      	mov	r7, r2
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	4698      	mov	r8, r3
 800cd0e:	8805      	ldrh	r5, [r0, #0]
 800cd10:	d055      	beq.n	800cdbe <arm_cfft_f32+0xbe>
 800cd12:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800cd16:	d061      	beq.n	800cddc <arm_cfft_f32+0xdc>
 800cd18:	d916      	bls.n	800cd48 <arm_cfft_f32+0x48>
 800cd1a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800cd1e:	d01a      	beq.n	800cd56 <arm_cfft_f32+0x56>
 800cd20:	d946      	bls.n	800cdb0 <arm_cfft_f32+0xb0>
 800cd22:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800cd26:	d059      	beq.n	800cddc <arm_cfft_f32+0xdc>
 800cd28:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800cd2c:	d105      	bne.n	800cd3a <arm_cfft_f32+0x3a>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	6872      	ldr	r2, [r6, #4]
 800cd32:	4629      	mov	r1, r5
 800cd34:	4620      	mov	r0, r4
 800cd36:	f000 f917 	bl	800cf68 <arm_radix8_butterfly_f32>
 800cd3a:	f1b8 0f00 	cmp.w	r8, #0
 800cd3e:	d111      	bne.n	800cd64 <arm_cfft_f32+0x64>
 800cd40:	2f01      	cmp	r7, #1
 800cd42:	d016      	beq.n	800cd72 <arm_cfft_f32+0x72>
 800cd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd48:	2d20      	cmp	r5, #32
 800cd4a:	d047      	beq.n	800cddc <arm_cfft_f32+0xdc>
 800cd4c:	d934      	bls.n	800cdb8 <arm_cfft_f32+0xb8>
 800cd4e:	2d40      	cmp	r5, #64	; 0x40
 800cd50:	d0ed      	beq.n	800cd2e <arm_cfft_f32+0x2e>
 800cd52:	2d80      	cmp	r5, #128	; 0x80
 800cd54:	d1f1      	bne.n	800cd3a <arm_cfft_f32+0x3a>
 800cd56:	4621      	mov	r1, r4
 800cd58:	4630      	mov	r0, r6
 800cd5a:	f7ff fca9 	bl	800c6b0 <arm_cfft_radix8by2_f32>
 800cd5e:	f1b8 0f00 	cmp.w	r8, #0
 800cd62:	d0ed      	beq.n	800cd40 <arm_cfft_f32+0x40>
 800cd64:	68b2      	ldr	r2, [r6, #8]
 800cd66:	4620      	mov	r0, r4
 800cd68:	89b1      	ldrh	r1, [r6, #12]
 800cd6a:	f000 f88b 	bl	800ce84 <arm_bitreversal_32>
 800cd6e:	2f01      	cmp	r7, #1
 800cd70:	d1e8      	bne.n	800cd44 <arm_cfft_f32+0x44>
 800cd72:	ee07 5a90 	vmov	s15, r5
 800cd76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cd82:	2d00      	cmp	r5, #0
 800cd84:	d0de      	beq.n	800cd44 <arm_cfft_f32+0x44>
 800cd86:	f104 0108 	add.w	r1, r4, #8
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	ed11 7a02 	vldr	s14, [r1, #-8]
 800cd90:	3301      	adds	r3, #1
 800cd92:	ed51 7a01 	vldr	s15, [r1, #-4]
 800cd96:	3108      	adds	r1, #8
 800cd98:	429d      	cmp	r5, r3
 800cd9a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cd9e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cda2:	ed01 7a04 	vstr	s14, [r1, #-16]
 800cda6:	ed41 7a03 	vstr	s15, [r1, #-12]
 800cdaa:	d1ef      	bne.n	800cd8c <arm_cfft_f32+0x8c>
 800cdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800cdb4:	d0bb      	beq.n	800cd2e <arm_cfft_f32+0x2e>
 800cdb6:	e7c0      	b.n	800cd3a <arm_cfft_f32+0x3a>
 800cdb8:	2d10      	cmp	r5, #16
 800cdba:	d0cc      	beq.n	800cd56 <arm_cfft_f32+0x56>
 800cdbc:	e7bd      	b.n	800cd3a <arm_cfft_f32+0x3a>
 800cdbe:	b195      	cbz	r5, 800cde6 <arm_cfft_f32+0xe6>
 800cdc0:	f101 030c 	add.w	r3, r1, #12
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	ed53 7a02 	vldr	s15, [r3, #-8]
 800cdca:	3201      	adds	r2, #1
 800cdcc:	3308      	adds	r3, #8
 800cdce:	eef1 7a67 	vneg.f32	s15, s15
 800cdd2:	4295      	cmp	r5, r2
 800cdd4:	ed43 7a04 	vstr	s15, [r3, #-16]
 800cdd8:	d1f5      	bne.n	800cdc6 <arm_cfft_f32+0xc6>
 800cdda:	e79a      	b.n	800cd12 <arm_cfft_f32+0x12>
 800cddc:	4621      	mov	r1, r4
 800cdde:	4630      	mov	r0, r6
 800cde0:	f7ff fd32 	bl	800c848 <arm_cfft_radix8by4_f32>
 800cde4:	e7a9      	b.n	800cd3a <arm_cfft_f32+0x3a>
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d0ac      	beq.n	800cd44 <arm_cfft_f32+0x44>
 800cdea:	e7bb      	b.n	800cd64 <arm_cfft_f32+0x64>

0800cdec <arm_dct4_init_f32>:
 800cdec:	b570      	push	{r4, r5, r6, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800cdfc:	ed80 0a01 	vstr	s0, [r0, #4]
 800ce00:	8003      	strh	r3, [r0, #0]
 800ce02:	8042      	strh	r2, [r0, #2]
 800ce04:	e9c0 4104 	strd	r4, r1, [r0, #16]
 800ce08:	d020      	beq.n	800ce4c <arm_dct4_init_f32+0x60>
 800ce0a:	d914      	bls.n	800ce36 <arm_dct4_init_f32+0x4a>
 800ce0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce10:	d022      	beq.n	800ce58 <arm_dct4_init_f32+0x6c>
 800ce12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce16:	d116      	bne.n	800ce46 <arm_dct4_init_f32+0x5a>
 800ce18:	4e12      	ldr	r6, [pc, #72]	; (800ce64 <arm_dct4_init_f32+0x78>)
 800ce1a:	2500      	movs	r5, #0
 800ce1c:	4a12      	ldr	r2, [pc, #72]	; (800ce68 <arm_dct4_init_f32+0x7c>)
 800ce1e:	e9c0 6202 	strd	r6, r2, [r0, #8]
 800ce22:	2601      	movs	r6, #1
 800ce24:	461a      	mov	r2, r3
 800ce26:	4620      	mov	r0, r4
 800ce28:	2300      	movs	r3, #0
 800ce2a:	9600      	str	r6, [sp, #0]
 800ce2c:	f000 fb5e 	bl	800d4ec <arm_rfft_init_f32>
 800ce30:	4628      	mov	r0, r5
 800ce32:	b002      	add	sp, #8
 800ce34:	bd70      	pop	{r4, r5, r6, pc}
 800ce36:	2b80      	cmp	r3, #128	; 0x80
 800ce38:	d105      	bne.n	800ce46 <arm_dct4_init_f32+0x5a>
 800ce3a:	4e0c      	ldr	r6, [pc, #48]	; (800ce6c <arm_dct4_init_f32+0x80>)
 800ce3c:	2500      	movs	r5, #0
 800ce3e:	4a0c      	ldr	r2, [pc, #48]	; (800ce70 <arm_dct4_init_f32+0x84>)
 800ce40:	e9c0 6202 	strd	r6, r2, [r0, #8]
 800ce44:	e7ed      	b.n	800ce22 <arm_dct4_init_f32+0x36>
 800ce46:	f04f 35ff 	mov.w	r5, #4294967295
 800ce4a:	e7ea      	b.n	800ce22 <arm_dct4_init_f32+0x36>
 800ce4c:	4e09      	ldr	r6, [pc, #36]	; (800ce74 <arm_dct4_init_f32+0x88>)
 800ce4e:	2500      	movs	r5, #0
 800ce50:	4a09      	ldr	r2, [pc, #36]	; (800ce78 <arm_dct4_init_f32+0x8c>)
 800ce52:	e9c0 6202 	strd	r6, r2, [r0, #8]
 800ce56:	e7e4      	b.n	800ce22 <arm_dct4_init_f32+0x36>
 800ce58:	4e08      	ldr	r6, [pc, #32]	; (800ce7c <arm_dct4_init_f32+0x90>)
 800ce5a:	2500      	movs	r5, #0
 800ce5c:	4a08      	ldr	r2, [pc, #32]	; (800ce80 <arm_dct4_init_f32+0x94>)
 800ce5e:	e9c0 6202 	strd	r6, r2, [r0, #8]
 800ce62:	e7de      	b.n	800ce22 <arm_dct4_init_f32+0x36>
 800ce64:	08022808 	.word	0x08022808
 800ce68:	08038ef0 	.word	0x08038ef0
 800ce6c:	0801d408 	.word	0x0801d408
 800ce70:	080364f0 	.word	0x080364f0
 800ce74:	08021808 	.word	0x08021808
 800ce78:	080386f0 	.word	0x080386f0
 800ce7c:	0801d808 	.word	0x0801d808
 800ce80:	080366f0 	.word	0x080366f0

0800ce84 <arm_bitreversal_32>:
 800ce84:	b321      	cbz	r1, 800ced0 <arm_bitreversal_32+0x4c>
 800ce86:	f102 0c02 	add.w	ip, r2, #2
 800ce8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce8e:	4690      	mov	r8, r2
 800ce90:	2500      	movs	r5, #0
 800ce92:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800ce96:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800ce9a:	3502      	adds	r5, #2
 800ce9c:	08a4      	lsrs	r4, r4, #2
 800ce9e:	089b      	lsrs	r3, r3, #2
 800cea0:	428d      	cmp	r5, r1
 800cea2:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800cea6:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800ceaa:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800ceae:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800ceb2:	f107 0704 	add.w	r7, r7, #4
 800ceb6:	f106 0604 	add.w	r6, r6, #4
 800ceba:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800cebe:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800cec2:	59c4      	ldr	r4, [r0, r7]
 800cec4:	5983      	ldr	r3, [r0, r6]
 800cec6:	51c3      	str	r3, [r0, r7]
 800cec8:	5184      	str	r4, [r0, r6]
 800ceca:	d3e2      	bcc.n	800ce92 <arm_bitreversal_32+0xe>
 800cecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop

0800ced4 <arm_cos_f32>:
 800ced4:	eddf 7a21 	vldr	s15, [pc, #132]	; 800cf5c <arm_cos_f32+0x88>
 800ced8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800cedc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cee0:	ee30 0a07 	vadd.f32	s0, s0, s14
 800cee4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cee8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ceec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cef0:	d504      	bpl.n	800cefc <arm_cos_f32+0x28>
 800cef2:	ee17 3a90 	vmov	r3, s15
 800cef6:	3b01      	subs	r3, #1
 800cef8:	ee07 3a90 	vmov	s15, r3
 800cefc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf00:	eddf 6a17 	vldr	s13, [pc, #92]	; 800cf60 <arm_cos_f32+0x8c>
 800cf04:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cf08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cf0c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800cf10:	ee17 3a10 	vmov	r3, s14
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf1a:	d21a      	bcs.n	800cf52 <arm_cos_f32+0x7e>
 800cf1c:	ee07 3a10 	vmov	s14, r3
 800cf20:	1c59      	adds	r1, r3, #1
 800cf22:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800cf26:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cf2a:	4a0e      	ldr	r2, [pc, #56]	; (800cf64 <arm_cos_f32+0x90>)
 800cf2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cf30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf34:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800cf38:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cf3c:	edd3 6a00 	vldr	s13, [r3]
 800cf40:	ed92 7a00 	vldr	s14, [r2]
 800cf44:	ee20 0a26 	vmul.f32	s0, s0, s13
 800cf48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf50:	4770      	bx	lr
 800cf52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cf56:	2101      	movs	r1, #1
 800cf58:	2300      	movs	r3, #0
 800cf5a:	e7e6      	b.n	800cf2a <arm_cos_f32+0x56>
 800cf5c:	3e22f983 	.word	0x3e22f983
 800cf60:	44000000 	.word	0x44000000
 800cf64:	08050ef0 	.word	0x08050ef0

0800cf68 <arm_radix8_butterfly_f32>:
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	ed2d 8b10 	vpush	{d8-d15}
 800cf70:	b095      	sub	sp, #84	; 0x54
 800cf72:	468a      	mov	sl, r1
 800cf74:	468b      	mov	fp, r1
 800cf76:	eddf 8abb 	vldr	s17, [pc, #748]	; 800d264 <arm_radix8_butterfly_f32+0x2fc>
 800cf7a:	9012      	str	r0, [sp, #72]	; 0x48
 800cf7c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800cf80:	4603      	mov	r3, r0
 800cf82:	3304      	adds	r3, #4
 800cf84:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf86:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800cf8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cf8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf90:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800cf94:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800cf98:	920f      	str	r2, [sp, #60]	; 0x3c
 800cf9a:	9303      	str	r3, [sp, #12]
 800cf9c:	0153      	lsls	r3, r2, #5
 800cf9e:	0114      	lsls	r4, r2, #4
 800cfa0:	eba9 0002 	sub.w	r0, r9, r2
 800cfa4:	18ce      	adds	r6, r1, r3
 800cfa6:	9302      	str	r3, [sp, #8]
 800cfa8:	0097      	lsls	r7, r2, #2
 800cfaa:	4613      	mov	r3, r2
 800cfac:	eb06 0509 	add.w	r5, r6, r9
 800cfb0:	9004      	str	r0, [sp, #16]
 800cfb2:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800cfb6:	1bd2      	subs	r2, r2, r7
 800cfb8:	eb05 0109 	add.w	r1, r5, r9
 800cfbc:	441f      	add	r7, r3
 800cfbe:	9405      	str	r4, [sp, #20]
 800cfc0:	f109 0004 	add.w	r0, r9, #4
 800cfc4:	9101      	str	r1, [sp, #4]
 800cfc6:	1d21      	adds	r1, r4, #4
 800cfc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cfca:	f04f 0e00 	mov.w	lr, #0
 800cfce:	9c01      	ldr	r4, [sp, #4]
 800cfd0:	4418      	add	r0, r3
 800cfd2:	4419      	add	r1, r3
 800cfd4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800cfd8:	9b02      	ldr	r3, [sp, #8]
 800cfda:	00fc      	lsls	r4, r7, #3
 800cfdc:	18d7      	adds	r7, r2, r3
 800cfde:	9b04      	ldr	r3, [sp, #16]
 800cfe0:	9406      	str	r4, [sp, #24]
 800cfe2:	00db      	lsls	r3, r3, #3
 800cfe4:	9c01      	ldr	r4, [sp, #4]
 800cfe6:	9307      	str	r3, [sp, #28]
 800cfe8:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800cfec:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800cff0:	9304      	str	r3, [sp, #16]
 800cff2:	9b03      	ldr	r3, [sp, #12]
 800cff4:	edd6 6a00 	vldr	s13, [r6]
 800cff8:	44de      	add	lr, fp
 800cffa:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800cffe:	ed94 7a00 	vldr	s14, [r4]
 800d002:	45f2      	cmp	sl, lr
 800d004:	ed10 6a01 	vldr	s12, [r0, #-4]
 800d008:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800d00c:	edd5 2a00 	vldr	s5, [r5]
 800d010:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d014:	edd7 3a00 	vldr	s7, [r7]
 800d018:	ed11 5a01 	vldr	s10, [r1, #-4]
 800d01c:	ee36 3a22 	vadd.f32	s6, s12, s5
 800d020:	edd2 6a00 	vldr	s13, [r2]
 800d024:	ee75 5a07 	vadd.f32	s11, s10, s14
 800d028:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800d02c:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800d030:	ee72 4a25 	vadd.f32	s9, s4, s11
 800d034:	ee73 3a04 	vadd.f32	s7, s6, s8
 800d038:	ee35 5a47 	vsub.f32	s10, s10, s14
 800d03c:	ee36 7a62 	vsub.f32	s14, s12, s5
 800d040:	ee32 2a65 	vsub.f32	s4, s4, s11
 800d044:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800d048:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800d04c:	ee37 6a66 	vsub.f32	s12, s14, s13
 800d050:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800d054:	ee33 3a44 	vsub.f32	s6, s6, s8
 800d058:	edc6 4a00 	vstr	s9, [r6]
 800d05c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d060:	ed97 4a01 	vldr	s8, [r7, #4]
 800d064:	ee66 6a28 	vmul.f32	s13, s12, s17
 800d068:	edd0 5a00 	vldr	s11, [r0]
 800d06c:	ed95 6a01 	vldr	s12, [r5, #4]
 800d070:	ee27 7a28 	vmul.f32	s14, s14, s17
 800d074:	edd2 3a01 	vldr	s7, [r2, #4]
 800d078:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800d07c:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800d080:	ed96 1a01 	vldr	s2, [r6, #4]
 800d084:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800d088:	edd4 0a01 	vldr	s1, [r4, #4]
 800d08c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d090:	eddc 6a00 	vldr	s13, [ip]
 800d094:	ee75 5a86 	vadd.f32	s11, s11, s12
 800d098:	ed91 6a00 	vldr	s12, [r1]
 800d09c:	ee73 3a84 	vadd.f32	s7, s7, s8
 800d0a0:	ee74 1a80 	vadd.f32	s3, s9, s0
 800d0a4:	ee36 4a81 	vadd.f32	s8, s13, s2
 800d0a8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800d0ac:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800d0b0:	ee36 1a20 	vadd.f32	s2, s12, s1
 800d0b4:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800d0b8:	ee36 6a60 	vsub.f32	s12, s12, s1
 800d0bc:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800d0c0:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800d0c4:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800d0c8:	ee74 3a01 	vadd.f32	s7, s8, s2
 800d0cc:	ee34 4a41 	vsub.f32	s8, s8, s2
 800d0d0:	ee36 1a21 	vadd.f32	s2, s12, s3
 800d0d4:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800d0d8:	ee36 6a61 	vsub.f32	s12, s12, s3
 800d0dc:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800d0e0:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800d0e4:	ed8c 0a00 	vstr	s0, [ip]
 800d0e8:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800d0ec:	449c      	add	ip, r3
 800d0ee:	ee75 4a07 	vadd.f32	s9, s10, s14
 800d0f2:	edc6 3a01 	vstr	s7, [r6, #4]
 800d0f6:	ee35 7a47 	vsub.f32	s14, s10, s14
 800d0fa:	441e      	add	r6, r3
 800d0fc:	ee32 5a25 	vadd.f32	s10, s4, s11
 800d100:	ee72 5a65 	vsub.f32	s11, s4, s11
 800d104:	ee72 3a81 	vadd.f32	s7, s5, s2
 800d108:	ed01 5a01 	vstr	s10, [r1, #-4]
 800d10c:	ee34 2a43 	vsub.f32	s4, s8, s6
 800d110:	edc4 5a00 	vstr	s11, [r4]
 800d114:	ee37 5a86 	vadd.f32	s10, s15, s12
 800d118:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800d11c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d120:	ed81 2a00 	vstr	s4, [r1]
 800d124:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800d128:	4419      	add	r1, r3
 800d12a:	ee33 4a04 	vadd.f32	s8, s6, s8
 800d12e:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800d132:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800d136:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d13a:	ed84 4a01 	vstr	s8, [r4, #4]
 800d13e:	ed40 3a01 	vstr	s7, [r0, #-4]
 800d142:	441c      	add	r4, r3
 800d144:	edc7 2a00 	vstr	s5, [r7]
 800d148:	ed85 5a00 	vstr	s10, [r5]
 800d14c:	edc2 7a00 	vstr	s15, [r2]
 800d150:	edc0 5a00 	vstr	s11, [r0]
 800d154:	4418      	add	r0, r3
 800d156:	edc7 4a01 	vstr	s9, [r7, #4]
 800d15a:	441f      	add	r7, r3
 800d15c:	ed85 6a01 	vstr	s12, [r5, #4]
 800d160:	441d      	add	r5, r3
 800d162:	ed82 7a01 	vstr	s14, [r2, #4]
 800d166:	441a      	add	r2, r3
 800d168:	f63f af44 	bhi.w	800cff4 <arm_radix8_butterfly_f32+0x8c>
 800d16c:	469c      	mov	ip, r3
 800d16e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d170:	2b07      	cmp	r3, #7
 800d172:	f240 81b6 	bls.w	800d4e2 <arm_radix8_butterfly_f32+0x57a>
 800d176:	9a02      	ldr	r2, [sp, #8]
 800d178:	f109 0608 	add.w	r6, r9, #8
 800d17c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d17e:	f108 0408 	add.w	r4, r8, #8
 800d182:	3208      	adds	r2, #8
 800d184:	9f06      	ldr	r7, [sp, #24]
 800d186:	9d04      	ldr	r5, [sp, #16]
 800d188:	189a      	adds	r2, r3, r2
 800d18a:	3708      	adds	r7, #8
 800d18c:	3508      	adds	r5, #8
 800d18e:	9807      	ldr	r0, [sp, #28]
 800d190:	920c      	str	r2, [sp, #48]	; 0x30
 800d192:	199a      	adds	r2, r3, r6
 800d194:	9905      	ldr	r1, [sp, #20]
 800d196:	3008      	adds	r0, #8
 800d198:	920b      	str	r2, [sp, #44]	; 0x2c
 800d19a:	19da      	adds	r2, r3, r7
 800d19c:	310c      	adds	r1, #12
 800d19e:	920a      	str	r2, [sp, #40]	; 0x28
 800d1a0:	195a      	adds	r2, r3, r5
 800d1a2:	9209      	str	r2, [sp, #36]	; 0x24
 800d1a4:	191a      	adds	r2, r3, r4
 800d1a6:	9208      	str	r2, [sp, #32]
 800d1a8:	181a      	adds	r2, r3, r0
 800d1aa:	9207      	str	r2, [sp, #28]
 800d1ac:	185a      	adds	r2, r3, r1
 800d1ae:	330c      	adds	r3, #12
 800d1b0:	9205      	str	r2, [sp, #20]
 800d1b2:	9306      	str	r3, [sp, #24]
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	9304      	str	r3, [sp, #16]
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	930d      	str	r3, [sp, #52]	; 0x34
 800d1bc:	4663      	mov	r3, ip
 800d1be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d1c2:	f8dd c014 	ldr.w	ip, [sp, #20]
 800d1c6:	440a      	add	r2, r1
 800d1c8:	9f06      	ldr	r7, [sp, #24]
 800d1ca:	9e07      	ldr	r6, [sp, #28]
 800d1cc:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800d1d0:	920d      	str	r2, [sp, #52]	; 0x34
 800d1d2:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 800d1d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d1d8:	9d08      	ldr	r5, [sp, #32]
 800d1da:	4442      	add	r2, r8
 800d1dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d1de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d1e0:	eb02 0108 	add.w	r1, r2, r8
 800d1e4:	ed92 ea00 	vldr	s28, [r2]
 800d1e8:	eb01 0208 	add.w	r2, r1, r8
 800d1ec:	edd1 da00 	vldr	s27, [r1]
 800d1f0:	eb02 0108 	add.w	r1, r2, r8
 800d1f4:	ed92 da00 	vldr	s26, [r2]
 800d1f8:	eb01 0208 	add.w	r2, r1, r8
 800d1fc:	edd1 ca00 	vldr	s25, [r1]
 800d200:	eb02 0108 	add.w	r1, r2, r8
 800d204:	ed92 ca00 	vldr	s24, [r2]
 800d208:	eb01 0208 	add.w	r2, r1, r8
 800d20c:	edd1 ba00 	vldr	s23, [r1]
 800d210:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d212:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800d216:	ed92 ba00 	vldr	s22, [r2]
 800d21a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d21c:	eb0e 0908 	add.w	r9, lr, r8
 800d220:	910e      	str	r1, [sp, #56]	; 0x38
 800d222:	9201      	str	r2, [sp, #4]
 800d224:	eb09 0208 	add.w	r2, r9, r8
 800d228:	ed99 aa01 	vldr	s20, [r9, #4]
 800d22c:	edde aa01 	vldr	s21, [lr, #4]
 800d230:	eb02 0908 	add.w	r9, r2, r8
 800d234:	edd2 9a01 	vldr	s19, [r2, #4]
 800d238:	f8dd e010 	ldr.w	lr, [sp, #16]
 800d23c:	eb09 0208 	add.w	r2, r9, r8
 800d240:	ed99 9a01 	vldr	s18, [r9, #4]
 800d244:	eb02 0908 	add.w	r9, r2, r8
 800d248:	ed92 8a01 	vldr	s16, [r2, #4]
 800d24c:	9a01      	ldr	r2, [sp, #4]
 800d24e:	edd9 7a01 	vldr	s15, [r9, #4]
 800d252:	44c8      	add	r8, r9
 800d254:	edcd 7a02 	vstr	s15, [sp, #8]
 800d258:	edd8 7a01 	vldr	s15, [r8, #4]
 800d25c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d260:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d262:	e001      	b.n	800d268 <arm_radix8_butterfly_f32+0x300>
 800d264:	3f3504f3 	.word	0x3f3504f3
 800d268:	ed92 7a00 	vldr	s14, [r2]
 800d26c:	44de      	add	lr, fp
 800d26e:	ed17 1a01 	vldr	s2, [r7, #-4]
 800d272:	ed90 5a00 	vldr	s10, [r0]
 800d276:	45f2      	cmp	sl, lr
 800d278:	ed1c fa01 	vldr	s30, [ip, #-4]
 800d27c:	ee31 3a07 	vadd.f32	s6, s2, s14
 800d280:	edd6 5a00 	vldr	s11, [r6]
 800d284:	ee31 1a47 	vsub.f32	s2, s2, s14
 800d288:	edd4 7a00 	vldr	s15, [r4]
 800d28c:	ed95 7a00 	vldr	s14, [r5]
 800d290:	ed91 4a00 	vldr	s8, [r1]
 800d294:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800d298:	ee77 6a25 	vadd.f32	s13, s14, s11
 800d29c:	edd7 ea00 	vldr	s29, [r7]
 800d2a0:	ee74 fa05 	vadd.f32	s31, s8, s10
 800d2a4:	ee73 1a06 	vadd.f32	s3, s6, s12
 800d2a8:	ee34 4a45 	vsub.f32	s8, s8, s10
 800d2ac:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800d2b0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d2b4:	ee33 3a46 	vsub.f32	s6, s6, s12
 800d2b8:	ee31 6a85 	vadd.f32	s12, s3, s10
 800d2bc:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800d2c0:	ee34 fa07 	vadd.f32	s30, s8, s14
 800d2c4:	ed07 6a01 	vstr	s12, [r7, #-4]
 800d2c8:	ee34 4a47 	vsub.f32	s8, s8, s14
 800d2cc:	edd5 3a01 	vldr	s7, [r5, #4]
 800d2d0:	ee7f fae6 	vsub.f32	s31, s31, s13
 800d2d4:	ed90 7a01 	vldr	s14, [r0, #4]
 800d2d8:	ee2f fa28 	vmul.f32	s30, s30, s17
 800d2dc:	edd1 5a01 	vldr	s11, [r1, #4]
 800d2e0:	ee24 4a28 	vmul.f32	s8, s8, s17
 800d2e4:	ed96 6a01 	vldr	s12, [r6, #4]
 800d2e8:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800d2ec:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800d2f0:	edd2 6a01 	vldr	s13, [r2, #4]
 800d2f4:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800d2f8:	edd4 4a01 	vldr	s9, [r4, #4]
 800d2fc:	ee75 5a87 	vadd.f32	s11, s11, s14
 800d300:	ed9c 7a00 	vldr	s14, [ip]
 800d304:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800d308:	ee33 6a86 	vadd.f32	s12, s7, s12
 800d30c:	ee37 facf 	vsub.f32	s30, s15, s30
 800d310:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800d314:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800d318:	ee7e eae6 	vsub.f32	s29, s29, s13
 800d31c:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800d320:	ee77 6a24 	vadd.f32	s13, s14, s9
 800d324:	ee75 0a86 	vadd.f32	s1, s11, s12
 800d328:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d32c:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800d330:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800d334:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800d338:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800d33c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800d340:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800d344:	ee77 4a22 	vadd.f32	s9, s14, s5
 800d348:	ee7e eae7 	vsub.f32	s29, s29, s15
 800d34c:	ee77 7a62 	vsub.f32	s15, s14, s5
 800d350:	ee71 2a04 	vadd.f32	s5, s2, s8
 800d354:	ee31 7a44 	vsub.f32	s14, s2, s8
 800d358:	ee30 1a60 	vsub.f32	s2, s0, s1
 800d35c:	ee73 1a06 	vadd.f32	s3, s6, s12
 800d360:	ee33 6a46 	vsub.f32	s12, s6, s12
 800d364:	ee33 3aef 	vsub.f32	s6, s7, s31
 800d368:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800d36c:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800d370:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800d374:	ee72 5a25 	vadd.f32	s11, s4, s11
 800d378:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800d37c:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800d380:	ee77 2a27 	vadd.f32	s5, s14, s15
 800d384:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d388:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800d38c:	ee2c fa85 	vmul.f32	s30, s25, s10
 800d390:	ee69 ea01 	vmul.f32	s29, s18, s2
 800d394:	ee29 5a05 	vmul.f32	s10, s18, s10
 800d398:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800d39c:	ee6d faa1 	vmul.f32	s31, s27, s3
 800d3a0:	ee70 0a20 	vadd.f32	s1, s0, s1
 800d3a4:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800d3a8:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800d3ac:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800d3b0:	edc7 0a00 	vstr	s1, [r7]
 800d3b4:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800d3b8:	441f      	add	r7, r3
 800d3ba:	ee2a faa3 	vmul.f32	s30, s21, s7
 800d3be:	ee31 5a45 	vsub.f32	s10, s2, s10
 800d3c2:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800d3c6:	edc2 ea00 	vstr	s29, [r2]
 800d3ca:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800d3ce:	ee33 3a61 	vsub.f32	s6, s6, s3
 800d3d2:	ed82 5a01 	vstr	s10, [r2, #4]
 800d3d6:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800d3da:	edcd 3a01 	vstr	s7, [sp, #4]
 800d3de:	ed9d 5a03 	vldr	s10, [sp, #12]
 800d3e2:	ee6b ea86 	vmul.f32	s29, s23, s12
 800d3e6:	eddd 3a02 	vldr	s7, [sp, #8]
 800d3ea:	ee6b fa24 	vmul.f32	s31, s22, s9
 800d3ee:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800d3f2:	ee65 4a24 	vmul.f32	s9, s10, s9
 800d3f6:	ed8c 3a00 	vstr	s6, [ip]
 800d3fa:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800d3fe:	ee23 6a86 	vmul.f32	s12, s7, s12
 800d402:	eddd 3a01 	vldr	s7, [sp, #4]
 800d406:	ee25 5a25 	vmul.f32	s10, s10, s11
 800d40a:	441a      	add	r2, r3
 800d40c:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800d410:	449c      	add	ip, r3
 800d412:	ee68 1a04 	vmul.f32	s3, s16, s8
 800d416:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800d41a:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800d41e:	ee29 faa7 	vmul.f32	s30, s19, s15
 800d422:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800d426:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800d42a:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800d42e:	ee68 2a22 	vmul.f32	s5, s16, s5
 800d432:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800d436:	ee29 7a87 	vmul.f32	s14, s19, s14
 800d43a:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800d43e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800d442:	ee7e ea81 	vadd.f32	s29, s29, s2
 800d446:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800d44a:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800d44e:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800d452:	edc4 ea00 	vstr	s29, [r4]
 800d456:	ee30 0a21 	vadd.f32	s0, s0, s3
 800d45a:	ed84 6a01 	vstr	s12, [r4, #4]
 800d45e:	ee74 2a62 	vsub.f32	s5, s8, s5
 800d462:	edc1 0a00 	vstr	s1, [r1]
 800d466:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800d46a:	edc1 3a01 	vstr	s7, [r1, #4]
 800d46e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d472:	ed86 5a00 	vstr	s10, [r6]
 800d476:	edc6 4a01 	vstr	s9, [r6, #4]
 800d47a:	4419      	add	r1, r3
 800d47c:	ed80 0a00 	vstr	s0, [r0]
 800d480:	441c      	add	r4, r3
 800d482:	edc0 2a01 	vstr	s5, [r0, #4]
 800d486:	441e      	add	r6, r3
 800d488:	ed85 3a00 	vstr	s6, [r5]
 800d48c:	4418      	add	r0, r3
 800d48e:	ed85 7a01 	vstr	s14, [r5, #4]
 800d492:	441d      	add	r5, r3
 800d494:	f63f aee8 	bhi.w	800d268 <arm_radix8_butterfly_f32+0x300>
 800d498:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d49a:	9a04      	ldr	r2, [sp, #16]
 800d49c:	3108      	adds	r1, #8
 800d49e:	3201      	adds	r2, #1
 800d4a0:	910c      	str	r1, [sp, #48]	; 0x30
 800d4a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d4a4:	9204      	str	r2, [sp, #16]
 800d4a6:	3108      	adds	r1, #8
 800d4a8:	910b      	str	r1, [sp, #44]	; 0x2c
 800d4aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d4ac:	3108      	adds	r1, #8
 800d4ae:	910a      	str	r1, [sp, #40]	; 0x28
 800d4b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4b2:	3108      	adds	r1, #8
 800d4b4:	9109      	str	r1, [sp, #36]	; 0x24
 800d4b6:	9908      	ldr	r1, [sp, #32]
 800d4b8:	3108      	adds	r1, #8
 800d4ba:	9108      	str	r1, [sp, #32]
 800d4bc:	9907      	ldr	r1, [sp, #28]
 800d4be:	3108      	adds	r1, #8
 800d4c0:	9107      	str	r1, [sp, #28]
 800d4c2:	9906      	ldr	r1, [sp, #24]
 800d4c4:	3108      	adds	r1, #8
 800d4c6:	9106      	str	r1, [sp, #24]
 800d4c8:	9905      	ldr	r1, [sp, #20]
 800d4ca:	3108      	adds	r1, #8
 800d4cc:	9105      	str	r1, [sp, #20]
 800d4ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d4d0:	4291      	cmp	r1, r2
 800d4d2:	f47f ae74 	bne.w	800d1be <arm_radix8_butterfly_f32+0x256>
 800d4d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d4d8:	468b      	mov	fp, r1
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	9310      	str	r3, [sp, #64]	; 0x40
 800d4e0:	e551      	b.n	800cf86 <arm_radix8_butterfly_f32+0x1e>
 800d4e2:	b015      	add	sp, #84	; 0x54
 800d4e4:	ecbd 8b10 	vpop	{d8-d15}
 800d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d4ec <arm_rfft_init_f32>:
 800d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ee:	b294      	uxth	r4, r2
 800d4f0:	4f23      	ldr	r7, [pc, #140]	; (800d580 <arm_rfft_init_f32+0x94>)
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	4e23      	ldr	r6, [pc, #140]	; (800d584 <arm_rfft_init_f32+0x98>)
 800d4f6:	f3c2 024e 	ubfx	r2, r2, #1, #15
 800d4fa:	460d      	mov	r5, r1
 800d4fc:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800d500:	9906      	ldr	r1, [sp, #24]
 800d502:	7183      	strb	r3, [r0, #6]
 800d504:	6004      	str	r4, [r0, #0]
 800d506:	71c1      	strb	r1, [r0, #7]
 800d508:	8082      	strh	r2, [r0, #4]
 800d50a:	e9c0 7603 	strd	r7, r6, [r0, #12]
 800d50e:	d033      	beq.n	800d578 <arm_rfft_init_f32+0x8c>
 800d510:	d911      	bls.n	800d536 <arm_rfft_init_f32+0x4a>
 800d512:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800d516:	d026      	beq.n	800d566 <arm_rfft_init_f32+0x7a>
 800d518:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800d51c:	d116      	bne.n	800d54c <arm_rfft_init_f32+0x60>
 800d51e:	2101      	movs	r1, #1
 800d520:	2400      	movs	r4, #0
 800d522:	6081      	str	r1, [r0, #8]
 800d524:	6145      	str	r5, [r0, #20]
 800d526:	4611      	mov	r1, r2
 800d528:	4628      	mov	r0, r5
 800d52a:	b9b3      	cbnz	r3, 800d55a <arm_rfft_init_f32+0x6e>
 800d52c:	461a      	mov	r2, r3
 800d52e:	f000 f82b 	bl	800d588 <arm_cfft_radix4_init_f32>
 800d532:	4620      	mov	r0, r4
 800d534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d536:	2c80      	cmp	r4, #128	; 0x80
 800d538:	d108      	bne.n	800d54c <arm_rfft_init_f32+0x60>
 800d53a:	2140      	movs	r1, #64	; 0x40
 800d53c:	6145      	str	r5, [r0, #20]
 800d53e:	2400      	movs	r4, #0
 800d540:	6081      	str	r1, [r0, #8]
 800d542:	4611      	mov	r1, r2
 800d544:	4628      	mov	r0, r5
 800d546:	2b00      	cmp	r3, #0
 800d548:	d0f0      	beq.n	800d52c <arm_rfft_init_f32+0x40>
 800d54a:	e006      	b.n	800d55a <arm_rfft_init_f32+0x6e>
 800d54c:	6145      	str	r5, [r0, #20]
 800d54e:	f04f 34ff 	mov.w	r4, #4294967295
 800d552:	4611      	mov	r1, r2
 800d554:	4628      	mov	r0, r5
 800d556:	2b00      	cmp	r3, #0
 800d558:	d0e8      	beq.n	800d52c <arm_rfft_init_f32+0x40>
 800d55a:	2300      	movs	r3, #0
 800d55c:	2201      	movs	r2, #1
 800d55e:	f000 f813 	bl	800d588 <arm_cfft_radix4_init_f32>
 800d562:	4620      	mov	r0, r4
 800d564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d566:	2104      	movs	r1, #4
 800d568:	6145      	str	r5, [r0, #20]
 800d56a:	2400      	movs	r4, #0
 800d56c:	6081      	str	r1, [r0, #8]
 800d56e:	4611      	mov	r1, r2
 800d570:	4628      	mov	r0, r5
 800d572:	2b00      	cmp	r3, #0
 800d574:	d0da      	beq.n	800d52c <arm_rfft_init_f32+0x40>
 800d576:	e7f0      	b.n	800d55a <arm_rfft_init_f32+0x6e>
 800d578:	2110      	movs	r1, #16
 800d57a:	2400      	movs	r4, #0
 800d57c:	6081      	str	r1, [r0, #8]
 800d57e:	e7d1      	b.n	800d524 <arm_rfft_init_f32+0x38>
 800d580:	08040ef0 	.word	0x08040ef0
 800d584:	08048ef0 	.word	0x08048ef0

0800d588 <arm_cfft_radix4_init_f32>:
 800d588:	b410      	push	{r4}
 800d58a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d58e:	4604      	mov	r4, r0
 800d590:	4826      	ldr	r0, [pc, #152]	; (800d62c <arm_cfft_radix4_init_f32+0xa4>)
 800d592:	70a2      	strb	r2, [r4, #2]
 800d594:	70e3      	strb	r3, [r4, #3]
 800d596:	8021      	strh	r1, [r4, #0]
 800d598:	6060      	str	r0, [r4, #4]
 800d59a:	d027      	beq.n	800d5ec <arm_cfft_radix4_init_f32+0x64>
 800d59c:	d911      	bls.n	800d5c2 <arm_cfft_radix4_init_f32+0x3a>
 800d59e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d5a2:	d02f      	beq.n	800d604 <arm_cfft_radix4_init_f32+0x7c>
 800d5a4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800d5a8:	d11b      	bne.n	800d5e2 <arm_cfft_radix4_init_f32+0x5a>
 800d5aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d5ae:	4a20      	ldr	r2, [pc, #128]	; (800d630 <arm_cfft_radix4_init_f32+0xa8>)
 800d5b0:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	e9c4 2102 	strd	r2, r1, [r4, #8]
 800d5ba:	6123      	str	r3, [r4, #16]
 800d5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5c0:	4770      	bx	lr
 800d5c2:	2910      	cmp	r1, #16
 800d5c4:	d028      	beq.n	800d618 <arm_cfft_radix4_init_f32+0x90>
 800d5c6:	2940      	cmp	r1, #64	; 0x40
 800d5c8:	d10b      	bne.n	800d5e2 <arm_cfft_radix4_init_f32+0x5a>
 800d5ca:	f04f 5372 	mov.w	r3, #1015021568	; 0x3c800000
 800d5ce:	f04f 1140 	mov.w	r1, #4194368	; 0x400040
 800d5d2:	4a18      	ldr	r2, [pc, #96]	; (800d634 <arm_cfft_radix4_init_f32+0xac>)
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	6123      	str	r3, [r4, #16]
 800d5d8:	e9c4 2102 	strd	r2, r1, [r4, #8]
 800d5dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5e0:	4770      	bx	lr
 800d5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5ea:	4770      	bx	lr
 800d5ec:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 800d5f0:	f04f 1110 	mov.w	r1, #1048592	; 0x100010
 800d5f4:	4a10      	ldr	r2, [pc, #64]	; (800d638 <arm_cfft_radix4_init_f32+0xb0>)
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	6123      	str	r3, [r4, #16]
 800d5fa:	e9c4 2102 	strd	r2, r1, [r4, #8]
 800d5fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d602:	4770      	bx	lr
 800d604:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 800d608:	4a0c      	ldr	r2, [pc, #48]	; (800d63c <arm_cfft_radix4_init_f32+0xb4>)
 800d60a:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 800d60e:	2000      	movs	r0, #0
 800d610:	e9c4 2102 	strd	r2, r1, [r4, #8]
 800d614:	6123      	str	r3, [r4, #16]
 800d616:	e7d1      	b.n	800d5bc <arm_cfft_radix4_init_f32+0x34>
 800d618:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 800d61c:	4a08      	ldr	r2, [pc, #32]	; (800d640 <arm_cfft_radix4_init_f32+0xb8>)
 800d61e:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 800d622:	2000      	movs	r0, #0
 800d624:	e9c4 2102 	strd	r2, r1, [r4, #8]
 800d628:	6123      	str	r3, [r4, #16]
 800d62a:	e7c7      	b.n	800d5bc <arm_cfft_radix4_init_f32+0x34>
 800d62c:	08058474 	.word	0x08058474
 800d630:	08035cf0 	.word	0x08035cf0
 800d634:	08035d6e 	.word	0x08035d6e
 800d638:	08035d0e 	.word	0x08035d0e
 800d63c:	08035cf6 	.word	0x08035cf6
 800d640:	08035eee 	.word	0x08035eee

0800d644 <ai_buffer_get_size>:
 800d644:	b358      	cbz	r0, 800d69e <ai_buffer_get_size+0x5a>
 800d646:	b430      	push	{r4, r5}
 800d648:	6803      	ldr	r3, [r0, #0]
 800d64a:	4d15      	ldr	r5, [pc, #84]	; (800d6a0 <ai_buffer_get_size+0x5c>)
 800d64c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800d650:	6984      	ldr	r4, [r0, #24]
 800d652:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d656:	42ab      	cmp	r3, r5
 800d658:	6862      	ldr	r2, [r4, #4]
 800d65a:	d01a      	beq.n	800d692 <ai_buffer_get_size+0x4e>
 800d65c:	7d03      	ldrb	r3, [r0, #20]
 800d65e:	6941      	ldr	r1, [r0, #20]
 800d660:	f1a3 0301 	sub.w	r3, r3, #1
 800d664:	fab3 f383 	clz	r3, r3
 800d668:	f3c1 2117 	ubfx	r1, r1, #8, #24
 800d66c:	095b      	lsrs	r3, r3, #5
 800d66e:	428b      	cmp	r3, r1
 800d670:	da0b      	bge.n	800d68a <ai_buffer_get_size+0x46>
 800d672:	2b01      	cmp	r3, #1
 800d674:	d102      	bne.n	800d67c <ai_buffer_get_size+0x38>
 800d676:	2902      	cmp	r1, #2
 800d678:	d007      	beq.n	800d68a <ai_buffer_get_size+0x46>
 800d67a:	2302      	movs	r3, #2
 800d67c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800d680:	3301      	adds	r3, #1
 800d682:	428b      	cmp	r3, r1
 800d684:	fb00 f202 	mul.w	r2, r0, r2
 800d688:	d1f3      	bne.n	800d672 <ai_buffer_get_size+0x2e>
 800d68a:	bc30      	pop	{r4, r5}
 800d68c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800d690:	4770      	bx	lr
 800d692:	2900      	cmp	r1, #0
 800d694:	d0e2      	beq.n	800d65c <ai_buffer_get_size+0x18>
 800d696:	321f      	adds	r2, #31
 800d698:	f022 021f 	bic.w	r2, r2, #31
 800d69c:	e7de      	b.n	800d65c <ai_buffer_get_size+0x18>
 800d69e:	4770      	bx	lr
 800d6a0:	000400c0 	.word	0x000400c0

0800d6a4 <ai_buffer_array_sane>:
 800d6a4:	b138      	cbz	r0, 800d6b6 <ai_buffer_array_sane+0x12>
 800d6a6:	6843      	ldr	r3, [r0, #4]
 800d6a8:	b123      	cbz	r3, 800d6b4 <ai_buffer_array_sane+0x10>
 800d6aa:	8840      	ldrh	r0, [r0, #2]
 800d6ac:	3000      	adds	r0, #0
 800d6ae:	bf18      	it	ne
 800d6b0:	2001      	movne	r0, #1
 800d6b2:	4770      	bx	lr
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	4770      	bx	lr

0800d6b8 <ai_buffer_array_item_set_address>:
 800d6b8:	b120      	cbz	r0, 800d6c4 <ai_buffer_array_item_set_address+0xc>
 800d6ba:	6843      	ldr	r3, [r0, #4]
 800d6bc:	b11b      	cbz	r3, 800d6c6 <ai_buffer_array_item_set_address+0xe>
 800d6be:	8840      	ldrh	r0, [r0, #2]
 800d6c0:	b918      	cbnz	r0, 800d6ca <ai_buffer_array_item_set_address+0x12>
 800d6c2:	4770      	bx	lr
 800d6c4:	4770      	bx	lr
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	4770      	bx	lr
 800d6ca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d6ce:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 800d6d2:	d0f7      	beq.n	800d6c4 <ai_buffer_array_item_set_address+0xc>
 800d6d4:	6042      	str	r2, [r0, #4]
 800d6d6:	2001      	movs	r0, #1
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop

0800d6dc <_ai_platform_acquire_crc>:
 800d6dc:	2001      	movs	r0, #1
 800d6de:	4770      	bx	lr

0800d6e0 <_ai_platform_release_crc>:
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop

0800d6e4 <ai_platform_get_weights_map>:
 800d6e4:	b192      	cbz	r2, 800d70c <ai_platform_get_weights_map+0x28>
 800d6e6:	b188      	cbz	r0, 800d70c <ai_platform_get_weights_map+0x28>
 800d6e8:	b181      	cbz	r1, 800d70c <ai_platform_get_weights_map+0x28>
 800d6ea:	b570      	push	{r4, r5, r6, lr}
 800d6ec:	4b24      	ldr	r3, [pc, #144]	; (800d780 <ai_platform_get_weights_map+0x9c>)
 800d6ee:	6814      	ldr	r4, [r2, #0]
 800d6f0:	429c      	cmp	r4, r3
 800d6f2:	d00d      	beq.n	800d710 <ai_platform_get_weights_map+0x2c>
 800d6f4:	6854      	ldr	r4, [r2, #4]
 800d6f6:	b194      	cbz	r4, 800d71e <ai_platform_get_weights_map+0x3a>
 800d6f8:	6825      	ldr	r5, [r4, #0]
 800d6fa:	429d      	cmp	r5, r3
 800d6fc:	d027      	beq.n	800d74e <ai_platform_get_weights_map+0x6a>
 800d6fe:	6004      	str	r4, [r0, #0]
 800d700:	f1a1 0001 	sub.w	r0, r1, #1
 800d704:	fab0 f080 	clz	r0, r0
 800d708:	0940      	lsrs	r0, r0, #5
 800d70a:	bd70      	pop	{r4, r5, r6, pc}
 800d70c:	2000      	movs	r0, #0
 800d70e:	4770      	bx	lr
 800d710:	4605      	mov	r5, r0
 800d712:	1d10      	adds	r0, r2, #4
 800d714:	4616      	mov	r6, r2
 800d716:	460c      	mov	r4, r1
 800d718:	f7ff ffc4 	bl	800d6a4 <ai_buffer_array_sane>
 800d71c:	b908      	cbnz	r0, 800d722 <ai_platform_get_weights_map+0x3e>
 800d71e:	2000      	movs	r0, #0
 800d720:	bd70      	pop	{r4, r5, r6, pc}
 800d722:	88f3      	ldrh	r3, [r6, #6]
 800d724:	429c      	cmp	r4, r3
 800d726:	d1fa      	bne.n	800d71e <ai_platform_get_weights_map+0x3a>
 800d728:	2100      	movs	r1, #0
 800d72a:	4608      	mov	r0, r1
 800d72c:	1f2b      	subs	r3, r5, #4
 800d72e:	68b2      	ldr	r2, [r6, #8]
 800d730:	440a      	add	r2, r1
 800d732:	6852      	ldr	r2, [r2, #4]
 800d734:	311c      	adds	r1, #28
 800d736:	b12a      	cbz	r2, 800d744 <ai_platform_get_weights_map+0x60>
 800d738:	3001      	adds	r0, #1
 800d73a:	4284      	cmp	r4, r0
 800d73c:	f843 2f04 	str.w	r2, [r3, #4]!
 800d740:	d1f5      	bne.n	800d72e <ai_platform_get_weights_map+0x4a>
 800d742:	4620      	mov	r0, r4
 800d744:	1a20      	subs	r0, r4, r0
 800d746:	fab0 f080 	clz	r0, r0
 800d74a:	0940      	lsrs	r0, r0, #5
 800d74c:	bd70      	pop	{r4, r5, r6, pc}
 800d74e:	6863      	ldr	r3, [r4, #4]
 800d750:	3404      	adds	r4, #4
 800d752:	42ab      	cmp	r3, r5
 800d754:	d0e3      	beq.n	800d71e <ai_platform_get_weights_map+0x3a>
 800d756:	3804      	subs	r0, #4
 800d758:	4626      	mov	r6, r4
 800d75a:	2200      	movs	r2, #0
 800d75c:	e003      	b.n	800d766 <ai_platform_get_weights_map+0x82>
 800d75e:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800d762:	42ab      	cmp	r3, r5
 800d764:	d0db      	beq.n	800d71e <ai_platform_get_weights_map+0x3a>
 800d766:	3201      	adds	r2, #1
 800d768:	4291      	cmp	r1, r2
 800d76a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d76e:	d1f6      	bne.n	800d75e <ai_platform_get_weights_map+0x7a>
 800d770:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800d774:	4b02      	ldr	r3, [pc, #8]	; (800d780 <ai_platform_get_weights_map+0x9c>)
 800d776:	429a      	cmp	r2, r3
 800d778:	d1d1      	bne.n	800d71e <ai_platform_get_weights_map+0x3a>
 800d77a:	2001      	movs	r0, #1
 800d77c:	bd70      	pop	{r4, r5, r6, pc}
 800d77e:	bf00      	nop
 800d780:	a1facade 	.word	0xa1facade

0800d784 <ai_platform_get_activations_map>:
 800d784:	b192      	cbz	r2, 800d7ac <ai_platform_get_activations_map+0x28>
 800d786:	b188      	cbz	r0, 800d7ac <ai_platform_get_activations_map+0x28>
 800d788:	b181      	cbz	r1, 800d7ac <ai_platform_get_activations_map+0x28>
 800d78a:	b570      	push	{r4, r5, r6, lr}
 800d78c:	4b24      	ldr	r3, [pc, #144]	; (800d820 <ai_platform_get_activations_map+0x9c>)
 800d78e:	6814      	ldr	r4, [r2, #0]
 800d790:	429c      	cmp	r4, r3
 800d792:	d00d      	beq.n	800d7b0 <ai_platform_get_activations_map+0x2c>
 800d794:	6a14      	ldr	r4, [r2, #32]
 800d796:	b19c      	cbz	r4, 800d7c0 <ai_platform_get_activations_map+0x3c>
 800d798:	6825      	ldr	r5, [r4, #0]
 800d79a:	429d      	cmp	r5, r3
 800d79c:	d028      	beq.n	800d7f0 <ai_platform_get_activations_map+0x6c>
 800d79e:	6004      	str	r4, [r0, #0]
 800d7a0:	f1a1 0001 	sub.w	r0, r1, #1
 800d7a4:	fab0 f080 	clz	r0, r0
 800d7a8:	0940      	lsrs	r0, r0, #5
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	4770      	bx	lr
 800d7b0:	4605      	mov	r5, r0
 800d7b2:	f102 000c 	add.w	r0, r2, #12
 800d7b6:	4616      	mov	r6, r2
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	f7ff ff73 	bl	800d6a4 <ai_buffer_array_sane>
 800d7be:	b908      	cbnz	r0, 800d7c4 <ai_platform_get_activations_map+0x40>
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	bd70      	pop	{r4, r5, r6, pc}
 800d7c4:	89f3      	ldrh	r3, [r6, #14]
 800d7c6:	429c      	cmp	r4, r3
 800d7c8:	d1fa      	bne.n	800d7c0 <ai_platform_get_activations_map+0x3c>
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	4608      	mov	r0, r1
 800d7ce:	1f2b      	subs	r3, r5, #4
 800d7d0:	6932      	ldr	r2, [r6, #16]
 800d7d2:	440a      	add	r2, r1
 800d7d4:	6852      	ldr	r2, [r2, #4]
 800d7d6:	311c      	adds	r1, #28
 800d7d8:	b12a      	cbz	r2, 800d7e6 <ai_platform_get_activations_map+0x62>
 800d7da:	3001      	adds	r0, #1
 800d7dc:	4284      	cmp	r4, r0
 800d7de:	f843 2f04 	str.w	r2, [r3, #4]!
 800d7e2:	d1f5      	bne.n	800d7d0 <ai_platform_get_activations_map+0x4c>
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	1a20      	subs	r0, r4, r0
 800d7e8:	fab0 f080 	clz	r0, r0
 800d7ec:	0940      	lsrs	r0, r0, #5
 800d7ee:	bd70      	pop	{r4, r5, r6, pc}
 800d7f0:	6863      	ldr	r3, [r4, #4]
 800d7f2:	3404      	adds	r4, #4
 800d7f4:	42ab      	cmp	r3, r5
 800d7f6:	d0e3      	beq.n	800d7c0 <ai_platform_get_activations_map+0x3c>
 800d7f8:	3804      	subs	r0, #4
 800d7fa:	4626      	mov	r6, r4
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	e003      	b.n	800d808 <ai_platform_get_activations_map+0x84>
 800d800:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800d804:	42ab      	cmp	r3, r5
 800d806:	d0db      	beq.n	800d7c0 <ai_platform_get_activations_map+0x3c>
 800d808:	3201      	adds	r2, #1
 800d80a:	4291      	cmp	r1, r2
 800d80c:	f840 3f04 	str.w	r3, [r0, #4]!
 800d810:	d1f6      	bne.n	800d800 <ai_platform_get_activations_map+0x7c>
 800d812:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800d816:	4b02      	ldr	r3, [pc, #8]	; (800d820 <ai_platform_get_activations_map+0x9c>)
 800d818:	429a      	cmp	r2, r3
 800d81a:	d1d1      	bne.n	800d7c0 <ai_platform_get_activations_map+0x3c>
 800d81c:	2001      	movs	r0, #1
 800d81e:	bd70      	pop	{r4, r5, r6, pc}
 800d820:	a1facade 	.word	0xa1facade

0800d824 <ai_platform_bind_network_params>:
 800d824:	b1a0      	cbz	r0, 800d850 <ai_platform_bind_network_params+0x2c>
 800d826:	b1c9      	cbz	r1, 800d85c <ai_platform_bind_network_params+0x38>
 800d828:	b1aa      	cbz	r2, 800d856 <ai_platform_bind_network_params+0x32>
 800d82a:	4603      	mov	r3, r0
 800d82c:	b410      	push	{r4}
 800d82e:	480d      	ldr	r0, [pc, #52]	; (800d864 <ai_platform_bind_network_params+0x40>)
 800d830:	f103 040c 	add.w	r4, r3, #12
 800d834:	f843 0b04 	str.w	r0, [r3], #4
 800d838:	c903      	ldmia	r1, {r0, r1}
 800d83a:	e883 0003 	stmia.w	r3, {r0, r1}
 800d83e:	2301      	movs	r3, #1
 800d840:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d844:	e884 0003 	stmia.w	r4, {r0, r1}
 800d848:	4618      	mov	r0, r3
 800d84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d84e:	4770      	bx	lr
 800d850:	4603      	mov	r3, r0
 800d852:	4618      	mov	r0, r3
 800d854:	4770      	bx	lr
 800d856:	4613      	mov	r3, r2
 800d858:	4618      	mov	r0, r3
 800d85a:	4770      	bx	lr
 800d85c:	460b      	mov	r3, r1
 800d85e:	4618      	mov	r0, r3
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	a1facade 	.word	0xa1facade

0800d868 <ai_platform_network_get_error>:
 800d868:	b510      	push	{r4, lr}
 800d86a:	b120      	cbz	r0, 800d876 <ai_platform_network_get_error+0xe>
 800d86c:	4b45      	ldr	r3, [pc, #276]	; (800d984 <ai_platform_network_get_error+0x11c>)
 800d86e:	6802      	ldr	r2, [r0, #0]
 800d870:	4604      	mov	r4, r0
 800d872:	429a      	cmp	r2, r3
 800d874:	d033      	beq.n	800d8de <ai_platform_network_get_error+0x76>
 800d876:	4a44      	ldr	r2, [pc, #272]	; (800d988 <ai_platform_network_get_error+0x120>)
 800d878:	6813      	ldr	r3, [r2, #0]
 800d87a:	f023 0301 	bic.w	r3, r3, #1
 800d87e:	6013      	str	r3, [r2, #0]
 800d880:	f7ff ff2c 	bl	800d6dc <_ai_platform_acquire_crc>
 800d884:	4b41      	ldr	r3, [pc, #260]	; (800d98c <ai_platform_network_get_error+0x124>)
 800d886:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d014      	beq.n	800d8b8 <ai_platform_network_get_error+0x50>
 800d88e:	2218      	movs	r2, #24
 800d890:	4b3f      	ldr	r3, [pc, #252]	; (800d990 <ai_platform_network_get_error+0x128>)
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	2a18      	cmp	r2, #24
 800d898:	d042      	beq.n	800d920 <ai_platform_network_get_error+0xb8>
 800d89a:	4b3e      	ldr	r3, [pc, #248]	; (800d994 <ai_platform_network_get_error+0x12c>)
 800d89c:	2201      	movs	r2, #1
 800d89e:	4619      	mov	r1, r3
 800d8a0:	601a      	str	r2, [r3, #0]
 800d8a2:	680b      	ldr	r3, [r1, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1fc      	bne.n	800d8a2 <ai_platform_network_get_error+0x3a>
 800d8a8:	4b3b      	ldr	r3, [pc, #236]	; (800d998 <ai_platform_network_get_error+0x130>)
 800d8aa:	493c      	ldr	r1, [pc, #240]	; (800d99c <ai_platform_network_get_error+0x134>)
 800d8ac:	4a3c      	ldr	r2, [pc, #240]	; (800d9a0 <ai_platform_network_get_error+0x138>)
 800d8ae:	6019      	str	r1, [r3, #0]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d00d      	beq.n	800d8d2 <ai_platform_network_get_error+0x6a>
 800d8b6:	e7fe      	b.n	800d8b6 <ai_platform_network_get_error+0x4e>
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	f100 0208 	add.w	r2, r0, #8
 800d8be:	6083      	str	r3, [r0, #8]
 800d8c0:	6813      	ldr	r3, [r2, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1fc      	bne.n	800d8c0 <ai_platform_network_get_error+0x58>
 800d8c6:	4a35      	ldr	r2, [pc, #212]	; (800d99c <ai_platform_network_get_error+0x134>)
 800d8c8:	4b35      	ldr	r3, [pc, #212]	; (800d9a0 <ai_platform_network_get_error+0x138>)
 800d8ca:	6002      	str	r2, [r0, #0]
 800d8cc:	6802      	ldr	r2, [r0, #0]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d104      	bne.n	800d8dc <ai_platform_network_get_error+0x74>
 800d8d2:	f7ff ff05 	bl	800d6e0 <_ai_platform_release_crc>
 800d8d6:	f241 0010 	movw	r0, #4112	; 0x1010
 800d8da:	bd10      	pop	{r4, pc}
 800d8dc:	e7fe      	b.n	800d8dc <ai_platform_network_get_error+0x74>
 800d8de:	4a2a      	ldr	r2, [pc, #168]	; (800d988 <ai_platform_network_get_error+0x120>)
 800d8e0:	6813      	ldr	r3, [r2, #0]
 800d8e2:	f023 0301 	bic.w	r3, r3, #1
 800d8e6:	6013      	str	r3, [r2, #0]
 800d8e8:	f7ff fef8 	bl	800d6dc <_ai_platform_acquire_crc>
 800d8ec:	4b27      	ldr	r3, [pc, #156]	; (800d98c <ai_platform_network_get_error+0x124>)
 800d8ee:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d022      	beq.n	800d93c <ai_platform_network_get_error+0xd4>
 800d8f6:	2218      	movs	r2, #24
 800d8f8:	4b25      	ldr	r3, [pc, #148]	; (800d990 <ai_platform_network_get_error+0x128>)
 800d8fa:	601a      	str	r2, [r3, #0]
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	2a18      	cmp	r2, #24
 800d900:	d031      	beq.n	800d966 <ai_platform_network_get_error+0xfe>
 800d902:	4b24      	ldr	r3, [pc, #144]	; (800d994 <ai_platform_network_get_error+0x12c>)
 800d904:	2201      	movs	r2, #1
 800d906:	4619      	mov	r1, r3
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	680b      	ldr	r3, [r1, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1fc      	bne.n	800d90a <ai_platform_network_get_error+0xa2>
 800d910:	4b21      	ldr	r3, [pc, #132]	; (800d998 <ai_platform_network_get_error+0x130>)
 800d912:	4922      	ldr	r1, [pc, #136]	; (800d99c <ai_platform_network_get_error+0x134>)
 800d914:	4a22      	ldr	r2, [pc, #136]	; (800d9a0 <ai_platform_network_get_error+0x138>)
 800d916:	6019      	str	r1, [r3, #0]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d01b      	beq.n	800d956 <ai_platform_network_get_error+0xee>
 800d91e:	e7fe      	b.n	800d91e <ai_platform_network_get_error+0xb6>
 800d920:	2201      	movs	r2, #1
 800d922:	4619      	mov	r1, r3
 800d924:	601a      	str	r2, [r3, #0]
 800d926:	680b      	ldr	r3, [r1, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1fc      	bne.n	800d926 <ai_platform_network_get_error+0xbe>
 800d92c:	4b17      	ldr	r3, [pc, #92]	; (800d98c <ai_platform_network_get_error+0x124>)
 800d92e:	491b      	ldr	r1, [pc, #108]	; (800d99c <ai_platform_network_get_error+0x134>)
 800d930:	4a1b      	ldr	r2, [pc, #108]	; (800d9a0 <ai_platform_network_get_error+0x138>)
 800d932:	6019      	str	r1, [r3, #0]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4293      	cmp	r3, r2
 800d938:	d0cb      	beq.n	800d8d2 <ai_platform_network_get_error+0x6a>
 800d93a:	e7fe      	b.n	800d93a <ai_platform_network_get_error+0xd2>
 800d93c:	2301      	movs	r3, #1
 800d93e:	f100 0208 	add.w	r2, r0, #8
 800d942:	6083      	str	r3, [r0, #8]
 800d944:	6813      	ldr	r3, [r2, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d1fc      	bne.n	800d944 <ai_platform_network_get_error+0xdc>
 800d94a:	4a14      	ldr	r2, [pc, #80]	; (800d99c <ai_platform_network_get_error+0x134>)
 800d94c:	4b14      	ldr	r3, [pc, #80]	; (800d9a0 <ai_platform_network_get_error+0x138>)
 800d94e:	6002      	str	r2, [r0, #0]
 800d950:	6802      	ldr	r2, [r0, #0]
 800d952:	429a      	cmp	r2, r3
 800d954:	d115      	bne.n	800d982 <ai_platform_network_get_error+0x11a>
 800d956:	f7ff fec3 	bl	800d6e0 <_ai_platform_release_crc>
 800d95a:	f104 0010 	add.w	r0, r4, #16
 800d95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d962:	f000 bfe1 	b.w	800e928 <core_get_error>
 800d966:	2201      	movs	r2, #1
 800d968:	4619      	mov	r1, r3
 800d96a:	601a      	str	r2, [r3, #0]
 800d96c:	680b      	ldr	r3, [r1, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1fc      	bne.n	800d96c <ai_platform_network_get_error+0x104>
 800d972:	4b06      	ldr	r3, [pc, #24]	; (800d98c <ai_platform_network_get_error+0x124>)
 800d974:	4909      	ldr	r1, [pc, #36]	; (800d99c <ai_platform_network_get_error+0x134>)
 800d976:	4a0a      	ldr	r2, [pc, #40]	; (800d9a0 <ai_platform_network_get_error+0x138>)
 800d978:	6019      	str	r1, [r3, #0]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d0ea      	beq.n	800d956 <ai_platform_network_get_error+0xee>
 800d980:	e7fe      	b.n	800d980 <ai_platform_network_get_error+0x118>
 800d982:	e7fe      	b.n	800d982 <ai_platform_network_get_error+0x11a>
 800d984:	a1c00100 	.word	0xa1c00100
 800d988:	e0002000 	.word	0xe0002000
 800d98c:	40023000 	.word	0x40023000
 800d990:	40023008 	.word	0x40023008
 800d994:	50023008 	.word	0x50023008
 800d998:	50023000 	.word	0x50023000
 800d99c:	f407a5c2 	.word	0xf407a5c2
 800d9a0:	b5e8b5cd 	.word	0xb5e8b5cd

0800d9a4 <ai_platform_network_set_error>:
 800d9a4:	b110      	cbz	r0, 800d9ac <ai_platform_network_set_error+0x8>
 800d9a6:	3010      	adds	r0, #16
 800d9a8:	f000 bfc4 	b.w	800e934 <core_set_error>
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop

0800d9b0 <ai_platform_inputs_get>:
 800d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b4:	b085      	sub	sp, #20
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d034      	beq.n	800da24 <ai_platform_inputs_get+0x74>
 800d9ba:	4b82      	ldr	r3, [pc, #520]	; (800dbc4 <ai_platform_inputs_get+0x214>)
 800d9bc:	6802      	ldr	r2, [r0, #0]
 800d9be:	4607      	mov	r7, r0
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d12f      	bne.n	800da24 <ai_platform_inputs_get+0x74>
 800d9c4:	4a80      	ldr	r2, [pc, #512]	; (800dbc8 <ai_platform_inputs_get+0x218>)
 800d9c6:	468b      	mov	fp, r1
 800d9c8:	6813      	ldr	r3, [r2, #0]
 800d9ca:	f023 0301 	bic.w	r3, r3, #1
 800d9ce:	6013      	str	r3, [r2, #0]
 800d9d0:	f7ff fe84 	bl	800d6dc <_ai_platform_acquire_crc>
 800d9d4:	4b7d      	ldr	r3, [pc, #500]	; (800dbcc <ai_platform_inputs_get+0x21c>)
 800d9d6:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d014      	beq.n	800da08 <ai_platform_inputs_get+0x58>
 800d9de:	2218      	movs	r2, #24
 800d9e0:	4b7b      	ldr	r3, [pc, #492]	; (800dbd0 <ai_platform_inputs_get+0x220>)
 800d9e2:	601a      	str	r2, [r3, #0]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	2a18      	cmp	r2, #24
 800d9e8:	d040      	beq.n	800da6c <ai_platform_inputs_get+0xbc>
 800d9ea:	4b7a      	ldr	r3, [pc, #488]	; (800dbd4 <ai_platform_inputs_get+0x224>)
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	601a      	str	r2, [r3, #0]
 800d9f2:	680b      	ldr	r3, [r1, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1fc      	bne.n	800d9f2 <ai_platform_inputs_get+0x42>
 800d9f8:	4b77      	ldr	r3, [pc, #476]	; (800dbd8 <ai_platform_inputs_get+0x228>)
 800d9fa:	4978      	ldr	r1, [pc, #480]	; (800dbdc <ai_platform_inputs_get+0x22c>)
 800d9fc:	4a78      	ldr	r2, [pc, #480]	; (800dbe0 <ai_platform_inputs_get+0x230>)
 800d9fe:	6019      	str	r1, [r3, #0]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4293      	cmp	r3, r2
 800da04:	d040      	beq.n	800da88 <ai_platform_inputs_get+0xd8>
 800da06:	e7fe      	b.n	800da06 <ai_platform_inputs_get+0x56>
 800da08:	2301      	movs	r3, #1
 800da0a:	f100 0208 	add.w	r2, r0, #8
 800da0e:	6083      	str	r3, [r0, #8]
 800da10:	6813      	ldr	r3, [r2, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d1fc      	bne.n	800da10 <ai_platform_inputs_get+0x60>
 800da16:	4a71      	ldr	r2, [pc, #452]	; (800dbdc <ai_platform_inputs_get+0x22c>)
 800da18:	4b71      	ldr	r3, [pc, #452]	; (800dbe0 <ai_platform_inputs_get+0x230>)
 800da1a:	6002      	str	r2, [r0, #0]
 800da1c:	6802      	ldr	r2, [r0, #0]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d032      	beq.n	800da88 <ai_platform_inputs_get+0xd8>
 800da22:	e7fe      	b.n	800da22 <ai_platform_inputs_get+0x72>
 800da24:	4a68      	ldr	r2, [pc, #416]	; (800dbc8 <ai_platform_inputs_get+0x218>)
 800da26:	6813      	ldr	r3, [r2, #0]
 800da28:	f023 0301 	bic.w	r3, r3, #1
 800da2c:	6013      	str	r3, [r2, #0]
 800da2e:	f7ff fe55 	bl	800d6dc <_ai_platform_acquire_crc>
 800da32:	4b66      	ldr	r3, [pc, #408]	; (800dbcc <ai_platform_inputs_get+0x21c>)
 800da34:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800da38:	429a      	cmp	r2, r3
 800da3a:	f000 80a2 	beq.w	800db82 <ai_platform_inputs_get+0x1d2>
 800da3e:	2218      	movs	r2, #24
 800da40:	4b63      	ldr	r3, [pc, #396]	; (800dbd0 <ai_platform_inputs_get+0x220>)
 800da42:	601a      	str	r2, [r3, #0]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	2a18      	cmp	r2, #24
 800da48:	f000 80a9 	beq.w	800db9e <ai_platform_inputs_get+0x1ee>
 800da4c:	4b61      	ldr	r3, [pc, #388]	; (800dbd4 <ai_platform_inputs_get+0x224>)
 800da4e:	2201      	movs	r2, #1
 800da50:	4619      	mov	r1, r3
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	680b      	ldr	r3, [r1, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d1fc      	bne.n	800da54 <ai_platform_inputs_get+0xa4>
 800da5a:	4b5f      	ldr	r3, [pc, #380]	; (800dbd8 <ai_platform_inputs_get+0x228>)
 800da5c:	495f      	ldr	r1, [pc, #380]	; (800dbdc <ai_platform_inputs_get+0x22c>)
 800da5e:	4a60      	ldr	r2, [pc, #384]	; (800dbe0 <ai_platform_inputs_get+0x230>)
 800da60:	6019      	str	r1, [r3, #0]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4293      	cmp	r3, r2
 800da66:	f000 80a7 	beq.w	800dbb8 <ai_platform_inputs_get+0x208>
 800da6a:	e7fe      	b.n	800da6a <ai_platform_inputs_get+0xba>
 800da6c:	2201      	movs	r2, #1
 800da6e:	4619      	mov	r1, r3
 800da70:	601a      	str	r2, [r3, #0]
 800da72:	680b      	ldr	r3, [r1, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d1fc      	bne.n	800da72 <ai_platform_inputs_get+0xc2>
 800da78:	4b54      	ldr	r3, [pc, #336]	; (800dbcc <ai_platform_inputs_get+0x21c>)
 800da7a:	4958      	ldr	r1, [pc, #352]	; (800dbdc <ai_platform_inputs_get+0x22c>)
 800da7c:	4a58      	ldr	r2, [pc, #352]	; (800dbe0 <ai_platform_inputs_get+0x230>)
 800da7e:	6019      	str	r1, [r3, #0]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4293      	cmp	r3, r2
 800da84:	f040 809d 	bne.w	800dbc2 <ai_platform_inputs_get+0x212>
 800da88:	f7ff fe2a 	bl	800d6e0 <_ai_platform_release_crc>
 800da8c:	f1bb 0f00 	cmp.w	fp, #0
 800da90:	d002      	beq.n	800da98 <ai_platform_inputs_get+0xe8>
 800da92:	2300      	movs	r3, #0
 800da94:	f8ab 3000 	strh.w	r3, [fp]
 800da98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d067      	beq.n	800db6e <ai_platform_inputs_get+0x1be>
 800da9e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800daa0:	2e00      	cmp	r6, #0
 800daa2:	d064      	beq.n	800db6e <ai_platform_inputs_get+0x1be>
 800daa4:	8833      	ldrh	r3, [r6, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d061      	beq.n	800db6e <ai_platform_inputs_get+0x1be>
 800daaa:	6873      	ldr	r3, [r6, #4]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d05e      	beq.n	800db6e <ai_platform_inputs_get+0x1be>
 800dab0:	681d      	ldr	r5, [r3, #0]
 800dab2:	2d00      	cmp	r5, #0
 800dab4:	d05b      	beq.n	800db6e <ai_platform_inputs_get+0x1be>
 800dab6:	f04f 0800 	mov.w	r8, #0
 800daba:	f8cd b00c 	str.w	fp, [sp, #12]
 800dabe:	46c1      	mov	r9, r8
 800dac0:	46bb      	mov	fp, r7
 800dac2:	68ab      	ldr	r3, [r5, #8]
 800dac4:	68b0      	ldr	r0, [r6, #8]
 800dac6:	69a9      	ldr	r1, [r5, #24]
 800dac8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800dacc:	9301      	str	r3, [sp, #4]
 800dace:	68eb      	ldr	r3, [r5, #12]
 800dad0:	6844      	ldr	r4, [r0, #4]
 800dad2:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800dad6:	6808      	ldr	r0, [r1, #0]
 800dad8:	9302      	str	r3, [sp, #8]
 800dada:	f001 fd69 	bl	800f5b0 <ai_array_to_buffer_fmt>
 800dade:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800dae2:	4602      	mov	r2, r0
 800dae4:	69a8      	ldr	r0, [r5, #24]
 800dae6:	eb0a 0307 	add.w	r3, sl, r7
 800daea:	4444      	add	r4, r8
 800daec:	6881      	ldr	r1, [r0, #8]
 800daee:	b16b      	cbz	r3, 800db0c <ai_platform_inputs_get+0x15c>
 800daf0:	2000      	movs	r0, #0
 800daf2:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800daf6:	6828      	ldr	r0, [r5, #0]
 800daf8:	6058      	str	r0, [r3, #4]
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d034      	beq.n	800db68 <ai_platform_inputs_get+0x1b8>
 800dafe:	8840      	ldrh	r0, [r0, #2]
 800db00:	2800      	cmp	r0, #0
 800db02:	d031      	beq.n	800db68 <ai_platform_inputs_get+0x1b8>
 800db04:	2001      	movs	r0, #1
 800db06:	f84a 0007 	str.w	r0, [sl, r7]
 800db0a:	69a8      	ldr	r0, [r5, #24]
 800db0c:	f04f 0701 	mov.w	r7, #1
 800db10:	6840      	ldr	r0, [r0, #4]
 800db12:	60a3      	str	r3, [r4, #8]
 800db14:	2300      	movs	r3, #0
 800db16:	7527      	strb	r7, [r4, #20]
 800db18:	6967      	ldr	r7, [r4, #20]
 800db1a:	6120      	str	r0, [r4, #16]
 800db1c:	9801      	ldr	r0, [sp, #4]
 800db1e:	60e3      	str	r3, [r4, #12]
 800db20:	9b02      	ldr	r3, [sp, #8]
 800db22:	f360 271f 	bfi	r7, r0, #8, #24
 800db26:	e9c4 7305 	strd	r7, r3, [r4, #20]
 800db2a:	e9c4 2100 	strd	r2, r1, [r4]
 800db2e:	8831      	ldrh	r1, [r6, #0]
 800db30:	f109 0501 	add.w	r5, r9, #1
 800db34:	428d      	cmp	r5, r1
 800db36:	46a9      	mov	r9, r5
 800db38:	b2ab      	uxth	r3, r5
 800db3a:	d207      	bcs.n	800db4c <ai_platform_inputs_get+0x19c>
 800db3c:	6871      	ldr	r1, [r6, #4]
 800db3e:	b129      	cbz	r1, 800db4c <ai_platform_inputs_get+0x19c>
 800db40:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800db44:	f108 081c 	add.w	r8, r8, #28
 800db48:	2d00      	cmp	r5, #0
 800db4a:	d1ba      	bne.n	800dac2 <ai_platform_inputs_get+0x112>
 800db4c:	465f      	mov	r7, fp
 800db4e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800db52:	b163      	cbz	r3, 800db6e <ai_platform_inputs_get+0x1be>
 800db54:	68b2      	ldr	r2, [r6, #8]
 800db56:	6850      	ldr	r0, [r2, #4]
 800db58:	f1bb 0f00 	cmp.w	fp, #0
 800db5c:	d00e      	beq.n	800db7c <ai_platform_inputs_get+0x1cc>
 800db5e:	f8ab 3000 	strh.w	r3, [fp]
 800db62:	b005      	add	sp, #20
 800db64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db68:	69a8      	ldr	r0, [r5, #24]
 800db6a:	2300      	movs	r3, #0
 800db6c:	e7ce      	b.n	800db0c <ai_platform_inputs_get+0x15c>
 800db6e:	f107 0010 	add.w	r0, r7, #16
 800db72:	2218      	movs	r2, #24
 800db74:	2111      	movs	r1, #17
 800db76:	f000 fedd 	bl	800e934 <core_set_error>
 800db7a:	2000      	movs	r0, #0
 800db7c:	b005      	add	sp, #20
 800db7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db82:	2301      	movs	r3, #1
 800db84:	f100 0208 	add.w	r2, r0, #8
 800db88:	6083      	str	r3, [r0, #8]
 800db8a:	6813      	ldr	r3, [r2, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1fc      	bne.n	800db8a <ai_platform_inputs_get+0x1da>
 800db90:	4a12      	ldr	r2, [pc, #72]	; (800dbdc <ai_platform_inputs_get+0x22c>)
 800db92:	4b13      	ldr	r3, [pc, #76]	; (800dbe0 <ai_platform_inputs_get+0x230>)
 800db94:	6002      	str	r2, [r0, #0]
 800db96:	6802      	ldr	r2, [r0, #0]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d00d      	beq.n	800dbb8 <ai_platform_inputs_get+0x208>
 800db9c:	e7fe      	b.n	800db9c <ai_platform_inputs_get+0x1ec>
 800db9e:	2201      	movs	r2, #1
 800dba0:	4619      	mov	r1, r3
 800dba2:	601a      	str	r2, [r3, #0]
 800dba4:	680b      	ldr	r3, [r1, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1fc      	bne.n	800dba4 <ai_platform_inputs_get+0x1f4>
 800dbaa:	4b08      	ldr	r3, [pc, #32]	; (800dbcc <ai_platform_inputs_get+0x21c>)
 800dbac:	490b      	ldr	r1, [pc, #44]	; (800dbdc <ai_platform_inputs_get+0x22c>)
 800dbae:	4a0c      	ldr	r2, [pc, #48]	; (800dbe0 <ai_platform_inputs_get+0x230>)
 800dbb0:	6019      	str	r1, [r3, #0]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d103      	bne.n	800dbc0 <ai_platform_inputs_get+0x210>
 800dbb8:	f7ff fd92 	bl	800d6e0 <_ai_platform_release_crc>
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	e7dd      	b.n	800db7c <ai_platform_inputs_get+0x1cc>
 800dbc0:	e7fe      	b.n	800dbc0 <ai_platform_inputs_get+0x210>
 800dbc2:	e7fe      	b.n	800dbc2 <ai_platform_inputs_get+0x212>
 800dbc4:	a1c00100 	.word	0xa1c00100
 800dbc8:	e0002000 	.word	0xe0002000
 800dbcc:	40023000 	.word	0x40023000
 800dbd0:	40023008 	.word	0x40023008
 800dbd4:	50023008 	.word	0x50023008
 800dbd8:	50023000 	.word	0x50023000
 800dbdc:	f407a5c2 	.word	0xf407a5c2
 800dbe0:	b5e8b5cd 	.word	0xb5e8b5cd

0800dbe4 <ai_platform_outputs_get>:
 800dbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe8:	b085      	sub	sp, #20
 800dbea:	2800      	cmp	r0, #0
 800dbec:	d034      	beq.n	800dc58 <ai_platform_outputs_get+0x74>
 800dbee:	4b84      	ldr	r3, [pc, #528]	; (800de00 <ai_platform_outputs_get+0x21c>)
 800dbf0:	6802      	ldr	r2, [r0, #0]
 800dbf2:	4607      	mov	r7, r0
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d12f      	bne.n	800dc58 <ai_platform_outputs_get+0x74>
 800dbf8:	4a82      	ldr	r2, [pc, #520]	; (800de04 <ai_platform_outputs_get+0x220>)
 800dbfa:	468b      	mov	fp, r1
 800dbfc:	6813      	ldr	r3, [r2, #0]
 800dbfe:	f023 0301 	bic.w	r3, r3, #1
 800dc02:	6013      	str	r3, [r2, #0]
 800dc04:	f7ff fd6a 	bl	800d6dc <_ai_platform_acquire_crc>
 800dc08:	4b7f      	ldr	r3, [pc, #508]	; (800de08 <ai_platform_outputs_get+0x224>)
 800dc0a:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d014      	beq.n	800dc3c <ai_platform_outputs_get+0x58>
 800dc12:	2218      	movs	r2, #24
 800dc14:	4b7d      	ldr	r3, [pc, #500]	; (800de0c <ai_platform_outputs_get+0x228>)
 800dc16:	601a      	str	r2, [r3, #0]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	2a18      	cmp	r2, #24
 800dc1c:	d040      	beq.n	800dca0 <ai_platform_outputs_get+0xbc>
 800dc1e:	4b7c      	ldr	r3, [pc, #496]	; (800de10 <ai_platform_outputs_get+0x22c>)
 800dc20:	2201      	movs	r2, #1
 800dc22:	4619      	mov	r1, r3
 800dc24:	601a      	str	r2, [r3, #0]
 800dc26:	680b      	ldr	r3, [r1, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1fc      	bne.n	800dc26 <ai_platform_outputs_get+0x42>
 800dc2c:	4b79      	ldr	r3, [pc, #484]	; (800de14 <ai_platform_outputs_get+0x230>)
 800dc2e:	497a      	ldr	r1, [pc, #488]	; (800de18 <ai_platform_outputs_get+0x234>)
 800dc30:	4a7a      	ldr	r2, [pc, #488]	; (800de1c <ai_platform_outputs_get+0x238>)
 800dc32:	6019      	str	r1, [r3, #0]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d040      	beq.n	800dcbc <ai_platform_outputs_get+0xd8>
 800dc3a:	e7fe      	b.n	800dc3a <ai_platform_outputs_get+0x56>
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	f100 0208 	add.w	r2, r0, #8
 800dc42:	6083      	str	r3, [r0, #8]
 800dc44:	6813      	ldr	r3, [r2, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1fc      	bne.n	800dc44 <ai_platform_outputs_get+0x60>
 800dc4a:	4a73      	ldr	r2, [pc, #460]	; (800de18 <ai_platform_outputs_get+0x234>)
 800dc4c:	4b73      	ldr	r3, [pc, #460]	; (800de1c <ai_platform_outputs_get+0x238>)
 800dc4e:	6002      	str	r2, [r0, #0]
 800dc50:	6802      	ldr	r2, [r0, #0]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d032      	beq.n	800dcbc <ai_platform_outputs_get+0xd8>
 800dc56:	e7fe      	b.n	800dc56 <ai_platform_outputs_get+0x72>
 800dc58:	4a6a      	ldr	r2, [pc, #424]	; (800de04 <ai_platform_outputs_get+0x220>)
 800dc5a:	6813      	ldr	r3, [r2, #0]
 800dc5c:	f023 0301 	bic.w	r3, r3, #1
 800dc60:	6013      	str	r3, [r2, #0]
 800dc62:	f7ff fd3b 	bl	800d6dc <_ai_platform_acquire_crc>
 800dc66:	4b68      	ldr	r3, [pc, #416]	; (800de08 <ai_platform_outputs_get+0x224>)
 800dc68:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	f000 809d 	beq.w	800ddac <ai_platform_outputs_get+0x1c8>
 800dc72:	2218      	movs	r2, #24
 800dc74:	4b65      	ldr	r3, [pc, #404]	; (800de0c <ai_platform_outputs_get+0x228>)
 800dc76:	601a      	str	r2, [r3, #0]
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	2a18      	cmp	r2, #24
 800dc7c:	f000 80a4 	beq.w	800ddc8 <ai_platform_outputs_get+0x1e4>
 800dc80:	4b63      	ldr	r3, [pc, #396]	; (800de10 <ai_platform_outputs_get+0x22c>)
 800dc82:	2201      	movs	r2, #1
 800dc84:	4619      	mov	r1, r3
 800dc86:	601a      	str	r2, [r3, #0]
 800dc88:	680b      	ldr	r3, [r1, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1fc      	bne.n	800dc88 <ai_platform_outputs_get+0xa4>
 800dc8e:	4b61      	ldr	r3, [pc, #388]	; (800de14 <ai_platform_outputs_get+0x230>)
 800dc90:	4961      	ldr	r1, [pc, #388]	; (800de18 <ai_platform_outputs_get+0x234>)
 800dc92:	4a62      	ldr	r2, [pc, #392]	; (800de1c <ai_platform_outputs_get+0x238>)
 800dc94:	6019      	str	r1, [r3, #0]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	f000 80a2 	beq.w	800dde2 <ai_platform_outputs_get+0x1fe>
 800dc9e:	e7fe      	b.n	800dc9e <ai_platform_outputs_get+0xba>
 800dca0:	2201      	movs	r2, #1
 800dca2:	4619      	mov	r1, r3
 800dca4:	601a      	str	r2, [r3, #0]
 800dca6:	680b      	ldr	r3, [r1, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d1fc      	bne.n	800dca6 <ai_platform_outputs_get+0xc2>
 800dcac:	4b56      	ldr	r3, [pc, #344]	; (800de08 <ai_platform_outputs_get+0x224>)
 800dcae:	495a      	ldr	r1, [pc, #360]	; (800de18 <ai_platform_outputs_get+0x234>)
 800dcb0:	4a5a      	ldr	r2, [pc, #360]	; (800de1c <ai_platform_outputs_get+0x238>)
 800dcb2:	6019      	str	r1, [r3, #0]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	f040 80a0 	bne.w	800ddfc <ai_platform_outputs_get+0x218>
 800dcbc:	f7ff fd10 	bl	800d6e0 <_ai_platform_release_crc>
 800dcc0:	f1bb 0f00 	cmp.w	fp, #0
 800dcc4:	d002      	beq.n	800dccc <ai_platform_outputs_get+0xe8>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	f8ab 3000 	strh.w	r3, [fp]
 800dccc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	f240 808b 	bls.w	800ddea <ai_platform_outputs_get+0x206>
 800dcd4:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800dcd6:	f116 0f0c 	cmn.w	r6, #12
 800dcda:	f000 8086 	beq.w	800ddea <ai_platform_outputs_get+0x206>
 800dcde:	89b3      	ldrh	r3, [r6, #12]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f000 8082 	beq.w	800ddea <ai_platform_outputs_get+0x206>
 800dce6:	6933      	ldr	r3, [r6, #16]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d07e      	beq.n	800ddea <ai_platform_outputs_get+0x206>
 800dcec:	681d      	ldr	r5, [r3, #0]
 800dcee:	2d00      	cmp	r5, #0
 800dcf0:	d07b      	beq.n	800ddea <ai_platform_outputs_get+0x206>
 800dcf2:	f04f 0800 	mov.w	r8, #0
 800dcf6:	f8cd b00c 	str.w	fp, [sp, #12]
 800dcfa:	46c1      	mov	r9, r8
 800dcfc:	46bb      	mov	fp, r7
 800dcfe:	68ab      	ldr	r3, [r5, #8]
 800dd00:	6970      	ldr	r0, [r6, #20]
 800dd02:	69a9      	ldr	r1, [r5, #24]
 800dd04:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800dd08:	9301      	str	r3, [sp, #4]
 800dd0a:	68eb      	ldr	r3, [r5, #12]
 800dd0c:	6844      	ldr	r4, [r0, #4]
 800dd0e:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800dd12:	6808      	ldr	r0, [r1, #0]
 800dd14:	9302      	str	r3, [sp, #8]
 800dd16:	f001 fc4b 	bl	800f5b0 <ai_array_to_buffer_fmt>
 800dd1a:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800dd1e:	4602      	mov	r2, r0
 800dd20:	69a8      	ldr	r0, [r5, #24]
 800dd22:	eb0a 0307 	add.w	r3, sl, r7
 800dd26:	4444      	add	r4, r8
 800dd28:	6881      	ldr	r1, [r0, #8]
 800dd2a:	b16b      	cbz	r3, 800dd48 <ai_platform_outputs_get+0x164>
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800dd32:	6828      	ldr	r0, [r5, #0]
 800dd34:	6058      	str	r0, [r3, #4]
 800dd36:	2800      	cmp	r0, #0
 800dd38:	d035      	beq.n	800dda6 <ai_platform_outputs_get+0x1c2>
 800dd3a:	8840      	ldrh	r0, [r0, #2]
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	d032      	beq.n	800dda6 <ai_platform_outputs_get+0x1c2>
 800dd40:	2001      	movs	r0, #1
 800dd42:	f84a 0007 	str.w	r0, [sl, r7]
 800dd46:	69a8      	ldr	r0, [r5, #24]
 800dd48:	f04f 0701 	mov.w	r7, #1
 800dd4c:	6840      	ldr	r0, [r0, #4]
 800dd4e:	60a3      	str	r3, [r4, #8]
 800dd50:	2300      	movs	r3, #0
 800dd52:	7527      	strb	r7, [r4, #20]
 800dd54:	6967      	ldr	r7, [r4, #20]
 800dd56:	6120      	str	r0, [r4, #16]
 800dd58:	9801      	ldr	r0, [sp, #4]
 800dd5a:	60e3      	str	r3, [r4, #12]
 800dd5c:	9b02      	ldr	r3, [sp, #8]
 800dd5e:	f360 271f 	bfi	r7, r0, #8, #24
 800dd62:	e9c4 7305 	strd	r7, r3, [r4, #20]
 800dd66:	e9c4 2100 	strd	r2, r1, [r4]
 800dd6a:	89b1      	ldrh	r1, [r6, #12]
 800dd6c:	f109 0501 	add.w	r5, r9, #1
 800dd70:	428d      	cmp	r5, r1
 800dd72:	46a9      	mov	r9, r5
 800dd74:	b2ab      	uxth	r3, r5
 800dd76:	d207      	bcs.n	800dd88 <ai_platform_outputs_get+0x1a4>
 800dd78:	6931      	ldr	r1, [r6, #16]
 800dd7a:	b129      	cbz	r1, 800dd88 <ai_platform_outputs_get+0x1a4>
 800dd7c:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800dd80:	f108 081c 	add.w	r8, r8, #28
 800dd84:	2d00      	cmp	r5, #0
 800dd86:	d1ba      	bne.n	800dcfe <ai_platform_outputs_get+0x11a>
 800dd88:	465f      	mov	r7, fp
 800dd8a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d02b      	beq.n	800ddea <ai_platform_outputs_get+0x206>
 800dd92:	6972      	ldr	r2, [r6, #20]
 800dd94:	6850      	ldr	r0, [r2, #4]
 800dd96:	f1bb 0f00 	cmp.w	fp, #0
 800dd9a:	d001      	beq.n	800dda0 <ai_platform_outputs_get+0x1bc>
 800dd9c:	f8ab 3000 	strh.w	r3, [fp]
 800dda0:	b005      	add	sp, #20
 800dda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda6:	69a8      	ldr	r0, [r5, #24]
 800dda8:	2300      	movs	r3, #0
 800ddaa:	e7cd      	b.n	800dd48 <ai_platform_outputs_get+0x164>
 800ddac:	2301      	movs	r3, #1
 800ddae:	f100 0208 	add.w	r2, r0, #8
 800ddb2:	6083      	str	r3, [r0, #8]
 800ddb4:	6813      	ldr	r3, [r2, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d1fc      	bne.n	800ddb4 <ai_platform_outputs_get+0x1d0>
 800ddba:	4a17      	ldr	r2, [pc, #92]	; (800de18 <ai_platform_outputs_get+0x234>)
 800ddbc:	4b17      	ldr	r3, [pc, #92]	; (800de1c <ai_platform_outputs_get+0x238>)
 800ddbe:	6002      	str	r2, [r0, #0]
 800ddc0:	6802      	ldr	r2, [r0, #0]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d00d      	beq.n	800dde2 <ai_platform_outputs_get+0x1fe>
 800ddc6:	e7fe      	b.n	800ddc6 <ai_platform_outputs_get+0x1e2>
 800ddc8:	2201      	movs	r2, #1
 800ddca:	4619      	mov	r1, r3
 800ddcc:	601a      	str	r2, [r3, #0]
 800ddce:	680b      	ldr	r3, [r1, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d1fc      	bne.n	800ddce <ai_platform_outputs_get+0x1ea>
 800ddd4:	4b0c      	ldr	r3, [pc, #48]	; (800de08 <ai_platform_outputs_get+0x224>)
 800ddd6:	4910      	ldr	r1, [pc, #64]	; (800de18 <ai_platform_outputs_get+0x234>)
 800ddd8:	4a10      	ldr	r2, [pc, #64]	; (800de1c <ai_platform_outputs_get+0x238>)
 800ddda:	6019      	str	r1, [r3, #0]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d10b      	bne.n	800ddfa <ai_platform_outputs_get+0x216>
 800dde2:	f7ff fc7d 	bl	800d6e0 <_ai_platform_release_crc>
 800dde6:	2000      	movs	r0, #0
 800dde8:	e7da      	b.n	800dda0 <ai_platform_outputs_get+0x1bc>
 800ddea:	f107 0010 	add.w	r0, r7, #16
 800ddee:	2218      	movs	r2, #24
 800ddf0:	2111      	movs	r1, #17
 800ddf2:	f000 fd9f 	bl	800e934 <core_set_error>
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	e7d2      	b.n	800dda0 <ai_platform_outputs_get+0x1bc>
 800ddfa:	e7fe      	b.n	800ddfa <ai_platform_outputs_get+0x216>
 800ddfc:	e7fe      	b.n	800ddfc <ai_platform_outputs_get+0x218>
 800ddfe:	bf00      	nop
 800de00:	a1c00100 	.word	0xa1c00100
 800de04:	e0002000 	.word	0xe0002000
 800de08:	40023000 	.word	0x40023000
 800de0c:	40023008 	.word	0x40023008
 800de10:	50023008 	.word	0x50023008
 800de14:	50023000 	.word	0x50023000
 800de18:	f407a5c2 	.word	0xf407a5c2
 800de1c:	b5e8b5cd 	.word	0xb5e8b5cd

0800de20 <ai_platform_network_create>:
 800de20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de24:	b082      	sub	sp, #8
 800de26:	4605      	mov	r5, r0
 800de28:	4614      	mov	r4, r2
 800de2a:	461e      	mov	r6, r3
 800de2c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800de30:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800de34:	f7ff fc52 	bl	800d6dc <_ai_platform_acquire_crc>
 800de38:	2800      	cmp	r0, #0
 800de3a:	d043      	beq.n	800dec4 <ai_platform_network_create+0xa4>
 800de3c:	4b70      	ldr	r3, [pc, #448]	; (800e000 <ai_platform_network_create+0x1e0>)
 800de3e:	4298      	cmp	r0, r3
 800de40:	d00a      	beq.n	800de58 <ai_platform_network_create+0x38>
 800de42:	4b70      	ldr	r3, [pc, #448]	; (800e004 <ai_platform_network_create+0x1e4>)
 800de44:	4298      	cmp	r0, r3
 800de46:	d035      	beq.n	800deb4 <ai_platform_network_create+0x94>
 800de48:	2218      	movs	r2, #24
 800de4a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800de4e:	3308      	adds	r3, #8
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4293      	cmp	r3, r2
 800de56:	d12d      	bne.n	800deb4 <ai_platform_network_create+0x94>
 800de58:	2218      	movs	r2, #24
 800de5a:	4b6b      	ldr	r3, [pc, #428]	; (800e008 <ai_platform_network_create+0x1e8>)
 800de5c:	601a      	str	r2, [r3, #0]
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	2a18      	cmp	r2, #24
 800de62:	d12d      	bne.n	800dec0 <ai_platform_network_create+0xa0>
 800de64:	2201      	movs	r2, #1
 800de66:	601a      	str	r2, [r3, #0]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	2a00      	cmp	r2, #0
 800de6c:	d1fc      	bne.n	800de68 <ai_platform_network_create+0x48>
 800de6e:	f7ff fc37 	bl	800d6e0 <_ai_platform_release_crc>
 800de72:	4a66      	ldr	r2, [pc, #408]	; (800e00c <ai_platform_network_create+0x1ec>)
 800de74:	6813      	ldr	r3, [r2, #0]
 800de76:	f023 0301 	bic.w	r3, r3, #1
 800de7a:	6013      	str	r3, [r2, #0]
 800de7c:	f7ff fc2e 	bl	800d6dc <_ai_platform_acquire_crc>
 800de80:	4b5f      	ldr	r3, [pc, #380]	; (800e000 <ai_platform_network_create+0x1e0>)
 800de82:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800de86:	429a      	cmp	r2, r3
 800de88:	d022      	beq.n	800ded0 <ai_platform_network_create+0xb0>
 800de8a:	2218      	movs	r2, #24
 800de8c:	4b5e      	ldr	r3, [pc, #376]	; (800e008 <ai_platform_network_create+0x1e8>)
 800de8e:	601a      	str	r2, [r3, #0]
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	2a18      	cmp	r2, #24
 800de94:	d02a      	beq.n	800deec <ai_platform_network_create+0xcc>
 800de96:	4b5e      	ldr	r3, [pc, #376]	; (800e010 <ai_platform_network_create+0x1f0>)
 800de98:	2201      	movs	r2, #1
 800de9a:	4619      	mov	r1, r3
 800de9c:	601a      	str	r2, [r3, #0]
 800de9e:	680b      	ldr	r3, [r1, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1fc      	bne.n	800de9e <ai_platform_network_create+0x7e>
 800dea4:	4b57      	ldr	r3, [pc, #348]	; (800e004 <ai_platform_network_create+0x1e4>)
 800dea6:	495b      	ldr	r1, [pc, #364]	; (800e014 <ai_platform_network_create+0x1f4>)
 800dea8:	4a5b      	ldr	r2, [pc, #364]	; (800e018 <ai_platform_network_create+0x1f8>)
 800deaa:	6019      	str	r1, [r3, #0]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4293      	cmp	r3, r2
 800deb0:	d029      	beq.n	800df06 <ai_platform_network_create+0xe6>
 800deb2:	e7fe      	b.n	800deb2 <ai_platform_network_create+0x92>
 800deb4:	2218      	movs	r2, #24
 800deb6:	4b56      	ldr	r3, [pc, #344]	; (800e010 <ai_platform_network_create+0x1f0>)
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	2a18      	cmp	r2, #24
 800debe:	d0d1      	beq.n	800de64 <ai_platform_network_create+0x44>
 800dec0:	f7ff fc0e 	bl	800d6e0 <_ai_platform_release_crc>
 800dec4:	f244 1333 	movw	r3, #16691	; 0x4133
 800dec8:	4618      	mov	r0, r3
 800deca:	b002      	add	sp, #8
 800decc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded0:	2301      	movs	r3, #1
 800ded2:	6083      	str	r3, [r0, #8]
 800ded4:	f100 0308 	add.w	r3, r0, #8
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	2a00      	cmp	r2, #0
 800dedc:	d1fc      	bne.n	800ded8 <ai_platform_network_create+0xb8>
 800dede:	4a4d      	ldr	r2, [pc, #308]	; (800e014 <ai_platform_network_create+0x1f4>)
 800dee0:	4b4d      	ldr	r3, [pc, #308]	; (800e018 <ai_platform_network_create+0x1f8>)
 800dee2:	6002      	str	r2, [r0, #0]
 800dee4:	6802      	ldr	r2, [r0, #0]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d00d      	beq.n	800df06 <ai_platform_network_create+0xe6>
 800deea:	e7fe      	b.n	800deea <ai_platform_network_create+0xca>
 800deec:	2201      	movs	r2, #1
 800deee:	4619      	mov	r1, r3
 800def0:	601a      	str	r2, [r3, #0]
 800def2:	680b      	ldr	r3, [r1, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1fc      	bne.n	800def2 <ai_platform_network_create+0xd2>
 800def8:	4b41      	ldr	r3, [pc, #260]	; (800e000 <ai_platform_network_create+0x1e0>)
 800defa:	4946      	ldr	r1, [pc, #280]	; (800e014 <ai_platform_network_create+0x1f4>)
 800defc:	4a46      	ldr	r2, [pc, #280]	; (800e018 <ai_platform_network_create+0x1f8>)
 800defe:	6019      	str	r1, [r3, #0]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4293      	cmp	r3, r2
 800df04:	d12d      	bne.n	800df62 <ai_platform_network_create+0x142>
 800df06:	f7ff fbeb 	bl	800d6e0 <_ai_platform_release_crc>
 800df0a:	2d00      	cmp	r5, #0
 800df0c:	d075      	beq.n	800dffa <ai_platform_network_create+0x1da>
 800df0e:	4b43      	ldr	r3, [pc, #268]	; (800e01c <ai_platform_network_create+0x1fc>)
 800df10:	6023      	str	r3, [r4, #0]
 800df12:	602c      	str	r4, [r5, #0]
 800df14:	f000 fd06 	bl	800e924 <core_init>
 800df18:	b910      	cbnz	r0, 800df20 <ai_platform_network_create+0x100>
 800df1a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800df1e:	e03f      	b.n	800dfa0 <ai_platform_network_create+0x180>
 800df20:	4a3a      	ldr	r2, [pc, #232]	; (800e00c <ai_platform_network_create+0x1ec>)
 800df22:	6813      	ldr	r3, [r2, #0]
 800df24:	f023 0301 	bic.w	r3, r3, #1
 800df28:	6013      	str	r3, [r2, #0]
 800df2a:	f7ff fbd7 	bl	800d6dc <_ai_platform_acquire_crc>
 800df2e:	4b34      	ldr	r3, [pc, #208]	; (800e000 <ai_platform_network_create+0x1e0>)
 800df30:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800df34:	429a      	cmp	r2, r3
 800df36:	d015      	beq.n	800df64 <ai_platform_network_create+0x144>
 800df38:	2218      	movs	r2, #24
 800df3a:	4b33      	ldr	r3, [pc, #204]	; (800e008 <ai_platform_network_create+0x1e8>)
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	2a18      	cmp	r2, #24
 800df42:	d03d      	beq.n	800dfc0 <ai_platform_network_create+0x1a0>
 800df44:	4b32      	ldr	r3, [pc, #200]	; (800e010 <ai_platform_network_create+0x1f0>)
 800df46:	2201      	movs	r2, #1
 800df48:	4619      	mov	r1, r3
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	680b      	ldr	r3, [r1, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d1fc      	bne.n	800df4c <ai_platform_network_create+0x12c>
 800df52:	4b2c      	ldr	r3, [pc, #176]	; (800e004 <ai_platform_network_create+0x1e4>)
 800df54:	492f      	ldr	r1, [pc, #188]	; (800e014 <ai_platform_network_create+0x1f4>)
 800df56:	4a30      	ldr	r2, [pc, #192]	; (800e018 <ai_platform_network_create+0x1f8>)
 800df58:	6019      	str	r1, [r3, #0]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d00e      	beq.n	800df7e <ai_platform_network_create+0x15e>
 800df60:	e7fe      	b.n	800df60 <ai_platform_network_create+0x140>
 800df62:	e7fe      	b.n	800df62 <ai_platform_network_create+0x142>
 800df64:	2301      	movs	r3, #1
 800df66:	6083      	str	r3, [r0, #8]
 800df68:	f100 0308 	add.w	r3, r0, #8
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	2a00      	cmp	r2, #0
 800df70:	d1fc      	bne.n	800df6c <ai_platform_network_create+0x14c>
 800df72:	4a28      	ldr	r2, [pc, #160]	; (800e014 <ai_platform_network_create+0x1f4>)
 800df74:	4b28      	ldr	r3, [pc, #160]	; (800e018 <ai_platform_network_create+0x1f8>)
 800df76:	6002      	str	r2, [r0, #0]
 800df78:	6802      	ldr	r2, [r0, #0]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d139      	bne.n	800dff2 <ai_platform_network_create+0x1d2>
 800df7e:	f7ff fbaf 	bl	800d6e0 <_ai_platform_release_crc>
 800df82:	2200      	movs	r2, #0
 800df84:	4639      	mov	r1, r7
 800df86:	4630      	mov	r0, r6
 800df88:	f001 faf8 	bl	800f57c <ai_version_get>
 800df8c:	2200      	movs	r2, #0
 800df8e:	4681      	mov	r9, r0
 800df90:	2105      	movs	r1, #5
 800df92:	2001      	movs	r0, #1
 800df94:	f001 faf2 	bl	800f57c <ai_version_get>
 800df98:	4581      	cmp	r9, r0
 800df9a:	d01f      	beq.n	800dfdc <ai_platform_network_create+0x1bc>
 800df9c:	f04f 0901 	mov.w	r9, #1
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	f04f 0a10 	mov.w	sl, #16
 800dfa6:	602b      	str	r3, [r5, #0]
 800dfa8:	4642      	mov	r2, r8
 800dfaa:	4639      	mov	r1, r7
 800dfac:	4630      	mov	r0, r6
 800dfae:	f001 fae5 	bl	800f57c <ai_version_get>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	f369 0307 	bfi	r3, r9, #0, #8
 800dfb8:	6460      	str	r0, [r4, #68]	; 0x44
 800dfba:	f36a 231f 	bfi	r3, sl, #8, #24
 800dfbe:	e783      	b.n	800dec8 <ai_platform_network_create+0xa8>
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	601a      	str	r2, [r3, #0]
 800dfc6:	680b      	ldr	r3, [r1, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d1fc      	bne.n	800dfc6 <ai_platform_network_create+0x1a6>
 800dfcc:	4b0c      	ldr	r3, [pc, #48]	; (800e000 <ai_platform_network_create+0x1e0>)
 800dfce:	4911      	ldr	r1, [pc, #68]	; (800e014 <ai_platform_network_create+0x1f4>)
 800dfd0:	4a11      	ldr	r2, [pc, #68]	; (800e018 <ai_platform_network_create+0x1f8>)
 800dfd2:	6019      	str	r1, [r3, #0]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d0d1      	beq.n	800df7e <ai_platform_network_create+0x15e>
 800dfda:	e7fe      	b.n	800dfda <ai_platform_network_create+0x1ba>
 800dfdc:	4b10      	ldr	r3, [pc, #64]	; (800e020 <ai_platform_network_create+0x200>)
 800dfde:	a802      	add	r0, sp, #8
 800dfe0:	f840 3d04 	str.w	r3, [r0, #-4]!
 800dfe4:	f001 fa36 	bl	800f454 <ai_check_custom_types>
 800dfe8:	b120      	cbz	r0, 800dff4 <ai_platform_network_create+0x1d4>
 800dfea:	f04f 0a00 	mov.w	sl, #0
 800dfee:	46d1      	mov	r9, sl
 800dff0:	e7da      	b.n	800dfa8 <ai_platform_network_create+0x188>
 800dff2:	e7fe      	b.n	800dff2 <ai_platform_network_create+0x1d2>
 800dff4:	f04f 0902 	mov.w	r9, #2
 800dff8:	e7d2      	b.n	800dfa0 <ai_platform_network_create+0x180>
 800dffa:	f241 0310 	movw	r3, #4112	; 0x1010
 800dffe:	e763      	b.n	800dec8 <ai_platform_network_create+0xa8>
 800e000:	40023000 	.word	0x40023000
 800e004:	50023000 	.word	0x50023000
 800e008:	40023008 	.word	0x40023008
 800e00c:	e0002000 	.word	0xe0002000
 800e010:	50023008 	.word	0x50023008
 800e014:	f407a5c2 	.word	0xf407a5c2
 800e018:	b5e8b5cd 	.word	0xb5e8b5cd
 800e01c:	a1c00100 	.word	0xa1c00100
 800e020:	84048403 	.word	0x84048403

0800e024 <ai_platform_network_init>:
 800e024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e028:	2800      	cmp	r0, #0
 800e02a:	d034      	beq.n	800e096 <ai_platform_network_init+0x72>
 800e02c:	4b8f      	ldr	r3, [pc, #572]	; (800e26c <ai_platform_network_init+0x248>)
 800e02e:	6802      	ldr	r2, [r0, #0]
 800e030:	4604      	mov	r4, r0
 800e032:	429a      	cmp	r2, r3
 800e034:	d12f      	bne.n	800e096 <ai_platform_network_init+0x72>
 800e036:	4a8e      	ldr	r2, [pc, #568]	; (800e270 <ai_platform_network_init+0x24c>)
 800e038:	460e      	mov	r6, r1
 800e03a:	6813      	ldr	r3, [r2, #0]
 800e03c:	f023 0301 	bic.w	r3, r3, #1
 800e040:	6013      	str	r3, [r2, #0]
 800e042:	f7ff fb4b 	bl	800d6dc <_ai_platform_acquire_crc>
 800e046:	4b8b      	ldr	r3, [pc, #556]	; (800e274 <ai_platform_network_init+0x250>)
 800e048:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d014      	beq.n	800e07a <ai_platform_network_init+0x56>
 800e050:	2218      	movs	r2, #24
 800e052:	4b89      	ldr	r3, [pc, #548]	; (800e278 <ai_platform_network_init+0x254>)
 800e054:	601a      	str	r2, [r3, #0]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	2a18      	cmp	r2, #24
 800e05a:	d03f      	beq.n	800e0dc <ai_platform_network_init+0xb8>
 800e05c:	4b87      	ldr	r3, [pc, #540]	; (800e27c <ai_platform_network_init+0x258>)
 800e05e:	2201      	movs	r2, #1
 800e060:	4619      	mov	r1, r3
 800e062:	601a      	str	r2, [r3, #0]
 800e064:	680b      	ldr	r3, [r1, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d1fc      	bne.n	800e064 <ai_platform_network_init+0x40>
 800e06a:	4b85      	ldr	r3, [pc, #532]	; (800e280 <ai_platform_network_init+0x25c>)
 800e06c:	4985      	ldr	r1, [pc, #532]	; (800e284 <ai_platform_network_init+0x260>)
 800e06e:	4a86      	ldr	r2, [pc, #536]	; (800e288 <ai_platform_network_init+0x264>)
 800e070:	6019      	str	r1, [r3, #0]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4293      	cmp	r3, r2
 800e076:	d03f      	beq.n	800e0f8 <ai_platform_network_init+0xd4>
 800e078:	e7fe      	b.n	800e078 <ai_platform_network_init+0x54>
 800e07a:	2301      	movs	r3, #1
 800e07c:	f100 0208 	add.w	r2, r0, #8
 800e080:	6083      	str	r3, [r0, #8]
 800e082:	6813      	ldr	r3, [r2, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d1fc      	bne.n	800e082 <ai_platform_network_init+0x5e>
 800e088:	4a7e      	ldr	r2, [pc, #504]	; (800e284 <ai_platform_network_init+0x260>)
 800e08a:	4b7f      	ldr	r3, [pc, #508]	; (800e288 <ai_platform_network_init+0x264>)
 800e08c:	6002      	str	r2, [r0, #0]
 800e08e:	6802      	ldr	r2, [r0, #0]
 800e090:	429a      	cmp	r2, r3
 800e092:	d031      	beq.n	800e0f8 <ai_platform_network_init+0xd4>
 800e094:	e7fe      	b.n	800e094 <ai_platform_network_init+0x70>
 800e096:	4a76      	ldr	r2, [pc, #472]	; (800e270 <ai_platform_network_init+0x24c>)
 800e098:	6813      	ldr	r3, [r2, #0]
 800e09a:	f023 0301 	bic.w	r3, r3, #1
 800e09e:	6013      	str	r3, [r2, #0]
 800e0a0:	f7ff fb1c 	bl	800d6dc <_ai_platform_acquire_crc>
 800e0a4:	4b73      	ldr	r3, [pc, #460]	; (800e274 <ai_platform_network_init+0x250>)
 800e0a6:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d056      	beq.n	800e15c <ai_platform_network_init+0x138>
 800e0ae:	2218      	movs	r2, #24
 800e0b0:	4b71      	ldr	r3, [pc, #452]	; (800e278 <ai_platform_network_init+0x254>)
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	2a18      	cmp	r2, #24
 800e0b8:	f000 80c4 	beq.w	800e244 <ai_platform_network_init+0x220>
 800e0bc:	4b6f      	ldr	r3, [pc, #444]	; (800e27c <ai_platform_network_init+0x258>)
 800e0be:	2201      	movs	r2, #1
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	680b      	ldr	r3, [r1, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1fc      	bne.n	800e0c4 <ai_platform_network_init+0xa0>
 800e0ca:	4b6d      	ldr	r3, [pc, #436]	; (800e280 <ai_platform_network_init+0x25c>)
 800e0cc:	496d      	ldr	r1, [pc, #436]	; (800e284 <ai_platform_network_init+0x260>)
 800e0ce:	4a6e      	ldr	r2, [pc, #440]	; (800e288 <ai_platform_network_init+0x264>)
 800e0d0:	6019      	str	r1, [r3, #0]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	f000 80c2 	beq.w	800e25e <ai_platform_network_init+0x23a>
 800e0da:	e7fe      	b.n	800e0da <ai_platform_network_init+0xb6>
 800e0dc:	2201      	movs	r2, #1
 800e0de:	4619      	mov	r1, r3
 800e0e0:	601a      	str	r2, [r3, #0]
 800e0e2:	680b      	ldr	r3, [r1, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1fc      	bne.n	800e0e2 <ai_platform_network_init+0xbe>
 800e0e8:	4b62      	ldr	r3, [pc, #392]	; (800e274 <ai_platform_network_init+0x250>)
 800e0ea:	4966      	ldr	r1, [pc, #408]	; (800e284 <ai_platform_network_init+0x260>)
 800e0ec:	4a66      	ldr	r2, [pc, #408]	; (800e288 <ai_platform_network_init+0x264>)
 800e0ee:	6019      	str	r1, [r3, #0]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	f040 80b8 	bne.w	800e268 <ai_platform_network_init+0x244>
 800e0f8:	f7ff faf2 	bl	800d6e0 <_ai_platform_release_crc>
 800e0fc:	2e00      	cmp	r6, #0
 800e0fe:	d07f      	beq.n	800e200 <ai_platform_network_init+0x1dc>
 800e100:	4b62      	ldr	r3, [pc, #392]	; (800e28c <ai_platform_network_init+0x268>)
 800e102:	6832      	ldr	r2, [r6, #0]
 800e104:	429a      	cmp	r2, r3
 800e106:	d050      	beq.n	800e1aa <ai_platform_network_init+0x186>
 800e108:	2101      	movs	r1, #1
 800e10a:	4630      	mov	r0, r6
 800e10c:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800e110:	f7ff fa98 	bl	800d644 <ai_buffer_get_size>
 800e114:	4635      	mov	r5, r6
 800e116:	f106 071c 	add.w	r7, r6, #28
 800e11a:	2101      	movs	r1, #1
 800e11c:	4606      	mov	r6, r0
 800e11e:	4638      	mov	r0, r7
 800e120:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800e124:	f7ff fa8e 	bl	800d644 <ai_buffer_get_size>
 800e128:	2e00      	cmp	r6, #0
 800e12a:	bf0a      	itet	eq
 800e12c:	46b6      	moveq	lr, r6
 800e12e:	f04f 0e01 	movne.w	lr, #1
 800e132:	4635      	moveq	r5, r6
 800e134:	2800      	cmp	r0, #0
 800e136:	d177      	bne.n	800e228 <ai_platform_network_init+0x204>
 800e138:	4607      	mov	r7, r0
 800e13a:	4684      	mov	ip, r0
 800e13c:	f1b8 0f00 	cmp.w	r8, #0
 800e140:	d068      	beq.n	800e214 <ai_platform_network_init+0x1f0>
 800e142:	8be3      	ldrh	r3, [r4, #30]
 800e144:	4573      	cmp	r3, lr
 800e146:	d217      	bcs.n	800e178 <ai_platform_network_init+0x154>
 800e148:	f104 0010 	add.w	r0, r4, #16
 800e14c:	2212      	movs	r2, #18
 800e14e:	2116      	movs	r1, #22
 800e150:	f000 fbf0 	bl	800e934 <core_set_error>
 800e154:	2400      	movs	r4, #0
 800e156:	4620      	mov	r0, r4
 800e158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e15c:	2301      	movs	r3, #1
 800e15e:	f100 0208 	add.w	r2, r0, #8
 800e162:	6083      	str	r3, [r0, #8]
 800e164:	6813      	ldr	r3, [r2, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1fc      	bne.n	800e164 <ai_platform_network_init+0x140>
 800e16a:	4a46      	ldr	r2, [pc, #280]	; (800e284 <ai_platform_network_init+0x260>)
 800e16c:	4b46      	ldr	r3, [pc, #280]	; (800e288 <ai_platform_network_init+0x264>)
 800e16e:	6002      	str	r2, [r0, #0]
 800e170:	6802      	ldr	r2, [r0, #0]
 800e172:	429a      	cmp	r2, r3
 800e174:	d073      	beq.n	800e25e <ai_platform_network_init+0x23a>
 800e176:	e7fe      	b.n	800e176 <ai_platform_network_init+0x152>
 800e178:	f1be 0f00 	cmp.w	lr, #0
 800e17c:	d006      	beq.n	800e18c <ai_platform_network_init+0x168>
 800e17e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e180:	6a26      	ldr	r6, [r4, #32]
 800e182:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e184:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e188:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800e18c:	2600      	movs	r6, #0
 800e18e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800e190:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800e194:	4563      	cmp	r3, ip
 800e196:	83a6      	strh	r6, [r4, #28]
 800e198:	d21b      	bcs.n	800e1d2 <ai_platform_network_init+0x1ae>
 800e19a:	f104 0010 	add.w	r0, r4, #16
 800e19e:	2213      	movs	r2, #19
 800e1a0:	2116      	movs	r1, #22
 800e1a2:	4634      	mov	r4, r6
 800e1a4:	f000 fbc6 	bl	800e934 <core_set_error>
 800e1a8:	e7d5      	b.n	800e156 <ai_platform_network_init+0x132>
 800e1aa:	6930      	ldr	r0, [r6, #16]
 800e1ac:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e1b0:	89b3      	ldrh	r3, [r6, #12]
 800e1b2:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 800e1b6:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800e1ba:	62a0      	str	r0, [r4, #40]	; 0x28
 800e1bc:	2203      	movs	r2, #3
 800e1be:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800e1c2:	84a3      	strh	r3, [r4, #36]	; 0x24
 800e1c4:	60e2      	str	r2, [r4, #12]
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f001 f96e 	bl	800f4a8 <ai_layers_init_all>
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d2:	f1bc 0f00 	cmp.w	ip, #0
 800e1d6:	d01b      	beq.n	800e210 <ai_platform_network_init+0x1ec>
 800e1d8:	ebcc 08cc 	rsb	r8, ip, ip, lsl #3
 800e1dc:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800e1e0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800e1e2:	eb07 0e06 	add.w	lr, r7, r6
 800e1e6:	4435      	add	r5, r6
 800e1e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e1ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1ee:	361c      	adds	r6, #28
 800e1f0:	4546      	cmp	r6, r8
 800e1f2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800e1f6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e1fa:	d1f1      	bne.n	800e1e0 <ai_platform_network_init+0x1bc>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	e7dd      	b.n	800e1bc <ai_platform_network_init+0x198>
 800e200:	f104 0010 	add.w	r0, r4, #16
 800e204:	2211      	movs	r2, #17
 800e206:	2110      	movs	r1, #16
 800e208:	4634      	mov	r4, r6
 800e20a:	f000 fb93 	bl	800e934 <core_set_error>
 800e20e:	e7a2      	b.n	800e156 <ai_platform_network_init+0x132>
 800e210:	4663      	mov	r3, ip
 800e212:	e7d3      	b.n	800e1bc <ai_platform_network_init+0x198>
 800e214:	2e00      	cmp	r6, #0
 800e216:	d094      	beq.n	800e142 <ai_platform_network_init+0x11e>
 800e218:	f104 0010 	add.w	r0, r4, #16
 800e21c:	2212      	movs	r2, #18
 800e21e:	2110      	movs	r1, #16
 800e220:	4644      	mov	r4, r8
 800e222:	f000 fb87 	bl	800e934 <core_set_error>
 800e226:	e796      	b.n	800e156 <ai_platform_network_init+0x132>
 800e228:	f1b9 0f00 	cmp.w	r9, #0
 800e22c:	d002      	beq.n	800e234 <ai_platform_network_init+0x210>
 800e22e:	f04f 0c01 	mov.w	ip, #1
 800e232:	e783      	b.n	800e13c <ai_platform_network_init+0x118>
 800e234:	f104 0010 	add.w	r0, r4, #16
 800e238:	2213      	movs	r2, #19
 800e23a:	2110      	movs	r1, #16
 800e23c:	464c      	mov	r4, r9
 800e23e:	f000 fb79 	bl	800e934 <core_set_error>
 800e242:	e788      	b.n	800e156 <ai_platform_network_init+0x132>
 800e244:	2201      	movs	r2, #1
 800e246:	4619      	mov	r1, r3
 800e248:	601a      	str	r2, [r3, #0]
 800e24a:	680b      	ldr	r3, [r1, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d1fc      	bne.n	800e24a <ai_platform_network_init+0x226>
 800e250:	4b08      	ldr	r3, [pc, #32]	; (800e274 <ai_platform_network_init+0x250>)
 800e252:	490c      	ldr	r1, [pc, #48]	; (800e284 <ai_platform_network_init+0x260>)
 800e254:	4a0c      	ldr	r2, [pc, #48]	; (800e288 <ai_platform_network_init+0x264>)
 800e256:	6019      	str	r1, [r3, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d103      	bne.n	800e266 <ai_platform_network_init+0x242>
 800e25e:	f7ff fa3f 	bl	800d6e0 <_ai_platform_release_crc>
 800e262:	2400      	movs	r4, #0
 800e264:	e777      	b.n	800e156 <ai_platform_network_init+0x132>
 800e266:	e7fe      	b.n	800e266 <ai_platform_network_init+0x242>
 800e268:	e7fe      	b.n	800e268 <ai_platform_network_init+0x244>
 800e26a:	bf00      	nop
 800e26c:	a1c00100 	.word	0xa1c00100
 800e270:	e0002000 	.word	0xe0002000
 800e274:	40023000 	.word	0x40023000
 800e278:	40023008 	.word	0x40023008
 800e27c:	50023008 	.word	0x50023008
 800e280:	50023000 	.word	0x50023000
 800e284:	f407a5c2 	.word	0xf407a5c2
 800e288:	b5e8b5cd 	.word	0xb5e8b5cd
 800e28c:	a1facade 	.word	0xa1facade

0800e290 <ai_platform_network_post_init>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	b120      	cbz	r0, 800e29e <ai_platform_network_post_init+0xe>
 800e294:	4b52      	ldr	r3, [pc, #328]	; (800e3e0 <ai_platform_network_post_init+0x150>)
 800e296:	6802      	ldr	r2, [r0, #0]
 800e298:	4604      	mov	r4, r0
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d032      	beq.n	800e304 <ai_platform_network_post_init+0x74>
 800e29e:	4a51      	ldr	r2, [pc, #324]	; (800e3e4 <ai_platform_network_post_init+0x154>)
 800e2a0:	6813      	ldr	r3, [r2, #0]
 800e2a2:	f023 0301 	bic.w	r3, r3, #1
 800e2a6:	6013      	str	r3, [r2, #0]
 800e2a8:	f7ff fa18 	bl	800d6dc <_ai_platform_acquire_crc>
 800e2ac:	4b4e      	ldr	r3, [pc, #312]	; (800e3e8 <ai_platform_network_post_init+0x158>)
 800e2ae:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d014      	beq.n	800e2e0 <ai_platform_network_post_init+0x50>
 800e2b6:	2218      	movs	r2, #24
 800e2b8:	4b4c      	ldr	r3, [pc, #304]	; (800e3ec <ai_platform_network_post_init+0x15c>)
 800e2ba:	601a      	str	r2, [r3, #0]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	2a18      	cmp	r2, #24
 800e2c0:	d041      	beq.n	800e346 <ai_platform_network_post_init+0xb6>
 800e2c2:	4b4b      	ldr	r3, [pc, #300]	; (800e3f0 <ai_platform_network_post_init+0x160>)
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	601a      	str	r2, [r3, #0]
 800e2ca:	680b      	ldr	r3, [r1, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1fc      	bne.n	800e2ca <ai_platform_network_post_init+0x3a>
 800e2d0:	4b48      	ldr	r3, [pc, #288]	; (800e3f4 <ai_platform_network_post_init+0x164>)
 800e2d2:	4949      	ldr	r1, [pc, #292]	; (800e3f8 <ai_platform_network_post_init+0x168>)
 800e2d4:	4a49      	ldr	r2, [pc, #292]	; (800e3fc <ai_platform_network_post_init+0x16c>)
 800e2d6:	6019      	str	r1, [r3, #0]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d00d      	beq.n	800e2fa <ai_platform_network_post_init+0x6a>
 800e2de:	e7fe      	b.n	800e2de <ai_platform_network_post_init+0x4e>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	f100 0208 	add.w	r2, r0, #8
 800e2e6:	6083      	str	r3, [r0, #8]
 800e2e8:	6813      	ldr	r3, [r2, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1fc      	bne.n	800e2e8 <ai_platform_network_post_init+0x58>
 800e2ee:	4a42      	ldr	r2, [pc, #264]	; (800e3f8 <ai_platform_network_post_init+0x168>)
 800e2f0:	4b42      	ldr	r3, [pc, #264]	; (800e3fc <ai_platform_network_post_init+0x16c>)
 800e2f2:	6002      	str	r2, [r0, #0]
 800e2f4:	6802      	ldr	r2, [r0, #0]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d103      	bne.n	800e302 <ai_platform_network_post_init+0x72>
 800e2fa:	f7ff f9f1 	bl	800d6e0 <_ai_platform_release_crc>
 800e2fe:	2000      	movs	r0, #0
 800e300:	bd38      	pop	{r3, r4, r5, pc}
 800e302:	e7fe      	b.n	800e302 <ai_platform_network_post_init+0x72>
 800e304:	4a37      	ldr	r2, [pc, #220]	; (800e3e4 <ai_platform_network_post_init+0x154>)
 800e306:	6813      	ldr	r3, [r2, #0]
 800e308:	f023 0301 	bic.w	r3, r3, #1
 800e30c:	6013      	str	r3, [r2, #0]
 800e30e:	f7ff f9e5 	bl	800d6dc <_ai_platform_acquire_crc>
 800e312:	4b35      	ldr	r3, [pc, #212]	; (800e3e8 <ai_platform_network_post_init+0x158>)
 800e314:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800e318:	429a      	cmp	r2, r3
 800e31a:	d022      	beq.n	800e362 <ai_platform_network_post_init+0xd2>
 800e31c:	2218      	movs	r2, #24
 800e31e:	4b33      	ldr	r3, [pc, #204]	; (800e3ec <ai_platform_network_post_init+0x15c>)
 800e320:	601a      	str	r2, [r3, #0]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	2a18      	cmp	r2, #24
 800e326:	d041      	beq.n	800e3ac <ai_platform_network_post_init+0x11c>
 800e328:	4b31      	ldr	r3, [pc, #196]	; (800e3f0 <ai_platform_network_post_init+0x160>)
 800e32a:	2201      	movs	r2, #1
 800e32c:	4619      	mov	r1, r3
 800e32e:	601a      	str	r2, [r3, #0]
 800e330:	680b      	ldr	r3, [r1, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1fc      	bne.n	800e330 <ai_platform_network_post_init+0xa0>
 800e336:	4b2f      	ldr	r3, [pc, #188]	; (800e3f4 <ai_platform_network_post_init+0x164>)
 800e338:	492f      	ldr	r1, [pc, #188]	; (800e3f8 <ai_platform_network_post_init+0x168>)
 800e33a:	4a30      	ldr	r2, [pc, #192]	; (800e3fc <ai_platform_network_post_init+0x16c>)
 800e33c:	6019      	str	r1, [r3, #0]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4293      	cmp	r3, r2
 800e342:	d01b      	beq.n	800e37c <ai_platform_network_post_init+0xec>
 800e344:	e7fe      	b.n	800e344 <ai_platform_network_post_init+0xb4>
 800e346:	2201      	movs	r2, #1
 800e348:	4619      	mov	r1, r3
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	680b      	ldr	r3, [r1, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d1fc      	bne.n	800e34c <ai_platform_network_post_init+0xbc>
 800e352:	4b25      	ldr	r3, [pc, #148]	; (800e3e8 <ai_platform_network_post_init+0x158>)
 800e354:	4928      	ldr	r1, [pc, #160]	; (800e3f8 <ai_platform_network_post_init+0x168>)
 800e356:	4a29      	ldr	r2, [pc, #164]	; (800e3fc <ai_platform_network_post_init+0x16c>)
 800e358:	6019      	str	r1, [r3, #0]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d0cc      	beq.n	800e2fa <ai_platform_network_post_init+0x6a>
 800e360:	e7fe      	b.n	800e360 <ai_platform_network_post_init+0xd0>
 800e362:	2301      	movs	r3, #1
 800e364:	f100 0208 	add.w	r2, r0, #8
 800e368:	6083      	str	r3, [r0, #8]
 800e36a:	6813      	ldr	r3, [r2, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d1fc      	bne.n	800e36a <ai_platform_network_post_init+0xda>
 800e370:	4a21      	ldr	r2, [pc, #132]	; (800e3f8 <ai_platform_network_post_init+0x168>)
 800e372:	4b22      	ldr	r3, [pc, #136]	; (800e3fc <ai_platform_network_post_init+0x16c>)
 800e374:	6002      	str	r2, [r0, #0]
 800e376:	6802      	ldr	r2, [r0, #0]
 800e378:	429a      	cmp	r2, r3
 800e37a:	d125      	bne.n	800e3c8 <ai_platform_network_post_init+0x138>
 800e37c:	f7ff f9b0 	bl	800d6e0 <_ai_platform_release_crc>
 800e380:	68e3      	ldr	r3, [r4, #12]
 800e382:	f013 0502 	ands.w	r5, r3, #2
 800e386:	d022      	beq.n	800e3ce <ai_platform_network_post_init+0x13e>
 800e388:	4620      	mov	r0, r4
 800e38a:	f001 f8a1 	bl	800f4d0 <ai_layers_post_init_all>
 800e38e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e390:	b1db      	cbz	r3, 800e3ca <ai_platform_network_post_init+0x13a>
 800e392:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800e394:	b1cd      	cbz	r5, 800e3ca <ai_platform_network_post_init+0x13a>
 800e396:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e398:	4629      	mov	r1, r5
 800e39a:	2000      	movs	r0, #0
 800e39c:	4798      	blx	r3
 800e39e:	692b      	ldr	r3, [r5, #16]
 800e3a0:	42ab      	cmp	r3, r5
 800e3a2:	d012      	beq.n	800e3ca <ai_platform_network_post_init+0x13a>
 800e3a4:	461d      	mov	r5, r3
 800e3a6:	b183      	cbz	r3, 800e3ca <ai_platform_network_post_init+0x13a>
 800e3a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3aa:	e7f4      	b.n	800e396 <ai_platform_network_post_init+0x106>
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	601a      	str	r2, [r3, #0]
 800e3b2:	680b      	ldr	r3, [r1, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1fc      	bne.n	800e3b2 <ai_platform_network_post_init+0x122>
 800e3b8:	4b0b      	ldr	r3, [pc, #44]	; (800e3e8 <ai_platform_network_post_init+0x158>)
 800e3ba:	490f      	ldr	r1, [pc, #60]	; (800e3f8 <ai_platform_network_post_init+0x168>)
 800e3bc:	4a0f      	ldr	r2, [pc, #60]	; (800e3fc <ai_platform_network_post_init+0x16c>)
 800e3be:	6019      	str	r1, [r3, #0]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d0da      	beq.n	800e37c <ai_platform_network_post_init+0xec>
 800e3c6:	e7fe      	b.n	800e3c6 <ai_platform_network_post_init+0x136>
 800e3c8:	e7fe      	b.n	800e3c8 <ai_platform_network_post_init+0x138>
 800e3ca:	2001      	movs	r0, #1
 800e3cc:	bd38      	pop	{r3, r4, r5, pc}
 800e3ce:	f104 0010 	add.w	r0, r4, #16
 800e3d2:	2210      	movs	r2, #16
 800e3d4:	2111      	movs	r1, #17
 800e3d6:	f000 faad 	bl	800e934 <core_set_error>
 800e3da:	4628      	mov	r0, r5
 800e3dc:	bd38      	pop	{r3, r4, r5, pc}
 800e3de:	bf00      	nop
 800e3e0:	a1c00100 	.word	0xa1c00100
 800e3e4:	e0002000 	.word	0xe0002000
 800e3e8:	40023000 	.word	0x40023000
 800e3ec:	40023008 	.word	0x40023008
 800e3f0:	50023008 	.word	0x50023008
 800e3f4:	50023000 	.word	0x50023000
 800e3f8:	f407a5c2 	.word	0xf407a5c2
 800e3fc:	b5e8b5cd 	.word	0xb5e8b5cd

0800e400 <ai_platform_network_process>:
 800e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e404:	b085      	sub	sp, #20
 800e406:	460d      	mov	r5, r1
 800e408:	9202      	str	r2, [sp, #8]
 800e40a:	4604      	mov	r4, r0
 800e40c:	b120      	cbz	r0, 800e418 <ai_platform_network_process+0x18>
 800e40e:	4b83      	ldr	r3, [pc, #524]	; (800e61c <ai_platform_network_process+0x21c>)
 800e410:	6802      	ldr	r2, [r0, #0]
 800e412:	429a      	cmp	r2, r3
 800e414:	bf18      	it	ne
 800e416:	2400      	movne	r4, #0
 800e418:	4a81      	ldr	r2, [pc, #516]	; (800e620 <ai_platform_network_process+0x220>)
 800e41a:	6813      	ldr	r3, [r2, #0]
 800e41c:	f023 0301 	bic.w	r3, r3, #1
 800e420:	6013      	str	r3, [r2, #0]
 800e422:	f7ff f95b 	bl	800d6dc <_ai_platform_acquire_crc>
 800e426:	4b7f      	ldr	r3, [pc, #508]	; (800e624 <ai_platform_network_process+0x224>)
 800e428:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d014      	beq.n	800e45a <ai_platform_network_process+0x5a>
 800e430:	2218      	movs	r2, #24
 800e432:	4b7d      	ldr	r3, [pc, #500]	; (800e628 <ai_platform_network_process+0x228>)
 800e434:	601a      	str	r2, [r3, #0]
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	2a18      	cmp	r2, #24
 800e43a:	d01c      	beq.n	800e476 <ai_platform_network_process+0x76>
 800e43c:	4b7b      	ldr	r3, [pc, #492]	; (800e62c <ai_platform_network_process+0x22c>)
 800e43e:	2201      	movs	r2, #1
 800e440:	4619      	mov	r1, r3
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	680b      	ldr	r3, [r1, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d1fc      	bne.n	800e444 <ai_platform_network_process+0x44>
 800e44a:	4b79      	ldr	r3, [pc, #484]	; (800e630 <ai_platform_network_process+0x230>)
 800e44c:	4979      	ldr	r1, [pc, #484]	; (800e634 <ai_platform_network_process+0x234>)
 800e44e:	4a7a      	ldr	r2, [pc, #488]	; (800e638 <ai_platform_network_process+0x238>)
 800e450:	6019      	str	r1, [r3, #0]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4293      	cmp	r3, r2
 800e456:	d01c      	beq.n	800e492 <ai_platform_network_process+0x92>
 800e458:	e7fe      	b.n	800e458 <ai_platform_network_process+0x58>
 800e45a:	2301      	movs	r3, #1
 800e45c:	6083      	str	r3, [r0, #8]
 800e45e:	f100 0308 	add.w	r3, r0, #8
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	2a00      	cmp	r2, #0
 800e466:	d1fc      	bne.n	800e462 <ai_platform_network_process+0x62>
 800e468:	4a72      	ldr	r2, [pc, #456]	; (800e634 <ai_platform_network_process+0x234>)
 800e46a:	4b73      	ldr	r3, [pc, #460]	; (800e638 <ai_platform_network_process+0x238>)
 800e46c:	6002      	str	r2, [r0, #0]
 800e46e:	6802      	ldr	r2, [r0, #0]
 800e470:	429a      	cmp	r2, r3
 800e472:	d00e      	beq.n	800e492 <ai_platform_network_process+0x92>
 800e474:	e7fe      	b.n	800e474 <ai_platform_network_process+0x74>
 800e476:	2201      	movs	r2, #1
 800e478:	4619      	mov	r1, r3
 800e47a:	601a      	str	r2, [r3, #0]
 800e47c:	680b      	ldr	r3, [r1, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d1fc      	bne.n	800e47c <ai_platform_network_process+0x7c>
 800e482:	4b68      	ldr	r3, [pc, #416]	; (800e624 <ai_platform_network_process+0x224>)
 800e484:	496b      	ldr	r1, [pc, #428]	; (800e634 <ai_platform_network_process+0x234>)
 800e486:	4a6c      	ldr	r2, [pc, #432]	; (800e638 <ai_platform_network_process+0x238>)
 800e488:	6019      	str	r1, [r3, #0]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4293      	cmp	r3, r2
 800e48e:	f040 823e 	bne.w	800e90e <ai_platform_network_process+0x50e>
 800e492:	f7ff f925 	bl	800d6e0 <_ai_platform_release_crc>
 800e496:	2c00      	cmp	r4, #0
 800e498:	f000 8242 	beq.w	800e920 <ai_platform_network_process+0x520>
 800e49c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800e49e:	2a00      	cmp	r2, #0
 800e4a0:	f000 808c 	beq.w	800e5bc <ai_platform_network_process+0x1bc>
 800e4a4:	2600      	movs	r6, #0
 800e4a6:	68e3      	ldr	r3, [r4, #12]
 800e4a8:	6166      	str	r6, [r4, #20]
 800e4aa:	f003 0303 	and.w	r3, r3, #3
 800e4ae:	2b03      	cmp	r3, #3
 800e4b0:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 800e4b4:	f040 822c 	bne.w	800e910 <ai_platform_network_process+0x510>
 800e4b8:	2d00      	cmp	r5, #0
 800e4ba:	f000 8086 	beq.w	800e5ca <ai_platform_network_process+0x1ca>
 800e4be:	f1b9 0f00 	cmp.w	r9, #0
 800e4c2:	f000 8082 	beq.w	800e5ca <ai_platform_network_process+0x1ca>
 800e4c6:	f8b9 3000 	ldrh.w	r3, [r9]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d07d      	beq.n	800e5ca <ai_platform_network_process+0x1ca>
 800e4ce:	69aa      	ldr	r2, [r5, #24]
 800e4d0:	9401      	str	r4, [sp, #4]
 800e4d2:	6817      	ldr	r7, [r2, #0]
 800e4d4:	429e      	cmp	r6, r3
 800e4d6:	f080 80b1 	bcs.w	800e63c <ai_platform_network_process+0x23c>
 800e4da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	f000 80ac 	beq.w	800e63c <ai_platform_network_process+0x23c>
 800e4e4:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800e4e8:	2c00      	cmp	r4, #0
 800e4ea:	f000 80a7 	beq.w	800e63c <ai_platform_network_process+0x23c>
 800e4ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e4f2:	ea4f 1806 	mov.w	r8, r6, lsl #4
 800e4f6:	f8d3 b000 	ldr.w	fp, [r3]
 800e4fa:	eb1b 0a08 	adds.w	sl, fp, r8
 800e4fe:	f000 808b 	beq.w	800e618 <ai_platform_network_process+0x218>
 800e502:	69a3      	ldr	r3, [r4, #24]
 800e504:	2101      	movs	r1, #1
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	4628      	mov	r0, r5
 800e50a:	9303      	str	r3, [sp, #12]
 800e50c:	f7ff f89a 	bl	800d644 <ai_buffer_get_size>
 800e510:	9b03      	ldr	r3, [sp, #12]
 800e512:	4283      	cmp	r3, r0
 800e514:	d377      	bcc.n	800e606 <ai_platform_network_process+0x206>
 800e516:	68e0      	ldr	r0, [r4, #12]
 800e518:	69a9      	ldr	r1, [r5, #24]
 800e51a:	68c2      	ldr	r2, [r0, #12]
 800e51c:	68cb      	ldr	r3, [r1, #12]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d171      	bne.n	800e606 <ai_platform_network_process+0x206>
 800e522:	6882      	ldr	r2, [r0, #8]
 800e524:	688b      	ldr	r3, [r1, #8]
 800e526:	429a      	cmp	r2, r3
 800e528:	d16d      	bne.n	800e606 <ai_platform_network_process+0x206>
 800e52a:	6842      	ldr	r2, [r0, #4]
 800e52c:	684b      	ldr	r3, [r1, #4]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d169      	bne.n	800e606 <ai_platform_network_process+0x206>
 800e532:	69a3      	ldr	r3, [r4, #24]
 800e534:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e538:	f001 f8b4 	bl	800f6a4 <ai_array_get_data_byte_size>
 800e53c:	9003      	str	r0, [sp, #12]
 800e53e:	4620      	mov	r0, r4
 800e540:	f001 f822 	bl	800f588 <get_tensor_byte_size>
 800e544:	9b03      	ldr	r3, [sp, #12]
 800e546:	4283      	cmp	r3, r0
 800e548:	d35d      	bcc.n	800e606 <ai_platform_network_process+0x206>
 800e54a:	69a3      	ldr	r3, [r4, #24]
 800e54c:	6818      	ldr	r0, [r3, #0]
 800e54e:	f001 f82f 	bl	800f5b0 <ai_array_to_buffer_fmt>
 800e552:	682b      	ldr	r3, [r5, #0]
 800e554:	4043      	eors	r3, r0
 800e556:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800e55a:	d14b      	bne.n	800e5f4 <ai_platform_network_process+0x1f4>
 800e55c:	686b      	ldr	r3, [r5, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d05a      	beq.n	800e618 <ai_platform_network_process+0x218>
 800e562:	69ab      	ldr	r3, [r5, #24]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d03a      	beq.n	800e5e0 <ai_platform_network_process+0x1e0>
 800e56a:	4620      	mov	r0, r4
 800e56c:	9303      	str	r3, [sp, #12]
 800e56e:	f001 f80b 	bl	800f588 <get_tensor_byte_size>
 800e572:	f8ca 0008 	str.w	r0, [sl, #8]
 800e576:	69aa      	ldr	r2, [r5, #24]
 800e578:	9b03      	ldr	r3, [sp, #12]
 800e57a:	6812      	ldr	r2, [r2, #0]
 800e57c:	429f      	cmp	r7, r3
 800e57e:	fb02 f200 	mul.w	r2, r2, r0
 800e582:	f8ca 200c 	str.w	r2, [sl, #12]
 800e586:	6868      	ldr	r0, [r5, #4]
 800e588:	bf38      	it	cc
 800e58a:	461f      	movcc	r7, r3
 800e58c:	f8ca 0004 	str.w	r0, [sl, #4]
 800e590:	686b      	ldr	r3, [r5, #4]
 800e592:	4413      	add	r3, r2
 800e594:	f84b 3008 	str.w	r3, [fp, r8]
 800e598:	69a1      	ldr	r1, [r4, #24]
 800e59a:	680b      	ldr	r3, [r1, #0]
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	d408      	bmi.n	800e5b2 <ai_platform_network_process+0x1b2>
 800e5a0:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 800e5a4:	1a9b      	subs	r3, r3, r2
 800e5a6:	4418      	add	r0, r3
 800e5a8:	6088      	str	r0, [r1, #8]
 800e5aa:	69a3      	ldr	r3, [r4, #24]
 800e5ac:	f8da 2004 	ldr.w	r2, [sl, #4]
 800e5b0:	60da      	str	r2, [r3, #12]
 800e5b2:	f8b9 3000 	ldrh.w	r3, [r9]
 800e5b6:	3601      	adds	r6, #1
 800e5b8:	351c      	adds	r5, #28
 800e5ba:	e78b      	b.n	800e4d4 <ai_platform_network_process+0xd4>
 800e5bc:	68e3      	ldr	r3, [r4, #12]
 800e5be:	6162      	str	r2, [r4, #20]
 800e5c0:	f003 0303 	and.w	r3, r3, #3
 800e5c4:	2b03      	cmp	r3, #3
 800e5c6:	f040 81a3 	bne.w	800e910 <ai_platform_network_process+0x510>
 800e5ca:	f104 0010 	add.w	r0, r4, #16
 800e5ce:	2217      	movs	r2, #23
 800e5d0:	2112      	movs	r1, #18
 800e5d2:	f000 f9af 	bl	800e934 <core_set_error>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	4618      	mov	r0, r3
 800e5da:	b005      	add	sp, #20
 800e5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e0:	469a      	mov	sl, r3
 800e5e2:	9c01      	ldr	r4, [sp, #4]
 800e5e4:	2221      	movs	r2, #33	; 0x21
 800e5e6:	f104 0010 	add.w	r0, r4, #16
 800e5ea:	2112      	movs	r1, #18
 800e5ec:	f000 f9a2 	bl	800e934 <core_set_error>
 800e5f0:	4653      	mov	r3, sl
 800e5f2:	e7f1      	b.n	800e5d8 <ai_platform_network_process+0x1d8>
 800e5f4:	9c01      	ldr	r4, [sp, #4]
 800e5f6:	2219      	movs	r2, #25
 800e5f8:	f104 0010 	add.w	r0, r4, #16
 800e5fc:	2112      	movs	r1, #18
 800e5fe:	f000 f999 	bl	800e934 <core_set_error>
 800e602:	2300      	movs	r3, #0
 800e604:	e7e8      	b.n	800e5d8 <ai_platform_network_process+0x1d8>
 800e606:	9c01      	ldr	r4, [sp, #4]
 800e608:	2218      	movs	r2, #24
 800e60a:	f104 0010 	add.w	r0, r4, #16
 800e60e:	2112      	movs	r1, #18
 800e610:	f000 f990 	bl	800e934 <core_set_error>
 800e614:	2300      	movs	r3, #0
 800e616:	e7df      	b.n	800e5d8 <ai_platform_network_process+0x1d8>
 800e618:	9c01      	ldr	r4, [sp, #4]
 800e61a:	e7d6      	b.n	800e5ca <ai_platform_network_process+0x1ca>
 800e61c:	a1c00100 	.word	0xa1c00100
 800e620:	e0002000 	.word	0xe0002000
 800e624:	40023000 	.word	0x40023000
 800e628:	40023008 	.word	0x40023008
 800e62c:	50023008 	.word	0x50023008
 800e630:	50023000 	.word	0x50023000
 800e634:	f407a5c2 	.word	0xf407a5c2
 800e638:	b5e8b5cd 	.word	0xb5e8b5cd
 800e63c:	9c01      	ldr	r4, [sp, #4]
 800e63e:	9a02      	ldr	r2, [sp, #8]
 800e640:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800e642:	2a00      	cmp	r2, #0
 800e644:	f000 80ae 	beq.w	800e7a4 <ai_platform_network_process+0x3a4>
 800e648:	2b01      	cmp	r3, #1
 800e64a:	f240 80a1 	bls.w	800e790 <ai_platform_network_process+0x390>
 800e64e:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 800e652:	f119 0f0c 	cmn.w	r9, #12
 800e656:	f000 809b 	beq.w	800e790 <ai_platform_network_process+0x390>
 800e65a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	f000 8096 	beq.w	800e790 <ai_platform_network_process+0x390>
 800e664:	f04f 0800 	mov.w	r8, #0
 800e668:	9d02      	ldr	r5, [sp, #8]
 800e66a:	9401      	str	r4, [sp, #4]
 800e66c:	4598      	cmp	r8, r3
 800e66e:	f080 8097 	bcs.w	800e7a0 <ai_platform_network_process+0x3a0>
 800e672:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e676:	2b00      	cmp	r3, #0
 800e678:	f000 8092 	beq.w	800e7a0 <ai_platform_network_process+0x3a0>
 800e67c:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
 800e680:	2c00      	cmp	r4, #0
 800e682:	f000 808d 	beq.w	800e7a0 <ai_platform_network_process+0x3a0>
 800e686:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e68a:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800e68e:	f8d3 b000 	ldr.w	fp, [r3]
 800e692:	eb1b 0a06 	adds.w	sl, fp, r6
 800e696:	f000 8131 	beq.w	800e8fc <ai_platform_network_process+0x4fc>
 800e69a:	69a3      	ldr	r3, [r4, #24]
 800e69c:	2101      	movs	r1, #1
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	9302      	str	r3, [sp, #8]
 800e6a4:	f7fe ffce 	bl	800d644 <ai_buffer_get_size>
 800e6a8:	9b02      	ldr	r3, [sp, #8]
 800e6aa:	4283      	cmp	r3, r0
 800e6ac:	d36f      	bcc.n	800e78e <ai_platform_network_process+0x38e>
 800e6ae:	68e0      	ldr	r0, [r4, #12]
 800e6b0:	69a9      	ldr	r1, [r5, #24]
 800e6b2:	68c2      	ldr	r2, [r0, #12]
 800e6b4:	68cb      	ldr	r3, [r1, #12]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d169      	bne.n	800e78e <ai_platform_network_process+0x38e>
 800e6ba:	6882      	ldr	r2, [r0, #8]
 800e6bc:	688b      	ldr	r3, [r1, #8]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d165      	bne.n	800e78e <ai_platform_network_process+0x38e>
 800e6c2:	6842      	ldr	r2, [r0, #4]
 800e6c4:	684b      	ldr	r3, [r1, #4]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d161      	bne.n	800e78e <ai_platform_network_process+0x38e>
 800e6ca:	69a3      	ldr	r3, [r4, #24]
 800e6cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e6d0:	f000 ffe8 	bl	800f6a4 <ai_array_get_data_byte_size>
 800e6d4:	9002      	str	r0, [sp, #8]
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f000 ff56 	bl	800f588 <get_tensor_byte_size>
 800e6dc:	9b02      	ldr	r3, [sp, #8]
 800e6de:	4283      	cmp	r3, r0
 800e6e0:	d355      	bcc.n	800e78e <ai_platform_network_process+0x38e>
 800e6e2:	69a3      	ldr	r3, [r4, #24]
 800e6e4:	6818      	ldr	r0, [r3, #0]
 800e6e6:	f000 ff63 	bl	800f5b0 <ai_array_to_buffer_fmt>
 800e6ea:	682b      	ldr	r3, [r5, #0]
 800e6ec:	4043      	eors	r3, r0
 800e6ee:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800e6f2:	d143      	bne.n	800e77c <ai_platform_network_process+0x37c>
 800e6f4:	686b      	ldr	r3, [r5, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d036      	beq.n	800e768 <ai_platform_network_process+0x368>
 800e6fa:	69ab      	ldr	r3, [r5, #24]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	b34b      	cbz	r3, 800e754 <ai_platform_network_process+0x354>
 800e700:	4620      	mov	r0, r4
 800e702:	9302      	str	r3, [sp, #8]
 800e704:	f000 ff40 	bl	800f588 <get_tensor_byte_size>
 800e708:	f8ca 0008 	str.w	r0, [sl, #8]
 800e70c:	69aa      	ldr	r2, [r5, #24]
 800e70e:	9b02      	ldr	r3, [sp, #8]
 800e710:	6812      	ldr	r2, [r2, #0]
 800e712:	429f      	cmp	r7, r3
 800e714:	fb02 f200 	mul.w	r2, r2, r0
 800e718:	f8ca 200c 	str.w	r2, [sl, #12]
 800e71c:	6868      	ldr	r0, [r5, #4]
 800e71e:	bf38      	it	cc
 800e720:	461f      	movcc	r7, r3
 800e722:	f8ca 0004 	str.w	r0, [sl, #4]
 800e726:	686b      	ldr	r3, [r5, #4]
 800e728:	4413      	add	r3, r2
 800e72a:	f84b 3006 	str.w	r3, [fp, r6]
 800e72e:	69a1      	ldr	r1, [r4, #24]
 800e730:	680b      	ldr	r3, [r1, #0]
 800e732:	009e      	lsls	r6, r3, #2
 800e734:	d408      	bmi.n	800e748 <ai_platform_network_process+0x348>
 800e736:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 800e73a:	1a9b      	subs	r3, r3, r2
 800e73c:	4418      	add	r0, r3
 800e73e:	6088      	str	r0, [r1, #8]
 800e740:	69a3      	ldr	r3, [r4, #24]
 800e742:	f8da 2004 	ldr.w	r2, [sl, #4]
 800e746:	60da      	str	r2, [r3, #12]
 800e748:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e74c:	f108 0801 	add.w	r8, r8, #1
 800e750:	351c      	adds	r5, #28
 800e752:	e78b      	b.n	800e66c <ai_platform_network_process+0x26c>
 800e754:	469a      	mov	sl, r3
 800e756:	9c01      	ldr	r4, [sp, #4]
 800e758:	2221      	movs	r2, #33	; 0x21
 800e75a:	f104 0010 	add.w	r0, r4, #16
 800e75e:	2113      	movs	r1, #19
 800e760:	f000 f8e8 	bl	800e934 <core_set_error>
 800e764:	4653      	mov	r3, sl
 800e766:	e737      	b.n	800e5d8 <ai_platform_network_process+0x1d8>
 800e768:	469a      	mov	sl, r3
 800e76a:	9c01      	ldr	r4, [sp, #4]
 800e76c:	2217      	movs	r2, #23
 800e76e:	f104 0010 	add.w	r0, r4, #16
 800e772:	2113      	movs	r1, #19
 800e774:	f000 f8de 	bl	800e934 <core_set_error>
 800e778:	4653      	mov	r3, sl
 800e77a:	e72d      	b.n	800e5d8 <ai_platform_network_process+0x1d8>
 800e77c:	9c01      	ldr	r4, [sp, #4]
 800e77e:	2219      	movs	r2, #25
 800e780:	f104 0010 	add.w	r0, r4, #16
 800e784:	2113      	movs	r1, #19
 800e786:	f000 f8d5 	bl	800e934 <core_set_error>
 800e78a:	2300      	movs	r3, #0
 800e78c:	e724      	b.n	800e5d8 <ai_platform_network_process+0x1d8>
 800e78e:	9c01      	ldr	r4, [sp, #4]
 800e790:	f104 0010 	add.w	r0, r4, #16
 800e794:	2218      	movs	r2, #24
 800e796:	2113      	movs	r1, #19
 800e798:	f000 f8cc 	bl	800e934 <core_set_error>
 800e79c:	2300      	movs	r3, #0
 800e79e:	e71b      	b.n	800e5d8 <ai_platform_network_process+0x1d8>
 800e7a0:	9c01      	ldr	r4, [sp, #4]
 800e7a2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800e7a4:	82a7      	strh	r7, [r4, #20]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	f000 80a5 	beq.w	800e8f6 <ai_platform_network_process+0x4f6>
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e7b0:	f240 809f 	bls.w	800e8f2 <ai_platform_network_process+0x4f2>
 800e7b4:	f105 070c 	add.w	r7, r5, #12
 800e7b8:	8ae3      	ldrh	r3, [r4, #22]
 800e7ba:	8aa2      	ldrh	r2, [r4, #20]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	f67f af0b 	bls.w	800e5d8 <ai_platform_network_process+0x1d8>
 800e7c2:	2d00      	cmp	r5, #0
 800e7c4:	d035      	beq.n	800e832 <ai_platform_network_process+0x432>
 800e7c6:	882b      	ldrh	r3, [r5, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d032      	beq.n	800e832 <ai_platform_network_process+0x432>
 800e7cc:	686b      	ldr	r3, [r5, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d02f      	beq.n	800e832 <ai_platform_network_process+0x432>
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f04f 0800 	mov.w	r8, #0
 800e7d8:	b35b      	cbz	r3, 800e832 <ai_platform_network_process+0x432>
 800e7da:	68a9      	ldr	r1, [r5, #8]
 800e7dc:	699a      	ldr	r2, [r3, #24]
 800e7de:	f8d1 a000 	ldr.w	sl, [r1]
 800e7e2:	6811      	ldr	r1, [r2, #0]
 800e7e4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800e7e8:	eb0a 0609 	add.w	r6, sl, r9
 800e7ec:	0089      	lsls	r1, r1, #2
 800e7ee:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800e7f2:	6890      	ldr	r0, [r2, #8]
 800e7f4:	d478      	bmi.n	800e8e8 <ai_platform_network_process+0x4e8>
 800e7f6:	68d1      	ldr	r1, [r2, #12]
 800e7f8:	1a40      	subs	r0, r0, r1
 800e7fa:	eb0c 0100 	add.w	r1, ip, r0
 800e7fe:	6091      	str	r1, [r2, #8]
 800e800:	699b      	ldr	r3, [r3, #24]
 800e802:	6872      	ldr	r2, [r6, #4]
 800e804:	60da      	str	r2, [r3, #12]
 800e806:	f85a 2009 	ldr.w	r2, [sl, r9]
 800e80a:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800e80e:	440b      	add	r3, r1
 800e810:	4293      	cmp	r3, r2
 800e812:	bf28      	it	cs
 800e814:	68f3      	ldrcs	r3, [r6, #12]
 800e816:	f108 0801 	add.w	r8, r8, #1
 800e81a:	bf28      	it	cs
 800e81c:	1ad3      	subcs	r3, r2, r3
 800e81e:	6073      	str	r3, [r6, #4]
 800e820:	882b      	ldrh	r3, [r5, #0]
 800e822:	4598      	cmp	r8, r3
 800e824:	d205      	bcs.n	800e832 <ai_platform_network_process+0x432>
 800e826:	686b      	ldr	r3, [r5, #4]
 800e828:	b11b      	cbz	r3, 800e832 <ai_platform_network_process+0x432>
 800e82a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d1d3      	bne.n	800e7da <ai_platform_network_process+0x3da>
 800e832:	4620      	mov	r0, r4
 800e834:	f000 fe62 	bl	800f4fc <ai_layers_forward_all>
 800e838:	2f00      	cmp	r7, #0
 800e83a:	d04c      	beq.n	800e8d6 <ai_platform_network_process+0x4d6>
 800e83c:	883b      	ldrh	r3, [r7, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d049      	beq.n	800e8d6 <ai_platform_network_process+0x4d6>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d046      	beq.n	800e8d6 <ai_platform_network_process+0x4d6>
 800e848:	6818      	ldr	r0, [r3, #0]
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d043      	beq.n	800e8d6 <ai_platform_network_process+0x4d6>
 800e84e:	f04f 0800 	mov.w	r8, #0
 800e852:	e01c      	b.n	800e88e <ai_platform_network_process+0x48e>
 800e854:	f85a 2009 	ldr.w	r2, [sl, r9]
 800e858:	f108 0801 	add.w	r8, r8, #1
 800e85c:	4596      	cmp	lr, r2
 800e85e:	bf24      	itt	cs
 800e860:	68f3      	ldrcs	r3, [r6, #12]
 800e862:	eba2 0e03 	subcs.w	lr, r2, r3
 800e866:	f8c6 e004 	str.w	lr, [r6, #4]
 800e86a:	6981      	ldr	r1, [r0, #24]
 800e86c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800e870:	1ad2      	subs	r2, r2, r3
 800e872:	eb0e 0302 	add.w	r3, lr, r2
 800e876:	608b      	str	r3, [r1, #8]
 800e878:	6983      	ldr	r3, [r0, #24]
 800e87a:	6872      	ldr	r2, [r6, #4]
 800e87c:	60da      	str	r2, [r3, #12]
 800e87e:	883b      	ldrh	r3, [r7, #0]
 800e880:	4598      	cmp	r8, r3
 800e882:	d228      	bcs.n	800e8d6 <ai_platform_network_process+0x4d6>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	b333      	cbz	r3, 800e8d6 <ai_platform_network_process+0x4d6>
 800e888:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e88c:	b318      	cbz	r0, 800e8d6 <ai_platform_network_process+0x4d6>
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	6981      	ldr	r1, [r0, #24]
 800e892:	f8d3 a000 	ldr.w	sl, [r3]
 800e896:	680b      	ldr	r3, [r1, #0]
 800e898:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800e89c:	eb0a 0609 	add.w	r6, sl, r9
 800e8a0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800e8a4:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800e8a8:	eb0c 0e02 	add.w	lr, ip, r2
 800e8ac:	d0d2      	beq.n	800e854 <ai_platform_network_process+0x454>
 800e8ae:	6889      	ldr	r1, [r1, #8]
 800e8b0:	4660      	mov	r0, ip
 800e8b2:	f000 ff39 	bl	800f728 <memcpy>
 800e8b6:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800e8ba:	f85a 2009 	ldr.w	r2, [sl, r9]
 800e8be:	440b      	add	r3, r1
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	bf28      	it	cs
 800e8c4:	68f3      	ldrcs	r3, [r6, #12]
 800e8c6:	f108 0801 	add.w	r8, r8, #1
 800e8ca:	bf28      	it	cs
 800e8cc:	1ad3      	subcs	r3, r2, r3
 800e8ce:	6073      	str	r3, [r6, #4]
 800e8d0:	883b      	ldrh	r3, [r7, #0]
 800e8d2:	4598      	cmp	r8, r3
 800e8d4:	d3d6      	bcc.n	800e884 <ai_platform_network_process+0x484>
 800e8d6:	8ae3      	ldrh	r3, [r4, #22]
 800e8d8:	8aa2      	ldrh	r2, [r4, #20]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	82e3      	strh	r3, [r4, #22]
 800e8e2:	f63f af6e 	bhi.w	800e7c2 <ai_platform_network_process+0x3c2>
 800e8e6:	e677      	b.n	800e5d8 <ai_platform_network_process+0x1d8>
 800e8e8:	4661      	mov	r1, ip
 800e8ea:	68b2      	ldr	r2, [r6, #8]
 800e8ec:	f000 ff1c 	bl	800f728 <memcpy>
 800e8f0:	e789      	b.n	800e806 <ai_platform_network_process+0x406>
 800e8f2:	2700      	movs	r7, #0
 800e8f4:	e760      	b.n	800e7b8 <ai_platform_network_process+0x3b8>
 800e8f6:	461d      	mov	r5, r3
 800e8f8:	461f      	mov	r7, r3
 800e8fa:	e75d      	b.n	800e7b8 <ai_platform_network_process+0x3b8>
 800e8fc:	9c01      	ldr	r4, [sp, #4]
 800e8fe:	2217      	movs	r2, #23
 800e900:	f104 0010 	add.w	r0, r4, #16
 800e904:	2113      	movs	r1, #19
 800e906:	f000 f815 	bl	800e934 <core_set_error>
 800e90a:	4653      	mov	r3, sl
 800e90c:	e664      	b.n	800e5d8 <ai_platform_network_process+0x1d8>
 800e90e:	e7fe      	b.n	800e90e <ai_platform_network_process+0x50e>
 800e910:	f104 0010 	add.w	r0, r4, #16
 800e914:	2230      	movs	r2, #48	; 0x30
 800e916:	2111      	movs	r1, #17
 800e918:	f000 f80c 	bl	800e934 <core_set_error>
 800e91c:	2300      	movs	r3, #0
 800e91e:	e65b      	b.n	800e5d8 <ai_platform_network_process+0x1d8>
 800e920:	4623      	mov	r3, r4
 800e922:	e659      	b.n	800e5d8 <ai_platform_network_process+0x1d8>

0800e924 <core_init>:
 800e924:	2001      	movs	r0, #1
 800e926:	4770      	bx	lr

0800e928 <core_get_error>:
 800e928:	4603      	mov	r3, r0
 800e92a:	2200      	movs	r2, #0
 800e92c:	6800      	ldr	r0, [r0, #0]
 800e92e:	601a      	str	r2, [r3, #0]
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop

0800e934 <core_set_error>:
 800e934:	4603      	mov	r3, r0
 800e936:	7800      	ldrb	r0, [r0, #0]
 800e938:	b930      	cbnz	r0, 800e948 <core_set_error+0x14>
 800e93a:	7019      	strb	r1, [r3, #0]
 800e93c:	6819      	ldr	r1, [r3, #0]
 800e93e:	2001      	movs	r0, #1
 800e940:	f362 211f 	bfi	r1, r2, #8, #24
 800e944:	6019      	str	r1, [r3, #0]
 800e946:	4770      	bx	lr
 800e948:	2000      	movs	r0, #0
 800e94a:	4770      	bx	lr

0800e94c <forward_dense>:
 800e94c:	6983      	ldr	r3, [r0, #24]
 800e94e:	8819      	ldrh	r1, [r3, #0]
 800e950:	2900      	cmp	r1, #0
 800e952:	f000 818d 	beq.w	800ec70 <forward_dense+0x324>
 800e956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e95a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800e95e:	b099      	sub	sp, #100	; 0x64
 800e960:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800e964:	b106      	cbz	r6, 800e968 <forward_dense+0x1c>
 800e966:	6836      	ldr	r6, [r6, #0]
 800e968:	2901      	cmp	r1, #1
 800e96a:	f240 817e 	bls.w	800ec6a <forward_dense+0x31e>
 800e96e:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800e972:	b104      	cbz	r4, 800e976 <forward_dense+0x2a>
 800e974:	6824      	ldr	r4, [r4, #0]
 800e976:	2902      	cmp	r1, #2
 800e978:	f000 817c 	beq.w	800ec74 <forward_dense+0x328>
 800e97c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800e980:	2b00      	cmp	r3, #0
 800e982:	f040 817a 	bne.w	800ec7a <forward_dense+0x32e>
 800e986:	f11c 0218 	adds.w	r2, ip, #24
 800e98a:	930d      	str	r3, [sp, #52]	; 0x34
 800e98c:	f000 817b 	beq.w	800ec86 <forward_dense+0x33a>
 800e990:	f8bc 2018 	ldrh.w	r2, [ip, #24]
 800e994:	2a01      	cmp	r2, #1
 800e996:	f240 83a4 	bls.w	800f0e2 <forward_dense+0x796>
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f000 8175 	beq.w	800ec8a <forward_dense+0x33e>
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	930e      	str	r3, [sp, #56]	; 0x38
 800e9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9a6:	68e2      	ldr	r2, [r4, #12]
 800e9a8:	6998      	ldr	r0, [r3, #24]
 800e9aa:	e9d2 7501 	ldrd	r7, r5, [r2, #4]
 800e9ae:	6803      	ldr	r3, [r0, #0]
 800e9b0:	9501      	str	r5, [sp, #4]
 800e9b2:	f3c3 5841 	ubfx	r8, r3, #21, #2
 800e9b6:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 800e9ba:	fa49 f508 	asr.w	r5, r9, r8
 800e9be:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800e9c2:	68f2      	ldr	r2, [r6, #12]
 800e9c4:	9512      	str	r5, [sp, #72]	; 0x48
 800e9c6:	6852      	ldr	r2, [r2, #4]
 800e9c8:	9d01      	ldr	r5, [sp, #4]
 800e9ca:	2903      	cmp	r1, #3
 800e9cc:	fb05 f507 	mul.w	r5, r5, r7
 800e9d0:	9215      	str	r2, [sp, #84]	; 0x54
 800e9d2:	f000 836a 	beq.w	800f0aa <forward_dense+0x75e>
 800e9d6:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800e9da:	2a00      	cmp	r2, #0
 800e9dc:	f000 8368 	beq.w	800f0b0 <forward_dense+0x764>
 800e9e0:	6812      	ldr	r2, [r2, #0]
 800e9e2:	2a00      	cmp	r2, #0
 800e9e4:	f000 8364 	beq.w	800f0b0 <forward_dense+0x764>
 800e9e8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800e9ec:	2b04      	cmp	r3, #4
 800e9ee:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800e9f2:	f000 8363 	beq.w	800f0bc <forward_dense+0x770>
 800e9f6:	2b08      	cmp	r3, #8
 800e9f8:	f000 8360 	beq.w	800f0bc <forward_dense+0x770>
 800e9fc:	f04f 0a00 	mov.w	sl, #0
 800ea00:	69a3      	ldr	r3, [r4, #24]
 800ea02:	00ad      	lsls	r5, r5, #2
 800ea04:	6898      	ldr	r0, [r3, #8]
 800ea06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea08:	fb08 0405 	mla	r4, r8, r5, r0
 800ea0c:	695b      	ldr	r3, [r3, #20]
 800ea0e:	69b2      	ldr	r2, [r6, #24]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	00bd      	lsls	r5, r7, #2
 800ea14:	42a0      	cmp	r0, r4
 800ea16:	9002      	str	r0, [sp, #8]
 800ea18:	9410      	str	r4, [sp, #64]	; 0x40
 800ea1a:	950f      	str	r5, [sp, #60]	; 0x3c
 800ea1c:	6891      	ldr	r1, [r2, #8]
 800ea1e:	eb00 0805 	add.w	r8, r0, r5
 800ea22:	9304      	str	r3, [sp, #16]
 800ea24:	f080 811e 	bcs.w	800ec64 <forward_dense+0x318>
 800ea28:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ea2a:	eddf 6a9e 	vldr	s13, [pc, #632]	; 800eca4 <forward_dense+0x358>
 800ea2e:	08e8      	lsrs	r0, r5, #3
 800ea30:	4606      	mov	r6, r0
 800ea32:	0142      	lsls	r2, r0, #5
 800ea34:	f025 0301 	bic.w	r3, r5, #1
 800ea38:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
 800ea3c:	9001      	str	r0, [sp, #4]
 800ea3e:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 800ea42:	00f7      	lsls	r7, r6, #3
 800ea44:	9316      	str	r3, [sp, #88]	; 0x58
 800ea46:	0143      	lsls	r3, r0, #5
 800ea48:	00b6      	lsls	r6, r6, #2
 800ea4a:	9306      	str	r3, [sp, #24]
 800ea4c:	f107 0308 	add.w	r3, r7, #8
 800ea50:	9303      	str	r3, [sp, #12]
 800ea52:	1d33      	adds	r3, r6, #4
 800ea54:	930c      	str	r3, [sp, #48]	; 0x30
 800ea56:	f005 0301 	and.w	r3, r5, #1
 800ea5a:	9308      	str	r3, [sp, #32]
 800ea5c:	00ab      	lsls	r3, r5, #2
 800ea5e:	9311      	str	r3, [sp, #68]	; 0x44
 800ea60:	4653      	mov	r3, sl
 800ea62:	f1a5 0410 	sub.w	r4, r5, #16
 800ea66:	0924      	lsrs	r4, r4, #4
 800ea68:	3401      	adds	r4, #1
 800ea6a:	01a4      	lsls	r4, r4, #6
 800ea6c:	f005 0907 	and.w	r9, r5, #7
 800ea70:	9713      	str	r7, [sp, #76]	; 0x4c
 800ea72:	960b      	str	r6, [sp, #44]	; 0x2c
 800ea74:	9417      	str	r4, [sp, #92]	; 0x5c
 800ea76:	eb01 0b02 	add.w	fp, r1, r2
 800ea7a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800ea7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea80:	9906      	ldr	r1, [sp, #24]
 800ea82:	6992      	ldr	r2, [r2, #24]
 800ea84:	4459      	add	r1, fp
 800ea86:	6894      	ldr	r4, [r2, #8]
 800ea88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea8a:	9105      	str	r1, [sp, #20]
 800ea8c:	2a00      	cmp	r2, #0
 800ea8e:	f000 810b 	beq.w	800eca8 <forward_dense+0x35c>
 800ea92:	6992      	ldr	r2, [r2, #24]
 800ea94:	6896      	ldr	r6, [r2, #8]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f000 810a 	beq.w	800ecb0 <forward_dense+0x364>
 800ea9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea9e:	2a04      	cmp	r2, #4
 800eaa0:	f000 821a 	beq.w	800eed8 <forward_dense+0x58c>
 800eaa4:	9a02      	ldr	r2, [sp, #8]
 800eaa6:	4590      	cmp	r8, r2
 800eaa8:	f240 80d3 	bls.w	800ec52 <forward_dense+0x306>
 800eaac:	4617      	mov	r7, r2
 800eaae:	9a06      	ldr	r2, [sp, #24]
 800eab0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800eab4:	f102 0c20 	add.w	ip, r2, #32
 800eab8:	44dc      	add	ip, fp
 800eaba:	46be      	mov	lr, r7
 800eabc:	4637      	mov	r7, r6
 800eabe:	e9dd a613 	ldrd	sl, r6, [sp, #76]	; 0x4c
 800eac2:	2f00      	cmp	r7, #0
 800eac4:	f000 80e3 	beq.w	800ec8e <forward_dense+0x342>
 800eac8:	9a01      	ldr	r2, [sp, #4]
 800eaca:	edd7 5a00 	vldr	s11, [r7]
 800eace:	3704      	adds	r7, #4
 800ead0:	2a00      	cmp	r2, #0
 800ead2:	f000 80e2 	beq.w	800ec9a <forward_dense+0x34e>
 800ead6:	4661      	mov	r1, ip
 800ead8:	ed9f 6a72 	vldr	s12, [pc, #456]	; 800eca4 <forward_dense+0x358>
 800eadc:	9803      	ldr	r0, [sp, #12]
 800eade:	f104 0208 	add.w	r2, r4, #8
 800eae2:	1905      	adds	r5, r0, r4
 800eae4:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800eae8:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 800eaec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eaf0:	ed90 7a00 	vldr	s14, [r0]
 800eaf4:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 800eaf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eafc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eb00:	ed90 5a00 	vldr	s10, [r0]
 800eb04:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 800eb08:	f812 0c06 	ldrb.w	r0, [r2, #-6]
 800eb0c:	eee5 7a07 	vfma.f32	s15, s10, s14
 800eb10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eb14:	ed90 5a00 	vldr	s10, [r0]
 800eb18:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
 800eb1c:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 800eb20:	eee5 7a07 	vfma.f32	s15, s10, s14
 800eb24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eb28:	ed90 5a00 	vldr	s10, [r0]
 800eb2c:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 800eb30:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 800eb34:	eee5 7a07 	vfma.f32	s15, s10, s14
 800eb38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eb3c:	ed90 5a00 	vldr	s10, [r0]
 800eb40:	ed11 7a04 	vldr	s14, [r1, #-16]
 800eb44:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800eb48:	eee5 7a07 	vfma.f32	s15, s10, s14
 800eb4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eb50:	ed90 5a00 	vldr	s10, [r0]
 800eb54:	ed11 7a03 	vldr	s14, [r1, #-12]
 800eb58:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 800eb5c:	eee5 7a07 	vfma.f32	s15, s10, s14
 800eb60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eb64:	ed90 5a00 	vldr	s10, [r0]
 800eb68:	ed11 7a02 	vldr	s14, [r1, #-8]
 800eb6c:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800eb70:	eee5 7a07 	vfma.f32	s15, s10, s14
 800eb74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eb78:	ed11 7a01 	vldr	s14, [r1, #-4]
 800eb7c:	ed90 5a00 	vldr	s10, [r0]
 800eb80:	eee5 7a07 	vfma.f32	s15, s10, s14
 800eb84:	3208      	adds	r2, #8
 800eb86:	4295      	cmp	r5, r2
 800eb88:	ee36 6a27 	vadd.f32	s12, s12, s15
 800eb8c:	f101 0120 	add.w	r1, r1, #32
 800eb90:	d1a8      	bne.n	800eae4 <forward_dense+0x198>
 800eb92:	465a      	mov	r2, fp
 800eb94:	eb04 010a 	add.w	r1, r4, sl
 800eb98:	2e00      	cmp	r6, #0
 800eb9a:	d04a      	beq.n	800ec32 <forward_dense+0x2e6>
 800eb9c:	7808      	ldrb	r0, [r1, #0]
 800eb9e:	ed92 7a00 	vldr	s14, [r2]
 800eba2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eba6:	edd0 7a00 	vldr	s15, [r0]
 800ebaa:	2e01      	cmp	r6, #1
 800ebac:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ebb0:	d03f      	beq.n	800ec32 <forward_dense+0x2e6>
 800ebb2:	7848      	ldrb	r0, [r1, #1]
 800ebb4:	edd2 7a01 	vldr	s15, [r2, #4]
 800ebb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ebbc:	ed90 7a00 	vldr	s14, [r0]
 800ebc0:	2e02      	cmp	r6, #2
 800ebc2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ebc6:	d034      	beq.n	800ec32 <forward_dense+0x2e6>
 800ebc8:	7888      	ldrb	r0, [r1, #2]
 800ebca:	edd2 7a02 	vldr	s15, [r2, #8]
 800ebce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ebd2:	ed90 7a00 	vldr	s14, [r0]
 800ebd6:	2e03      	cmp	r6, #3
 800ebd8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ebdc:	d029      	beq.n	800ec32 <forward_dense+0x2e6>
 800ebde:	78c8      	ldrb	r0, [r1, #3]
 800ebe0:	edd2 7a03 	vldr	s15, [r2, #12]
 800ebe4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ebe8:	ed90 7a00 	vldr	s14, [r0]
 800ebec:	2e04      	cmp	r6, #4
 800ebee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ebf2:	d01e      	beq.n	800ec32 <forward_dense+0x2e6>
 800ebf4:	7908      	ldrb	r0, [r1, #4]
 800ebf6:	edd2 7a04 	vldr	s15, [r2, #16]
 800ebfa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ebfe:	ed90 7a00 	vldr	s14, [r0]
 800ec02:	2e05      	cmp	r6, #5
 800ec04:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ec08:	d013      	beq.n	800ec32 <forward_dense+0x2e6>
 800ec0a:	7948      	ldrb	r0, [r1, #5]
 800ec0c:	edd2 7a05 	vldr	s15, [r2, #20]
 800ec10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ec14:	ed90 7a00 	vldr	s14, [r0]
 800ec18:	2e06      	cmp	r6, #6
 800ec1a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ec1e:	d008      	beq.n	800ec32 <forward_dense+0x2e6>
 800ec20:	7989      	ldrb	r1, [r1, #6]
 800ec22:	edd2 7a06 	vldr	s15, [r2, #24]
 800ec26:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 800ec2a:	ed92 7a00 	vldr	s14, [r2]
 800ec2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ec32:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ec36:	ecae 6a01 	vstmia	lr!, {s12}
 800ec3a:	45c6      	cmp	lr, r8
 800ec3c:	444c      	add	r4, r9
 800ec3e:	f4ff af40 	bcc.w	800eac2 <forward_dense+0x176>
 800ec42:	9902      	ldr	r1, [sp, #8]
 800ec44:	43ca      	mvns	r2, r1
 800ec46:	4442      	add	r2, r8
 800ec48:	f022 0203 	bic.w	r2, r2, #3
 800ec4c:	3204      	adds	r2, #4
 800ec4e:	188a      	adds	r2, r1, r2
 800ec50:	9202      	str	r2, [sp, #8]
 800ec52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec54:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ec56:	4490      	add	r8, r2
 800ec58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ec5a:	4493      	add	fp, r2
 800ec5c:	9a02      	ldr	r2, [sp, #8]
 800ec5e:	428a      	cmp	r2, r1
 800ec60:	f4ff af0d 	bcc.w	800ea7e <forward_dense+0x132>
 800ec64:	b019      	add	sp, #100	; 0x64
 800ec66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	deff      	udf	#255	; 0xff
 800ec70:	684b      	ldr	r3, [r1, #4]
 800ec72:	deff      	udf	#255	; 0xff
 800ec74:	2300      	movs	r3, #0
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	deff      	udf	#255	; 0xff
 800ec7a:	681a      	ldr	r2, [r3, #0]
 800ec7c:	920d      	str	r2, [sp, #52]	; 0x34
 800ec7e:	f11c 0218 	adds.w	r2, ip, #24
 800ec82:	f47f ae85 	bne.w	800e990 <forward_dense+0x44>
 800ec86:	920e      	str	r2, [sp, #56]	; 0x38
 800ec88:	e68c      	b.n	800e9a4 <forward_dense+0x58>
 800ec8a:	930e      	str	r3, [sp, #56]	; 0x38
 800ec8c:	e68a      	b.n	800e9a4 <forward_dense+0x58>
 800ec8e:	9a01      	ldr	r2, [sp, #4]
 800ec90:	eef0 5a66 	vmov.f32	s11, s13
 800ec94:	2a00      	cmp	r2, #0
 800ec96:	f47f af1e 	bne.w	800ead6 <forward_dense+0x18a>
 800ec9a:	9a05      	ldr	r2, [sp, #20]
 800ec9c:	4621      	mov	r1, r4
 800ec9e:	ed9f 6a01 	vldr	s12, [pc, #4]	; 800eca4 <forward_dense+0x358>
 800eca2:	e779      	b.n	800eb98 <forward_dense+0x24c>
 800eca4:	00000000 	.word	0x00000000
 800eca8:	4616      	mov	r6, r2
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	f47f aef6 	bne.w	800ea9c <forward_dense+0x150>
 800ecb0:	9a02      	ldr	r2, [sp, #8]
 800ecb2:	4590      	cmp	r8, r2
 800ecb4:	d9cd      	bls.n	800ec52 <forward_dense+0x306>
 800ecb6:	4615      	mov	r5, r2
 800ecb8:	9a06      	ldr	r2, [sp, #24]
 800ecba:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ecbc:	3240      	adds	r2, #64	; 0x40
 800ecbe:	eb02 070b 	add.w	r7, r2, fp
 800ecc2:	9a05      	ldr	r2, [sp, #20]
 800ecc4:	468a      	mov	sl, r1
 800ecc6:	4610      	mov	r0, r2
 800ecc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ecca:	9307      	str	r3, [sp, #28]
 800eccc:	4691      	mov	r9, r2
 800ecce:	9b04      	ldr	r3, [sp, #16]
 800ecd0:	eb00 0c02 	add.w	ip, r0, r2
 800ecd4:	f001 0e0f 	and.w	lr, r1, #15
 800ecd8:	2e00      	cmp	r6, #0
 800ecda:	f000 81da 	beq.w	800f092 <forward_dense+0x746>
 800ecde:	f1ba 0f0f 	cmp.w	sl, #15
 800ece2:	edd6 5a00 	vldr	s11, [r6]
 800ece6:	f106 0604 	add.w	r6, r6, #4
 800ecea:	f240 81d8 	bls.w	800f09e <forward_dense+0x752>
 800ecee:	4639      	mov	r1, r7
 800ecf0:	4650      	mov	r0, sl
 800ecf2:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 800eca4 <forward_dense+0x358>
 800ecf6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800ecfa:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800ecfe:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 800ed02:	ed12 5a10 	vldr	s10, [r2, #-64]	; 0xffffffc0
 800ed06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed0a:	ed11 7a10 	vldr	s14, [r1, #-64]	; 0xffffffc0
 800ed0e:	ed52 4a0e 	vldr	s9, [r2, #-56]	; 0xffffffc8
 800ed12:	eee5 7a07 	vfma.f32	s15, s10, s14
 800ed16:	ed11 7a0e 	vldr	s14, [r1, #-56]	; 0xffffffc8
 800ed1a:	ed12 5a0d 	vldr	s10, [r2, #-52]	; 0xffffffcc
 800ed1e:	eee4 7a87 	vfma.f32	s15, s9, s14
 800ed22:	ed11 7a0d 	vldr	s14, [r1, #-52]	; 0xffffffcc
 800ed26:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800ed2a:	eee5 7a07 	vfma.f32	s15, s10, s14
 800ed2e:	ed12 7a0c 	vldr	s14, [r2, #-48]	; 0xffffffd0
 800ed32:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 800ed36:	eee4 7a87 	vfma.f32	s15, s9, s14
 800ed3a:	ed12 7a0b 	vldr	s14, [r2, #-44]	; 0xffffffd4
 800ed3e:	ed51 4a0a 	vldr	s9, [r1, #-40]	; 0xffffffd8
 800ed42:	eee5 7a07 	vfma.f32	s15, s10, s14
 800ed46:	ed12 7a0a 	vldr	s14, [r2, #-40]	; 0xffffffd8
 800ed4a:	ed12 5a09 	vldr	s10, [r2, #-36]	; 0xffffffdc
 800ed4e:	eee4 7a87 	vfma.f32	s15, s9, s14
 800ed52:	ed11 7a09 	vldr	s14, [r1, #-36]	; 0xffffffdc
 800ed56:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 800ed5a:	eee5 7a07 	vfma.f32	s15, s10, s14
 800ed5e:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 800ed62:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 800ed66:	eee4 7a87 	vfma.f32	s15, s9, s14
 800ed6a:	ed11 7a07 	vldr	s14, [r1, #-28]	; 0xffffffe4
 800ed6e:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 800ed72:	eee5 7a07 	vfma.f32	s15, s10, s14
 800ed76:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
 800ed7a:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 800ed7e:	eee4 7a87 	vfma.f32	s15, s9, s14
 800ed82:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 800ed86:	ed51 4a04 	vldr	s9, [r1, #-16]
 800ed8a:	eee5 7a07 	vfma.f32	s15, s10, s14
 800ed8e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800ed92:	ed11 5a03 	vldr	s10, [r1, #-12]
 800ed96:	eee4 7a87 	vfma.f32	s15, s9, s14
 800ed9a:	ed12 7a03 	vldr	s14, [r2, #-12]
 800ed9e:	ed51 4a02 	vldr	s9, [r1, #-8]
 800eda2:	eee5 7a07 	vfma.f32	s15, s10, s14
 800eda6:	ed12 7a02 	vldr	s14, [r2, #-8]
 800edaa:	ed12 5a01 	vldr	s10, [r2, #-4]
 800edae:	eee4 7a87 	vfma.f32	s15, s9, s14
 800edb2:	ed11 7a01 	vldr	s14, [r1, #-4]
 800edb6:	eee5 7a07 	vfma.f32	s15, s10, s14
 800edba:	3810      	subs	r0, #16
 800edbc:	280f      	cmp	r0, #15
 800edbe:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800edc2:	ee36 6a27 	vadd.f32	s12, s12, s15
 800edc6:	f101 0140 	add.w	r1, r1, #64	; 0x40
 800edca:	d896      	bhi.n	800ecfa <forward_dense+0x3ae>
 800edcc:	4672      	mov	r2, lr
 800edce:	4661      	mov	r1, ip
 800edd0:	eb04 0009 	add.w	r0, r4, r9
 800edd4:	2a00      	cmp	r2, #0
 800edd6:	d075      	beq.n	800eec4 <forward_dense+0x578>
 800edd8:	ed90 7a00 	vldr	s14, [r0]
 800eddc:	edd1 7a00 	vldr	s15, [r1]
 800ede0:	2a01      	cmp	r2, #1
 800ede2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ede6:	d06d      	beq.n	800eec4 <forward_dense+0x578>
 800ede8:	ed90 7a01 	vldr	s14, [r0, #4]
 800edec:	edd1 7a01 	vldr	s15, [r1, #4]
 800edf0:	2a02      	cmp	r2, #2
 800edf2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800edf6:	d065      	beq.n	800eec4 <forward_dense+0x578>
 800edf8:	ed90 7a02 	vldr	s14, [r0, #8]
 800edfc:	edd1 7a02 	vldr	s15, [r1, #8]
 800ee00:	2a03      	cmp	r2, #3
 800ee02:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee06:	d05d      	beq.n	800eec4 <forward_dense+0x578>
 800ee08:	ed90 7a03 	vldr	s14, [r0, #12]
 800ee0c:	edd1 7a03 	vldr	s15, [r1, #12]
 800ee10:	2a04      	cmp	r2, #4
 800ee12:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee16:	d055      	beq.n	800eec4 <forward_dense+0x578>
 800ee18:	ed90 7a04 	vldr	s14, [r0, #16]
 800ee1c:	edd1 7a04 	vldr	s15, [r1, #16]
 800ee20:	2a05      	cmp	r2, #5
 800ee22:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee26:	d04d      	beq.n	800eec4 <forward_dense+0x578>
 800ee28:	ed90 7a05 	vldr	s14, [r0, #20]
 800ee2c:	edd1 7a05 	vldr	s15, [r1, #20]
 800ee30:	2a06      	cmp	r2, #6
 800ee32:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee36:	d045      	beq.n	800eec4 <forward_dense+0x578>
 800ee38:	ed90 7a06 	vldr	s14, [r0, #24]
 800ee3c:	edd1 7a06 	vldr	s15, [r1, #24]
 800ee40:	2a07      	cmp	r2, #7
 800ee42:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee46:	d03d      	beq.n	800eec4 <forward_dense+0x578>
 800ee48:	ed90 7a07 	vldr	s14, [r0, #28]
 800ee4c:	edd1 7a07 	vldr	s15, [r1, #28]
 800ee50:	2a08      	cmp	r2, #8
 800ee52:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee56:	d035      	beq.n	800eec4 <forward_dense+0x578>
 800ee58:	ed90 7a08 	vldr	s14, [r0, #32]
 800ee5c:	edd1 7a08 	vldr	s15, [r1, #32]
 800ee60:	2a09      	cmp	r2, #9
 800ee62:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee66:	d02d      	beq.n	800eec4 <forward_dense+0x578>
 800ee68:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800ee6c:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800ee70:	2a0a      	cmp	r2, #10
 800ee72:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee76:	d025      	beq.n	800eec4 <forward_dense+0x578>
 800ee78:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800ee7c:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800ee80:	2a0b      	cmp	r2, #11
 800ee82:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee86:	d01d      	beq.n	800eec4 <forward_dense+0x578>
 800ee88:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800ee8c:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800ee90:	2a0c      	cmp	r2, #12
 800ee92:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee96:	d015      	beq.n	800eec4 <forward_dense+0x578>
 800ee98:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800ee9c:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800eea0:	2a0d      	cmp	r2, #13
 800eea2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800eea6:	d00d      	beq.n	800eec4 <forward_dense+0x578>
 800eea8:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800eeac:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800eeb0:	2a0e      	cmp	r2, #14
 800eeb2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800eeb6:	d005      	beq.n	800eec4 <forward_dense+0x578>
 800eeb8:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800eebc:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800eec0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800eec4:	ee35 6a86 	vadd.f32	s12, s11, s12
 800eec8:	eca5 6a01 	vstmia	r5!, {s12}
 800eecc:	4545      	cmp	r5, r8
 800eece:	441c      	add	r4, r3
 800eed0:	f4ff af02 	bcc.w	800ecd8 <forward_dense+0x38c>
 800eed4:	9b07      	ldr	r3, [sp, #28]
 800eed6:	e6b4      	b.n	800ec42 <forward_dense+0x2f6>
 800eed8:	9902      	ldr	r1, [sp, #8]
 800eeda:	4588      	cmp	r8, r1
 800eedc:	f67f aeb9 	bls.w	800ec52 <forward_dense+0x306>
 800eee0:	4689      	mov	r9, r1
 800eee2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eee4:	eb02 000b 	add.w	r0, r2, fp
 800eee8:	9a06      	ldr	r2, [sp, #24]
 800eeea:	9007      	str	r0, [sp, #28]
 800eeec:	3220      	adds	r2, #32
 800eeee:	3007      	adds	r0, #7
 800eef0:	445a      	add	r2, fp
 800eef2:	900a      	str	r0, [sp, #40]	; 0x28
 800eef4:	9209      	str	r2, [sp, #36]	; 0x24
 800eef6:	2e00      	cmp	r6, #0
 800eef8:	f000 80b5 	beq.w	800f066 <forward_dense+0x71a>
 800eefc:	9a01      	ldr	r2, [sp, #4]
 800eefe:	edd6 5a00 	vldr	s11, [r6]
 800ef02:	3604      	adds	r6, #4
 800ef04:	2a00      	cmp	r2, #0
 800ef06:	f000 80b4 	beq.w	800f072 <forward_dense+0x726>
 800ef0a:	ed1f 6a9a 	vldr	s12, [pc, #-616]	; 800eca4 <forward_dense+0x358>
 800ef0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ef10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef12:	1d21      	adds	r1, r4, #4
 800ef14:	1905      	adds	r5, r0, r4
 800ef16:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 800ef1a:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 800ef1e:	f000 070f 	and.w	r7, r0, #15
 800ef22:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ef26:	ed97 7a00 	vldr	s14, [r7]
 800ef2a:	0900      	lsrs	r0, r0, #4
 800ef2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ef30:	ed90 5a00 	vldr	s10, [r0]
 800ef34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef38:	ed12 7a08 	vldr	s14, [r2, #-32]	; 0xffffffe0
 800ef3c:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800ef40:	eee5 7a07 	vfma.f32	s15, s10, s14
 800ef44:	0907      	lsrs	r7, r0, #4
 800ef46:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ef4a:	ed97 5a00 	vldr	s10, [r7]
 800ef4e:	ed12 7a06 	vldr	s14, [r2, #-24]	; 0xffffffe8
 800ef52:	f000 000f 	and.w	r0, r0, #15
 800ef56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ef5a:	eee5 7a07 	vfma.f32	s15, s10, s14
 800ef5e:	ed90 5a00 	vldr	s10, [r0]
 800ef62:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800ef66:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800ef6a:	eee5 7a07 	vfma.f32	s15, s10, s14
 800ef6e:	0907      	lsrs	r7, r0, #4
 800ef70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ef74:	ed97 5a00 	vldr	s10, [r7]
 800ef78:	ed12 7a04 	vldr	s14, [r2, #-16]
 800ef7c:	f000 000f 	and.w	r0, r0, #15
 800ef80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ef84:	eee5 7a07 	vfma.f32	s15, s10, s14
 800ef88:	ed90 5a00 	vldr	s10, [r0]
 800ef8c:	ed12 7a03 	vldr	s14, [r2, #-12]
 800ef90:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800ef94:	eee5 7a07 	vfma.f32	s15, s10, s14
 800ef98:	0907      	lsrs	r7, r0, #4
 800ef9a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ef9e:	ed12 7a02 	vldr	s14, [r2, #-8]
 800efa2:	ed97 5a00 	vldr	s10, [r7]
 800efa6:	f000 000f 	and.w	r0, r0, #15
 800efaa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800efae:	eee5 7a07 	vfma.f32	s15, s10, s14
 800efb2:	ed12 7a01 	vldr	s14, [r2, #-4]
 800efb6:	ed90 5a00 	vldr	s10, [r0]
 800efba:	eee5 7a07 	vfma.f32	s15, s10, s14
 800efbe:	3104      	adds	r1, #4
 800efc0:	428d      	cmp	r5, r1
 800efc2:	ee36 6a27 	vadd.f32	s12, s12, s15
 800efc6:	f102 0220 	add.w	r2, r2, #32
 800efca:	d1a4      	bne.n	800ef16 <forward_dense+0x5ca>
 800efcc:	46de      	mov	lr, fp
 800efce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800efd0:	eb04 0a02 	add.w	sl, r4, r2
 800efd4:	9a07      	ldr	r2, [sp, #28]
 800efd6:	4596      	cmp	lr, r2
 800efd8:	d22c      	bcs.n	800f034 <forward_dense+0x6e8>
 800efda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efdc:	f10e 0108 	add.w	r1, lr, #8
 800efe0:	eba2 0c01 	sub.w	ip, r2, r1
 800efe4:	f02c 0207 	bic.w	r2, ip, #7
 800efe8:	f10e 0710 	add.w	r7, lr, #16
 800efec:	4417      	add	r7, r2
 800efee:	f10a 35ff 	add.w	r5, sl, #4294967295
 800eff2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800eff6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800effa:	f002 000f 	and.w	r0, r2, #15
 800effe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f002:	ed90 7a00 	vldr	s14, [r0]
 800f006:	0912      	lsrs	r2, r2, #4
 800f008:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f010:	ed92 5a00 	vldr	s10, [r2]
 800f014:	ed11 7a02 	vldr	s14, [r1, #-8]
 800f018:	eee5 7a07 	vfma.f32	s15, s10, s14
 800f01c:	3108      	adds	r1, #8
 800f01e:	428f      	cmp	r7, r1
 800f020:	ee36 6a27 	vadd.f32	s12, s12, s15
 800f024:	d1e5      	bne.n	800eff2 <forward_dense+0x6a6>
 800f026:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800f02a:	f10c 0c01 	add.w	ip, ip, #1
 800f02e:	44e2      	add	sl, ip
 800f030:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 800f034:	9a08      	ldr	r2, [sp, #32]
 800f036:	b312      	cbz	r2, 800f07e <forward_dense+0x732>
 800f038:	f89a 2000 	ldrb.w	r2, [sl]
 800f03c:	edde 7a00 	vldr	s15, [lr]
 800f040:	0912      	lsrs	r2, r2, #4
 800f042:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f046:	ed92 7a00 	vldr	s14, [r2]
 800f04a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f04e:	ee76 5a25 	vadd.f32	s11, s12, s11
 800f052:	ece9 5a01 	vstmia	r9!, {s11}
 800f056:	9a04      	ldr	r2, [sp, #16]
 800f058:	45c8      	cmp	r8, r9
 800f05a:	4414      	add	r4, r2
 800f05c:	f67f adf1 	bls.w	800ec42 <forward_dense+0x2f6>
 800f060:	2e00      	cmp	r6, #0
 800f062:	f47f af4b 	bne.w	800eefc <forward_dense+0x5b0>
 800f066:	9a01      	ldr	r2, [sp, #4]
 800f068:	eef0 5a66 	vmov.f32	s11, s13
 800f06c:	2a00      	cmp	r2, #0
 800f06e:	f47f af4c 	bne.w	800ef0a <forward_dense+0x5be>
 800f072:	f8dd e014 	ldr.w	lr, [sp, #20]
 800f076:	46a2      	mov	sl, r4
 800f078:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800f0e8 <forward_dense+0x79c>
 800f07c:	e7aa      	b.n	800efd4 <forward_dense+0x688>
 800f07e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f082:	eca9 6a01 	vstmia	r9!, {s12}
 800f086:	9a04      	ldr	r2, [sp, #16]
 800f088:	45c1      	cmp	r9, r8
 800f08a:	4414      	add	r4, r2
 800f08c:	f4ff af33 	bcc.w	800eef6 <forward_dense+0x5aa>
 800f090:	e5d7      	b.n	800ec42 <forward_dense+0x2f6>
 800f092:	f1ba 0f0f 	cmp.w	sl, #15
 800f096:	eef0 5a66 	vmov.f32	s11, s13
 800f09a:	f63f ae28 	bhi.w	800ecee <forward_dense+0x3a2>
 800f09e:	4652      	mov	r2, sl
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	9905      	ldr	r1, [sp, #20]
 800f0a4:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800f0e8 <forward_dense+0x79c>
 800f0a8:	e694      	b.n	800edd4 <forward_dense+0x488>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	deff      	udf	#255	; 0xff
 800f0b0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800f0b4:	2b04      	cmp	r3, #4
 800f0b6:	4691      	mov	r9, r2
 800f0b8:	f47f ac9d 	bne.w	800e9f6 <forward_dense+0xaa>
 800f0bc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f0c0:	f1b9 0f00 	cmp.w	r9, #0
 800f0c4:	f43f ac9c 	beq.w	800ea00 <forward_dense+0xb4>
 800f0c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f0cc:	f000 fac6 	bl	800f65c <ai_array_get_byte_size>
 800f0d0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	4651      	mov	r1, sl
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f000 fb25 	bl	800f728 <memcpy>
 800f0de:	4682      	mov	sl, r0
 800f0e0:	e48e      	b.n	800ea00 <forward_dense+0xb4>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	930e      	str	r3, [sp, #56]	; 0x38
 800f0e6:	e45d      	b.n	800e9a4 <forward_dense+0x58>
 800f0e8:	00000000 	.word	0x00000000

0800f0ec <nl_func_sm_array_f32>:
 800f0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f0:	ed2d 8b04 	vpush	{d8-d9}
 800f0f4:	6984      	ldr	r4, [r0, #24]
 800f0f6:	b089      	sub	sp, #36	; 0x24
 800f0f8:	4626      	mov	r6, r4
 800f0fa:	698f      	ldr	r7, [r1, #24]
 800f0fc:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 800f100:	68bd      	ldr	r5, [r7, #8]
 800f102:	9402      	str	r4, [sp, #8]
 800f104:	eba2 040e 	sub.w	r4, r2, lr
 800f108:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800f10c:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 800f110:	68fc      	ldr	r4, [r7, #12]
 800f112:	68b6      	ldr	r6, [r6, #8]
 800f114:	eba2 020c 	sub.w	r2, r2, ip
 800f118:	42a5      	cmp	r5, r4
 800f11a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800f11e:	d351      	bcc.n	800f1c4 <nl_func_sm_array_f32+0xd8>
 800f120:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800f124:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800f128:	f1ce 0200 	rsb	r2, lr, #0
 800f12c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800f130:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800f134:	9303      	str	r3, [sp, #12]
 800f136:	9204      	str	r2, [sp, #16]
 800f138:	009b      	lsls	r3, r3, #2
 800f13a:	f1cc 0200 	rsb	r2, ip, #0
 800f13e:	9205      	str	r2, [sp, #20]
 800f140:	9301      	str	r3, [sp, #4]
 800f142:	9b02      	ldr	r3, [sp, #8]
 800f144:	9a07      	ldr	r2, [sp, #28]
 800f146:	60bd      	str	r5, [r7, #8]
 800f148:	609e      	str	r6, [r3, #8]
 800f14a:	9b06      	ldr	r3, [sp, #24]
 800f14c:	6992      	ldr	r2, [r2, #24]
 800f14e:	699b      	ldr	r3, [r3, #24]
 800f150:	6894      	ldr	r4, [r2, #8]
 800f152:	9a03      	ldr	r2, [sp, #12]
 800f154:	689b      	ldr	r3, [r3, #8]
 800f156:	2a01      	cmp	r2, #1
 800f158:	ed93 8a00 	vldr	s16, [r3]
 800f15c:	d93b      	bls.n	800f1d6 <nl_func_sm_array_f32+0xea>
 800f15e:	9901      	ldr	r1, [sp, #4]
 800f160:	1d1a      	adds	r2, r3, #4
 800f162:	eb03 0b01 	add.w	fp, r3, r1
 800f166:	ecf2 7a01 	vldmia	r2!, {s15}
 800f16a:	4593      	cmp	fp, r2
 800f16c:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800f170:	d1f9      	bne.n	800f166 <nl_func_sm_array_f32+0x7a>
 800f172:	469a      	mov	sl, r3
 800f174:	46a1      	mov	r9, r4
 800f176:	46a0      	mov	r8, r4
 800f178:	eddf 8a1a 	vldr	s17, [pc, #104]	; 800f1e4 <nl_func_sm_array_f32+0xf8>
 800f17c:	ecba 0a01 	vldmia	sl!, {s0}
 800f180:	ee30 0a48 	vsub.f32	s0, s0, s16
 800f184:	f004 ff6e 	bl	8014064 <expf>
 800f188:	45d3      	cmp	fp, sl
 800f18a:	eca8 0a01 	vstmia	r8!, {s0}
 800f18e:	ee78 8a80 	vadd.f32	s17, s17, s0
 800f192:	d1f3      	bne.n	800f17c <nl_func_sm_array_f32+0x90>
 800f194:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19c:	d00b      	beq.n	800f1b6 <nl_func_sm_array_f32+0xca>
 800f19e:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800f1a2:	9b01      	ldr	r3, [sp, #4]
 800f1a4:	441c      	add	r4, r3
 800f1a6:	edd9 7a00 	vldr	s15, [r9]
 800f1aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f1ae:	ece9 7a01 	vstmia	r9!, {s15}
 800f1b2:	454c      	cmp	r4, r9
 800f1b4:	d1f7      	bne.n	800f1a6 <nl_func_sm_array_f32+0xba>
 800f1b6:	9b04      	ldr	r3, [sp, #16]
 800f1b8:	68fc      	ldr	r4, [r7, #12]
 800f1ba:	441d      	add	r5, r3
 800f1bc:	9b05      	ldr	r3, [sp, #20]
 800f1be:	42ac      	cmp	r4, r5
 800f1c0:	441e      	add	r6, r3
 800f1c2:	d9be      	bls.n	800f142 <nl_func_sm_array_f32+0x56>
 800f1c4:	9a02      	ldr	r2, [sp, #8]
 800f1c6:	60bc      	str	r4, [r7, #8]
 800f1c8:	68d3      	ldr	r3, [r2, #12]
 800f1ca:	6093      	str	r3, [r2, #8]
 800f1cc:	b009      	add	sp, #36	; 0x24
 800f1ce:	ecbd 8b04 	vpop	{d8-d9}
 800f1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d6:	2a00      	cmp	r2, #0
 800f1d8:	d0ed      	beq.n	800f1b6 <nl_func_sm_array_f32+0xca>
 800f1da:	9a01      	ldr	r2, [sp, #4]
 800f1dc:	eb03 0b02 	add.w	fp, r3, r2
 800f1e0:	e7c7      	b.n	800f172 <nl_func_sm_array_f32+0x86>
 800f1e2:	bf00      	nop
 800f1e4:	00000000 	.word	0x00000000

0800f1e8 <nl_func_relu_generic_array_f32>:
 800f1e8:	b430      	push	{r4, r5}
 800f1ea:	ed93 7a02 	vldr	s14, [r3, #8]
 800f1ee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f6:	6989      	ldr	r1, [r1, #24]
 800f1f8:	6980      	ldr	r0, [r0, #24]
 800f1fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f1fe:	f102 32ff 	add.w	r2, r2, #4294967295
 800f202:	6880      	ldr	r0, [r0, #8]
 800f204:	688c      	ldr	r4, [r1, #8]
 800f206:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800f20a:	4410      	add	r0, r2
 800f20c:	edd3 6a00 	vldr	s13, [r3]
 800f210:	4422      	add	r2, r4
 800f212:	ed93 6a01 	vldr	s12, [r3, #4]
 800f216:	d421      	bmi.n	800f25c <nl_func_relu_generic_array_f32+0x74>
 800f218:	4294      	cmp	r4, r2
 800f21a:	d83d      	bhi.n	800f298 <nl_func_relu_generic_array_f32+0xb0>
 800f21c:	1d13      	adds	r3, r2, #4
 800f21e:	1d02      	adds	r2, r0, #4
 800f220:	e010      	b.n	800f244 <nl_func_relu_generic_array_f32+0x5c>
 800f222:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f22a:	d503      	bpl.n	800f234 <nl_func_relu_generic_array_f32+0x4c>
 800f22c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f230:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f234:	ed62 7a01 	vstmdb	r2!, {s15}
 800f238:	6888      	ldr	r0, [r1, #8]
 800f23a:	f1a3 0408 	sub.w	r4, r3, #8
 800f23e:	4284      	cmp	r4, r0
 800f240:	462b      	mov	r3, r5
 800f242:	d329      	bcc.n	800f298 <nl_func_relu_generic_array_f32+0xb0>
 800f244:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f250:	f1a3 0504 	sub.w	r5, r3, #4
 800f254:	d4e5      	bmi.n	800f222 <nl_func_relu_generic_array_f32+0x3a>
 800f256:	eef0 7a47 	vmov.f32	s15, s14
 800f25a:	e7eb      	b.n	800f234 <nl_func_relu_generic_array_f32+0x4c>
 800f25c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f264:	d01a      	beq.n	800f29c <nl_func_relu_generic_array_f32+0xb4>
 800f266:	4294      	cmp	r4, r2
 800f268:	d816      	bhi.n	800f298 <nl_func_relu_generic_array_f32+0xb0>
 800f26a:	1d13      	adds	r3, r2, #4
 800f26c:	1d02      	adds	r2, r0, #4
 800f26e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f272:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f27a:	f1a3 0408 	sub.w	r4, r3, #8
 800f27e:	f1a3 0004 	sub.w	r0, r3, #4
 800f282:	4623      	mov	r3, r4
 800f284:	d522      	bpl.n	800f2cc <nl_func_relu_generic_array_f32+0xe4>
 800f286:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f28a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f28e:	ed62 7a01 	vstmdb	r2!, {s15}
 800f292:	688b      	ldr	r3, [r1, #8]
 800f294:	42a3      	cmp	r3, r4
 800f296:	d91e      	bls.n	800f2d6 <nl_func_relu_generic_array_f32+0xee>
 800f298:	bc30      	pop	{r4, r5}
 800f29a:	4770      	bx	lr
 800f29c:	4294      	cmp	r4, r2
 800f29e:	d8fb      	bhi.n	800f298 <nl_func_relu_generic_array_f32+0xb0>
 800f2a0:	2500      	movs	r5, #0
 800f2a2:	1d13      	adds	r3, r2, #4
 800f2a4:	1d02      	adds	r2, r0, #4
 800f2a6:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f2aa:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2b2:	f1a3 0408 	sub.w	r4, r3, #8
 800f2b6:	f1a3 0004 	sub.w	r0, r3, #4
 800f2ba:	4623      	mov	r3, r4
 800f2bc:	db0d      	blt.n	800f2da <nl_func_relu_generic_array_f32+0xf2>
 800f2be:	ed62 7a01 	vstmdb	r2!, {s15}
 800f2c2:	688b      	ldr	r3, [r1, #8]
 800f2c4:	42a3      	cmp	r3, r4
 800f2c6:	d8e7      	bhi.n	800f298 <nl_func_relu_generic_array_f32+0xb0>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	e7ec      	b.n	800f2a6 <nl_func_relu_generic_array_f32+0xbe>
 800f2cc:	ed62 7a01 	vstmdb	r2!, {s15}
 800f2d0:	688c      	ldr	r4, [r1, #8]
 800f2d2:	429c      	cmp	r4, r3
 800f2d4:	d8e0      	bhi.n	800f298 <nl_func_relu_generic_array_f32+0xb0>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	e7c9      	b.n	800f26e <nl_func_relu_generic_array_f32+0x86>
 800f2da:	f842 5d04 	str.w	r5, [r2, #-4]!
 800f2de:	688c      	ldr	r4, [r1, #8]
 800f2e0:	429c      	cmp	r4, r3
 800f2e2:	d8d9      	bhi.n	800f298 <nl_func_relu_generic_array_f32+0xb0>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	e7de      	b.n	800f2a6 <nl_func_relu_generic_array_f32+0xbe>

0800f2e8 <forward_relu>:
 800f2e8:	6982      	ldr	r2, [r0, #24]
 800f2ea:	8813      	ldrh	r3, [r2, #0]
 800f2ec:	b32b      	cbz	r3, 800f33a <forward_relu+0x52>
 800f2ee:	6852      	ldr	r2, [r2, #4]
 800f2f0:	6851      	ldr	r1, [r2, #4]
 800f2f2:	b101      	cbz	r1, 800f2f6 <forward_relu+0xe>
 800f2f4:	6809      	ldr	r1, [r1, #0]
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d91c      	bls.n	800f334 <forward_relu+0x4c>
 800f2fa:	b4f0      	push	{r4, r5, r6, r7}
 800f2fc:	6917      	ldr	r7, [r2, #16]
 800f2fe:	b107      	cbz	r7, 800f302 <forward_relu+0x1a>
 800f300:	683f      	ldr	r7, [r7, #0]
 800f302:	688c      	ldr	r4, [r1, #8]
 800f304:	69c3      	ldr	r3, [r0, #28]
 800f306:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d043      	beq.n	800f396 <forward_relu+0xae>
 800f30e:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800f312:	2d01      	cmp	r5, #1
 800f314:	d013      	beq.n	800f33e <forward_relu+0x56>
 800f316:	2201      	movs	r2, #1
 800f318:	b144      	cbz	r4, 800f32c <forward_relu+0x44>
 800f31a:	68ce      	ldr	r6, [r1, #12]
 800f31c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800f320:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f324:	42a6      	cmp	r6, r4
 800f326:	fb05 f202 	mul.w	r2, r5, r2
 800f32a:	d1f9      	bne.n	800f320 <forward_relu+0x38>
 800f32c:	4638      	mov	r0, r7
 800f32e:	bcf0      	pop	{r4, r5, r6, r7}
 800f330:	f7ff bf5a 	b.w	800f1e8 <nl_func_relu_generic_array_f32>
 800f334:	2300      	movs	r3, #0
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	deff      	udf	#255	; 0xff
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	deff      	udf	#255	; 0xff
 800f33e:	69ba      	ldr	r2, [r7, #24]
 800f340:	6988      	ldr	r0, [r1, #24]
 800f342:	6896      	ldr	r6, [r2, #8]
 800f344:	ed93 7a00 	vldr	s14, [r3]
 800f348:	6882      	ldr	r2, [r0, #8]
 800f34a:	b184      	cbz	r4, 800f36e <forward_relu+0x86>
 800f34c:	462b      	mov	r3, r5
 800f34e:	68cd      	ldr	r5, [r1, #12]
 800f350:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800f354:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800f358:	42a5      	cmp	r5, r4
 800f35a:	fb01 f303 	mul.w	r3, r1, r3
 800f35e:	d1f9      	bne.n	800f354 <forward_relu+0x6c>
 800f360:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f364:	3b01      	subs	r3, #1
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	18d2      	adds	r2, r2, r3
 800f36a:	441e      	add	r6, r3
 800f36c:	d23a      	bcs.n	800f3e4 <forward_relu+0xfc>
 800f36e:	2500      	movs	r5, #0
 800f370:	1d13      	adds	r3, r2, #4
 800f372:	1d32      	adds	r2, r6, #4
 800f374:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f380:	f1a3 0104 	sub.w	r1, r3, #4
 800f384:	d830      	bhi.n	800f3e8 <forward_relu+0x100>
 800f386:	ed62 7a01 	vstmdb	r2!, {s15}
 800f38a:	6884      	ldr	r4, [r0, #8]
 800f38c:	3b08      	subs	r3, #8
 800f38e:	429c      	cmp	r4, r3
 800f390:	d828      	bhi.n	800f3e4 <forward_relu+0xfc>
 800f392:	460b      	mov	r3, r1
 800f394:	e7ee      	b.n	800f374 <forward_relu+0x8c>
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	698d      	ldr	r5, [r1, #24]
 800f39a:	6898      	ldr	r0, [r3, #8]
 800f39c:	68ab      	ldr	r3, [r5, #8]
 800f39e:	b184      	cbz	r4, 800f3c2 <forward_relu+0xda>
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	68ce      	ldr	r6, [r1, #12]
 800f3a4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800f3a8:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800f3ac:	42a6      	cmp	r6, r4
 800f3ae:	fb01 f202 	mul.w	r2, r1, r2
 800f3b2:	d1f9      	bne.n	800f3a8 <forward_relu+0xc0>
 800f3b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f3b8:	3a01      	subs	r2, #1
 800f3ba:	0092      	lsls	r2, r2, #2
 800f3bc:	189b      	adds	r3, r3, r2
 800f3be:	4410      	add	r0, r2
 800f3c0:	d210      	bcs.n	800f3e4 <forward_relu+0xfc>
 800f3c2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800f3f8 <forward_relu+0x110>
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	1d01      	adds	r1, r0, #4
 800f3ca:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f3ce:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f3d2:	ed61 7a01 	vstmdb	r1!, {s15}
 800f3d6:	68a8      	ldr	r0, [r5, #8]
 800f3d8:	f1a3 0208 	sub.w	r2, r3, #8
 800f3dc:	4290      	cmp	r0, r2
 800f3de:	f1a3 0304 	sub.w	r3, r3, #4
 800f3e2:	d9f2      	bls.n	800f3ca <forward_relu+0xe2>
 800f3e4:	bcf0      	pop	{r4, r5, r6, r7}
 800f3e6:	4770      	bx	lr
 800f3e8:	f842 5d04 	str.w	r5, [r2, #-4]!
 800f3ec:	6884      	ldr	r4, [r0, #8]
 800f3ee:	3b08      	subs	r3, #8
 800f3f0:	429c      	cmp	r4, r3
 800f3f2:	d8f7      	bhi.n	800f3e4 <forward_relu+0xfc>
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	e7bd      	b.n	800f374 <forward_relu+0x8c>
 800f3f8:	00000000 	.word	0x00000000

0800f3fc <forward_sm>:
 800f3fc:	6982      	ldr	r2, [r0, #24]
 800f3fe:	8813      	ldrh	r3, [r2, #0]
 800f400:	b333      	cbz	r3, 800f450 <forward_sm+0x54>
 800f402:	6852      	ldr	r2, [r2, #4]
 800f404:	6851      	ldr	r1, [r2, #4]
 800f406:	b101      	cbz	r1, 800f40a <forward_sm+0xe>
 800f408:	6809      	ldr	r1, [r1, #0]
 800f40a:	2b01      	cmp	r3, #1
 800f40c:	d91d      	bls.n	800f44a <forward_sm+0x4e>
 800f40e:	6913      	ldr	r3, [r2, #16]
 800f410:	b1cb      	cbz	r3, 800f446 <forward_sm+0x4a>
 800f412:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f414:	6818      	ldr	r0, [r3, #0]
 800f416:	688c      	ldr	r4, [r1, #8]
 800f418:	68c3      	ldr	r3, [r0, #12]
 800f41a:	68ce      	ldr	r6, [r1, #12]
 800f41c:	0a24      	lsrs	r4, r4, #8
 800f41e:	685f      	ldr	r7, [r3, #4]
 800f420:	b083      	sub	sp, #12
 800f422:	6873      	ldr	r3, [r6, #4]
 800f424:	f04f 0201 	mov.w	r2, #1
 800f428:	d007      	beq.n	800f43a <forward_sm+0x3e>
 800f42a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800f42e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f432:	42a6      	cmp	r6, r4
 800f434:	fb05 f202 	mul.w	r2, r5, r2
 800f438:	d1f9      	bne.n	800f42e <forward_sm+0x32>
 800f43a:	e9cd 3700 	strd	r3, r7, [sp]
 800f43e:	f7ff fe55 	bl	800f0ec <nl_func_sm_array_f32>
 800f442:	b003      	add	sp, #12
 800f444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	deff      	udf	#255	; 0xff
 800f44a:	2300      	movs	r3, #0
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	deff      	udf	#255	; 0xff
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	deff      	udf	#255	; 0xff

0800f454 <ai_check_custom_types>:
 800f454:	4b13      	ldr	r3, [pc, #76]	; (800f4a4 <ai_check_custom_types+0x50>)
 800f456:	b082      	sub	sp, #8
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	9301      	str	r3, [sp, #4]
 800f45c:	b118      	cbz	r0, 800f466 <ai_check_custom_types+0x12>
 800f45e:	7803      	ldrb	r3, [r0, #0]
 800f460:	2b03      	cmp	r3, #3
 800f462:	d002      	beq.n	800f46a <ai_check_custom_types+0x16>
 800f464:	2000      	movs	r0, #0
 800f466:	b002      	add	sp, #8
 800f468:	4770      	bx	lr
 800f46a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f46e:	4293      	cmp	r3, r2
 800f470:	d004      	beq.n	800f47c <ai_check_custom_types+0x28>
 800f472:	2001      	movs	r0, #1
 800f474:	f080 0001 	eor.w	r0, r0, #1
 800f478:	b002      	add	sp, #8
 800f47a:	4770      	bx	lr
 800f47c:	7842      	ldrb	r2, [r0, #1]
 800f47e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f482:	3001      	adds	r0, #1
 800f484:	429a      	cmp	r2, r3
 800f486:	d1f4      	bne.n	800f472 <ai_check_custom_types+0x1e>
 800f488:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800f48c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f490:	429a      	cmp	r2, r3
 800f492:	d1ee      	bne.n	800f472 <ai_check_custom_types+0x1e>
 800f494:	7842      	ldrb	r2, [r0, #1]
 800f496:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d1e9      	bne.n	800f472 <ai_check_custom_types+0x1e>
 800f49e:	2000      	movs	r0, #0
 800f4a0:	e7e8      	b.n	800f474 <ai_check_custom_types+0x20>
 800f4a2:	bf00      	nop
 800f4a4:	0801438c 	.word	0x0801438c

0800f4a8 <ai_layers_init_all>:
 800f4a8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f4aa:	b17a      	cbz	r2, 800f4cc <ai_layers_init_all+0x24>
 800f4ac:	6913      	ldr	r3, [r2, #16]
 800f4ae:	60d0      	str	r0, [r2, #12]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	f04f 0201 	mov.w	r2, #1
 800f4b6:	d009      	beq.n	800f4cc <ai_layers_init_all+0x24>
 800f4b8:	b143      	cbz	r3, 800f4cc <ai_layers_init_all+0x24>
 800f4ba:	6919      	ldr	r1, [r3, #16]
 800f4bc:	60d8      	str	r0, [r3, #12]
 800f4be:	4299      	cmp	r1, r3
 800f4c0:	f102 0201 	add.w	r2, r2, #1
 800f4c4:	d002      	beq.n	800f4cc <ai_layers_init_all+0x24>
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d1f6      	bne.n	800f4ba <ai_layers_init_all+0x12>
 800f4cc:	4610      	mov	r0, r2
 800f4ce:	4770      	bx	lr

0800f4d0 <ai_layers_post_init_all>:
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800f4d4:	b184      	cbz	r4, 800f4f8 <ai_layers_post_init_all+0x28>
 800f4d6:	2500      	movs	r5, #0
 800f4d8:	6863      	ldr	r3, [r4, #4]
 800f4da:	07db      	lsls	r3, r3, #31
 800f4dc:	d504      	bpl.n	800f4e8 <ai_layers_post_init_all+0x18>
 800f4de:	6a23      	ldr	r3, [r4, #32]
 800f4e0:	b113      	cbz	r3, 800f4e8 <ai_layers_post_init_all+0x18>
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	4798      	blx	r3
 800f4e6:	3501      	adds	r5, #1
 800f4e8:	6923      	ldr	r3, [r4, #16]
 800f4ea:	42a3      	cmp	r3, r4
 800f4ec:	d002      	beq.n	800f4f4 <ai_layers_post_init_all+0x24>
 800f4ee:	461c      	mov	r4, r3
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d1f1      	bne.n	800f4d8 <ai_layers_post_init_all+0x8>
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	bd38      	pop	{r3, r4, r5, pc}
 800f4f8:	4625      	mov	r5, r4
 800f4fa:	e7fb      	b.n	800f4f4 <ai_layers_post_init_all+0x24>

0800f4fc <ai_layers_forward_all>:
 800f4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f500:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800f502:	4604      	mov	r4, r0
 800f504:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800f506:	b31f      	cbz	r7, 800f550 <ai_layers_forward_all+0x54>
 800f508:	b1f5      	cbz	r5, 800f548 <ai_layers_forward_all+0x4c>
 800f50a:	2600      	movs	r6, #0
 800f50c:	6385      	str	r5, [r0, #56]	; 0x38
 800f50e:	4629      	mov	r1, r5
 800f510:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800f512:	2001      	movs	r0, #1
 800f514:	47b8      	blx	r7
 800f516:	46b0      	mov	r8, r6
 800f518:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f51a:	e006      	b.n	800f52a <ai_layers_forward_all+0x2e>
 800f51c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f51e:	63a1      	str	r1, [r4, #56]	; 0x38
 800f520:	2003      	movs	r0, #3
 800f522:	47b8      	blx	r7
 800f524:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f526:	3601      	adds	r6, #1
 800f528:	b179      	cbz	r1, 800f54a <ai_layers_forward_all+0x4e>
 800f52a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f52c:	2002      	movs	r0, #2
 800f52e:	47b8      	blx	r7
 800f530:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800f532:	696b      	ldr	r3, [r5, #20]
 800f534:	4628      	mov	r0, r5
 800f536:	4798      	blx	r3
 800f538:	6929      	ldr	r1, [r5, #16]
 800f53a:	428d      	cmp	r5, r1
 800f53c:	d1ee      	bne.n	800f51c <ai_layers_forward_all+0x20>
 800f53e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800f542:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f544:	2100      	movs	r1, #0
 800f546:	e7eb      	b.n	800f520 <ai_layers_forward_all+0x24>
 800f548:	462e      	mov	r6, r5
 800f54a:	4630      	mov	r0, r6
 800f54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f550:	2d00      	cmp	r5, #0
 800f552:	d0f9      	beq.n	800f548 <ai_layers_forward_all+0x4c>
 800f554:	463e      	mov	r6, r7
 800f556:	6385      	str	r5, [r0, #56]	; 0x38
 800f558:	696b      	ldr	r3, [r5, #20]
 800f55a:	4628      	mov	r0, r5
 800f55c:	4798      	blx	r3
 800f55e:	692b      	ldr	r3, [r5, #16]
 800f560:	3601      	adds	r6, #1
 800f562:	42ab      	cmp	r3, r5
 800f564:	d004      	beq.n	800f570 <ai_layers_forward_all+0x74>
 800f566:	63a3      	str	r3, [r4, #56]	; 0x38
 800f568:	461d      	mov	r5, r3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d1f4      	bne.n	800f558 <ai_layers_forward_all+0x5c>
 800f56e:	e7ec      	b.n	800f54a <ai_layers_forward_all+0x4e>
 800f570:	2300      	movs	r3, #0
 800f572:	63a3      	str	r3, [r4, #56]	; 0x38
 800f574:	4630      	mov	r0, r6
 800f576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f57a:	bf00      	nop

0800f57c <ai_version_get>:
 800f57c:	0212      	lsls	r2, r2, #8
 800f57e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800f582:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800f586:	4770      	bx	lr

0800f588 <get_tensor_byte_size>:
 800f588:	68c1      	ldr	r1, [r0, #12]
 800f58a:	6942      	ldr	r2, [r0, #20]
 800f58c:	6983      	ldr	r3, [r0, #24]
 800f58e:	68c9      	ldr	r1, [r1, #12]
 800f590:	68d0      	ldr	r0, [r2, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	fb00 f001 	mul.w	r0, r0, r1
 800f598:	4a04      	ldr	r2, [pc, #16]	; (800f5ac <get_tensor_byte_size+0x24>)
 800f59a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800f59e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	bf04      	itt	eq
 800f5a6:	3007      	addeq	r0, #7
 800f5a8:	08c0      	lsreq	r0, r0, #3
 800f5aa:	4770      	bx	lr
 800f5ac:	000400c0 	.word	0x000400c0

0800f5b0 <ai_array_to_buffer_fmt>:
 800f5b0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800f5b4:	2b02      	cmp	r3, #2
 800f5b6:	d036      	beq.n	800f626 <ai_array_to_buffer_fmt+0x76>
 800f5b8:	4a21      	ldr	r2, [pc, #132]	; (800f640 <ai_array_to_buffer_fmt+0x90>)
 800f5ba:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d00f      	beq.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f5c2:	dd12      	ble.n	800f5ea <ai_array_to_buffer_fmt+0x3a>
 800f5c4:	4a1f      	ldr	r2, [pc, #124]	; (800f644 <ai_array_to_buffer_fmt+0x94>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d00b      	beq.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f5ca:	dd1e      	ble.n	800f60a <ai_array_to_buffer_fmt+0x5a>
 800f5cc:	4a1e      	ldr	r2, [pc, #120]	; (800f648 <ai_array_to_buffer_fmt+0x98>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d007      	beq.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f5d2:	dd30      	ble.n	800f636 <ai_array_to_buffer_fmt+0x86>
 800f5d4:	4a1d      	ldr	r2, [pc, #116]	; (800f64c <ai_array_to_buffer_fmt+0x9c>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d003      	beq.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f5da:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d11f      	bne.n	800f622 <ai_array_to_buffer_fmt+0x72>
 800f5e2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800f5e6:	4318      	orrs	r0, r3
 800f5e8:	4770      	bx	lr
 800f5ea:	4a19      	ldr	r2, [pc, #100]	; (800f650 <ai_array_to_buffer_fmt+0xa0>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d0f8      	beq.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f5f0:	dd0b      	ble.n	800f60a <ai_array_to_buffer_fmt+0x5a>
 800f5f2:	4a18      	ldr	r2, [pc, #96]	; (800f654 <ai_array_to_buffer_fmt+0xa4>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d0f4      	beq.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f5f8:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d0f0      	beq.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f600:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800f604:	4293      	cmp	r3, r2
 800f606:	d10c      	bne.n	800f622 <ai_array_to_buffer_fmt+0x72>
 800f608:	e7eb      	b.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f60a:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800f60e:	4293      	cmp	r3, r2
 800f610:	d0e7      	beq.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f612:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800f616:	4293      	cmp	r3, r2
 800f618:	d0e3      	beq.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f61a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800f61e:	4293      	cmp	r3, r2
 800f620:	d0df      	beq.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f622:	2340      	movs	r3, #64	; 0x40
 800f624:	e7dd      	b.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f626:	4b0c      	ldr	r3, [pc, #48]	; (800f658 <ai_array_to_buffer_fmt+0xa8>)
 800f628:	4003      	ands	r3, r0
 800f62a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f62e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800f632:	4318      	orrs	r0, r3
 800f634:	4770      	bx	lr
 800f636:	3a0f      	subs	r2, #15
 800f638:	4293      	cmp	r3, r2
 800f63a:	d0d2      	beq.n	800f5e2 <ai_array_to_buffer_fmt+0x32>
 800f63c:	e7f1      	b.n	800f622 <ai_array_to_buffer_fmt+0x72>
 800f63e:	bf00      	nop
 800f640:	00060440 	.word	0x00060440
 800f644:	00840447 	.word	0x00840447
 800f648:	0084084f 	.word	0x0084084f
 800f64c:	00841040 	.word	0x00841040
 800f650:	00040447 	.word	0x00040447
 800f654:	0004084f 	.word	0x0004084f
 800f658:	00803fff 	.word	0x00803fff

0800f65c <ai_array_get_byte_size>:
 800f65c:	b1c1      	cbz	r1, 800f690 <ai_array_get_byte_size+0x34>
 800f65e:	11c3      	asrs	r3, r0, #7
 800f660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f664:	fb01 f102 	mul.w	r1, r1, r2
 800f668:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800f66c:	3107      	adds	r1, #7
 800f66e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800f672:	f021 0107 	bic.w	r1, r1, #7
 800f676:	2804      	cmp	r0, #4
 800f678:	fa21 f102 	lsr.w	r1, r1, r2
 800f67c:	d00a      	beq.n	800f694 <ai_array_get_byte_size+0x38>
 800f67e:	2808      	cmp	r0, #8
 800f680:	d103      	bne.n	800f68a <ai_array_get_byte_size+0x2e>
 800f682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f686:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800f68a:	3107      	adds	r1, #7
 800f68c:	08c8      	lsrs	r0, r1, #3
 800f68e:	4770      	bx	lr
 800f690:	4608      	mov	r0, r1
 800f692:	4770      	bx	lr
 800f694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f698:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800f69c:	3107      	adds	r1, #7
 800f69e:	08c8      	lsrs	r0, r1, #3
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop

0800f6a4 <ai_array_get_data_byte_size>:
 800f6a4:	b161      	cbz	r1, 800f6c0 <ai_array_get_data_byte_size+0x1c>
 800f6a6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800f6aa:	fb01 f103 	mul.w	r1, r1, r3
 800f6ae:	3107      	adds	r1, #7
 800f6b0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800f6b4:	f021 0107 	bic.w	r1, r1, #7
 800f6b8:	40c1      	lsrs	r1, r0
 800f6ba:	3107      	adds	r1, #7
 800f6bc:	08c8      	lsrs	r0, r1, #3
 800f6be:	4770      	bx	lr
 800f6c0:	4608      	mov	r0, r1
 800f6c2:	4770      	bx	lr

0800f6c4 <__errno>:
 800f6c4:	4b01      	ldr	r3, [pc, #4]	; (800f6cc <__errno+0x8>)
 800f6c6:	6818      	ldr	r0, [r3, #0]
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	200007d8 	.word	0x200007d8

0800f6d0 <__libc_init_array>:
 800f6d0:	b570      	push	{r4, r5, r6, lr}
 800f6d2:	4d0d      	ldr	r5, [pc, #52]	; (800f708 <__libc_init_array+0x38>)
 800f6d4:	2600      	movs	r6, #0
 800f6d6:	4c0d      	ldr	r4, [pc, #52]	; (800f70c <__libc_init_array+0x3c>)
 800f6d8:	1b64      	subs	r4, r4, r5
 800f6da:	10a4      	asrs	r4, r4, #2
 800f6dc:	42a6      	cmp	r6, r4
 800f6de:	d109      	bne.n	800f6f4 <__libc_init_array+0x24>
 800f6e0:	4d0b      	ldr	r5, [pc, #44]	; (800f710 <__libc_init_array+0x40>)
 800f6e2:	2600      	movs	r6, #0
 800f6e4:	4c0b      	ldr	r4, [pc, #44]	; (800f714 <__libc_init_array+0x44>)
 800f6e6:	f004 fe13 	bl	8014310 <_init>
 800f6ea:	1b64      	subs	r4, r4, r5
 800f6ec:	10a4      	asrs	r4, r4, #2
 800f6ee:	42a6      	cmp	r6, r4
 800f6f0:	d105      	bne.n	800f6fe <__libc_init_array+0x2e>
 800f6f2:	bd70      	pop	{r4, r5, r6, pc}
 800f6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6f8:	3601      	adds	r6, #1
 800f6fa:	4798      	blx	r3
 800f6fc:	e7ee      	b.n	800f6dc <__libc_init_array+0xc>
 800f6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f702:	3601      	adds	r6, #1
 800f704:	4798      	blx	r3
 800f706:	e7f2      	b.n	800f6ee <__libc_init_array+0x1e>
 800f708:	080696c4 	.word	0x080696c4
 800f70c:	080696c4 	.word	0x080696c4
 800f710:	080696c4 	.word	0x080696c4
 800f714:	080696c8 	.word	0x080696c8

0800f718 <malloc>:
 800f718:	4b02      	ldr	r3, [pc, #8]	; (800f724 <malloc+0xc>)
 800f71a:	4601      	mov	r1, r0
 800f71c:	6818      	ldr	r0, [r3, #0]
 800f71e:	f000 b885 	b.w	800f82c <_malloc_r>
 800f722:	bf00      	nop
 800f724:	200007d8 	.word	0x200007d8

0800f728 <memcpy>:
 800f728:	440a      	add	r2, r1
 800f72a:	1e43      	subs	r3, r0, #1
 800f72c:	4291      	cmp	r1, r2
 800f72e:	d100      	bne.n	800f732 <memcpy+0xa>
 800f730:	4770      	bx	lr
 800f732:	b510      	push	{r4, lr}
 800f734:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f738:	4291      	cmp	r1, r2
 800f73a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f73e:	d1f9      	bne.n	800f734 <memcpy+0xc>
 800f740:	bd10      	pop	{r4, pc}

0800f742 <memset>:
 800f742:	4402      	add	r2, r0
 800f744:	4603      	mov	r3, r0
 800f746:	4293      	cmp	r3, r2
 800f748:	d100      	bne.n	800f74c <memset+0xa>
 800f74a:	4770      	bx	lr
 800f74c:	f803 1b01 	strb.w	r1, [r3], #1
 800f750:	e7f9      	b.n	800f746 <memset+0x4>
	...

0800f754 <_free_r>:
 800f754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f756:	2900      	cmp	r1, #0
 800f758:	d043      	beq.n	800f7e2 <_free_r+0x8e>
 800f75a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f75e:	1f0c      	subs	r4, r1, #4
 800f760:	9001      	str	r0, [sp, #4]
 800f762:	2b00      	cmp	r3, #0
 800f764:	bfb8      	it	lt
 800f766:	18e4      	addlt	r4, r4, r3
 800f768:	f003 f956 	bl	8012a18 <__malloc_lock>
 800f76c:	4a1e      	ldr	r2, [pc, #120]	; (800f7e8 <_free_r+0x94>)
 800f76e:	9801      	ldr	r0, [sp, #4]
 800f770:	6813      	ldr	r3, [r2, #0]
 800f772:	b933      	cbnz	r3, 800f782 <_free_r+0x2e>
 800f774:	6063      	str	r3, [r4, #4]
 800f776:	6014      	str	r4, [r2, #0]
 800f778:	b003      	add	sp, #12
 800f77a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f77e:	f003 b951 	b.w	8012a24 <__malloc_unlock>
 800f782:	42a3      	cmp	r3, r4
 800f784:	d908      	bls.n	800f798 <_free_r+0x44>
 800f786:	6825      	ldr	r5, [r4, #0]
 800f788:	1961      	adds	r1, r4, r5
 800f78a:	428b      	cmp	r3, r1
 800f78c:	bf01      	itttt	eq
 800f78e:	6819      	ldreq	r1, [r3, #0]
 800f790:	685b      	ldreq	r3, [r3, #4]
 800f792:	1949      	addeq	r1, r1, r5
 800f794:	6021      	streq	r1, [r4, #0]
 800f796:	e7ed      	b.n	800f774 <_free_r+0x20>
 800f798:	461a      	mov	r2, r3
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	b10b      	cbz	r3, 800f7a2 <_free_r+0x4e>
 800f79e:	42a3      	cmp	r3, r4
 800f7a0:	d9fa      	bls.n	800f798 <_free_r+0x44>
 800f7a2:	6811      	ldr	r1, [r2, #0]
 800f7a4:	1855      	adds	r5, r2, r1
 800f7a6:	42a5      	cmp	r5, r4
 800f7a8:	d10b      	bne.n	800f7c2 <_free_r+0x6e>
 800f7aa:	6824      	ldr	r4, [r4, #0]
 800f7ac:	4421      	add	r1, r4
 800f7ae:	1854      	adds	r4, r2, r1
 800f7b0:	6011      	str	r1, [r2, #0]
 800f7b2:	42a3      	cmp	r3, r4
 800f7b4:	d1e0      	bne.n	800f778 <_free_r+0x24>
 800f7b6:	681c      	ldr	r4, [r3, #0]
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	4421      	add	r1, r4
 800f7bc:	6053      	str	r3, [r2, #4]
 800f7be:	6011      	str	r1, [r2, #0]
 800f7c0:	e7da      	b.n	800f778 <_free_r+0x24>
 800f7c2:	d902      	bls.n	800f7ca <_free_r+0x76>
 800f7c4:	230c      	movs	r3, #12
 800f7c6:	6003      	str	r3, [r0, #0]
 800f7c8:	e7d6      	b.n	800f778 <_free_r+0x24>
 800f7ca:	6825      	ldr	r5, [r4, #0]
 800f7cc:	1961      	adds	r1, r4, r5
 800f7ce:	428b      	cmp	r3, r1
 800f7d0:	bf02      	ittt	eq
 800f7d2:	6819      	ldreq	r1, [r3, #0]
 800f7d4:	685b      	ldreq	r3, [r3, #4]
 800f7d6:	1949      	addeq	r1, r1, r5
 800f7d8:	6063      	str	r3, [r4, #4]
 800f7da:	bf08      	it	eq
 800f7dc:	6021      	streq	r1, [r4, #0]
 800f7de:	6054      	str	r4, [r2, #4]
 800f7e0:	e7ca      	b.n	800f778 <_free_r+0x24>
 800f7e2:	b003      	add	sp, #12
 800f7e4:	bd30      	pop	{r4, r5, pc}
 800f7e6:	bf00      	nop
 800f7e8:	20001ee8 	.word	0x20001ee8

0800f7ec <sbrk_aligned>:
 800f7ec:	b570      	push	{r4, r5, r6, lr}
 800f7ee:	4e0e      	ldr	r6, [pc, #56]	; (800f828 <sbrk_aligned+0x3c>)
 800f7f0:	460c      	mov	r4, r1
 800f7f2:	4605      	mov	r5, r0
 800f7f4:	6831      	ldr	r1, [r6, #0]
 800f7f6:	b911      	cbnz	r1, 800f7fe <sbrk_aligned+0x12>
 800f7f8:	f000 ff22 	bl	8010640 <_sbrk_r>
 800f7fc:	6030      	str	r0, [r6, #0]
 800f7fe:	4621      	mov	r1, r4
 800f800:	4628      	mov	r0, r5
 800f802:	f000 ff1d 	bl	8010640 <_sbrk_r>
 800f806:	1c43      	adds	r3, r0, #1
 800f808:	d00a      	beq.n	800f820 <sbrk_aligned+0x34>
 800f80a:	1cc4      	adds	r4, r0, #3
 800f80c:	f024 0403 	bic.w	r4, r4, #3
 800f810:	42a0      	cmp	r0, r4
 800f812:	d007      	beq.n	800f824 <sbrk_aligned+0x38>
 800f814:	1a21      	subs	r1, r4, r0
 800f816:	4628      	mov	r0, r5
 800f818:	f000 ff12 	bl	8010640 <_sbrk_r>
 800f81c:	3001      	adds	r0, #1
 800f81e:	d101      	bne.n	800f824 <sbrk_aligned+0x38>
 800f820:	f04f 34ff 	mov.w	r4, #4294967295
 800f824:	4620      	mov	r0, r4
 800f826:	bd70      	pop	{r4, r5, r6, pc}
 800f828:	20001eec 	.word	0x20001eec

0800f82c <_malloc_r>:
 800f82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f830:	1ccd      	adds	r5, r1, #3
 800f832:	4607      	mov	r7, r0
 800f834:	f025 0503 	bic.w	r5, r5, #3
 800f838:	3508      	adds	r5, #8
 800f83a:	2d0c      	cmp	r5, #12
 800f83c:	bf38      	it	cc
 800f83e:	250c      	movcc	r5, #12
 800f840:	2d00      	cmp	r5, #0
 800f842:	db01      	blt.n	800f848 <_malloc_r+0x1c>
 800f844:	42a9      	cmp	r1, r5
 800f846:	d905      	bls.n	800f854 <_malloc_r+0x28>
 800f848:	230c      	movs	r3, #12
 800f84a:	2600      	movs	r6, #0
 800f84c:	603b      	str	r3, [r7, #0]
 800f84e:	4630      	mov	r0, r6
 800f850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f854:	4e2e      	ldr	r6, [pc, #184]	; (800f910 <_malloc_r+0xe4>)
 800f856:	f003 f8df 	bl	8012a18 <__malloc_lock>
 800f85a:	6833      	ldr	r3, [r6, #0]
 800f85c:	461c      	mov	r4, r3
 800f85e:	bb34      	cbnz	r4, 800f8ae <_malloc_r+0x82>
 800f860:	4629      	mov	r1, r5
 800f862:	4638      	mov	r0, r7
 800f864:	f7ff ffc2 	bl	800f7ec <sbrk_aligned>
 800f868:	1c43      	adds	r3, r0, #1
 800f86a:	4604      	mov	r4, r0
 800f86c:	d14d      	bne.n	800f90a <_malloc_r+0xde>
 800f86e:	6834      	ldr	r4, [r6, #0]
 800f870:	4626      	mov	r6, r4
 800f872:	2e00      	cmp	r6, #0
 800f874:	d140      	bne.n	800f8f8 <_malloc_r+0xcc>
 800f876:	6823      	ldr	r3, [r4, #0]
 800f878:	4631      	mov	r1, r6
 800f87a:	4638      	mov	r0, r7
 800f87c:	eb04 0803 	add.w	r8, r4, r3
 800f880:	f000 fede 	bl	8010640 <_sbrk_r>
 800f884:	4580      	cmp	r8, r0
 800f886:	d13a      	bne.n	800f8fe <_malloc_r+0xd2>
 800f888:	6821      	ldr	r1, [r4, #0]
 800f88a:	3503      	adds	r5, #3
 800f88c:	4638      	mov	r0, r7
 800f88e:	1a6d      	subs	r5, r5, r1
 800f890:	f025 0503 	bic.w	r5, r5, #3
 800f894:	3508      	adds	r5, #8
 800f896:	2d0c      	cmp	r5, #12
 800f898:	bf38      	it	cc
 800f89a:	250c      	movcc	r5, #12
 800f89c:	4629      	mov	r1, r5
 800f89e:	f7ff ffa5 	bl	800f7ec <sbrk_aligned>
 800f8a2:	3001      	adds	r0, #1
 800f8a4:	d02b      	beq.n	800f8fe <_malloc_r+0xd2>
 800f8a6:	6823      	ldr	r3, [r4, #0]
 800f8a8:	442b      	add	r3, r5
 800f8aa:	6023      	str	r3, [r4, #0]
 800f8ac:	e00e      	b.n	800f8cc <_malloc_r+0xa0>
 800f8ae:	6822      	ldr	r2, [r4, #0]
 800f8b0:	1b52      	subs	r2, r2, r5
 800f8b2:	d41e      	bmi.n	800f8f2 <_malloc_r+0xc6>
 800f8b4:	2a0b      	cmp	r2, #11
 800f8b6:	d916      	bls.n	800f8e6 <_malloc_r+0xba>
 800f8b8:	1961      	adds	r1, r4, r5
 800f8ba:	42a3      	cmp	r3, r4
 800f8bc:	6025      	str	r5, [r4, #0]
 800f8be:	bf18      	it	ne
 800f8c0:	6059      	strne	r1, [r3, #4]
 800f8c2:	6863      	ldr	r3, [r4, #4]
 800f8c4:	bf08      	it	eq
 800f8c6:	6031      	streq	r1, [r6, #0]
 800f8c8:	5162      	str	r2, [r4, r5]
 800f8ca:	604b      	str	r3, [r1, #4]
 800f8cc:	f104 060b 	add.w	r6, r4, #11
 800f8d0:	4638      	mov	r0, r7
 800f8d2:	f003 f8a7 	bl	8012a24 <__malloc_unlock>
 800f8d6:	1d23      	adds	r3, r4, #4
 800f8d8:	f026 0607 	bic.w	r6, r6, #7
 800f8dc:	1af2      	subs	r2, r6, r3
 800f8de:	d0b6      	beq.n	800f84e <_malloc_r+0x22>
 800f8e0:	1b9b      	subs	r3, r3, r6
 800f8e2:	50a3      	str	r3, [r4, r2]
 800f8e4:	e7b3      	b.n	800f84e <_malloc_r+0x22>
 800f8e6:	6862      	ldr	r2, [r4, #4]
 800f8e8:	42a3      	cmp	r3, r4
 800f8ea:	bf0c      	ite	eq
 800f8ec:	6032      	streq	r2, [r6, #0]
 800f8ee:	605a      	strne	r2, [r3, #4]
 800f8f0:	e7ec      	b.n	800f8cc <_malloc_r+0xa0>
 800f8f2:	4623      	mov	r3, r4
 800f8f4:	6864      	ldr	r4, [r4, #4]
 800f8f6:	e7b2      	b.n	800f85e <_malloc_r+0x32>
 800f8f8:	4634      	mov	r4, r6
 800f8fa:	6876      	ldr	r6, [r6, #4]
 800f8fc:	e7b9      	b.n	800f872 <_malloc_r+0x46>
 800f8fe:	230c      	movs	r3, #12
 800f900:	4638      	mov	r0, r7
 800f902:	603b      	str	r3, [r7, #0]
 800f904:	f003 f88e 	bl	8012a24 <__malloc_unlock>
 800f908:	e7a1      	b.n	800f84e <_malloc_r+0x22>
 800f90a:	6025      	str	r5, [r4, #0]
 800f90c:	e7de      	b.n	800f8cc <_malloc_r+0xa0>
 800f90e:	bf00      	nop
 800f910:	20001ee8 	.word	0x20001ee8

0800f914 <__cvt>:
 800f914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f918:	ec55 4b10 	vmov	r4, r5, d0
 800f91c:	2d00      	cmp	r5, #0
 800f91e:	460e      	mov	r6, r1
 800f920:	4619      	mov	r1, r3
 800f922:	462b      	mov	r3, r5
 800f924:	bfb4      	ite	lt
 800f926:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f92a:	2300      	movge	r3, #0
 800f92c:	4691      	mov	r9, r2
 800f92e:	bfbf      	itttt	lt
 800f930:	4622      	movlt	r2, r4
 800f932:	461d      	movlt	r5, r3
 800f934:	232d      	movlt	r3, #45	; 0x2d
 800f936:	4614      	movlt	r4, r2
 800f938:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f93c:	700b      	strb	r3, [r1, #0]
 800f93e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f940:	f023 0820 	bic.w	r8, r3, #32
 800f944:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f948:	d005      	beq.n	800f956 <__cvt+0x42>
 800f94a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f94e:	d100      	bne.n	800f952 <__cvt+0x3e>
 800f950:	3601      	adds	r6, #1
 800f952:	2102      	movs	r1, #2
 800f954:	e000      	b.n	800f958 <__cvt+0x44>
 800f956:	2103      	movs	r1, #3
 800f958:	ab03      	add	r3, sp, #12
 800f95a:	4632      	mov	r2, r6
 800f95c:	9301      	str	r3, [sp, #4]
 800f95e:	ab02      	add	r3, sp, #8
 800f960:	ec45 4b10 	vmov	d0, r4, r5
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	4653      	mov	r3, sl
 800f968:	f001 fdde 	bl	8011528 <_dtoa_r>
 800f96c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f970:	4607      	mov	r7, r0
 800f972:	d102      	bne.n	800f97a <__cvt+0x66>
 800f974:	f019 0f01 	tst.w	r9, #1
 800f978:	d022      	beq.n	800f9c0 <__cvt+0xac>
 800f97a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f97e:	eb07 0906 	add.w	r9, r7, r6
 800f982:	d110      	bne.n	800f9a6 <__cvt+0x92>
 800f984:	783b      	ldrb	r3, [r7, #0]
 800f986:	2b30      	cmp	r3, #48	; 0x30
 800f988:	d10a      	bne.n	800f9a0 <__cvt+0x8c>
 800f98a:	2200      	movs	r2, #0
 800f98c:	2300      	movs	r3, #0
 800f98e:	4620      	mov	r0, r4
 800f990:	4629      	mov	r1, r5
 800f992:	f7f1 f89d 	bl	8000ad0 <__aeabi_dcmpeq>
 800f996:	b918      	cbnz	r0, 800f9a0 <__cvt+0x8c>
 800f998:	f1c6 0601 	rsb	r6, r6, #1
 800f99c:	f8ca 6000 	str.w	r6, [sl]
 800f9a0:	f8da 3000 	ldr.w	r3, [sl]
 800f9a4:	4499      	add	r9, r3
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	4629      	mov	r1, r5
 800f9ae:	f7f1 f88f 	bl	8000ad0 <__aeabi_dcmpeq>
 800f9b2:	b108      	cbz	r0, 800f9b8 <__cvt+0xa4>
 800f9b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800f9b8:	2230      	movs	r2, #48	; 0x30
 800f9ba:	9b03      	ldr	r3, [sp, #12]
 800f9bc:	454b      	cmp	r3, r9
 800f9be:	d307      	bcc.n	800f9d0 <__cvt+0xbc>
 800f9c0:	9b03      	ldr	r3, [sp, #12]
 800f9c2:	4638      	mov	r0, r7
 800f9c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f9c6:	1bdb      	subs	r3, r3, r7
 800f9c8:	6013      	str	r3, [r2, #0]
 800f9ca:	b004      	add	sp, #16
 800f9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9d0:	1c59      	adds	r1, r3, #1
 800f9d2:	9103      	str	r1, [sp, #12]
 800f9d4:	701a      	strb	r2, [r3, #0]
 800f9d6:	e7f0      	b.n	800f9ba <__cvt+0xa6>

0800f9d8 <__exponent>:
 800f9d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9da:	2900      	cmp	r1, #0
 800f9dc:	4603      	mov	r3, r0
 800f9de:	bfb8      	it	lt
 800f9e0:	4249      	neglt	r1, r1
 800f9e2:	f803 2b02 	strb.w	r2, [r3], #2
 800f9e6:	bfb4      	ite	lt
 800f9e8:	222d      	movlt	r2, #45	; 0x2d
 800f9ea:	222b      	movge	r2, #43	; 0x2b
 800f9ec:	2909      	cmp	r1, #9
 800f9ee:	7042      	strb	r2, [r0, #1]
 800f9f0:	dd2a      	ble.n	800fa48 <__exponent+0x70>
 800f9f2:	f10d 0407 	add.w	r4, sp, #7
 800f9f6:	270a      	movs	r7, #10
 800f9f8:	46a4      	mov	ip, r4
 800f9fa:	460a      	mov	r2, r1
 800f9fc:	46a6      	mov	lr, r4
 800f9fe:	3c01      	subs	r4, #1
 800fa00:	2a63      	cmp	r2, #99	; 0x63
 800fa02:	fb91 f6f7 	sdiv	r6, r1, r7
 800fa06:	fb07 1516 	mls	r5, r7, r6, r1
 800fa0a:	4631      	mov	r1, r6
 800fa0c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800fa10:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fa14:	dcf1      	bgt.n	800f9fa <__exponent+0x22>
 800fa16:	3130      	adds	r1, #48	; 0x30
 800fa18:	f1ae 0502 	sub.w	r5, lr, #2
 800fa1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fa20:	1c44      	adds	r4, r0, #1
 800fa22:	4629      	mov	r1, r5
 800fa24:	4561      	cmp	r1, ip
 800fa26:	d30a      	bcc.n	800fa3e <__exponent+0x66>
 800fa28:	f10d 0209 	add.w	r2, sp, #9
 800fa2c:	eba2 020e 	sub.w	r2, r2, lr
 800fa30:	4565      	cmp	r5, ip
 800fa32:	bf88      	it	hi
 800fa34:	2200      	movhi	r2, #0
 800fa36:	4413      	add	r3, r2
 800fa38:	1a18      	subs	r0, r3, r0
 800fa3a:	b003      	add	sp, #12
 800fa3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa42:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fa46:	e7ed      	b.n	800fa24 <__exponent+0x4c>
 800fa48:	2330      	movs	r3, #48	; 0x30
 800fa4a:	3130      	adds	r1, #48	; 0x30
 800fa4c:	7083      	strb	r3, [r0, #2]
 800fa4e:	1d03      	adds	r3, r0, #4
 800fa50:	70c1      	strb	r1, [r0, #3]
 800fa52:	e7f1      	b.n	800fa38 <__exponent+0x60>

0800fa54 <_printf_float>:
 800fa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa58:	ed2d 8b02 	vpush	{d8}
 800fa5c:	b08d      	sub	sp, #52	; 0x34
 800fa5e:	460c      	mov	r4, r1
 800fa60:	4616      	mov	r6, r2
 800fa62:	461f      	mov	r7, r3
 800fa64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fa68:	4605      	mov	r5, r0
 800fa6a:	f002 ffad 	bl	80129c8 <_localeconv_r>
 800fa6e:	f8d0 a000 	ldr.w	sl, [r0]
 800fa72:	4650      	mov	r0, sl
 800fa74:	f7f0 fc00 	bl	8000278 <strlen>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fa7e:	ee08 0a10 	vmov	s16, r0
 800fa82:	930a      	str	r3, [sp, #40]	; 0x28
 800fa84:	6823      	ldr	r3, [r4, #0]
 800fa86:	9305      	str	r3, [sp, #20]
 800fa88:	f8d8 3000 	ldr.w	r3, [r8]
 800fa8c:	3307      	adds	r3, #7
 800fa8e:	f023 0307 	bic.w	r3, r3, #7
 800fa92:	f103 0208 	add.w	r2, r3, #8
 800fa96:	f8c8 2000 	str.w	r2, [r8]
 800fa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800faa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800faa6:	f04f 32ff 	mov.w	r2, #4294967295
 800faaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800faae:	f8cd 8018 	str.w	r8, [sp, #24]
 800fab2:	9307      	str	r3, [sp, #28]
 800fab4:	4b9e      	ldr	r3, [pc, #632]	; (800fd30 <_printf_float+0x2dc>)
 800fab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800faba:	f7f1 f83b 	bl	8000b34 <__aeabi_dcmpun>
 800fabe:	bb88      	cbnz	r0, 800fb24 <_printf_float+0xd0>
 800fac0:	f04f 32ff 	mov.w	r2, #4294967295
 800fac4:	4b9a      	ldr	r3, [pc, #616]	; (800fd30 <_printf_float+0x2dc>)
 800fac6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800faca:	f7f1 f815 	bl	8000af8 <__aeabi_dcmple>
 800face:	bb48      	cbnz	r0, 800fb24 <_printf_float+0xd0>
 800fad0:	2200      	movs	r2, #0
 800fad2:	2300      	movs	r3, #0
 800fad4:	4640      	mov	r0, r8
 800fad6:	4649      	mov	r1, r9
 800fad8:	f7f1 f804 	bl	8000ae4 <__aeabi_dcmplt>
 800fadc:	b110      	cbz	r0, 800fae4 <_printf_float+0x90>
 800fade:	232d      	movs	r3, #45	; 0x2d
 800fae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fae4:	4b93      	ldr	r3, [pc, #588]	; (800fd34 <_printf_float+0x2e0>)
 800fae6:	4894      	ldr	r0, [pc, #592]	; (800fd38 <_printf_float+0x2e4>)
 800fae8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800faec:	bf94      	ite	ls
 800faee:	4698      	movls	r8, r3
 800faf0:	4680      	movhi	r8, r0
 800faf2:	2303      	movs	r3, #3
 800faf4:	f04f 0900 	mov.w	r9, #0
 800faf8:	6123      	str	r3, [r4, #16]
 800fafa:	9b05      	ldr	r3, [sp, #20]
 800fafc:	f023 0204 	bic.w	r2, r3, #4
 800fb00:	6022      	str	r2, [r4, #0]
 800fb02:	4633      	mov	r3, r6
 800fb04:	aa0b      	add	r2, sp, #44	; 0x2c
 800fb06:	4621      	mov	r1, r4
 800fb08:	4628      	mov	r0, r5
 800fb0a:	9700      	str	r7, [sp, #0]
 800fb0c:	f000 f9d8 	bl	800fec0 <_printf_common>
 800fb10:	3001      	adds	r0, #1
 800fb12:	f040 8090 	bne.w	800fc36 <_printf_float+0x1e2>
 800fb16:	f04f 30ff 	mov.w	r0, #4294967295
 800fb1a:	b00d      	add	sp, #52	; 0x34
 800fb1c:	ecbd 8b02 	vpop	{d8}
 800fb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb24:	4642      	mov	r2, r8
 800fb26:	464b      	mov	r3, r9
 800fb28:	4640      	mov	r0, r8
 800fb2a:	4649      	mov	r1, r9
 800fb2c:	f7f1 f802 	bl	8000b34 <__aeabi_dcmpun>
 800fb30:	b140      	cbz	r0, 800fb44 <_printf_float+0xf0>
 800fb32:	464b      	mov	r3, r9
 800fb34:	4881      	ldr	r0, [pc, #516]	; (800fd3c <_printf_float+0x2e8>)
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	bfbc      	itt	lt
 800fb3a:	232d      	movlt	r3, #45	; 0x2d
 800fb3c:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fb40:	4b7f      	ldr	r3, [pc, #508]	; (800fd40 <_printf_float+0x2ec>)
 800fb42:	e7d1      	b.n	800fae8 <_printf_float+0x94>
 800fb44:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fb48:	6863      	ldr	r3, [r4, #4]
 800fb4a:	9206      	str	r2, [sp, #24]
 800fb4c:	1c5a      	adds	r2, r3, #1
 800fb4e:	d13f      	bne.n	800fbd0 <_printf_float+0x17c>
 800fb50:	2306      	movs	r3, #6
 800fb52:	6063      	str	r3, [r4, #4]
 800fb54:	9b05      	ldr	r3, [sp, #20]
 800fb56:	4628      	mov	r0, r5
 800fb58:	6861      	ldr	r1, [r4, #4]
 800fb5a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fb5e:	2300      	movs	r3, #0
 800fb60:	9303      	str	r3, [sp, #12]
 800fb62:	ab0a      	add	r3, sp, #40	; 0x28
 800fb64:	6022      	str	r2, [r4, #0]
 800fb66:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fb6a:	ab09      	add	r3, sp, #36	; 0x24
 800fb6c:	ec49 8b10 	vmov	d0, r8, r9
 800fb70:	9300      	str	r3, [sp, #0]
 800fb72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fb76:	f7ff fecd 	bl	800f914 <__cvt>
 800fb7a:	9b06      	ldr	r3, [sp, #24]
 800fb7c:	4680      	mov	r8, r0
 800fb7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb80:	2b47      	cmp	r3, #71	; 0x47
 800fb82:	d108      	bne.n	800fb96 <_printf_float+0x142>
 800fb84:	1cc8      	adds	r0, r1, #3
 800fb86:	db02      	blt.n	800fb8e <_printf_float+0x13a>
 800fb88:	6863      	ldr	r3, [r4, #4]
 800fb8a:	4299      	cmp	r1, r3
 800fb8c:	dd41      	ble.n	800fc12 <_printf_float+0x1be>
 800fb8e:	f1ab 0b02 	sub.w	fp, fp, #2
 800fb92:	fa5f fb8b 	uxtb.w	fp, fp
 800fb96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fb9a:	d820      	bhi.n	800fbde <_printf_float+0x18a>
 800fb9c:	3901      	subs	r1, #1
 800fb9e:	465a      	mov	r2, fp
 800fba0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fba4:	9109      	str	r1, [sp, #36]	; 0x24
 800fba6:	f7ff ff17 	bl	800f9d8 <__exponent>
 800fbaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbac:	4681      	mov	r9, r0
 800fbae:	1813      	adds	r3, r2, r0
 800fbb0:	2a01      	cmp	r2, #1
 800fbb2:	6123      	str	r3, [r4, #16]
 800fbb4:	dc02      	bgt.n	800fbbc <_printf_float+0x168>
 800fbb6:	6822      	ldr	r2, [r4, #0]
 800fbb8:	07d2      	lsls	r2, r2, #31
 800fbba:	d501      	bpl.n	800fbc0 <_printf_float+0x16c>
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	6123      	str	r3, [r4, #16]
 800fbc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d09c      	beq.n	800fb02 <_printf_float+0xae>
 800fbc8:	232d      	movs	r3, #45	; 0x2d
 800fbca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbce:	e798      	b.n	800fb02 <_printf_float+0xae>
 800fbd0:	9a06      	ldr	r2, [sp, #24]
 800fbd2:	2a47      	cmp	r2, #71	; 0x47
 800fbd4:	d1be      	bne.n	800fb54 <_printf_float+0x100>
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d1bc      	bne.n	800fb54 <_printf_float+0x100>
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e7b9      	b.n	800fb52 <_printf_float+0xfe>
 800fbde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fbe2:	d118      	bne.n	800fc16 <_printf_float+0x1c2>
 800fbe4:	2900      	cmp	r1, #0
 800fbe6:	6863      	ldr	r3, [r4, #4]
 800fbe8:	dd0b      	ble.n	800fc02 <_printf_float+0x1ae>
 800fbea:	6121      	str	r1, [r4, #16]
 800fbec:	b913      	cbnz	r3, 800fbf4 <_printf_float+0x1a0>
 800fbee:	6822      	ldr	r2, [r4, #0]
 800fbf0:	07d0      	lsls	r0, r2, #31
 800fbf2:	d502      	bpl.n	800fbfa <_printf_float+0x1a6>
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	440b      	add	r3, r1
 800fbf8:	6123      	str	r3, [r4, #16]
 800fbfa:	f04f 0900 	mov.w	r9, #0
 800fbfe:	65a1      	str	r1, [r4, #88]	; 0x58
 800fc00:	e7de      	b.n	800fbc0 <_printf_float+0x16c>
 800fc02:	b913      	cbnz	r3, 800fc0a <_printf_float+0x1b6>
 800fc04:	6822      	ldr	r2, [r4, #0]
 800fc06:	07d2      	lsls	r2, r2, #31
 800fc08:	d501      	bpl.n	800fc0e <_printf_float+0x1ba>
 800fc0a:	3302      	adds	r3, #2
 800fc0c:	e7f4      	b.n	800fbf8 <_printf_float+0x1a4>
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e7f2      	b.n	800fbf8 <_printf_float+0x1a4>
 800fc12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fc16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc18:	4299      	cmp	r1, r3
 800fc1a:	db05      	blt.n	800fc28 <_printf_float+0x1d4>
 800fc1c:	6823      	ldr	r3, [r4, #0]
 800fc1e:	6121      	str	r1, [r4, #16]
 800fc20:	07d8      	lsls	r0, r3, #31
 800fc22:	d5ea      	bpl.n	800fbfa <_printf_float+0x1a6>
 800fc24:	1c4b      	adds	r3, r1, #1
 800fc26:	e7e7      	b.n	800fbf8 <_printf_float+0x1a4>
 800fc28:	2900      	cmp	r1, #0
 800fc2a:	bfd4      	ite	le
 800fc2c:	f1c1 0202 	rsble	r2, r1, #2
 800fc30:	2201      	movgt	r2, #1
 800fc32:	4413      	add	r3, r2
 800fc34:	e7e0      	b.n	800fbf8 <_printf_float+0x1a4>
 800fc36:	6823      	ldr	r3, [r4, #0]
 800fc38:	055a      	lsls	r2, r3, #21
 800fc3a:	d407      	bmi.n	800fc4c <_printf_float+0x1f8>
 800fc3c:	6923      	ldr	r3, [r4, #16]
 800fc3e:	4642      	mov	r2, r8
 800fc40:	4631      	mov	r1, r6
 800fc42:	4628      	mov	r0, r5
 800fc44:	47b8      	blx	r7
 800fc46:	3001      	adds	r0, #1
 800fc48:	d12c      	bne.n	800fca4 <_printf_float+0x250>
 800fc4a:	e764      	b.n	800fb16 <_printf_float+0xc2>
 800fc4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fc50:	f240 80e0 	bls.w	800fe14 <_printf_float+0x3c0>
 800fc54:	2200      	movs	r2, #0
 800fc56:	2300      	movs	r3, #0
 800fc58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fc5c:	f7f0 ff38 	bl	8000ad0 <__aeabi_dcmpeq>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d034      	beq.n	800fcce <_printf_float+0x27a>
 800fc64:	2301      	movs	r3, #1
 800fc66:	4a37      	ldr	r2, [pc, #220]	; (800fd44 <_printf_float+0x2f0>)
 800fc68:	4631      	mov	r1, r6
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	47b8      	blx	r7
 800fc6e:	3001      	adds	r0, #1
 800fc70:	f43f af51 	beq.w	800fb16 <_printf_float+0xc2>
 800fc74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	db02      	blt.n	800fc82 <_printf_float+0x22e>
 800fc7c:	6823      	ldr	r3, [r4, #0]
 800fc7e:	07d8      	lsls	r0, r3, #31
 800fc80:	d510      	bpl.n	800fca4 <_printf_float+0x250>
 800fc82:	ee18 3a10 	vmov	r3, s16
 800fc86:	4652      	mov	r2, sl
 800fc88:	4631      	mov	r1, r6
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	47b8      	blx	r7
 800fc8e:	3001      	adds	r0, #1
 800fc90:	f43f af41 	beq.w	800fb16 <_printf_float+0xc2>
 800fc94:	f04f 0800 	mov.w	r8, #0
 800fc98:	f104 091a 	add.w	r9, r4, #26
 800fc9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc9e:	3b01      	subs	r3, #1
 800fca0:	4543      	cmp	r3, r8
 800fca2:	dc09      	bgt.n	800fcb8 <_printf_float+0x264>
 800fca4:	6823      	ldr	r3, [r4, #0]
 800fca6:	079b      	lsls	r3, r3, #30
 800fca8:	f100 8105 	bmi.w	800feb6 <_printf_float+0x462>
 800fcac:	68e0      	ldr	r0, [r4, #12]
 800fcae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcb0:	4298      	cmp	r0, r3
 800fcb2:	bfb8      	it	lt
 800fcb4:	4618      	movlt	r0, r3
 800fcb6:	e730      	b.n	800fb1a <_printf_float+0xc6>
 800fcb8:	2301      	movs	r3, #1
 800fcba:	464a      	mov	r2, r9
 800fcbc:	4631      	mov	r1, r6
 800fcbe:	4628      	mov	r0, r5
 800fcc0:	47b8      	blx	r7
 800fcc2:	3001      	adds	r0, #1
 800fcc4:	f43f af27 	beq.w	800fb16 <_printf_float+0xc2>
 800fcc8:	f108 0801 	add.w	r8, r8, #1
 800fccc:	e7e6      	b.n	800fc9c <_printf_float+0x248>
 800fcce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	dc39      	bgt.n	800fd48 <_printf_float+0x2f4>
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	4a1b      	ldr	r2, [pc, #108]	; (800fd44 <_printf_float+0x2f0>)
 800fcd8:	4631      	mov	r1, r6
 800fcda:	4628      	mov	r0, r5
 800fcdc:	47b8      	blx	r7
 800fcde:	3001      	adds	r0, #1
 800fce0:	f43f af19 	beq.w	800fb16 <_printf_float+0xc2>
 800fce4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fce8:	4313      	orrs	r3, r2
 800fcea:	d102      	bne.n	800fcf2 <_printf_float+0x29e>
 800fcec:	6823      	ldr	r3, [r4, #0]
 800fcee:	07d9      	lsls	r1, r3, #31
 800fcf0:	d5d8      	bpl.n	800fca4 <_printf_float+0x250>
 800fcf2:	ee18 3a10 	vmov	r3, s16
 800fcf6:	4652      	mov	r2, sl
 800fcf8:	4631      	mov	r1, r6
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	47b8      	blx	r7
 800fcfe:	3001      	adds	r0, #1
 800fd00:	f43f af09 	beq.w	800fb16 <_printf_float+0xc2>
 800fd04:	f04f 0900 	mov.w	r9, #0
 800fd08:	f104 0a1a 	add.w	sl, r4, #26
 800fd0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd0e:	425b      	negs	r3, r3
 800fd10:	454b      	cmp	r3, r9
 800fd12:	dc01      	bgt.n	800fd18 <_printf_float+0x2c4>
 800fd14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd16:	e792      	b.n	800fc3e <_printf_float+0x1ea>
 800fd18:	2301      	movs	r3, #1
 800fd1a:	4652      	mov	r2, sl
 800fd1c:	4631      	mov	r1, r6
 800fd1e:	4628      	mov	r0, r5
 800fd20:	47b8      	blx	r7
 800fd22:	3001      	adds	r0, #1
 800fd24:	f43f aef7 	beq.w	800fb16 <_printf_float+0xc2>
 800fd28:	f109 0901 	add.w	r9, r9, #1
 800fd2c:	e7ee      	b.n	800fd0c <_printf_float+0x2b8>
 800fd2e:	bf00      	nop
 800fd30:	7fefffff 	.word	0x7fefffff
 800fd34:	080691f8 	.word	0x080691f8
 800fd38:	080691fc 	.word	0x080691fc
 800fd3c:	08069204 	.word	0x08069204
 800fd40:	08069200 	.word	0x08069200
 800fd44:	08069208 	.word	0x08069208
 800fd48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	bfa8      	it	ge
 800fd50:	461a      	movge	r2, r3
 800fd52:	2a00      	cmp	r2, #0
 800fd54:	4691      	mov	r9, r2
 800fd56:	dc37      	bgt.n	800fdc8 <_printf_float+0x374>
 800fd58:	f04f 0b00 	mov.w	fp, #0
 800fd5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd60:	f104 021a 	add.w	r2, r4, #26
 800fd64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd66:	9305      	str	r3, [sp, #20]
 800fd68:	eba3 0309 	sub.w	r3, r3, r9
 800fd6c:	455b      	cmp	r3, fp
 800fd6e:	dc33      	bgt.n	800fdd8 <_printf_float+0x384>
 800fd70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fd74:	429a      	cmp	r2, r3
 800fd76:	db3b      	blt.n	800fdf0 <_printf_float+0x39c>
 800fd78:	6823      	ldr	r3, [r4, #0]
 800fd7a:	07da      	lsls	r2, r3, #31
 800fd7c:	d438      	bmi.n	800fdf0 <_printf_float+0x39c>
 800fd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd80:	9a05      	ldr	r2, [sp, #20]
 800fd82:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd84:	1a9a      	subs	r2, r3, r2
 800fd86:	eba3 0901 	sub.w	r9, r3, r1
 800fd8a:	4591      	cmp	r9, r2
 800fd8c:	bfa8      	it	ge
 800fd8e:	4691      	movge	r9, r2
 800fd90:	f1b9 0f00 	cmp.w	r9, #0
 800fd94:	dc35      	bgt.n	800fe02 <_printf_float+0x3ae>
 800fd96:	f04f 0800 	mov.w	r8, #0
 800fd9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd9e:	f104 0a1a 	add.w	sl, r4, #26
 800fda2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fda6:	1a9b      	subs	r3, r3, r2
 800fda8:	eba3 0309 	sub.w	r3, r3, r9
 800fdac:	4543      	cmp	r3, r8
 800fdae:	f77f af79 	ble.w	800fca4 <_printf_float+0x250>
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	4652      	mov	r2, sl
 800fdb6:	4631      	mov	r1, r6
 800fdb8:	4628      	mov	r0, r5
 800fdba:	47b8      	blx	r7
 800fdbc:	3001      	adds	r0, #1
 800fdbe:	f43f aeaa 	beq.w	800fb16 <_printf_float+0xc2>
 800fdc2:	f108 0801 	add.w	r8, r8, #1
 800fdc6:	e7ec      	b.n	800fda2 <_printf_float+0x34e>
 800fdc8:	4613      	mov	r3, r2
 800fdca:	4631      	mov	r1, r6
 800fdcc:	4642      	mov	r2, r8
 800fdce:	4628      	mov	r0, r5
 800fdd0:	47b8      	blx	r7
 800fdd2:	3001      	adds	r0, #1
 800fdd4:	d1c0      	bne.n	800fd58 <_printf_float+0x304>
 800fdd6:	e69e      	b.n	800fb16 <_printf_float+0xc2>
 800fdd8:	2301      	movs	r3, #1
 800fdda:	4631      	mov	r1, r6
 800fddc:	4628      	mov	r0, r5
 800fdde:	9205      	str	r2, [sp, #20]
 800fde0:	47b8      	blx	r7
 800fde2:	3001      	adds	r0, #1
 800fde4:	f43f ae97 	beq.w	800fb16 <_printf_float+0xc2>
 800fde8:	f10b 0b01 	add.w	fp, fp, #1
 800fdec:	9a05      	ldr	r2, [sp, #20]
 800fdee:	e7b9      	b.n	800fd64 <_printf_float+0x310>
 800fdf0:	ee18 3a10 	vmov	r3, s16
 800fdf4:	4652      	mov	r2, sl
 800fdf6:	4631      	mov	r1, r6
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	47b8      	blx	r7
 800fdfc:	3001      	adds	r0, #1
 800fdfe:	d1be      	bne.n	800fd7e <_printf_float+0x32a>
 800fe00:	e689      	b.n	800fb16 <_printf_float+0xc2>
 800fe02:	9a05      	ldr	r2, [sp, #20]
 800fe04:	464b      	mov	r3, r9
 800fe06:	4631      	mov	r1, r6
 800fe08:	4628      	mov	r0, r5
 800fe0a:	4442      	add	r2, r8
 800fe0c:	47b8      	blx	r7
 800fe0e:	3001      	adds	r0, #1
 800fe10:	d1c1      	bne.n	800fd96 <_printf_float+0x342>
 800fe12:	e680      	b.n	800fb16 <_printf_float+0xc2>
 800fe14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe16:	2a01      	cmp	r2, #1
 800fe18:	dc01      	bgt.n	800fe1e <_printf_float+0x3ca>
 800fe1a:	07db      	lsls	r3, r3, #31
 800fe1c:	d538      	bpl.n	800fe90 <_printf_float+0x43c>
 800fe1e:	2301      	movs	r3, #1
 800fe20:	4642      	mov	r2, r8
 800fe22:	4631      	mov	r1, r6
 800fe24:	4628      	mov	r0, r5
 800fe26:	47b8      	blx	r7
 800fe28:	3001      	adds	r0, #1
 800fe2a:	f43f ae74 	beq.w	800fb16 <_printf_float+0xc2>
 800fe2e:	ee18 3a10 	vmov	r3, s16
 800fe32:	4652      	mov	r2, sl
 800fe34:	4631      	mov	r1, r6
 800fe36:	4628      	mov	r0, r5
 800fe38:	47b8      	blx	r7
 800fe3a:	3001      	adds	r0, #1
 800fe3c:	f43f ae6b 	beq.w	800fb16 <_printf_float+0xc2>
 800fe40:	2200      	movs	r2, #0
 800fe42:	2300      	movs	r3, #0
 800fe44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe48:	f7f0 fe42 	bl	8000ad0 <__aeabi_dcmpeq>
 800fe4c:	b9d8      	cbnz	r0, 800fe86 <_printf_float+0x432>
 800fe4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe50:	f108 0201 	add.w	r2, r8, #1
 800fe54:	3b01      	subs	r3, #1
 800fe56:	4631      	mov	r1, r6
 800fe58:	4628      	mov	r0, r5
 800fe5a:	47b8      	blx	r7
 800fe5c:	3001      	adds	r0, #1
 800fe5e:	d10e      	bne.n	800fe7e <_printf_float+0x42a>
 800fe60:	e659      	b.n	800fb16 <_printf_float+0xc2>
 800fe62:	2301      	movs	r3, #1
 800fe64:	4652      	mov	r2, sl
 800fe66:	4631      	mov	r1, r6
 800fe68:	4628      	mov	r0, r5
 800fe6a:	47b8      	blx	r7
 800fe6c:	3001      	adds	r0, #1
 800fe6e:	f43f ae52 	beq.w	800fb16 <_printf_float+0xc2>
 800fe72:	f108 0801 	add.w	r8, r8, #1
 800fe76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe78:	3b01      	subs	r3, #1
 800fe7a:	4543      	cmp	r3, r8
 800fe7c:	dcf1      	bgt.n	800fe62 <_printf_float+0x40e>
 800fe7e:	464b      	mov	r3, r9
 800fe80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fe84:	e6dc      	b.n	800fc40 <_printf_float+0x1ec>
 800fe86:	f04f 0800 	mov.w	r8, #0
 800fe8a:	f104 0a1a 	add.w	sl, r4, #26
 800fe8e:	e7f2      	b.n	800fe76 <_printf_float+0x422>
 800fe90:	2301      	movs	r3, #1
 800fe92:	4642      	mov	r2, r8
 800fe94:	e7df      	b.n	800fe56 <_printf_float+0x402>
 800fe96:	2301      	movs	r3, #1
 800fe98:	464a      	mov	r2, r9
 800fe9a:	4631      	mov	r1, r6
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	47b8      	blx	r7
 800fea0:	3001      	adds	r0, #1
 800fea2:	f43f ae38 	beq.w	800fb16 <_printf_float+0xc2>
 800fea6:	f108 0801 	add.w	r8, r8, #1
 800feaa:	68e3      	ldr	r3, [r4, #12]
 800feac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800feae:	1a5b      	subs	r3, r3, r1
 800feb0:	4543      	cmp	r3, r8
 800feb2:	dcf0      	bgt.n	800fe96 <_printf_float+0x442>
 800feb4:	e6fa      	b.n	800fcac <_printf_float+0x258>
 800feb6:	f04f 0800 	mov.w	r8, #0
 800feba:	f104 0919 	add.w	r9, r4, #25
 800febe:	e7f4      	b.n	800feaa <_printf_float+0x456>

0800fec0 <_printf_common>:
 800fec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fec4:	4616      	mov	r6, r2
 800fec6:	4699      	mov	r9, r3
 800fec8:	688a      	ldr	r2, [r1, #8]
 800feca:	4607      	mov	r7, r0
 800fecc:	690b      	ldr	r3, [r1, #16]
 800fece:	460c      	mov	r4, r1
 800fed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fed4:	4293      	cmp	r3, r2
 800fed6:	bfb8      	it	lt
 800fed8:	4613      	movlt	r3, r2
 800feda:	6033      	str	r3, [r6, #0]
 800fedc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fee0:	b10a      	cbz	r2, 800fee6 <_printf_common+0x26>
 800fee2:	3301      	adds	r3, #1
 800fee4:	6033      	str	r3, [r6, #0]
 800fee6:	6823      	ldr	r3, [r4, #0]
 800fee8:	0699      	lsls	r1, r3, #26
 800feea:	bf42      	ittt	mi
 800feec:	6833      	ldrmi	r3, [r6, #0]
 800feee:	3302      	addmi	r3, #2
 800fef0:	6033      	strmi	r3, [r6, #0]
 800fef2:	6825      	ldr	r5, [r4, #0]
 800fef4:	f015 0506 	ands.w	r5, r5, #6
 800fef8:	d106      	bne.n	800ff08 <_printf_common+0x48>
 800fefa:	f104 0a19 	add.w	sl, r4, #25
 800fefe:	68e3      	ldr	r3, [r4, #12]
 800ff00:	6832      	ldr	r2, [r6, #0]
 800ff02:	1a9b      	subs	r3, r3, r2
 800ff04:	42ab      	cmp	r3, r5
 800ff06:	dc29      	bgt.n	800ff5c <_printf_common+0x9c>
 800ff08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff0c:	1e13      	subs	r3, r2, #0
 800ff0e:	6822      	ldr	r2, [r4, #0]
 800ff10:	bf18      	it	ne
 800ff12:	2301      	movne	r3, #1
 800ff14:	0692      	lsls	r2, r2, #26
 800ff16:	d42e      	bmi.n	800ff76 <_printf_common+0xb6>
 800ff18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff1c:	4649      	mov	r1, r9
 800ff1e:	4638      	mov	r0, r7
 800ff20:	47c0      	blx	r8
 800ff22:	3001      	adds	r0, #1
 800ff24:	d021      	beq.n	800ff6a <_printf_common+0xaa>
 800ff26:	6823      	ldr	r3, [r4, #0]
 800ff28:	341a      	adds	r4, #26
 800ff2a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800ff2e:	f003 0306 	and.w	r3, r3, #6
 800ff32:	6832      	ldr	r2, [r6, #0]
 800ff34:	2600      	movs	r6, #0
 800ff36:	2b04      	cmp	r3, #4
 800ff38:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ff3c:	bf08      	it	eq
 800ff3e:	1aad      	subeq	r5, r5, r2
 800ff40:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ff44:	bf14      	ite	ne
 800ff46:	2500      	movne	r5, #0
 800ff48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	bfc4      	itt	gt
 800ff50:	1a9b      	subgt	r3, r3, r2
 800ff52:	18ed      	addgt	r5, r5, r3
 800ff54:	42b5      	cmp	r5, r6
 800ff56:	d11a      	bne.n	800ff8e <_printf_common+0xce>
 800ff58:	2000      	movs	r0, #0
 800ff5a:	e008      	b.n	800ff6e <_printf_common+0xae>
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	4652      	mov	r2, sl
 800ff60:	4649      	mov	r1, r9
 800ff62:	4638      	mov	r0, r7
 800ff64:	47c0      	blx	r8
 800ff66:	3001      	adds	r0, #1
 800ff68:	d103      	bne.n	800ff72 <_printf_common+0xb2>
 800ff6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff72:	3501      	adds	r5, #1
 800ff74:	e7c3      	b.n	800fefe <_printf_common+0x3e>
 800ff76:	18e1      	adds	r1, r4, r3
 800ff78:	1c5a      	adds	r2, r3, #1
 800ff7a:	2030      	movs	r0, #48	; 0x30
 800ff7c:	3302      	adds	r3, #2
 800ff7e:	4422      	add	r2, r4
 800ff80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff8c:	e7c4      	b.n	800ff18 <_printf_common+0x58>
 800ff8e:	2301      	movs	r3, #1
 800ff90:	4622      	mov	r2, r4
 800ff92:	4649      	mov	r1, r9
 800ff94:	4638      	mov	r0, r7
 800ff96:	47c0      	blx	r8
 800ff98:	3001      	adds	r0, #1
 800ff9a:	d0e6      	beq.n	800ff6a <_printf_common+0xaa>
 800ff9c:	3601      	adds	r6, #1
 800ff9e:	e7d9      	b.n	800ff54 <_printf_common+0x94>

0800ffa0 <_printf_i>:
 800ffa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa4:	7e0f      	ldrb	r7, [r1, #24]
 800ffa6:	4691      	mov	r9, r2
 800ffa8:	4680      	mov	r8, r0
 800ffaa:	460c      	mov	r4, r1
 800ffac:	2f78      	cmp	r7, #120	; 0x78
 800ffae:	469a      	mov	sl, r3
 800ffb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ffb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ffb6:	d807      	bhi.n	800ffc8 <_printf_i+0x28>
 800ffb8:	2f62      	cmp	r7, #98	; 0x62
 800ffba:	d80a      	bhi.n	800ffd2 <_printf_i+0x32>
 800ffbc:	2f00      	cmp	r7, #0
 800ffbe:	f000 80d8 	beq.w	8010172 <_printf_i+0x1d2>
 800ffc2:	2f58      	cmp	r7, #88	; 0x58
 800ffc4:	f000 80a3 	beq.w	801010e <_printf_i+0x16e>
 800ffc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ffd0:	e03a      	b.n	8010048 <_printf_i+0xa8>
 800ffd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ffd6:	2b15      	cmp	r3, #21
 800ffd8:	d8f6      	bhi.n	800ffc8 <_printf_i+0x28>
 800ffda:	a101      	add	r1, pc, #4	; (adr r1, 800ffe0 <_printf_i+0x40>)
 800ffdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffe0:	08010039 	.word	0x08010039
 800ffe4:	0801004d 	.word	0x0801004d
 800ffe8:	0800ffc9 	.word	0x0800ffc9
 800ffec:	0800ffc9 	.word	0x0800ffc9
 800fff0:	0800ffc9 	.word	0x0800ffc9
 800fff4:	0800ffc9 	.word	0x0800ffc9
 800fff8:	0801004d 	.word	0x0801004d
 800fffc:	0800ffc9 	.word	0x0800ffc9
 8010000:	0800ffc9 	.word	0x0800ffc9
 8010004:	0800ffc9 	.word	0x0800ffc9
 8010008:	0800ffc9 	.word	0x0800ffc9
 801000c:	08010159 	.word	0x08010159
 8010010:	0801007d 	.word	0x0801007d
 8010014:	0801013b 	.word	0x0801013b
 8010018:	0800ffc9 	.word	0x0800ffc9
 801001c:	0800ffc9 	.word	0x0800ffc9
 8010020:	0801017b 	.word	0x0801017b
 8010024:	0800ffc9 	.word	0x0800ffc9
 8010028:	0801007d 	.word	0x0801007d
 801002c:	0800ffc9 	.word	0x0800ffc9
 8010030:	0800ffc9 	.word	0x0800ffc9
 8010034:	08010143 	.word	0x08010143
 8010038:	682b      	ldr	r3, [r5, #0]
 801003a:	1d1a      	adds	r2, r3, #4
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	602a      	str	r2, [r5, #0]
 8010040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010048:	2301      	movs	r3, #1
 801004a:	e0a3      	b.n	8010194 <_printf_i+0x1f4>
 801004c:	6820      	ldr	r0, [r4, #0]
 801004e:	6829      	ldr	r1, [r5, #0]
 8010050:	0606      	lsls	r6, r0, #24
 8010052:	f101 0304 	add.w	r3, r1, #4
 8010056:	d50a      	bpl.n	801006e <_printf_i+0xce>
 8010058:	680e      	ldr	r6, [r1, #0]
 801005a:	602b      	str	r3, [r5, #0]
 801005c:	2e00      	cmp	r6, #0
 801005e:	da03      	bge.n	8010068 <_printf_i+0xc8>
 8010060:	232d      	movs	r3, #45	; 0x2d
 8010062:	4276      	negs	r6, r6
 8010064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010068:	485e      	ldr	r0, [pc, #376]	; (80101e4 <_printf_i+0x244>)
 801006a:	230a      	movs	r3, #10
 801006c:	e019      	b.n	80100a2 <_printf_i+0x102>
 801006e:	680e      	ldr	r6, [r1, #0]
 8010070:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010074:	602b      	str	r3, [r5, #0]
 8010076:	bf18      	it	ne
 8010078:	b236      	sxthne	r6, r6
 801007a:	e7ef      	b.n	801005c <_printf_i+0xbc>
 801007c:	682b      	ldr	r3, [r5, #0]
 801007e:	6820      	ldr	r0, [r4, #0]
 8010080:	1d19      	adds	r1, r3, #4
 8010082:	6029      	str	r1, [r5, #0]
 8010084:	0601      	lsls	r1, r0, #24
 8010086:	d501      	bpl.n	801008c <_printf_i+0xec>
 8010088:	681e      	ldr	r6, [r3, #0]
 801008a:	e002      	b.n	8010092 <_printf_i+0xf2>
 801008c:	0646      	lsls	r6, r0, #25
 801008e:	d5fb      	bpl.n	8010088 <_printf_i+0xe8>
 8010090:	881e      	ldrh	r6, [r3, #0]
 8010092:	2f6f      	cmp	r7, #111	; 0x6f
 8010094:	4853      	ldr	r0, [pc, #332]	; (80101e4 <_printf_i+0x244>)
 8010096:	bf0c      	ite	eq
 8010098:	2308      	moveq	r3, #8
 801009a:	230a      	movne	r3, #10
 801009c:	2100      	movs	r1, #0
 801009e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100a2:	6865      	ldr	r5, [r4, #4]
 80100a4:	2d00      	cmp	r5, #0
 80100a6:	60a5      	str	r5, [r4, #8]
 80100a8:	bfa2      	ittt	ge
 80100aa:	6821      	ldrge	r1, [r4, #0]
 80100ac:	f021 0104 	bicge.w	r1, r1, #4
 80100b0:	6021      	strge	r1, [r4, #0]
 80100b2:	b90e      	cbnz	r6, 80100b8 <_printf_i+0x118>
 80100b4:	2d00      	cmp	r5, #0
 80100b6:	d04d      	beq.n	8010154 <_printf_i+0x1b4>
 80100b8:	4615      	mov	r5, r2
 80100ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80100be:	fb03 6711 	mls	r7, r3, r1, r6
 80100c2:	5dc7      	ldrb	r7, [r0, r7]
 80100c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80100c8:	4637      	mov	r7, r6
 80100ca:	460e      	mov	r6, r1
 80100cc:	42bb      	cmp	r3, r7
 80100ce:	d9f4      	bls.n	80100ba <_printf_i+0x11a>
 80100d0:	2b08      	cmp	r3, #8
 80100d2:	d10b      	bne.n	80100ec <_printf_i+0x14c>
 80100d4:	6823      	ldr	r3, [r4, #0]
 80100d6:	07de      	lsls	r6, r3, #31
 80100d8:	d508      	bpl.n	80100ec <_printf_i+0x14c>
 80100da:	6923      	ldr	r3, [r4, #16]
 80100dc:	6861      	ldr	r1, [r4, #4]
 80100de:	4299      	cmp	r1, r3
 80100e0:	bfde      	ittt	le
 80100e2:	2330      	movle	r3, #48	; 0x30
 80100e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80100e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80100ec:	1b52      	subs	r2, r2, r5
 80100ee:	6122      	str	r2, [r4, #16]
 80100f0:	464b      	mov	r3, r9
 80100f2:	aa03      	add	r2, sp, #12
 80100f4:	4621      	mov	r1, r4
 80100f6:	4640      	mov	r0, r8
 80100f8:	f8cd a000 	str.w	sl, [sp]
 80100fc:	f7ff fee0 	bl	800fec0 <_printf_common>
 8010100:	3001      	adds	r0, #1
 8010102:	d14c      	bne.n	801019e <_printf_i+0x1fe>
 8010104:	f04f 30ff 	mov.w	r0, #4294967295
 8010108:	b004      	add	sp, #16
 801010a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801010e:	4835      	ldr	r0, [pc, #212]	; (80101e4 <_printf_i+0x244>)
 8010110:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010114:	6829      	ldr	r1, [r5, #0]
 8010116:	6823      	ldr	r3, [r4, #0]
 8010118:	f851 6b04 	ldr.w	r6, [r1], #4
 801011c:	6029      	str	r1, [r5, #0]
 801011e:	061d      	lsls	r5, r3, #24
 8010120:	d514      	bpl.n	801014c <_printf_i+0x1ac>
 8010122:	07df      	lsls	r7, r3, #31
 8010124:	bf44      	itt	mi
 8010126:	f043 0320 	orrmi.w	r3, r3, #32
 801012a:	6023      	strmi	r3, [r4, #0]
 801012c:	b91e      	cbnz	r6, 8010136 <_printf_i+0x196>
 801012e:	6823      	ldr	r3, [r4, #0]
 8010130:	f023 0320 	bic.w	r3, r3, #32
 8010134:	6023      	str	r3, [r4, #0]
 8010136:	2310      	movs	r3, #16
 8010138:	e7b0      	b.n	801009c <_printf_i+0xfc>
 801013a:	6823      	ldr	r3, [r4, #0]
 801013c:	f043 0320 	orr.w	r3, r3, #32
 8010140:	6023      	str	r3, [r4, #0]
 8010142:	2378      	movs	r3, #120	; 0x78
 8010144:	4828      	ldr	r0, [pc, #160]	; (80101e8 <_printf_i+0x248>)
 8010146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801014a:	e7e3      	b.n	8010114 <_printf_i+0x174>
 801014c:	0659      	lsls	r1, r3, #25
 801014e:	bf48      	it	mi
 8010150:	b2b6      	uxthmi	r6, r6
 8010152:	e7e6      	b.n	8010122 <_printf_i+0x182>
 8010154:	4615      	mov	r5, r2
 8010156:	e7bb      	b.n	80100d0 <_printf_i+0x130>
 8010158:	682b      	ldr	r3, [r5, #0]
 801015a:	6826      	ldr	r6, [r4, #0]
 801015c:	1d18      	adds	r0, r3, #4
 801015e:	6961      	ldr	r1, [r4, #20]
 8010160:	6028      	str	r0, [r5, #0]
 8010162:	0635      	lsls	r5, r6, #24
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	d501      	bpl.n	801016c <_printf_i+0x1cc>
 8010168:	6019      	str	r1, [r3, #0]
 801016a:	e002      	b.n	8010172 <_printf_i+0x1d2>
 801016c:	0670      	lsls	r0, r6, #25
 801016e:	d5fb      	bpl.n	8010168 <_printf_i+0x1c8>
 8010170:	8019      	strh	r1, [r3, #0]
 8010172:	2300      	movs	r3, #0
 8010174:	4615      	mov	r5, r2
 8010176:	6123      	str	r3, [r4, #16]
 8010178:	e7ba      	b.n	80100f0 <_printf_i+0x150>
 801017a:	682b      	ldr	r3, [r5, #0]
 801017c:	2100      	movs	r1, #0
 801017e:	1d1a      	adds	r2, r3, #4
 8010180:	602a      	str	r2, [r5, #0]
 8010182:	681d      	ldr	r5, [r3, #0]
 8010184:	6862      	ldr	r2, [r4, #4]
 8010186:	4628      	mov	r0, r5
 8010188:	f002 fc37 	bl	80129fa <memchr>
 801018c:	b108      	cbz	r0, 8010192 <_printf_i+0x1f2>
 801018e:	1b40      	subs	r0, r0, r5
 8010190:	6060      	str	r0, [r4, #4]
 8010192:	6863      	ldr	r3, [r4, #4]
 8010194:	6123      	str	r3, [r4, #16]
 8010196:	2300      	movs	r3, #0
 8010198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801019c:	e7a8      	b.n	80100f0 <_printf_i+0x150>
 801019e:	6923      	ldr	r3, [r4, #16]
 80101a0:	462a      	mov	r2, r5
 80101a2:	4649      	mov	r1, r9
 80101a4:	4640      	mov	r0, r8
 80101a6:	47d0      	blx	sl
 80101a8:	3001      	adds	r0, #1
 80101aa:	d0ab      	beq.n	8010104 <_printf_i+0x164>
 80101ac:	6823      	ldr	r3, [r4, #0]
 80101ae:	079b      	lsls	r3, r3, #30
 80101b0:	d413      	bmi.n	80101da <_printf_i+0x23a>
 80101b2:	68e0      	ldr	r0, [r4, #12]
 80101b4:	9b03      	ldr	r3, [sp, #12]
 80101b6:	4298      	cmp	r0, r3
 80101b8:	bfb8      	it	lt
 80101ba:	4618      	movlt	r0, r3
 80101bc:	e7a4      	b.n	8010108 <_printf_i+0x168>
 80101be:	2301      	movs	r3, #1
 80101c0:	4632      	mov	r2, r6
 80101c2:	4649      	mov	r1, r9
 80101c4:	4640      	mov	r0, r8
 80101c6:	47d0      	blx	sl
 80101c8:	3001      	adds	r0, #1
 80101ca:	d09b      	beq.n	8010104 <_printf_i+0x164>
 80101cc:	3501      	adds	r5, #1
 80101ce:	68e3      	ldr	r3, [r4, #12]
 80101d0:	9903      	ldr	r1, [sp, #12]
 80101d2:	1a5b      	subs	r3, r3, r1
 80101d4:	42ab      	cmp	r3, r5
 80101d6:	dcf2      	bgt.n	80101be <_printf_i+0x21e>
 80101d8:	e7eb      	b.n	80101b2 <_printf_i+0x212>
 80101da:	2500      	movs	r5, #0
 80101dc:	f104 0619 	add.w	r6, r4, #25
 80101e0:	e7f5      	b.n	80101ce <_printf_i+0x22e>
 80101e2:	bf00      	nop
 80101e4:	0806920a 	.word	0x0806920a
 80101e8:	0806921b 	.word	0x0806921b

080101ec <_scanf_float>:
 80101ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f0:	b087      	sub	sp, #28
 80101f2:	4617      	mov	r7, r2
 80101f4:	468b      	mov	fp, r1
 80101f6:	4680      	mov	r8, r0
 80101f8:	9303      	str	r3, [sp, #12]
 80101fa:	460c      	mov	r4, r1
 80101fc:	688b      	ldr	r3, [r1, #8]
 80101fe:	1e5a      	subs	r2, r3, #1
 8010200:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010204:	bf8b      	itete	hi
 8010206:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801020a:	2300      	movls	r3, #0
 801020c:	195b      	addhi	r3, r3, r5
 801020e:	9302      	strls	r3, [sp, #8]
 8010210:	f04f 0500 	mov.w	r5, #0
 8010214:	bf84      	itt	hi
 8010216:	9302      	strhi	r3, [sp, #8]
 8010218:	f240 135d 	movwhi	r3, #349	; 0x15d
 801021c:	46aa      	mov	sl, r5
 801021e:	46a9      	mov	r9, r5
 8010220:	bf88      	it	hi
 8010222:	608b      	strhi	r3, [r1, #8]
 8010224:	680b      	ldr	r3, [r1, #0]
 8010226:	9501      	str	r5, [sp, #4]
 8010228:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801022c:	f84b 3b1c 	str.w	r3, [fp], #28
 8010230:	465e      	mov	r6, fp
 8010232:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010236:	68a2      	ldr	r2, [r4, #8]
 8010238:	b152      	cbz	r2, 8010250 <_scanf_float+0x64>
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	2b4e      	cmp	r3, #78	; 0x4e
 8010240:	d864      	bhi.n	801030c <_scanf_float+0x120>
 8010242:	2b40      	cmp	r3, #64	; 0x40
 8010244:	d83c      	bhi.n	80102c0 <_scanf_float+0xd4>
 8010246:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801024a:	b2c8      	uxtb	r0, r1
 801024c:	280e      	cmp	r0, #14
 801024e:	d93a      	bls.n	80102c6 <_scanf_float+0xda>
 8010250:	f1b9 0f00 	cmp.w	r9, #0
 8010254:	d003      	beq.n	801025e <_scanf_float+0x72>
 8010256:	6823      	ldr	r3, [r4, #0]
 8010258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801025c:	6023      	str	r3, [r4, #0]
 801025e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010262:	f1ba 0f01 	cmp.w	sl, #1
 8010266:	f200 8113 	bhi.w	8010490 <_scanf_float+0x2a4>
 801026a:	455e      	cmp	r6, fp
 801026c:	f200 8105 	bhi.w	801047a <_scanf_float+0x28e>
 8010270:	2501      	movs	r5, #1
 8010272:	4628      	mov	r0, r5
 8010274:	b007      	add	sp, #28
 8010276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801027a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801027e:	2a0d      	cmp	r2, #13
 8010280:	d8e6      	bhi.n	8010250 <_scanf_float+0x64>
 8010282:	a101      	add	r1, pc, #4	; (adr r1, 8010288 <_scanf_float+0x9c>)
 8010284:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010288:	080103c7 	.word	0x080103c7
 801028c:	08010251 	.word	0x08010251
 8010290:	08010251 	.word	0x08010251
 8010294:	08010251 	.word	0x08010251
 8010298:	08010427 	.word	0x08010427
 801029c:	080103ff 	.word	0x080103ff
 80102a0:	08010251 	.word	0x08010251
 80102a4:	08010251 	.word	0x08010251
 80102a8:	080103d5 	.word	0x080103d5
 80102ac:	08010251 	.word	0x08010251
 80102b0:	08010251 	.word	0x08010251
 80102b4:	08010251 	.word	0x08010251
 80102b8:	08010251 	.word	0x08010251
 80102bc:	0801038d 	.word	0x0801038d
 80102c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80102c4:	e7db      	b.n	801027e <_scanf_float+0x92>
 80102c6:	290e      	cmp	r1, #14
 80102c8:	d8c2      	bhi.n	8010250 <_scanf_float+0x64>
 80102ca:	a001      	add	r0, pc, #4	; (adr r0, 80102d0 <_scanf_float+0xe4>)
 80102cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80102d0:	0801037f 	.word	0x0801037f
 80102d4:	08010251 	.word	0x08010251
 80102d8:	0801037f 	.word	0x0801037f
 80102dc:	08010413 	.word	0x08010413
 80102e0:	08010251 	.word	0x08010251
 80102e4:	0801032d 	.word	0x0801032d
 80102e8:	08010369 	.word	0x08010369
 80102ec:	08010369 	.word	0x08010369
 80102f0:	08010369 	.word	0x08010369
 80102f4:	08010369 	.word	0x08010369
 80102f8:	08010369 	.word	0x08010369
 80102fc:	08010369 	.word	0x08010369
 8010300:	08010369 	.word	0x08010369
 8010304:	08010369 	.word	0x08010369
 8010308:	08010369 	.word	0x08010369
 801030c:	2b6e      	cmp	r3, #110	; 0x6e
 801030e:	d809      	bhi.n	8010324 <_scanf_float+0x138>
 8010310:	2b60      	cmp	r3, #96	; 0x60
 8010312:	d8b2      	bhi.n	801027a <_scanf_float+0x8e>
 8010314:	2b54      	cmp	r3, #84	; 0x54
 8010316:	d077      	beq.n	8010408 <_scanf_float+0x21c>
 8010318:	2b59      	cmp	r3, #89	; 0x59
 801031a:	d199      	bne.n	8010250 <_scanf_float+0x64>
 801031c:	2d07      	cmp	r5, #7
 801031e:	d197      	bne.n	8010250 <_scanf_float+0x64>
 8010320:	2508      	movs	r5, #8
 8010322:	e029      	b.n	8010378 <_scanf_float+0x18c>
 8010324:	2b74      	cmp	r3, #116	; 0x74
 8010326:	d06f      	beq.n	8010408 <_scanf_float+0x21c>
 8010328:	2b79      	cmp	r3, #121	; 0x79
 801032a:	e7f6      	b.n	801031a <_scanf_float+0x12e>
 801032c:	6821      	ldr	r1, [r4, #0]
 801032e:	05c8      	lsls	r0, r1, #23
 8010330:	d51a      	bpl.n	8010368 <_scanf_float+0x17c>
 8010332:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010336:	9b02      	ldr	r3, [sp, #8]
 8010338:	f109 0901 	add.w	r9, r9, #1
 801033c:	6021      	str	r1, [r4, #0]
 801033e:	b11b      	cbz	r3, 8010348 <_scanf_float+0x15c>
 8010340:	3b01      	subs	r3, #1
 8010342:	3201      	adds	r2, #1
 8010344:	9302      	str	r3, [sp, #8]
 8010346:	60a2      	str	r2, [r4, #8]
 8010348:	68a3      	ldr	r3, [r4, #8]
 801034a:	3b01      	subs	r3, #1
 801034c:	60a3      	str	r3, [r4, #8]
 801034e:	6923      	ldr	r3, [r4, #16]
 8010350:	3301      	adds	r3, #1
 8010352:	6123      	str	r3, [r4, #16]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	3b01      	subs	r3, #1
 8010358:	2b00      	cmp	r3, #0
 801035a:	607b      	str	r3, [r7, #4]
 801035c:	f340 8084 	ble.w	8010468 <_scanf_float+0x27c>
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	3301      	adds	r3, #1
 8010364:	603b      	str	r3, [r7, #0]
 8010366:	e766      	b.n	8010236 <_scanf_float+0x4a>
 8010368:	eb1a 0f05 	cmn.w	sl, r5
 801036c:	f47f af70 	bne.w	8010250 <_scanf_float+0x64>
 8010370:	6822      	ldr	r2, [r4, #0]
 8010372:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010376:	6022      	str	r2, [r4, #0]
 8010378:	f806 3b01 	strb.w	r3, [r6], #1
 801037c:	e7e4      	b.n	8010348 <_scanf_float+0x15c>
 801037e:	6822      	ldr	r2, [r4, #0]
 8010380:	0610      	lsls	r0, r2, #24
 8010382:	f57f af65 	bpl.w	8010250 <_scanf_float+0x64>
 8010386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801038a:	e7f4      	b.n	8010376 <_scanf_float+0x18a>
 801038c:	f1ba 0f00 	cmp.w	sl, #0
 8010390:	d10e      	bne.n	80103b0 <_scanf_float+0x1c4>
 8010392:	f1b9 0f00 	cmp.w	r9, #0
 8010396:	d10e      	bne.n	80103b6 <_scanf_float+0x1ca>
 8010398:	6822      	ldr	r2, [r4, #0]
 801039a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801039e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80103a2:	d108      	bne.n	80103b6 <_scanf_float+0x1ca>
 80103a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80103a8:	f04f 0a01 	mov.w	sl, #1
 80103ac:	6022      	str	r2, [r4, #0]
 80103ae:	e7e3      	b.n	8010378 <_scanf_float+0x18c>
 80103b0:	f1ba 0f02 	cmp.w	sl, #2
 80103b4:	d055      	beq.n	8010462 <_scanf_float+0x276>
 80103b6:	2d01      	cmp	r5, #1
 80103b8:	d002      	beq.n	80103c0 <_scanf_float+0x1d4>
 80103ba:	2d04      	cmp	r5, #4
 80103bc:	f47f af48 	bne.w	8010250 <_scanf_float+0x64>
 80103c0:	3501      	adds	r5, #1
 80103c2:	b2ed      	uxtb	r5, r5
 80103c4:	e7d8      	b.n	8010378 <_scanf_float+0x18c>
 80103c6:	f1ba 0f01 	cmp.w	sl, #1
 80103ca:	f47f af41 	bne.w	8010250 <_scanf_float+0x64>
 80103ce:	f04f 0a02 	mov.w	sl, #2
 80103d2:	e7d1      	b.n	8010378 <_scanf_float+0x18c>
 80103d4:	b97d      	cbnz	r5, 80103f6 <_scanf_float+0x20a>
 80103d6:	f1b9 0f00 	cmp.w	r9, #0
 80103da:	f47f af3c 	bne.w	8010256 <_scanf_float+0x6a>
 80103de:	6822      	ldr	r2, [r4, #0]
 80103e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80103e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80103e8:	f47f af39 	bne.w	801025e <_scanf_float+0x72>
 80103ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80103f0:	2501      	movs	r5, #1
 80103f2:	6022      	str	r2, [r4, #0]
 80103f4:	e7c0      	b.n	8010378 <_scanf_float+0x18c>
 80103f6:	2d03      	cmp	r5, #3
 80103f8:	d0e2      	beq.n	80103c0 <_scanf_float+0x1d4>
 80103fa:	2d05      	cmp	r5, #5
 80103fc:	e7de      	b.n	80103bc <_scanf_float+0x1d0>
 80103fe:	2d02      	cmp	r5, #2
 8010400:	f47f af26 	bne.w	8010250 <_scanf_float+0x64>
 8010404:	2503      	movs	r5, #3
 8010406:	e7b7      	b.n	8010378 <_scanf_float+0x18c>
 8010408:	2d06      	cmp	r5, #6
 801040a:	f47f af21 	bne.w	8010250 <_scanf_float+0x64>
 801040e:	2507      	movs	r5, #7
 8010410:	e7b2      	b.n	8010378 <_scanf_float+0x18c>
 8010412:	6822      	ldr	r2, [r4, #0]
 8010414:	0591      	lsls	r1, r2, #22
 8010416:	f57f af1b 	bpl.w	8010250 <_scanf_float+0x64>
 801041a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801041e:	f8cd 9004 	str.w	r9, [sp, #4]
 8010422:	6022      	str	r2, [r4, #0]
 8010424:	e7a8      	b.n	8010378 <_scanf_float+0x18c>
 8010426:	6822      	ldr	r2, [r4, #0]
 8010428:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801042c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010430:	d006      	beq.n	8010440 <_scanf_float+0x254>
 8010432:	0550      	lsls	r0, r2, #21
 8010434:	f57f af0c 	bpl.w	8010250 <_scanf_float+0x64>
 8010438:	f1b9 0f00 	cmp.w	r9, #0
 801043c:	f43f af0f 	beq.w	801025e <_scanf_float+0x72>
 8010440:	0591      	lsls	r1, r2, #22
 8010442:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010446:	bf58      	it	pl
 8010448:	9901      	ldrpl	r1, [sp, #4]
 801044a:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801044e:	bf58      	it	pl
 8010450:	eba9 0101 	subpl.w	r1, r9, r1
 8010454:	6022      	str	r2, [r4, #0]
 8010456:	f04f 0900 	mov.w	r9, #0
 801045a:	bf58      	it	pl
 801045c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010460:	e78a      	b.n	8010378 <_scanf_float+0x18c>
 8010462:	f04f 0a03 	mov.w	sl, #3
 8010466:	e787      	b.n	8010378 <_scanf_float+0x18c>
 8010468:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801046c:	4639      	mov	r1, r7
 801046e:	4640      	mov	r0, r8
 8010470:	4798      	blx	r3
 8010472:	2800      	cmp	r0, #0
 8010474:	f43f aedf 	beq.w	8010236 <_scanf_float+0x4a>
 8010478:	e6ea      	b.n	8010250 <_scanf_float+0x64>
 801047a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801047e:	463a      	mov	r2, r7
 8010480:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010484:	4640      	mov	r0, r8
 8010486:	4798      	blx	r3
 8010488:	6923      	ldr	r3, [r4, #16]
 801048a:	3b01      	subs	r3, #1
 801048c:	6123      	str	r3, [r4, #16]
 801048e:	e6ec      	b.n	801026a <_scanf_float+0x7e>
 8010490:	1e6b      	subs	r3, r5, #1
 8010492:	2b06      	cmp	r3, #6
 8010494:	d825      	bhi.n	80104e2 <_scanf_float+0x2f6>
 8010496:	2d02      	cmp	r5, #2
 8010498:	d836      	bhi.n	8010508 <_scanf_float+0x31c>
 801049a:	455e      	cmp	r6, fp
 801049c:	f67f aee8 	bls.w	8010270 <_scanf_float+0x84>
 80104a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80104a4:	463a      	mov	r2, r7
 80104a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80104aa:	4640      	mov	r0, r8
 80104ac:	4798      	blx	r3
 80104ae:	6923      	ldr	r3, [r4, #16]
 80104b0:	3b01      	subs	r3, #1
 80104b2:	6123      	str	r3, [r4, #16]
 80104b4:	e7f1      	b.n	801049a <_scanf_float+0x2ae>
 80104b6:	9802      	ldr	r0, [sp, #8]
 80104b8:	463a      	mov	r2, r7
 80104ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80104be:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80104c2:	9002      	str	r0, [sp, #8]
 80104c4:	4640      	mov	r0, r8
 80104c6:	4798      	blx	r3
 80104c8:	6923      	ldr	r3, [r4, #16]
 80104ca:	3b01      	subs	r3, #1
 80104cc:	6123      	str	r3, [r4, #16]
 80104ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80104d2:	fa5f fa8a 	uxtb.w	sl, sl
 80104d6:	f1ba 0f02 	cmp.w	sl, #2
 80104da:	d1ec      	bne.n	80104b6 <_scanf_float+0x2ca>
 80104dc:	3d03      	subs	r5, #3
 80104de:	b2ed      	uxtb	r5, r5
 80104e0:	1b76      	subs	r6, r6, r5
 80104e2:	6823      	ldr	r3, [r4, #0]
 80104e4:	05da      	lsls	r2, r3, #23
 80104e6:	d52e      	bpl.n	8010546 <_scanf_float+0x35a>
 80104e8:	055b      	lsls	r3, r3, #21
 80104ea:	d510      	bpl.n	801050e <_scanf_float+0x322>
 80104ec:	455e      	cmp	r6, fp
 80104ee:	f67f aebf 	bls.w	8010270 <_scanf_float+0x84>
 80104f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80104f6:	463a      	mov	r2, r7
 80104f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80104fc:	4640      	mov	r0, r8
 80104fe:	4798      	blx	r3
 8010500:	6923      	ldr	r3, [r4, #16]
 8010502:	3b01      	subs	r3, #1
 8010504:	6123      	str	r3, [r4, #16]
 8010506:	e7f1      	b.n	80104ec <_scanf_float+0x300>
 8010508:	46aa      	mov	sl, r5
 801050a:	9602      	str	r6, [sp, #8]
 801050c:	e7df      	b.n	80104ce <_scanf_float+0x2e2>
 801050e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010512:	1e75      	subs	r5, r6, #1
 8010514:	6923      	ldr	r3, [r4, #16]
 8010516:	2965      	cmp	r1, #101	; 0x65
 8010518:	f103 33ff 	add.w	r3, r3, #4294967295
 801051c:	6123      	str	r3, [r4, #16]
 801051e:	d00c      	beq.n	801053a <_scanf_float+0x34e>
 8010520:	2945      	cmp	r1, #69	; 0x45
 8010522:	d00a      	beq.n	801053a <_scanf_float+0x34e>
 8010524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010528:	463a      	mov	r2, r7
 801052a:	4640      	mov	r0, r8
 801052c:	1eb5      	subs	r5, r6, #2
 801052e:	4798      	blx	r3
 8010530:	6923      	ldr	r3, [r4, #16]
 8010532:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010536:	3b01      	subs	r3, #1
 8010538:	6123      	str	r3, [r4, #16]
 801053a:	462e      	mov	r6, r5
 801053c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010540:	463a      	mov	r2, r7
 8010542:	4640      	mov	r0, r8
 8010544:	4798      	blx	r3
 8010546:	6825      	ldr	r5, [r4, #0]
 8010548:	f015 0510 	ands.w	r5, r5, #16
 801054c:	d159      	bne.n	8010602 <_scanf_float+0x416>
 801054e:	7035      	strb	r5, [r6, #0]
 8010550:	6823      	ldr	r3, [r4, #0]
 8010552:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801055a:	d11b      	bne.n	8010594 <_scanf_float+0x3a8>
 801055c:	9b01      	ldr	r3, [sp, #4]
 801055e:	454b      	cmp	r3, r9
 8010560:	eba3 0209 	sub.w	r2, r3, r9
 8010564:	d123      	bne.n	80105ae <_scanf_float+0x3c2>
 8010566:	2200      	movs	r2, #0
 8010568:	4659      	mov	r1, fp
 801056a:	4640      	mov	r0, r8
 801056c:	f000 febe 	bl	80112ec <_strtod_r>
 8010570:	6822      	ldr	r2, [r4, #0]
 8010572:	9b03      	ldr	r3, [sp, #12]
 8010574:	f012 0f02 	tst.w	r2, #2
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	ec57 6b10 	vmov	r6, r7, d0
 801057e:	d021      	beq.n	80105c4 <_scanf_float+0x3d8>
 8010580:	1d1a      	adds	r2, r3, #4
 8010582:	9903      	ldr	r1, [sp, #12]
 8010584:	600a      	str	r2, [r1, #0]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	e9c3 6700 	strd	r6, r7, [r3]
 801058c:	68e3      	ldr	r3, [r4, #12]
 801058e:	3301      	adds	r3, #1
 8010590:	60e3      	str	r3, [r4, #12]
 8010592:	e66e      	b.n	8010272 <_scanf_float+0x86>
 8010594:	9b04      	ldr	r3, [sp, #16]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d0e5      	beq.n	8010566 <_scanf_float+0x37a>
 801059a:	9905      	ldr	r1, [sp, #20]
 801059c:	230a      	movs	r3, #10
 801059e:	462a      	mov	r2, r5
 80105a0:	4640      	mov	r0, r8
 80105a2:	3101      	adds	r1, #1
 80105a4:	f000 ff2a 	bl	80113fc <_strtol_r>
 80105a8:	9b04      	ldr	r3, [sp, #16]
 80105aa:	9e05      	ldr	r6, [sp, #20]
 80105ac:	1ac2      	subs	r2, r0, r3
 80105ae:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80105b2:	4915      	ldr	r1, [pc, #84]	; (8010608 <_scanf_float+0x41c>)
 80105b4:	429e      	cmp	r6, r3
 80105b6:	bf28      	it	cs
 80105b8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80105bc:	4630      	mov	r0, r6
 80105be:	f000 f855 	bl	801066c <siprintf>
 80105c2:	e7d0      	b.n	8010566 <_scanf_float+0x37a>
 80105c4:	9903      	ldr	r1, [sp, #12]
 80105c6:	f012 0f04 	tst.w	r2, #4
 80105ca:	f103 0204 	add.w	r2, r3, #4
 80105ce:	600a      	str	r2, [r1, #0]
 80105d0:	d1d9      	bne.n	8010586 <_scanf_float+0x39a>
 80105d2:	f8d3 8000 	ldr.w	r8, [r3]
 80105d6:	ee10 2a10 	vmov	r2, s0
 80105da:	463b      	mov	r3, r7
 80105dc:	ee10 0a10 	vmov	r0, s0
 80105e0:	4639      	mov	r1, r7
 80105e2:	f7f0 faa7 	bl	8000b34 <__aeabi_dcmpun>
 80105e6:	b128      	cbz	r0, 80105f4 <_scanf_float+0x408>
 80105e8:	4808      	ldr	r0, [pc, #32]	; (801060c <_scanf_float+0x420>)
 80105ea:	f000 f839 	bl	8010660 <nanf>
 80105ee:	ed88 0a00 	vstr	s0, [r8]
 80105f2:	e7cb      	b.n	801058c <_scanf_float+0x3a0>
 80105f4:	4630      	mov	r0, r6
 80105f6:	4639      	mov	r1, r7
 80105f8:	f7f0 fafa 	bl	8000bf0 <__aeabi_d2f>
 80105fc:	f8c8 0000 	str.w	r0, [r8]
 8010600:	e7c4      	b.n	801058c <_scanf_float+0x3a0>
 8010602:	2500      	movs	r5, #0
 8010604:	e635      	b.n	8010272 <_scanf_float+0x86>
 8010606:	bf00      	nop
 8010608:	0806922c 	.word	0x0806922c
 801060c:	080696a0 	.word	0x080696a0

08010610 <iprintf>:
 8010610:	b40f      	push	{r0, r1, r2, r3}
 8010612:	4b0a      	ldr	r3, [pc, #40]	; (801063c <iprintf+0x2c>)
 8010614:	b513      	push	{r0, r1, r4, lr}
 8010616:	681c      	ldr	r4, [r3, #0]
 8010618:	b124      	cbz	r4, 8010624 <iprintf+0x14>
 801061a:	69a3      	ldr	r3, [r4, #24]
 801061c:	b913      	cbnz	r3, 8010624 <iprintf+0x14>
 801061e:	4620      	mov	r0, r4
 8010620:	f001 fdc6 	bl	80121b0 <__sinit>
 8010624:	ab05      	add	r3, sp, #20
 8010626:	9a04      	ldr	r2, [sp, #16]
 8010628:	68a1      	ldr	r1, [r4, #8]
 801062a:	4620      	mov	r0, r4
 801062c:	9301      	str	r3, [sp, #4]
 801062e:	f003 f88f 	bl	8013750 <_vfiprintf_r>
 8010632:	b002      	add	sp, #8
 8010634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010638:	b004      	add	sp, #16
 801063a:	4770      	bx	lr
 801063c:	200007d8 	.word	0x200007d8

08010640 <_sbrk_r>:
 8010640:	b538      	push	{r3, r4, r5, lr}
 8010642:	2300      	movs	r3, #0
 8010644:	4d05      	ldr	r5, [pc, #20]	; (801065c <_sbrk_r+0x1c>)
 8010646:	4604      	mov	r4, r0
 8010648:	4608      	mov	r0, r1
 801064a:	602b      	str	r3, [r5, #0]
 801064c:	f7f1 facc 	bl	8001be8 <_sbrk>
 8010650:	1c43      	adds	r3, r0, #1
 8010652:	d102      	bne.n	801065a <_sbrk_r+0x1a>
 8010654:	682b      	ldr	r3, [r5, #0]
 8010656:	b103      	cbz	r3, 801065a <_sbrk_r+0x1a>
 8010658:	6023      	str	r3, [r4, #0]
 801065a:	bd38      	pop	{r3, r4, r5, pc}
 801065c:	20001ef4 	.word	0x20001ef4

08010660 <nanf>:
 8010660:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010668 <nanf+0x8>
 8010664:	4770      	bx	lr
 8010666:	bf00      	nop
 8010668:	7fc00000 	.word	0x7fc00000

0801066c <siprintf>:
 801066c:	b40e      	push	{r1, r2, r3}
 801066e:	b500      	push	{lr}
 8010670:	b09c      	sub	sp, #112	; 0x70
 8010672:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010676:	ab1d      	add	r3, sp, #116	; 0x74
 8010678:	9002      	str	r0, [sp, #8]
 801067a:	9006      	str	r0, [sp, #24]
 801067c:	9107      	str	r1, [sp, #28]
 801067e:	9104      	str	r1, [sp, #16]
 8010680:	4808      	ldr	r0, [pc, #32]	; (80106a4 <siprintf+0x38>)
 8010682:	4909      	ldr	r1, [pc, #36]	; (80106a8 <siprintf+0x3c>)
 8010684:	f853 2b04 	ldr.w	r2, [r3], #4
 8010688:	9105      	str	r1, [sp, #20]
 801068a:	a902      	add	r1, sp, #8
 801068c:	6800      	ldr	r0, [r0, #0]
 801068e:	9301      	str	r3, [sp, #4]
 8010690:	f002 ff34 	bl	80134fc <_svfiprintf_r>
 8010694:	9b02      	ldr	r3, [sp, #8]
 8010696:	2200      	movs	r2, #0
 8010698:	701a      	strb	r2, [r3, #0]
 801069a:	b01c      	add	sp, #112	; 0x70
 801069c:	f85d eb04 	ldr.w	lr, [sp], #4
 80106a0:	b003      	add	sp, #12
 80106a2:	4770      	bx	lr
 80106a4:	200007d8 	.word	0x200007d8
 80106a8:	ffff0208 	.word	0xffff0208

080106ac <sulp>:
 80106ac:	b570      	push	{r4, r5, r6, lr}
 80106ae:	4604      	mov	r4, r0
 80106b0:	460d      	mov	r5, r1
 80106b2:	4616      	mov	r6, r2
 80106b4:	ec45 4b10 	vmov	d0, r4, r5
 80106b8:	f002 fd32 	bl	8013120 <__ulp>
 80106bc:	ec51 0b10 	vmov	r0, r1, d0
 80106c0:	b17e      	cbz	r6, 80106e2 <sulp+0x36>
 80106c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80106c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	dd09      	ble.n	80106e2 <sulp+0x36>
 80106ce:	051b      	lsls	r3, r3, #20
 80106d0:	2400      	movs	r4, #0
 80106d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80106d6:	4622      	mov	r2, r4
 80106d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80106dc:	462b      	mov	r3, r5
 80106de:	f7ef ff8f 	bl	8000600 <__aeabi_dmul>
 80106e2:	bd70      	pop	{r4, r5, r6, pc}
 80106e4:	0000      	movs	r0, r0
	...

080106e8 <_strtod_l>:
 80106e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ec:	461f      	mov	r7, r3
 80106ee:	2300      	movs	r3, #0
 80106f0:	4604      	mov	r4, r0
 80106f2:	4688      	mov	r8, r1
 80106f4:	f04f 0a00 	mov.w	sl, #0
 80106f8:	f04f 0b00 	mov.w	fp, #0
 80106fc:	ed2d 8b02 	vpush	{d8}
 8010700:	b09d      	sub	sp, #116	; 0x74
 8010702:	9318      	str	r3, [sp, #96]	; 0x60
 8010704:	4b9f      	ldr	r3, [pc, #636]	; (8010984 <_strtod_l+0x29c>)
 8010706:	9213      	str	r2, [sp, #76]	; 0x4c
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4618      	mov	r0, r3
 801070c:	9305      	str	r3, [sp, #20]
 801070e:	f7ef fdb3 	bl	8000278 <strlen>
 8010712:	4605      	mov	r5, r0
 8010714:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801071a:	781a      	ldrb	r2, [r3, #0]
 801071c:	2a2b      	cmp	r2, #43	; 0x2b
 801071e:	d04e      	beq.n	80107be <_strtod_l+0xd6>
 8010720:	d83b      	bhi.n	801079a <_strtod_l+0xb2>
 8010722:	2a0d      	cmp	r2, #13
 8010724:	d834      	bhi.n	8010790 <_strtod_l+0xa8>
 8010726:	2a08      	cmp	r2, #8
 8010728:	d834      	bhi.n	8010794 <_strtod_l+0xac>
 801072a:	2a00      	cmp	r2, #0
 801072c:	d03e      	beq.n	80107ac <_strtod_l+0xc4>
 801072e:	2300      	movs	r3, #0
 8010730:	930a      	str	r3, [sp, #40]	; 0x28
 8010732:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010734:	7833      	ldrb	r3, [r6, #0]
 8010736:	2b30      	cmp	r3, #48	; 0x30
 8010738:	f040 80b0 	bne.w	801089c <_strtod_l+0x1b4>
 801073c:	7873      	ldrb	r3, [r6, #1]
 801073e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010742:	2b58      	cmp	r3, #88	; 0x58
 8010744:	d168      	bne.n	8010818 <_strtod_l+0x130>
 8010746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010748:	a917      	add	r1, sp, #92	; 0x5c
 801074a:	9702      	str	r7, [sp, #8]
 801074c:	4620      	mov	r0, r4
 801074e:	9301      	str	r3, [sp, #4]
 8010750:	ab18      	add	r3, sp, #96	; 0x60
 8010752:	4a8d      	ldr	r2, [pc, #564]	; (8010988 <_strtod_l+0x2a0>)
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	ab19      	add	r3, sp, #100	; 0x64
 8010758:	f001 fe2e 	bl	80123b8 <__gethex>
 801075c:	f010 0707 	ands.w	r7, r0, #7
 8010760:	4605      	mov	r5, r0
 8010762:	d005      	beq.n	8010770 <_strtod_l+0x88>
 8010764:	2f06      	cmp	r7, #6
 8010766:	d12c      	bne.n	80107c2 <_strtod_l+0xda>
 8010768:	3601      	adds	r6, #1
 801076a:	2300      	movs	r3, #0
 801076c:	9617      	str	r6, [sp, #92]	; 0x5c
 801076e:	930a      	str	r3, [sp, #40]	; 0x28
 8010770:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010772:	2b00      	cmp	r3, #0
 8010774:	f040 858e 	bne.w	8011294 <_strtod_l+0xbac>
 8010778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801077a:	b1eb      	cbz	r3, 80107b8 <_strtod_l+0xd0>
 801077c:	4652      	mov	r2, sl
 801077e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010782:	ec43 2b10 	vmov	d0, r2, r3
 8010786:	b01d      	add	sp, #116	; 0x74
 8010788:	ecbd 8b02 	vpop	{d8}
 801078c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010790:	2a20      	cmp	r2, #32
 8010792:	d1cc      	bne.n	801072e <_strtod_l+0x46>
 8010794:	3301      	adds	r3, #1
 8010796:	9317      	str	r3, [sp, #92]	; 0x5c
 8010798:	e7be      	b.n	8010718 <_strtod_l+0x30>
 801079a:	2a2d      	cmp	r2, #45	; 0x2d
 801079c:	d1c7      	bne.n	801072e <_strtod_l+0x46>
 801079e:	2201      	movs	r2, #1
 80107a0:	920a      	str	r2, [sp, #40]	; 0x28
 80107a2:	1c5a      	adds	r2, r3, #1
 80107a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80107a6:	785b      	ldrb	r3, [r3, #1]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d1c2      	bne.n	8010732 <_strtod_l+0x4a>
 80107ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	f040 856c 	bne.w	8011290 <_strtod_l+0xba8>
 80107b8:	4652      	mov	r2, sl
 80107ba:	465b      	mov	r3, fp
 80107bc:	e7e1      	b.n	8010782 <_strtod_l+0x9a>
 80107be:	2200      	movs	r2, #0
 80107c0:	e7ee      	b.n	80107a0 <_strtod_l+0xb8>
 80107c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80107c4:	b13a      	cbz	r2, 80107d6 <_strtod_l+0xee>
 80107c6:	2135      	movs	r1, #53	; 0x35
 80107c8:	a81a      	add	r0, sp, #104	; 0x68
 80107ca:	f002 fdb2 	bl	8013332 <__copybits>
 80107ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80107d0:	4620      	mov	r0, r4
 80107d2:	f002 f96d 	bl	8012ab0 <_Bfree>
 80107d6:	3f01      	subs	r7, #1
 80107d8:	2f04      	cmp	r7, #4
 80107da:	d806      	bhi.n	80107ea <_strtod_l+0x102>
 80107dc:	e8df f007 	tbb	[pc, r7]
 80107e0:	1714030a 	.word	0x1714030a
 80107e4:	0a          	.byte	0x0a
 80107e5:	00          	.byte	0x00
 80107e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80107ea:	0728      	lsls	r0, r5, #28
 80107ec:	d5c0      	bpl.n	8010770 <_strtod_l+0x88>
 80107ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80107f2:	e7bd      	b.n	8010770 <_strtod_l+0x88>
 80107f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80107f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80107fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80107fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010802:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010806:	e7f0      	b.n	80107ea <_strtod_l+0x102>
 8010808:	f8df b180 	ldr.w	fp, [pc, #384]	; 801098c <_strtod_l+0x2a4>
 801080c:	e7ed      	b.n	80107ea <_strtod_l+0x102>
 801080e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010812:	f04f 3aff 	mov.w	sl, #4294967295
 8010816:	e7e8      	b.n	80107ea <_strtod_l+0x102>
 8010818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801081a:	1c5a      	adds	r2, r3, #1
 801081c:	9217      	str	r2, [sp, #92]	; 0x5c
 801081e:	785b      	ldrb	r3, [r3, #1]
 8010820:	2b30      	cmp	r3, #48	; 0x30
 8010822:	d0f9      	beq.n	8010818 <_strtod_l+0x130>
 8010824:	2b00      	cmp	r3, #0
 8010826:	d0a3      	beq.n	8010770 <_strtod_l+0x88>
 8010828:	2301      	movs	r3, #1
 801082a:	f04f 0900 	mov.w	r9, #0
 801082e:	9304      	str	r3, [sp, #16]
 8010830:	220a      	movs	r2, #10
 8010832:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010834:	464f      	mov	r7, r9
 8010836:	f8cd 901c 	str.w	r9, [sp, #28]
 801083a:	9308      	str	r3, [sp, #32]
 801083c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801083e:	7806      	ldrb	r6, [r0, #0]
 8010840:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010844:	b2d9      	uxtb	r1, r3
 8010846:	2909      	cmp	r1, #9
 8010848:	d92a      	bls.n	80108a0 <_strtod_l+0x1b8>
 801084a:	462a      	mov	r2, r5
 801084c:	9905      	ldr	r1, [sp, #20]
 801084e:	f003 f8fa 	bl	8013a46 <strncmp>
 8010852:	b3a0      	cbz	r0, 80108be <_strtod_l+0x1d6>
 8010854:	2000      	movs	r0, #0
 8010856:	4632      	mov	r2, r6
 8010858:	463d      	mov	r5, r7
 801085a:	4603      	mov	r3, r0
 801085c:	9005      	str	r0, [sp, #20]
 801085e:	2a65      	cmp	r2, #101	; 0x65
 8010860:	d001      	beq.n	8010866 <_strtod_l+0x17e>
 8010862:	2a45      	cmp	r2, #69	; 0x45
 8010864:	d118      	bne.n	8010898 <_strtod_l+0x1b0>
 8010866:	b91d      	cbnz	r5, 8010870 <_strtod_l+0x188>
 8010868:	9a04      	ldr	r2, [sp, #16]
 801086a:	4302      	orrs	r2, r0
 801086c:	d09e      	beq.n	80107ac <_strtod_l+0xc4>
 801086e:	2500      	movs	r5, #0
 8010870:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010874:	f108 0201 	add.w	r2, r8, #1
 8010878:	9217      	str	r2, [sp, #92]	; 0x5c
 801087a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801087e:	2a2b      	cmp	r2, #43	; 0x2b
 8010880:	d075      	beq.n	801096e <_strtod_l+0x286>
 8010882:	2a2d      	cmp	r2, #45	; 0x2d
 8010884:	d07b      	beq.n	801097e <_strtod_l+0x296>
 8010886:	f04f 0c00 	mov.w	ip, #0
 801088a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801088e:	2909      	cmp	r1, #9
 8010890:	f240 8082 	bls.w	8010998 <_strtod_l+0x2b0>
 8010894:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010898:	2600      	movs	r6, #0
 801089a:	e09d      	b.n	80109d8 <_strtod_l+0x2f0>
 801089c:	2300      	movs	r3, #0
 801089e:	e7c4      	b.n	801082a <_strtod_l+0x142>
 80108a0:	2f08      	cmp	r7, #8
 80108a2:	f100 0001 	add.w	r0, r0, #1
 80108a6:	f107 0701 	add.w	r7, r7, #1
 80108aa:	bfd4      	ite	le
 80108ac:	9907      	ldrle	r1, [sp, #28]
 80108ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 80108b2:	9017      	str	r0, [sp, #92]	; 0x5c
 80108b4:	bfdc      	itt	le
 80108b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80108ba:	9307      	strle	r3, [sp, #28]
 80108bc:	e7be      	b.n	801083c <_strtod_l+0x154>
 80108be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108c0:	195a      	adds	r2, r3, r5
 80108c2:	9217      	str	r2, [sp, #92]	; 0x5c
 80108c4:	5d5a      	ldrb	r2, [r3, r5]
 80108c6:	2f00      	cmp	r7, #0
 80108c8:	d036      	beq.n	8010938 <_strtod_l+0x250>
 80108ca:	463d      	mov	r5, r7
 80108cc:	9005      	str	r0, [sp, #20]
 80108ce:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80108d2:	2b09      	cmp	r3, #9
 80108d4:	d912      	bls.n	80108fc <_strtod_l+0x214>
 80108d6:	2301      	movs	r3, #1
 80108d8:	e7c1      	b.n	801085e <_strtod_l+0x176>
 80108da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108dc:	3001      	adds	r0, #1
 80108de:	1c5a      	adds	r2, r3, #1
 80108e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80108e2:	785a      	ldrb	r2, [r3, #1]
 80108e4:	2a30      	cmp	r2, #48	; 0x30
 80108e6:	d0f8      	beq.n	80108da <_strtod_l+0x1f2>
 80108e8:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80108ec:	2b08      	cmp	r3, #8
 80108ee:	f200 84d6 	bhi.w	801129e <_strtod_l+0xbb6>
 80108f2:	9005      	str	r0, [sp, #20]
 80108f4:	2000      	movs	r0, #0
 80108f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108f8:	4605      	mov	r5, r0
 80108fa:	9308      	str	r3, [sp, #32]
 80108fc:	3a30      	subs	r2, #48	; 0x30
 80108fe:	f100 0301 	add.w	r3, r0, #1
 8010902:	d013      	beq.n	801092c <_strtod_l+0x244>
 8010904:	9905      	ldr	r1, [sp, #20]
 8010906:	eb00 0e05 	add.w	lr, r0, r5
 801090a:	4419      	add	r1, r3
 801090c:	462b      	mov	r3, r5
 801090e:	9105      	str	r1, [sp, #20]
 8010910:	210a      	movs	r1, #10
 8010912:	4573      	cmp	r3, lr
 8010914:	d112      	bne.n	801093c <_strtod_l+0x254>
 8010916:	182b      	adds	r3, r5, r0
 8010918:	3501      	adds	r5, #1
 801091a:	2b08      	cmp	r3, #8
 801091c:	4405      	add	r5, r0
 801091e:	dc1c      	bgt.n	801095a <_strtod_l+0x272>
 8010920:	9907      	ldr	r1, [sp, #28]
 8010922:	230a      	movs	r3, #10
 8010924:	fb03 2301 	mla	r3, r3, r1, r2
 8010928:	9307      	str	r3, [sp, #28]
 801092a:	2300      	movs	r3, #0
 801092c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801092e:	4618      	mov	r0, r3
 8010930:	1c51      	adds	r1, r2, #1
 8010932:	9117      	str	r1, [sp, #92]	; 0x5c
 8010934:	7852      	ldrb	r2, [r2, #1]
 8010936:	e7ca      	b.n	80108ce <_strtod_l+0x1e6>
 8010938:	4638      	mov	r0, r7
 801093a:	e7d3      	b.n	80108e4 <_strtod_l+0x1fc>
 801093c:	2b08      	cmp	r3, #8
 801093e:	dc04      	bgt.n	801094a <_strtod_l+0x262>
 8010940:	9e07      	ldr	r6, [sp, #28]
 8010942:	434e      	muls	r6, r1
 8010944:	9607      	str	r6, [sp, #28]
 8010946:	3301      	adds	r3, #1
 8010948:	e7e3      	b.n	8010912 <_strtod_l+0x22a>
 801094a:	f103 0c01 	add.w	ip, r3, #1
 801094e:	f1bc 0f10 	cmp.w	ip, #16
 8010952:	bfd8      	it	le
 8010954:	fb01 f909 	mulle.w	r9, r1, r9
 8010958:	e7f5      	b.n	8010946 <_strtod_l+0x25e>
 801095a:	2d10      	cmp	r5, #16
 801095c:	bfdc      	itt	le
 801095e:	230a      	movle	r3, #10
 8010960:	fb03 2909 	mlale	r9, r3, r9, r2
 8010964:	e7e1      	b.n	801092a <_strtod_l+0x242>
 8010966:	2300      	movs	r3, #0
 8010968:	9305      	str	r3, [sp, #20]
 801096a:	2301      	movs	r3, #1
 801096c:	e77c      	b.n	8010868 <_strtod_l+0x180>
 801096e:	f04f 0c00 	mov.w	ip, #0
 8010972:	f108 0202 	add.w	r2, r8, #2
 8010976:	9217      	str	r2, [sp, #92]	; 0x5c
 8010978:	f898 2002 	ldrb.w	r2, [r8, #2]
 801097c:	e785      	b.n	801088a <_strtod_l+0x1a2>
 801097e:	f04f 0c01 	mov.w	ip, #1
 8010982:	e7f6      	b.n	8010972 <_strtod_l+0x28a>
 8010984:	080694e4 	.word	0x080694e4
 8010988:	08069234 	.word	0x08069234
 801098c:	7ff00000 	.word	0x7ff00000
 8010990:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010992:	1c51      	adds	r1, r2, #1
 8010994:	9117      	str	r1, [sp, #92]	; 0x5c
 8010996:	7852      	ldrb	r2, [r2, #1]
 8010998:	2a30      	cmp	r2, #48	; 0x30
 801099a:	d0f9      	beq.n	8010990 <_strtod_l+0x2a8>
 801099c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80109a0:	2908      	cmp	r1, #8
 80109a2:	f63f af79 	bhi.w	8010898 <_strtod_l+0x1b0>
 80109a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80109aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80109ac:	9206      	str	r2, [sp, #24]
 80109ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80109b0:	1c51      	adds	r1, r2, #1
 80109b2:	9117      	str	r1, [sp, #92]	; 0x5c
 80109b4:	7852      	ldrb	r2, [r2, #1]
 80109b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80109ba:	2e09      	cmp	r6, #9
 80109bc:	d937      	bls.n	8010a2e <_strtod_l+0x346>
 80109be:	9e06      	ldr	r6, [sp, #24]
 80109c0:	1b89      	subs	r1, r1, r6
 80109c2:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80109c6:	2908      	cmp	r1, #8
 80109c8:	dc02      	bgt.n	80109d0 <_strtod_l+0x2e8>
 80109ca:	4576      	cmp	r6, lr
 80109cc:	bfa8      	it	ge
 80109ce:	4676      	movge	r6, lr
 80109d0:	f1bc 0f00 	cmp.w	ip, #0
 80109d4:	d000      	beq.n	80109d8 <_strtod_l+0x2f0>
 80109d6:	4276      	negs	r6, r6
 80109d8:	2d00      	cmp	r5, #0
 80109da:	d14d      	bne.n	8010a78 <_strtod_l+0x390>
 80109dc:	9904      	ldr	r1, [sp, #16]
 80109de:	4301      	orrs	r1, r0
 80109e0:	f47f aec6 	bne.w	8010770 <_strtod_l+0x88>
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f47f aee1 	bne.w	80107ac <_strtod_l+0xc4>
 80109ea:	2a69      	cmp	r2, #105	; 0x69
 80109ec:	d027      	beq.n	8010a3e <_strtod_l+0x356>
 80109ee:	dc24      	bgt.n	8010a3a <_strtod_l+0x352>
 80109f0:	2a49      	cmp	r2, #73	; 0x49
 80109f2:	d024      	beq.n	8010a3e <_strtod_l+0x356>
 80109f4:	2a4e      	cmp	r2, #78	; 0x4e
 80109f6:	f47f aed9 	bne.w	80107ac <_strtod_l+0xc4>
 80109fa:	499f      	ldr	r1, [pc, #636]	; (8010c78 <_strtod_l+0x590>)
 80109fc:	a817      	add	r0, sp, #92	; 0x5c
 80109fe:	f001 ff33 	bl	8012868 <__match>
 8010a02:	2800      	cmp	r0, #0
 8010a04:	f43f aed2 	beq.w	80107ac <_strtod_l+0xc4>
 8010a08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	2b28      	cmp	r3, #40	; 0x28
 8010a0e:	d12d      	bne.n	8010a6c <_strtod_l+0x384>
 8010a10:	aa1a      	add	r2, sp, #104	; 0x68
 8010a12:	499a      	ldr	r1, [pc, #616]	; (8010c7c <_strtod_l+0x594>)
 8010a14:	a817      	add	r0, sp, #92	; 0x5c
 8010a16:	f001 ff3b 	bl	8012890 <__hexnan>
 8010a1a:	2805      	cmp	r0, #5
 8010a1c:	d126      	bne.n	8010a6c <_strtod_l+0x384>
 8010a1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010a24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010a28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010a2c:	e6a0      	b.n	8010770 <_strtod_l+0x88>
 8010a2e:	210a      	movs	r1, #10
 8010a30:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010a34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010a38:	e7b9      	b.n	80109ae <_strtod_l+0x2c6>
 8010a3a:	2a6e      	cmp	r2, #110	; 0x6e
 8010a3c:	e7db      	b.n	80109f6 <_strtod_l+0x30e>
 8010a3e:	4990      	ldr	r1, [pc, #576]	; (8010c80 <_strtod_l+0x598>)
 8010a40:	a817      	add	r0, sp, #92	; 0x5c
 8010a42:	f001 ff11 	bl	8012868 <__match>
 8010a46:	2800      	cmp	r0, #0
 8010a48:	f43f aeb0 	beq.w	80107ac <_strtod_l+0xc4>
 8010a4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a4e:	a817      	add	r0, sp, #92	; 0x5c
 8010a50:	498c      	ldr	r1, [pc, #560]	; (8010c84 <_strtod_l+0x59c>)
 8010a52:	3b01      	subs	r3, #1
 8010a54:	9317      	str	r3, [sp, #92]	; 0x5c
 8010a56:	f001 ff07 	bl	8012868 <__match>
 8010a5a:	b910      	cbnz	r0, 8010a62 <_strtod_l+0x37a>
 8010a5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a5e:	3301      	adds	r3, #1
 8010a60:	9317      	str	r3, [sp, #92]	; 0x5c
 8010a62:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010c94 <_strtod_l+0x5ac>
 8010a66:	f04f 0a00 	mov.w	sl, #0
 8010a6a:	e681      	b.n	8010770 <_strtod_l+0x88>
 8010a6c:	4886      	ldr	r0, [pc, #536]	; (8010c88 <_strtod_l+0x5a0>)
 8010a6e:	f002 ff9f 	bl	80139b0 <nan>
 8010a72:	ec5b ab10 	vmov	sl, fp, d0
 8010a76:	e67b      	b.n	8010770 <_strtod_l+0x88>
 8010a78:	9b05      	ldr	r3, [sp, #20]
 8010a7a:	2f00      	cmp	r7, #0
 8010a7c:	bf08      	it	eq
 8010a7e:	462f      	moveq	r7, r5
 8010a80:	2d10      	cmp	r5, #16
 8010a82:	9807      	ldr	r0, [sp, #28]
 8010a84:	eba6 0303 	sub.w	r3, r6, r3
 8010a88:	46a8      	mov	r8, r5
 8010a8a:	bfa8      	it	ge
 8010a8c:	f04f 0810 	movge.w	r8, #16
 8010a90:	9306      	str	r3, [sp, #24]
 8010a92:	f7ef fd3b 	bl	800050c <__aeabi_ui2d>
 8010a96:	2d09      	cmp	r5, #9
 8010a98:	4682      	mov	sl, r0
 8010a9a:	468b      	mov	fp, r1
 8010a9c:	dd13      	ble.n	8010ac6 <_strtod_l+0x3de>
 8010a9e:	4b7b      	ldr	r3, [pc, #492]	; (8010c8c <_strtod_l+0x5a4>)
 8010aa0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010aa4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010aa8:	f7ef fdaa 	bl	8000600 <__aeabi_dmul>
 8010aac:	4682      	mov	sl, r0
 8010aae:	468b      	mov	fp, r1
 8010ab0:	4648      	mov	r0, r9
 8010ab2:	f7ef fd2b 	bl	800050c <__aeabi_ui2d>
 8010ab6:	4602      	mov	r2, r0
 8010ab8:	460b      	mov	r3, r1
 8010aba:	4650      	mov	r0, sl
 8010abc:	4659      	mov	r1, fp
 8010abe:	f7ef fbe9 	bl	8000294 <__adddf3>
 8010ac2:	4682      	mov	sl, r0
 8010ac4:	468b      	mov	fp, r1
 8010ac6:	2d0f      	cmp	r5, #15
 8010ac8:	dc38      	bgt.n	8010b3c <_strtod_l+0x454>
 8010aca:	9b06      	ldr	r3, [sp, #24]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	f43f ae4f 	beq.w	8010770 <_strtod_l+0x88>
 8010ad2:	dd24      	ble.n	8010b1e <_strtod_l+0x436>
 8010ad4:	2b16      	cmp	r3, #22
 8010ad6:	dc0b      	bgt.n	8010af0 <_strtod_l+0x408>
 8010ad8:	496c      	ldr	r1, [pc, #432]	; (8010c8c <_strtod_l+0x5a4>)
 8010ada:	4652      	mov	r2, sl
 8010adc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010ae0:	465b      	mov	r3, fp
 8010ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ae6:	f7ef fd8b 	bl	8000600 <__aeabi_dmul>
 8010aea:	4682      	mov	sl, r0
 8010aec:	468b      	mov	fp, r1
 8010aee:	e63f      	b.n	8010770 <_strtod_l+0x88>
 8010af0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010af4:	9a06      	ldr	r2, [sp, #24]
 8010af6:	4293      	cmp	r3, r2
 8010af8:	db20      	blt.n	8010b3c <_strtod_l+0x454>
 8010afa:	f1c5 050f 	rsb	r5, r5, #15
 8010afe:	4c63      	ldr	r4, [pc, #396]	; (8010c8c <_strtod_l+0x5a4>)
 8010b00:	4652      	mov	r2, sl
 8010b02:	465b      	mov	r3, fp
 8010b04:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b0c:	f7ef fd78 	bl	8000600 <__aeabi_dmul>
 8010b10:	9b06      	ldr	r3, [sp, #24]
 8010b12:	1b5d      	subs	r5, r3, r5
 8010b14:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010b18:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010b1c:	e7e3      	b.n	8010ae6 <_strtod_l+0x3fe>
 8010b1e:	9b06      	ldr	r3, [sp, #24]
 8010b20:	3316      	adds	r3, #22
 8010b22:	db0b      	blt.n	8010b3c <_strtod_l+0x454>
 8010b24:	9b05      	ldr	r3, [sp, #20]
 8010b26:	4650      	mov	r0, sl
 8010b28:	4659      	mov	r1, fp
 8010b2a:	1b9e      	subs	r6, r3, r6
 8010b2c:	4b57      	ldr	r3, [pc, #348]	; (8010c8c <_strtod_l+0x5a4>)
 8010b2e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010b32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010b36:	f7ef fe8d 	bl	8000854 <__aeabi_ddiv>
 8010b3a:	e7d6      	b.n	8010aea <_strtod_l+0x402>
 8010b3c:	eba5 0808 	sub.w	r8, r5, r8
 8010b40:	9b06      	ldr	r3, [sp, #24]
 8010b42:	4498      	add	r8, r3
 8010b44:	f1b8 0f00 	cmp.w	r8, #0
 8010b48:	dd74      	ble.n	8010c34 <_strtod_l+0x54c>
 8010b4a:	f018 030f 	ands.w	r3, r8, #15
 8010b4e:	d00a      	beq.n	8010b66 <_strtod_l+0x47e>
 8010b50:	494e      	ldr	r1, [pc, #312]	; (8010c8c <_strtod_l+0x5a4>)
 8010b52:	4652      	mov	r2, sl
 8010b54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b58:	465b      	mov	r3, fp
 8010b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b5e:	f7ef fd4f 	bl	8000600 <__aeabi_dmul>
 8010b62:	4682      	mov	sl, r0
 8010b64:	468b      	mov	fp, r1
 8010b66:	f038 080f 	bics.w	r8, r8, #15
 8010b6a:	d04f      	beq.n	8010c0c <_strtod_l+0x524>
 8010b6c:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010b70:	dd22      	ble.n	8010bb8 <_strtod_l+0x4d0>
 8010b72:	2500      	movs	r5, #0
 8010b74:	462e      	mov	r6, r5
 8010b76:	9507      	str	r5, [sp, #28]
 8010b78:	9505      	str	r5, [sp, #20]
 8010b7a:	2322      	movs	r3, #34	; 0x22
 8010b7c:	f8df b114 	ldr.w	fp, [pc, #276]	; 8010c94 <_strtod_l+0x5ac>
 8010b80:	f04f 0a00 	mov.w	sl, #0
 8010b84:	6023      	str	r3, [r4, #0]
 8010b86:	9b07      	ldr	r3, [sp, #28]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f43f adf1 	beq.w	8010770 <_strtod_l+0x88>
 8010b8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010b90:	4620      	mov	r0, r4
 8010b92:	f001 ff8d 	bl	8012ab0 <_Bfree>
 8010b96:	9905      	ldr	r1, [sp, #20]
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f001 ff89 	bl	8012ab0 <_Bfree>
 8010b9e:	4631      	mov	r1, r6
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	f001 ff85 	bl	8012ab0 <_Bfree>
 8010ba6:	9907      	ldr	r1, [sp, #28]
 8010ba8:	4620      	mov	r0, r4
 8010baa:	f001 ff81 	bl	8012ab0 <_Bfree>
 8010bae:	4629      	mov	r1, r5
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f001 ff7d 	bl	8012ab0 <_Bfree>
 8010bb6:	e5db      	b.n	8010770 <_strtod_l+0x88>
 8010bb8:	4b35      	ldr	r3, [pc, #212]	; (8010c90 <_strtod_l+0x5a8>)
 8010bba:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010bbe:	4650      	mov	r0, sl
 8010bc0:	4659      	mov	r1, fp
 8010bc2:	9304      	str	r3, [sp, #16]
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	4699      	mov	r9, r3
 8010bc8:	f1b8 0f01 	cmp.w	r8, #1
 8010bcc:	dc21      	bgt.n	8010c12 <_strtod_l+0x52a>
 8010bce:	b10b      	cbz	r3, 8010bd4 <_strtod_l+0x4ec>
 8010bd0:	4682      	mov	sl, r0
 8010bd2:	468b      	mov	fp, r1
 8010bd4:	4b2e      	ldr	r3, [pc, #184]	; (8010c90 <_strtod_l+0x5a8>)
 8010bd6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010bda:	4652      	mov	r2, sl
 8010bdc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010be0:	465b      	mov	r3, fp
 8010be2:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010be6:	f7ef fd0b 	bl	8000600 <__aeabi_dmul>
 8010bea:	4b2a      	ldr	r3, [pc, #168]	; (8010c94 <_strtod_l+0x5ac>)
 8010bec:	460a      	mov	r2, r1
 8010bee:	4682      	mov	sl, r0
 8010bf0:	400b      	ands	r3, r1
 8010bf2:	4929      	ldr	r1, [pc, #164]	; (8010c98 <_strtod_l+0x5b0>)
 8010bf4:	428b      	cmp	r3, r1
 8010bf6:	d8bc      	bhi.n	8010b72 <_strtod_l+0x48a>
 8010bf8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010bfc:	428b      	cmp	r3, r1
 8010bfe:	bf86      	itte	hi
 8010c00:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010c9c <_strtod_l+0x5b4>
 8010c04:	f04f 3aff 	movhi.w	sl, #4294967295
 8010c08:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	9304      	str	r3, [sp, #16]
 8010c10:	e083      	b.n	8010d1a <_strtod_l+0x632>
 8010c12:	f018 0f01 	tst.w	r8, #1
 8010c16:	d005      	beq.n	8010c24 <_strtod_l+0x53c>
 8010c18:	9b04      	ldr	r3, [sp, #16]
 8010c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1e:	f7ef fcef 	bl	8000600 <__aeabi_dmul>
 8010c22:	2301      	movs	r3, #1
 8010c24:	9a04      	ldr	r2, [sp, #16]
 8010c26:	f109 0901 	add.w	r9, r9, #1
 8010c2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010c2e:	3208      	adds	r2, #8
 8010c30:	9204      	str	r2, [sp, #16]
 8010c32:	e7c9      	b.n	8010bc8 <_strtod_l+0x4e0>
 8010c34:	d0ea      	beq.n	8010c0c <_strtod_l+0x524>
 8010c36:	f1c8 0800 	rsb	r8, r8, #0
 8010c3a:	f018 020f 	ands.w	r2, r8, #15
 8010c3e:	d00a      	beq.n	8010c56 <_strtod_l+0x56e>
 8010c40:	4b12      	ldr	r3, [pc, #72]	; (8010c8c <_strtod_l+0x5a4>)
 8010c42:	4650      	mov	r0, sl
 8010c44:	4659      	mov	r1, fp
 8010c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	f7ef fe01 	bl	8000854 <__aeabi_ddiv>
 8010c52:	4682      	mov	sl, r0
 8010c54:	468b      	mov	fp, r1
 8010c56:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010c5a:	d0d7      	beq.n	8010c0c <_strtod_l+0x524>
 8010c5c:	f1b8 0f1f 	cmp.w	r8, #31
 8010c60:	dd1e      	ble.n	8010ca0 <_strtod_l+0x5b8>
 8010c62:	2500      	movs	r5, #0
 8010c64:	462e      	mov	r6, r5
 8010c66:	9507      	str	r5, [sp, #28]
 8010c68:	9505      	str	r5, [sp, #20]
 8010c6a:	2322      	movs	r3, #34	; 0x22
 8010c6c:	f04f 0a00 	mov.w	sl, #0
 8010c70:	f04f 0b00 	mov.w	fp, #0
 8010c74:	6023      	str	r3, [r4, #0]
 8010c76:	e786      	b.n	8010b86 <_strtod_l+0x49e>
 8010c78:	08069205 	.word	0x08069205
 8010c7c:	08069248 	.word	0x08069248
 8010c80:	080691fd 	.word	0x080691fd
 8010c84:	0806938c 	.word	0x0806938c
 8010c88:	080696a0 	.word	0x080696a0
 8010c8c:	08069580 	.word	0x08069580
 8010c90:	08069558 	.word	0x08069558
 8010c94:	7ff00000 	.word	0x7ff00000
 8010c98:	7ca00000 	.word	0x7ca00000
 8010c9c:	7fefffff 	.word	0x7fefffff
 8010ca0:	f018 0310 	ands.w	r3, r8, #16
 8010ca4:	4650      	mov	r0, sl
 8010ca6:	4659      	mov	r1, fp
 8010ca8:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8011054 <_strtod_l+0x96c>
 8010cac:	bf18      	it	ne
 8010cae:	236a      	movne	r3, #106	; 0x6a
 8010cb0:	9304      	str	r3, [sp, #16]
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	f018 0f01 	tst.w	r8, #1
 8010cb8:	d004      	beq.n	8010cc4 <_strtod_l+0x5dc>
 8010cba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010cbe:	f7ef fc9f 	bl	8000600 <__aeabi_dmul>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010cc8:	f109 0908 	add.w	r9, r9, #8
 8010ccc:	d1f2      	bne.n	8010cb4 <_strtod_l+0x5cc>
 8010cce:	b10b      	cbz	r3, 8010cd4 <_strtod_l+0x5ec>
 8010cd0:	4682      	mov	sl, r0
 8010cd2:	468b      	mov	fp, r1
 8010cd4:	9b04      	ldr	r3, [sp, #16]
 8010cd6:	b1c3      	cbz	r3, 8010d0a <_strtod_l+0x622>
 8010cd8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010cdc:	4659      	mov	r1, fp
 8010cde:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	dd11      	ble.n	8010d0a <_strtod_l+0x622>
 8010ce6:	2b1f      	cmp	r3, #31
 8010ce8:	f340 8121 	ble.w	8010f2e <_strtod_l+0x846>
 8010cec:	2b34      	cmp	r3, #52	; 0x34
 8010cee:	f04f 0a00 	mov.w	sl, #0
 8010cf2:	bfdb      	ittet	le
 8010cf4:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010cf8:	f04f 33ff 	movle.w	r3, #4294967295
 8010cfc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010d00:	fa03 f202 	lslle.w	r2, r3, r2
 8010d04:	bfd8      	it	le
 8010d06:	ea02 0b01 	andle.w	fp, r2, r1
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	4650      	mov	r0, sl
 8010d10:	4659      	mov	r1, fp
 8010d12:	f7ef fedd 	bl	8000ad0 <__aeabi_dcmpeq>
 8010d16:	2800      	cmp	r0, #0
 8010d18:	d1a3      	bne.n	8010c62 <_strtod_l+0x57a>
 8010d1a:	9b07      	ldr	r3, [sp, #28]
 8010d1c:	463a      	mov	r2, r7
 8010d1e:	9908      	ldr	r1, [sp, #32]
 8010d20:	4620      	mov	r0, r4
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	462b      	mov	r3, r5
 8010d26:	f001 ff2d 	bl	8012b84 <__s2b>
 8010d2a:	9007      	str	r0, [sp, #28]
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	f43f af20 	beq.w	8010b72 <_strtod_l+0x48a>
 8010d32:	9b05      	ldr	r3, [sp, #20]
 8010d34:	2500      	movs	r5, #0
 8010d36:	1b9e      	subs	r6, r3, r6
 8010d38:	9b06      	ldr	r3, [sp, #24]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	bfb4      	ite	lt
 8010d3e:	4633      	movlt	r3, r6
 8010d40:	2300      	movge	r3, #0
 8010d42:	462e      	mov	r6, r5
 8010d44:	930c      	str	r3, [sp, #48]	; 0x30
 8010d46:	9b06      	ldr	r3, [sp, #24]
 8010d48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010d4c:	9312      	str	r3, [sp, #72]	; 0x48
 8010d4e:	9b07      	ldr	r3, [sp, #28]
 8010d50:	4620      	mov	r0, r4
 8010d52:	6859      	ldr	r1, [r3, #4]
 8010d54:	f001 fe6c 	bl	8012a30 <_Balloc>
 8010d58:	9005      	str	r0, [sp, #20]
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	f43f af0d 	beq.w	8010b7a <_strtod_l+0x492>
 8010d60:	9b07      	ldr	r3, [sp, #28]
 8010d62:	300c      	adds	r0, #12
 8010d64:	691a      	ldr	r2, [r3, #16]
 8010d66:	f103 010c 	add.w	r1, r3, #12
 8010d6a:	3202      	adds	r2, #2
 8010d6c:	0092      	lsls	r2, r2, #2
 8010d6e:	f7fe fcdb 	bl	800f728 <memcpy>
 8010d72:	aa1a      	add	r2, sp, #104	; 0x68
 8010d74:	a919      	add	r1, sp, #100	; 0x64
 8010d76:	4620      	mov	r0, r4
 8010d78:	ec4b ab10 	vmov	d0, sl, fp
 8010d7c:	f002 fa4a 	bl	8013214 <__d2b>
 8010d80:	9018      	str	r0, [sp, #96]	; 0x60
 8010d82:	ec4b ab18 	vmov	d8, sl, fp
 8010d86:	2800      	cmp	r0, #0
 8010d88:	f43f aef7 	beq.w	8010b7a <_strtod_l+0x492>
 8010d8c:	2101      	movs	r1, #1
 8010d8e:	4620      	mov	r0, r4
 8010d90:	f001 ff92 	bl	8012cb8 <__i2b>
 8010d94:	4606      	mov	r6, r0
 8010d96:	2800      	cmp	r0, #0
 8010d98:	f43f aeef 	beq.w	8010b7a <_strtod_l+0x492>
 8010d9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010d9e:	9904      	ldr	r1, [sp, #16]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	eba3 0801 	sub.w	r8, r3, r1
 8010da6:	bfa9      	itett	ge
 8010da8:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010daa:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010dac:	eb03 0902 	addge.w	r9, r3, r2
 8010db0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010db2:	bfb8      	it	lt
 8010db4:	1ad7      	sublt	r7, r2, r3
 8010db6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010db8:	4ba1      	ldr	r3, [pc, #644]	; (8011040 <_strtod_l+0x958>)
 8010dba:	4490      	add	r8, r2
 8010dbc:	bfb8      	it	lt
 8010dbe:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010dc2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010dc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8010dca:	4598      	cmp	r8, r3
 8010dcc:	f280 80c3 	bge.w	8010f56 <_strtod_l+0x86e>
 8010dd0:	eba3 0308 	sub.w	r3, r3, r8
 8010dd4:	2101      	movs	r1, #1
 8010dd6:	2b1f      	cmp	r3, #31
 8010dd8:	eba2 0203 	sub.w	r2, r2, r3
 8010ddc:	f300 80ae 	bgt.w	8010f3c <_strtod_l+0x854>
 8010de0:	fa01 f303 	lsl.w	r3, r1, r3
 8010de4:	930d      	str	r3, [sp, #52]	; 0x34
 8010de6:	2300      	movs	r3, #0
 8010de8:	9308      	str	r3, [sp, #32]
 8010dea:	eb09 0802 	add.w	r8, r9, r2
 8010dee:	9b04      	ldr	r3, [sp, #16]
 8010df0:	4417      	add	r7, r2
 8010df2:	45c1      	cmp	r9, r8
 8010df4:	441f      	add	r7, r3
 8010df6:	464b      	mov	r3, r9
 8010df8:	bfa8      	it	ge
 8010dfa:	4643      	movge	r3, r8
 8010dfc:	42bb      	cmp	r3, r7
 8010dfe:	bfa8      	it	ge
 8010e00:	463b      	movge	r3, r7
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	bfc2      	ittt	gt
 8010e06:	eba8 0803 	subgt.w	r8, r8, r3
 8010e0a:	1aff      	subgt	r7, r7, r3
 8010e0c:	eba9 0903 	subgt.w	r9, r9, r3
 8010e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	dd17      	ble.n	8010e46 <_strtod_l+0x75e>
 8010e16:	4631      	mov	r1, r6
 8010e18:	461a      	mov	r2, r3
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f002 f80a 	bl	8012e34 <__pow5mult>
 8010e20:	4606      	mov	r6, r0
 8010e22:	2800      	cmp	r0, #0
 8010e24:	f43f aea9 	beq.w	8010b7a <_strtod_l+0x492>
 8010e28:	4601      	mov	r1, r0
 8010e2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f001 ff59 	bl	8012ce4 <__multiply>
 8010e32:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e34:	2800      	cmp	r0, #0
 8010e36:	f43f aea0 	beq.w	8010b7a <_strtod_l+0x492>
 8010e3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	f001 fe37 	bl	8012ab0 <_Bfree>
 8010e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e44:	9318      	str	r3, [sp, #96]	; 0x60
 8010e46:	f1b8 0f00 	cmp.w	r8, #0
 8010e4a:	f300 8089 	bgt.w	8010f60 <_strtod_l+0x878>
 8010e4e:	9b06      	ldr	r3, [sp, #24]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	dd08      	ble.n	8010e66 <_strtod_l+0x77e>
 8010e54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010e56:	4620      	mov	r0, r4
 8010e58:	9905      	ldr	r1, [sp, #20]
 8010e5a:	f001 ffeb 	bl	8012e34 <__pow5mult>
 8010e5e:	9005      	str	r0, [sp, #20]
 8010e60:	2800      	cmp	r0, #0
 8010e62:	f43f ae8a 	beq.w	8010b7a <_strtod_l+0x492>
 8010e66:	2f00      	cmp	r7, #0
 8010e68:	dd08      	ble.n	8010e7c <_strtod_l+0x794>
 8010e6a:	463a      	mov	r2, r7
 8010e6c:	9905      	ldr	r1, [sp, #20]
 8010e6e:	4620      	mov	r0, r4
 8010e70:	f002 f83a 	bl	8012ee8 <__lshift>
 8010e74:	9005      	str	r0, [sp, #20]
 8010e76:	2800      	cmp	r0, #0
 8010e78:	f43f ae7f 	beq.w	8010b7a <_strtod_l+0x492>
 8010e7c:	f1b9 0f00 	cmp.w	r9, #0
 8010e80:	dd08      	ble.n	8010e94 <_strtod_l+0x7ac>
 8010e82:	4631      	mov	r1, r6
 8010e84:	464a      	mov	r2, r9
 8010e86:	4620      	mov	r0, r4
 8010e88:	f002 f82e 	bl	8012ee8 <__lshift>
 8010e8c:	4606      	mov	r6, r0
 8010e8e:	2800      	cmp	r0, #0
 8010e90:	f43f ae73 	beq.w	8010b7a <_strtod_l+0x492>
 8010e94:	9a05      	ldr	r2, [sp, #20]
 8010e96:	4620      	mov	r0, r4
 8010e98:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010e9a:	f002 f8b1 	bl	8013000 <__mdiff>
 8010e9e:	4605      	mov	r5, r0
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	f43f ae6a 	beq.w	8010b7a <_strtod_l+0x492>
 8010ea6:	68c3      	ldr	r3, [r0, #12]
 8010ea8:	4631      	mov	r1, r6
 8010eaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8010eac:	2300      	movs	r3, #0
 8010eae:	60c3      	str	r3, [r0, #12]
 8010eb0:	f002 f88a 	bl	8012fc8 <__mcmp>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	da5d      	bge.n	8010f74 <_strtod_l+0x88c>
 8010eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010eba:	ea53 030a 	orrs.w	r3, r3, sl
 8010ebe:	d17f      	bne.n	8010fc0 <_strtod_l+0x8d8>
 8010ec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d17b      	bne.n	8010fc0 <_strtod_l+0x8d8>
 8010ec8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010ecc:	0d1b      	lsrs	r3, r3, #20
 8010ece:	051b      	lsls	r3, r3, #20
 8010ed0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010ed4:	d974      	bls.n	8010fc0 <_strtod_l+0x8d8>
 8010ed6:	696b      	ldr	r3, [r5, #20]
 8010ed8:	b913      	cbnz	r3, 8010ee0 <_strtod_l+0x7f8>
 8010eda:	692b      	ldr	r3, [r5, #16]
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	dd6f      	ble.n	8010fc0 <_strtod_l+0x8d8>
 8010ee0:	4629      	mov	r1, r5
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	f001 ffff 	bl	8012ee8 <__lshift>
 8010eea:	4631      	mov	r1, r6
 8010eec:	4605      	mov	r5, r0
 8010eee:	f002 f86b 	bl	8012fc8 <__mcmp>
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	dd64      	ble.n	8010fc0 <_strtod_l+0x8d8>
 8010ef6:	9904      	ldr	r1, [sp, #16]
 8010ef8:	465b      	mov	r3, fp
 8010efa:	4a52      	ldr	r2, [pc, #328]	; (8011044 <_strtod_l+0x95c>)
 8010efc:	2900      	cmp	r1, #0
 8010efe:	d07f      	beq.n	8011000 <_strtod_l+0x918>
 8010f00:	ea02 010b 	and.w	r1, r2, fp
 8010f04:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010f08:	dc7a      	bgt.n	8011000 <_strtod_l+0x918>
 8010f0a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010f0e:	f77f aeac 	ble.w	8010c6a <_strtod_l+0x582>
 8010f12:	4b4d      	ldr	r3, [pc, #308]	; (8011048 <_strtod_l+0x960>)
 8010f14:	4650      	mov	r0, sl
 8010f16:	4659      	mov	r1, fp
 8010f18:	2200      	movs	r2, #0
 8010f1a:	f7ef fb71 	bl	8000600 <__aeabi_dmul>
 8010f1e:	460b      	mov	r3, r1
 8010f20:	4682      	mov	sl, r0
 8010f22:	468b      	mov	fp, r1
 8010f24:	4303      	orrs	r3, r0
 8010f26:	bf04      	itt	eq
 8010f28:	2322      	moveq	r3, #34	; 0x22
 8010f2a:	6023      	streq	r3, [r4, #0]
 8010f2c:	e62f      	b.n	8010b8e <_strtod_l+0x4a6>
 8010f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f32:	fa02 f303 	lsl.w	r3, r2, r3
 8010f36:	ea03 0a0a 	and.w	sl, r3, sl
 8010f3a:	e6e6      	b.n	8010d0a <_strtod_l+0x622>
 8010f3c:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010f40:	910d      	str	r1, [sp, #52]	; 0x34
 8010f42:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010f46:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010f4a:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010f4e:	fa01 f308 	lsl.w	r3, r1, r8
 8010f52:	9308      	str	r3, [sp, #32]
 8010f54:	e749      	b.n	8010dea <_strtod_l+0x702>
 8010f56:	2300      	movs	r3, #0
 8010f58:	9308      	str	r3, [sp, #32]
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	930d      	str	r3, [sp, #52]	; 0x34
 8010f5e:	e744      	b.n	8010dea <_strtod_l+0x702>
 8010f60:	4642      	mov	r2, r8
 8010f62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010f64:	4620      	mov	r0, r4
 8010f66:	f001 ffbf 	bl	8012ee8 <__lshift>
 8010f6a:	9018      	str	r0, [sp, #96]	; 0x60
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	f47f af6e 	bne.w	8010e4e <_strtod_l+0x766>
 8010f72:	e602      	b.n	8010b7a <_strtod_l+0x492>
 8010f74:	465f      	mov	r7, fp
 8010f76:	d16f      	bne.n	8011058 <_strtod_l+0x970>
 8010f78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f7e:	b342      	cbz	r2, 8010fd2 <_strtod_l+0x8ea>
 8010f80:	4a32      	ldr	r2, [pc, #200]	; (801104c <_strtod_l+0x964>)
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d128      	bne.n	8010fd8 <_strtod_l+0x8f0>
 8010f86:	9b04      	ldr	r3, [sp, #16]
 8010f88:	4651      	mov	r1, sl
 8010f8a:	b1eb      	cbz	r3, 8010fc8 <_strtod_l+0x8e0>
 8010f8c:	4b2d      	ldr	r3, [pc, #180]	; (8011044 <_strtod_l+0x95c>)
 8010f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f92:	403b      	ands	r3, r7
 8010f94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010f98:	d819      	bhi.n	8010fce <_strtod_l+0x8e6>
 8010f9a:	0d1b      	lsrs	r3, r3, #20
 8010f9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8010fa4:	4299      	cmp	r1, r3
 8010fa6:	d117      	bne.n	8010fd8 <_strtod_l+0x8f0>
 8010fa8:	4b29      	ldr	r3, [pc, #164]	; (8011050 <_strtod_l+0x968>)
 8010faa:	429f      	cmp	r7, r3
 8010fac:	d102      	bne.n	8010fb4 <_strtod_l+0x8cc>
 8010fae:	3101      	adds	r1, #1
 8010fb0:	f43f ade3 	beq.w	8010b7a <_strtod_l+0x492>
 8010fb4:	4b23      	ldr	r3, [pc, #140]	; (8011044 <_strtod_l+0x95c>)
 8010fb6:	f04f 0a00 	mov.w	sl, #0
 8010fba:	403b      	ands	r3, r7
 8010fbc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010fc0:	9b04      	ldr	r3, [sp, #16]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d1a5      	bne.n	8010f12 <_strtod_l+0x82a>
 8010fc6:	e5e2      	b.n	8010b8e <_strtod_l+0x4a6>
 8010fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8010fcc:	e7ea      	b.n	8010fa4 <_strtod_l+0x8bc>
 8010fce:	4613      	mov	r3, r2
 8010fd0:	e7e8      	b.n	8010fa4 <_strtod_l+0x8bc>
 8010fd2:	ea53 030a 	orrs.w	r3, r3, sl
 8010fd6:	d08e      	beq.n	8010ef6 <_strtod_l+0x80e>
 8010fd8:	9b08      	ldr	r3, [sp, #32]
 8010fda:	b1db      	cbz	r3, 8011014 <_strtod_l+0x92c>
 8010fdc:	423b      	tst	r3, r7
 8010fde:	d0ef      	beq.n	8010fc0 <_strtod_l+0x8d8>
 8010fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fe2:	4650      	mov	r0, sl
 8010fe4:	9a04      	ldr	r2, [sp, #16]
 8010fe6:	4659      	mov	r1, fp
 8010fe8:	b1c3      	cbz	r3, 801101c <_strtod_l+0x934>
 8010fea:	f7ff fb5f 	bl	80106ac <sulp>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	ec51 0b18 	vmov	r0, r1, d8
 8010ff6:	f7ef f94d 	bl	8000294 <__adddf3>
 8010ffa:	4682      	mov	sl, r0
 8010ffc:	468b      	mov	fp, r1
 8010ffe:	e7df      	b.n	8010fc0 <_strtod_l+0x8d8>
 8011000:	4013      	ands	r3, r2
 8011002:	f04f 3aff 	mov.w	sl, #4294967295
 8011006:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801100a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801100e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011012:	e7d5      	b.n	8010fc0 <_strtod_l+0x8d8>
 8011014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011016:	ea13 0f0a 	tst.w	r3, sl
 801101a:	e7e0      	b.n	8010fde <_strtod_l+0x8f6>
 801101c:	f7ff fb46 	bl	80106ac <sulp>
 8011020:	4602      	mov	r2, r0
 8011022:	460b      	mov	r3, r1
 8011024:	ec51 0b18 	vmov	r0, r1, d8
 8011028:	f7ef f932 	bl	8000290 <__aeabi_dsub>
 801102c:	2200      	movs	r2, #0
 801102e:	2300      	movs	r3, #0
 8011030:	4682      	mov	sl, r0
 8011032:	468b      	mov	fp, r1
 8011034:	f7ef fd4c 	bl	8000ad0 <__aeabi_dcmpeq>
 8011038:	2800      	cmp	r0, #0
 801103a:	d0c1      	beq.n	8010fc0 <_strtod_l+0x8d8>
 801103c:	e615      	b.n	8010c6a <_strtod_l+0x582>
 801103e:	bf00      	nop
 8011040:	fffffc02 	.word	0xfffffc02
 8011044:	7ff00000 	.word	0x7ff00000
 8011048:	39500000 	.word	0x39500000
 801104c:	000fffff 	.word	0x000fffff
 8011050:	7fefffff 	.word	0x7fefffff
 8011054:	08069260 	.word	0x08069260
 8011058:	4631      	mov	r1, r6
 801105a:	4628      	mov	r0, r5
 801105c:	f002 f936 	bl	80132cc <__ratio>
 8011060:	2200      	movs	r2, #0
 8011062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011066:	ee10 0a10 	vmov	r0, s0
 801106a:	ec59 8b10 	vmov	r8, r9, d0
 801106e:	4649      	mov	r1, r9
 8011070:	f7ef fd42 	bl	8000af8 <__aeabi_dcmple>
 8011074:	2800      	cmp	r0, #0
 8011076:	d07a      	beq.n	801116e <_strtod_l+0xa86>
 8011078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801107a:	2b00      	cmp	r3, #0
 801107c:	d04a      	beq.n	8011114 <_strtod_l+0xa2c>
 801107e:	2200      	movs	r2, #0
 8011080:	4b93      	ldr	r3, [pc, #588]	; (80112d0 <_strtod_l+0xbe8>)
 8011082:	f04f 0800 	mov.w	r8, #0
 8011086:	f8df 9248 	ldr.w	r9, [pc, #584]	; 80112d0 <_strtod_l+0xbe8>
 801108a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801108e:	4b91      	ldr	r3, [pc, #580]	; (80112d4 <_strtod_l+0xbec>)
 8011090:	403b      	ands	r3, r7
 8011092:	930d      	str	r3, [sp, #52]	; 0x34
 8011094:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011096:	4b90      	ldr	r3, [pc, #576]	; (80112d8 <_strtod_l+0xbf0>)
 8011098:	429a      	cmp	r2, r3
 801109a:	f040 80b0 	bne.w	80111fe <_strtod_l+0xb16>
 801109e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80110a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110a6:	ec4b ab10 	vmov	d0, sl, fp
 80110aa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80110ae:	f002 f837 	bl	8013120 <__ulp>
 80110b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110b6:	ec53 2b10 	vmov	r2, r3, d0
 80110ba:	f7ef faa1 	bl	8000600 <__aeabi_dmul>
 80110be:	4652      	mov	r2, sl
 80110c0:	465b      	mov	r3, fp
 80110c2:	f7ef f8e7 	bl	8000294 <__adddf3>
 80110c6:	460b      	mov	r3, r1
 80110c8:	4982      	ldr	r1, [pc, #520]	; (80112d4 <_strtod_l+0xbec>)
 80110ca:	4682      	mov	sl, r0
 80110cc:	4a83      	ldr	r2, [pc, #524]	; (80112dc <_strtod_l+0xbf4>)
 80110ce:	4019      	ands	r1, r3
 80110d0:	4291      	cmp	r1, r2
 80110d2:	d960      	bls.n	8011196 <_strtod_l+0xaae>
 80110d4:	ee18 3a90 	vmov	r3, s17
 80110d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80110dc:	4293      	cmp	r3, r2
 80110de:	d104      	bne.n	80110ea <_strtod_l+0xa02>
 80110e0:	ee18 3a10 	vmov	r3, s16
 80110e4:	3301      	adds	r3, #1
 80110e6:	f43f ad48 	beq.w	8010b7a <_strtod_l+0x492>
 80110ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80112e8 <_strtod_l+0xc00>
 80110ee:	f04f 3aff 	mov.w	sl, #4294967295
 80110f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80110f4:	4620      	mov	r0, r4
 80110f6:	f001 fcdb 	bl	8012ab0 <_Bfree>
 80110fa:	9905      	ldr	r1, [sp, #20]
 80110fc:	4620      	mov	r0, r4
 80110fe:	f001 fcd7 	bl	8012ab0 <_Bfree>
 8011102:	4631      	mov	r1, r6
 8011104:	4620      	mov	r0, r4
 8011106:	f001 fcd3 	bl	8012ab0 <_Bfree>
 801110a:	4629      	mov	r1, r5
 801110c:	4620      	mov	r0, r4
 801110e:	f001 fccf 	bl	8012ab0 <_Bfree>
 8011112:	e61c      	b.n	8010d4e <_strtod_l+0x666>
 8011114:	f1ba 0f00 	cmp.w	sl, #0
 8011118:	d11b      	bne.n	8011152 <_strtod_l+0xa6a>
 801111a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801111e:	b9f3      	cbnz	r3, 801115e <_strtod_l+0xa76>
 8011120:	2200      	movs	r2, #0
 8011122:	4b6b      	ldr	r3, [pc, #428]	; (80112d0 <_strtod_l+0xbe8>)
 8011124:	4640      	mov	r0, r8
 8011126:	4649      	mov	r1, r9
 8011128:	f7ef fcdc 	bl	8000ae4 <__aeabi_dcmplt>
 801112c:	b9d0      	cbnz	r0, 8011164 <_strtod_l+0xa7c>
 801112e:	4640      	mov	r0, r8
 8011130:	4649      	mov	r1, r9
 8011132:	2200      	movs	r2, #0
 8011134:	4b6a      	ldr	r3, [pc, #424]	; (80112e0 <_strtod_l+0xbf8>)
 8011136:	f7ef fa63 	bl	8000600 <__aeabi_dmul>
 801113a:	4680      	mov	r8, r0
 801113c:	4689      	mov	r9, r1
 801113e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011142:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8011146:	9315      	str	r3, [sp, #84]	; 0x54
 8011148:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801114c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011150:	e79d      	b.n	801108e <_strtod_l+0x9a6>
 8011152:	f1ba 0f01 	cmp.w	sl, #1
 8011156:	d102      	bne.n	801115e <_strtod_l+0xa76>
 8011158:	2f00      	cmp	r7, #0
 801115a:	f43f ad86 	beq.w	8010c6a <_strtod_l+0x582>
 801115e:	2200      	movs	r2, #0
 8011160:	4b60      	ldr	r3, [pc, #384]	; (80112e4 <_strtod_l+0xbfc>)
 8011162:	e78e      	b.n	8011082 <_strtod_l+0x99a>
 8011164:	f04f 0800 	mov.w	r8, #0
 8011168:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80112e0 <_strtod_l+0xbf8>
 801116c:	e7e7      	b.n	801113e <_strtod_l+0xa56>
 801116e:	4b5c      	ldr	r3, [pc, #368]	; (80112e0 <_strtod_l+0xbf8>)
 8011170:	4640      	mov	r0, r8
 8011172:	4649      	mov	r1, r9
 8011174:	2200      	movs	r2, #0
 8011176:	f7ef fa43 	bl	8000600 <__aeabi_dmul>
 801117a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801117c:	4680      	mov	r8, r0
 801117e:	4689      	mov	r9, r1
 8011180:	b933      	cbnz	r3, 8011190 <_strtod_l+0xaa8>
 8011182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011186:	900e      	str	r0, [sp, #56]	; 0x38
 8011188:	930f      	str	r3, [sp, #60]	; 0x3c
 801118a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801118e:	e7dd      	b.n	801114c <_strtod_l+0xa64>
 8011190:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011194:	e7f9      	b.n	801118a <_strtod_l+0xaa2>
 8011196:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801119a:	9b04      	ldr	r3, [sp, #16]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1a8      	bne.n	80110f2 <_strtod_l+0xa0a>
 80111a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80111a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111a6:	0d1b      	lsrs	r3, r3, #20
 80111a8:	051b      	lsls	r3, r3, #20
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d1a1      	bne.n	80110f2 <_strtod_l+0xa0a>
 80111ae:	4640      	mov	r0, r8
 80111b0:	4649      	mov	r1, r9
 80111b2:	f7ef fd85 	bl	8000cc0 <__aeabi_d2lz>
 80111b6:	f7ef f9f5 	bl	80005a4 <__aeabi_l2d>
 80111ba:	4602      	mov	r2, r0
 80111bc:	460b      	mov	r3, r1
 80111be:	4640      	mov	r0, r8
 80111c0:	4649      	mov	r1, r9
 80111c2:	f7ef f865 	bl	8000290 <__aeabi_dsub>
 80111c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111cc:	4680      	mov	r8, r0
 80111ce:	ea43 030a 	orr.w	r3, r3, sl
 80111d2:	4689      	mov	r9, r1
 80111d4:	4313      	orrs	r3, r2
 80111d6:	d055      	beq.n	8011284 <_strtod_l+0xb9c>
 80111d8:	a335      	add	r3, pc, #212	; (adr r3, 80112b0 <_strtod_l+0xbc8>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	f7ef fc81 	bl	8000ae4 <__aeabi_dcmplt>
 80111e2:	2800      	cmp	r0, #0
 80111e4:	f47f acd3 	bne.w	8010b8e <_strtod_l+0x4a6>
 80111e8:	4640      	mov	r0, r8
 80111ea:	4649      	mov	r1, r9
 80111ec:	a332      	add	r3, pc, #200	; (adr r3, 80112b8 <_strtod_l+0xbd0>)
 80111ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f2:	f7ef fc95 	bl	8000b20 <__aeabi_dcmpgt>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	f43f af7b 	beq.w	80110f2 <_strtod_l+0xa0a>
 80111fc:	e4c7      	b.n	8010b8e <_strtod_l+0x4a6>
 80111fe:	9b04      	ldr	r3, [sp, #16]
 8011200:	b333      	cbz	r3, 8011250 <_strtod_l+0xb68>
 8011202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011204:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011208:	d822      	bhi.n	8011250 <_strtod_l+0xb68>
 801120a:	4640      	mov	r0, r8
 801120c:	4649      	mov	r1, r9
 801120e:	a32c      	add	r3, pc, #176	; (adr r3, 80112c0 <_strtod_l+0xbd8>)
 8011210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011214:	f7ef fc70 	bl	8000af8 <__aeabi_dcmple>
 8011218:	b1a0      	cbz	r0, 8011244 <_strtod_l+0xb5c>
 801121a:	4649      	mov	r1, r9
 801121c:	4640      	mov	r0, r8
 801121e:	f7ef fcc7 	bl	8000bb0 <__aeabi_d2uiz>
 8011222:	2801      	cmp	r0, #1
 8011224:	bf38      	it	cc
 8011226:	2001      	movcc	r0, #1
 8011228:	f7ef f970 	bl	800050c <__aeabi_ui2d>
 801122c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801122e:	4680      	mov	r8, r0
 8011230:	4689      	mov	r9, r1
 8011232:	bb23      	cbnz	r3, 801127e <_strtod_l+0xb96>
 8011234:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011238:	9010      	str	r0, [sp, #64]	; 0x40
 801123a:	9311      	str	r3, [sp, #68]	; 0x44
 801123c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011240:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011246:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011248:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801124c:	1a9b      	subs	r3, r3, r2
 801124e:	9309      	str	r3, [sp, #36]	; 0x24
 8011250:	eeb0 0a48 	vmov.f32	s0, s16
 8011254:	eef0 0a68 	vmov.f32	s1, s17
 8011258:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801125c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011260:	f001 ff5e 	bl	8013120 <__ulp>
 8011264:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011268:	ec53 2b10 	vmov	r2, r3, d0
 801126c:	f7ef f9c8 	bl	8000600 <__aeabi_dmul>
 8011270:	ec53 2b18 	vmov	r2, r3, d8
 8011274:	f7ef f80e 	bl	8000294 <__adddf3>
 8011278:	4682      	mov	sl, r0
 801127a:	468b      	mov	fp, r1
 801127c:	e78d      	b.n	801119a <_strtod_l+0xab2>
 801127e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011282:	e7db      	b.n	801123c <_strtod_l+0xb54>
 8011284:	a310      	add	r3, pc, #64	; (adr r3, 80112c8 <_strtod_l+0xbe0>)
 8011286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128a:	f7ef fc2b 	bl	8000ae4 <__aeabi_dcmplt>
 801128e:	e7b2      	b.n	80111f6 <_strtod_l+0xb0e>
 8011290:	2300      	movs	r3, #0
 8011292:	930a      	str	r3, [sp, #40]	; 0x28
 8011294:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011296:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011298:	6013      	str	r3, [r2, #0]
 801129a:	f7ff ba6d 	b.w	8010778 <_strtod_l+0x90>
 801129e:	2a65      	cmp	r2, #101	; 0x65
 80112a0:	f43f ab61 	beq.w	8010966 <_strtod_l+0x27e>
 80112a4:	2a45      	cmp	r2, #69	; 0x45
 80112a6:	f43f ab5e 	beq.w	8010966 <_strtod_l+0x27e>
 80112aa:	2301      	movs	r3, #1
 80112ac:	f7ff bb96 	b.w	80109dc <_strtod_l+0x2f4>
 80112b0:	94a03595 	.word	0x94a03595
 80112b4:	3fdfffff 	.word	0x3fdfffff
 80112b8:	35afe535 	.word	0x35afe535
 80112bc:	3fe00000 	.word	0x3fe00000
 80112c0:	ffc00000 	.word	0xffc00000
 80112c4:	41dfffff 	.word	0x41dfffff
 80112c8:	94a03595 	.word	0x94a03595
 80112cc:	3fcfffff 	.word	0x3fcfffff
 80112d0:	3ff00000 	.word	0x3ff00000
 80112d4:	7ff00000 	.word	0x7ff00000
 80112d8:	7fe00000 	.word	0x7fe00000
 80112dc:	7c9fffff 	.word	0x7c9fffff
 80112e0:	3fe00000 	.word	0x3fe00000
 80112e4:	bff00000 	.word	0xbff00000
 80112e8:	7fefffff 	.word	0x7fefffff

080112ec <_strtod_r>:
 80112ec:	4b01      	ldr	r3, [pc, #4]	; (80112f4 <_strtod_r+0x8>)
 80112ee:	f7ff b9fb 	b.w	80106e8 <_strtod_l>
 80112f2:	bf00      	nop
 80112f4:	20000840 	.word	0x20000840

080112f8 <_strtol_l.constprop.0>:
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112fe:	d001      	beq.n	8011304 <_strtol_l.constprop.0+0xc>
 8011300:	2b24      	cmp	r3, #36	; 0x24
 8011302:	d906      	bls.n	8011312 <_strtol_l.constprop.0+0x1a>
 8011304:	f7fe f9de 	bl	800f6c4 <__errno>
 8011308:	2316      	movs	r3, #22
 801130a:	6003      	str	r3, [r0, #0]
 801130c:	2000      	movs	r0, #0
 801130e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011312:	460d      	mov	r5, r1
 8011314:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 80113f8 <_strtol_l.constprop.0+0x100>
 8011318:	462e      	mov	r6, r5
 801131a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801131e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011322:	f017 0708 	ands.w	r7, r7, #8
 8011326:	d1f7      	bne.n	8011318 <_strtol_l.constprop.0+0x20>
 8011328:	2c2d      	cmp	r4, #45	; 0x2d
 801132a:	d132      	bne.n	8011392 <_strtol_l.constprop.0+0x9a>
 801132c:	782c      	ldrb	r4, [r5, #0]
 801132e:	2701      	movs	r7, #1
 8011330:	1cb5      	adds	r5, r6, #2
 8011332:	2b00      	cmp	r3, #0
 8011334:	d05b      	beq.n	80113ee <_strtol_l.constprop.0+0xf6>
 8011336:	2b10      	cmp	r3, #16
 8011338:	d109      	bne.n	801134e <_strtol_l.constprop.0+0x56>
 801133a:	2c30      	cmp	r4, #48	; 0x30
 801133c:	d107      	bne.n	801134e <_strtol_l.constprop.0+0x56>
 801133e:	782c      	ldrb	r4, [r5, #0]
 8011340:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011344:	2c58      	cmp	r4, #88	; 0x58
 8011346:	d14d      	bne.n	80113e4 <_strtol_l.constprop.0+0xec>
 8011348:	786c      	ldrb	r4, [r5, #1]
 801134a:	2310      	movs	r3, #16
 801134c:	3502      	adds	r5, #2
 801134e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011352:	f04f 0c00 	mov.w	ip, #0
 8011356:	f108 38ff 	add.w	r8, r8, #4294967295
 801135a:	4666      	mov	r6, ip
 801135c:	fbb8 f9f3 	udiv	r9, r8, r3
 8011360:	fb03 8a19 	mls	sl, r3, r9, r8
 8011364:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011368:	f1be 0f09 	cmp.w	lr, #9
 801136c:	d816      	bhi.n	801139c <_strtol_l.constprop.0+0xa4>
 801136e:	4674      	mov	r4, lr
 8011370:	42a3      	cmp	r3, r4
 8011372:	dd24      	ble.n	80113be <_strtol_l.constprop.0+0xc6>
 8011374:	f1bc 0f00 	cmp.w	ip, #0
 8011378:	db1e      	blt.n	80113b8 <_strtol_l.constprop.0+0xc0>
 801137a:	45b1      	cmp	r9, r6
 801137c:	d31c      	bcc.n	80113b8 <_strtol_l.constprop.0+0xc0>
 801137e:	d101      	bne.n	8011384 <_strtol_l.constprop.0+0x8c>
 8011380:	45a2      	cmp	sl, r4
 8011382:	db19      	blt.n	80113b8 <_strtol_l.constprop.0+0xc0>
 8011384:	fb06 4603 	mla	r6, r6, r3, r4
 8011388:	f04f 0c01 	mov.w	ip, #1
 801138c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011390:	e7e8      	b.n	8011364 <_strtol_l.constprop.0+0x6c>
 8011392:	2c2b      	cmp	r4, #43	; 0x2b
 8011394:	bf04      	itt	eq
 8011396:	782c      	ldrbeq	r4, [r5, #0]
 8011398:	1cb5      	addeq	r5, r6, #2
 801139a:	e7ca      	b.n	8011332 <_strtol_l.constprop.0+0x3a>
 801139c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80113a0:	f1be 0f19 	cmp.w	lr, #25
 80113a4:	d801      	bhi.n	80113aa <_strtol_l.constprop.0+0xb2>
 80113a6:	3c37      	subs	r4, #55	; 0x37
 80113a8:	e7e2      	b.n	8011370 <_strtol_l.constprop.0+0x78>
 80113aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80113ae:	f1be 0f19 	cmp.w	lr, #25
 80113b2:	d804      	bhi.n	80113be <_strtol_l.constprop.0+0xc6>
 80113b4:	3c57      	subs	r4, #87	; 0x57
 80113b6:	e7db      	b.n	8011370 <_strtol_l.constprop.0+0x78>
 80113b8:	f04f 3cff 	mov.w	ip, #4294967295
 80113bc:	e7e6      	b.n	801138c <_strtol_l.constprop.0+0x94>
 80113be:	f1bc 0f00 	cmp.w	ip, #0
 80113c2:	da05      	bge.n	80113d0 <_strtol_l.constprop.0+0xd8>
 80113c4:	2322      	movs	r3, #34	; 0x22
 80113c6:	4646      	mov	r6, r8
 80113c8:	6003      	str	r3, [r0, #0]
 80113ca:	b942      	cbnz	r2, 80113de <_strtol_l.constprop.0+0xe6>
 80113cc:	4630      	mov	r0, r6
 80113ce:	e79e      	b.n	801130e <_strtol_l.constprop.0+0x16>
 80113d0:	b107      	cbz	r7, 80113d4 <_strtol_l.constprop.0+0xdc>
 80113d2:	4276      	negs	r6, r6
 80113d4:	2a00      	cmp	r2, #0
 80113d6:	d0f9      	beq.n	80113cc <_strtol_l.constprop.0+0xd4>
 80113d8:	f1bc 0f00 	cmp.w	ip, #0
 80113dc:	d000      	beq.n	80113e0 <_strtol_l.constprop.0+0xe8>
 80113de:	1e69      	subs	r1, r5, #1
 80113e0:	6011      	str	r1, [r2, #0]
 80113e2:	e7f3      	b.n	80113cc <_strtol_l.constprop.0+0xd4>
 80113e4:	2430      	movs	r4, #48	; 0x30
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d1b1      	bne.n	801134e <_strtol_l.constprop.0+0x56>
 80113ea:	2308      	movs	r3, #8
 80113ec:	e7af      	b.n	801134e <_strtol_l.constprop.0+0x56>
 80113ee:	2c30      	cmp	r4, #48	; 0x30
 80113f0:	d0a5      	beq.n	801133e <_strtol_l.constprop.0+0x46>
 80113f2:	230a      	movs	r3, #10
 80113f4:	e7ab      	b.n	801134e <_strtol_l.constprop.0+0x56>
 80113f6:	bf00      	nop
 80113f8:	08069289 	.word	0x08069289

080113fc <_strtol_r>:
 80113fc:	f7ff bf7c 	b.w	80112f8 <_strtol_l.constprop.0>

08011400 <quorem>:
 8011400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011404:	6903      	ldr	r3, [r0, #16]
 8011406:	4607      	mov	r7, r0
 8011408:	690c      	ldr	r4, [r1, #16]
 801140a:	42a3      	cmp	r3, r4
 801140c:	f2c0 8087 	blt.w	801151e <quorem+0x11e>
 8011410:	3c01      	subs	r4, #1
 8011412:	f100 0514 	add.w	r5, r0, #20
 8011416:	f101 0814 	add.w	r8, r1, #20
 801141a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801141e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011422:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011426:	9301      	str	r3, [sp, #4]
 8011428:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801142c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011430:	3301      	adds	r3, #1
 8011432:	429a      	cmp	r2, r3
 8011434:	fbb2 f6f3 	udiv	r6, r2, r3
 8011438:	d335      	bcc.n	80114a6 <quorem+0xa6>
 801143a:	f04f 0e00 	mov.w	lr, #0
 801143e:	4640      	mov	r0, r8
 8011440:	46ac      	mov	ip, r5
 8011442:	46f2      	mov	sl, lr
 8011444:	f850 2b04 	ldr.w	r2, [r0], #4
 8011448:	b293      	uxth	r3, r2
 801144a:	4581      	cmp	r9, r0
 801144c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8011450:	fb06 e303 	mla	r3, r6, r3, lr
 8011454:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011458:	b29b      	uxth	r3, r3
 801145a:	fb06 e202 	mla	r2, r6, r2, lr
 801145e:	ebaa 0303 	sub.w	r3, sl, r3
 8011462:	f8dc a000 	ldr.w	sl, [ip]
 8011466:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801146a:	fa1f fa8a 	uxth.w	sl, sl
 801146e:	b292      	uxth	r2, r2
 8011470:	4453      	add	r3, sl
 8011472:	9300      	str	r3, [sp, #0]
 8011474:	f8dc 3000 	ldr.w	r3, [ip]
 8011478:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 801147c:	9b00      	ldr	r3, [sp, #0]
 801147e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011482:	f8bd 3000 	ldrh.w	r3, [sp]
 8011486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801148a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801148e:	f84c 3b04 	str.w	r3, [ip], #4
 8011492:	d2d7      	bcs.n	8011444 <quorem+0x44>
 8011494:	f855 300b 	ldr.w	r3, [r5, fp]
 8011498:	b92b      	cbnz	r3, 80114a6 <quorem+0xa6>
 801149a:	9b01      	ldr	r3, [sp, #4]
 801149c:	3b04      	subs	r3, #4
 801149e:	429d      	cmp	r5, r3
 80114a0:	461a      	mov	r2, r3
 80114a2:	d330      	bcc.n	8011506 <quorem+0x106>
 80114a4:	613c      	str	r4, [r7, #16]
 80114a6:	4638      	mov	r0, r7
 80114a8:	f001 fd8e 	bl	8012fc8 <__mcmp>
 80114ac:	2800      	cmp	r0, #0
 80114ae:	db26      	blt.n	80114fe <quorem+0xfe>
 80114b0:	3601      	adds	r6, #1
 80114b2:	4628      	mov	r0, r5
 80114b4:	f04f 0c00 	mov.w	ip, #0
 80114b8:	f858 1b04 	ldr.w	r1, [r8], #4
 80114bc:	f8d0 e000 	ldr.w	lr, [r0]
 80114c0:	b28b      	uxth	r3, r1
 80114c2:	45c1      	cmp	r9, r8
 80114c4:	fa1f f28e 	uxth.w	r2, lr
 80114c8:	ebac 0303 	sub.w	r3, ip, r3
 80114cc:	4413      	add	r3, r2
 80114ce:	ea4f 4211 	mov.w	r2, r1, lsr #16
 80114d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80114d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80114da:	b29b      	uxth	r3, r3
 80114dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80114e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80114e4:	f840 3b04 	str.w	r3, [r0], #4
 80114e8:	d2e6      	bcs.n	80114b8 <quorem+0xb8>
 80114ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80114ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80114f2:	b922      	cbnz	r2, 80114fe <quorem+0xfe>
 80114f4:	3b04      	subs	r3, #4
 80114f6:	429d      	cmp	r5, r3
 80114f8:	461a      	mov	r2, r3
 80114fa:	d30a      	bcc.n	8011512 <quorem+0x112>
 80114fc:	613c      	str	r4, [r7, #16]
 80114fe:	4630      	mov	r0, r6
 8011500:	b003      	add	sp, #12
 8011502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011506:	6812      	ldr	r2, [r2, #0]
 8011508:	3b04      	subs	r3, #4
 801150a:	2a00      	cmp	r2, #0
 801150c:	d1ca      	bne.n	80114a4 <quorem+0xa4>
 801150e:	3c01      	subs	r4, #1
 8011510:	e7c5      	b.n	801149e <quorem+0x9e>
 8011512:	6812      	ldr	r2, [r2, #0]
 8011514:	3b04      	subs	r3, #4
 8011516:	2a00      	cmp	r2, #0
 8011518:	d1f0      	bne.n	80114fc <quorem+0xfc>
 801151a:	3c01      	subs	r4, #1
 801151c:	e7eb      	b.n	80114f6 <quorem+0xf6>
 801151e:	2000      	movs	r0, #0
 8011520:	e7ee      	b.n	8011500 <quorem+0x100>
 8011522:	0000      	movs	r0, r0
 8011524:	0000      	movs	r0, r0
	...

08011528 <_dtoa_r>:
 8011528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801152e:	4604      	mov	r4, r0
 8011530:	ee10 aa10 	vmov	sl, s0
 8011534:	ed2d 8b04 	vpush	{d8-d9}
 8011538:	b093      	sub	sp, #76	; 0x4c
 801153a:	ec57 6b10 	vmov	r6, r7, d0
 801153e:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011542:	46bb      	mov	fp, r7
 8011544:	9106      	str	r1, [sp, #24]
 8011546:	9209      	str	r2, [sp, #36]	; 0x24
 8011548:	930c      	str	r3, [sp, #48]	; 0x30
 801154a:	b975      	cbnz	r5, 801156a <_dtoa_r+0x42>
 801154c:	2010      	movs	r0, #16
 801154e:	f7fe f8e3 	bl	800f718 <malloc>
 8011552:	4602      	mov	r2, r0
 8011554:	6260      	str	r0, [r4, #36]	; 0x24
 8011556:	b920      	cbnz	r0, 8011562 <_dtoa_r+0x3a>
 8011558:	4ba7      	ldr	r3, [pc, #668]	; (80117f8 <_dtoa_r+0x2d0>)
 801155a:	21ea      	movs	r1, #234	; 0xea
 801155c:	48a7      	ldr	r0, [pc, #668]	; (80117fc <_dtoa_r+0x2d4>)
 801155e:	f002 fb67 	bl	8013c30 <__assert_func>
 8011562:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011566:	6005      	str	r5, [r0, #0]
 8011568:	60c5      	str	r5, [r0, #12]
 801156a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801156c:	6819      	ldr	r1, [r3, #0]
 801156e:	b151      	cbz	r1, 8011586 <_dtoa_r+0x5e>
 8011570:	685a      	ldr	r2, [r3, #4]
 8011572:	2301      	movs	r3, #1
 8011574:	4620      	mov	r0, r4
 8011576:	4093      	lsls	r3, r2
 8011578:	604a      	str	r2, [r1, #4]
 801157a:	608b      	str	r3, [r1, #8]
 801157c:	f001 fa98 	bl	8012ab0 <_Bfree>
 8011580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011582:	2200      	movs	r2, #0
 8011584:	601a      	str	r2, [r3, #0]
 8011586:	1e3b      	subs	r3, r7, #0
 8011588:	bfad      	iteet	ge
 801158a:	2300      	movge	r3, #0
 801158c:	2201      	movlt	r2, #1
 801158e:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011592:	f8c8 3000 	strge.w	r3, [r8]
 8011596:	4b9a      	ldr	r3, [pc, #616]	; (8011800 <_dtoa_r+0x2d8>)
 8011598:	bfb8      	it	lt
 801159a:	f8c8 2000 	strlt.w	r2, [r8]
 801159e:	ea33 030b 	bics.w	r3, r3, fp
 80115a2:	d11b      	bne.n	80115dc <_dtoa_r+0xb4>
 80115a4:	f242 730f 	movw	r3, #9999	; 0x270f
 80115a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115aa:	6013      	str	r3, [r2, #0]
 80115ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115b0:	4333      	orrs	r3, r6
 80115b2:	f000 858f 	beq.w	80120d4 <_dtoa_r+0xbac>
 80115b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115b8:	b963      	cbnz	r3, 80115d4 <_dtoa_r+0xac>
 80115ba:	4b92      	ldr	r3, [pc, #584]	; (8011804 <_dtoa_r+0x2dc>)
 80115bc:	e022      	b.n	8011604 <_dtoa_r+0xdc>
 80115be:	4b92      	ldr	r3, [pc, #584]	; (8011808 <_dtoa_r+0x2e0>)
 80115c0:	9301      	str	r3, [sp, #4]
 80115c2:	3308      	adds	r3, #8
 80115c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80115c6:	6013      	str	r3, [r2, #0]
 80115c8:	9801      	ldr	r0, [sp, #4]
 80115ca:	b013      	add	sp, #76	; 0x4c
 80115cc:	ecbd 8b04 	vpop	{d8-d9}
 80115d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d4:	4b8b      	ldr	r3, [pc, #556]	; (8011804 <_dtoa_r+0x2dc>)
 80115d6:	9301      	str	r3, [sp, #4]
 80115d8:	3303      	adds	r3, #3
 80115da:	e7f3      	b.n	80115c4 <_dtoa_r+0x9c>
 80115dc:	2200      	movs	r2, #0
 80115de:	2300      	movs	r3, #0
 80115e0:	4650      	mov	r0, sl
 80115e2:	4659      	mov	r1, fp
 80115e4:	f7ef fa74 	bl	8000ad0 <__aeabi_dcmpeq>
 80115e8:	4680      	mov	r8, r0
 80115ea:	ec4b ab19 	vmov	d9, sl, fp
 80115ee:	b158      	cbz	r0, 8011608 <_dtoa_r+0xe0>
 80115f0:	2301      	movs	r3, #1
 80115f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115f4:	6013      	str	r3, [r2, #0]
 80115f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	f000 8568 	beq.w	80120ce <_dtoa_r+0xba6>
 80115fe:	4883      	ldr	r0, [pc, #524]	; (801180c <_dtoa_r+0x2e4>)
 8011600:	6018      	str	r0, [r3, #0]
 8011602:	1e43      	subs	r3, r0, #1
 8011604:	9301      	str	r3, [sp, #4]
 8011606:	e7df      	b.n	80115c8 <_dtoa_r+0xa0>
 8011608:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801160c:	aa10      	add	r2, sp, #64	; 0x40
 801160e:	a911      	add	r1, sp, #68	; 0x44
 8011610:	4620      	mov	r0, r4
 8011612:	ec4b ab10 	vmov	d0, sl, fp
 8011616:	f001 fdfd 	bl	8013214 <__d2b>
 801161a:	ee08 0a10 	vmov	s16, r0
 801161e:	2d00      	cmp	r5, #0
 8011620:	f000 8082 	beq.w	8011728 <_dtoa_r+0x200>
 8011624:	ee19 3a90 	vmov	r3, s19
 8011628:	4656      	mov	r6, sl
 801162a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801162e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011636:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801163a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801163e:	2200      	movs	r2, #0
 8011640:	4b73      	ldr	r3, [pc, #460]	; (8011810 <_dtoa_r+0x2e8>)
 8011642:	4630      	mov	r0, r6
 8011644:	4639      	mov	r1, r7
 8011646:	f7ee fe23 	bl	8000290 <__aeabi_dsub>
 801164a:	a365      	add	r3, pc, #404	; (adr r3, 80117e0 <_dtoa_r+0x2b8>)
 801164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011650:	f7ee ffd6 	bl	8000600 <__aeabi_dmul>
 8011654:	a364      	add	r3, pc, #400	; (adr r3, 80117e8 <_dtoa_r+0x2c0>)
 8011656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165a:	f7ee fe1b 	bl	8000294 <__adddf3>
 801165e:	4606      	mov	r6, r0
 8011660:	460f      	mov	r7, r1
 8011662:	4628      	mov	r0, r5
 8011664:	f7ee ff62 	bl	800052c <__aeabi_i2d>
 8011668:	a361      	add	r3, pc, #388	; (adr r3, 80117f0 <_dtoa_r+0x2c8>)
 801166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166e:	f7ee ffc7 	bl	8000600 <__aeabi_dmul>
 8011672:	4602      	mov	r2, r0
 8011674:	460b      	mov	r3, r1
 8011676:	4630      	mov	r0, r6
 8011678:	4639      	mov	r1, r7
 801167a:	f7ee fe0b 	bl	8000294 <__adddf3>
 801167e:	4606      	mov	r6, r0
 8011680:	460f      	mov	r7, r1
 8011682:	f7ef fa6d 	bl	8000b60 <__aeabi_d2iz>
 8011686:	2200      	movs	r2, #0
 8011688:	9000      	str	r0, [sp, #0]
 801168a:	2300      	movs	r3, #0
 801168c:	4630      	mov	r0, r6
 801168e:	4639      	mov	r1, r7
 8011690:	f7ef fa28 	bl	8000ae4 <__aeabi_dcmplt>
 8011694:	b150      	cbz	r0, 80116ac <_dtoa_r+0x184>
 8011696:	9800      	ldr	r0, [sp, #0]
 8011698:	f7ee ff48 	bl	800052c <__aeabi_i2d>
 801169c:	4632      	mov	r2, r6
 801169e:	463b      	mov	r3, r7
 80116a0:	f7ef fa16 	bl	8000ad0 <__aeabi_dcmpeq>
 80116a4:	b910      	cbnz	r0, 80116ac <_dtoa_r+0x184>
 80116a6:	9b00      	ldr	r3, [sp, #0]
 80116a8:	3b01      	subs	r3, #1
 80116aa:	9300      	str	r3, [sp, #0]
 80116ac:	9b00      	ldr	r3, [sp, #0]
 80116ae:	2b16      	cmp	r3, #22
 80116b0:	d859      	bhi.n	8011766 <_dtoa_r+0x23e>
 80116b2:	9a00      	ldr	r2, [sp, #0]
 80116b4:	4b57      	ldr	r3, [pc, #348]	; (8011814 <_dtoa_r+0x2ec>)
 80116b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116ba:	ec51 0b19 	vmov	r0, r1, d9
 80116be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c2:	f7ef fa0f 	bl	8000ae4 <__aeabi_dcmplt>
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d04f      	beq.n	801176a <_dtoa_r+0x242>
 80116ca:	9b00      	ldr	r3, [sp, #0]
 80116cc:	3b01      	subs	r3, #1
 80116ce:	9300      	str	r3, [sp, #0]
 80116d0:	2300      	movs	r3, #0
 80116d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80116d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80116d6:	1b5d      	subs	r5, r3, r5
 80116d8:	1e6b      	subs	r3, r5, #1
 80116da:	9305      	str	r3, [sp, #20]
 80116dc:	bf49      	itett	mi
 80116de:	f1c5 0301 	rsbmi	r3, r5, #1
 80116e2:	2300      	movpl	r3, #0
 80116e4:	9304      	strmi	r3, [sp, #16]
 80116e6:	2300      	movmi	r3, #0
 80116e8:	bf54      	ite	pl
 80116ea:	9304      	strpl	r3, [sp, #16]
 80116ec:	9305      	strmi	r3, [sp, #20]
 80116ee:	9b00      	ldr	r3, [sp, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	db3c      	blt.n	801176e <_dtoa_r+0x246>
 80116f4:	9b05      	ldr	r3, [sp, #20]
 80116f6:	9a00      	ldr	r2, [sp, #0]
 80116f8:	4413      	add	r3, r2
 80116fa:	920a      	str	r2, [sp, #40]	; 0x28
 80116fc:	9305      	str	r3, [sp, #20]
 80116fe:	2300      	movs	r3, #0
 8011700:	9307      	str	r3, [sp, #28]
 8011702:	9b06      	ldr	r3, [sp, #24]
 8011704:	2b09      	cmp	r3, #9
 8011706:	f200 8089 	bhi.w	801181c <_dtoa_r+0x2f4>
 801170a:	2b05      	cmp	r3, #5
 801170c:	bfc5      	ittet	gt
 801170e:	3b04      	subgt	r3, #4
 8011710:	2500      	movgt	r5, #0
 8011712:	2501      	movle	r5, #1
 8011714:	9306      	strgt	r3, [sp, #24]
 8011716:	9b06      	ldr	r3, [sp, #24]
 8011718:	3b02      	subs	r3, #2
 801171a:	2b03      	cmp	r3, #3
 801171c:	f200 8089 	bhi.w	8011832 <_dtoa_r+0x30a>
 8011720:	e8df f003 	tbb	[pc, r3]
 8011724:	5a393b2e 	.word	0x5a393b2e
 8011728:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801172c:	441d      	add	r5, r3
 801172e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011732:	2b20      	cmp	r3, #32
 8011734:	bfc6      	itte	gt
 8011736:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801173a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801173e:	f1c3 0320 	rsble	r3, r3, #32
 8011742:	f105 35ff 	add.w	r5, r5, #4294967295
 8011746:	bfc5      	ittet	gt
 8011748:	fa0b f303 	lslgt.w	r3, fp, r3
 801174c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011750:	fa06 f003 	lslle.w	r0, r6, r3
 8011754:	4318      	orrgt	r0, r3
 8011756:	f7ee fed9 	bl	800050c <__aeabi_ui2d>
 801175a:	2301      	movs	r3, #1
 801175c:	4606      	mov	r6, r0
 801175e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011762:	930e      	str	r3, [sp, #56]	; 0x38
 8011764:	e76b      	b.n	801163e <_dtoa_r+0x116>
 8011766:	2301      	movs	r3, #1
 8011768:	e7b3      	b.n	80116d2 <_dtoa_r+0x1aa>
 801176a:	900b      	str	r0, [sp, #44]	; 0x2c
 801176c:	e7b2      	b.n	80116d4 <_dtoa_r+0x1ac>
 801176e:	9b04      	ldr	r3, [sp, #16]
 8011770:	9a00      	ldr	r2, [sp, #0]
 8011772:	1a9b      	subs	r3, r3, r2
 8011774:	9304      	str	r3, [sp, #16]
 8011776:	4253      	negs	r3, r2
 8011778:	9307      	str	r3, [sp, #28]
 801177a:	2300      	movs	r3, #0
 801177c:	930a      	str	r3, [sp, #40]	; 0x28
 801177e:	e7c0      	b.n	8011702 <_dtoa_r+0x1da>
 8011780:	2300      	movs	r3, #0
 8011782:	9308      	str	r3, [sp, #32]
 8011784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011786:	2b00      	cmp	r3, #0
 8011788:	dc56      	bgt.n	8011838 <_dtoa_r+0x310>
 801178a:	2301      	movs	r3, #1
 801178c:	461a      	mov	r2, r3
 801178e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011792:	9209      	str	r2, [sp, #36]	; 0x24
 8011794:	e00c      	b.n	80117b0 <_dtoa_r+0x288>
 8011796:	2301      	movs	r3, #1
 8011798:	e7f3      	b.n	8011782 <_dtoa_r+0x25a>
 801179a:	2300      	movs	r3, #0
 801179c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801179e:	9308      	str	r3, [sp, #32]
 80117a0:	9b00      	ldr	r3, [sp, #0]
 80117a2:	4413      	add	r3, r2
 80117a4:	9302      	str	r3, [sp, #8]
 80117a6:	3301      	adds	r3, #1
 80117a8:	2b01      	cmp	r3, #1
 80117aa:	9303      	str	r3, [sp, #12]
 80117ac:	bfb8      	it	lt
 80117ae:	2301      	movlt	r3, #1
 80117b0:	2200      	movs	r2, #0
 80117b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80117b4:	6042      	str	r2, [r0, #4]
 80117b6:	2204      	movs	r2, #4
 80117b8:	f102 0614 	add.w	r6, r2, #20
 80117bc:	6841      	ldr	r1, [r0, #4]
 80117be:	429e      	cmp	r6, r3
 80117c0:	d93e      	bls.n	8011840 <_dtoa_r+0x318>
 80117c2:	4620      	mov	r0, r4
 80117c4:	f001 f934 	bl	8012a30 <_Balloc>
 80117c8:	9001      	str	r0, [sp, #4]
 80117ca:	2800      	cmp	r0, #0
 80117cc:	d13c      	bne.n	8011848 <_dtoa_r+0x320>
 80117ce:	4b12      	ldr	r3, [pc, #72]	; (8011818 <_dtoa_r+0x2f0>)
 80117d0:	4602      	mov	r2, r0
 80117d2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80117d6:	e6c1      	b.n	801155c <_dtoa_r+0x34>
 80117d8:	2301      	movs	r3, #1
 80117da:	e7df      	b.n	801179c <_dtoa_r+0x274>
 80117dc:	f3af 8000 	nop.w
 80117e0:	636f4361 	.word	0x636f4361
 80117e4:	3fd287a7 	.word	0x3fd287a7
 80117e8:	8b60c8b3 	.word	0x8b60c8b3
 80117ec:	3fc68a28 	.word	0x3fc68a28
 80117f0:	509f79fb 	.word	0x509f79fb
 80117f4:	3fd34413 	.word	0x3fd34413
 80117f8:	08069396 	.word	0x08069396
 80117fc:	080693ad 	.word	0x080693ad
 8011800:	7ff00000 	.word	0x7ff00000
 8011804:	08069392 	.word	0x08069392
 8011808:	08069389 	.word	0x08069389
 801180c:	08069209 	.word	0x08069209
 8011810:	3ff80000 	.word	0x3ff80000
 8011814:	08069580 	.word	0x08069580
 8011818:	08069408 	.word	0x08069408
 801181c:	2501      	movs	r5, #1
 801181e:	2300      	movs	r3, #0
 8011820:	9508      	str	r5, [sp, #32]
 8011822:	9306      	str	r3, [sp, #24]
 8011824:	f04f 33ff 	mov.w	r3, #4294967295
 8011828:	2200      	movs	r2, #0
 801182a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801182e:	2312      	movs	r3, #18
 8011830:	e7af      	b.n	8011792 <_dtoa_r+0x26a>
 8011832:	2301      	movs	r3, #1
 8011834:	9308      	str	r3, [sp, #32]
 8011836:	e7f5      	b.n	8011824 <_dtoa_r+0x2fc>
 8011838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801183a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801183e:	e7b7      	b.n	80117b0 <_dtoa_r+0x288>
 8011840:	3101      	adds	r1, #1
 8011842:	0052      	lsls	r2, r2, #1
 8011844:	6041      	str	r1, [r0, #4]
 8011846:	e7b7      	b.n	80117b8 <_dtoa_r+0x290>
 8011848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801184a:	9a01      	ldr	r2, [sp, #4]
 801184c:	601a      	str	r2, [r3, #0]
 801184e:	9b03      	ldr	r3, [sp, #12]
 8011850:	2b0e      	cmp	r3, #14
 8011852:	f200 809d 	bhi.w	8011990 <_dtoa_r+0x468>
 8011856:	2d00      	cmp	r5, #0
 8011858:	f000 809a 	beq.w	8011990 <_dtoa_r+0x468>
 801185c:	9b00      	ldr	r3, [sp, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	dd32      	ble.n	80118c8 <_dtoa_r+0x3a0>
 8011862:	f003 030f 	and.w	r3, r3, #15
 8011866:	4ab6      	ldr	r2, [pc, #728]	; (8011b40 <_dtoa_r+0x618>)
 8011868:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801186c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011870:	9b00      	ldr	r3, [sp, #0]
 8011872:	05d8      	lsls	r0, r3, #23
 8011874:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011878:	d516      	bpl.n	80118a8 <_dtoa_r+0x380>
 801187a:	4bb2      	ldr	r3, [pc, #712]	; (8011b44 <_dtoa_r+0x61c>)
 801187c:	f007 070f 	and.w	r7, r7, #15
 8011880:	2503      	movs	r5, #3
 8011882:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011886:	ec51 0b19 	vmov	r0, r1, d9
 801188a:	f7ee ffe3 	bl	8000854 <__aeabi_ddiv>
 801188e:	4682      	mov	sl, r0
 8011890:	468b      	mov	fp, r1
 8011892:	4eac      	ldr	r6, [pc, #688]	; (8011b44 <_dtoa_r+0x61c>)
 8011894:	b957      	cbnz	r7, 80118ac <_dtoa_r+0x384>
 8011896:	4642      	mov	r2, r8
 8011898:	464b      	mov	r3, r9
 801189a:	4650      	mov	r0, sl
 801189c:	4659      	mov	r1, fp
 801189e:	f7ee ffd9 	bl	8000854 <__aeabi_ddiv>
 80118a2:	4682      	mov	sl, r0
 80118a4:	468b      	mov	fp, r1
 80118a6:	e028      	b.n	80118fa <_dtoa_r+0x3d2>
 80118a8:	2502      	movs	r5, #2
 80118aa:	e7f2      	b.n	8011892 <_dtoa_r+0x36a>
 80118ac:	07f9      	lsls	r1, r7, #31
 80118ae:	d508      	bpl.n	80118c2 <_dtoa_r+0x39a>
 80118b0:	4640      	mov	r0, r8
 80118b2:	4649      	mov	r1, r9
 80118b4:	3501      	adds	r5, #1
 80118b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80118ba:	f7ee fea1 	bl	8000600 <__aeabi_dmul>
 80118be:	4680      	mov	r8, r0
 80118c0:	4689      	mov	r9, r1
 80118c2:	107f      	asrs	r7, r7, #1
 80118c4:	3608      	adds	r6, #8
 80118c6:	e7e5      	b.n	8011894 <_dtoa_r+0x36c>
 80118c8:	f000 809b 	beq.w	8011a02 <_dtoa_r+0x4da>
 80118cc:	9b00      	ldr	r3, [sp, #0]
 80118ce:	2502      	movs	r5, #2
 80118d0:	4f9c      	ldr	r7, [pc, #624]	; (8011b44 <_dtoa_r+0x61c>)
 80118d2:	425e      	negs	r6, r3
 80118d4:	4b9a      	ldr	r3, [pc, #616]	; (8011b40 <_dtoa_r+0x618>)
 80118d6:	f006 020f 	and.w	r2, r6, #15
 80118da:	1136      	asrs	r6, r6, #4
 80118dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80118e0:	ec51 0b19 	vmov	r0, r1, d9
 80118e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e8:	f7ee fe8a 	bl	8000600 <__aeabi_dmul>
 80118ec:	2300      	movs	r3, #0
 80118ee:	4682      	mov	sl, r0
 80118f0:	468b      	mov	fp, r1
 80118f2:	2e00      	cmp	r6, #0
 80118f4:	d17a      	bne.n	80119ec <_dtoa_r+0x4c4>
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d1d3      	bne.n	80118a2 <_dtoa_r+0x37a>
 80118fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	f000 8082 	beq.w	8011a06 <_dtoa_r+0x4de>
 8011902:	2200      	movs	r2, #0
 8011904:	4b90      	ldr	r3, [pc, #576]	; (8011b48 <_dtoa_r+0x620>)
 8011906:	4650      	mov	r0, sl
 8011908:	4659      	mov	r1, fp
 801190a:	f7ef f8eb 	bl	8000ae4 <__aeabi_dcmplt>
 801190e:	2800      	cmp	r0, #0
 8011910:	d079      	beq.n	8011a06 <_dtoa_r+0x4de>
 8011912:	9b03      	ldr	r3, [sp, #12]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d076      	beq.n	8011a06 <_dtoa_r+0x4de>
 8011918:	9b02      	ldr	r3, [sp, #8]
 801191a:	2b00      	cmp	r3, #0
 801191c:	dd36      	ble.n	801198c <_dtoa_r+0x464>
 801191e:	9b00      	ldr	r3, [sp, #0]
 8011920:	4650      	mov	r0, sl
 8011922:	4659      	mov	r1, fp
 8011924:	2200      	movs	r2, #0
 8011926:	1e5f      	subs	r7, r3, #1
 8011928:	4b88      	ldr	r3, [pc, #544]	; (8011b4c <_dtoa_r+0x624>)
 801192a:	f7ee fe69 	bl	8000600 <__aeabi_dmul>
 801192e:	3501      	adds	r5, #1
 8011930:	4682      	mov	sl, r0
 8011932:	468b      	mov	fp, r1
 8011934:	9e02      	ldr	r6, [sp, #8]
 8011936:	4628      	mov	r0, r5
 8011938:	46d0      	mov	r8, sl
 801193a:	f7ee fdf7 	bl	800052c <__aeabi_i2d>
 801193e:	4652      	mov	r2, sl
 8011940:	465b      	mov	r3, fp
 8011942:	46d9      	mov	r9, fp
 8011944:	f7ee fe5c 	bl	8000600 <__aeabi_dmul>
 8011948:	2200      	movs	r2, #0
 801194a:	4b81      	ldr	r3, [pc, #516]	; (8011b50 <_dtoa_r+0x628>)
 801194c:	f7ee fca2 	bl	8000294 <__adddf3>
 8011950:	4682      	mov	sl, r0
 8011952:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011956:	2e00      	cmp	r6, #0
 8011958:	d158      	bne.n	8011a0c <_dtoa_r+0x4e4>
 801195a:	2200      	movs	r2, #0
 801195c:	4b7d      	ldr	r3, [pc, #500]	; (8011b54 <_dtoa_r+0x62c>)
 801195e:	4640      	mov	r0, r8
 8011960:	4649      	mov	r1, r9
 8011962:	f7ee fc95 	bl	8000290 <__aeabi_dsub>
 8011966:	4652      	mov	r2, sl
 8011968:	465b      	mov	r3, fp
 801196a:	4680      	mov	r8, r0
 801196c:	4689      	mov	r9, r1
 801196e:	f7ef f8d7 	bl	8000b20 <__aeabi_dcmpgt>
 8011972:	2800      	cmp	r0, #0
 8011974:	f040 8293 	bne.w	8011e9e <_dtoa_r+0x976>
 8011978:	4652      	mov	r2, sl
 801197a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801197e:	4640      	mov	r0, r8
 8011980:	4649      	mov	r1, r9
 8011982:	f7ef f8af 	bl	8000ae4 <__aeabi_dcmplt>
 8011986:	2800      	cmp	r0, #0
 8011988:	f040 8287 	bne.w	8011e9a <_dtoa_r+0x972>
 801198c:	ec5b ab19 	vmov	sl, fp, d9
 8011990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011992:	2b00      	cmp	r3, #0
 8011994:	f2c0 8148 	blt.w	8011c28 <_dtoa_r+0x700>
 8011998:	9a00      	ldr	r2, [sp, #0]
 801199a:	2a0e      	cmp	r2, #14
 801199c:	f300 8144 	bgt.w	8011c28 <_dtoa_r+0x700>
 80119a0:	4b67      	ldr	r3, [pc, #412]	; (8011b40 <_dtoa_r+0x618>)
 80119a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80119aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	f280 80d5 	bge.w	8011b5c <_dtoa_r+0x634>
 80119b2:	9b03      	ldr	r3, [sp, #12]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	f300 80d1 	bgt.w	8011b5c <_dtoa_r+0x634>
 80119ba:	f040 826d 	bne.w	8011e98 <_dtoa_r+0x970>
 80119be:	2200      	movs	r2, #0
 80119c0:	4b64      	ldr	r3, [pc, #400]	; (8011b54 <_dtoa_r+0x62c>)
 80119c2:	4640      	mov	r0, r8
 80119c4:	4649      	mov	r1, r9
 80119c6:	f7ee fe1b 	bl	8000600 <__aeabi_dmul>
 80119ca:	4652      	mov	r2, sl
 80119cc:	465b      	mov	r3, fp
 80119ce:	f7ef f89d 	bl	8000b0c <__aeabi_dcmpge>
 80119d2:	9e03      	ldr	r6, [sp, #12]
 80119d4:	4637      	mov	r7, r6
 80119d6:	2800      	cmp	r0, #0
 80119d8:	f040 8243 	bne.w	8011e62 <_dtoa_r+0x93a>
 80119dc:	2331      	movs	r3, #49	; 0x31
 80119de:	9d01      	ldr	r5, [sp, #4]
 80119e0:	f805 3b01 	strb.w	r3, [r5], #1
 80119e4:	9b00      	ldr	r3, [sp, #0]
 80119e6:	3301      	adds	r3, #1
 80119e8:	9300      	str	r3, [sp, #0]
 80119ea:	e23e      	b.n	8011e6a <_dtoa_r+0x942>
 80119ec:	07f2      	lsls	r2, r6, #31
 80119ee:	d505      	bpl.n	80119fc <_dtoa_r+0x4d4>
 80119f0:	3501      	adds	r5, #1
 80119f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80119f6:	f7ee fe03 	bl	8000600 <__aeabi_dmul>
 80119fa:	2301      	movs	r3, #1
 80119fc:	1076      	asrs	r6, r6, #1
 80119fe:	3708      	adds	r7, #8
 8011a00:	e777      	b.n	80118f2 <_dtoa_r+0x3ca>
 8011a02:	2502      	movs	r5, #2
 8011a04:	e779      	b.n	80118fa <_dtoa_r+0x3d2>
 8011a06:	9f00      	ldr	r7, [sp, #0]
 8011a08:	9e03      	ldr	r6, [sp, #12]
 8011a0a:	e794      	b.n	8011936 <_dtoa_r+0x40e>
 8011a0c:	9901      	ldr	r1, [sp, #4]
 8011a0e:	4b4c      	ldr	r3, [pc, #304]	; (8011b40 <_dtoa_r+0x618>)
 8011a10:	4431      	add	r1, r6
 8011a12:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011a16:	910d      	str	r1, [sp, #52]	; 0x34
 8011a18:	9908      	ldr	r1, [sp, #32]
 8011a1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011a1e:	2900      	cmp	r1, #0
 8011a20:	d043      	beq.n	8011aaa <_dtoa_r+0x582>
 8011a22:	2000      	movs	r0, #0
 8011a24:	494c      	ldr	r1, [pc, #304]	; (8011b58 <_dtoa_r+0x630>)
 8011a26:	f7ee ff15 	bl	8000854 <__aeabi_ddiv>
 8011a2a:	4652      	mov	r2, sl
 8011a2c:	465b      	mov	r3, fp
 8011a2e:	f7ee fc2f 	bl	8000290 <__aeabi_dsub>
 8011a32:	9d01      	ldr	r5, [sp, #4]
 8011a34:	4682      	mov	sl, r0
 8011a36:	468b      	mov	fp, r1
 8011a38:	4649      	mov	r1, r9
 8011a3a:	4640      	mov	r0, r8
 8011a3c:	f7ef f890 	bl	8000b60 <__aeabi_d2iz>
 8011a40:	4606      	mov	r6, r0
 8011a42:	f7ee fd73 	bl	800052c <__aeabi_i2d>
 8011a46:	4602      	mov	r2, r0
 8011a48:	3630      	adds	r6, #48	; 0x30
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	4640      	mov	r0, r8
 8011a4e:	4649      	mov	r1, r9
 8011a50:	f7ee fc1e 	bl	8000290 <__aeabi_dsub>
 8011a54:	4652      	mov	r2, sl
 8011a56:	465b      	mov	r3, fp
 8011a58:	f805 6b01 	strb.w	r6, [r5], #1
 8011a5c:	4680      	mov	r8, r0
 8011a5e:	4689      	mov	r9, r1
 8011a60:	f7ef f840 	bl	8000ae4 <__aeabi_dcmplt>
 8011a64:	2800      	cmp	r0, #0
 8011a66:	d163      	bne.n	8011b30 <_dtoa_r+0x608>
 8011a68:	4642      	mov	r2, r8
 8011a6a:	464b      	mov	r3, r9
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	4936      	ldr	r1, [pc, #216]	; (8011b48 <_dtoa_r+0x620>)
 8011a70:	f7ee fc0e 	bl	8000290 <__aeabi_dsub>
 8011a74:	4652      	mov	r2, sl
 8011a76:	465b      	mov	r3, fp
 8011a78:	f7ef f834 	bl	8000ae4 <__aeabi_dcmplt>
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	f040 80b5 	bne.w	8011bec <_dtoa_r+0x6c4>
 8011a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a84:	429d      	cmp	r5, r3
 8011a86:	d081      	beq.n	801198c <_dtoa_r+0x464>
 8011a88:	2200      	movs	r2, #0
 8011a8a:	4b30      	ldr	r3, [pc, #192]	; (8011b4c <_dtoa_r+0x624>)
 8011a8c:	4650      	mov	r0, sl
 8011a8e:	4659      	mov	r1, fp
 8011a90:	f7ee fdb6 	bl	8000600 <__aeabi_dmul>
 8011a94:	2200      	movs	r2, #0
 8011a96:	4682      	mov	sl, r0
 8011a98:	468b      	mov	fp, r1
 8011a9a:	4640      	mov	r0, r8
 8011a9c:	4649      	mov	r1, r9
 8011a9e:	4b2b      	ldr	r3, [pc, #172]	; (8011b4c <_dtoa_r+0x624>)
 8011aa0:	f7ee fdae 	bl	8000600 <__aeabi_dmul>
 8011aa4:	4680      	mov	r8, r0
 8011aa6:	4689      	mov	r9, r1
 8011aa8:	e7c6      	b.n	8011a38 <_dtoa_r+0x510>
 8011aaa:	4650      	mov	r0, sl
 8011aac:	4659      	mov	r1, fp
 8011aae:	f7ee fda7 	bl	8000600 <__aeabi_dmul>
 8011ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ab4:	4682      	mov	sl, r0
 8011ab6:	468b      	mov	fp, r1
 8011ab8:	9d01      	ldr	r5, [sp, #4]
 8011aba:	930f      	str	r3, [sp, #60]	; 0x3c
 8011abc:	4649      	mov	r1, r9
 8011abe:	4640      	mov	r0, r8
 8011ac0:	f7ef f84e 	bl	8000b60 <__aeabi_d2iz>
 8011ac4:	4606      	mov	r6, r0
 8011ac6:	f7ee fd31 	bl	800052c <__aeabi_i2d>
 8011aca:	4602      	mov	r2, r0
 8011acc:	460b      	mov	r3, r1
 8011ace:	4640      	mov	r0, r8
 8011ad0:	4649      	mov	r1, r9
 8011ad2:	3630      	adds	r6, #48	; 0x30
 8011ad4:	f7ee fbdc 	bl	8000290 <__aeabi_dsub>
 8011ad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ada:	f805 6b01 	strb.w	r6, [r5], #1
 8011ade:	4680      	mov	r8, r0
 8011ae0:	429d      	cmp	r5, r3
 8011ae2:	4689      	mov	r9, r1
 8011ae4:	f04f 0200 	mov.w	r2, #0
 8011ae8:	d124      	bne.n	8011b34 <_dtoa_r+0x60c>
 8011aea:	4b1b      	ldr	r3, [pc, #108]	; (8011b58 <_dtoa_r+0x630>)
 8011aec:	4650      	mov	r0, sl
 8011aee:	4659      	mov	r1, fp
 8011af0:	f7ee fbd0 	bl	8000294 <__adddf3>
 8011af4:	4602      	mov	r2, r0
 8011af6:	460b      	mov	r3, r1
 8011af8:	4640      	mov	r0, r8
 8011afa:	4649      	mov	r1, r9
 8011afc:	f7ef f810 	bl	8000b20 <__aeabi_dcmpgt>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	d173      	bne.n	8011bec <_dtoa_r+0x6c4>
 8011b04:	4652      	mov	r2, sl
 8011b06:	465b      	mov	r3, fp
 8011b08:	2000      	movs	r0, #0
 8011b0a:	4913      	ldr	r1, [pc, #76]	; (8011b58 <_dtoa_r+0x630>)
 8011b0c:	f7ee fbc0 	bl	8000290 <__aeabi_dsub>
 8011b10:	4602      	mov	r2, r0
 8011b12:	460b      	mov	r3, r1
 8011b14:	4640      	mov	r0, r8
 8011b16:	4649      	mov	r1, r9
 8011b18:	f7ee ffe4 	bl	8000ae4 <__aeabi_dcmplt>
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	f43f af35 	beq.w	801198c <_dtoa_r+0x464>
 8011b22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011b24:	1e6b      	subs	r3, r5, #1
 8011b26:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011b2c:	2b30      	cmp	r3, #48	; 0x30
 8011b2e:	d0f8      	beq.n	8011b22 <_dtoa_r+0x5fa>
 8011b30:	9700      	str	r7, [sp, #0]
 8011b32:	e049      	b.n	8011bc8 <_dtoa_r+0x6a0>
 8011b34:	4b05      	ldr	r3, [pc, #20]	; (8011b4c <_dtoa_r+0x624>)
 8011b36:	f7ee fd63 	bl	8000600 <__aeabi_dmul>
 8011b3a:	4680      	mov	r8, r0
 8011b3c:	4689      	mov	r9, r1
 8011b3e:	e7bd      	b.n	8011abc <_dtoa_r+0x594>
 8011b40:	08069580 	.word	0x08069580
 8011b44:	08069558 	.word	0x08069558
 8011b48:	3ff00000 	.word	0x3ff00000
 8011b4c:	40240000 	.word	0x40240000
 8011b50:	401c0000 	.word	0x401c0000
 8011b54:	40140000 	.word	0x40140000
 8011b58:	3fe00000 	.word	0x3fe00000
 8011b5c:	4656      	mov	r6, sl
 8011b5e:	465f      	mov	r7, fp
 8011b60:	9d01      	ldr	r5, [sp, #4]
 8011b62:	4642      	mov	r2, r8
 8011b64:	464b      	mov	r3, r9
 8011b66:	4630      	mov	r0, r6
 8011b68:	4639      	mov	r1, r7
 8011b6a:	f7ee fe73 	bl	8000854 <__aeabi_ddiv>
 8011b6e:	f7ee fff7 	bl	8000b60 <__aeabi_d2iz>
 8011b72:	4682      	mov	sl, r0
 8011b74:	f7ee fcda 	bl	800052c <__aeabi_i2d>
 8011b78:	4642      	mov	r2, r8
 8011b7a:	464b      	mov	r3, r9
 8011b7c:	f7ee fd40 	bl	8000600 <__aeabi_dmul>
 8011b80:	4602      	mov	r2, r0
 8011b82:	4630      	mov	r0, r6
 8011b84:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011b88:	460b      	mov	r3, r1
 8011b8a:	4639      	mov	r1, r7
 8011b8c:	f7ee fb80 	bl	8000290 <__aeabi_dsub>
 8011b90:	f805 6b01 	strb.w	r6, [r5], #1
 8011b94:	9e01      	ldr	r6, [sp, #4]
 8011b96:	4602      	mov	r2, r0
 8011b98:	9f03      	ldr	r7, [sp, #12]
 8011b9a:	460b      	mov	r3, r1
 8011b9c:	1bae      	subs	r6, r5, r6
 8011b9e:	42b7      	cmp	r7, r6
 8011ba0:	d135      	bne.n	8011c0e <_dtoa_r+0x6e6>
 8011ba2:	f7ee fb77 	bl	8000294 <__adddf3>
 8011ba6:	4642      	mov	r2, r8
 8011ba8:	464b      	mov	r3, r9
 8011baa:	4606      	mov	r6, r0
 8011bac:	460f      	mov	r7, r1
 8011bae:	f7ee ffb7 	bl	8000b20 <__aeabi_dcmpgt>
 8011bb2:	b9d0      	cbnz	r0, 8011bea <_dtoa_r+0x6c2>
 8011bb4:	4642      	mov	r2, r8
 8011bb6:	464b      	mov	r3, r9
 8011bb8:	4630      	mov	r0, r6
 8011bba:	4639      	mov	r1, r7
 8011bbc:	f7ee ff88 	bl	8000ad0 <__aeabi_dcmpeq>
 8011bc0:	b110      	cbz	r0, 8011bc8 <_dtoa_r+0x6a0>
 8011bc2:	f01a 0f01 	tst.w	sl, #1
 8011bc6:	d110      	bne.n	8011bea <_dtoa_r+0x6c2>
 8011bc8:	4620      	mov	r0, r4
 8011bca:	ee18 1a10 	vmov	r1, s16
 8011bce:	f000 ff6f 	bl	8012ab0 <_Bfree>
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	9800      	ldr	r0, [sp, #0]
 8011bd6:	702b      	strb	r3, [r5, #0]
 8011bd8:	3001      	adds	r0, #1
 8011bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bdc:	6018      	str	r0, [r3, #0]
 8011bde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	f43f acf1 	beq.w	80115c8 <_dtoa_r+0xa0>
 8011be6:	601d      	str	r5, [r3, #0]
 8011be8:	e4ee      	b.n	80115c8 <_dtoa_r+0xa0>
 8011bea:	9f00      	ldr	r7, [sp, #0]
 8011bec:	462b      	mov	r3, r5
 8011bee:	461d      	mov	r5, r3
 8011bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011bf4:	2a39      	cmp	r2, #57	; 0x39
 8011bf6:	d106      	bne.n	8011c06 <_dtoa_r+0x6de>
 8011bf8:	9a01      	ldr	r2, [sp, #4]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d1f7      	bne.n	8011bee <_dtoa_r+0x6c6>
 8011bfe:	2230      	movs	r2, #48	; 0x30
 8011c00:	9901      	ldr	r1, [sp, #4]
 8011c02:	3701      	adds	r7, #1
 8011c04:	700a      	strb	r2, [r1, #0]
 8011c06:	781a      	ldrb	r2, [r3, #0]
 8011c08:	3201      	adds	r2, #1
 8011c0a:	701a      	strb	r2, [r3, #0]
 8011c0c:	e790      	b.n	8011b30 <_dtoa_r+0x608>
 8011c0e:	2200      	movs	r2, #0
 8011c10:	4ba4      	ldr	r3, [pc, #656]	; (8011ea4 <_dtoa_r+0x97c>)
 8011c12:	f7ee fcf5 	bl	8000600 <__aeabi_dmul>
 8011c16:	2200      	movs	r2, #0
 8011c18:	2300      	movs	r3, #0
 8011c1a:	4606      	mov	r6, r0
 8011c1c:	460f      	mov	r7, r1
 8011c1e:	f7ee ff57 	bl	8000ad0 <__aeabi_dcmpeq>
 8011c22:	2800      	cmp	r0, #0
 8011c24:	d09d      	beq.n	8011b62 <_dtoa_r+0x63a>
 8011c26:	e7cf      	b.n	8011bc8 <_dtoa_r+0x6a0>
 8011c28:	9a08      	ldr	r2, [sp, #32]
 8011c2a:	2a00      	cmp	r2, #0
 8011c2c:	f000 80d5 	beq.w	8011dda <_dtoa_r+0x8b2>
 8011c30:	9a06      	ldr	r2, [sp, #24]
 8011c32:	2a01      	cmp	r2, #1
 8011c34:	f300 80b9 	bgt.w	8011daa <_dtoa_r+0x882>
 8011c38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c3a:	2a00      	cmp	r2, #0
 8011c3c:	f000 80b1 	beq.w	8011da2 <_dtoa_r+0x87a>
 8011c40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011c44:	9e07      	ldr	r6, [sp, #28]
 8011c46:	9d04      	ldr	r5, [sp, #16]
 8011c48:	9a04      	ldr	r2, [sp, #16]
 8011c4a:	2101      	movs	r1, #1
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	441a      	add	r2, r3
 8011c50:	9204      	str	r2, [sp, #16]
 8011c52:	9a05      	ldr	r2, [sp, #20]
 8011c54:	441a      	add	r2, r3
 8011c56:	9205      	str	r2, [sp, #20]
 8011c58:	f001 f82e 	bl	8012cb8 <__i2b>
 8011c5c:	4607      	mov	r7, r0
 8011c5e:	2d00      	cmp	r5, #0
 8011c60:	dd0c      	ble.n	8011c7c <_dtoa_r+0x754>
 8011c62:	9b05      	ldr	r3, [sp, #20]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	dd09      	ble.n	8011c7c <_dtoa_r+0x754>
 8011c68:	42ab      	cmp	r3, r5
 8011c6a:	9a04      	ldr	r2, [sp, #16]
 8011c6c:	bfa8      	it	ge
 8011c6e:	462b      	movge	r3, r5
 8011c70:	1ad2      	subs	r2, r2, r3
 8011c72:	1aed      	subs	r5, r5, r3
 8011c74:	9204      	str	r2, [sp, #16]
 8011c76:	9a05      	ldr	r2, [sp, #20]
 8011c78:	1ad3      	subs	r3, r2, r3
 8011c7a:	9305      	str	r3, [sp, #20]
 8011c7c:	9b07      	ldr	r3, [sp, #28]
 8011c7e:	b31b      	cbz	r3, 8011cc8 <_dtoa_r+0x7a0>
 8011c80:	9b08      	ldr	r3, [sp, #32]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	f000 80ad 	beq.w	8011de2 <_dtoa_r+0x8ba>
 8011c88:	2e00      	cmp	r6, #0
 8011c8a:	dd13      	ble.n	8011cb4 <_dtoa_r+0x78c>
 8011c8c:	4639      	mov	r1, r7
 8011c8e:	4632      	mov	r2, r6
 8011c90:	4620      	mov	r0, r4
 8011c92:	f001 f8cf 	bl	8012e34 <__pow5mult>
 8011c96:	ee18 2a10 	vmov	r2, s16
 8011c9a:	4601      	mov	r1, r0
 8011c9c:	4607      	mov	r7, r0
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f001 f820 	bl	8012ce4 <__multiply>
 8011ca4:	4680      	mov	r8, r0
 8011ca6:	ee18 1a10 	vmov	r1, s16
 8011caa:	4620      	mov	r0, r4
 8011cac:	ee08 8a10 	vmov	s16, r8
 8011cb0:	f000 fefe 	bl	8012ab0 <_Bfree>
 8011cb4:	9b07      	ldr	r3, [sp, #28]
 8011cb6:	1b9a      	subs	r2, r3, r6
 8011cb8:	d006      	beq.n	8011cc8 <_dtoa_r+0x7a0>
 8011cba:	ee18 1a10 	vmov	r1, s16
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f001 f8b8 	bl	8012e34 <__pow5mult>
 8011cc4:	ee08 0a10 	vmov	s16, r0
 8011cc8:	2101      	movs	r1, #1
 8011cca:	4620      	mov	r0, r4
 8011ccc:	f000 fff4 	bl	8012cb8 <__i2b>
 8011cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	f340 8086 	ble.w	8011de6 <_dtoa_r+0x8be>
 8011cda:	461a      	mov	r2, r3
 8011cdc:	4601      	mov	r1, r0
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f001 f8a8 	bl	8012e34 <__pow5mult>
 8011ce4:	9b06      	ldr	r3, [sp, #24]
 8011ce6:	4606      	mov	r6, r0
 8011ce8:	2b01      	cmp	r3, #1
 8011cea:	dd7f      	ble.n	8011dec <_dtoa_r+0x8c4>
 8011cec:	f04f 0800 	mov.w	r8, #0
 8011cf0:	6933      	ldr	r3, [r6, #16]
 8011cf2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011cf6:	6918      	ldr	r0, [r3, #16]
 8011cf8:	f000 ff8e 	bl	8012c18 <__hi0bits>
 8011cfc:	f1c0 0020 	rsb	r0, r0, #32
 8011d00:	9b05      	ldr	r3, [sp, #20]
 8011d02:	4418      	add	r0, r3
 8011d04:	f010 001f 	ands.w	r0, r0, #31
 8011d08:	f000 8091 	beq.w	8011e2e <_dtoa_r+0x906>
 8011d0c:	f1c0 0320 	rsb	r3, r0, #32
 8011d10:	2b04      	cmp	r3, #4
 8011d12:	f340 8089 	ble.w	8011e28 <_dtoa_r+0x900>
 8011d16:	f1c0 001c 	rsb	r0, r0, #28
 8011d1a:	9b04      	ldr	r3, [sp, #16]
 8011d1c:	4405      	add	r5, r0
 8011d1e:	4403      	add	r3, r0
 8011d20:	9304      	str	r3, [sp, #16]
 8011d22:	9b05      	ldr	r3, [sp, #20]
 8011d24:	4403      	add	r3, r0
 8011d26:	9305      	str	r3, [sp, #20]
 8011d28:	9b04      	ldr	r3, [sp, #16]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	dd07      	ble.n	8011d3e <_dtoa_r+0x816>
 8011d2e:	ee18 1a10 	vmov	r1, s16
 8011d32:	461a      	mov	r2, r3
 8011d34:	4620      	mov	r0, r4
 8011d36:	f001 f8d7 	bl	8012ee8 <__lshift>
 8011d3a:	ee08 0a10 	vmov	s16, r0
 8011d3e:	9b05      	ldr	r3, [sp, #20]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	dd05      	ble.n	8011d50 <_dtoa_r+0x828>
 8011d44:	4631      	mov	r1, r6
 8011d46:	461a      	mov	r2, r3
 8011d48:	4620      	mov	r0, r4
 8011d4a:	f001 f8cd 	bl	8012ee8 <__lshift>
 8011d4e:	4606      	mov	r6, r0
 8011d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d06d      	beq.n	8011e32 <_dtoa_r+0x90a>
 8011d56:	4631      	mov	r1, r6
 8011d58:	ee18 0a10 	vmov	r0, s16
 8011d5c:	f001 f934 	bl	8012fc8 <__mcmp>
 8011d60:	2800      	cmp	r0, #0
 8011d62:	da66      	bge.n	8011e32 <_dtoa_r+0x90a>
 8011d64:	9b00      	ldr	r3, [sp, #0]
 8011d66:	ee18 1a10 	vmov	r1, s16
 8011d6a:	220a      	movs	r2, #10
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	3b01      	subs	r3, #1
 8011d70:	9300      	str	r3, [sp, #0]
 8011d72:	2300      	movs	r3, #0
 8011d74:	f000 febe 	bl	8012af4 <__multadd>
 8011d78:	9b08      	ldr	r3, [sp, #32]
 8011d7a:	ee08 0a10 	vmov	s16, r0
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	f000 81af 	beq.w	80120e2 <_dtoa_r+0xbba>
 8011d84:	2300      	movs	r3, #0
 8011d86:	4639      	mov	r1, r7
 8011d88:	220a      	movs	r2, #10
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	f000 feb2 	bl	8012af4 <__multadd>
 8011d90:	9b02      	ldr	r3, [sp, #8]
 8011d92:	4607      	mov	r7, r0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	f300 808d 	bgt.w	8011eb4 <_dtoa_r+0x98c>
 8011d9a:	9b06      	ldr	r3, [sp, #24]
 8011d9c:	2b02      	cmp	r3, #2
 8011d9e:	dc50      	bgt.n	8011e42 <_dtoa_r+0x91a>
 8011da0:	e088      	b.n	8011eb4 <_dtoa_r+0x98c>
 8011da2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011da4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011da8:	e74c      	b.n	8011c44 <_dtoa_r+0x71c>
 8011daa:	9b03      	ldr	r3, [sp, #12]
 8011dac:	1e5e      	subs	r6, r3, #1
 8011dae:	9b07      	ldr	r3, [sp, #28]
 8011db0:	42b3      	cmp	r3, r6
 8011db2:	bfb7      	itett	lt
 8011db4:	9b07      	ldrlt	r3, [sp, #28]
 8011db6:	1b9e      	subge	r6, r3, r6
 8011db8:	9607      	strlt	r6, [sp, #28]
 8011dba:	1af2      	sublt	r2, r6, r3
 8011dbc:	bfbf      	itttt	lt
 8011dbe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011dc0:	2600      	movlt	r6, #0
 8011dc2:	189b      	addlt	r3, r3, r2
 8011dc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011dc6:	9b03      	ldr	r3, [sp, #12]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	bfb7      	itett	lt
 8011dcc:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011dd0:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011dd4:	1a9d      	sublt	r5, r3, r2
 8011dd6:	2300      	movlt	r3, #0
 8011dd8:	e736      	b.n	8011c48 <_dtoa_r+0x720>
 8011dda:	9e07      	ldr	r6, [sp, #28]
 8011ddc:	9d04      	ldr	r5, [sp, #16]
 8011dde:	9f08      	ldr	r7, [sp, #32]
 8011de0:	e73d      	b.n	8011c5e <_dtoa_r+0x736>
 8011de2:	9a07      	ldr	r2, [sp, #28]
 8011de4:	e769      	b.n	8011cba <_dtoa_r+0x792>
 8011de6:	9b06      	ldr	r3, [sp, #24]
 8011de8:	2b01      	cmp	r3, #1
 8011dea:	dc18      	bgt.n	8011e1e <_dtoa_r+0x8f6>
 8011dec:	f1ba 0f00 	cmp.w	sl, #0
 8011df0:	d115      	bne.n	8011e1e <_dtoa_r+0x8f6>
 8011df2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011df6:	b993      	cbnz	r3, 8011e1e <_dtoa_r+0x8f6>
 8011df8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011dfc:	0d1b      	lsrs	r3, r3, #20
 8011dfe:	051b      	lsls	r3, r3, #20
 8011e00:	b183      	cbz	r3, 8011e24 <_dtoa_r+0x8fc>
 8011e02:	9b04      	ldr	r3, [sp, #16]
 8011e04:	f04f 0801 	mov.w	r8, #1
 8011e08:	3301      	adds	r3, #1
 8011e0a:	9304      	str	r3, [sp, #16]
 8011e0c:	9b05      	ldr	r3, [sp, #20]
 8011e0e:	3301      	adds	r3, #1
 8011e10:	9305      	str	r3, [sp, #20]
 8011e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	f47f af6b 	bne.w	8011cf0 <_dtoa_r+0x7c8>
 8011e1a:	2001      	movs	r0, #1
 8011e1c:	e770      	b.n	8011d00 <_dtoa_r+0x7d8>
 8011e1e:	f04f 0800 	mov.w	r8, #0
 8011e22:	e7f6      	b.n	8011e12 <_dtoa_r+0x8ea>
 8011e24:	4698      	mov	r8, r3
 8011e26:	e7f4      	b.n	8011e12 <_dtoa_r+0x8ea>
 8011e28:	f43f af7e 	beq.w	8011d28 <_dtoa_r+0x800>
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	301c      	adds	r0, #28
 8011e30:	e773      	b.n	8011d1a <_dtoa_r+0x7f2>
 8011e32:	9b03      	ldr	r3, [sp, #12]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	dc37      	bgt.n	8011ea8 <_dtoa_r+0x980>
 8011e38:	9b06      	ldr	r3, [sp, #24]
 8011e3a:	2b02      	cmp	r3, #2
 8011e3c:	dd34      	ble.n	8011ea8 <_dtoa_r+0x980>
 8011e3e:	9b03      	ldr	r3, [sp, #12]
 8011e40:	9302      	str	r3, [sp, #8]
 8011e42:	9b02      	ldr	r3, [sp, #8]
 8011e44:	b96b      	cbnz	r3, 8011e62 <_dtoa_r+0x93a>
 8011e46:	4631      	mov	r1, r6
 8011e48:	2205      	movs	r2, #5
 8011e4a:	4620      	mov	r0, r4
 8011e4c:	f000 fe52 	bl	8012af4 <__multadd>
 8011e50:	4601      	mov	r1, r0
 8011e52:	4606      	mov	r6, r0
 8011e54:	ee18 0a10 	vmov	r0, s16
 8011e58:	f001 f8b6 	bl	8012fc8 <__mcmp>
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	f73f adbd 	bgt.w	80119dc <_dtoa_r+0x4b4>
 8011e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e64:	9d01      	ldr	r5, [sp, #4]
 8011e66:	43db      	mvns	r3, r3
 8011e68:	9300      	str	r3, [sp, #0]
 8011e6a:	f04f 0800 	mov.w	r8, #0
 8011e6e:	4631      	mov	r1, r6
 8011e70:	4620      	mov	r0, r4
 8011e72:	f000 fe1d 	bl	8012ab0 <_Bfree>
 8011e76:	2f00      	cmp	r7, #0
 8011e78:	f43f aea6 	beq.w	8011bc8 <_dtoa_r+0x6a0>
 8011e7c:	f1b8 0f00 	cmp.w	r8, #0
 8011e80:	d005      	beq.n	8011e8e <_dtoa_r+0x966>
 8011e82:	45b8      	cmp	r8, r7
 8011e84:	d003      	beq.n	8011e8e <_dtoa_r+0x966>
 8011e86:	4641      	mov	r1, r8
 8011e88:	4620      	mov	r0, r4
 8011e8a:	f000 fe11 	bl	8012ab0 <_Bfree>
 8011e8e:	4639      	mov	r1, r7
 8011e90:	4620      	mov	r0, r4
 8011e92:	f000 fe0d 	bl	8012ab0 <_Bfree>
 8011e96:	e697      	b.n	8011bc8 <_dtoa_r+0x6a0>
 8011e98:	2600      	movs	r6, #0
 8011e9a:	4637      	mov	r7, r6
 8011e9c:	e7e1      	b.n	8011e62 <_dtoa_r+0x93a>
 8011e9e:	9700      	str	r7, [sp, #0]
 8011ea0:	4637      	mov	r7, r6
 8011ea2:	e59b      	b.n	80119dc <_dtoa_r+0x4b4>
 8011ea4:	40240000 	.word	0x40240000
 8011ea8:	9b08      	ldr	r3, [sp, #32]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	f000 80ca 	beq.w	8012044 <_dtoa_r+0xb1c>
 8011eb0:	9b03      	ldr	r3, [sp, #12]
 8011eb2:	9302      	str	r3, [sp, #8]
 8011eb4:	2d00      	cmp	r5, #0
 8011eb6:	dd05      	ble.n	8011ec4 <_dtoa_r+0x99c>
 8011eb8:	4639      	mov	r1, r7
 8011eba:	462a      	mov	r2, r5
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	f001 f813 	bl	8012ee8 <__lshift>
 8011ec2:	4607      	mov	r7, r0
 8011ec4:	f1b8 0f00 	cmp.w	r8, #0
 8011ec8:	d05b      	beq.n	8011f82 <_dtoa_r+0xa5a>
 8011eca:	6879      	ldr	r1, [r7, #4]
 8011ecc:	4620      	mov	r0, r4
 8011ece:	f000 fdaf 	bl	8012a30 <_Balloc>
 8011ed2:	4605      	mov	r5, r0
 8011ed4:	b928      	cbnz	r0, 8011ee2 <_dtoa_r+0x9ba>
 8011ed6:	4b87      	ldr	r3, [pc, #540]	; (80120f4 <_dtoa_r+0xbcc>)
 8011ed8:	4602      	mov	r2, r0
 8011eda:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011ede:	f7ff bb3d 	b.w	801155c <_dtoa_r+0x34>
 8011ee2:	693a      	ldr	r2, [r7, #16]
 8011ee4:	f107 010c 	add.w	r1, r7, #12
 8011ee8:	300c      	adds	r0, #12
 8011eea:	3202      	adds	r2, #2
 8011eec:	0092      	lsls	r2, r2, #2
 8011eee:	f7fd fc1b 	bl	800f728 <memcpy>
 8011ef2:	2201      	movs	r2, #1
 8011ef4:	4629      	mov	r1, r5
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f000 fff6 	bl	8012ee8 <__lshift>
 8011efc:	9b01      	ldr	r3, [sp, #4]
 8011efe:	46b8      	mov	r8, r7
 8011f00:	4607      	mov	r7, r0
 8011f02:	f103 0901 	add.w	r9, r3, #1
 8011f06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011f0a:	4413      	add	r3, r2
 8011f0c:	9305      	str	r3, [sp, #20]
 8011f0e:	f00a 0301 	and.w	r3, sl, #1
 8011f12:	9304      	str	r3, [sp, #16]
 8011f14:	4631      	mov	r1, r6
 8011f16:	ee18 0a10 	vmov	r0, s16
 8011f1a:	f7ff fa71 	bl	8011400 <quorem>
 8011f1e:	4641      	mov	r1, r8
 8011f20:	9002      	str	r0, [sp, #8]
 8011f22:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011f26:	ee18 0a10 	vmov	r0, s16
 8011f2a:	f109 3bff 	add.w	fp, r9, #4294967295
 8011f2e:	f001 f84b 	bl	8012fc8 <__mcmp>
 8011f32:	463a      	mov	r2, r7
 8011f34:	9003      	str	r0, [sp, #12]
 8011f36:	4631      	mov	r1, r6
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f001 f861 	bl	8013000 <__mdiff>
 8011f3e:	68c2      	ldr	r2, [r0, #12]
 8011f40:	4605      	mov	r5, r0
 8011f42:	bb02      	cbnz	r2, 8011f86 <_dtoa_r+0xa5e>
 8011f44:	4601      	mov	r1, r0
 8011f46:	ee18 0a10 	vmov	r0, s16
 8011f4a:	f001 f83d 	bl	8012fc8 <__mcmp>
 8011f4e:	4602      	mov	r2, r0
 8011f50:	4629      	mov	r1, r5
 8011f52:	4620      	mov	r0, r4
 8011f54:	9207      	str	r2, [sp, #28]
 8011f56:	f000 fdab 	bl	8012ab0 <_Bfree>
 8011f5a:	464d      	mov	r5, r9
 8011f5c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011f60:	ea43 0102 	orr.w	r1, r3, r2
 8011f64:	9b04      	ldr	r3, [sp, #16]
 8011f66:	430b      	orrs	r3, r1
 8011f68:	d10f      	bne.n	8011f8a <_dtoa_r+0xa62>
 8011f6a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011f6e:	d02a      	beq.n	8011fc6 <_dtoa_r+0xa9e>
 8011f70:	9b03      	ldr	r3, [sp, #12]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	dd02      	ble.n	8011f7c <_dtoa_r+0xa54>
 8011f76:	9b02      	ldr	r3, [sp, #8]
 8011f78:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011f7c:	f88b a000 	strb.w	sl, [fp]
 8011f80:	e775      	b.n	8011e6e <_dtoa_r+0x946>
 8011f82:	4638      	mov	r0, r7
 8011f84:	e7ba      	b.n	8011efc <_dtoa_r+0x9d4>
 8011f86:	2201      	movs	r2, #1
 8011f88:	e7e2      	b.n	8011f50 <_dtoa_r+0xa28>
 8011f8a:	9b03      	ldr	r3, [sp, #12]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	db04      	blt.n	8011f9a <_dtoa_r+0xa72>
 8011f90:	9906      	ldr	r1, [sp, #24]
 8011f92:	430b      	orrs	r3, r1
 8011f94:	9904      	ldr	r1, [sp, #16]
 8011f96:	430b      	orrs	r3, r1
 8011f98:	d122      	bne.n	8011fe0 <_dtoa_r+0xab8>
 8011f9a:	2a00      	cmp	r2, #0
 8011f9c:	ddee      	ble.n	8011f7c <_dtoa_r+0xa54>
 8011f9e:	ee18 1a10 	vmov	r1, s16
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	f000 ff9f 	bl	8012ee8 <__lshift>
 8011faa:	4631      	mov	r1, r6
 8011fac:	ee08 0a10 	vmov	s16, r0
 8011fb0:	f001 f80a 	bl	8012fc8 <__mcmp>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	dc03      	bgt.n	8011fc0 <_dtoa_r+0xa98>
 8011fb8:	d1e0      	bne.n	8011f7c <_dtoa_r+0xa54>
 8011fba:	f01a 0f01 	tst.w	sl, #1
 8011fbe:	d0dd      	beq.n	8011f7c <_dtoa_r+0xa54>
 8011fc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011fc4:	d1d7      	bne.n	8011f76 <_dtoa_r+0xa4e>
 8011fc6:	2339      	movs	r3, #57	; 0x39
 8011fc8:	f88b 3000 	strb.w	r3, [fp]
 8011fcc:	462b      	mov	r3, r5
 8011fce:	461d      	mov	r5, r3
 8011fd0:	3b01      	subs	r3, #1
 8011fd2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011fd6:	2a39      	cmp	r2, #57	; 0x39
 8011fd8:	d070      	beq.n	80120bc <_dtoa_r+0xb94>
 8011fda:	3201      	adds	r2, #1
 8011fdc:	701a      	strb	r2, [r3, #0]
 8011fde:	e746      	b.n	8011e6e <_dtoa_r+0x946>
 8011fe0:	2a00      	cmp	r2, #0
 8011fe2:	dd07      	ble.n	8011ff4 <_dtoa_r+0xacc>
 8011fe4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011fe8:	d0ed      	beq.n	8011fc6 <_dtoa_r+0xa9e>
 8011fea:	f10a 0301 	add.w	r3, sl, #1
 8011fee:	f88b 3000 	strb.w	r3, [fp]
 8011ff2:	e73c      	b.n	8011e6e <_dtoa_r+0x946>
 8011ff4:	9b05      	ldr	r3, [sp, #20]
 8011ff6:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011ffa:	4599      	cmp	r9, r3
 8011ffc:	d046      	beq.n	801208c <_dtoa_r+0xb64>
 8011ffe:	ee18 1a10 	vmov	r1, s16
 8012002:	2300      	movs	r3, #0
 8012004:	220a      	movs	r2, #10
 8012006:	4620      	mov	r0, r4
 8012008:	f000 fd74 	bl	8012af4 <__multadd>
 801200c:	45b8      	cmp	r8, r7
 801200e:	ee08 0a10 	vmov	s16, r0
 8012012:	f04f 0300 	mov.w	r3, #0
 8012016:	f04f 020a 	mov.w	r2, #10
 801201a:	4641      	mov	r1, r8
 801201c:	4620      	mov	r0, r4
 801201e:	d106      	bne.n	801202e <_dtoa_r+0xb06>
 8012020:	f000 fd68 	bl	8012af4 <__multadd>
 8012024:	4680      	mov	r8, r0
 8012026:	4607      	mov	r7, r0
 8012028:	f109 0901 	add.w	r9, r9, #1
 801202c:	e772      	b.n	8011f14 <_dtoa_r+0x9ec>
 801202e:	f000 fd61 	bl	8012af4 <__multadd>
 8012032:	4639      	mov	r1, r7
 8012034:	4680      	mov	r8, r0
 8012036:	2300      	movs	r3, #0
 8012038:	220a      	movs	r2, #10
 801203a:	4620      	mov	r0, r4
 801203c:	f000 fd5a 	bl	8012af4 <__multadd>
 8012040:	4607      	mov	r7, r0
 8012042:	e7f1      	b.n	8012028 <_dtoa_r+0xb00>
 8012044:	9b03      	ldr	r3, [sp, #12]
 8012046:	9302      	str	r3, [sp, #8]
 8012048:	9d01      	ldr	r5, [sp, #4]
 801204a:	4631      	mov	r1, r6
 801204c:	ee18 0a10 	vmov	r0, s16
 8012050:	f7ff f9d6 	bl	8011400 <quorem>
 8012054:	9b01      	ldr	r3, [sp, #4]
 8012056:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801205a:	f805 ab01 	strb.w	sl, [r5], #1
 801205e:	1aea      	subs	r2, r5, r3
 8012060:	9b02      	ldr	r3, [sp, #8]
 8012062:	4293      	cmp	r3, r2
 8012064:	dd09      	ble.n	801207a <_dtoa_r+0xb52>
 8012066:	ee18 1a10 	vmov	r1, s16
 801206a:	2300      	movs	r3, #0
 801206c:	220a      	movs	r2, #10
 801206e:	4620      	mov	r0, r4
 8012070:	f000 fd40 	bl	8012af4 <__multadd>
 8012074:	ee08 0a10 	vmov	s16, r0
 8012078:	e7e7      	b.n	801204a <_dtoa_r+0xb22>
 801207a:	9b02      	ldr	r3, [sp, #8]
 801207c:	f04f 0800 	mov.w	r8, #0
 8012080:	2b00      	cmp	r3, #0
 8012082:	bfcc      	ite	gt
 8012084:	461d      	movgt	r5, r3
 8012086:	2501      	movle	r5, #1
 8012088:	9b01      	ldr	r3, [sp, #4]
 801208a:	441d      	add	r5, r3
 801208c:	ee18 1a10 	vmov	r1, s16
 8012090:	2201      	movs	r2, #1
 8012092:	4620      	mov	r0, r4
 8012094:	f000 ff28 	bl	8012ee8 <__lshift>
 8012098:	4631      	mov	r1, r6
 801209a:	ee08 0a10 	vmov	s16, r0
 801209e:	f000 ff93 	bl	8012fc8 <__mcmp>
 80120a2:	2800      	cmp	r0, #0
 80120a4:	dc92      	bgt.n	8011fcc <_dtoa_r+0xaa4>
 80120a6:	d102      	bne.n	80120ae <_dtoa_r+0xb86>
 80120a8:	f01a 0f01 	tst.w	sl, #1
 80120ac:	d18e      	bne.n	8011fcc <_dtoa_r+0xaa4>
 80120ae:	462b      	mov	r3, r5
 80120b0:	461d      	mov	r5, r3
 80120b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120b6:	2a30      	cmp	r2, #48	; 0x30
 80120b8:	d0fa      	beq.n	80120b0 <_dtoa_r+0xb88>
 80120ba:	e6d8      	b.n	8011e6e <_dtoa_r+0x946>
 80120bc:	9a01      	ldr	r2, [sp, #4]
 80120be:	429a      	cmp	r2, r3
 80120c0:	d185      	bne.n	8011fce <_dtoa_r+0xaa6>
 80120c2:	9b00      	ldr	r3, [sp, #0]
 80120c4:	3301      	adds	r3, #1
 80120c6:	9300      	str	r3, [sp, #0]
 80120c8:	2331      	movs	r3, #49	; 0x31
 80120ca:	7013      	strb	r3, [r2, #0]
 80120cc:	e6cf      	b.n	8011e6e <_dtoa_r+0x946>
 80120ce:	4b0a      	ldr	r3, [pc, #40]	; (80120f8 <_dtoa_r+0xbd0>)
 80120d0:	f7ff ba98 	b.w	8011604 <_dtoa_r+0xdc>
 80120d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	f47f aa71 	bne.w	80115be <_dtoa_r+0x96>
 80120dc:	4b07      	ldr	r3, [pc, #28]	; (80120fc <_dtoa_r+0xbd4>)
 80120de:	f7ff ba91 	b.w	8011604 <_dtoa_r+0xdc>
 80120e2:	9b02      	ldr	r3, [sp, #8]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	dcaf      	bgt.n	8012048 <_dtoa_r+0xb20>
 80120e8:	9b06      	ldr	r3, [sp, #24]
 80120ea:	2b02      	cmp	r3, #2
 80120ec:	f73f aea9 	bgt.w	8011e42 <_dtoa_r+0x91a>
 80120f0:	e7aa      	b.n	8012048 <_dtoa_r+0xb20>
 80120f2:	bf00      	nop
 80120f4:	08069408 	.word	0x08069408
 80120f8:	08069208 	.word	0x08069208
 80120fc:	08069389 	.word	0x08069389

08012100 <std>:
 8012100:	2300      	movs	r3, #0
 8012102:	b510      	push	{r4, lr}
 8012104:	4604      	mov	r4, r0
 8012106:	6083      	str	r3, [r0, #8]
 8012108:	8181      	strh	r1, [r0, #12]
 801210a:	4619      	mov	r1, r3
 801210c:	6643      	str	r3, [r0, #100]	; 0x64
 801210e:	81c2      	strh	r2, [r0, #14]
 8012110:	2208      	movs	r2, #8
 8012112:	6183      	str	r3, [r0, #24]
 8012114:	e9c0 3300 	strd	r3, r3, [r0]
 8012118:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801211c:	305c      	adds	r0, #92	; 0x5c
 801211e:	f7fd fb10 	bl	800f742 <memset>
 8012122:	4b05      	ldr	r3, [pc, #20]	; (8012138 <std+0x38>)
 8012124:	6224      	str	r4, [r4, #32]
 8012126:	6263      	str	r3, [r4, #36]	; 0x24
 8012128:	4b04      	ldr	r3, [pc, #16]	; (801213c <std+0x3c>)
 801212a:	62a3      	str	r3, [r4, #40]	; 0x28
 801212c:	4b04      	ldr	r3, [pc, #16]	; (8012140 <std+0x40>)
 801212e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012130:	4b04      	ldr	r3, [pc, #16]	; (8012144 <std+0x44>)
 8012132:	6323      	str	r3, [r4, #48]	; 0x30
 8012134:	bd10      	pop	{r4, pc}
 8012136:	bf00      	nop
 8012138:	080139c1 	.word	0x080139c1
 801213c:	080139e3 	.word	0x080139e3
 8012140:	08013a1b 	.word	0x08013a1b
 8012144:	08013a3f 	.word	0x08013a3f

08012148 <_cleanup_r>:
 8012148:	4901      	ldr	r1, [pc, #4]	; (8012150 <_cleanup_r+0x8>)
 801214a:	f000 b8af 	b.w	80122ac <_fwalk_reent>
 801214e:	bf00      	nop
 8012150:	08013d95 	.word	0x08013d95

08012154 <__sfmoreglue>:
 8012154:	b570      	push	{r4, r5, r6, lr}
 8012156:	2268      	movs	r2, #104	; 0x68
 8012158:	1e4d      	subs	r5, r1, #1
 801215a:	460e      	mov	r6, r1
 801215c:	4355      	muls	r5, r2
 801215e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012162:	f7fd fb63 	bl	800f82c <_malloc_r>
 8012166:	4604      	mov	r4, r0
 8012168:	b140      	cbz	r0, 801217c <__sfmoreglue+0x28>
 801216a:	2100      	movs	r1, #0
 801216c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012170:	e9c0 1600 	strd	r1, r6, [r0]
 8012174:	300c      	adds	r0, #12
 8012176:	60a0      	str	r0, [r4, #8]
 8012178:	f7fd fae3 	bl	800f742 <memset>
 801217c:	4620      	mov	r0, r4
 801217e:	bd70      	pop	{r4, r5, r6, pc}

08012180 <__sfp_lock_acquire>:
 8012180:	4801      	ldr	r0, [pc, #4]	; (8012188 <__sfp_lock_acquire+0x8>)
 8012182:	f000 bc26 	b.w	80129d2 <__retarget_lock_acquire_recursive>
 8012186:	bf00      	nop
 8012188:	20001ef1 	.word	0x20001ef1

0801218c <__sfp_lock_release>:
 801218c:	4801      	ldr	r0, [pc, #4]	; (8012194 <__sfp_lock_release+0x8>)
 801218e:	f000 bc21 	b.w	80129d4 <__retarget_lock_release_recursive>
 8012192:	bf00      	nop
 8012194:	20001ef1 	.word	0x20001ef1

08012198 <__sinit_lock_acquire>:
 8012198:	4801      	ldr	r0, [pc, #4]	; (80121a0 <__sinit_lock_acquire+0x8>)
 801219a:	f000 bc1a 	b.w	80129d2 <__retarget_lock_acquire_recursive>
 801219e:	bf00      	nop
 80121a0:	20001ef2 	.word	0x20001ef2

080121a4 <__sinit_lock_release>:
 80121a4:	4801      	ldr	r0, [pc, #4]	; (80121ac <__sinit_lock_release+0x8>)
 80121a6:	f000 bc15 	b.w	80129d4 <__retarget_lock_release_recursive>
 80121aa:	bf00      	nop
 80121ac:	20001ef2 	.word	0x20001ef2

080121b0 <__sinit>:
 80121b0:	b510      	push	{r4, lr}
 80121b2:	4604      	mov	r4, r0
 80121b4:	f7ff fff0 	bl	8012198 <__sinit_lock_acquire>
 80121b8:	69a3      	ldr	r3, [r4, #24]
 80121ba:	b11b      	cbz	r3, 80121c4 <__sinit+0x14>
 80121bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121c0:	f7ff bff0 	b.w	80121a4 <__sinit_lock_release>
 80121c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80121c8:	6523      	str	r3, [r4, #80]	; 0x50
 80121ca:	4620      	mov	r0, r4
 80121cc:	4b12      	ldr	r3, [pc, #72]	; (8012218 <__sinit+0x68>)
 80121ce:	4a13      	ldr	r2, [pc, #76]	; (801221c <__sinit+0x6c>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	62a2      	str	r2, [r4, #40]	; 0x28
 80121d4:	42a3      	cmp	r3, r4
 80121d6:	bf04      	itt	eq
 80121d8:	2301      	moveq	r3, #1
 80121da:	61a3      	streq	r3, [r4, #24]
 80121dc:	f000 f820 	bl	8012220 <__sfp>
 80121e0:	6060      	str	r0, [r4, #4]
 80121e2:	4620      	mov	r0, r4
 80121e4:	f000 f81c 	bl	8012220 <__sfp>
 80121e8:	60a0      	str	r0, [r4, #8]
 80121ea:	4620      	mov	r0, r4
 80121ec:	f000 f818 	bl	8012220 <__sfp>
 80121f0:	2200      	movs	r2, #0
 80121f2:	2104      	movs	r1, #4
 80121f4:	60e0      	str	r0, [r4, #12]
 80121f6:	6860      	ldr	r0, [r4, #4]
 80121f8:	f7ff ff82 	bl	8012100 <std>
 80121fc:	2201      	movs	r2, #1
 80121fe:	2109      	movs	r1, #9
 8012200:	68a0      	ldr	r0, [r4, #8]
 8012202:	f7ff ff7d 	bl	8012100 <std>
 8012206:	2202      	movs	r2, #2
 8012208:	2112      	movs	r1, #18
 801220a:	68e0      	ldr	r0, [r4, #12]
 801220c:	f7ff ff78 	bl	8012100 <std>
 8012210:	2301      	movs	r3, #1
 8012212:	61a3      	str	r3, [r4, #24]
 8012214:	e7d2      	b.n	80121bc <__sinit+0xc>
 8012216:	bf00      	nop
 8012218:	080691f4 	.word	0x080691f4
 801221c:	08012149 	.word	0x08012149

08012220 <__sfp>:
 8012220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012222:	4607      	mov	r7, r0
 8012224:	f7ff ffac 	bl	8012180 <__sfp_lock_acquire>
 8012228:	4b1e      	ldr	r3, [pc, #120]	; (80122a4 <__sfp+0x84>)
 801222a:	681e      	ldr	r6, [r3, #0]
 801222c:	69b3      	ldr	r3, [r6, #24]
 801222e:	b913      	cbnz	r3, 8012236 <__sfp+0x16>
 8012230:	4630      	mov	r0, r6
 8012232:	f7ff ffbd 	bl	80121b0 <__sinit>
 8012236:	3648      	adds	r6, #72	; 0x48
 8012238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801223c:	3b01      	subs	r3, #1
 801223e:	d503      	bpl.n	8012248 <__sfp+0x28>
 8012240:	6833      	ldr	r3, [r6, #0]
 8012242:	b30b      	cbz	r3, 8012288 <__sfp+0x68>
 8012244:	6836      	ldr	r6, [r6, #0]
 8012246:	e7f7      	b.n	8012238 <__sfp+0x18>
 8012248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801224c:	b9d5      	cbnz	r5, 8012284 <__sfp+0x64>
 801224e:	4b16      	ldr	r3, [pc, #88]	; (80122a8 <__sfp+0x88>)
 8012250:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012254:	6665      	str	r5, [r4, #100]	; 0x64
 8012256:	60e3      	str	r3, [r4, #12]
 8012258:	f000 fbba 	bl	80129d0 <__retarget_lock_init_recursive>
 801225c:	f7ff ff96 	bl	801218c <__sfp_lock_release>
 8012260:	2208      	movs	r2, #8
 8012262:	4629      	mov	r1, r5
 8012264:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012268:	6025      	str	r5, [r4, #0]
 801226a:	61a5      	str	r5, [r4, #24]
 801226c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012270:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012274:	f7fd fa65 	bl	800f742 <memset>
 8012278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801227c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012280:	4620      	mov	r0, r4
 8012282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012284:	3468      	adds	r4, #104	; 0x68
 8012286:	e7d9      	b.n	801223c <__sfp+0x1c>
 8012288:	2104      	movs	r1, #4
 801228a:	4638      	mov	r0, r7
 801228c:	f7ff ff62 	bl	8012154 <__sfmoreglue>
 8012290:	4604      	mov	r4, r0
 8012292:	6030      	str	r0, [r6, #0]
 8012294:	2800      	cmp	r0, #0
 8012296:	d1d5      	bne.n	8012244 <__sfp+0x24>
 8012298:	f7ff ff78 	bl	801218c <__sfp_lock_release>
 801229c:	230c      	movs	r3, #12
 801229e:	603b      	str	r3, [r7, #0]
 80122a0:	e7ee      	b.n	8012280 <__sfp+0x60>
 80122a2:	bf00      	nop
 80122a4:	080691f4 	.word	0x080691f4
 80122a8:	ffff0001 	.word	0xffff0001

080122ac <_fwalk_reent>:
 80122ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122b0:	4606      	mov	r6, r0
 80122b2:	4688      	mov	r8, r1
 80122b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80122b8:	2700      	movs	r7, #0
 80122ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80122be:	f1b9 0901 	subs.w	r9, r9, #1
 80122c2:	d505      	bpl.n	80122d0 <_fwalk_reent+0x24>
 80122c4:	6824      	ldr	r4, [r4, #0]
 80122c6:	2c00      	cmp	r4, #0
 80122c8:	d1f7      	bne.n	80122ba <_fwalk_reent+0xe>
 80122ca:	4638      	mov	r0, r7
 80122cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122d0:	89ab      	ldrh	r3, [r5, #12]
 80122d2:	2b01      	cmp	r3, #1
 80122d4:	d907      	bls.n	80122e6 <_fwalk_reent+0x3a>
 80122d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80122da:	3301      	adds	r3, #1
 80122dc:	d003      	beq.n	80122e6 <_fwalk_reent+0x3a>
 80122de:	4629      	mov	r1, r5
 80122e0:	4630      	mov	r0, r6
 80122e2:	47c0      	blx	r8
 80122e4:	4307      	orrs	r7, r0
 80122e6:	3568      	adds	r5, #104	; 0x68
 80122e8:	e7e9      	b.n	80122be <_fwalk_reent+0x12>

080122ea <rshift>:
 80122ea:	6903      	ldr	r3, [r0, #16]
 80122ec:	114a      	asrs	r2, r1, #5
 80122ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80122f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80122f6:	f100 0414 	add.w	r4, r0, #20
 80122fa:	dd45      	ble.n	8012388 <rshift+0x9e>
 80122fc:	f011 011f 	ands.w	r1, r1, #31
 8012300:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012304:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012308:	d10c      	bne.n	8012324 <rshift+0x3a>
 801230a:	f100 0710 	add.w	r7, r0, #16
 801230e:	4629      	mov	r1, r5
 8012310:	42b1      	cmp	r1, r6
 8012312:	d334      	bcc.n	801237e <rshift+0x94>
 8012314:	1a9b      	subs	r3, r3, r2
 8012316:	1eea      	subs	r2, r5, #3
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	4296      	cmp	r6, r2
 801231c:	bf38      	it	cc
 801231e:	2300      	movcc	r3, #0
 8012320:	4423      	add	r3, r4
 8012322:	e015      	b.n	8012350 <rshift+0x66>
 8012324:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012328:	f1c1 0820 	rsb	r8, r1, #32
 801232c:	f105 0e04 	add.w	lr, r5, #4
 8012330:	46a1      	mov	r9, r4
 8012332:	40cf      	lsrs	r7, r1
 8012334:	4576      	cmp	r6, lr
 8012336:	46f4      	mov	ip, lr
 8012338:	d815      	bhi.n	8012366 <rshift+0x7c>
 801233a:	1a9a      	subs	r2, r3, r2
 801233c:	3501      	adds	r5, #1
 801233e:	0092      	lsls	r2, r2, #2
 8012340:	3a04      	subs	r2, #4
 8012342:	42ae      	cmp	r6, r5
 8012344:	bf38      	it	cc
 8012346:	2200      	movcc	r2, #0
 8012348:	18a3      	adds	r3, r4, r2
 801234a:	50a7      	str	r7, [r4, r2]
 801234c:	b107      	cbz	r7, 8012350 <rshift+0x66>
 801234e:	3304      	adds	r3, #4
 8012350:	1b1a      	subs	r2, r3, r4
 8012352:	42a3      	cmp	r3, r4
 8012354:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012358:	bf08      	it	eq
 801235a:	2300      	moveq	r3, #0
 801235c:	6102      	str	r2, [r0, #16]
 801235e:	bf08      	it	eq
 8012360:	6143      	streq	r3, [r0, #20]
 8012362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012366:	f8dc c000 	ldr.w	ip, [ip]
 801236a:	fa0c fc08 	lsl.w	ip, ip, r8
 801236e:	ea4c 0707 	orr.w	r7, ip, r7
 8012372:	f849 7b04 	str.w	r7, [r9], #4
 8012376:	f85e 7b04 	ldr.w	r7, [lr], #4
 801237a:	40cf      	lsrs	r7, r1
 801237c:	e7da      	b.n	8012334 <rshift+0x4a>
 801237e:	f851 cb04 	ldr.w	ip, [r1], #4
 8012382:	f847 cf04 	str.w	ip, [r7, #4]!
 8012386:	e7c3      	b.n	8012310 <rshift+0x26>
 8012388:	4623      	mov	r3, r4
 801238a:	e7e1      	b.n	8012350 <rshift+0x66>

0801238c <__hexdig_fun>:
 801238c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012390:	2b09      	cmp	r3, #9
 8012392:	d802      	bhi.n	801239a <__hexdig_fun+0xe>
 8012394:	3820      	subs	r0, #32
 8012396:	b2c0      	uxtb	r0, r0
 8012398:	4770      	bx	lr
 801239a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801239e:	2b05      	cmp	r3, #5
 80123a0:	d801      	bhi.n	80123a6 <__hexdig_fun+0x1a>
 80123a2:	3847      	subs	r0, #71	; 0x47
 80123a4:	e7f7      	b.n	8012396 <__hexdig_fun+0xa>
 80123a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80123aa:	2b05      	cmp	r3, #5
 80123ac:	d801      	bhi.n	80123b2 <__hexdig_fun+0x26>
 80123ae:	3827      	subs	r0, #39	; 0x27
 80123b0:	e7f1      	b.n	8012396 <__hexdig_fun+0xa>
 80123b2:	2000      	movs	r0, #0
 80123b4:	4770      	bx	lr
	...

080123b8 <__gethex>:
 80123b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123bc:	ed2d 8b02 	vpush	{d8}
 80123c0:	b089      	sub	sp, #36	; 0x24
 80123c2:	ee08 0a10 	vmov	s16, r0
 80123c6:	468b      	mov	fp, r1
 80123c8:	4690      	mov	r8, r2
 80123ca:	9304      	str	r3, [sp, #16]
 80123cc:	4bb2      	ldr	r3, [pc, #712]	; (8012698 <__gethex+0x2e0>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4618      	mov	r0, r3
 80123d2:	9301      	str	r3, [sp, #4]
 80123d4:	f7ed ff50 	bl	8000278 <strlen>
 80123d8:	9b01      	ldr	r3, [sp, #4]
 80123da:	f8db 2000 	ldr.w	r2, [fp]
 80123de:	4682      	mov	sl, r0
 80123e0:	4403      	add	r3, r0
 80123e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80123e6:	9305      	str	r3, [sp, #20]
 80123e8:	1c93      	adds	r3, r2, #2
 80123ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80123ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80123f2:	32fe      	adds	r2, #254	; 0xfe
 80123f4:	18d1      	adds	r1, r2, r3
 80123f6:	461f      	mov	r7, r3
 80123f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80123fc:	9100      	str	r1, [sp, #0]
 80123fe:	2830      	cmp	r0, #48	; 0x30
 8012400:	d0f8      	beq.n	80123f4 <__gethex+0x3c>
 8012402:	f7ff ffc3 	bl	801238c <__hexdig_fun>
 8012406:	4604      	mov	r4, r0
 8012408:	2800      	cmp	r0, #0
 801240a:	d139      	bne.n	8012480 <__gethex+0xc8>
 801240c:	4652      	mov	r2, sl
 801240e:	9901      	ldr	r1, [sp, #4]
 8012410:	4638      	mov	r0, r7
 8012412:	f001 fb18 	bl	8013a46 <strncmp>
 8012416:	4605      	mov	r5, r0
 8012418:	2800      	cmp	r0, #0
 801241a:	d167      	bne.n	80124ec <__gethex+0x134>
 801241c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012420:	eb07 060a 	add.w	r6, r7, sl
 8012424:	f7ff ffb2 	bl	801238c <__hexdig_fun>
 8012428:	2800      	cmp	r0, #0
 801242a:	d061      	beq.n	80124f0 <__gethex+0x138>
 801242c:	4633      	mov	r3, r6
 801242e:	7818      	ldrb	r0, [r3, #0]
 8012430:	461f      	mov	r7, r3
 8012432:	3301      	adds	r3, #1
 8012434:	2830      	cmp	r0, #48	; 0x30
 8012436:	d0fa      	beq.n	801242e <__gethex+0x76>
 8012438:	f7ff ffa8 	bl	801238c <__hexdig_fun>
 801243c:	fab0 f480 	clz	r4, r0
 8012440:	2301      	movs	r3, #1
 8012442:	4635      	mov	r5, r6
 8012444:	0964      	lsrs	r4, r4, #5
 8012446:	9300      	str	r3, [sp, #0]
 8012448:	463a      	mov	r2, r7
 801244a:	4616      	mov	r6, r2
 801244c:	3201      	adds	r2, #1
 801244e:	7830      	ldrb	r0, [r6, #0]
 8012450:	f7ff ff9c 	bl	801238c <__hexdig_fun>
 8012454:	2800      	cmp	r0, #0
 8012456:	d1f8      	bne.n	801244a <__gethex+0x92>
 8012458:	4652      	mov	r2, sl
 801245a:	9901      	ldr	r1, [sp, #4]
 801245c:	4630      	mov	r0, r6
 801245e:	f001 faf2 	bl	8013a46 <strncmp>
 8012462:	b980      	cbnz	r0, 8012486 <__gethex+0xce>
 8012464:	b94d      	cbnz	r5, 801247a <__gethex+0xc2>
 8012466:	eb06 050a 	add.w	r5, r6, sl
 801246a:	462a      	mov	r2, r5
 801246c:	4616      	mov	r6, r2
 801246e:	3201      	adds	r2, #1
 8012470:	7830      	ldrb	r0, [r6, #0]
 8012472:	f7ff ff8b 	bl	801238c <__hexdig_fun>
 8012476:	2800      	cmp	r0, #0
 8012478:	d1f8      	bne.n	801246c <__gethex+0xb4>
 801247a:	1bad      	subs	r5, r5, r6
 801247c:	00ad      	lsls	r5, r5, #2
 801247e:	e004      	b.n	801248a <__gethex+0xd2>
 8012480:	2400      	movs	r4, #0
 8012482:	4625      	mov	r5, r4
 8012484:	e7e0      	b.n	8012448 <__gethex+0x90>
 8012486:	2d00      	cmp	r5, #0
 8012488:	d1f7      	bne.n	801247a <__gethex+0xc2>
 801248a:	7833      	ldrb	r3, [r6, #0]
 801248c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012490:	2b50      	cmp	r3, #80	; 0x50
 8012492:	d13b      	bne.n	801250c <__gethex+0x154>
 8012494:	7873      	ldrb	r3, [r6, #1]
 8012496:	2b2b      	cmp	r3, #43	; 0x2b
 8012498:	d02c      	beq.n	80124f4 <__gethex+0x13c>
 801249a:	2b2d      	cmp	r3, #45	; 0x2d
 801249c:	d02e      	beq.n	80124fc <__gethex+0x144>
 801249e:	1c71      	adds	r1, r6, #1
 80124a0:	f04f 0900 	mov.w	r9, #0
 80124a4:	7808      	ldrb	r0, [r1, #0]
 80124a6:	f7ff ff71 	bl	801238c <__hexdig_fun>
 80124aa:	1e43      	subs	r3, r0, #1
 80124ac:	b2db      	uxtb	r3, r3
 80124ae:	2b18      	cmp	r3, #24
 80124b0:	d82c      	bhi.n	801250c <__gethex+0x154>
 80124b2:	f1a0 0210 	sub.w	r2, r0, #16
 80124b6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80124ba:	f7ff ff67 	bl	801238c <__hexdig_fun>
 80124be:	1e43      	subs	r3, r0, #1
 80124c0:	b2db      	uxtb	r3, r3
 80124c2:	2b18      	cmp	r3, #24
 80124c4:	d91d      	bls.n	8012502 <__gethex+0x14a>
 80124c6:	f1b9 0f00 	cmp.w	r9, #0
 80124ca:	d000      	beq.n	80124ce <__gethex+0x116>
 80124cc:	4252      	negs	r2, r2
 80124ce:	4415      	add	r5, r2
 80124d0:	f8cb 1000 	str.w	r1, [fp]
 80124d4:	b1e4      	cbz	r4, 8012510 <__gethex+0x158>
 80124d6:	9b00      	ldr	r3, [sp, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	bf14      	ite	ne
 80124dc:	2700      	movne	r7, #0
 80124de:	2706      	moveq	r7, #6
 80124e0:	4638      	mov	r0, r7
 80124e2:	b009      	add	sp, #36	; 0x24
 80124e4:	ecbd 8b02 	vpop	{d8}
 80124e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ec:	463e      	mov	r6, r7
 80124ee:	4625      	mov	r5, r4
 80124f0:	2401      	movs	r4, #1
 80124f2:	e7ca      	b.n	801248a <__gethex+0xd2>
 80124f4:	f04f 0900 	mov.w	r9, #0
 80124f8:	1cb1      	adds	r1, r6, #2
 80124fa:	e7d3      	b.n	80124a4 <__gethex+0xec>
 80124fc:	f04f 0901 	mov.w	r9, #1
 8012500:	e7fa      	b.n	80124f8 <__gethex+0x140>
 8012502:	230a      	movs	r3, #10
 8012504:	fb03 0202 	mla	r2, r3, r2, r0
 8012508:	3a10      	subs	r2, #16
 801250a:	e7d4      	b.n	80124b6 <__gethex+0xfe>
 801250c:	4631      	mov	r1, r6
 801250e:	e7df      	b.n	80124d0 <__gethex+0x118>
 8012510:	1bf3      	subs	r3, r6, r7
 8012512:	4621      	mov	r1, r4
 8012514:	3b01      	subs	r3, #1
 8012516:	2b07      	cmp	r3, #7
 8012518:	dc0b      	bgt.n	8012532 <__gethex+0x17a>
 801251a:	ee18 0a10 	vmov	r0, s16
 801251e:	f000 fa87 	bl	8012a30 <_Balloc>
 8012522:	4604      	mov	r4, r0
 8012524:	b940      	cbnz	r0, 8012538 <__gethex+0x180>
 8012526:	4b5d      	ldr	r3, [pc, #372]	; (801269c <__gethex+0x2e4>)
 8012528:	4602      	mov	r2, r0
 801252a:	21de      	movs	r1, #222	; 0xde
 801252c:	485c      	ldr	r0, [pc, #368]	; (80126a0 <__gethex+0x2e8>)
 801252e:	f001 fb7f 	bl	8013c30 <__assert_func>
 8012532:	3101      	adds	r1, #1
 8012534:	105b      	asrs	r3, r3, #1
 8012536:	e7ee      	b.n	8012516 <__gethex+0x15e>
 8012538:	f100 0914 	add.w	r9, r0, #20
 801253c:	f04f 0b00 	mov.w	fp, #0
 8012540:	f1ca 0301 	rsb	r3, sl, #1
 8012544:	f8cd 9008 	str.w	r9, [sp, #8]
 8012548:	f8cd b000 	str.w	fp, [sp]
 801254c:	9306      	str	r3, [sp, #24]
 801254e:	42b7      	cmp	r7, r6
 8012550:	d340      	bcc.n	80125d4 <__gethex+0x21c>
 8012552:	9802      	ldr	r0, [sp, #8]
 8012554:	9b00      	ldr	r3, [sp, #0]
 8012556:	f840 3b04 	str.w	r3, [r0], #4
 801255a:	eba0 0009 	sub.w	r0, r0, r9
 801255e:	1080      	asrs	r0, r0, #2
 8012560:	0146      	lsls	r6, r0, #5
 8012562:	6120      	str	r0, [r4, #16]
 8012564:	4618      	mov	r0, r3
 8012566:	f000 fb57 	bl	8012c18 <__hi0bits>
 801256a:	1a30      	subs	r0, r6, r0
 801256c:	f8d8 6000 	ldr.w	r6, [r8]
 8012570:	42b0      	cmp	r0, r6
 8012572:	dd63      	ble.n	801263c <__gethex+0x284>
 8012574:	1b87      	subs	r7, r0, r6
 8012576:	4620      	mov	r0, r4
 8012578:	4639      	mov	r1, r7
 801257a:	f000 fefd 	bl	8013378 <__any_on>
 801257e:	4682      	mov	sl, r0
 8012580:	b1a8      	cbz	r0, 80125ae <__gethex+0x1f6>
 8012582:	1e7b      	subs	r3, r7, #1
 8012584:	f04f 0a01 	mov.w	sl, #1
 8012588:	1159      	asrs	r1, r3, #5
 801258a:	f003 021f 	and.w	r2, r3, #31
 801258e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012592:	fa0a f202 	lsl.w	r2, sl, r2
 8012596:	420a      	tst	r2, r1
 8012598:	d009      	beq.n	80125ae <__gethex+0x1f6>
 801259a:	4553      	cmp	r3, sl
 801259c:	dd05      	ble.n	80125aa <__gethex+0x1f2>
 801259e:	1eb9      	subs	r1, r7, #2
 80125a0:	4620      	mov	r0, r4
 80125a2:	f000 fee9 	bl	8013378 <__any_on>
 80125a6:	2800      	cmp	r0, #0
 80125a8:	d145      	bne.n	8012636 <__gethex+0x27e>
 80125aa:	f04f 0a02 	mov.w	sl, #2
 80125ae:	443d      	add	r5, r7
 80125b0:	4639      	mov	r1, r7
 80125b2:	4620      	mov	r0, r4
 80125b4:	f7ff fe99 	bl	80122ea <rshift>
 80125b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80125bc:	42ab      	cmp	r3, r5
 80125be:	da4c      	bge.n	801265a <__gethex+0x2a2>
 80125c0:	4621      	mov	r1, r4
 80125c2:	ee18 0a10 	vmov	r0, s16
 80125c6:	f000 fa73 	bl	8012ab0 <_Bfree>
 80125ca:	2300      	movs	r3, #0
 80125cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80125ce:	27a3      	movs	r7, #163	; 0xa3
 80125d0:	6013      	str	r3, [r2, #0]
 80125d2:	e785      	b.n	80124e0 <__gethex+0x128>
 80125d4:	1e73      	subs	r3, r6, #1
 80125d6:	9a05      	ldr	r2, [sp, #20]
 80125d8:	9303      	str	r3, [sp, #12]
 80125da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80125de:	4293      	cmp	r3, r2
 80125e0:	d019      	beq.n	8012616 <__gethex+0x25e>
 80125e2:	f1bb 0f20 	cmp.w	fp, #32
 80125e6:	d107      	bne.n	80125f8 <__gethex+0x240>
 80125e8:	9b02      	ldr	r3, [sp, #8]
 80125ea:	9a00      	ldr	r2, [sp, #0]
 80125ec:	f843 2b04 	str.w	r2, [r3], #4
 80125f0:	9302      	str	r3, [sp, #8]
 80125f2:	2300      	movs	r3, #0
 80125f4:	469b      	mov	fp, r3
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80125fc:	f7ff fec6 	bl	801238c <__hexdig_fun>
 8012600:	f000 000f 	and.w	r0, r0, #15
 8012604:	9b00      	ldr	r3, [sp, #0]
 8012606:	fa00 f00b 	lsl.w	r0, r0, fp
 801260a:	f10b 0b04 	add.w	fp, fp, #4
 801260e:	4303      	orrs	r3, r0
 8012610:	9300      	str	r3, [sp, #0]
 8012612:	9b03      	ldr	r3, [sp, #12]
 8012614:	e00d      	b.n	8012632 <__gethex+0x27a>
 8012616:	9b03      	ldr	r3, [sp, #12]
 8012618:	9a06      	ldr	r2, [sp, #24]
 801261a:	4413      	add	r3, r2
 801261c:	42bb      	cmp	r3, r7
 801261e:	d3e0      	bcc.n	80125e2 <__gethex+0x22a>
 8012620:	4618      	mov	r0, r3
 8012622:	4652      	mov	r2, sl
 8012624:	9901      	ldr	r1, [sp, #4]
 8012626:	9307      	str	r3, [sp, #28]
 8012628:	f001 fa0d 	bl	8013a46 <strncmp>
 801262c:	9b07      	ldr	r3, [sp, #28]
 801262e:	2800      	cmp	r0, #0
 8012630:	d1d7      	bne.n	80125e2 <__gethex+0x22a>
 8012632:	461e      	mov	r6, r3
 8012634:	e78b      	b.n	801254e <__gethex+0x196>
 8012636:	f04f 0a03 	mov.w	sl, #3
 801263a:	e7b8      	b.n	80125ae <__gethex+0x1f6>
 801263c:	da0a      	bge.n	8012654 <__gethex+0x29c>
 801263e:	1a37      	subs	r7, r6, r0
 8012640:	4621      	mov	r1, r4
 8012642:	ee18 0a10 	vmov	r0, s16
 8012646:	463a      	mov	r2, r7
 8012648:	1bed      	subs	r5, r5, r7
 801264a:	f000 fc4d 	bl	8012ee8 <__lshift>
 801264e:	4604      	mov	r4, r0
 8012650:	f100 0914 	add.w	r9, r0, #20
 8012654:	f04f 0a00 	mov.w	sl, #0
 8012658:	e7ae      	b.n	80125b8 <__gethex+0x200>
 801265a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801265e:	42a8      	cmp	r0, r5
 8012660:	dd72      	ble.n	8012748 <__gethex+0x390>
 8012662:	1b45      	subs	r5, r0, r5
 8012664:	42ae      	cmp	r6, r5
 8012666:	dc35      	bgt.n	80126d4 <__gethex+0x31c>
 8012668:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801266c:	2b02      	cmp	r3, #2
 801266e:	d029      	beq.n	80126c4 <__gethex+0x30c>
 8012670:	2b03      	cmp	r3, #3
 8012672:	d02b      	beq.n	80126cc <__gethex+0x314>
 8012674:	2b01      	cmp	r3, #1
 8012676:	d11b      	bne.n	80126b0 <__gethex+0x2f8>
 8012678:	42ae      	cmp	r6, r5
 801267a:	d119      	bne.n	80126b0 <__gethex+0x2f8>
 801267c:	2e01      	cmp	r6, #1
 801267e:	d111      	bne.n	80126a4 <__gethex+0x2ec>
 8012680:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012684:	2762      	movs	r7, #98	; 0x62
 8012686:	9a04      	ldr	r2, [sp, #16]
 8012688:	6013      	str	r3, [r2, #0]
 801268a:	2301      	movs	r3, #1
 801268c:	6123      	str	r3, [r4, #16]
 801268e:	f8c9 3000 	str.w	r3, [r9]
 8012692:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012694:	601c      	str	r4, [r3, #0]
 8012696:	e723      	b.n	80124e0 <__gethex+0x128>
 8012698:	080694e4 	.word	0x080694e4
 801269c:	08069408 	.word	0x08069408
 80126a0:	0806947c 	.word	0x0806947c
 80126a4:	1e71      	subs	r1, r6, #1
 80126a6:	4620      	mov	r0, r4
 80126a8:	f000 fe66 	bl	8013378 <__any_on>
 80126ac:	2800      	cmp	r0, #0
 80126ae:	d1e7      	bne.n	8012680 <__gethex+0x2c8>
 80126b0:	4621      	mov	r1, r4
 80126b2:	ee18 0a10 	vmov	r0, s16
 80126b6:	f000 f9fb 	bl	8012ab0 <_Bfree>
 80126ba:	2300      	movs	r3, #0
 80126bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80126be:	2750      	movs	r7, #80	; 0x50
 80126c0:	6013      	str	r3, [r2, #0]
 80126c2:	e70d      	b.n	80124e0 <__gethex+0x128>
 80126c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d1f2      	bne.n	80126b0 <__gethex+0x2f8>
 80126ca:	e7d9      	b.n	8012680 <__gethex+0x2c8>
 80126cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d1d6      	bne.n	8012680 <__gethex+0x2c8>
 80126d2:	e7ed      	b.n	80126b0 <__gethex+0x2f8>
 80126d4:	1e6f      	subs	r7, r5, #1
 80126d6:	f1ba 0f00 	cmp.w	sl, #0
 80126da:	d132      	bne.n	8012742 <__gethex+0x38a>
 80126dc:	b127      	cbz	r7, 80126e8 <__gethex+0x330>
 80126de:	4639      	mov	r1, r7
 80126e0:	4620      	mov	r0, r4
 80126e2:	f000 fe49 	bl	8013378 <__any_on>
 80126e6:	4682      	mov	sl, r0
 80126e8:	117b      	asrs	r3, r7, #5
 80126ea:	2101      	movs	r1, #1
 80126ec:	f007 071f 	and.w	r7, r7, #31
 80126f0:	4620      	mov	r0, r4
 80126f2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80126f6:	1b76      	subs	r6, r6, r5
 80126f8:	fa01 f707 	lsl.w	r7, r1, r7
 80126fc:	4629      	mov	r1, r5
 80126fe:	421f      	tst	r7, r3
 8012700:	f04f 0702 	mov.w	r7, #2
 8012704:	bf18      	it	ne
 8012706:	f04a 0a02 	orrne.w	sl, sl, #2
 801270a:	f7ff fdee 	bl	80122ea <rshift>
 801270e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012712:	f1ba 0f00 	cmp.w	sl, #0
 8012716:	d048      	beq.n	80127aa <__gethex+0x3f2>
 8012718:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801271c:	2b02      	cmp	r3, #2
 801271e:	d015      	beq.n	801274c <__gethex+0x394>
 8012720:	2b03      	cmp	r3, #3
 8012722:	d017      	beq.n	8012754 <__gethex+0x39c>
 8012724:	2b01      	cmp	r3, #1
 8012726:	d109      	bne.n	801273c <__gethex+0x384>
 8012728:	f01a 0f02 	tst.w	sl, #2
 801272c:	d006      	beq.n	801273c <__gethex+0x384>
 801272e:	f8d9 0000 	ldr.w	r0, [r9]
 8012732:	ea4a 0a00 	orr.w	sl, sl, r0
 8012736:	f01a 0f01 	tst.w	sl, #1
 801273a:	d10e      	bne.n	801275a <__gethex+0x3a2>
 801273c:	f047 0710 	orr.w	r7, r7, #16
 8012740:	e033      	b.n	80127aa <__gethex+0x3f2>
 8012742:	f04f 0a01 	mov.w	sl, #1
 8012746:	e7cf      	b.n	80126e8 <__gethex+0x330>
 8012748:	2701      	movs	r7, #1
 801274a:	e7e2      	b.n	8012712 <__gethex+0x35a>
 801274c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801274e:	f1c3 0301 	rsb	r3, r3, #1
 8012752:	9315      	str	r3, [sp, #84]	; 0x54
 8012754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012756:	2b00      	cmp	r3, #0
 8012758:	d0f0      	beq.n	801273c <__gethex+0x384>
 801275a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801275e:	f104 0314 	add.w	r3, r4, #20
 8012762:	f04f 0c00 	mov.w	ip, #0
 8012766:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801276a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801276e:	4618      	mov	r0, r3
 8012770:	f853 2b04 	ldr.w	r2, [r3], #4
 8012774:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012778:	d01c      	beq.n	80127b4 <__gethex+0x3fc>
 801277a:	3201      	adds	r2, #1
 801277c:	6002      	str	r2, [r0, #0]
 801277e:	2f02      	cmp	r7, #2
 8012780:	f104 0314 	add.w	r3, r4, #20
 8012784:	d13f      	bne.n	8012806 <__gethex+0x44e>
 8012786:	f8d8 2000 	ldr.w	r2, [r8]
 801278a:	3a01      	subs	r2, #1
 801278c:	42b2      	cmp	r2, r6
 801278e:	d10a      	bne.n	80127a6 <__gethex+0x3ee>
 8012790:	1171      	asrs	r1, r6, #5
 8012792:	2201      	movs	r2, #1
 8012794:	f006 061f 	and.w	r6, r6, #31
 8012798:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801279c:	fa02 f606 	lsl.w	r6, r2, r6
 80127a0:	421e      	tst	r6, r3
 80127a2:	bf18      	it	ne
 80127a4:	4617      	movne	r7, r2
 80127a6:	f047 0720 	orr.w	r7, r7, #32
 80127aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127ac:	601c      	str	r4, [r3, #0]
 80127ae:	9b04      	ldr	r3, [sp, #16]
 80127b0:	601d      	str	r5, [r3, #0]
 80127b2:	e695      	b.n	80124e0 <__gethex+0x128>
 80127b4:	4299      	cmp	r1, r3
 80127b6:	f843 cc04 	str.w	ip, [r3, #-4]
 80127ba:	d8d8      	bhi.n	801276e <__gethex+0x3b6>
 80127bc:	68a3      	ldr	r3, [r4, #8]
 80127be:	459b      	cmp	fp, r3
 80127c0:	db19      	blt.n	80127f6 <__gethex+0x43e>
 80127c2:	6861      	ldr	r1, [r4, #4]
 80127c4:	ee18 0a10 	vmov	r0, s16
 80127c8:	3101      	adds	r1, #1
 80127ca:	f000 f931 	bl	8012a30 <_Balloc>
 80127ce:	4681      	mov	r9, r0
 80127d0:	b918      	cbnz	r0, 80127da <__gethex+0x422>
 80127d2:	4b1b      	ldr	r3, [pc, #108]	; (8012840 <__gethex+0x488>)
 80127d4:	4602      	mov	r2, r0
 80127d6:	2184      	movs	r1, #132	; 0x84
 80127d8:	e6a8      	b.n	801252c <__gethex+0x174>
 80127da:	6922      	ldr	r2, [r4, #16]
 80127dc:	f104 010c 	add.w	r1, r4, #12
 80127e0:	300c      	adds	r0, #12
 80127e2:	3202      	adds	r2, #2
 80127e4:	0092      	lsls	r2, r2, #2
 80127e6:	f7fc ff9f 	bl	800f728 <memcpy>
 80127ea:	4621      	mov	r1, r4
 80127ec:	464c      	mov	r4, r9
 80127ee:	ee18 0a10 	vmov	r0, s16
 80127f2:	f000 f95d 	bl	8012ab0 <_Bfree>
 80127f6:	6923      	ldr	r3, [r4, #16]
 80127f8:	1c5a      	adds	r2, r3, #1
 80127fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80127fe:	6122      	str	r2, [r4, #16]
 8012800:	2201      	movs	r2, #1
 8012802:	615a      	str	r2, [r3, #20]
 8012804:	e7bb      	b.n	801277e <__gethex+0x3c6>
 8012806:	6922      	ldr	r2, [r4, #16]
 8012808:	455a      	cmp	r2, fp
 801280a:	dd0b      	ble.n	8012824 <__gethex+0x46c>
 801280c:	2101      	movs	r1, #1
 801280e:	4620      	mov	r0, r4
 8012810:	f7ff fd6b 	bl	80122ea <rshift>
 8012814:	3501      	adds	r5, #1
 8012816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801281a:	42ab      	cmp	r3, r5
 801281c:	f6ff aed0 	blt.w	80125c0 <__gethex+0x208>
 8012820:	2701      	movs	r7, #1
 8012822:	e7c0      	b.n	80127a6 <__gethex+0x3ee>
 8012824:	f016 061f 	ands.w	r6, r6, #31
 8012828:	d0fa      	beq.n	8012820 <__gethex+0x468>
 801282a:	4453      	add	r3, sl
 801282c:	f1c6 0620 	rsb	r6, r6, #32
 8012830:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012834:	f000 f9f0 	bl	8012c18 <__hi0bits>
 8012838:	42b0      	cmp	r0, r6
 801283a:	dbe7      	blt.n	801280c <__gethex+0x454>
 801283c:	e7f0      	b.n	8012820 <__gethex+0x468>
 801283e:	bf00      	nop
 8012840:	08069408 	.word	0x08069408

08012844 <L_shift>:
 8012844:	f1c2 0208 	rsb	r2, r2, #8
 8012848:	0092      	lsls	r2, r2, #2
 801284a:	b570      	push	{r4, r5, r6, lr}
 801284c:	f1c2 0620 	rsb	r6, r2, #32
 8012850:	6843      	ldr	r3, [r0, #4]
 8012852:	6804      	ldr	r4, [r0, #0]
 8012854:	fa03 f506 	lsl.w	r5, r3, r6
 8012858:	40d3      	lsrs	r3, r2
 801285a:	432c      	orrs	r4, r5
 801285c:	6004      	str	r4, [r0, #0]
 801285e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012862:	4288      	cmp	r0, r1
 8012864:	d3f4      	bcc.n	8012850 <L_shift+0xc>
 8012866:	bd70      	pop	{r4, r5, r6, pc}

08012868 <__match>:
 8012868:	6803      	ldr	r3, [r0, #0]
 801286a:	3301      	adds	r3, #1
 801286c:	b530      	push	{r4, r5, lr}
 801286e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012872:	b914      	cbnz	r4, 801287a <__match+0x12>
 8012874:	6003      	str	r3, [r0, #0]
 8012876:	2001      	movs	r0, #1
 8012878:	bd30      	pop	{r4, r5, pc}
 801287a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801287e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012882:	2d19      	cmp	r5, #25
 8012884:	bf98      	it	ls
 8012886:	3220      	addls	r2, #32
 8012888:	42a2      	cmp	r2, r4
 801288a:	d0f0      	beq.n	801286e <__match+0x6>
 801288c:	2000      	movs	r0, #0
 801288e:	e7f3      	b.n	8012878 <__match+0x10>

08012890 <__hexnan>:
 8012890:	680b      	ldr	r3, [r1, #0]
 8012892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012896:	115e      	asrs	r6, r3, #5
 8012898:	f013 031f 	ands.w	r3, r3, #31
 801289c:	f04f 0500 	mov.w	r5, #0
 80128a0:	b087      	sub	sp, #28
 80128a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80128a6:	4690      	mov	r8, r2
 80128a8:	4682      	mov	sl, r0
 80128aa:	6802      	ldr	r2, [r0, #0]
 80128ac:	bf18      	it	ne
 80128ae:	3604      	addne	r6, #4
 80128b0:	46ab      	mov	fp, r5
 80128b2:	9301      	str	r3, [sp, #4]
 80128b4:	1f37      	subs	r7, r6, #4
 80128b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80128ba:	9502      	str	r5, [sp, #8]
 80128bc:	46b9      	mov	r9, r7
 80128be:	463c      	mov	r4, r7
 80128c0:	1c53      	adds	r3, r2, #1
 80128c2:	7851      	ldrb	r1, [r2, #1]
 80128c4:	9303      	str	r3, [sp, #12]
 80128c6:	b341      	cbz	r1, 801291a <__hexnan+0x8a>
 80128c8:	4608      	mov	r0, r1
 80128ca:	9205      	str	r2, [sp, #20]
 80128cc:	9104      	str	r1, [sp, #16]
 80128ce:	f7ff fd5d 	bl	801238c <__hexdig_fun>
 80128d2:	2800      	cmp	r0, #0
 80128d4:	d14f      	bne.n	8012976 <__hexnan+0xe6>
 80128d6:	9904      	ldr	r1, [sp, #16]
 80128d8:	9a05      	ldr	r2, [sp, #20]
 80128da:	2920      	cmp	r1, #32
 80128dc:	d818      	bhi.n	8012910 <__hexnan+0x80>
 80128de:	9b02      	ldr	r3, [sp, #8]
 80128e0:	459b      	cmp	fp, r3
 80128e2:	dd13      	ble.n	801290c <__hexnan+0x7c>
 80128e4:	454c      	cmp	r4, r9
 80128e6:	d206      	bcs.n	80128f6 <__hexnan+0x66>
 80128e8:	2d07      	cmp	r5, #7
 80128ea:	dc04      	bgt.n	80128f6 <__hexnan+0x66>
 80128ec:	462a      	mov	r2, r5
 80128ee:	4649      	mov	r1, r9
 80128f0:	4620      	mov	r0, r4
 80128f2:	f7ff ffa7 	bl	8012844 <L_shift>
 80128f6:	4544      	cmp	r4, r8
 80128f8:	d94f      	bls.n	801299a <__hexnan+0x10a>
 80128fa:	2300      	movs	r3, #0
 80128fc:	f1a4 0904 	sub.w	r9, r4, #4
 8012900:	f8cd b008 	str.w	fp, [sp, #8]
 8012904:	f844 3c04 	str.w	r3, [r4, #-4]
 8012908:	461d      	mov	r5, r3
 801290a:	464c      	mov	r4, r9
 801290c:	9a03      	ldr	r2, [sp, #12]
 801290e:	e7d7      	b.n	80128c0 <__hexnan+0x30>
 8012910:	2929      	cmp	r1, #41	; 0x29
 8012912:	d155      	bne.n	80129c0 <__hexnan+0x130>
 8012914:	3202      	adds	r2, #2
 8012916:	f8ca 2000 	str.w	r2, [sl]
 801291a:	f1bb 0f00 	cmp.w	fp, #0
 801291e:	d04f      	beq.n	80129c0 <__hexnan+0x130>
 8012920:	454c      	cmp	r4, r9
 8012922:	d206      	bcs.n	8012932 <__hexnan+0xa2>
 8012924:	2d07      	cmp	r5, #7
 8012926:	dc04      	bgt.n	8012932 <__hexnan+0xa2>
 8012928:	462a      	mov	r2, r5
 801292a:	4649      	mov	r1, r9
 801292c:	4620      	mov	r0, r4
 801292e:	f7ff ff89 	bl	8012844 <L_shift>
 8012932:	4544      	cmp	r4, r8
 8012934:	d933      	bls.n	801299e <__hexnan+0x10e>
 8012936:	f1a8 0204 	sub.w	r2, r8, #4
 801293a:	4623      	mov	r3, r4
 801293c:	f853 1b04 	ldr.w	r1, [r3], #4
 8012940:	429f      	cmp	r7, r3
 8012942:	f842 1f04 	str.w	r1, [r2, #4]!
 8012946:	d2f9      	bcs.n	801293c <__hexnan+0xac>
 8012948:	1b3b      	subs	r3, r7, r4
 801294a:	3e03      	subs	r6, #3
 801294c:	3401      	adds	r4, #1
 801294e:	2200      	movs	r2, #0
 8012950:	f023 0303 	bic.w	r3, r3, #3
 8012954:	3304      	adds	r3, #4
 8012956:	42b4      	cmp	r4, r6
 8012958:	bf88      	it	hi
 801295a:	2304      	movhi	r3, #4
 801295c:	4443      	add	r3, r8
 801295e:	f843 2b04 	str.w	r2, [r3], #4
 8012962:	429f      	cmp	r7, r3
 8012964:	d2fb      	bcs.n	801295e <__hexnan+0xce>
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	b91b      	cbnz	r3, 8012972 <__hexnan+0xe2>
 801296a:	4547      	cmp	r7, r8
 801296c:	d126      	bne.n	80129bc <__hexnan+0x12c>
 801296e:	2301      	movs	r3, #1
 8012970:	603b      	str	r3, [r7, #0]
 8012972:	2005      	movs	r0, #5
 8012974:	e025      	b.n	80129c2 <__hexnan+0x132>
 8012976:	3501      	adds	r5, #1
 8012978:	f10b 0b01 	add.w	fp, fp, #1
 801297c:	2d08      	cmp	r5, #8
 801297e:	dd05      	ble.n	801298c <__hexnan+0xfc>
 8012980:	4544      	cmp	r4, r8
 8012982:	d9c3      	bls.n	801290c <__hexnan+0x7c>
 8012984:	2300      	movs	r3, #0
 8012986:	3c04      	subs	r4, #4
 8012988:	2501      	movs	r5, #1
 801298a:	6023      	str	r3, [r4, #0]
 801298c:	6822      	ldr	r2, [r4, #0]
 801298e:	f000 000f 	and.w	r0, r0, #15
 8012992:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012996:	6022      	str	r2, [r4, #0]
 8012998:	e7b8      	b.n	801290c <__hexnan+0x7c>
 801299a:	2508      	movs	r5, #8
 801299c:	e7b6      	b.n	801290c <__hexnan+0x7c>
 801299e:	9b01      	ldr	r3, [sp, #4]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d0e0      	beq.n	8012966 <__hexnan+0xd6>
 80129a4:	f04f 32ff 	mov.w	r2, #4294967295
 80129a8:	f1c3 0320 	rsb	r3, r3, #32
 80129ac:	fa22 f303 	lsr.w	r3, r2, r3
 80129b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80129b4:	401a      	ands	r2, r3
 80129b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80129ba:	e7d4      	b.n	8012966 <__hexnan+0xd6>
 80129bc:	3f04      	subs	r7, #4
 80129be:	e7d2      	b.n	8012966 <__hexnan+0xd6>
 80129c0:	2004      	movs	r0, #4
 80129c2:	b007      	add	sp, #28
 80129c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129c8 <_localeconv_r>:
 80129c8:	4800      	ldr	r0, [pc, #0]	; (80129cc <_localeconv_r+0x4>)
 80129ca:	4770      	bx	lr
 80129cc:	20000930 	.word	0x20000930

080129d0 <__retarget_lock_init_recursive>:
 80129d0:	4770      	bx	lr

080129d2 <__retarget_lock_acquire_recursive>:
 80129d2:	4770      	bx	lr

080129d4 <__retarget_lock_release_recursive>:
 80129d4:	4770      	bx	lr

080129d6 <__ascii_mbtowc>:
 80129d6:	b082      	sub	sp, #8
 80129d8:	b901      	cbnz	r1, 80129dc <__ascii_mbtowc+0x6>
 80129da:	a901      	add	r1, sp, #4
 80129dc:	b142      	cbz	r2, 80129f0 <__ascii_mbtowc+0x1a>
 80129de:	b14b      	cbz	r3, 80129f4 <__ascii_mbtowc+0x1e>
 80129e0:	7813      	ldrb	r3, [r2, #0]
 80129e2:	600b      	str	r3, [r1, #0]
 80129e4:	7812      	ldrb	r2, [r2, #0]
 80129e6:	1e10      	subs	r0, r2, #0
 80129e8:	bf18      	it	ne
 80129ea:	2001      	movne	r0, #1
 80129ec:	b002      	add	sp, #8
 80129ee:	4770      	bx	lr
 80129f0:	4610      	mov	r0, r2
 80129f2:	e7fb      	b.n	80129ec <__ascii_mbtowc+0x16>
 80129f4:	f06f 0001 	mvn.w	r0, #1
 80129f8:	e7f8      	b.n	80129ec <__ascii_mbtowc+0x16>

080129fa <memchr>:
 80129fa:	b2c9      	uxtb	r1, r1
 80129fc:	4402      	add	r2, r0
 80129fe:	b510      	push	{r4, lr}
 8012a00:	4290      	cmp	r0, r2
 8012a02:	4603      	mov	r3, r0
 8012a04:	d101      	bne.n	8012a0a <memchr+0x10>
 8012a06:	2300      	movs	r3, #0
 8012a08:	e003      	b.n	8012a12 <memchr+0x18>
 8012a0a:	781c      	ldrb	r4, [r3, #0]
 8012a0c:	3001      	adds	r0, #1
 8012a0e:	428c      	cmp	r4, r1
 8012a10:	d1f6      	bne.n	8012a00 <memchr+0x6>
 8012a12:	4618      	mov	r0, r3
 8012a14:	bd10      	pop	{r4, pc}
	...

08012a18 <__malloc_lock>:
 8012a18:	4801      	ldr	r0, [pc, #4]	; (8012a20 <__malloc_lock+0x8>)
 8012a1a:	f7ff bfda 	b.w	80129d2 <__retarget_lock_acquire_recursive>
 8012a1e:	bf00      	nop
 8012a20:	20001ef0 	.word	0x20001ef0

08012a24 <__malloc_unlock>:
 8012a24:	4801      	ldr	r0, [pc, #4]	; (8012a2c <__malloc_unlock+0x8>)
 8012a26:	f7ff bfd5 	b.w	80129d4 <__retarget_lock_release_recursive>
 8012a2a:	bf00      	nop
 8012a2c:	20001ef0 	.word	0x20001ef0

08012a30 <_Balloc>:
 8012a30:	b570      	push	{r4, r5, r6, lr}
 8012a32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012a34:	4604      	mov	r4, r0
 8012a36:	460d      	mov	r5, r1
 8012a38:	b976      	cbnz	r6, 8012a58 <_Balloc+0x28>
 8012a3a:	2010      	movs	r0, #16
 8012a3c:	f7fc fe6c 	bl	800f718 <malloc>
 8012a40:	4602      	mov	r2, r0
 8012a42:	6260      	str	r0, [r4, #36]	; 0x24
 8012a44:	b920      	cbnz	r0, 8012a50 <_Balloc+0x20>
 8012a46:	4b18      	ldr	r3, [pc, #96]	; (8012aa8 <_Balloc+0x78>)
 8012a48:	2166      	movs	r1, #102	; 0x66
 8012a4a:	4818      	ldr	r0, [pc, #96]	; (8012aac <_Balloc+0x7c>)
 8012a4c:	f001 f8f0 	bl	8013c30 <__assert_func>
 8012a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a54:	6006      	str	r6, [r0, #0]
 8012a56:	60c6      	str	r6, [r0, #12]
 8012a58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012a5a:	68f3      	ldr	r3, [r6, #12]
 8012a5c:	b183      	cbz	r3, 8012a80 <_Balloc+0x50>
 8012a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a60:	68db      	ldr	r3, [r3, #12]
 8012a62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a66:	b9b8      	cbnz	r0, 8012a98 <_Balloc+0x68>
 8012a68:	2101      	movs	r1, #1
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	fa01 f605 	lsl.w	r6, r1, r5
 8012a70:	1d72      	adds	r2, r6, #5
 8012a72:	0092      	lsls	r2, r2, #2
 8012a74:	f000 fca1 	bl	80133ba <_calloc_r>
 8012a78:	b160      	cbz	r0, 8012a94 <_Balloc+0x64>
 8012a7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012a7e:	e00e      	b.n	8012a9e <_Balloc+0x6e>
 8012a80:	2221      	movs	r2, #33	; 0x21
 8012a82:	2104      	movs	r1, #4
 8012a84:	4620      	mov	r0, r4
 8012a86:	f000 fc98 	bl	80133ba <_calloc_r>
 8012a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a8c:	60f0      	str	r0, [r6, #12]
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d1e4      	bne.n	8012a5e <_Balloc+0x2e>
 8012a94:	2000      	movs	r0, #0
 8012a96:	bd70      	pop	{r4, r5, r6, pc}
 8012a98:	6802      	ldr	r2, [r0, #0]
 8012a9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012aa4:	e7f7      	b.n	8012a96 <_Balloc+0x66>
 8012aa6:	bf00      	nop
 8012aa8:	08069396 	.word	0x08069396
 8012aac:	080694f8 	.word	0x080694f8

08012ab0 <_Bfree>:
 8012ab0:	b570      	push	{r4, r5, r6, lr}
 8012ab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012ab4:	4605      	mov	r5, r0
 8012ab6:	460c      	mov	r4, r1
 8012ab8:	b976      	cbnz	r6, 8012ad8 <_Bfree+0x28>
 8012aba:	2010      	movs	r0, #16
 8012abc:	f7fc fe2c 	bl	800f718 <malloc>
 8012ac0:	4602      	mov	r2, r0
 8012ac2:	6268      	str	r0, [r5, #36]	; 0x24
 8012ac4:	b920      	cbnz	r0, 8012ad0 <_Bfree+0x20>
 8012ac6:	4b09      	ldr	r3, [pc, #36]	; (8012aec <_Bfree+0x3c>)
 8012ac8:	218a      	movs	r1, #138	; 0x8a
 8012aca:	4809      	ldr	r0, [pc, #36]	; (8012af0 <_Bfree+0x40>)
 8012acc:	f001 f8b0 	bl	8013c30 <__assert_func>
 8012ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ad4:	6006      	str	r6, [r0, #0]
 8012ad6:	60c6      	str	r6, [r0, #12]
 8012ad8:	b13c      	cbz	r4, 8012aea <_Bfree+0x3a>
 8012ada:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012adc:	6862      	ldr	r2, [r4, #4]
 8012ade:	68db      	ldr	r3, [r3, #12]
 8012ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012ae4:	6021      	str	r1, [r4, #0]
 8012ae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012aea:	bd70      	pop	{r4, r5, r6, pc}
 8012aec:	08069396 	.word	0x08069396
 8012af0:	080694f8 	.word	0x080694f8

08012af4 <__multadd>:
 8012af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af8:	f101 0c14 	add.w	ip, r1, #20
 8012afc:	4607      	mov	r7, r0
 8012afe:	460c      	mov	r4, r1
 8012b00:	461e      	mov	r6, r3
 8012b02:	690d      	ldr	r5, [r1, #16]
 8012b04:	2000      	movs	r0, #0
 8012b06:	f8dc 3000 	ldr.w	r3, [ip]
 8012b0a:	3001      	adds	r0, #1
 8012b0c:	b299      	uxth	r1, r3
 8012b0e:	4285      	cmp	r5, r0
 8012b10:	fb02 6101 	mla	r1, r2, r1, r6
 8012b14:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012b18:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8012b1c:	b289      	uxth	r1, r1
 8012b1e:	fb02 3306 	mla	r3, r2, r6, r3
 8012b22:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012b26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012b2a:	f84c 1b04 	str.w	r1, [ip], #4
 8012b2e:	dcea      	bgt.n	8012b06 <__multadd+0x12>
 8012b30:	b30e      	cbz	r6, 8012b76 <__multadd+0x82>
 8012b32:	68a3      	ldr	r3, [r4, #8]
 8012b34:	42ab      	cmp	r3, r5
 8012b36:	dc19      	bgt.n	8012b6c <__multadd+0x78>
 8012b38:	6861      	ldr	r1, [r4, #4]
 8012b3a:	4638      	mov	r0, r7
 8012b3c:	3101      	adds	r1, #1
 8012b3e:	f7ff ff77 	bl	8012a30 <_Balloc>
 8012b42:	4680      	mov	r8, r0
 8012b44:	b928      	cbnz	r0, 8012b52 <__multadd+0x5e>
 8012b46:	4602      	mov	r2, r0
 8012b48:	4b0c      	ldr	r3, [pc, #48]	; (8012b7c <__multadd+0x88>)
 8012b4a:	21b5      	movs	r1, #181	; 0xb5
 8012b4c:	480c      	ldr	r0, [pc, #48]	; (8012b80 <__multadd+0x8c>)
 8012b4e:	f001 f86f 	bl	8013c30 <__assert_func>
 8012b52:	6922      	ldr	r2, [r4, #16]
 8012b54:	f104 010c 	add.w	r1, r4, #12
 8012b58:	300c      	adds	r0, #12
 8012b5a:	3202      	adds	r2, #2
 8012b5c:	0092      	lsls	r2, r2, #2
 8012b5e:	f7fc fde3 	bl	800f728 <memcpy>
 8012b62:	4621      	mov	r1, r4
 8012b64:	4644      	mov	r4, r8
 8012b66:	4638      	mov	r0, r7
 8012b68:	f7ff ffa2 	bl	8012ab0 <_Bfree>
 8012b6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012b70:	3501      	adds	r5, #1
 8012b72:	615e      	str	r6, [r3, #20]
 8012b74:	6125      	str	r5, [r4, #16]
 8012b76:	4620      	mov	r0, r4
 8012b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b7c:	08069408 	.word	0x08069408
 8012b80:	080694f8 	.word	0x080694f8

08012b84 <__s2b>:
 8012b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b88:	4615      	mov	r5, r2
 8012b8a:	461f      	mov	r7, r3
 8012b8c:	2209      	movs	r2, #9
 8012b8e:	3308      	adds	r3, #8
 8012b90:	460c      	mov	r4, r1
 8012b92:	4606      	mov	r6, r0
 8012b94:	2100      	movs	r1, #0
 8012b96:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	db09      	blt.n	8012bb4 <__s2b+0x30>
 8012ba0:	4630      	mov	r0, r6
 8012ba2:	f7ff ff45 	bl	8012a30 <_Balloc>
 8012ba6:	b940      	cbnz	r0, 8012bba <__s2b+0x36>
 8012ba8:	4602      	mov	r2, r0
 8012baa:	4b19      	ldr	r3, [pc, #100]	; (8012c10 <__s2b+0x8c>)
 8012bac:	21ce      	movs	r1, #206	; 0xce
 8012bae:	4819      	ldr	r0, [pc, #100]	; (8012c14 <__s2b+0x90>)
 8012bb0:	f001 f83e 	bl	8013c30 <__assert_func>
 8012bb4:	0052      	lsls	r2, r2, #1
 8012bb6:	3101      	adds	r1, #1
 8012bb8:	e7f0      	b.n	8012b9c <__s2b+0x18>
 8012bba:	9b08      	ldr	r3, [sp, #32]
 8012bbc:	2d09      	cmp	r5, #9
 8012bbe:	6143      	str	r3, [r0, #20]
 8012bc0:	f04f 0301 	mov.w	r3, #1
 8012bc4:	6103      	str	r3, [r0, #16]
 8012bc6:	dd16      	ble.n	8012bf6 <__s2b+0x72>
 8012bc8:	f104 0909 	add.w	r9, r4, #9
 8012bcc:	442c      	add	r4, r5
 8012bce:	46c8      	mov	r8, r9
 8012bd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012bd4:	4601      	mov	r1, r0
 8012bd6:	220a      	movs	r2, #10
 8012bd8:	4630      	mov	r0, r6
 8012bda:	3b30      	subs	r3, #48	; 0x30
 8012bdc:	f7ff ff8a 	bl	8012af4 <__multadd>
 8012be0:	45a0      	cmp	r8, r4
 8012be2:	d1f5      	bne.n	8012bd0 <__s2b+0x4c>
 8012be4:	f1a5 0408 	sub.w	r4, r5, #8
 8012be8:	444c      	add	r4, r9
 8012bea:	1b2d      	subs	r5, r5, r4
 8012bec:	1963      	adds	r3, r4, r5
 8012bee:	42bb      	cmp	r3, r7
 8012bf0:	db04      	blt.n	8012bfc <__s2b+0x78>
 8012bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bf6:	340a      	adds	r4, #10
 8012bf8:	2509      	movs	r5, #9
 8012bfa:	e7f6      	b.n	8012bea <__s2b+0x66>
 8012bfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012c00:	4601      	mov	r1, r0
 8012c02:	220a      	movs	r2, #10
 8012c04:	4630      	mov	r0, r6
 8012c06:	3b30      	subs	r3, #48	; 0x30
 8012c08:	f7ff ff74 	bl	8012af4 <__multadd>
 8012c0c:	e7ee      	b.n	8012bec <__s2b+0x68>
 8012c0e:	bf00      	nop
 8012c10:	08069408 	.word	0x08069408
 8012c14:	080694f8 	.word	0x080694f8

08012c18 <__hi0bits>:
 8012c18:	0c03      	lsrs	r3, r0, #16
 8012c1a:	041b      	lsls	r3, r3, #16
 8012c1c:	b9d3      	cbnz	r3, 8012c54 <__hi0bits+0x3c>
 8012c1e:	0400      	lsls	r0, r0, #16
 8012c20:	2310      	movs	r3, #16
 8012c22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012c26:	bf04      	itt	eq
 8012c28:	0200      	lsleq	r0, r0, #8
 8012c2a:	3308      	addeq	r3, #8
 8012c2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012c30:	bf04      	itt	eq
 8012c32:	0100      	lsleq	r0, r0, #4
 8012c34:	3304      	addeq	r3, #4
 8012c36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012c3a:	bf04      	itt	eq
 8012c3c:	0080      	lsleq	r0, r0, #2
 8012c3e:	3302      	addeq	r3, #2
 8012c40:	2800      	cmp	r0, #0
 8012c42:	db05      	blt.n	8012c50 <__hi0bits+0x38>
 8012c44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012c48:	f103 0301 	add.w	r3, r3, #1
 8012c4c:	bf08      	it	eq
 8012c4e:	2320      	moveq	r3, #32
 8012c50:	4618      	mov	r0, r3
 8012c52:	4770      	bx	lr
 8012c54:	2300      	movs	r3, #0
 8012c56:	e7e4      	b.n	8012c22 <__hi0bits+0xa>

08012c58 <__lo0bits>:
 8012c58:	6803      	ldr	r3, [r0, #0]
 8012c5a:	4601      	mov	r1, r0
 8012c5c:	f013 0207 	ands.w	r2, r3, #7
 8012c60:	d00b      	beq.n	8012c7a <__lo0bits+0x22>
 8012c62:	07da      	lsls	r2, r3, #31
 8012c64:	d423      	bmi.n	8012cae <__lo0bits+0x56>
 8012c66:	0798      	lsls	r0, r3, #30
 8012c68:	bf47      	ittee	mi
 8012c6a:	085b      	lsrmi	r3, r3, #1
 8012c6c:	2001      	movmi	r0, #1
 8012c6e:	089b      	lsrpl	r3, r3, #2
 8012c70:	2002      	movpl	r0, #2
 8012c72:	bf4c      	ite	mi
 8012c74:	600b      	strmi	r3, [r1, #0]
 8012c76:	600b      	strpl	r3, [r1, #0]
 8012c78:	4770      	bx	lr
 8012c7a:	b298      	uxth	r0, r3
 8012c7c:	b9a8      	cbnz	r0, 8012caa <__lo0bits+0x52>
 8012c7e:	0c1b      	lsrs	r3, r3, #16
 8012c80:	2010      	movs	r0, #16
 8012c82:	b2da      	uxtb	r2, r3
 8012c84:	b90a      	cbnz	r2, 8012c8a <__lo0bits+0x32>
 8012c86:	3008      	adds	r0, #8
 8012c88:	0a1b      	lsrs	r3, r3, #8
 8012c8a:	071a      	lsls	r2, r3, #28
 8012c8c:	bf04      	itt	eq
 8012c8e:	091b      	lsreq	r3, r3, #4
 8012c90:	3004      	addeq	r0, #4
 8012c92:	079a      	lsls	r2, r3, #30
 8012c94:	bf04      	itt	eq
 8012c96:	089b      	lsreq	r3, r3, #2
 8012c98:	3002      	addeq	r0, #2
 8012c9a:	07da      	lsls	r2, r3, #31
 8012c9c:	d403      	bmi.n	8012ca6 <__lo0bits+0x4e>
 8012c9e:	085b      	lsrs	r3, r3, #1
 8012ca0:	f100 0001 	add.w	r0, r0, #1
 8012ca4:	d005      	beq.n	8012cb2 <__lo0bits+0x5a>
 8012ca6:	600b      	str	r3, [r1, #0]
 8012ca8:	4770      	bx	lr
 8012caa:	4610      	mov	r0, r2
 8012cac:	e7e9      	b.n	8012c82 <__lo0bits+0x2a>
 8012cae:	2000      	movs	r0, #0
 8012cb0:	4770      	bx	lr
 8012cb2:	2020      	movs	r0, #32
 8012cb4:	4770      	bx	lr
	...

08012cb8 <__i2b>:
 8012cb8:	b510      	push	{r4, lr}
 8012cba:	460c      	mov	r4, r1
 8012cbc:	2101      	movs	r1, #1
 8012cbe:	f7ff feb7 	bl	8012a30 <_Balloc>
 8012cc2:	4602      	mov	r2, r0
 8012cc4:	b928      	cbnz	r0, 8012cd2 <__i2b+0x1a>
 8012cc6:	4b05      	ldr	r3, [pc, #20]	; (8012cdc <__i2b+0x24>)
 8012cc8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012ccc:	4804      	ldr	r0, [pc, #16]	; (8012ce0 <__i2b+0x28>)
 8012cce:	f000 ffaf 	bl	8013c30 <__assert_func>
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	6144      	str	r4, [r0, #20]
 8012cd6:	6103      	str	r3, [r0, #16]
 8012cd8:	bd10      	pop	{r4, pc}
 8012cda:	bf00      	nop
 8012cdc:	08069408 	.word	0x08069408
 8012ce0:	080694f8 	.word	0x080694f8

08012ce4 <__multiply>:
 8012ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce8:	4691      	mov	r9, r2
 8012cea:	690a      	ldr	r2, [r1, #16]
 8012cec:	460c      	mov	r4, r1
 8012cee:	b085      	sub	sp, #20
 8012cf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	bfbe      	ittt	lt
 8012cf8:	460b      	movlt	r3, r1
 8012cfa:	464c      	movlt	r4, r9
 8012cfc:	4699      	movlt	r9, r3
 8012cfe:	6927      	ldr	r7, [r4, #16]
 8012d00:	68a3      	ldr	r3, [r4, #8]
 8012d02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012d06:	6861      	ldr	r1, [r4, #4]
 8012d08:	eb07 060a 	add.w	r6, r7, sl
 8012d0c:	42b3      	cmp	r3, r6
 8012d0e:	bfb8      	it	lt
 8012d10:	3101      	addlt	r1, #1
 8012d12:	f7ff fe8d 	bl	8012a30 <_Balloc>
 8012d16:	b930      	cbnz	r0, 8012d26 <__multiply+0x42>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	4b44      	ldr	r3, [pc, #272]	; (8012e2c <__multiply+0x148>)
 8012d1c:	f240 115d 	movw	r1, #349	; 0x15d
 8012d20:	4843      	ldr	r0, [pc, #268]	; (8012e30 <__multiply+0x14c>)
 8012d22:	f000 ff85 	bl	8013c30 <__assert_func>
 8012d26:	f100 0514 	add.w	r5, r0, #20
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012d30:	462b      	mov	r3, r5
 8012d32:	4543      	cmp	r3, r8
 8012d34:	d321      	bcc.n	8012d7a <__multiply+0x96>
 8012d36:	f104 0314 	add.w	r3, r4, #20
 8012d3a:	f104 0115 	add.w	r1, r4, #21
 8012d3e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012d42:	f109 0314 	add.w	r3, r9, #20
 8012d46:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012d4a:	9202      	str	r2, [sp, #8]
 8012d4c:	1b3a      	subs	r2, r7, r4
 8012d4e:	3a15      	subs	r2, #21
 8012d50:	f022 0203 	bic.w	r2, r2, #3
 8012d54:	3204      	adds	r2, #4
 8012d56:	428f      	cmp	r7, r1
 8012d58:	bf38      	it	cc
 8012d5a:	2204      	movcc	r2, #4
 8012d5c:	9201      	str	r2, [sp, #4]
 8012d5e:	9a02      	ldr	r2, [sp, #8]
 8012d60:	9303      	str	r3, [sp, #12]
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d80c      	bhi.n	8012d80 <__multiply+0x9c>
 8012d66:	2e00      	cmp	r6, #0
 8012d68:	dd03      	ble.n	8012d72 <__multiply+0x8e>
 8012d6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d05a      	beq.n	8012e28 <__multiply+0x144>
 8012d72:	6106      	str	r6, [r0, #16]
 8012d74:	b005      	add	sp, #20
 8012d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7a:	f843 2b04 	str.w	r2, [r3], #4
 8012d7e:	e7d8      	b.n	8012d32 <__multiply+0x4e>
 8012d80:	f8b3 a000 	ldrh.w	sl, [r3]
 8012d84:	f1ba 0f00 	cmp.w	sl, #0
 8012d88:	d024      	beq.n	8012dd4 <__multiply+0xf0>
 8012d8a:	f104 0e14 	add.w	lr, r4, #20
 8012d8e:	46a9      	mov	r9, r5
 8012d90:	f04f 0c00 	mov.w	ip, #0
 8012d94:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012d98:	f8d9 1000 	ldr.w	r1, [r9]
 8012d9c:	fa1f fb82 	uxth.w	fp, r2
 8012da0:	4577      	cmp	r7, lr
 8012da2:	b289      	uxth	r1, r1
 8012da4:	fb0a 110b 	mla	r1, sl, fp, r1
 8012da8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012dac:	f8d9 2000 	ldr.w	r2, [r9]
 8012db0:	4461      	add	r1, ip
 8012db2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012db6:	fb0a c20b 	mla	r2, sl, fp, ip
 8012dba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012dbe:	b289      	uxth	r1, r1
 8012dc0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012dc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012dc8:	f849 1b04 	str.w	r1, [r9], #4
 8012dcc:	d8e2      	bhi.n	8012d94 <__multiply+0xb0>
 8012dce:	9a01      	ldr	r2, [sp, #4]
 8012dd0:	f845 c002 	str.w	ip, [r5, r2]
 8012dd4:	9a03      	ldr	r2, [sp, #12]
 8012dd6:	3304      	adds	r3, #4
 8012dd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012ddc:	f1b9 0f00 	cmp.w	r9, #0
 8012de0:	d020      	beq.n	8012e24 <__multiply+0x140>
 8012de2:	6829      	ldr	r1, [r5, #0]
 8012de4:	f104 0c14 	add.w	ip, r4, #20
 8012de8:	46ae      	mov	lr, r5
 8012dea:	f04f 0a00 	mov.w	sl, #0
 8012dee:	f8bc b000 	ldrh.w	fp, [ip]
 8012df2:	b289      	uxth	r1, r1
 8012df4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012df8:	fb09 220b 	mla	r2, r9, fp, r2
 8012dfc:	4492      	add	sl, r2
 8012dfe:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012e02:	f84e 1b04 	str.w	r1, [lr], #4
 8012e06:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012e0a:	f8be 1000 	ldrh.w	r1, [lr]
 8012e0e:	0c12      	lsrs	r2, r2, #16
 8012e10:	4567      	cmp	r7, ip
 8012e12:	fb09 1102 	mla	r1, r9, r2, r1
 8012e16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012e1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012e1e:	d8e6      	bhi.n	8012dee <__multiply+0x10a>
 8012e20:	9a01      	ldr	r2, [sp, #4]
 8012e22:	50a9      	str	r1, [r5, r2]
 8012e24:	3504      	adds	r5, #4
 8012e26:	e79a      	b.n	8012d5e <__multiply+0x7a>
 8012e28:	3e01      	subs	r6, #1
 8012e2a:	e79c      	b.n	8012d66 <__multiply+0x82>
 8012e2c:	08069408 	.word	0x08069408
 8012e30:	080694f8 	.word	0x080694f8

08012e34 <__pow5mult>:
 8012e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e38:	4615      	mov	r5, r2
 8012e3a:	f012 0203 	ands.w	r2, r2, #3
 8012e3e:	4606      	mov	r6, r0
 8012e40:	460f      	mov	r7, r1
 8012e42:	d007      	beq.n	8012e54 <__pow5mult+0x20>
 8012e44:	3a01      	subs	r2, #1
 8012e46:	4c25      	ldr	r4, [pc, #148]	; (8012edc <__pow5mult+0xa8>)
 8012e48:	2300      	movs	r3, #0
 8012e4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012e4e:	f7ff fe51 	bl	8012af4 <__multadd>
 8012e52:	4607      	mov	r7, r0
 8012e54:	10ad      	asrs	r5, r5, #2
 8012e56:	d03d      	beq.n	8012ed4 <__pow5mult+0xa0>
 8012e58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012e5a:	b97c      	cbnz	r4, 8012e7c <__pow5mult+0x48>
 8012e5c:	2010      	movs	r0, #16
 8012e5e:	f7fc fc5b 	bl	800f718 <malloc>
 8012e62:	4602      	mov	r2, r0
 8012e64:	6270      	str	r0, [r6, #36]	; 0x24
 8012e66:	b928      	cbnz	r0, 8012e74 <__pow5mult+0x40>
 8012e68:	4b1d      	ldr	r3, [pc, #116]	; (8012ee0 <__pow5mult+0xac>)
 8012e6a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012e6e:	481d      	ldr	r0, [pc, #116]	; (8012ee4 <__pow5mult+0xb0>)
 8012e70:	f000 fede 	bl	8013c30 <__assert_func>
 8012e74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012e78:	6004      	str	r4, [r0, #0]
 8012e7a:	60c4      	str	r4, [r0, #12]
 8012e7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012e84:	b94c      	cbnz	r4, 8012e9a <__pow5mult+0x66>
 8012e86:	f240 2171 	movw	r1, #625	; 0x271
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	f7ff ff14 	bl	8012cb8 <__i2b>
 8012e90:	2300      	movs	r3, #0
 8012e92:	4604      	mov	r4, r0
 8012e94:	f8c8 0008 	str.w	r0, [r8, #8]
 8012e98:	6003      	str	r3, [r0, #0]
 8012e9a:	f04f 0900 	mov.w	r9, #0
 8012e9e:	07eb      	lsls	r3, r5, #31
 8012ea0:	d50a      	bpl.n	8012eb8 <__pow5mult+0x84>
 8012ea2:	4639      	mov	r1, r7
 8012ea4:	4622      	mov	r2, r4
 8012ea6:	4630      	mov	r0, r6
 8012ea8:	f7ff ff1c 	bl	8012ce4 <__multiply>
 8012eac:	4680      	mov	r8, r0
 8012eae:	4639      	mov	r1, r7
 8012eb0:	4630      	mov	r0, r6
 8012eb2:	4647      	mov	r7, r8
 8012eb4:	f7ff fdfc 	bl	8012ab0 <_Bfree>
 8012eb8:	106d      	asrs	r5, r5, #1
 8012eba:	d00b      	beq.n	8012ed4 <__pow5mult+0xa0>
 8012ebc:	6820      	ldr	r0, [r4, #0]
 8012ebe:	b938      	cbnz	r0, 8012ed0 <__pow5mult+0x9c>
 8012ec0:	4622      	mov	r2, r4
 8012ec2:	4621      	mov	r1, r4
 8012ec4:	4630      	mov	r0, r6
 8012ec6:	f7ff ff0d 	bl	8012ce4 <__multiply>
 8012eca:	6020      	str	r0, [r4, #0]
 8012ecc:	f8c0 9000 	str.w	r9, [r0]
 8012ed0:	4604      	mov	r4, r0
 8012ed2:	e7e4      	b.n	8012e9e <__pow5mult+0x6a>
 8012ed4:	4638      	mov	r0, r7
 8012ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eda:	bf00      	nop
 8012edc:	08069648 	.word	0x08069648
 8012ee0:	08069396 	.word	0x08069396
 8012ee4:	080694f8 	.word	0x080694f8

08012ee8 <__lshift>:
 8012ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eec:	460c      	mov	r4, r1
 8012eee:	4607      	mov	r7, r0
 8012ef0:	4691      	mov	r9, r2
 8012ef2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012ef6:	6923      	ldr	r3, [r4, #16]
 8012ef8:	6849      	ldr	r1, [r1, #4]
 8012efa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012efe:	68a3      	ldr	r3, [r4, #8]
 8012f00:	f108 0601 	add.w	r6, r8, #1
 8012f04:	42b3      	cmp	r3, r6
 8012f06:	db0b      	blt.n	8012f20 <__lshift+0x38>
 8012f08:	4638      	mov	r0, r7
 8012f0a:	f7ff fd91 	bl	8012a30 <_Balloc>
 8012f0e:	4605      	mov	r5, r0
 8012f10:	b948      	cbnz	r0, 8012f26 <__lshift+0x3e>
 8012f12:	4602      	mov	r2, r0
 8012f14:	4b2a      	ldr	r3, [pc, #168]	; (8012fc0 <__lshift+0xd8>)
 8012f16:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012f1a:	482a      	ldr	r0, [pc, #168]	; (8012fc4 <__lshift+0xdc>)
 8012f1c:	f000 fe88 	bl	8013c30 <__assert_func>
 8012f20:	3101      	adds	r1, #1
 8012f22:	005b      	lsls	r3, r3, #1
 8012f24:	e7ee      	b.n	8012f04 <__lshift+0x1c>
 8012f26:	2300      	movs	r3, #0
 8012f28:	f100 0114 	add.w	r1, r0, #20
 8012f2c:	f100 0210 	add.w	r2, r0, #16
 8012f30:	4618      	mov	r0, r3
 8012f32:	4553      	cmp	r3, sl
 8012f34:	db37      	blt.n	8012fa6 <__lshift+0xbe>
 8012f36:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012f3a:	f104 0314 	add.w	r3, r4, #20
 8012f3e:	6920      	ldr	r0, [r4, #16]
 8012f40:	f019 091f 	ands.w	r9, r9, #31
 8012f44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012f48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012f4c:	d02f      	beq.n	8012fae <__lshift+0xc6>
 8012f4e:	f1c9 0e20 	rsb	lr, r9, #32
 8012f52:	468a      	mov	sl, r1
 8012f54:	f04f 0c00 	mov.w	ip, #0
 8012f58:	681a      	ldr	r2, [r3, #0]
 8012f5a:	fa02 f209 	lsl.w	r2, r2, r9
 8012f5e:	ea42 020c 	orr.w	r2, r2, ip
 8012f62:	f84a 2b04 	str.w	r2, [sl], #4
 8012f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f6a:	4298      	cmp	r0, r3
 8012f6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012f70:	d8f2      	bhi.n	8012f58 <__lshift+0x70>
 8012f72:	1b03      	subs	r3, r0, r4
 8012f74:	f104 0215 	add.w	r2, r4, #21
 8012f78:	3b15      	subs	r3, #21
 8012f7a:	f023 0303 	bic.w	r3, r3, #3
 8012f7e:	3304      	adds	r3, #4
 8012f80:	4290      	cmp	r0, r2
 8012f82:	bf38      	it	cc
 8012f84:	2304      	movcc	r3, #4
 8012f86:	f841 c003 	str.w	ip, [r1, r3]
 8012f8a:	f1bc 0f00 	cmp.w	ip, #0
 8012f8e:	d001      	beq.n	8012f94 <__lshift+0xac>
 8012f90:	f108 0602 	add.w	r6, r8, #2
 8012f94:	3e01      	subs	r6, #1
 8012f96:	4638      	mov	r0, r7
 8012f98:	4621      	mov	r1, r4
 8012f9a:	612e      	str	r6, [r5, #16]
 8012f9c:	f7ff fd88 	bl	8012ab0 <_Bfree>
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fa6:	3301      	adds	r3, #1
 8012fa8:	f842 0f04 	str.w	r0, [r2, #4]!
 8012fac:	e7c1      	b.n	8012f32 <__lshift+0x4a>
 8012fae:	3904      	subs	r1, #4
 8012fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fb4:	4298      	cmp	r0, r3
 8012fb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8012fba:	d8f9      	bhi.n	8012fb0 <__lshift+0xc8>
 8012fbc:	e7ea      	b.n	8012f94 <__lshift+0xac>
 8012fbe:	bf00      	nop
 8012fc0:	08069408 	.word	0x08069408
 8012fc4:	080694f8 	.word	0x080694f8

08012fc8 <__mcmp>:
 8012fc8:	6902      	ldr	r2, [r0, #16]
 8012fca:	b530      	push	{r4, r5, lr}
 8012fcc:	690c      	ldr	r4, [r1, #16]
 8012fce:	1b12      	subs	r2, r2, r4
 8012fd0:	d10e      	bne.n	8012ff0 <__mcmp+0x28>
 8012fd2:	f100 0314 	add.w	r3, r0, #20
 8012fd6:	3114      	adds	r1, #20
 8012fd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012fdc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012fe0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012fe4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012fe8:	42a5      	cmp	r5, r4
 8012fea:	d003      	beq.n	8012ff4 <__mcmp+0x2c>
 8012fec:	d305      	bcc.n	8012ffa <__mcmp+0x32>
 8012fee:	2201      	movs	r2, #1
 8012ff0:	4610      	mov	r0, r2
 8012ff2:	bd30      	pop	{r4, r5, pc}
 8012ff4:	4283      	cmp	r3, r0
 8012ff6:	d3f3      	bcc.n	8012fe0 <__mcmp+0x18>
 8012ff8:	e7fa      	b.n	8012ff0 <__mcmp+0x28>
 8012ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8012ffe:	e7f7      	b.n	8012ff0 <__mcmp+0x28>

08013000 <__mdiff>:
 8013000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013004:	460c      	mov	r4, r1
 8013006:	4606      	mov	r6, r0
 8013008:	4611      	mov	r1, r2
 801300a:	4692      	mov	sl, r2
 801300c:	4620      	mov	r0, r4
 801300e:	f7ff ffdb 	bl	8012fc8 <__mcmp>
 8013012:	1e05      	subs	r5, r0, #0
 8013014:	d110      	bne.n	8013038 <__mdiff+0x38>
 8013016:	4629      	mov	r1, r5
 8013018:	4630      	mov	r0, r6
 801301a:	f7ff fd09 	bl	8012a30 <_Balloc>
 801301e:	b930      	cbnz	r0, 801302e <__mdiff+0x2e>
 8013020:	4b3d      	ldr	r3, [pc, #244]	; (8013118 <__mdiff+0x118>)
 8013022:	4602      	mov	r2, r0
 8013024:	f240 2132 	movw	r1, #562	; 0x232
 8013028:	483c      	ldr	r0, [pc, #240]	; (801311c <__mdiff+0x11c>)
 801302a:	f000 fe01 	bl	8013c30 <__assert_func>
 801302e:	2301      	movs	r3, #1
 8013030:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013038:	bfa4      	itt	ge
 801303a:	4653      	movge	r3, sl
 801303c:	46a2      	movge	sl, r4
 801303e:	4630      	mov	r0, r6
 8013040:	bfa8      	it	ge
 8013042:	2500      	movge	r5, #0
 8013044:	f8da 1004 	ldr.w	r1, [sl, #4]
 8013048:	bfac      	ite	ge
 801304a:	461c      	movge	r4, r3
 801304c:	2501      	movlt	r5, #1
 801304e:	f7ff fcef 	bl	8012a30 <_Balloc>
 8013052:	b920      	cbnz	r0, 801305e <__mdiff+0x5e>
 8013054:	4b30      	ldr	r3, [pc, #192]	; (8013118 <__mdiff+0x118>)
 8013056:	4602      	mov	r2, r0
 8013058:	f44f 7110 	mov.w	r1, #576	; 0x240
 801305c:	e7e4      	b.n	8013028 <__mdiff+0x28>
 801305e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8013062:	f104 0914 	add.w	r9, r4, #20
 8013066:	6926      	ldr	r6, [r4, #16]
 8013068:	f100 0814 	add.w	r8, r0, #20
 801306c:	60c5      	str	r5, [r0, #12]
 801306e:	f10a 0514 	add.w	r5, sl, #20
 8013072:	f10a 0210 	add.w	r2, sl, #16
 8013076:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801307a:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 801307e:	46c2      	mov	sl, r8
 8013080:	f04f 0c00 	mov.w	ip, #0
 8013084:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013088:	f859 3b04 	ldr.w	r3, [r9], #4
 801308c:	fa1f f18b 	uxth.w	r1, fp
 8013090:	454e      	cmp	r6, r9
 8013092:	448c      	add	ip, r1
 8013094:	b299      	uxth	r1, r3
 8013096:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801309a:	ebac 0101 	sub.w	r1, ip, r1
 801309e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80130a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80130a6:	b289      	uxth	r1, r1
 80130a8:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80130ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80130b0:	f84a 3b04 	str.w	r3, [sl], #4
 80130b4:	d8e6      	bhi.n	8013084 <__mdiff+0x84>
 80130b6:	1b33      	subs	r3, r6, r4
 80130b8:	3415      	adds	r4, #21
 80130ba:	3b15      	subs	r3, #21
 80130bc:	f023 0303 	bic.w	r3, r3, #3
 80130c0:	3304      	adds	r3, #4
 80130c2:	42a6      	cmp	r6, r4
 80130c4:	bf38      	it	cc
 80130c6:	2304      	movcc	r3, #4
 80130c8:	441d      	add	r5, r3
 80130ca:	4443      	add	r3, r8
 80130cc:	462c      	mov	r4, r5
 80130ce:	461e      	mov	r6, r3
 80130d0:	4574      	cmp	r4, lr
 80130d2:	d30e      	bcc.n	80130f2 <__mdiff+0xf2>
 80130d4:	f10e 0203 	add.w	r2, lr, #3
 80130d8:	1b52      	subs	r2, r2, r5
 80130da:	3d03      	subs	r5, #3
 80130dc:	f022 0203 	bic.w	r2, r2, #3
 80130e0:	45ae      	cmp	lr, r5
 80130e2:	bf38      	it	cc
 80130e4:	2200      	movcc	r2, #0
 80130e6:	441a      	add	r2, r3
 80130e8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80130ec:	b18b      	cbz	r3, 8013112 <__mdiff+0x112>
 80130ee:	6107      	str	r7, [r0, #16]
 80130f0:	e7a0      	b.n	8013034 <__mdiff+0x34>
 80130f2:	f854 8b04 	ldr.w	r8, [r4], #4
 80130f6:	fa1f f288 	uxth.w	r2, r8
 80130fa:	4462      	add	r2, ip
 80130fc:	1411      	asrs	r1, r2, #16
 80130fe:	b292      	uxth	r2, r2
 8013100:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8013104:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013108:	ea4f 4c21 	mov.w	ip, r1, asr #16
 801310c:	f846 2b04 	str.w	r2, [r6], #4
 8013110:	e7de      	b.n	80130d0 <__mdiff+0xd0>
 8013112:	3f01      	subs	r7, #1
 8013114:	e7e8      	b.n	80130e8 <__mdiff+0xe8>
 8013116:	bf00      	nop
 8013118:	08069408 	.word	0x08069408
 801311c:	080694f8 	.word	0x080694f8

08013120 <__ulp>:
 8013120:	b082      	sub	sp, #8
 8013122:	4913      	ldr	r1, [pc, #76]	; (8013170 <__ulp+0x50>)
 8013124:	ed8d 0b00 	vstr	d0, [sp]
 8013128:	9b01      	ldr	r3, [sp, #4]
 801312a:	4019      	ands	r1, r3
 801312c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013130:	2900      	cmp	r1, #0
 8013132:	dd05      	ble.n	8013140 <__ulp+0x20>
 8013134:	2200      	movs	r2, #0
 8013136:	460b      	mov	r3, r1
 8013138:	ec43 2b10 	vmov	d0, r2, r3
 801313c:	b002      	add	sp, #8
 801313e:	4770      	bx	lr
 8013140:	4249      	negs	r1, r1
 8013142:	2200      	movs	r2, #0
 8013144:	2300      	movs	r3, #0
 8013146:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801314a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801314e:	da04      	bge.n	801315a <__ulp+0x3a>
 8013150:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013154:	fa41 f300 	asr.w	r3, r1, r0
 8013158:	e7ee      	b.n	8013138 <__ulp+0x18>
 801315a:	f1a0 0114 	sub.w	r1, r0, #20
 801315e:	291e      	cmp	r1, #30
 8013160:	bfd6      	itet	le
 8013162:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013166:	2101      	movgt	r1, #1
 8013168:	fa20 f101 	lsrle.w	r1, r0, r1
 801316c:	460a      	mov	r2, r1
 801316e:	e7e3      	b.n	8013138 <__ulp+0x18>
 8013170:	7ff00000 	.word	0x7ff00000

08013174 <__b2d>:
 8013174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013176:	6905      	ldr	r5, [r0, #16]
 8013178:	f100 0714 	add.w	r7, r0, #20
 801317c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013180:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013184:	1f2e      	subs	r6, r5, #4
 8013186:	4620      	mov	r0, r4
 8013188:	f7ff fd46 	bl	8012c18 <__hi0bits>
 801318c:	f1c0 0320 	rsb	r3, r0, #32
 8013190:	280a      	cmp	r0, #10
 8013192:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013210 <__b2d+0x9c>
 8013196:	600b      	str	r3, [r1, #0]
 8013198:	dc15      	bgt.n	80131c6 <__b2d+0x52>
 801319a:	f1c0 0e0b 	rsb	lr, r0, #11
 801319e:	42b7      	cmp	r7, r6
 80131a0:	f100 0015 	add.w	r0, r0, #21
 80131a4:	fa24 f10e 	lsr.w	r1, r4, lr
 80131a8:	fa04 f000 	lsl.w	r0, r4, r0
 80131ac:	ea41 030c 	orr.w	r3, r1, ip
 80131b0:	bf34      	ite	cc
 80131b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80131b6:	2100      	movcs	r1, #0
 80131b8:	fa21 f10e 	lsr.w	r1, r1, lr
 80131bc:	ea40 0201 	orr.w	r2, r0, r1
 80131c0:	ec43 2b10 	vmov	d0, r2, r3
 80131c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c6:	42b7      	cmp	r7, r6
 80131c8:	bf3a      	itte	cc
 80131ca:	f1a5 0608 	subcc.w	r6, r5, #8
 80131ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80131d2:	2100      	movcs	r1, #0
 80131d4:	380b      	subs	r0, #11
 80131d6:	d017      	beq.n	8013208 <__b2d+0x94>
 80131d8:	f1c0 0c20 	rsb	ip, r0, #32
 80131dc:	fa04 f500 	lsl.w	r5, r4, r0
 80131e0:	42be      	cmp	r6, r7
 80131e2:	fa01 f000 	lsl.w	r0, r1, r0
 80131e6:	fa21 f40c 	lsr.w	r4, r1, ip
 80131ea:	ea45 0504 	orr.w	r5, r5, r4
 80131ee:	bf8c      	ite	hi
 80131f0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80131f4:	2400      	movls	r4, #0
 80131f6:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80131fa:	fa24 f40c 	lsr.w	r4, r4, ip
 80131fe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013202:	ea40 0204 	orr.w	r2, r0, r4
 8013206:	e7db      	b.n	80131c0 <__b2d+0x4c>
 8013208:	ea44 030c 	orr.w	r3, r4, ip
 801320c:	460a      	mov	r2, r1
 801320e:	e7d7      	b.n	80131c0 <__b2d+0x4c>
 8013210:	3ff00000 	.word	0x3ff00000

08013214 <__d2b>:
 8013214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013218:	4689      	mov	r9, r1
 801321a:	2101      	movs	r1, #1
 801321c:	4690      	mov	r8, r2
 801321e:	ec57 6b10 	vmov	r6, r7, d0
 8013222:	f7ff fc05 	bl	8012a30 <_Balloc>
 8013226:	4604      	mov	r4, r0
 8013228:	b930      	cbnz	r0, 8013238 <__d2b+0x24>
 801322a:	4602      	mov	r2, r0
 801322c:	4b25      	ldr	r3, [pc, #148]	; (80132c4 <__d2b+0xb0>)
 801322e:	f240 310a 	movw	r1, #778	; 0x30a
 8013232:	4825      	ldr	r0, [pc, #148]	; (80132c8 <__d2b+0xb4>)
 8013234:	f000 fcfc 	bl	8013c30 <__assert_func>
 8013238:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801323c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013240:	bb35      	cbnz	r5, 8013290 <__d2b+0x7c>
 8013242:	2e00      	cmp	r6, #0
 8013244:	9301      	str	r3, [sp, #4]
 8013246:	d028      	beq.n	801329a <__d2b+0x86>
 8013248:	4668      	mov	r0, sp
 801324a:	9600      	str	r6, [sp, #0]
 801324c:	f7ff fd04 	bl	8012c58 <__lo0bits>
 8013250:	9900      	ldr	r1, [sp, #0]
 8013252:	b300      	cbz	r0, 8013296 <__d2b+0x82>
 8013254:	9a01      	ldr	r2, [sp, #4]
 8013256:	f1c0 0320 	rsb	r3, r0, #32
 801325a:	fa02 f303 	lsl.w	r3, r2, r3
 801325e:	40c2      	lsrs	r2, r0
 8013260:	430b      	orrs	r3, r1
 8013262:	9201      	str	r2, [sp, #4]
 8013264:	6163      	str	r3, [r4, #20]
 8013266:	9b01      	ldr	r3, [sp, #4]
 8013268:	2b00      	cmp	r3, #0
 801326a:	61a3      	str	r3, [r4, #24]
 801326c:	bf14      	ite	ne
 801326e:	2202      	movne	r2, #2
 8013270:	2201      	moveq	r2, #1
 8013272:	6122      	str	r2, [r4, #16]
 8013274:	b1d5      	cbz	r5, 80132ac <__d2b+0x98>
 8013276:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801327a:	4405      	add	r5, r0
 801327c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013280:	f8c9 5000 	str.w	r5, [r9]
 8013284:	f8c8 0000 	str.w	r0, [r8]
 8013288:	4620      	mov	r0, r4
 801328a:	b003      	add	sp, #12
 801328c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013294:	e7d5      	b.n	8013242 <__d2b+0x2e>
 8013296:	6161      	str	r1, [r4, #20]
 8013298:	e7e5      	b.n	8013266 <__d2b+0x52>
 801329a:	a801      	add	r0, sp, #4
 801329c:	f7ff fcdc 	bl	8012c58 <__lo0bits>
 80132a0:	9b01      	ldr	r3, [sp, #4]
 80132a2:	2201      	movs	r2, #1
 80132a4:	3020      	adds	r0, #32
 80132a6:	6163      	str	r3, [r4, #20]
 80132a8:	6122      	str	r2, [r4, #16]
 80132aa:	e7e3      	b.n	8013274 <__d2b+0x60>
 80132ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80132b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80132b4:	f8c9 0000 	str.w	r0, [r9]
 80132b8:	6918      	ldr	r0, [r3, #16]
 80132ba:	f7ff fcad 	bl	8012c18 <__hi0bits>
 80132be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80132c2:	e7df      	b.n	8013284 <__d2b+0x70>
 80132c4:	08069408 	.word	0x08069408
 80132c8:	080694f8 	.word	0x080694f8

080132cc <__ratio>:
 80132cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d0:	4688      	mov	r8, r1
 80132d2:	4681      	mov	r9, r0
 80132d4:	4669      	mov	r1, sp
 80132d6:	f7ff ff4d 	bl	8013174 <__b2d>
 80132da:	a901      	add	r1, sp, #4
 80132dc:	4640      	mov	r0, r8
 80132de:	ec55 4b10 	vmov	r4, r5, d0
 80132e2:	f7ff ff47 	bl	8013174 <__b2d>
 80132e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80132ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80132ee:	462f      	mov	r7, r5
 80132f0:	eba3 0c02 	sub.w	ip, r3, r2
 80132f4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80132f8:	ec51 0b10 	vmov	r0, r1, d0
 80132fc:	1a9b      	subs	r3, r3, r2
 80132fe:	468b      	mov	fp, r1
 8013300:	4620      	mov	r0, r4
 8013302:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013306:	2b00      	cmp	r3, #0
 8013308:	bfd5      	itete	le
 801330a:	460a      	movle	r2, r1
 801330c:	462a      	movgt	r2, r5
 801330e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013312:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013316:	bfd8      	it	le
 8013318:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801331c:	ee10 2a10 	vmov	r2, s0
 8013320:	4639      	mov	r1, r7
 8013322:	465b      	mov	r3, fp
 8013324:	f7ed fa96 	bl	8000854 <__aeabi_ddiv>
 8013328:	ec41 0b10 	vmov	d0, r0, r1
 801332c:	b003      	add	sp, #12
 801332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013332 <__copybits>:
 8013332:	3901      	subs	r1, #1
 8013334:	f102 0314 	add.w	r3, r2, #20
 8013338:	1149      	asrs	r1, r1, #5
 801333a:	b570      	push	{r4, r5, r6, lr}
 801333c:	3101      	adds	r1, #1
 801333e:	6914      	ldr	r4, [r2, #16]
 8013340:	1f05      	subs	r5, r0, #4
 8013342:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013346:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801334a:	42a3      	cmp	r3, r4
 801334c:	d30c      	bcc.n	8013368 <__copybits+0x36>
 801334e:	1aa3      	subs	r3, r4, r2
 8013350:	3211      	adds	r2, #17
 8013352:	3b11      	subs	r3, #17
 8013354:	f023 0303 	bic.w	r3, r3, #3
 8013358:	42a2      	cmp	r2, r4
 801335a:	bf88      	it	hi
 801335c:	2300      	movhi	r3, #0
 801335e:	4418      	add	r0, r3
 8013360:	2300      	movs	r3, #0
 8013362:	4288      	cmp	r0, r1
 8013364:	d305      	bcc.n	8013372 <__copybits+0x40>
 8013366:	bd70      	pop	{r4, r5, r6, pc}
 8013368:	f853 6b04 	ldr.w	r6, [r3], #4
 801336c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013370:	e7eb      	b.n	801334a <__copybits+0x18>
 8013372:	f840 3b04 	str.w	r3, [r0], #4
 8013376:	e7f4      	b.n	8013362 <__copybits+0x30>

08013378 <__any_on>:
 8013378:	f100 0214 	add.w	r2, r0, #20
 801337c:	114b      	asrs	r3, r1, #5
 801337e:	6900      	ldr	r0, [r0, #16]
 8013380:	4298      	cmp	r0, r3
 8013382:	b510      	push	{r4, lr}
 8013384:	db11      	blt.n	80133aa <__any_on+0x32>
 8013386:	dd0a      	ble.n	801339e <__any_on+0x26>
 8013388:	f011 011f 	ands.w	r1, r1, #31
 801338c:	d007      	beq.n	801339e <__any_on+0x26>
 801338e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013392:	fa24 f001 	lsr.w	r0, r4, r1
 8013396:	fa00 f101 	lsl.w	r1, r0, r1
 801339a:	428c      	cmp	r4, r1
 801339c:	d10b      	bne.n	80133b6 <__any_on+0x3e>
 801339e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80133a2:	4293      	cmp	r3, r2
 80133a4:	d803      	bhi.n	80133ae <__any_on+0x36>
 80133a6:	2000      	movs	r0, #0
 80133a8:	bd10      	pop	{r4, pc}
 80133aa:	4603      	mov	r3, r0
 80133ac:	e7f7      	b.n	801339e <__any_on+0x26>
 80133ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80133b2:	2900      	cmp	r1, #0
 80133b4:	d0f5      	beq.n	80133a2 <__any_on+0x2a>
 80133b6:	2001      	movs	r0, #1
 80133b8:	e7f6      	b.n	80133a8 <__any_on+0x30>

080133ba <_calloc_r>:
 80133ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80133bc:	fba1 2402 	umull	r2, r4, r1, r2
 80133c0:	b94c      	cbnz	r4, 80133d6 <_calloc_r+0x1c>
 80133c2:	4611      	mov	r1, r2
 80133c4:	9201      	str	r2, [sp, #4]
 80133c6:	f7fc fa31 	bl	800f82c <_malloc_r>
 80133ca:	9a01      	ldr	r2, [sp, #4]
 80133cc:	4605      	mov	r5, r0
 80133ce:	b930      	cbnz	r0, 80133de <_calloc_r+0x24>
 80133d0:	4628      	mov	r0, r5
 80133d2:	b003      	add	sp, #12
 80133d4:	bd30      	pop	{r4, r5, pc}
 80133d6:	220c      	movs	r2, #12
 80133d8:	2500      	movs	r5, #0
 80133da:	6002      	str	r2, [r0, #0]
 80133dc:	e7f8      	b.n	80133d0 <_calloc_r+0x16>
 80133de:	4621      	mov	r1, r4
 80133e0:	f7fc f9af 	bl	800f742 <memset>
 80133e4:	e7f4      	b.n	80133d0 <_calloc_r+0x16>

080133e6 <_realloc_r>:
 80133e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ea:	4680      	mov	r8, r0
 80133ec:	4614      	mov	r4, r2
 80133ee:	460e      	mov	r6, r1
 80133f0:	b921      	cbnz	r1, 80133fc <_realloc_r+0x16>
 80133f2:	4611      	mov	r1, r2
 80133f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133f8:	f7fc ba18 	b.w	800f82c <_malloc_r>
 80133fc:	b92a      	cbnz	r2, 801340a <_realloc_r+0x24>
 80133fe:	4625      	mov	r5, r4
 8013400:	f7fc f9a8 	bl	800f754 <_free_r>
 8013404:	4628      	mov	r0, r5
 8013406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801340a:	f000 fda3 	bl	8013f54 <_malloc_usable_size_r>
 801340e:	4284      	cmp	r4, r0
 8013410:	4607      	mov	r7, r0
 8013412:	d802      	bhi.n	801341a <_realloc_r+0x34>
 8013414:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013418:	d812      	bhi.n	8013440 <_realloc_r+0x5a>
 801341a:	4621      	mov	r1, r4
 801341c:	4640      	mov	r0, r8
 801341e:	f7fc fa05 	bl	800f82c <_malloc_r>
 8013422:	4605      	mov	r5, r0
 8013424:	2800      	cmp	r0, #0
 8013426:	d0ed      	beq.n	8013404 <_realloc_r+0x1e>
 8013428:	42bc      	cmp	r4, r7
 801342a:	4622      	mov	r2, r4
 801342c:	4631      	mov	r1, r6
 801342e:	bf28      	it	cs
 8013430:	463a      	movcs	r2, r7
 8013432:	f7fc f979 	bl	800f728 <memcpy>
 8013436:	4631      	mov	r1, r6
 8013438:	4640      	mov	r0, r8
 801343a:	f7fc f98b 	bl	800f754 <_free_r>
 801343e:	e7e1      	b.n	8013404 <_realloc_r+0x1e>
 8013440:	4635      	mov	r5, r6
 8013442:	e7df      	b.n	8013404 <_realloc_r+0x1e>

08013444 <__ssputs_r>:
 8013444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013448:	688e      	ldr	r6, [r1, #8]
 801344a:	4682      	mov	sl, r0
 801344c:	460c      	mov	r4, r1
 801344e:	4690      	mov	r8, r2
 8013450:	429e      	cmp	r6, r3
 8013452:	461f      	mov	r7, r3
 8013454:	d838      	bhi.n	80134c8 <__ssputs_r+0x84>
 8013456:	898a      	ldrh	r2, [r1, #12]
 8013458:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801345c:	d032      	beq.n	80134c4 <__ssputs_r+0x80>
 801345e:	6825      	ldr	r5, [r4, #0]
 8013460:	3301      	adds	r3, #1
 8013462:	6909      	ldr	r1, [r1, #16]
 8013464:	eba5 0901 	sub.w	r9, r5, r1
 8013468:	6965      	ldr	r5, [r4, #20]
 801346a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801346e:	444b      	add	r3, r9
 8013470:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013474:	106d      	asrs	r5, r5, #1
 8013476:	429d      	cmp	r5, r3
 8013478:	bf38      	it	cc
 801347a:	461d      	movcc	r5, r3
 801347c:	0553      	lsls	r3, r2, #21
 801347e:	d531      	bpl.n	80134e4 <__ssputs_r+0xa0>
 8013480:	4629      	mov	r1, r5
 8013482:	f7fc f9d3 	bl	800f82c <_malloc_r>
 8013486:	4606      	mov	r6, r0
 8013488:	b950      	cbnz	r0, 80134a0 <__ssputs_r+0x5c>
 801348a:	230c      	movs	r3, #12
 801348c:	f04f 30ff 	mov.w	r0, #4294967295
 8013490:	f8ca 3000 	str.w	r3, [sl]
 8013494:	89a3      	ldrh	r3, [r4, #12]
 8013496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801349a:	81a3      	strh	r3, [r4, #12]
 801349c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134a0:	464a      	mov	r2, r9
 80134a2:	6921      	ldr	r1, [r4, #16]
 80134a4:	f7fc f940 	bl	800f728 <memcpy>
 80134a8:	89a3      	ldrh	r3, [r4, #12]
 80134aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80134ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134b2:	81a3      	strh	r3, [r4, #12]
 80134b4:	6126      	str	r6, [r4, #16]
 80134b6:	444e      	add	r6, r9
 80134b8:	6165      	str	r5, [r4, #20]
 80134ba:	eba5 0509 	sub.w	r5, r5, r9
 80134be:	6026      	str	r6, [r4, #0]
 80134c0:	463e      	mov	r6, r7
 80134c2:	60a5      	str	r5, [r4, #8]
 80134c4:	42be      	cmp	r6, r7
 80134c6:	d900      	bls.n	80134ca <__ssputs_r+0x86>
 80134c8:	463e      	mov	r6, r7
 80134ca:	4632      	mov	r2, r6
 80134cc:	4641      	mov	r1, r8
 80134ce:	6820      	ldr	r0, [r4, #0]
 80134d0:	f000 fd26 	bl	8013f20 <memmove>
 80134d4:	68a3      	ldr	r3, [r4, #8]
 80134d6:	2000      	movs	r0, #0
 80134d8:	1b9b      	subs	r3, r3, r6
 80134da:	60a3      	str	r3, [r4, #8]
 80134dc:	6823      	ldr	r3, [r4, #0]
 80134de:	4433      	add	r3, r6
 80134e0:	6023      	str	r3, [r4, #0]
 80134e2:	e7db      	b.n	801349c <__ssputs_r+0x58>
 80134e4:	462a      	mov	r2, r5
 80134e6:	f7ff ff7e 	bl	80133e6 <_realloc_r>
 80134ea:	4606      	mov	r6, r0
 80134ec:	2800      	cmp	r0, #0
 80134ee:	d1e1      	bne.n	80134b4 <__ssputs_r+0x70>
 80134f0:	6921      	ldr	r1, [r4, #16]
 80134f2:	4650      	mov	r0, sl
 80134f4:	f7fc f92e 	bl	800f754 <_free_r>
 80134f8:	e7c7      	b.n	801348a <__ssputs_r+0x46>
	...

080134fc <_svfiprintf_r>:
 80134fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013500:	4698      	mov	r8, r3
 8013502:	898b      	ldrh	r3, [r1, #12]
 8013504:	b09d      	sub	sp, #116	; 0x74
 8013506:	4607      	mov	r7, r0
 8013508:	061b      	lsls	r3, r3, #24
 801350a:	460d      	mov	r5, r1
 801350c:	4614      	mov	r4, r2
 801350e:	d50e      	bpl.n	801352e <_svfiprintf_r+0x32>
 8013510:	690b      	ldr	r3, [r1, #16]
 8013512:	b963      	cbnz	r3, 801352e <_svfiprintf_r+0x32>
 8013514:	2140      	movs	r1, #64	; 0x40
 8013516:	f7fc f989 	bl	800f82c <_malloc_r>
 801351a:	6028      	str	r0, [r5, #0]
 801351c:	6128      	str	r0, [r5, #16]
 801351e:	b920      	cbnz	r0, 801352a <_svfiprintf_r+0x2e>
 8013520:	230c      	movs	r3, #12
 8013522:	603b      	str	r3, [r7, #0]
 8013524:	f04f 30ff 	mov.w	r0, #4294967295
 8013528:	e0d1      	b.n	80136ce <_svfiprintf_r+0x1d2>
 801352a:	2340      	movs	r3, #64	; 0x40
 801352c:	616b      	str	r3, [r5, #20]
 801352e:	2300      	movs	r3, #0
 8013530:	f8cd 800c 	str.w	r8, [sp, #12]
 8013534:	f04f 0901 	mov.w	r9, #1
 8013538:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80136e8 <_svfiprintf_r+0x1ec>
 801353c:	9309      	str	r3, [sp, #36]	; 0x24
 801353e:	2320      	movs	r3, #32
 8013540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013544:	2330      	movs	r3, #48	; 0x30
 8013546:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801354a:	4623      	mov	r3, r4
 801354c:	469a      	mov	sl, r3
 801354e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013552:	b10a      	cbz	r2, 8013558 <_svfiprintf_r+0x5c>
 8013554:	2a25      	cmp	r2, #37	; 0x25
 8013556:	d1f9      	bne.n	801354c <_svfiprintf_r+0x50>
 8013558:	ebba 0b04 	subs.w	fp, sl, r4
 801355c:	d00b      	beq.n	8013576 <_svfiprintf_r+0x7a>
 801355e:	465b      	mov	r3, fp
 8013560:	4622      	mov	r2, r4
 8013562:	4629      	mov	r1, r5
 8013564:	4638      	mov	r0, r7
 8013566:	f7ff ff6d 	bl	8013444 <__ssputs_r>
 801356a:	3001      	adds	r0, #1
 801356c:	f000 80aa 	beq.w	80136c4 <_svfiprintf_r+0x1c8>
 8013570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013572:	445a      	add	r2, fp
 8013574:	9209      	str	r2, [sp, #36]	; 0x24
 8013576:	f89a 3000 	ldrb.w	r3, [sl]
 801357a:	2b00      	cmp	r3, #0
 801357c:	f000 80a2 	beq.w	80136c4 <_svfiprintf_r+0x1c8>
 8013580:	2300      	movs	r3, #0
 8013582:	f04f 32ff 	mov.w	r2, #4294967295
 8013586:	f10a 0a01 	add.w	sl, sl, #1
 801358a:	9304      	str	r3, [sp, #16]
 801358c:	9307      	str	r3, [sp, #28]
 801358e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013592:	931a      	str	r3, [sp, #104]	; 0x68
 8013594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013598:	4654      	mov	r4, sl
 801359a:	2205      	movs	r2, #5
 801359c:	4852      	ldr	r0, [pc, #328]	; (80136e8 <_svfiprintf_r+0x1ec>)
 801359e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135a2:	f7ff fa2a 	bl	80129fa <memchr>
 80135a6:	9a04      	ldr	r2, [sp, #16]
 80135a8:	b9d8      	cbnz	r0, 80135e2 <_svfiprintf_r+0xe6>
 80135aa:	06d0      	lsls	r0, r2, #27
 80135ac:	bf44      	itt	mi
 80135ae:	2320      	movmi	r3, #32
 80135b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135b4:	0711      	lsls	r1, r2, #28
 80135b6:	bf44      	itt	mi
 80135b8:	232b      	movmi	r3, #43	; 0x2b
 80135ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135be:	f89a 3000 	ldrb.w	r3, [sl]
 80135c2:	2b2a      	cmp	r3, #42	; 0x2a
 80135c4:	d015      	beq.n	80135f2 <_svfiprintf_r+0xf6>
 80135c6:	9a07      	ldr	r2, [sp, #28]
 80135c8:	4654      	mov	r4, sl
 80135ca:	2000      	movs	r0, #0
 80135cc:	f04f 0c0a 	mov.w	ip, #10
 80135d0:	4621      	mov	r1, r4
 80135d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135d6:	3b30      	subs	r3, #48	; 0x30
 80135d8:	2b09      	cmp	r3, #9
 80135da:	d94e      	bls.n	801367a <_svfiprintf_r+0x17e>
 80135dc:	b1b0      	cbz	r0, 801360c <_svfiprintf_r+0x110>
 80135de:	9207      	str	r2, [sp, #28]
 80135e0:	e014      	b.n	801360c <_svfiprintf_r+0x110>
 80135e2:	eba0 0308 	sub.w	r3, r0, r8
 80135e6:	46a2      	mov	sl, r4
 80135e8:	fa09 f303 	lsl.w	r3, r9, r3
 80135ec:	4313      	orrs	r3, r2
 80135ee:	9304      	str	r3, [sp, #16]
 80135f0:	e7d2      	b.n	8013598 <_svfiprintf_r+0x9c>
 80135f2:	9b03      	ldr	r3, [sp, #12]
 80135f4:	1d19      	adds	r1, r3, #4
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	9103      	str	r1, [sp, #12]
 80135fc:	bfbb      	ittet	lt
 80135fe:	425b      	neglt	r3, r3
 8013600:	f042 0202 	orrlt.w	r2, r2, #2
 8013604:	9307      	strge	r3, [sp, #28]
 8013606:	9307      	strlt	r3, [sp, #28]
 8013608:	bfb8      	it	lt
 801360a:	9204      	strlt	r2, [sp, #16]
 801360c:	7823      	ldrb	r3, [r4, #0]
 801360e:	2b2e      	cmp	r3, #46	; 0x2e
 8013610:	d10c      	bne.n	801362c <_svfiprintf_r+0x130>
 8013612:	7863      	ldrb	r3, [r4, #1]
 8013614:	2b2a      	cmp	r3, #42	; 0x2a
 8013616:	d135      	bne.n	8013684 <_svfiprintf_r+0x188>
 8013618:	9b03      	ldr	r3, [sp, #12]
 801361a:	3402      	adds	r4, #2
 801361c:	1d1a      	adds	r2, r3, #4
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	2b00      	cmp	r3, #0
 8013622:	9203      	str	r2, [sp, #12]
 8013624:	bfb8      	it	lt
 8013626:	f04f 33ff 	movlt.w	r3, #4294967295
 801362a:	9305      	str	r3, [sp, #20]
 801362c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80136f8 <_svfiprintf_r+0x1fc>
 8013630:	2203      	movs	r2, #3
 8013632:	7821      	ldrb	r1, [r4, #0]
 8013634:	4650      	mov	r0, sl
 8013636:	f7ff f9e0 	bl	80129fa <memchr>
 801363a:	b140      	cbz	r0, 801364e <_svfiprintf_r+0x152>
 801363c:	2340      	movs	r3, #64	; 0x40
 801363e:	eba0 000a 	sub.w	r0, r0, sl
 8013642:	3401      	adds	r4, #1
 8013644:	fa03 f000 	lsl.w	r0, r3, r0
 8013648:	9b04      	ldr	r3, [sp, #16]
 801364a:	4303      	orrs	r3, r0
 801364c:	9304      	str	r3, [sp, #16]
 801364e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013652:	2206      	movs	r2, #6
 8013654:	4825      	ldr	r0, [pc, #148]	; (80136ec <_svfiprintf_r+0x1f0>)
 8013656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801365a:	f7ff f9ce 	bl	80129fa <memchr>
 801365e:	2800      	cmp	r0, #0
 8013660:	d038      	beq.n	80136d4 <_svfiprintf_r+0x1d8>
 8013662:	4b23      	ldr	r3, [pc, #140]	; (80136f0 <_svfiprintf_r+0x1f4>)
 8013664:	bb1b      	cbnz	r3, 80136ae <_svfiprintf_r+0x1b2>
 8013666:	9b03      	ldr	r3, [sp, #12]
 8013668:	3307      	adds	r3, #7
 801366a:	f023 0307 	bic.w	r3, r3, #7
 801366e:	3308      	adds	r3, #8
 8013670:	9303      	str	r3, [sp, #12]
 8013672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013674:	4433      	add	r3, r6
 8013676:	9309      	str	r3, [sp, #36]	; 0x24
 8013678:	e767      	b.n	801354a <_svfiprintf_r+0x4e>
 801367a:	fb0c 3202 	mla	r2, ip, r2, r3
 801367e:	460c      	mov	r4, r1
 8013680:	2001      	movs	r0, #1
 8013682:	e7a5      	b.n	80135d0 <_svfiprintf_r+0xd4>
 8013684:	2300      	movs	r3, #0
 8013686:	3401      	adds	r4, #1
 8013688:	f04f 0c0a 	mov.w	ip, #10
 801368c:	4619      	mov	r1, r3
 801368e:	9305      	str	r3, [sp, #20]
 8013690:	4620      	mov	r0, r4
 8013692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013696:	3a30      	subs	r2, #48	; 0x30
 8013698:	2a09      	cmp	r2, #9
 801369a:	d903      	bls.n	80136a4 <_svfiprintf_r+0x1a8>
 801369c:	2b00      	cmp	r3, #0
 801369e:	d0c5      	beq.n	801362c <_svfiprintf_r+0x130>
 80136a0:	9105      	str	r1, [sp, #20]
 80136a2:	e7c3      	b.n	801362c <_svfiprintf_r+0x130>
 80136a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80136a8:	4604      	mov	r4, r0
 80136aa:	2301      	movs	r3, #1
 80136ac:	e7f0      	b.n	8013690 <_svfiprintf_r+0x194>
 80136ae:	ab03      	add	r3, sp, #12
 80136b0:	462a      	mov	r2, r5
 80136b2:	a904      	add	r1, sp, #16
 80136b4:	4638      	mov	r0, r7
 80136b6:	9300      	str	r3, [sp, #0]
 80136b8:	4b0e      	ldr	r3, [pc, #56]	; (80136f4 <_svfiprintf_r+0x1f8>)
 80136ba:	f7fc f9cb 	bl	800fa54 <_printf_float>
 80136be:	1c42      	adds	r2, r0, #1
 80136c0:	4606      	mov	r6, r0
 80136c2:	d1d6      	bne.n	8013672 <_svfiprintf_r+0x176>
 80136c4:	89ab      	ldrh	r3, [r5, #12]
 80136c6:	065b      	lsls	r3, r3, #25
 80136c8:	f53f af2c 	bmi.w	8013524 <_svfiprintf_r+0x28>
 80136cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80136ce:	b01d      	add	sp, #116	; 0x74
 80136d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136d4:	ab03      	add	r3, sp, #12
 80136d6:	462a      	mov	r2, r5
 80136d8:	a904      	add	r1, sp, #16
 80136da:	4638      	mov	r0, r7
 80136dc:	9300      	str	r3, [sp, #0]
 80136de:	4b05      	ldr	r3, [pc, #20]	; (80136f4 <_svfiprintf_r+0x1f8>)
 80136e0:	f7fc fc5e 	bl	800ffa0 <_printf_i>
 80136e4:	e7eb      	b.n	80136be <_svfiprintf_r+0x1c2>
 80136e6:	bf00      	nop
 80136e8:	08069654 	.word	0x08069654
 80136ec:	0806965e 	.word	0x0806965e
 80136f0:	0800fa55 	.word	0x0800fa55
 80136f4:	08013445 	.word	0x08013445
 80136f8:	0806965a 	.word	0x0806965a

080136fc <__sfputc_r>:
 80136fc:	6893      	ldr	r3, [r2, #8]
 80136fe:	3b01      	subs	r3, #1
 8013700:	2b00      	cmp	r3, #0
 8013702:	6093      	str	r3, [r2, #8]
 8013704:	b410      	push	{r4}
 8013706:	da08      	bge.n	801371a <__sfputc_r+0x1e>
 8013708:	6994      	ldr	r4, [r2, #24]
 801370a:	42a3      	cmp	r3, r4
 801370c:	db01      	blt.n	8013712 <__sfputc_r+0x16>
 801370e:	290a      	cmp	r1, #10
 8013710:	d103      	bne.n	801371a <__sfputc_r+0x1e>
 8013712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013716:	f000 b9ab 	b.w	8013a70 <__swbuf_r>
 801371a:	6813      	ldr	r3, [r2, #0]
 801371c:	1c58      	adds	r0, r3, #1
 801371e:	6010      	str	r0, [r2, #0]
 8013720:	4608      	mov	r0, r1
 8013722:	7019      	strb	r1, [r3, #0]
 8013724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013728:	4770      	bx	lr

0801372a <__sfputs_r>:
 801372a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801372c:	4606      	mov	r6, r0
 801372e:	460f      	mov	r7, r1
 8013730:	4614      	mov	r4, r2
 8013732:	18d5      	adds	r5, r2, r3
 8013734:	42ac      	cmp	r4, r5
 8013736:	d101      	bne.n	801373c <__sfputs_r+0x12>
 8013738:	2000      	movs	r0, #0
 801373a:	e007      	b.n	801374c <__sfputs_r+0x22>
 801373c:	463a      	mov	r2, r7
 801373e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013742:	4630      	mov	r0, r6
 8013744:	f7ff ffda 	bl	80136fc <__sfputc_r>
 8013748:	1c43      	adds	r3, r0, #1
 801374a:	d1f3      	bne.n	8013734 <__sfputs_r+0xa>
 801374c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013750 <_vfiprintf_r>:
 8013750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013754:	460d      	mov	r5, r1
 8013756:	b09d      	sub	sp, #116	; 0x74
 8013758:	4614      	mov	r4, r2
 801375a:	4698      	mov	r8, r3
 801375c:	4606      	mov	r6, r0
 801375e:	b118      	cbz	r0, 8013768 <_vfiprintf_r+0x18>
 8013760:	6983      	ldr	r3, [r0, #24]
 8013762:	b90b      	cbnz	r3, 8013768 <_vfiprintf_r+0x18>
 8013764:	f7fe fd24 	bl	80121b0 <__sinit>
 8013768:	4b89      	ldr	r3, [pc, #548]	; (8013990 <_vfiprintf_r+0x240>)
 801376a:	429d      	cmp	r5, r3
 801376c:	d11b      	bne.n	80137a6 <_vfiprintf_r+0x56>
 801376e:	6875      	ldr	r5, [r6, #4]
 8013770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013772:	07d9      	lsls	r1, r3, #31
 8013774:	d405      	bmi.n	8013782 <_vfiprintf_r+0x32>
 8013776:	89ab      	ldrh	r3, [r5, #12]
 8013778:	059a      	lsls	r2, r3, #22
 801377a:	d402      	bmi.n	8013782 <_vfiprintf_r+0x32>
 801377c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801377e:	f7ff f928 	bl	80129d2 <__retarget_lock_acquire_recursive>
 8013782:	89ab      	ldrh	r3, [r5, #12]
 8013784:	071b      	lsls	r3, r3, #28
 8013786:	d501      	bpl.n	801378c <_vfiprintf_r+0x3c>
 8013788:	692b      	ldr	r3, [r5, #16]
 801378a:	b9eb      	cbnz	r3, 80137c8 <_vfiprintf_r+0x78>
 801378c:	4629      	mov	r1, r5
 801378e:	4630      	mov	r0, r6
 8013790:	f000 f9e0 	bl	8013b54 <__swsetup_r>
 8013794:	b1c0      	cbz	r0, 80137c8 <_vfiprintf_r+0x78>
 8013796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013798:	07dc      	lsls	r4, r3, #31
 801379a:	d50e      	bpl.n	80137ba <_vfiprintf_r+0x6a>
 801379c:	f04f 30ff 	mov.w	r0, #4294967295
 80137a0:	b01d      	add	sp, #116	; 0x74
 80137a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a6:	4b7b      	ldr	r3, [pc, #492]	; (8013994 <_vfiprintf_r+0x244>)
 80137a8:	429d      	cmp	r5, r3
 80137aa:	d101      	bne.n	80137b0 <_vfiprintf_r+0x60>
 80137ac:	68b5      	ldr	r5, [r6, #8]
 80137ae:	e7df      	b.n	8013770 <_vfiprintf_r+0x20>
 80137b0:	4b79      	ldr	r3, [pc, #484]	; (8013998 <_vfiprintf_r+0x248>)
 80137b2:	429d      	cmp	r5, r3
 80137b4:	bf08      	it	eq
 80137b6:	68f5      	ldreq	r5, [r6, #12]
 80137b8:	e7da      	b.n	8013770 <_vfiprintf_r+0x20>
 80137ba:	89ab      	ldrh	r3, [r5, #12]
 80137bc:	0598      	lsls	r0, r3, #22
 80137be:	d4ed      	bmi.n	801379c <_vfiprintf_r+0x4c>
 80137c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137c2:	f7ff f907 	bl	80129d4 <__retarget_lock_release_recursive>
 80137c6:	e7e9      	b.n	801379c <_vfiprintf_r+0x4c>
 80137c8:	2300      	movs	r3, #0
 80137ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80137ce:	f04f 0901 	mov.w	r9, #1
 80137d2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801399c <_vfiprintf_r+0x24c>
 80137d6:	9309      	str	r3, [sp, #36]	; 0x24
 80137d8:	2320      	movs	r3, #32
 80137da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80137de:	2330      	movs	r3, #48	; 0x30
 80137e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80137e4:	4623      	mov	r3, r4
 80137e6:	469a      	mov	sl, r3
 80137e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137ec:	b10a      	cbz	r2, 80137f2 <_vfiprintf_r+0xa2>
 80137ee:	2a25      	cmp	r2, #37	; 0x25
 80137f0:	d1f9      	bne.n	80137e6 <_vfiprintf_r+0x96>
 80137f2:	ebba 0b04 	subs.w	fp, sl, r4
 80137f6:	d00b      	beq.n	8013810 <_vfiprintf_r+0xc0>
 80137f8:	465b      	mov	r3, fp
 80137fa:	4622      	mov	r2, r4
 80137fc:	4629      	mov	r1, r5
 80137fe:	4630      	mov	r0, r6
 8013800:	f7ff ff93 	bl	801372a <__sfputs_r>
 8013804:	3001      	adds	r0, #1
 8013806:	f000 80aa 	beq.w	801395e <_vfiprintf_r+0x20e>
 801380a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801380c:	445a      	add	r2, fp
 801380e:	9209      	str	r2, [sp, #36]	; 0x24
 8013810:	f89a 3000 	ldrb.w	r3, [sl]
 8013814:	2b00      	cmp	r3, #0
 8013816:	f000 80a2 	beq.w	801395e <_vfiprintf_r+0x20e>
 801381a:	2300      	movs	r3, #0
 801381c:	f04f 32ff 	mov.w	r2, #4294967295
 8013820:	f10a 0a01 	add.w	sl, sl, #1
 8013824:	9304      	str	r3, [sp, #16]
 8013826:	9307      	str	r3, [sp, #28]
 8013828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801382c:	931a      	str	r3, [sp, #104]	; 0x68
 801382e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013832:	4654      	mov	r4, sl
 8013834:	2205      	movs	r2, #5
 8013836:	4859      	ldr	r0, [pc, #356]	; (801399c <_vfiprintf_r+0x24c>)
 8013838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801383c:	f7ff f8dd 	bl	80129fa <memchr>
 8013840:	9a04      	ldr	r2, [sp, #16]
 8013842:	b9d8      	cbnz	r0, 801387c <_vfiprintf_r+0x12c>
 8013844:	06d1      	lsls	r1, r2, #27
 8013846:	bf44      	itt	mi
 8013848:	2320      	movmi	r3, #32
 801384a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801384e:	0713      	lsls	r3, r2, #28
 8013850:	bf44      	itt	mi
 8013852:	232b      	movmi	r3, #43	; 0x2b
 8013854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013858:	f89a 3000 	ldrb.w	r3, [sl]
 801385c:	2b2a      	cmp	r3, #42	; 0x2a
 801385e:	d015      	beq.n	801388c <_vfiprintf_r+0x13c>
 8013860:	9a07      	ldr	r2, [sp, #28]
 8013862:	4654      	mov	r4, sl
 8013864:	2000      	movs	r0, #0
 8013866:	f04f 0c0a 	mov.w	ip, #10
 801386a:	4621      	mov	r1, r4
 801386c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013870:	3b30      	subs	r3, #48	; 0x30
 8013872:	2b09      	cmp	r3, #9
 8013874:	d94e      	bls.n	8013914 <_vfiprintf_r+0x1c4>
 8013876:	b1b0      	cbz	r0, 80138a6 <_vfiprintf_r+0x156>
 8013878:	9207      	str	r2, [sp, #28]
 801387a:	e014      	b.n	80138a6 <_vfiprintf_r+0x156>
 801387c:	eba0 0308 	sub.w	r3, r0, r8
 8013880:	46a2      	mov	sl, r4
 8013882:	fa09 f303 	lsl.w	r3, r9, r3
 8013886:	4313      	orrs	r3, r2
 8013888:	9304      	str	r3, [sp, #16]
 801388a:	e7d2      	b.n	8013832 <_vfiprintf_r+0xe2>
 801388c:	9b03      	ldr	r3, [sp, #12]
 801388e:	1d19      	adds	r1, r3, #4
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	9103      	str	r1, [sp, #12]
 8013896:	bfbb      	ittet	lt
 8013898:	425b      	neglt	r3, r3
 801389a:	f042 0202 	orrlt.w	r2, r2, #2
 801389e:	9307      	strge	r3, [sp, #28]
 80138a0:	9307      	strlt	r3, [sp, #28]
 80138a2:	bfb8      	it	lt
 80138a4:	9204      	strlt	r2, [sp, #16]
 80138a6:	7823      	ldrb	r3, [r4, #0]
 80138a8:	2b2e      	cmp	r3, #46	; 0x2e
 80138aa:	d10c      	bne.n	80138c6 <_vfiprintf_r+0x176>
 80138ac:	7863      	ldrb	r3, [r4, #1]
 80138ae:	2b2a      	cmp	r3, #42	; 0x2a
 80138b0:	d135      	bne.n	801391e <_vfiprintf_r+0x1ce>
 80138b2:	9b03      	ldr	r3, [sp, #12]
 80138b4:	3402      	adds	r4, #2
 80138b6:	1d1a      	adds	r2, r3, #4
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	9203      	str	r2, [sp, #12]
 80138be:	bfb8      	it	lt
 80138c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80138c4:	9305      	str	r3, [sp, #20]
 80138c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80139ac <_vfiprintf_r+0x25c>
 80138ca:	2203      	movs	r2, #3
 80138cc:	7821      	ldrb	r1, [r4, #0]
 80138ce:	4650      	mov	r0, sl
 80138d0:	f7ff f893 	bl	80129fa <memchr>
 80138d4:	b140      	cbz	r0, 80138e8 <_vfiprintf_r+0x198>
 80138d6:	2340      	movs	r3, #64	; 0x40
 80138d8:	eba0 000a 	sub.w	r0, r0, sl
 80138dc:	3401      	adds	r4, #1
 80138de:	fa03 f000 	lsl.w	r0, r3, r0
 80138e2:	9b04      	ldr	r3, [sp, #16]
 80138e4:	4303      	orrs	r3, r0
 80138e6:	9304      	str	r3, [sp, #16]
 80138e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138ec:	2206      	movs	r2, #6
 80138ee:	482c      	ldr	r0, [pc, #176]	; (80139a0 <_vfiprintf_r+0x250>)
 80138f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138f4:	f7ff f881 	bl	80129fa <memchr>
 80138f8:	2800      	cmp	r0, #0
 80138fa:	d03f      	beq.n	801397c <_vfiprintf_r+0x22c>
 80138fc:	4b29      	ldr	r3, [pc, #164]	; (80139a4 <_vfiprintf_r+0x254>)
 80138fe:	bb1b      	cbnz	r3, 8013948 <_vfiprintf_r+0x1f8>
 8013900:	9b03      	ldr	r3, [sp, #12]
 8013902:	3307      	adds	r3, #7
 8013904:	f023 0307 	bic.w	r3, r3, #7
 8013908:	3308      	adds	r3, #8
 801390a:	9303      	str	r3, [sp, #12]
 801390c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801390e:	443b      	add	r3, r7
 8013910:	9309      	str	r3, [sp, #36]	; 0x24
 8013912:	e767      	b.n	80137e4 <_vfiprintf_r+0x94>
 8013914:	fb0c 3202 	mla	r2, ip, r2, r3
 8013918:	460c      	mov	r4, r1
 801391a:	2001      	movs	r0, #1
 801391c:	e7a5      	b.n	801386a <_vfiprintf_r+0x11a>
 801391e:	2300      	movs	r3, #0
 8013920:	3401      	adds	r4, #1
 8013922:	f04f 0c0a 	mov.w	ip, #10
 8013926:	4619      	mov	r1, r3
 8013928:	9305      	str	r3, [sp, #20]
 801392a:	4620      	mov	r0, r4
 801392c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013930:	3a30      	subs	r2, #48	; 0x30
 8013932:	2a09      	cmp	r2, #9
 8013934:	d903      	bls.n	801393e <_vfiprintf_r+0x1ee>
 8013936:	2b00      	cmp	r3, #0
 8013938:	d0c5      	beq.n	80138c6 <_vfiprintf_r+0x176>
 801393a:	9105      	str	r1, [sp, #20]
 801393c:	e7c3      	b.n	80138c6 <_vfiprintf_r+0x176>
 801393e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013942:	4604      	mov	r4, r0
 8013944:	2301      	movs	r3, #1
 8013946:	e7f0      	b.n	801392a <_vfiprintf_r+0x1da>
 8013948:	ab03      	add	r3, sp, #12
 801394a:	462a      	mov	r2, r5
 801394c:	a904      	add	r1, sp, #16
 801394e:	4630      	mov	r0, r6
 8013950:	9300      	str	r3, [sp, #0]
 8013952:	4b15      	ldr	r3, [pc, #84]	; (80139a8 <_vfiprintf_r+0x258>)
 8013954:	f7fc f87e 	bl	800fa54 <_printf_float>
 8013958:	4607      	mov	r7, r0
 801395a:	1c78      	adds	r0, r7, #1
 801395c:	d1d6      	bne.n	801390c <_vfiprintf_r+0x1bc>
 801395e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013960:	07d9      	lsls	r1, r3, #31
 8013962:	d405      	bmi.n	8013970 <_vfiprintf_r+0x220>
 8013964:	89ab      	ldrh	r3, [r5, #12]
 8013966:	059a      	lsls	r2, r3, #22
 8013968:	d402      	bmi.n	8013970 <_vfiprintf_r+0x220>
 801396a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801396c:	f7ff f832 	bl	80129d4 <__retarget_lock_release_recursive>
 8013970:	89ab      	ldrh	r3, [r5, #12]
 8013972:	065b      	lsls	r3, r3, #25
 8013974:	f53f af12 	bmi.w	801379c <_vfiprintf_r+0x4c>
 8013978:	9809      	ldr	r0, [sp, #36]	; 0x24
 801397a:	e711      	b.n	80137a0 <_vfiprintf_r+0x50>
 801397c:	ab03      	add	r3, sp, #12
 801397e:	462a      	mov	r2, r5
 8013980:	a904      	add	r1, sp, #16
 8013982:	4630      	mov	r0, r6
 8013984:	9300      	str	r3, [sp, #0]
 8013986:	4b08      	ldr	r3, [pc, #32]	; (80139a8 <_vfiprintf_r+0x258>)
 8013988:	f7fc fb0a 	bl	800ffa0 <_printf_i>
 801398c:	e7e4      	b.n	8013958 <_vfiprintf_r+0x208>
 801398e:	bf00      	nop
 8013990:	0806943c 	.word	0x0806943c
 8013994:	0806945c 	.word	0x0806945c
 8013998:	0806941c 	.word	0x0806941c
 801399c:	08069654 	.word	0x08069654
 80139a0:	0806965e 	.word	0x0806965e
 80139a4:	0800fa55 	.word	0x0800fa55
 80139a8:	0801372b 	.word	0x0801372b
 80139ac:	0806965a 	.word	0x0806965a

080139b0 <nan>:
 80139b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80139b8 <nan+0x8>
 80139b4:	4770      	bx	lr
 80139b6:	bf00      	nop
 80139b8:	00000000 	.word	0x00000000
 80139bc:	7ff80000 	.word	0x7ff80000

080139c0 <__sread>:
 80139c0:	b510      	push	{r4, lr}
 80139c2:	460c      	mov	r4, r1
 80139c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139c8:	f000 facc 	bl	8013f64 <_read_r>
 80139cc:	2800      	cmp	r0, #0
 80139ce:	bfab      	itete	ge
 80139d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80139d2:	89a3      	ldrhlt	r3, [r4, #12]
 80139d4:	181b      	addge	r3, r3, r0
 80139d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80139da:	bfac      	ite	ge
 80139dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80139de:	81a3      	strhlt	r3, [r4, #12]
 80139e0:	bd10      	pop	{r4, pc}

080139e2 <__swrite>:
 80139e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139e6:	461f      	mov	r7, r3
 80139e8:	898b      	ldrh	r3, [r1, #12]
 80139ea:	4605      	mov	r5, r0
 80139ec:	460c      	mov	r4, r1
 80139ee:	05db      	lsls	r3, r3, #23
 80139f0:	4616      	mov	r6, r2
 80139f2:	d505      	bpl.n	8013a00 <__swrite+0x1e>
 80139f4:	2302      	movs	r3, #2
 80139f6:	2200      	movs	r2, #0
 80139f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139fc:	f000 fa18 	bl	8013e30 <_lseek_r>
 8013a00:	89a3      	ldrh	r3, [r4, #12]
 8013a02:	4632      	mov	r2, r6
 8013a04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a08:	4628      	mov	r0, r5
 8013a0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a0e:	81a3      	strh	r3, [r4, #12]
 8013a10:	463b      	mov	r3, r7
 8013a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a16:	f000 b88b 	b.w	8013b30 <_write_r>

08013a1a <__sseek>:
 8013a1a:	b510      	push	{r4, lr}
 8013a1c:	460c      	mov	r4, r1
 8013a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a22:	f000 fa05 	bl	8013e30 <_lseek_r>
 8013a26:	1c43      	adds	r3, r0, #1
 8013a28:	89a3      	ldrh	r3, [r4, #12]
 8013a2a:	bf15      	itete	ne
 8013a2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8013a2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013a32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013a36:	81a3      	strheq	r3, [r4, #12]
 8013a38:	bf18      	it	ne
 8013a3a:	81a3      	strhne	r3, [r4, #12]
 8013a3c:	bd10      	pop	{r4, pc}

08013a3e <__sclose>:
 8013a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a42:	f000 b913 	b.w	8013c6c <_close_r>

08013a46 <strncmp>:
 8013a46:	b510      	push	{r4, lr}
 8013a48:	b17a      	cbz	r2, 8013a6a <strncmp+0x24>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	3901      	subs	r1, #1
 8013a4e:	1884      	adds	r4, r0, r2
 8013a50:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013a54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013a58:	4290      	cmp	r0, r2
 8013a5a:	d101      	bne.n	8013a60 <strncmp+0x1a>
 8013a5c:	42a3      	cmp	r3, r4
 8013a5e:	d101      	bne.n	8013a64 <strncmp+0x1e>
 8013a60:	1a80      	subs	r0, r0, r2
 8013a62:	bd10      	pop	{r4, pc}
 8013a64:	2800      	cmp	r0, #0
 8013a66:	d1f3      	bne.n	8013a50 <strncmp+0xa>
 8013a68:	e7fa      	b.n	8013a60 <strncmp+0x1a>
 8013a6a:	4610      	mov	r0, r2
 8013a6c:	e7f9      	b.n	8013a62 <strncmp+0x1c>
	...

08013a70 <__swbuf_r>:
 8013a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a72:	460e      	mov	r6, r1
 8013a74:	4614      	mov	r4, r2
 8013a76:	4605      	mov	r5, r0
 8013a78:	b118      	cbz	r0, 8013a82 <__swbuf_r+0x12>
 8013a7a:	6983      	ldr	r3, [r0, #24]
 8013a7c:	b90b      	cbnz	r3, 8013a82 <__swbuf_r+0x12>
 8013a7e:	f7fe fb97 	bl	80121b0 <__sinit>
 8013a82:	4b21      	ldr	r3, [pc, #132]	; (8013b08 <__swbuf_r+0x98>)
 8013a84:	429c      	cmp	r4, r3
 8013a86:	d12b      	bne.n	8013ae0 <__swbuf_r+0x70>
 8013a88:	686c      	ldr	r4, [r5, #4]
 8013a8a:	69a3      	ldr	r3, [r4, #24]
 8013a8c:	60a3      	str	r3, [r4, #8]
 8013a8e:	89a3      	ldrh	r3, [r4, #12]
 8013a90:	071a      	lsls	r2, r3, #28
 8013a92:	d52f      	bpl.n	8013af4 <__swbuf_r+0x84>
 8013a94:	6923      	ldr	r3, [r4, #16]
 8013a96:	b36b      	cbz	r3, 8013af4 <__swbuf_r+0x84>
 8013a98:	6923      	ldr	r3, [r4, #16]
 8013a9a:	b2f6      	uxtb	r6, r6
 8013a9c:	6820      	ldr	r0, [r4, #0]
 8013a9e:	4637      	mov	r7, r6
 8013aa0:	1ac0      	subs	r0, r0, r3
 8013aa2:	6963      	ldr	r3, [r4, #20]
 8013aa4:	4283      	cmp	r3, r0
 8013aa6:	dc04      	bgt.n	8013ab2 <__swbuf_r+0x42>
 8013aa8:	4621      	mov	r1, r4
 8013aaa:	4628      	mov	r0, r5
 8013aac:	f000 f972 	bl	8013d94 <_fflush_r>
 8013ab0:	bb30      	cbnz	r0, 8013b00 <__swbuf_r+0x90>
 8013ab2:	68a3      	ldr	r3, [r4, #8]
 8013ab4:	3001      	adds	r0, #1
 8013ab6:	3b01      	subs	r3, #1
 8013ab8:	60a3      	str	r3, [r4, #8]
 8013aba:	6823      	ldr	r3, [r4, #0]
 8013abc:	1c5a      	adds	r2, r3, #1
 8013abe:	6022      	str	r2, [r4, #0]
 8013ac0:	701e      	strb	r6, [r3, #0]
 8013ac2:	6963      	ldr	r3, [r4, #20]
 8013ac4:	4283      	cmp	r3, r0
 8013ac6:	d004      	beq.n	8013ad2 <__swbuf_r+0x62>
 8013ac8:	89a3      	ldrh	r3, [r4, #12]
 8013aca:	07db      	lsls	r3, r3, #31
 8013acc:	d506      	bpl.n	8013adc <__swbuf_r+0x6c>
 8013ace:	2e0a      	cmp	r6, #10
 8013ad0:	d104      	bne.n	8013adc <__swbuf_r+0x6c>
 8013ad2:	4621      	mov	r1, r4
 8013ad4:	4628      	mov	r0, r5
 8013ad6:	f000 f95d 	bl	8013d94 <_fflush_r>
 8013ada:	b988      	cbnz	r0, 8013b00 <__swbuf_r+0x90>
 8013adc:	4638      	mov	r0, r7
 8013ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ae0:	4b0a      	ldr	r3, [pc, #40]	; (8013b0c <__swbuf_r+0x9c>)
 8013ae2:	429c      	cmp	r4, r3
 8013ae4:	d101      	bne.n	8013aea <__swbuf_r+0x7a>
 8013ae6:	68ac      	ldr	r4, [r5, #8]
 8013ae8:	e7cf      	b.n	8013a8a <__swbuf_r+0x1a>
 8013aea:	4b09      	ldr	r3, [pc, #36]	; (8013b10 <__swbuf_r+0xa0>)
 8013aec:	429c      	cmp	r4, r3
 8013aee:	bf08      	it	eq
 8013af0:	68ec      	ldreq	r4, [r5, #12]
 8013af2:	e7ca      	b.n	8013a8a <__swbuf_r+0x1a>
 8013af4:	4621      	mov	r1, r4
 8013af6:	4628      	mov	r0, r5
 8013af8:	f000 f82c 	bl	8013b54 <__swsetup_r>
 8013afc:	2800      	cmp	r0, #0
 8013afe:	d0cb      	beq.n	8013a98 <__swbuf_r+0x28>
 8013b00:	f04f 37ff 	mov.w	r7, #4294967295
 8013b04:	e7ea      	b.n	8013adc <__swbuf_r+0x6c>
 8013b06:	bf00      	nop
 8013b08:	0806943c 	.word	0x0806943c
 8013b0c:	0806945c 	.word	0x0806945c
 8013b10:	0806941c 	.word	0x0806941c

08013b14 <__ascii_wctomb>:
 8013b14:	b149      	cbz	r1, 8013b2a <__ascii_wctomb+0x16>
 8013b16:	2aff      	cmp	r2, #255	; 0xff
 8013b18:	bf8d      	iteet	hi
 8013b1a:	238a      	movhi	r3, #138	; 0x8a
 8013b1c:	2001      	movls	r0, #1
 8013b1e:	700a      	strbls	r2, [r1, #0]
 8013b20:	6003      	strhi	r3, [r0, #0]
 8013b22:	bf88      	it	hi
 8013b24:	f04f 30ff 	movhi.w	r0, #4294967295
 8013b28:	4770      	bx	lr
 8013b2a:	4608      	mov	r0, r1
 8013b2c:	4770      	bx	lr
	...

08013b30 <_write_r>:
 8013b30:	b538      	push	{r3, r4, r5, lr}
 8013b32:	4604      	mov	r4, r0
 8013b34:	4d06      	ldr	r5, [pc, #24]	; (8013b50 <_write_r+0x20>)
 8013b36:	4608      	mov	r0, r1
 8013b38:	4611      	mov	r1, r2
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	602a      	str	r2, [r5, #0]
 8013b3e:	461a      	mov	r2, r3
 8013b40:	f7ee f801 	bl	8001b46 <_write>
 8013b44:	1c43      	adds	r3, r0, #1
 8013b46:	d102      	bne.n	8013b4e <_write_r+0x1e>
 8013b48:	682b      	ldr	r3, [r5, #0]
 8013b4a:	b103      	cbz	r3, 8013b4e <_write_r+0x1e>
 8013b4c:	6023      	str	r3, [r4, #0]
 8013b4e:	bd38      	pop	{r3, r4, r5, pc}
 8013b50:	20001ef4 	.word	0x20001ef4

08013b54 <__swsetup_r>:
 8013b54:	4b32      	ldr	r3, [pc, #200]	; (8013c20 <__swsetup_r+0xcc>)
 8013b56:	b570      	push	{r4, r5, r6, lr}
 8013b58:	681d      	ldr	r5, [r3, #0]
 8013b5a:	4606      	mov	r6, r0
 8013b5c:	460c      	mov	r4, r1
 8013b5e:	b125      	cbz	r5, 8013b6a <__swsetup_r+0x16>
 8013b60:	69ab      	ldr	r3, [r5, #24]
 8013b62:	b913      	cbnz	r3, 8013b6a <__swsetup_r+0x16>
 8013b64:	4628      	mov	r0, r5
 8013b66:	f7fe fb23 	bl	80121b0 <__sinit>
 8013b6a:	4b2e      	ldr	r3, [pc, #184]	; (8013c24 <__swsetup_r+0xd0>)
 8013b6c:	429c      	cmp	r4, r3
 8013b6e:	d10f      	bne.n	8013b90 <__swsetup_r+0x3c>
 8013b70:	686c      	ldr	r4, [r5, #4]
 8013b72:	89a3      	ldrh	r3, [r4, #12]
 8013b74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b78:	0719      	lsls	r1, r3, #28
 8013b7a:	d42c      	bmi.n	8013bd6 <__swsetup_r+0x82>
 8013b7c:	06dd      	lsls	r5, r3, #27
 8013b7e:	d411      	bmi.n	8013ba4 <__swsetup_r+0x50>
 8013b80:	2309      	movs	r3, #9
 8013b82:	6033      	str	r3, [r6, #0]
 8013b84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013b88:	f04f 30ff 	mov.w	r0, #4294967295
 8013b8c:	81a3      	strh	r3, [r4, #12]
 8013b8e:	e03e      	b.n	8013c0e <__swsetup_r+0xba>
 8013b90:	4b25      	ldr	r3, [pc, #148]	; (8013c28 <__swsetup_r+0xd4>)
 8013b92:	429c      	cmp	r4, r3
 8013b94:	d101      	bne.n	8013b9a <__swsetup_r+0x46>
 8013b96:	68ac      	ldr	r4, [r5, #8]
 8013b98:	e7eb      	b.n	8013b72 <__swsetup_r+0x1e>
 8013b9a:	4b24      	ldr	r3, [pc, #144]	; (8013c2c <__swsetup_r+0xd8>)
 8013b9c:	429c      	cmp	r4, r3
 8013b9e:	bf08      	it	eq
 8013ba0:	68ec      	ldreq	r4, [r5, #12]
 8013ba2:	e7e6      	b.n	8013b72 <__swsetup_r+0x1e>
 8013ba4:	0758      	lsls	r0, r3, #29
 8013ba6:	d512      	bpl.n	8013bce <__swsetup_r+0x7a>
 8013ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013baa:	b141      	cbz	r1, 8013bbe <__swsetup_r+0x6a>
 8013bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013bb0:	4299      	cmp	r1, r3
 8013bb2:	d002      	beq.n	8013bba <__swsetup_r+0x66>
 8013bb4:	4630      	mov	r0, r6
 8013bb6:	f7fb fdcd 	bl	800f754 <_free_r>
 8013bba:	2300      	movs	r3, #0
 8013bbc:	6363      	str	r3, [r4, #52]	; 0x34
 8013bbe:	89a3      	ldrh	r3, [r4, #12]
 8013bc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013bc4:	81a3      	strh	r3, [r4, #12]
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	6063      	str	r3, [r4, #4]
 8013bca:	6923      	ldr	r3, [r4, #16]
 8013bcc:	6023      	str	r3, [r4, #0]
 8013bce:	89a3      	ldrh	r3, [r4, #12]
 8013bd0:	f043 0308 	orr.w	r3, r3, #8
 8013bd4:	81a3      	strh	r3, [r4, #12]
 8013bd6:	6923      	ldr	r3, [r4, #16]
 8013bd8:	b94b      	cbnz	r3, 8013bee <__swsetup_r+0x9a>
 8013bda:	89a3      	ldrh	r3, [r4, #12]
 8013bdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013be4:	d003      	beq.n	8013bee <__swsetup_r+0x9a>
 8013be6:	4621      	mov	r1, r4
 8013be8:	4630      	mov	r0, r6
 8013bea:	f000 f959 	bl	8013ea0 <__smakebuf_r>
 8013bee:	89a0      	ldrh	r0, [r4, #12]
 8013bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013bf4:	f010 0301 	ands.w	r3, r0, #1
 8013bf8:	d00a      	beq.n	8013c10 <__swsetup_r+0xbc>
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	60a3      	str	r3, [r4, #8]
 8013bfe:	6963      	ldr	r3, [r4, #20]
 8013c00:	425b      	negs	r3, r3
 8013c02:	61a3      	str	r3, [r4, #24]
 8013c04:	6923      	ldr	r3, [r4, #16]
 8013c06:	b943      	cbnz	r3, 8013c1a <__swsetup_r+0xc6>
 8013c08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013c0c:	d1ba      	bne.n	8013b84 <__swsetup_r+0x30>
 8013c0e:	bd70      	pop	{r4, r5, r6, pc}
 8013c10:	0781      	lsls	r1, r0, #30
 8013c12:	bf58      	it	pl
 8013c14:	6963      	ldrpl	r3, [r4, #20]
 8013c16:	60a3      	str	r3, [r4, #8]
 8013c18:	e7f4      	b.n	8013c04 <__swsetup_r+0xb0>
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	e7f7      	b.n	8013c0e <__swsetup_r+0xba>
 8013c1e:	bf00      	nop
 8013c20:	200007d8 	.word	0x200007d8
 8013c24:	0806943c 	.word	0x0806943c
 8013c28:	0806945c 	.word	0x0806945c
 8013c2c:	0806941c 	.word	0x0806941c

08013c30 <__assert_func>:
 8013c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c32:	4614      	mov	r4, r2
 8013c34:	461a      	mov	r2, r3
 8013c36:	4b09      	ldr	r3, [pc, #36]	; (8013c5c <__assert_func+0x2c>)
 8013c38:	4605      	mov	r5, r0
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	68d8      	ldr	r0, [r3, #12]
 8013c3e:	b14c      	cbz	r4, 8013c54 <__assert_func+0x24>
 8013c40:	4b07      	ldr	r3, [pc, #28]	; (8013c60 <__assert_func+0x30>)
 8013c42:	9100      	str	r1, [sp, #0]
 8013c44:	4907      	ldr	r1, [pc, #28]	; (8013c64 <__assert_func+0x34>)
 8013c46:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c4a:	462b      	mov	r3, r5
 8013c4c:	f000 f8de 	bl	8013e0c <fiprintf>
 8013c50:	f000 f99a 	bl	8013f88 <abort>
 8013c54:	4b04      	ldr	r3, [pc, #16]	; (8013c68 <__assert_func+0x38>)
 8013c56:	461c      	mov	r4, r3
 8013c58:	e7f3      	b.n	8013c42 <__assert_func+0x12>
 8013c5a:	bf00      	nop
 8013c5c:	200007d8 	.word	0x200007d8
 8013c60:	08069665 	.word	0x08069665
 8013c64:	08069672 	.word	0x08069672
 8013c68:	080696a0 	.word	0x080696a0

08013c6c <_close_r>:
 8013c6c:	b538      	push	{r3, r4, r5, lr}
 8013c6e:	2300      	movs	r3, #0
 8013c70:	4d05      	ldr	r5, [pc, #20]	; (8013c88 <_close_r+0x1c>)
 8013c72:	4604      	mov	r4, r0
 8013c74:	4608      	mov	r0, r1
 8013c76:	602b      	str	r3, [r5, #0]
 8013c78:	f7ed ff81 	bl	8001b7e <_close>
 8013c7c:	1c43      	adds	r3, r0, #1
 8013c7e:	d102      	bne.n	8013c86 <_close_r+0x1a>
 8013c80:	682b      	ldr	r3, [r5, #0]
 8013c82:	b103      	cbz	r3, 8013c86 <_close_r+0x1a>
 8013c84:	6023      	str	r3, [r4, #0]
 8013c86:	bd38      	pop	{r3, r4, r5, pc}
 8013c88:	20001ef4 	.word	0x20001ef4

08013c8c <__sflush_r>:
 8013c8c:	898a      	ldrh	r2, [r1, #12]
 8013c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c92:	4605      	mov	r5, r0
 8013c94:	0710      	lsls	r0, r2, #28
 8013c96:	460c      	mov	r4, r1
 8013c98:	d458      	bmi.n	8013d4c <__sflush_r+0xc0>
 8013c9a:	684b      	ldr	r3, [r1, #4]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	dc05      	bgt.n	8013cac <__sflush_r+0x20>
 8013ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	dc02      	bgt.n	8013cac <__sflush_r+0x20>
 8013ca6:	2000      	movs	r0, #0
 8013ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cae:	2e00      	cmp	r6, #0
 8013cb0:	d0f9      	beq.n	8013ca6 <__sflush_r+0x1a>
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013cb8:	682f      	ldr	r7, [r5, #0]
 8013cba:	602b      	str	r3, [r5, #0]
 8013cbc:	d032      	beq.n	8013d24 <__sflush_r+0x98>
 8013cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013cc0:	89a3      	ldrh	r3, [r4, #12]
 8013cc2:	075a      	lsls	r2, r3, #29
 8013cc4:	d505      	bpl.n	8013cd2 <__sflush_r+0x46>
 8013cc6:	6863      	ldr	r3, [r4, #4]
 8013cc8:	1ac0      	subs	r0, r0, r3
 8013cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013ccc:	b10b      	cbz	r3, 8013cd2 <__sflush_r+0x46>
 8013cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013cd0:	1ac0      	subs	r0, r0, r3
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	4602      	mov	r2, r0
 8013cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cd8:	4628      	mov	r0, r5
 8013cda:	6a21      	ldr	r1, [r4, #32]
 8013cdc:	47b0      	blx	r6
 8013cde:	1c43      	adds	r3, r0, #1
 8013ce0:	89a3      	ldrh	r3, [r4, #12]
 8013ce2:	d106      	bne.n	8013cf2 <__sflush_r+0x66>
 8013ce4:	6829      	ldr	r1, [r5, #0]
 8013ce6:	291d      	cmp	r1, #29
 8013ce8:	d82c      	bhi.n	8013d44 <__sflush_r+0xb8>
 8013cea:	4a29      	ldr	r2, [pc, #164]	; (8013d90 <__sflush_r+0x104>)
 8013cec:	40ca      	lsrs	r2, r1
 8013cee:	07d6      	lsls	r6, r2, #31
 8013cf0:	d528      	bpl.n	8013d44 <__sflush_r+0xb8>
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	04d9      	lsls	r1, r3, #19
 8013cf6:	6062      	str	r2, [r4, #4]
 8013cf8:	6922      	ldr	r2, [r4, #16]
 8013cfa:	6022      	str	r2, [r4, #0]
 8013cfc:	d504      	bpl.n	8013d08 <__sflush_r+0x7c>
 8013cfe:	1c42      	adds	r2, r0, #1
 8013d00:	d101      	bne.n	8013d06 <__sflush_r+0x7a>
 8013d02:	682b      	ldr	r3, [r5, #0]
 8013d04:	b903      	cbnz	r3, 8013d08 <__sflush_r+0x7c>
 8013d06:	6560      	str	r0, [r4, #84]	; 0x54
 8013d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d0a:	602f      	str	r7, [r5, #0]
 8013d0c:	2900      	cmp	r1, #0
 8013d0e:	d0ca      	beq.n	8013ca6 <__sflush_r+0x1a>
 8013d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d14:	4299      	cmp	r1, r3
 8013d16:	d002      	beq.n	8013d1e <__sflush_r+0x92>
 8013d18:	4628      	mov	r0, r5
 8013d1a:	f7fb fd1b 	bl	800f754 <_free_r>
 8013d1e:	2000      	movs	r0, #0
 8013d20:	6360      	str	r0, [r4, #52]	; 0x34
 8013d22:	e7c1      	b.n	8013ca8 <__sflush_r+0x1c>
 8013d24:	6a21      	ldr	r1, [r4, #32]
 8013d26:	2301      	movs	r3, #1
 8013d28:	4628      	mov	r0, r5
 8013d2a:	47b0      	blx	r6
 8013d2c:	1c41      	adds	r1, r0, #1
 8013d2e:	d1c7      	bne.n	8013cc0 <__sflush_r+0x34>
 8013d30:	682b      	ldr	r3, [r5, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d0c4      	beq.n	8013cc0 <__sflush_r+0x34>
 8013d36:	2b1d      	cmp	r3, #29
 8013d38:	d001      	beq.n	8013d3e <__sflush_r+0xb2>
 8013d3a:	2b16      	cmp	r3, #22
 8013d3c:	d101      	bne.n	8013d42 <__sflush_r+0xb6>
 8013d3e:	602f      	str	r7, [r5, #0]
 8013d40:	e7b1      	b.n	8013ca6 <__sflush_r+0x1a>
 8013d42:	89a3      	ldrh	r3, [r4, #12]
 8013d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d48:	81a3      	strh	r3, [r4, #12]
 8013d4a:	e7ad      	b.n	8013ca8 <__sflush_r+0x1c>
 8013d4c:	690f      	ldr	r7, [r1, #16]
 8013d4e:	2f00      	cmp	r7, #0
 8013d50:	d0a9      	beq.n	8013ca6 <__sflush_r+0x1a>
 8013d52:	0793      	lsls	r3, r2, #30
 8013d54:	680e      	ldr	r6, [r1, #0]
 8013d56:	600f      	str	r7, [r1, #0]
 8013d58:	bf0c      	ite	eq
 8013d5a:	694b      	ldreq	r3, [r1, #20]
 8013d5c:	2300      	movne	r3, #0
 8013d5e:	eba6 0807 	sub.w	r8, r6, r7
 8013d62:	608b      	str	r3, [r1, #8]
 8013d64:	f1b8 0f00 	cmp.w	r8, #0
 8013d68:	dd9d      	ble.n	8013ca6 <__sflush_r+0x1a>
 8013d6a:	4643      	mov	r3, r8
 8013d6c:	463a      	mov	r2, r7
 8013d6e:	6a21      	ldr	r1, [r4, #32]
 8013d70:	4628      	mov	r0, r5
 8013d72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013d74:	47b0      	blx	r6
 8013d76:	2800      	cmp	r0, #0
 8013d78:	dc06      	bgt.n	8013d88 <__sflush_r+0xfc>
 8013d7a:	89a3      	ldrh	r3, [r4, #12]
 8013d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d84:	81a3      	strh	r3, [r4, #12]
 8013d86:	e78f      	b.n	8013ca8 <__sflush_r+0x1c>
 8013d88:	4407      	add	r7, r0
 8013d8a:	eba8 0800 	sub.w	r8, r8, r0
 8013d8e:	e7e9      	b.n	8013d64 <__sflush_r+0xd8>
 8013d90:	20400001 	.word	0x20400001

08013d94 <_fflush_r>:
 8013d94:	b538      	push	{r3, r4, r5, lr}
 8013d96:	690b      	ldr	r3, [r1, #16]
 8013d98:	4605      	mov	r5, r0
 8013d9a:	460c      	mov	r4, r1
 8013d9c:	b913      	cbnz	r3, 8013da4 <_fflush_r+0x10>
 8013d9e:	2500      	movs	r5, #0
 8013da0:	4628      	mov	r0, r5
 8013da2:	bd38      	pop	{r3, r4, r5, pc}
 8013da4:	b118      	cbz	r0, 8013dae <_fflush_r+0x1a>
 8013da6:	6983      	ldr	r3, [r0, #24]
 8013da8:	b90b      	cbnz	r3, 8013dae <_fflush_r+0x1a>
 8013daa:	f7fe fa01 	bl	80121b0 <__sinit>
 8013dae:	4b14      	ldr	r3, [pc, #80]	; (8013e00 <_fflush_r+0x6c>)
 8013db0:	429c      	cmp	r4, r3
 8013db2:	d11b      	bne.n	8013dec <_fflush_r+0x58>
 8013db4:	686c      	ldr	r4, [r5, #4]
 8013db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d0ef      	beq.n	8013d9e <_fflush_r+0xa>
 8013dbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013dc0:	07d0      	lsls	r0, r2, #31
 8013dc2:	d404      	bmi.n	8013dce <_fflush_r+0x3a>
 8013dc4:	0599      	lsls	r1, r3, #22
 8013dc6:	d402      	bmi.n	8013dce <_fflush_r+0x3a>
 8013dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013dca:	f7fe fe02 	bl	80129d2 <__retarget_lock_acquire_recursive>
 8013dce:	4628      	mov	r0, r5
 8013dd0:	4621      	mov	r1, r4
 8013dd2:	f7ff ff5b 	bl	8013c8c <__sflush_r>
 8013dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013dd8:	4605      	mov	r5, r0
 8013dda:	07da      	lsls	r2, r3, #31
 8013ddc:	d4e0      	bmi.n	8013da0 <_fflush_r+0xc>
 8013dde:	89a3      	ldrh	r3, [r4, #12]
 8013de0:	059b      	lsls	r3, r3, #22
 8013de2:	d4dd      	bmi.n	8013da0 <_fflush_r+0xc>
 8013de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013de6:	f7fe fdf5 	bl	80129d4 <__retarget_lock_release_recursive>
 8013dea:	e7d9      	b.n	8013da0 <_fflush_r+0xc>
 8013dec:	4b05      	ldr	r3, [pc, #20]	; (8013e04 <_fflush_r+0x70>)
 8013dee:	429c      	cmp	r4, r3
 8013df0:	d101      	bne.n	8013df6 <_fflush_r+0x62>
 8013df2:	68ac      	ldr	r4, [r5, #8]
 8013df4:	e7df      	b.n	8013db6 <_fflush_r+0x22>
 8013df6:	4b04      	ldr	r3, [pc, #16]	; (8013e08 <_fflush_r+0x74>)
 8013df8:	429c      	cmp	r4, r3
 8013dfa:	bf08      	it	eq
 8013dfc:	68ec      	ldreq	r4, [r5, #12]
 8013dfe:	e7da      	b.n	8013db6 <_fflush_r+0x22>
 8013e00:	0806943c 	.word	0x0806943c
 8013e04:	0806945c 	.word	0x0806945c
 8013e08:	0806941c 	.word	0x0806941c

08013e0c <fiprintf>:
 8013e0c:	b40e      	push	{r1, r2, r3}
 8013e0e:	b503      	push	{r0, r1, lr}
 8013e10:	ab03      	add	r3, sp, #12
 8013e12:	4601      	mov	r1, r0
 8013e14:	4805      	ldr	r0, [pc, #20]	; (8013e2c <fiprintf+0x20>)
 8013e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e1a:	6800      	ldr	r0, [r0, #0]
 8013e1c:	9301      	str	r3, [sp, #4]
 8013e1e:	f7ff fc97 	bl	8013750 <_vfiprintf_r>
 8013e22:	b002      	add	sp, #8
 8013e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e28:	b003      	add	sp, #12
 8013e2a:	4770      	bx	lr
 8013e2c:	200007d8 	.word	0x200007d8

08013e30 <_lseek_r>:
 8013e30:	b538      	push	{r3, r4, r5, lr}
 8013e32:	4604      	mov	r4, r0
 8013e34:	4d06      	ldr	r5, [pc, #24]	; (8013e50 <_lseek_r+0x20>)
 8013e36:	4608      	mov	r0, r1
 8013e38:	4611      	mov	r1, r2
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	602a      	str	r2, [r5, #0]
 8013e3e:	461a      	mov	r2, r3
 8013e40:	f7ed fec4 	bl	8001bcc <_lseek>
 8013e44:	1c43      	adds	r3, r0, #1
 8013e46:	d102      	bne.n	8013e4e <_lseek_r+0x1e>
 8013e48:	682b      	ldr	r3, [r5, #0]
 8013e4a:	b103      	cbz	r3, 8013e4e <_lseek_r+0x1e>
 8013e4c:	6023      	str	r3, [r4, #0]
 8013e4e:	bd38      	pop	{r3, r4, r5, pc}
 8013e50:	20001ef4 	.word	0x20001ef4

08013e54 <__swhatbuf_r>:
 8013e54:	b570      	push	{r4, r5, r6, lr}
 8013e56:	460e      	mov	r6, r1
 8013e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e5c:	b096      	sub	sp, #88	; 0x58
 8013e5e:	4614      	mov	r4, r2
 8013e60:	2900      	cmp	r1, #0
 8013e62:	461d      	mov	r5, r3
 8013e64:	da08      	bge.n	8013e78 <__swhatbuf_r+0x24>
 8013e66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	602a      	str	r2, [r5, #0]
 8013e6e:	061a      	lsls	r2, r3, #24
 8013e70:	d410      	bmi.n	8013e94 <__swhatbuf_r+0x40>
 8013e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e76:	e00e      	b.n	8013e96 <__swhatbuf_r+0x42>
 8013e78:	466a      	mov	r2, sp
 8013e7a:	f000 f88d 	bl	8013f98 <_fstat_r>
 8013e7e:	2800      	cmp	r0, #0
 8013e80:	dbf1      	blt.n	8013e66 <__swhatbuf_r+0x12>
 8013e82:	9a01      	ldr	r2, [sp, #4]
 8013e84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013e88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013e8c:	425a      	negs	r2, r3
 8013e8e:	415a      	adcs	r2, r3
 8013e90:	602a      	str	r2, [r5, #0]
 8013e92:	e7ee      	b.n	8013e72 <__swhatbuf_r+0x1e>
 8013e94:	2340      	movs	r3, #64	; 0x40
 8013e96:	2000      	movs	r0, #0
 8013e98:	6023      	str	r3, [r4, #0]
 8013e9a:	b016      	add	sp, #88	; 0x58
 8013e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013ea0 <__smakebuf_r>:
 8013ea0:	898b      	ldrh	r3, [r1, #12]
 8013ea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ea4:	079d      	lsls	r5, r3, #30
 8013ea6:	4606      	mov	r6, r0
 8013ea8:	460c      	mov	r4, r1
 8013eaa:	d507      	bpl.n	8013ebc <__smakebuf_r+0x1c>
 8013eac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013eb0:	6023      	str	r3, [r4, #0]
 8013eb2:	6123      	str	r3, [r4, #16]
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	6163      	str	r3, [r4, #20]
 8013eb8:	b002      	add	sp, #8
 8013eba:	bd70      	pop	{r4, r5, r6, pc}
 8013ebc:	ab01      	add	r3, sp, #4
 8013ebe:	466a      	mov	r2, sp
 8013ec0:	f7ff ffc8 	bl	8013e54 <__swhatbuf_r>
 8013ec4:	9900      	ldr	r1, [sp, #0]
 8013ec6:	4605      	mov	r5, r0
 8013ec8:	4630      	mov	r0, r6
 8013eca:	f7fb fcaf 	bl	800f82c <_malloc_r>
 8013ece:	b948      	cbnz	r0, 8013ee4 <__smakebuf_r+0x44>
 8013ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ed4:	059a      	lsls	r2, r3, #22
 8013ed6:	d4ef      	bmi.n	8013eb8 <__smakebuf_r+0x18>
 8013ed8:	f023 0303 	bic.w	r3, r3, #3
 8013edc:	f043 0302 	orr.w	r3, r3, #2
 8013ee0:	81a3      	strh	r3, [r4, #12]
 8013ee2:	e7e3      	b.n	8013eac <__smakebuf_r+0xc>
 8013ee4:	4b0d      	ldr	r3, [pc, #52]	; (8013f1c <__smakebuf_r+0x7c>)
 8013ee6:	62b3      	str	r3, [r6, #40]	; 0x28
 8013ee8:	89a3      	ldrh	r3, [r4, #12]
 8013eea:	6020      	str	r0, [r4, #0]
 8013eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ef0:	6120      	str	r0, [r4, #16]
 8013ef2:	81a3      	strh	r3, [r4, #12]
 8013ef4:	9b00      	ldr	r3, [sp, #0]
 8013ef6:	6163      	str	r3, [r4, #20]
 8013ef8:	9b01      	ldr	r3, [sp, #4]
 8013efa:	b15b      	cbz	r3, 8013f14 <__smakebuf_r+0x74>
 8013efc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f00:	4630      	mov	r0, r6
 8013f02:	f000 f85b 	bl	8013fbc <_isatty_r>
 8013f06:	b128      	cbz	r0, 8013f14 <__smakebuf_r+0x74>
 8013f08:	89a3      	ldrh	r3, [r4, #12]
 8013f0a:	f023 0303 	bic.w	r3, r3, #3
 8013f0e:	f043 0301 	orr.w	r3, r3, #1
 8013f12:	81a3      	strh	r3, [r4, #12]
 8013f14:	89a0      	ldrh	r0, [r4, #12]
 8013f16:	4305      	orrs	r5, r0
 8013f18:	81a5      	strh	r5, [r4, #12]
 8013f1a:	e7cd      	b.n	8013eb8 <__smakebuf_r+0x18>
 8013f1c:	08012149 	.word	0x08012149

08013f20 <memmove>:
 8013f20:	4288      	cmp	r0, r1
 8013f22:	b510      	push	{r4, lr}
 8013f24:	eb01 0402 	add.w	r4, r1, r2
 8013f28:	d902      	bls.n	8013f30 <memmove+0x10>
 8013f2a:	4284      	cmp	r4, r0
 8013f2c:	4623      	mov	r3, r4
 8013f2e:	d807      	bhi.n	8013f40 <memmove+0x20>
 8013f30:	1e43      	subs	r3, r0, #1
 8013f32:	42a1      	cmp	r1, r4
 8013f34:	d008      	beq.n	8013f48 <memmove+0x28>
 8013f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f3e:	e7f8      	b.n	8013f32 <memmove+0x12>
 8013f40:	4402      	add	r2, r0
 8013f42:	4601      	mov	r1, r0
 8013f44:	428a      	cmp	r2, r1
 8013f46:	d100      	bne.n	8013f4a <memmove+0x2a>
 8013f48:	bd10      	pop	{r4, pc}
 8013f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f52:	e7f7      	b.n	8013f44 <memmove+0x24>

08013f54 <_malloc_usable_size_r>:
 8013f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f58:	1f18      	subs	r0, r3, #4
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	bfbc      	itt	lt
 8013f5e:	580b      	ldrlt	r3, [r1, r0]
 8013f60:	18c0      	addlt	r0, r0, r3
 8013f62:	4770      	bx	lr

08013f64 <_read_r>:
 8013f64:	b538      	push	{r3, r4, r5, lr}
 8013f66:	4604      	mov	r4, r0
 8013f68:	4d06      	ldr	r5, [pc, #24]	; (8013f84 <_read_r+0x20>)
 8013f6a:	4608      	mov	r0, r1
 8013f6c:	4611      	mov	r1, r2
 8013f6e:	2200      	movs	r2, #0
 8013f70:	602a      	str	r2, [r5, #0]
 8013f72:	461a      	mov	r2, r3
 8013f74:	f7ed fdca 	bl	8001b0c <_read>
 8013f78:	1c43      	adds	r3, r0, #1
 8013f7a:	d102      	bne.n	8013f82 <_read_r+0x1e>
 8013f7c:	682b      	ldr	r3, [r5, #0]
 8013f7e:	b103      	cbz	r3, 8013f82 <_read_r+0x1e>
 8013f80:	6023      	str	r3, [r4, #0]
 8013f82:	bd38      	pop	{r3, r4, r5, pc}
 8013f84:	20001ef4 	.word	0x20001ef4

08013f88 <abort>:
 8013f88:	2006      	movs	r0, #6
 8013f8a:	b508      	push	{r3, lr}
 8013f8c:	f000 f84e 	bl	801402c <raise>
 8013f90:	2001      	movs	r0, #1
 8013f92:	f7ed fdb1 	bl	8001af8 <_exit>
	...

08013f98 <_fstat_r>:
 8013f98:	b538      	push	{r3, r4, r5, lr}
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	4d06      	ldr	r5, [pc, #24]	; (8013fb8 <_fstat_r+0x20>)
 8013f9e:	4604      	mov	r4, r0
 8013fa0:	4608      	mov	r0, r1
 8013fa2:	4611      	mov	r1, r2
 8013fa4:	602b      	str	r3, [r5, #0]
 8013fa6:	f7ed fdf6 	bl	8001b96 <_fstat>
 8013faa:	1c43      	adds	r3, r0, #1
 8013fac:	d102      	bne.n	8013fb4 <_fstat_r+0x1c>
 8013fae:	682b      	ldr	r3, [r5, #0]
 8013fb0:	b103      	cbz	r3, 8013fb4 <_fstat_r+0x1c>
 8013fb2:	6023      	str	r3, [r4, #0]
 8013fb4:	bd38      	pop	{r3, r4, r5, pc}
 8013fb6:	bf00      	nop
 8013fb8:	20001ef4 	.word	0x20001ef4

08013fbc <_isatty_r>:
 8013fbc:	b538      	push	{r3, r4, r5, lr}
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	4d05      	ldr	r5, [pc, #20]	; (8013fd8 <_isatty_r+0x1c>)
 8013fc2:	4604      	mov	r4, r0
 8013fc4:	4608      	mov	r0, r1
 8013fc6:	602b      	str	r3, [r5, #0]
 8013fc8:	f7ed fdf5 	bl	8001bb6 <_isatty>
 8013fcc:	1c43      	adds	r3, r0, #1
 8013fce:	d102      	bne.n	8013fd6 <_isatty_r+0x1a>
 8013fd0:	682b      	ldr	r3, [r5, #0]
 8013fd2:	b103      	cbz	r3, 8013fd6 <_isatty_r+0x1a>
 8013fd4:	6023      	str	r3, [r4, #0]
 8013fd6:	bd38      	pop	{r3, r4, r5, pc}
 8013fd8:	20001ef4 	.word	0x20001ef4

08013fdc <_raise_r>:
 8013fdc:	291f      	cmp	r1, #31
 8013fde:	b538      	push	{r3, r4, r5, lr}
 8013fe0:	4604      	mov	r4, r0
 8013fe2:	460d      	mov	r5, r1
 8013fe4:	d904      	bls.n	8013ff0 <_raise_r+0x14>
 8013fe6:	2316      	movs	r3, #22
 8013fe8:	6003      	str	r3, [r0, #0]
 8013fea:	f04f 30ff 	mov.w	r0, #4294967295
 8013fee:	bd38      	pop	{r3, r4, r5, pc}
 8013ff0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013ff2:	b112      	cbz	r2, 8013ffa <_raise_r+0x1e>
 8013ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013ff8:	b94b      	cbnz	r3, 801400e <_raise_r+0x32>
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	f000 f830 	bl	8014060 <_getpid_r>
 8014000:	462a      	mov	r2, r5
 8014002:	4601      	mov	r1, r0
 8014004:	4620      	mov	r0, r4
 8014006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801400a:	f000 b817 	b.w	801403c <_kill_r>
 801400e:	2b01      	cmp	r3, #1
 8014010:	d00a      	beq.n	8014028 <_raise_r+0x4c>
 8014012:	1c59      	adds	r1, r3, #1
 8014014:	d103      	bne.n	801401e <_raise_r+0x42>
 8014016:	2316      	movs	r3, #22
 8014018:	6003      	str	r3, [r0, #0]
 801401a:	2001      	movs	r0, #1
 801401c:	e7e7      	b.n	8013fee <_raise_r+0x12>
 801401e:	2400      	movs	r4, #0
 8014020:	4628      	mov	r0, r5
 8014022:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014026:	4798      	blx	r3
 8014028:	2000      	movs	r0, #0
 801402a:	e7e0      	b.n	8013fee <_raise_r+0x12>

0801402c <raise>:
 801402c:	4b02      	ldr	r3, [pc, #8]	; (8014038 <raise+0xc>)
 801402e:	4601      	mov	r1, r0
 8014030:	6818      	ldr	r0, [r3, #0]
 8014032:	f7ff bfd3 	b.w	8013fdc <_raise_r>
 8014036:	bf00      	nop
 8014038:	200007d8 	.word	0x200007d8

0801403c <_kill_r>:
 801403c:	b538      	push	{r3, r4, r5, lr}
 801403e:	2300      	movs	r3, #0
 8014040:	4d06      	ldr	r5, [pc, #24]	; (801405c <_kill_r+0x20>)
 8014042:	4604      	mov	r4, r0
 8014044:	4608      	mov	r0, r1
 8014046:	4611      	mov	r1, r2
 8014048:	602b      	str	r3, [r5, #0]
 801404a:	f7ed fd45 	bl	8001ad8 <_kill>
 801404e:	1c43      	adds	r3, r0, #1
 8014050:	d102      	bne.n	8014058 <_kill_r+0x1c>
 8014052:	682b      	ldr	r3, [r5, #0]
 8014054:	b103      	cbz	r3, 8014058 <_kill_r+0x1c>
 8014056:	6023      	str	r3, [r4, #0]
 8014058:	bd38      	pop	{r3, r4, r5, pc}
 801405a:	bf00      	nop
 801405c:	20001ef4 	.word	0x20001ef4

08014060 <_getpid_r>:
 8014060:	f7ed bd32 	b.w	8001ac8 <_getpid>

08014064 <expf>:
 8014064:	b508      	push	{r3, lr}
 8014066:	ed2d 8b02 	vpush	{d8}
 801406a:	eef0 8a40 	vmov.f32	s17, s0
 801406e:	f000 f84d 	bl	801410c <__ieee754_expf>
 8014072:	eeb0 8a40 	vmov.f32	s16, s0
 8014076:	eeb0 0a68 	vmov.f32	s0, s17
 801407a:	f000 f93b 	bl	80142f4 <finitef>
 801407e:	b160      	cbz	r0, 801409a <expf+0x36>
 8014080:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80140c0 <expf+0x5c>
 8014084:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801408c:	dd0a      	ble.n	80140a4 <expf+0x40>
 801408e:	f7fb fb19 	bl	800f6c4 <__errno>
 8014092:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80140c4 <expf+0x60>
 8014096:	2322      	movs	r3, #34	; 0x22
 8014098:	6003      	str	r3, [r0, #0]
 801409a:	eeb0 0a48 	vmov.f32	s0, s16
 801409e:	ecbd 8b02 	vpop	{d8}
 80140a2:	bd08      	pop	{r3, pc}
 80140a4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80140c8 <expf+0x64>
 80140a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80140ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140b0:	d5f3      	bpl.n	801409a <expf+0x36>
 80140b2:	f7fb fb07 	bl	800f6c4 <__errno>
 80140b6:	2322      	movs	r3, #34	; 0x22
 80140b8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80140cc <expf+0x68>
 80140bc:	6003      	str	r3, [r0, #0]
 80140be:	e7ec      	b.n	801409a <expf+0x36>
 80140c0:	42b17180 	.word	0x42b17180
 80140c4:	7f800000 	.word	0x7f800000
 80140c8:	c2cff1b5 	.word	0xc2cff1b5
 80140cc:	00000000 	.word	0x00000000

080140d0 <sqrtf>:
 80140d0:	b508      	push	{r3, lr}
 80140d2:	ed2d 8b02 	vpush	{d8}
 80140d6:	eeb0 8a40 	vmov.f32	s16, s0
 80140da:	f000 f8e5 	bl	80142a8 <__ieee754_sqrtf>
 80140de:	eeb4 8a48 	vcmp.f32	s16, s16
 80140e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e6:	d60c      	bvs.n	8014102 <sqrtf+0x32>
 80140e8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8014108 <sqrtf+0x38>
 80140ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80140f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f4:	d505      	bpl.n	8014102 <sqrtf+0x32>
 80140f6:	f7fb fae5 	bl	800f6c4 <__errno>
 80140fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80140fe:	2321      	movs	r3, #33	; 0x21
 8014100:	6003      	str	r3, [r0, #0]
 8014102:	ecbd 8b02 	vpop	{d8}
 8014106:	bd08      	pop	{r3, pc}
 8014108:	00000000 	.word	0x00000000

0801410c <__ieee754_expf>:
 801410c:	ee10 2a10 	vmov	r2, s0
 8014110:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014114:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014118:	d902      	bls.n	8014120 <__ieee754_expf+0x14>
 801411a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801411e:	4770      	bx	lr
 8014120:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8014124:	d105      	bne.n	8014132 <__ieee754_expf+0x26>
 8014126:	2b00      	cmp	r3, #0
 8014128:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014260 <__ieee754_expf+0x154>
 801412c:	fe00 0a27 	vseleq.f32	s0, s0, s15
 8014130:	4770      	bx	lr
 8014132:	484c      	ldr	r0, [pc, #304]	; (8014264 <__ieee754_expf+0x158>)
 8014134:	4282      	cmp	r2, r0
 8014136:	dd02      	ble.n	801413e <__ieee754_expf+0x32>
 8014138:	2000      	movs	r0, #0
 801413a:	f000 b8d5 	b.w	80142e8 <__math_oflowf>
 801413e:	2a00      	cmp	r2, #0
 8014140:	da05      	bge.n	801414e <__ieee754_expf+0x42>
 8014142:	4a49      	ldr	r2, [pc, #292]	; (8014268 <__ieee754_expf+0x15c>)
 8014144:	4291      	cmp	r1, r2
 8014146:	d902      	bls.n	801414e <__ieee754_expf+0x42>
 8014148:	2000      	movs	r0, #0
 801414a:	f000 b8c7 	b.w	80142dc <__math_uflowf>
 801414e:	4a47      	ldr	r2, [pc, #284]	; (801426c <__ieee754_expf+0x160>)
 8014150:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014154:	4291      	cmp	r1, r2
 8014156:	d952      	bls.n	80141fe <__ieee754_expf+0xf2>
 8014158:	4a45      	ldr	r2, [pc, #276]	; (8014270 <__ieee754_expf+0x164>)
 801415a:	4291      	cmp	r1, r2
 801415c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8014160:	d834      	bhi.n	80141cc <__ieee754_expf+0xc0>
 8014162:	4944      	ldr	r1, [pc, #272]	; (8014274 <__ieee754_expf+0x168>)
 8014164:	4411      	add	r1, r2
 8014166:	ed91 7a00 	vldr	s14, [r1]
 801416a:	4943      	ldr	r1, [pc, #268]	; (8014278 <__ieee754_expf+0x16c>)
 801416c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8014170:	440a      	add	r2, r1
 8014172:	edd2 7a00 	vldr	s15, [r2]
 8014176:	f1c3 0201 	rsb	r2, r3, #1
 801417a:	1ad2      	subs	r2, r2, r3
 801417c:	ee37 0a67 	vsub.f32	s0, s14, s15
 8014180:	ee20 6a00 	vmul.f32	s12, s0, s0
 8014184:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801427c <__ieee754_expf+0x170>
 8014188:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014280 <__ieee754_expf+0x174>
 801418c:	eee6 6a05 	vfma.f32	s13, s12, s10
 8014190:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8014284 <__ieee754_expf+0x178>
 8014194:	eea6 5a86 	vfma.f32	s10, s13, s12
 8014198:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8014288 <__ieee754_expf+0x17c>
 801419c:	eee5 6a06 	vfma.f32	s13, s10, s12
 80141a0:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801428c <__ieee754_expf+0x180>
 80141a4:	eea6 5a86 	vfma.f32	s10, s13, s12
 80141a8:	eef0 6a40 	vmov.f32	s13, s0
 80141ac:	eee5 6a46 	vfms.f32	s13, s10, s12
 80141b0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80141b4:	ee20 5a26 	vmul.f32	s10, s0, s13
 80141b8:	bb92      	cbnz	r2, 8014220 <__ieee754_expf+0x114>
 80141ba:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80141be:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80141c2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80141c6:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80141ca:	4770      	bx	lr
 80141cc:	4b30      	ldr	r3, [pc, #192]	; (8014290 <__ieee754_expf+0x184>)
 80141ce:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014294 <__ieee754_expf+0x188>
 80141d2:	4413      	add	r3, r2
 80141d4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014298 <__ieee754_expf+0x18c>
 80141d8:	edd3 7a00 	vldr	s15, [r3]
 80141dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80141e0:	eeb0 7a40 	vmov.f32	s14, s0
 80141e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141e8:	ee17 2a90 	vmov	r2, s15
 80141ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141f0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80141f4:	eddf 6a29 	vldr	s13, [pc, #164]	; 801429c <__ieee754_expf+0x190>
 80141f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80141fc:	e7be      	b.n	801417c <__ieee754_expf+0x70>
 80141fe:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8014202:	d20b      	bcs.n	801421c <__ieee754_expf+0x110>
 8014204:	eddf 6a26 	vldr	s13, [pc, #152]	; 80142a0 <__ieee754_expf+0x194>
 8014208:	ee70 6a26 	vadd.f32	s13, s0, s13
 801420c:	eef4 6ae5 	vcmpe.f32	s13, s11
 8014210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014214:	dd02      	ble.n	801421c <__ieee754_expf+0x110>
 8014216:	ee30 0a25 	vadd.f32	s0, s0, s11
 801421a:	4770      	bx	lr
 801421c:	2200      	movs	r2, #0
 801421e:	e7af      	b.n	8014180 <__ieee754_expf+0x74>
 8014220:	ee76 6a66 	vsub.f32	s13, s12, s13
 8014224:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8014228:	bfb8      	it	lt
 801422a:	3264      	addlt	r2, #100	; 0x64
 801422c:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8014230:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014234:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8014238:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801423c:	ee17 3a90 	vmov	r3, s15
 8014240:	bfb5      	itete	lt
 8014242:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80142a4 <__ieee754_expf+0x198>
 8014246:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801424a:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801424e:	ee00 3a10 	vmovge	s0, r3
 8014252:	bfbc      	itt	lt
 8014254:	ee00 3a10 	vmovlt	s0, r3
 8014258:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801425c:	4770      	bx	lr
 801425e:	bf00      	nop
 8014260:	00000000 	.word	0x00000000
 8014264:	42b17217 	.word	0x42b17217
 8014268:	42cff1b5 	.word	0x42cff1b5
 801426c:	3eb17218 	.word	0x3eb17218
 8014270:	3f851591 	.word	0x3f851591
 8014274:	080696ac 	.word	0x080696ac
 8014278:	080696b4 	.word	0x080696b4
 801427c:	3331bb4c 	.word	0x3331bb4c
 8014280:	b5ddea0e 	.word	0xb5ddea0e
 8014284:	388ab355 	.word	0x388ab355
 8014288:	bb360b61 	.word	0xbb360b61
 801428c:	3e2aaaab 	.word	0x3e2aaaab
 8014290:	080696a4 	.word	0x080696a4
 8014294:	3fb8aa3b 	.word	0x3fb8aa3b
 8014298:	3f317180 	.word	0x3f317180
 801429c:	3717f7d1 	.word	0x3717f7d1
 80142a0:	7149f2ca 	.word	0x7149f2ca
 80142a4:	0d800000 	.word	0x0d800000

080142a8 <__ieee754_sqrtf>:
 80142a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80142ac:	4770      	bx	lr

080142ae <with_errnof>:
 80142ae:	b513      	push	{r0, r1, r4, lr}
 80142b0:	4604      	mov	r4, r0
 80142b2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80142b6:	f7fb fa05 	bl	800f6c4 <__errno>
 80142ba:	ed9d 0a01 	vldr	s0, [sp, #4]
 80142be:	6004      	str	r4, [r0, #0]
 80142c0:	b002      	add	sp, #8
 80142c2:	bd10      	pop	{r4, pc}

080142c4 <xflowf>:
 80142c4:	b130      	cbz	r0, 80142d4 <xflowf+0x10>
 80142c6:	eef1 7a40 	vneg.f32	s15, s0
 80142ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80142ce:	2022      	movs	r0, #34	; 0x22
 80142d0:	f7ff bfed 	b.w	80142ae <with_errnof>
 80142d4:	eef0 7a40 	vmov.f32	s15, s0
 80142d8:	e7f7      	b.n	80142ca <xflowf+0x6>
	...

080142dc <__math_uflowf>:
 80142dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80142e4 <__math_uflowf+0x8>
 80142e0:	f7ff bff0 	b.w	80142c4 <xflowf>
 80142e4:	10000000 	.word	0x10000000

080142e8 <__math_oflowf>:
 80142e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80142f0 <__math_oflowf+0x8>
 80142ec:	f7ff bfea 	b.w	80142c4 <xflowf>
 80142f0:	70000000 	.word	0x70000000

080142f4 <finitef>:
 80142f4:	b082      	sub	sp, #8
 80142f6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80142fa:	9801      	ldr	r0, [sp, #4]
 80142fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014300:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014304:	bfac      	ite	ge
 8014306:	2000      	movge	r0, #0
 8014308:	2001      	movlt	r0, #1
 801430a:	b002      	add	sp, #8
 801430c:	4770      	bx	lr
	...

08014310 <_init>:
 8014310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014312:	bf00      	nop
 8014314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014316:	bc08      	pop	{r3}
 8014318:	469e      	mov	lr, r3
 801431a:	4770      	bx	lr

0801431c <_fini>:
 801431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801431e:	bf00      	nop
 8014320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014322:	bc08      	pop	{r3}
 8014324:	469e      	mov	lr, r3
 8014326:	4770      	bx	lr
