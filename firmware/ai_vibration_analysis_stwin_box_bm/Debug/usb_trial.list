
usb_trial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f560  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000553b4  0801f7a0  0801f7a0  0002f7a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08074b54  08074b54  00084b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08074b5c  08074b5c  00084b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08074b60  08074b60  00084b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000b04  20000000  08074b64  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003957  20000b20  08075668  00090b20  2**5
                  ALLOC
  8 ._user_heap_stack 00000601  20004477  08075668  00094477  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00090b04  2**0
                  CONTENTS, READONLY
 10 .debug_info   00068f86  00000000  00000000  00090b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a08e  00000000  00000000  000f9ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004450  00000000  00000000  00103b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00004028  00000000  00000000  00107fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045a3c  00000000  00000000  0010bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00051a16  00000000  00000000  00151a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019adad  00000000  00000000  001a341a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000140  00000000  00000000  0033e1c7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00013b2c  00000000  00000000  0033e308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00004344  00000000  00000000  00351e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000b20 	.word	0x20000b20
 8000254:	00000000 	.word	0x00000000
 8000258:	0801f780 	.word	0x0801f780

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000b24 	.word	0x20000b24
 8000274:	0801f780 	.word	0x0801f780

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9b8 	b.w	8001018 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d32:	4604      	mov	r4, r0
 8000d34:	460f      	mov	r7, r1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d148      	bne.n	8000dcc <__udivmoddi4+0xa0>
 8000d3a:	428a      	cmp	r2, r1
 8000d3c:	4694      	mov	ip, r2
 8000d3e:	d961      	bls.n	8000e04 <__udivmoddi4+0xd8>
 8000d40:	fab2 f382 	clz	r3, r2
 8000d44:	b143      	cbz	r3, 8000d58 <__udivmoddi4+0x2c>
 8000d46:	f1c3 0120 	rsb	r1, r3, #32
 8000d4a:	409f      	lsls	r7, r3
 8000d4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d50:	409c      	lsls	r4, r3
 8000d52:	fa20 f101 	lsr.w	r1, r0, r1
 8000d56:	430f      	orrs	r7, r1
 8000d58:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	0c22      	lsrs	r2, r4, #16
 8000d62:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d66:	fb01 7716 	mls	r7, r1, r6, r7
 8000d6a:	fb06 f00e 	mul.w	r0, r6, lr
 8000d6e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d72:	4290      	cmp	r0, r2
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x5c>
 8000d76:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7a:	f106 37ff 	add.w	r7, r6, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x5a>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f200 8137 	bhi.w	8000ff4 <__udivmoddi4+0x2c8>
 8000d86:	463e      	mov	r6, r7
 8000d88:	1a12      	subs	r2, r2, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d90:	fb01 2210 	mls	r2, r1, r0, r2
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x86>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da8:	d202      	bcs.n	8000db0 <__udivmoddi4+0x84>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f200 811c 	bhi.w	8000fe8 <__udivmoddi4+0x2bc>
 8000db0:	4610      	mov	r0, r2
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	2600      	movs	r6, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0x9a>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0xb8>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	f000 80fd 	beq.w	8000fd0 <__udivmoddi4+0x2a4>
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4631      	mov	r1, r6
 8000de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de4:	fab3 f683 	clz	r6, r3
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d14b      	bne.n	8000e84 <__udivmoddi4+0x158>
 8000dec:	428b      	cmp	r3, r1
 8000dee:	f0c0 80f2 	bcc.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f240 80ef 	bls.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df8:	4630      	mov	r0, r6
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e3      	beq.n	8000dc6 <__udivmoddi4+0x9a>
 8000dfe:	e9c5 4700 	strd	r4, r7, [r5]
 8000e02:	e7e0      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000e04:	b902      	cbnz	r2, 8000e08 <__udivmoddi4+0xdc>
 8000e06:	deff      	udf	#255	; 0xff
 8000e08:	fab2 f382 	clz	r3, r2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f040 809d 	bne.w	8000f4c <__udivmoddi4+0x220>
 8000e12:	1a89      	subs	r1, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b297      	uxth	r7, r2
 8000e1a:	2601      	movs	r6, #1
 8000e1c:	0c20      	lsrs	r0, r4, #16
 8000e1e:	fbb1 f2fe 	udiv	r2, r1, lr
 8000e22:	fb0e 1112 	mls	r1, lr, r2, r1
 8000e26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2a:	fb07 f002 	mul.w	r0, r7, r2
 8000e2e:	4288      	cmp	r0, r1
 8000e30:	d90f      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f102 38ff 	add.w	r8, r2, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	4288      	cmp	r0, r1
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80cf 	beq.w	8000fee <__udivmoddi4+0x2c2>
 8000e50:	4642      	mov	r2, r8
 8000e52:	1a09      	subs	r1, r1, r0
 8000e54:	b2a4      	uxth	r4, r4
 8000e56:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e5a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e5e:	fb00 f707 	mul.w	r7, r0, r7
 8000e62:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e66:	42a7      	cmp	r7, r4
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x150>
 8000e6a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x14e>
 8000e74:	42a7      	cmp	r7, r4
 8000e76:	f200 80b4 	bhi.w	8000fe2 <__udivmoddi4+0x2b6>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	1be4      	subs	r4, r4, r7
 8000e7e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e82:	e79b      	b.n	8000dbc <__udivmoddi4+0x90>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa01 f406 	lsl.w	r4, r1, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	40f9      	lsrs	r1, r7
 8000e94:	40b2      	lsls	r2, r6
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	431c      	orrs	r4, r3
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fa00 f306 	lsl.w	r3, r0, r6
 8000eac:	0c20      	lsrs	r0, r4, #16
 8000eae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eb2:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eba:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebe:	4288      	cmp	r0, r1
 8000ec0:	d90f      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 808d 	beq.w	8000ffa <__udivmoddi4+0x2ce>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	1a09      	subs	r1, r1, r0
 8000ee4:	b2a4      	uxth	r4, r4
 8000ee6:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eea:	fb09 1110 	mls	r1, r9, r0, r1
 8000eee:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef2:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef6:	458e      	cmp	lr, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1de>
 8000efa:	eb1c 0101 	adds.w	r1, ip, r1
 8000efe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f02:	d201      	bcs.n	8000f08 <__udivmoddi4+0x1dc>
 8000f04:	458e      	cmp	lr, r1
 8000f06:	d87f      	bhi.n	8001008 <__udivmoddi4+0x2dc>
 8000f08:	4620      	mov	r0, r4
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	fba0 9802 	umull	r9, r8, r0, r2
 8000f16:	4541      	cmp	r1, r8
 8000f18:	464c      	mov	r4, r9
 8000f1a:	46c6      	mov	lr, r8
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x1f8>
 8000f1e:	d106      	bne.n	8000f2e <__udivmoddi4+0x202>
 8000f20:	454b      	cmp	r3, r9
 8000f22:	d204      	bcs.n	8000f2e <__udivmoddi4+0x202>
 8000f24:	3801      	subs	r0, #1
 8000f26:	ebb9 0402 	subs.w	r4, r9, r2
 8000f2a:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d070      	beq.n	8001014 <__udivmoddi4+0x2e8>
 8000f32:	1b1a      	subs	r2, r3, r4
 8000f34:	eb61 010e 	sbc.w	r1, r1, lr
 8000f38:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3c:	fa01 f707 	lsl.w	r7, r1, r7
 8000f40:	40f1      	lsrs	r1, r6
 8000f42:	2600      	movs	r6, #0
 8000f44:	431f      	orrs	r7, r3
 8000f46:	e9c5 7100 	strd	r7, r1, [r5]
 8000f4a:	e73c      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	f1c3 0020 	rsb	r0, r3, #32
 8000f54:	fa01 f203 	lsl.w	r2, r1, r3
 8000f58:	fa21 f600 	lsr.w	r6, r1, r0
 8000f5c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f60:	fa24 f100 	lsr.w	r1, r4, r0
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	409c      	lsls	r4, r3
 8000f6a:	4311      	orrs	r1, r2
 8000f6c:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f70:	0c0a      	lsrs	r2, r1, #16
 8000f72:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f76:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f7a:	fb00 f607 	mul.w	r6, r0, r7
 8000f7e:	4296      	cmp	r6, r2
 8000f80:	d90e      	bls.n	8000fa0 <__udivmoddi4+0x274>
 8000f82:	eb1c 0202 	adds.w	r2, ip, r2
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	bf2c      	ite	cs
 8000f8c:	f04f 0901 	movcs.w	r9, #1
 8000f90:	f04f 0900 	movcc.w	r9, #0
 8000f94:	4296      	cmp	r6, r2
 8000f96:	d902      	bls.n	8000f9e <__udivmoddi4+0x272>
 8000f98:	f1b9 0f00 	cmp.w	r9, #0
 8000f9c:	d031      	beq.n	8001002 <__udivmoddi4+0x2d6>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	1b92      	subs	r2, r2, r6
 8000fa2:	b289      	uxth	r1, r1
 8000fa4:	fbb2 f6fe 	udiv	r6, r2, lr
 8000fa8:	fb0e 2216 	mls	r2, lr, r6, r2
 8000fac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000fb0:	fb06 f207 	mul.w	r2, r6, r7
 8000fb4:	428a      	cmp	r2, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x29c>
 8000fb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc0:	d201      	bcs.n	8000fc6 <__udivmoddi4+0x29a>
 8000fc2:	428a      	cmp	r2, r1
 8000fc4:	d823      	bhi.n	800100e <__udivmoddi4+0x2e2>
 8000fc6:	4646      	mov	r6, r8
 8000fc8:	1a89      	subs	r1, r1, r2
 8000fca:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fce:	e725      	b.n	8000e1c <__udivmoddi4+0xf0>
 8000fd0:	462e      	mov	r6, r5
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	e6f7      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000fd6:	1a84      	subs	r4, r0, r2
 8000fd8:	eb61 0303 	sbc.w	r3, r1, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	461f      	mov	r7, r3
 8000fe0:	e70b      	b.n	8000dfa <__udivmoddi4+0xce>
 8000fe2:	4464      	add	r4, ip
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	e749      	b.n	8000e7c <__udivmoddi4+0x150>
 8000fe8:	4464      	add	r4, ip
 8000fea:	3802      	subs	r0, #2
 8000fec:	e6e1      	b.n	8000db2 <__udivmoddi4+0x86>
 8000fee:	3a02      	subs	r2, #2
 8000ff0:	4461      	add	r1, ip
 8000ff2:	e72e      	b.n	8000e52 <__udivmoddi4+0x126>
 8000ff4:	3e02      	subs	r6, #2
 8000ff6:	4462      	add	r2, ip
 8000ff8:	e6c6      	b.n	8000d88 <__udivmoddi4+0x5c>
 8000ffa:	f1a8 0802 	sub.w	r8, r8, #2
 8000ffe:	4461      	add	r1, ip
 8001000:	e76f      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001002:	3802      	subs	r0, #2
 8001004:	4462      	add	r2, ip
 8001006:	e7cb      	b.n	8000fa0 <__udivmoddi4+0x274>
 8001008:	3802      	subs	r0, #2
 800100a:	4461      	add	r1, ip
 800100c:	e77d      	b.n	8000f0a <__udivmoddi4+0x1de>
 800100e:	3e02      	subs	r6, #2
 8001010:	4461      	add	r1, ip
 8001012:	e7d9      	b.n	8000fc8 <__udivmoddi4+0x29c>
 8001014:	462e      	mov	r6, r5
 8001016:	e6d6      	b.n	8000dc6 <__udivmoddi4+0x9a>

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <set_mems_int_pin_a_exti>:
extern volatile HAL_StatusTypeDef ret_hal_status;
static void mems_int_pin_a_hardware_event_isr(void);
volatile int Mems_Interrupt = 0;

void set_mems_int_pin_a_exti(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	/* register event irq handler */
  ret_hal_status = HAL_EXTI_GetHandle(&hexti8, EXTI_LINE_8);
 8001020:	490d      	ldr	r1, [pc, #52]	; (8001058 <set_mems_int_pin_a_exti+0x3c>)
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <set_mems_int_pin_a_exti+0x40>)
 8001024:	f009 f94b 	bl	800a2be <HAL_EXTI_GetHandle>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <set_mems_int_pin_a_exti+0x44>)
 800102e:	701a      	strb	r2, [r3, #0]
  ret_hal_status = HAL_EXTI_RegisterCallback(&hexti8, HAL_EXTI_COMMON_CB_ID, mems_int_pin_a_hardware_event_isr);
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <set_mems_int_pin_a_exti+0x48>)
 8001032:	2100      	movs	r1, #0
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <set_mems_int_pin_a_exti+0x40>)
 8001036:	f009 f916 	bl	800a266 <HAL_EXTI_RegisterCallback>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <set_mems_int_pin_a_exti+0x44>)
 8001040:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2013      	movs	r0, #19
 8001048:	f007 f89b 	bl	8008182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 800104c:	2013      	movs	r0, #19
 800104e:	f007 f8b2 	bl	80081b6 <HAL_NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	06000008 	.word	0x06000008
 800105c:	20000000 	.word	0x20000000
 8001060:	20001dd0 	.word	0x20001dd0
 8001064:	08001069 	.word	0x08001069

08001068 <mems_int_pin_a_hardware_event_isr>:

static void mems_int_pin_a_hardware_event_isr(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

	MemsEventDetected = 1;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <mems_int_pin_a_hardware_event_isr+0x14>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]

}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20001dd1 	.word	0x20001dd1

08001080 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar (int ch)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	(void)HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	2201      	movs	r2, #1
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <__io_putchar+0x20>)
 8001092:	f011 fcfd 	bl	8012a90 <HAL_UART_Transmit>
	return ch;
 8001096:	687b      	ldr	r3, [r7, #4]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200014e4 	.word	0x200014e4

080010a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010aa:	f006 fb11 	bl	80076d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010ae:	f000 f84b 	bl	8001148 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80010b2:	f000 f8ae 	bl	8001212 <PeriphCommonClock_Config>

	/* Configure the System Power */
	SystemPower_Config();
 80010b6:	f000 f8f9 	bl	80012ac <SystemPower_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010ba:	f000 ff2b 	bl	8001f14 <MX_GPIO_Init>
	MX_GPDMA1_Init();
 80010be:	f000 fa45 	bl	800154c <MX_GPDMA1_Init>
	MX_ADC1_Init();
 80010c2:	f000 f8fb 	bl	80012bc <MX_ADC1_Init>
	MX_ADF1_Init();
 80010c6:	f000 f93f 	bl	8001348 <MX_ADF1_Init>
	MX_MDF1_Init();
 80010ca:	f000 f9a7 	bl	800141c <MX_MDF1_Init>
	MX_DAC1_Init();
 80010ce:	f000 f9f5 	bl	80014bc <MX_DAC1_Init>
	MX_I2C1_Init();
 80010d2:	f000 fa83 	bl	80015dc <MX_I2C1_Init>
	MX_I2C2_Init();
 80010d6:	f000 fac1 	bl	800165c <MX_I2C2_Init>
	MX_I2C3_Init();
 80010da:	f000 faff 	bl	80016dc <MX_I2C3_Init>
	MX_ICACHE_Init();
 80010de:	f000 fb3d 	bl	800175c <MX_ICACHE_Init>
	MX_RTC_Init();
 80010e2:	f000 fb4f 	bl	8001784 <MX_RTC_Init>
	MX_SAI1_Init();
 80010e6:	f000 fb9b 	bl	8001820 <MX_SAI1_Init>
	MX_SPI1_Init();
 80010ea:	f000 fc5f 	bl	80019ac <MX_SPI1_Init>
	MX_SPI2_Init();
 80010ee:	f000 fccd 	bl	8001a8c <MX_SPI2_Init>
	MX_SPI3_Init();
 80010f2:	f000 fd3d 	bl	8001b70 <MX_SPI3_Init>
	MX_TAMP_RTC_Init();
 80010f6:	f000 fdab 	bl	8001c50 <MX_TAMP_RTC_Init>
	MX_TIM3_Init();
 80010fa:	f000 fdef 	bl	8001cdc <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80010fe:	f000 fe41 	bl	8001d84 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001102:	f000 fe8d 	bl	8001e20 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001106:	f000 fed9 	bl	8001ebc <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */
	MX_USB_Device_Init();
 800110a:	f015 fb0b 	bl	8016724 <MX_USB_Device_Init>
	MX_CRC_Init();
 800110e:	f001 f94b 	bl	80023a8 <MX_CRC_Init>

	// CRC init needed to use AI on STM32
	HAL_CRC_Init(&hcrc);
 8001112:	480b      	ldr	r0, [pc, #44]	; (8001140 <main+0x9c>)
 8001114:	f007 f878 	bl	8008208 <HAL_CRC_Init>
	__HAL_RCC_CRC_CLK_ENABLE();
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <main+0xa0>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <main+0xa0>)
 8001120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <main+0xa0>)
 800112a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

	// Sensor app init
	sensor_init();
 8001136:	f001 f95f 	bl	80023f8 <sensor_init>

		/* USER CODE BEGIN 3 */
		/*HAL_Delay(500);
		size = sprintf(data_s, "Funziona l'USB!!!\n\r");
		CDC_Transmit_FS(( uint8_t * )data_s, size);*/
		sensor_process();
 800113a:	f001 f9d9 	bl	80024f0 <sensor_process>
 800113e:	e7fc      	b.n	800113a <main+0x96>
 8001140:	20001b10 	.word	0x20001b10
 8001144:	46020c00 	.word	0x46020c00

08001148 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b09e      	sub	sp, #120	; 0x78
 800114c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	2260      	movs	r2, #96	; 0x60
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f019 fd15 	bl	801ab86 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800116c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001170:	f00b f9ee 	bl	800c550 <HAL_PWREx_ControlVoltageScaling>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x36>
	{
		Error_Handler();
 800117a:	f001 f937 	bl	80023ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800117e:	232b      	movs	r3, #43	; 0x2b
 8001180:	61bb      	str	r3, [r7, #24]
			|RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001186:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800118e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001192:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001194:	2310      	movs	r3, #16
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001198:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a6:	2303      	movs	r3, #3
 80011a8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 10;
 80011b2:	230a      	movs	r3, #10
 80011b4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLP = 2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLR = 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80011c2:	230c      	movs	r3, #12
 80011c4:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00b fa70 	bl	800c6b4 <HAL_RCC_OscConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x96>
	{
		Error_Handler();
 80011da:	f001 f907 	bl	80023ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011de:	231f      	movs	r3, #31
 80011e0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e2:	2303      	movs	r3, #3
 80011e4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	2104      	movs	r1, #4
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00c f930 	bl	800d460 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8001206:	f001 f8f1 	bl	80023ec <Error_Handler>
	}
}
 800120a:	bf00      	nop
 800120c:	3778      	adds	r7, #120	; 0x78
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b0b2      	sub	sp, #200	; 0xc8
 8001216:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	22c8      	movs	r2, #200	; 0xc8
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f019 fcb1 	bl	801ab86 <memset>

	/** Initializes the common periph clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_MDF1|RCC_PERIPHCLK_ADF1
 8001224:	f44f 3260 	mov.w	r2, #229376	; 0x38000
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e9c7 2300 	strd	r2, r3, [r7]
			|RCC_PERIPHCLK_ADCDAC;
	PeriphClkInit.Mdf1ClockSelection = RCC_MDF1CLKSOURCE_PLL3;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_PLL3;
 8001236:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800123a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2;
 800123e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001242:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001246:	2303      	movs	r3, #3
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInit.PLL3.PLL3M = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.PLL3.PLL3N = 48;
 800124e:	2330      	movs	r3, #48	; 0x30
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInit.PLL3.PLL3P = 2;
 8001252:	2302      	movs	r3, #2
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.PLL3.PLL3Q = 25;
 8001256:	2319      	movs	r3, #25
 8001258:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.PLL3.PLL3R = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_1;
 800125e:	230c      	movs	r3, #12
 8001260:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVQ;
 8001266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 800126c:	2303      	movs	r3, #3
 800126e:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLL2.PLL2M = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLL2.PLL2N = 48;
 8001274:	2330      	movs	r3, #48	; 0x30
 8001276:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLL2.PLL2P = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLL2.PLL2Q = 7;
 800127c:	2307      	movs	r3, #7
 800127e:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLL2.PLL2R = 25;
 8001280:	2319      	movs	r3, #25
 8001282:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001284:	230c      	movs	r3, #12
 8001286:	623b      	str	r3, [r7, #32]
	PeriphClkInit.PLL2.PLL2FRACN = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 800128c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	4618      	mov	r0, r3
 8001296:	f00c fcb9 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <PeriphCommonClock_Config+0x92>
	{
		Error_Handler();
 80012a0:	f001 f8a4 	bl	80023ec <Error_Handler>
	}
}
 80012a4:	bf00      	nop
 80012a6:	37c8      	adds	r7, #200	; 0xc8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <SystemPower_Config>:
/**
 * @brief Power Configuration
 * @retval None
 */
static void SystemPower_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	HAL_PWREx_EnableVddIO2();
 80012b0:	f00b f9e0 	bl	800c674 <HAL_PWREx_EnableVddIO2>

	/*
	 * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
	 */
	HAL_PWREx_DisableUCPDDeadBattery();
 80012b4:	f00b f9ee 	bl	800c694 <HAL_PWREx_DisableUCPDDeadBattery>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_ADC1_Init+0x84>)
 80012c2:	4a20      	ldr	r2, [pc, #128]	; (8001344 <MX_ADC1_Init+0x88>)
 80012c4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_ADC1_Init+0x84>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_ADC1_Init+0x84>)
 80012ce:	2204      	movs	r2, #4
 80012d0:	609a      	str	r2, [r3, #8]
	hadc1.Init.GainCompensation = 0;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_ADC1_Init+0x84>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_ADC1_Init+0x84>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_ADC1_Init+0x84>)
 80012e0:	2204      	movs	r2, #4
 80012e2:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_ADC1_Init+0x84>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_ADC1_Init+0x84>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.NbrOfConversion = 1;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_ADC1_Init+0x84>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_ADC1_Init+0x84>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_ADC1_Init+0x84>)
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <MX_ADC1_Init+0x84>)
 800130a:	2200      	movs	r2, #0
 800130c:	669a      	str	r2, [r3, #104]	; 0x68
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_ADC1_Init+0x84>)
 8001310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_ADC1_Init+0x84>)
 8001318:	2200      	movs	r2, #0
 800131a:	651a      	str	r2, [r3, #80]	; 0x50
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_MDF;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_ADC1_Init+0x84>)
 800131e:	2202      	movs	r2, #2
 8001320:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MX_ADC1_Init+0x84>)
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_ADC1_Init+0x84>)
 800132c:	f006 fb30 	bl	8007990 <HAL_ADC_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0x7e>
	{
		Error_Handler();
 8001336:	f001 f859 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000b3c 	.word	0x20000b3c
 8001344:	42028000 	.word	0x42028000

08001348 <MX_ADF1_Init>:
 * @brief ADF1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADF1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	/* USER CODE END ADF1_Init 1 */

	/**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
	 */
	AdfHandle0.Instance = ADF1_Filter0;
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <MX_ADF1_Init+0xc8>)
 800134e:	4a31      	ldr	r2, [pc, #196]	; (8001414 <MX_ADF1_Init+0xcc>)
 8001350:	601a      	str	r2, [r3, #0]
	AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <MX_ADF1_Init+0xc8>)
 8001354:	2201      	movs	r2, #1
 8001356:	609a      	str	r2, [r3, #8]
	AdfHandle0.Init.CommonParam.OutputClock.Activation = ENABLE;
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <MX_ADF1_Init+0xc8>)
 800135a:	2201      	movs	r2, #1
 800135c:	731a      	strb	r2, [r3, #12]
	AdfHandle0.Init.CommonParam.OutputClock.Pins = MDF_OUTPUT_CLOCK_0;
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <MX_ADF1_Init+0xc8>)
 8001360:	2220      	movs	r2, #32
 8001362:	611a      	str	r2, [r3, #16]
	AdfHandle0.Init.CommonParam.OutputClock.Divider = 5;
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <MX_ADF1_Init+0xc8>)
 8001366:	2205      	movs	r2, #5
 8001368:	615a      	str	r2, [r3, #20]
	AdfHandle0.Init.CommonParam.OutputClock.Trigger.Activation = ENABLE;
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <MX_ADF1_Init+0xc8>)
 800136c:	2201      	movs	r2, #1
 800136e:	761a      	strb	r2, [r3, #24]
	AdfHandle0.Init.CommonParam.OutputClock.Trigger.Source = MDF_CLOCK_TRIG_TRGO;
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <MX_ADF1_Init+0xc8>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
	AdfHandle0.Init.CommonParam.OutputClock.Trigger.Edge = MDF_CLOCK_TRIG_FALLING_EDGE;
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <MX_ADF1_Init+0xc8>)
 8001378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137c:	621a      	str	r2, [r3, #32]
	AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <MX_ADF1_Init+0xc8>)
 8001380:	2201      	movs	r2, #1
 8001382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <MX_ADF1_Init+0xc8>)
 8001388:	2210      	movs	r2, #16
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
	AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <MX_ADF1_Init+0xc8>)
 800138e:	2200      	movs	r2, #0
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
	AdfHandle0.Init.SerialInterface.Threshold = 31;
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_ADF1_Init+0xc8>)
 8001394:	221f      	movs	r2, #31
 8001396:	631a      	str	r2, [r3, #48]	; 0x30
	AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <MX_ADF1_Init+0xc8>)
 800139a:	2201      	movs	r2, #1
 800139c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 800139e:	481c      	ldr	r0, [pc, #112]	; (8001410 <MX_ADF1_Init+0xc8>)
 80013a0:	f009 fc58 	bl	800ac54 <HAL_MDF_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADF1_Init+0x66>
	{
		Error_Handler();
 80013aa:	f001 f81f 	bl	80023ec <Error_Handler>
	/**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
	 */
	AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
	AdfFilterConfig0.Delay = 0;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
	AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC5;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013bc:	2250      	movs	r2, #80	; 0x50
 80013be:	609a      	str	r2, [r3, #8]
	AdfFilterConfig0.DecimationRatio = 16;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013c2:	2210      	movs	r2, #16
 80013c4:	60da      	str	r2, [r3, #12]
	AdfFilterConfig0.Gain = 1;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	615a      	str	r2, [r3, #20]
	AdfFilterConfig0.ReshapeFilter.Activation = ENABLE;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	761a      	strb	r2, [r3, #24]
	AdfFilterConfig0.ReshapeFilter.DecimationRatio = MDF_RSF_DECIMATION_RATIO_4;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	61da      	str	r2, [r3, #28]
	AdfFilterConfig0.HighPassFilter.Activation = ENABLE;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]
	AdfFilterConfig0.HighPassFilter.CutOffFrequency = MDF_HPF_CUTOFF_0_000625FPCM;
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
	AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	AdfFilterConfig0.AcquisitionMode = MDF_MODE_SYNC_CONT;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013f0:	2220      	movs	r2, #32
 80013f2:	665a      	str	r2, [r3, #100]	; 0x64
	AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	669a      	str	r2, [r3, #104]	; 0x68
	AdfFilterConfig0.DiscardSamples = 0;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_ADF1_Init+0xd0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	66da      	str	r2, [r3, #108]	; 0x6c
	AdfFilterConfig0.Trigger.Source = MDF_CLOCK_TRIG_TRGO;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <MX_ADF1_Init+0xd0>)
 8001402:	2200      	movs	r2, #0
 8001404:	671a      	str	r2, [r3, #112]	; 0x70
	AdfFilterConfig0.Trigger.Edge = MDF_FILTER_TRIG_RISING_EDGE;
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <MX_ADF1_Init+0xd0>)
 8001408:	2200      	movs	r2, #0
 800140a:	675a      	str	r2, [r3, #116]	; 0x74
	/* USER CODE BEGIN ADF1_Init 2 */

	/* USER CODE END ADF1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000bc8 	.word	0x20000bc8
 8001414:	46024080 	.word	0x46024080
 8001418:	20000c0c 	.word	0x20000c0c

0800141c <MX_MDF1_Init>:
 * @brief MDF1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_MDF1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	/* USER CODE END MDF1_Init 1 */

	/**
    MdfHandle0 structure initialization and HAL_MDF_Init function call
	 */
	MdfHandle0.Instance = MDF1_Filter0;
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <MX_MDF1_Init+0x94>)
 8001422:	4a24      	ldr	r2, [pc, #144]	; (80014b4 <MX_MDF1_Init+0x98>)
 8001424:	601a      	str	r2, [r3, #0]
	MdfHandle0.Init.CommonParam.InterleavedFilters = 0;
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <MX_MDF1_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
	MdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <MX_MDF1_Init+0x94>)
 800142e:	2201      	movs	r2, #1
 8001430:	609a      	str	r2, [r3, #8]
	MdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_MDF1_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	731a      	strb	r2, [r3, #12]
	MdfHandle0.Init.SerialInterface.Activation = DISABLE;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_MDF1_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	if (HAL_MDF_Init(&MdfHandle0) != HAL_OK)
 8001440:	481b      	ldr	r0, [pc, #108]	; (80014b0 <MX_MDF1_Init+0x94>)
 8001442:	f009 fc07 	bl	800ac54 <HAL_MDF_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_MDF1_Init+0x34>
	{
		Error_Handler();
 800144c:	f000 ffce 	bl	80023ec <Error_Handler>
	/**
    MdfFilterConfig0, MdfOldConfig0 and/or MdfScdConfig0 structures initialization

    WARNING : only structures are filled, no specific init function call for filter
	 */
	MdfFilterConfig0.DataSource = MDF_DATA_SOURCE_ADCITF1;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_MDF1_Init+0x9c>)
 8001452:	2202      	movs	r2, #2
 8001454:	601a      	str	r2, [r3, #0]
	MdfFilterConfig0.Delay = 0;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_MDF1_Init+0x9c>)
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
	MdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC5;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_MDF1_Init+0x9c>)
 800145e:	2250      	movs	r2, #80	; 0x50
 8001460:	609a      	str	r2, [r3, #8]
	MdfFilterConfig0.DecimationRatio = 4;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_MDF1_Init+0x9c>)
 8001464:	2204      	movs	r2, #4
 8001466:	60da      	str	r2, [r3, #12]
	MdfFilterConfig0.Offset = 0;
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_MDF1_Init+0x9c>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
	MdfFilterConfig0.Gain = 4;
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_MDF1_Init+0x9c>)
 8001470:	2204      	movs	r2, #4
 8001472:	615a      	str	r2, [r3, #20]
	MdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_MDF1_Init+0x9c>)
 8001476:	2200      	movs	r2, #0
 8001478:	761a      	strb	r2, [r3, #24]
	MdfFilterConfig0.HighPassFilter.Activation = ENABLE;
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_MDF1_Init+0x9c>)
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2020 	strb.w	r2, [r3, #32]
	MdfFilterConfig0.HighPassFilter.CutOffFrequency = MDF_HPF_CUTOFF_0_000625FPCM;
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <MX_MDF1_Init+0x9c>)
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
	MdfFilterConfig0.Integrator.Activation = DISABLE;
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_MDF1_Init+0x9c>)
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	MdfFilterConfig0.SoundActivity.Activation = DISABLE;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_MDF1_Init+0x9c>)
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	MdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_MDF1_Init+0x9c>)
 800149a:	2200      	movs	r2, #0
 800149c:	665a      	str	r2, [r3, #100]	; 0x64
	MdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_MDF1_Init+0x9c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	669a      	str	r2, [r3, #104]	; 0x68
	MdfFilterConfig0.DiscardSamples = 0;
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <MX_MDF1_Init+0x9c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	66da      	str	r2, [r3, #108]	; 0x6c
	/* USER CODE BEGIN MDF1_Init 2 */

	/* USER CODE END MDF1_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000c88 	.word	0x20000c88
 80014b4:	40025080 	.word	0x40025080
 80014b8:	20000ccc 	.word	0x20000ccc

080014bc <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	; 0x38
 80014c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	2230      	movs	r2, #48	; 0x30
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f019 fb5b 	bl	801ab86 <memset>
	DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_DAC1_Init+0x88>)
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <MX_DAC1_Init+0x8c>)
 80014d8:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014da:	481a      	ldr	r0, [pc, #104]	; (8001544 <MX_DAC1_Init+0x88>)
 80014dc:	f006 ff88 	bl	80083f0 <HAL_DAC_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_DAC1_Init+0x2e>
	{
		Error_Handler();
 80014e6:	f000 ff81 	bl	80023ec <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	743b      	strb	r3, [r7, #16]
	sConfig.DAC_SignedFormat = DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	747b      	strb	r3, [r7, #17]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001502:	2304      	movs	r3, #4
 8001504:	623b      	str	r3, [r7, #32]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	480c      	ldr	r0, [pc, #48]	; (8001544 <MX_DAC1_Init+0x88>)
 8001514:	f006 ff8e 	bl	8008434 <HAL_DAC_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_DAC1_Init+0x66>
	{
		Error_Handler();
 800151e:	f000 ff65 	bl	80023ec <Error_Handler>
	}

	/** Configure Autonomous Mode
	 */
	sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
	if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_DAC1_Init+0x88>)
 800152c:	f007 f91c 	bl	8008768 <HAL_DACEx_SetConfigAutonomousMode>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_DAC1_Init+0x7e>
	{
		Error_Handler();
 8001536:	f000 ff59 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	3738      	adds	r7, #56	; 0x38
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000eb0 	.word	0x20000eb0
 8001548:	46021800 	.word	0x46021800

0800154c <MX_GPDMA1_Init>:
 * @brief GPDMA1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPDMA1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN GPDMA1_Init 0 */

	/* USER CODE END GPDMA1_Init 0 */

	/* Peripheral clock enable */
	__HAL_RCC_GPDMA1_CLK_ENABLE();
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_GPDMA1_Init+0x8c>)
 8001554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001558:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <MX_GPDMA1_Init+0x8c>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_GPDMA1_Init+0x8c>)
 8001564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

	/* GPDMA1 interrupt Init */
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	201d      	movs	r0, #29
 8001576:	f006 fe04 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800157a:	201d      	movs	r0, #29
 800157c:	f006 fe1b 	bl	80081b6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	201e      	movs	r0, #30
 8001586:	f006 fdfc 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 800158a:	201e      	movs	r0, #30
 800158c:	f006 fe13 	bl	80081b6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	201f      	movs	r0, #31
 8001596:	f006 fdf4 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 800159a:	201f      	movs	r0, #31
 800159c:	f006 fe0b 	bl	80081b6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	2020      	movs	r0, #32
 80015a6:	f006 fdec 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80015aa:	2020      	movs	r0, #32
 80015ac:	f006 fe03 	bl	80081b6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2021      	movs	r0, #33	; 0x21
 80015b6:	f006 fde4 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 80015ba:	2021      	movs	r0, #33	; 0x21
 80015bc:	f006 fdfb 	bl	80081b6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2022      	movs	r0, #34	; 0x22
 80015c6:	f006 fddc 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 80015ca:	2022      	movs	r0, #34	; 0x22
 80015cc:	f006 fdf3 	bl	80081b6 <HAL_NVIC_EnableIRQ>
	/* USER CODE END GPDMA1_Init 1 */
	/* USER CODE BEGIN GPDMA1_Init 2 */

	/* USER CODE END GPDMA1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	46020c00 	.word	0x46020c00

080015dc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_I2C1_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00F07BFF;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <MX_I2C1_Init+0x7c>)
 80015ea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_I2C1_Init+0x74>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_I2C1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_I2C1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_I2C1_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2C1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001616:	480e      	ldr	r0, [pc, #56]	; (8001650 <MX_I2C1_Init+0x74>)
 8001618:	f009 f9c5 	bl	800a9a6 <HAL_I2C_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001622:	f000 fee3 	bl	80023ec <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001626:	2100      	movs	r1, #0
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <MX_I2C1_Init+0x74>)
 800162a:	f009 fa4b 	bl	800aac4 <HAL_I2CEx_ConfigAnalogFilter>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001634:	f000 feda 	bl	80023ec <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001638:	2100      	movs	r1, #0
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_I2C1_Init+0x74>)
 800163c:	f009 fa8d 	bl	800ab5a <HAL_I2CEx_ConfigDigitalFilter>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001646:	f000 fed1 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000ec4 	.word	0x20000ec4
 8001654:	40005400 	.word	0x40005400
 8001658:	00f07bff 	.word	0x00f07bff

0800165c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <MX_I2C2_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00F07BFF;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001668:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <MX_I2C2_Init+0x7c>)
 800166a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_I2C2_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001674:	2201      	movs	r2, #1
 8001676:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_I2C2_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_I2C2_Init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001698:	f009 f985 	bl	800a9a6 <HAL_I2C_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 80016a2:	f000 fea3 	bl	80023ec <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <MX_I2C2_Init+0x74>)
 80016aa:	f009 fa0b 	bl	800aac4 <HAL_I2CEx_ConfigAnalogFilter>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 80016b4:	f000 fe9a 	bl	80023ec <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016b8:	2100      	movs	r1, #0
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_I2C2_Init+0x74>)
 80016bc:	f009 fa4d 	bl	800ab5a <HAL_I2CEx_ConfigDigitalFilter>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 80016c6:	f000 fe91 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000f10 	.word	0x20000f10
 80016d4:	40005800 	.word	0x40005800
 80016d8:	00f07bff 	.word	0x00f07bff

080016dc <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_I2C3_Init+0x74>)
 80016e2:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <MX_I2C3_Init+0x78>)
 80016e4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00F07BFF;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_I2C3_Init+0x74>)
 80016e8:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <MX_I2C3_Init+0x7c>)
 80016ea:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_I2C3_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_I2C3_Init+0x74>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_I2C3_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_I2C3_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_I2C3_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_I2C3_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_I2C3_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <MX_I2C3_Init+0x74>)
 8001718:	f009 f945 	bl	800a9a6 <HAL_I2C_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001722:	f000 fe63 	bl	80023ec <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001726:	2100      	movs	r1, #0
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <MX_I2C3_Init+0x74>)
 800172a:	f009 f9cb 	bl	800aac4 <HAL_I2CEx_ConfigAnalogFilter>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001734:	f000 fe5a 	bl	80023ec <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001738:	2100      	movs	r1, #0
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_I2C3_Init+0x74>)
 800173c:	f009 fa0d 	bl	800ab5a <HAL_I2CEx_ConfigDigitalFilter>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8001746:	f000 fe51 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000f5c 	.word	0x20000f5c
 8001754:	46002800 	.word	0x46002800
 8001758:	00f07bff 	.word	0x00f07bff

0800175c <MX_ICACHE_Init>:
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	 */
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001760:	2000      	movs	r0, #0
 8001762:	f009 fa47 	bl	800abf4 <HAL_ICACHE_ConfigAssociativityMode>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_ICACHE_Init+0x14>
	{
		Error_Handler();
 800176c:	f000 fe3e 	bl	80023ec <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK)
 8001770:	f009 fa60 	bl	800ac34 <HAL_ICACHE_Enable>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_ICACHE_Init+0x22>
	{
		Error_Handler();
 800177a:	f000 fe37 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_PrivilegeStateTypeDef privilegeState = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	619a      	str	r2, [r3, #24]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <MX_RTC_Init+0x94>)
 800179e:	4a1f      	ldr	r2, [pc, #124]	; (800181c <MX_RTC_Init+0x98>)
 80017a0:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <MX_RTC_Init+0x94>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_RTC_Init+0x94>)
 80017aa:	227f      	movs	r2, #127	; 0x7f
 80017ac:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_RTC_Init+0x94>)
 80017b0:	22ff      	movs	r2, #255	; 0xff
 80017b2:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_RTC_Init+0x94>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_RTC_Init+0x94>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_RTC_Init+0x94>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_RTC_Init+0x94>)
 80017c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017cc:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_RTC_Init+0x94>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <MX_RTC_Init+0x94>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017da:	480f      	ldr	r0, [pc, #60]	; (8001818 <MX_RTC_Init+0x94>)
 80017dc:	f00e fea2 	bl	8010524 <HAL_RTC_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_RTC_Init+0x66>
	{
		Error_Handler();
 80017e6:	f000 fe01 	bl	80023ec <Error_Handler>
	}
	privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
	privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
	privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
	privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
	if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <MX_RTC_Init+0x94>)
 8001800:	f00f f816 	bl	8010830 <HAL_RTCEx_PrivilegeModeSet>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_RTC_Init+0x8a>
	{
		Error_Handler();
 800180a:	f000 fdef 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20001098 	.word	0x20001098
 800181c:	46007800 	.word	0x46007800

08001820 <MX_SAI1_Init>:
 * @brief SAI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	/* USER CODE END SAI1_Init 0 */

	/* USER CODE BEGIN SAI1_Init 1 */

	/* USER CODE END SAI1_Init 1 */
	hsai_BlockA1.Instance = SAI1_Block_A;
 8001824:	4b5c      	ldr	r3, [pc, #368]	; (8001998 <MX_SAI1_Init+0x178>)
 8001826:	4a5d      	ldr	r2, [pc, #372]	; (800199c <MX_SAI1_Init+0x17c>)
 8001828:	601a      	str	r2, [r3, #0]
	hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800182a:	4b5b      	ldr	r3, [pc, #364]	; (8001998 <MX_SAI1_Init+0x178>)
 800182c:	2200      	movs	r2, #0
 800182e:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001830:	4b59      	ldr	r3, [pc, #356]	; (8001998 <MX_SAI1_Init+0x178>)
 8001832:	2200      	movs	r2, #0
 8001834:	605a      	str	r2, [r3, #4]
	hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001836:	4b58      	ldr	r3, [pc, #352]	; (8001998 <MX_SAI1_Init+0x178>)
 8001838:	2240      	movs	r2, #64	; 0x40
 800183a:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800183c:	4b56      	ldr	r3, [pc, #344]	; (8001998 <MX_SAI1_Init+0x178>)
 800183e:	2200      	movs	r2, #0
 8001840:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001842:	4b55      	ldr	r3, [pc, #340]	; (8001998 <MX_SAI1_Init+0x178>)
 8001844:	2200      	movs	r2, #0
 8001846:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <MX_SAI1_Init+0x178>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
	hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800184e:	4b52      	ldr	r3, [pc, #328]	; (8001998 <MX_SAI1_Init+0x178>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
	hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <MX_SAI1_Init+0x178>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
	hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800185a:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <MX_SAI1_Init+0x178>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
	hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001860:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <MX_SAI1_Init+0x178>)
 8001862:	4a4f      	ldr	r2, [pc, #316]	; (80019a0 <MX_SAI1_Init+0x180>)
 8001864:	621a      	str	r2, [r3, #32]
	hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001866:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <MX_SAI1_Init+0x178>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
	hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 800186c:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <MX_SAI1_Init+0x178>)
 800186e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001872:	611a      	str	r2, [r3, #16]
	hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001874:	4b48      	ldr	r3, [pc, #288]	; (8001998 <MX_SAI1_Init+0x178>)
 8001876:	2200      	movs	r2, #0
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <MX_SAI1_Init+0x178>)
 800187c:	2200      	movs	r2, #0
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001880:	4b45      	ldr	r3, [pc, #276]	; (8001998 <MX_SAI1_Init+0x178>)
 8001882:	2200      	movs	r2, #0
 8001884:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8001886:	4b44      	ldr	r3, [pc, #272]	; (8001998 <MX_SAI1_Init+0x178>)
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 800188e:	4b42      	ldr	r3, [pc, #264]	; (8001998 <MX_SAI1_Init+0x178>)
 8001890:	2201      	movs	r2, #1
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <MX_SAI1_Init+0x178>)
 8001896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA1.FrameInit.FrameLength = 8;
 800189c:	4b3e      	ldr	r3, [pc, #248]	; (8001998 <MX_SAI1_Init+0x178>)
 800189e:	2208      	movs	r2, #8
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <MX_SAI1_Init+0x178>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018a8:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <MX_SAI1_Init+0x178>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <MX_SAI1_Init+0x178>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	661a      	str	r2, [r3, #96]	; 0x60
	hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <MX_SAI1_Init+0x178>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	665a      	str	r2, [r3, #100]	; 0x64
	hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <MX_SAI1_Init+0x178>)
 80018bc:	2200      	movs	r2, #0
 80018be:	669a      	str	r2, [r3, #104]	; 0x68
	hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018c0:	4b35      	ldr	r3, [pc, #212]	; (8001998 <MX_SAI1_Init+0x178>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	66da      	str	r2, [r3, #108]	; 0x6c
	hsai_BlockA1.SlotInit.SlotNumber = 1;
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <MX_SAI1_Init+0x178>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	671a      	str	r2, [r3, #112]	; 0x70
	hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <MX_SAI1_Init+0x178>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80018d2:	4831      	ldr	r0, [pc, #196]	; (8001998 <MX_SAI1_Init+0x178>)
 80018d4:	f00e ffda 	bl	801088c <HAL_SAI_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_SAI1_Init+0xc2>
	{
		Error_Handler();
 80018de:	f000 fd85 	bl	80023ec <Error_Handler>
	}
	hsai_BlockB1.Instance = SAI1_Block_B;
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <MX_SAI1_Init+0x184>)
 80018e4:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <MX_SAI1_Init+0x188>)
 80018e6:	601a      	str	r2, [r3, #0]
	hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80018e8:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <MX_SAI1_Init+0x184>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <MX_SAI1_Init+0x184>)
 80018f0:	2203      	movs	r2, #3
 80018f2:	605a      	str	r2, [r3, #4]
	hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <MX_SAI1_Init+0x184>)
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <MX_SAI1_Init+0x184>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001900:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001902:	2200      	movs	r2, #0
 8001904:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001906:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001908:	2201      	movs	r2, #1
 800190a:	609a      	str	r2, [r3, #8]
	hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800190c:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <MX_SAI1_Init+0x184>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
	hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001912:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001914:	2200      	movs	r2, #0
 8001916:	61da      	str	r2, [r3, #28]
	hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <MX_SAI1_Init+0x184>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
	hsai_BlockB1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001920:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001924:	611a      	str	r2, [r3, #16]
	hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001928:	2200      	movs	r2, #0
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <MX_SAI1_Init+0x184>)
 800192e:	2200      	movs	r2, #0
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001934:	2200      	movs	r2, #0
 8001936:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <MX_SAI1_Init+0x184>)
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001942:	2201      	movs	r2, #1
 8001944:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB1.FrameInit.FrameLength = 8;
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001950:	2208      	movs	r2, #8
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001956:	2201      	movs	r2, #1
 8001958:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_SAI1_Init+0x184>)
 800195c:	2200      	movs	r2, #0
 800195e:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001962:	2200      	movs	r2, #0
 8001964:	661a      	str	r2, [r3, #96]	; 0x60
	hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001968:	2200      	movs	r2, #0
 800196a:	665a      	str	r2, [r3, #100]	; 0x64
	hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <MX_SAI1_Init+0x184>)
 800196e:	2200      	movs	r2, #0
 8001970:	669a      	str	r2, [r3, #104]	; 0x68
	hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001974:	2200      	movs	r2, #0
 8001976:	66da      	str	r2, [r3, #108]	; 0x6c
	hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <MX_SAI1_Init+0x184>)
 800197a:	2201      	movs	r2, #1
 800197c:	671a      	str	r2, [r3, #112]	; 0x70
	hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001980:	2200      	movs	r2, #0
 8001982:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001984:	4807      	ldr	r0, [pc, #28]	; (80019a4 <MX_SAI1_Init+0x184>)
 8001986:	f00e ff81 	bl	801088c <HAL_SAI_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_SAI1_Init+0x174>
	{
		Error_Handler();
 8001990:	f000 fd2c 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN SAI1_Init 2 */

	/* USER CODE END SAI1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200010c8 	.word	0x200010c8
 800199c:	40015404 	.word	0x40015404
 80019a0:	0002ee00 	.word	0x0002ee00
 80019a4:	20001160 	.word	0x20001160
 80019a8:	40015424 	.word	0x40015424

080019ac <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 0 */

	/* USER CODE END SPI1_Init 0 */

	SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80019bc:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <MX_SPI1_Init+0xd8>)
 80019be:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <MX_SPI1_Init+0xdc>)
 80019c0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80019c2:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <MX_SPI1_Init+0xd8>)
 80019c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019c8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ca:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <MX_SPI1_Init+0xd8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d0:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <MX_SPI1_Init+0xd8>)
 80019d2:	2207      	movs	r2, #7
 80019d4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019d6:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <MX_SPI1_Init+0xd8>)
 80019d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019dc:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <MX_SPI1_Init+0xd8>)
 80019e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019e4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <MX_SPI1_Init+0xd8>)
 80019e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019ec:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <MX_SPI1_Init+0xd8>)
 80019f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019f4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <MX_SPI1_Init+0xd8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <MX_SPI1_Init+0xd8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x7;
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	659a      	str	r2, [r3, #88]	; 0x58
	hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	65da      	str	r2, [r3, #92]	; 0x5c
	hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a4a:	480e      	ldr	r0, [pc, #56]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a4c:	f00f f94c 	bl	8010ce8 <HAL_SPI_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_SPI1_Init+0xae>
	{
		Error_Handler();
 8001a56:	f000 fcc9 	bl	80023ec <Error_Handler>
	}
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001a5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a62:	60bb      	str	r3, [r7, #8]
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
	if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_SPI1_Init+0xd8>)
 8001a6e:	f010 fb82 	bl	8012176 <HAL_SPIEx_SetConfigAutonomousMode>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_SPI1_Init+0xd0>
	{
		Error_Handler();
 8001a78:	f000 fcb8 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200011f8 	.word	0x200011f8
 8001a88:	40013000 	.word	0x40013000

08001a8c <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 0 */

	/* USER CODE END SPI2_Init 0 */

	SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001a9e:	4a32      	ldr	r2, [pc, #200]	; (8001b68 <MX_SPI2_Init+0xdc>)
 8001aa0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001aa2:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001aa4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001aa8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001abc:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001ac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ac4:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ac6:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001ac8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001acc:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad4:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad6:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x7;
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001aea:	2207      	movs	r2, #7
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	659a      	str	r2, [r3, #88]	; 0x58
	hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	65da      	str	r2, [r3, #92]	; 0x5c
	hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b2a:	480e      	ldr	r0, [pc, #56]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001b2c:	f00f f8dc 	bl	8010ce8 <HAL_SPI_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_SPI2_Init+0xae>
	{
		Error_Handler();
 8001b36:	f000 fc59 	bl	80023ec <Error_Handler>
	}
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <MX_SPI2_Init+0xe0>)
 8001b40:	60bb      	str	r3, [r7, #8]
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
	if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <MX_SPI2_Init+0xd8>)
 8001b4c:	f010 fb13 	bl	8012176 <HAL_SPIEx_SetConfigAutonomousMode>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_SPI2_Init+0xce>
	{
		Error_Handler();
 8001b56:	f000 fc49 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20001288 	.word	0x20001288
 8001b68:	40003800 	.word	0x40003800
 8001b6c:	10010000 	.word	0x10010000

08001b70 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 0 */

	/* USER CODE END SPI3_Init 0 */

	SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001b82:	4a32      	ldr	r2, [pc, #200]	; (8001c4c <MX_SPI3_Init+0xdc>)
 8001b84:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b86:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001b88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b8c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b94:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001b96:	2207      	movs	r2, #7
 8001b98:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001b9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba0:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ba2:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001ba4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ba8:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bb0:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bb2:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bb4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001bb8:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x7;
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bce:	2207      	movs	r2, #7
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	659a      	str	r2, [r3, #88]	; 0x58
	hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	65da      	str	r2, [r3, #92]	; 0x5c
	hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c0e:	480e      	ldr	r0, [pc, #56]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001c10:	f00f f86a 	bl	8010ce8 <HAL_SPI_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_SPI3_Init+0xae>
	{
		Error_Handler();
 8001c1a:	f000 fbe7 	bl	80023ec <Error_Handler>
	}
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001c22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c26:	60bb      	str	r3, [r7, #8]
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
	if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_SPI3_Init+0xd8>)
 8001c32:	f010 faa0 	bl	8012176 <HAL_SPIEx_SetConfigAutonomousMode>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_SPI3_Init+0xd0>
	{
		Error_Handler();
 8001c3c:	f000 fbd6 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20001318 	.word	0x20001318
 8001c4c:	46002000 	.word	0x46002000

08001c50 <MX_TAMP_RTC_Init>:
 * @brief TAMP Initialization Function
 * @param None
 * @retval None
 */
static void MX_TAMP_RTC_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b090      	sub	sp, #64	; 0x40
 8001c54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TAMP_Init 0 */

	/* USER CODE END TAMP_Init 0 */

	RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]
 8001c66:	615a      	str	r2, [r3, #20]
 8001c68:	619a      	str	r2, [r3, #24]
	RTC_TamperTypeDef sTamper = {0};
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	2224      	movs	r2, #36	; 0x24
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f018 ff88 	bl	801ab86 <memset>

	/* USER CODE END TAMP_Init 1 */

	/** Enable the RTC Active Tamper
	 */
	privilegeState.tampPrivilegeFull = TAMP_PRIVILEGE_FULL_YES;
 8001c76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	privilegeState.MonotonicCounterPrivilege = TAMP_MONOTONIC_CNT_PRIVILEGE_NO;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c84:	4619      	mov	r1, r3
 8001c86:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <MX_TAMP_RTC_Init+0x88>)
 8001c88:	f00e fdd2 	bl	8010830 <HAL_RTCEx_PrivilegeModeSet>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TAMP_RTC_Init+0x46>
	{
		Error_Handler();
 8001c92:	f000 fbab 	bl	80023ec <Error_Handler>
	}

	/** Enable the RTC Tamper 1
	 */
	sTamper.Tamper = RTC_TAMPER_1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	603b      	str	r3, [r7, #0]
	sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
	sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
	sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
	sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
	sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
	sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
	sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
	sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8001cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cba:	623b      	str	r3, [r7, #32]
	if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_TAMP_RTC_Init+0x88>)
 8001cc2:	f00e fd41 	bl	8010748 <HAL_RTCEx_SetTamper>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TAMP_RTC_Init+0x80>
	{
		Error_Handler();
 8001ccc:	f000 fb8e 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN TAMP_Init 2 */

	/* USER CODE END TAMP_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3740      	adds	r7, #64	; 0x40
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20001098 	.word	0x20001098

08001cdc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <MX_TIM3_Init+0xa0>)
 8001cfc:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <MX_TIM3_Init+0xa4>)
 8001cfe:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <MX_TIM3_Init+0xa0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <MX_TIM3_Init+0xa0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4.294967295E9;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <MX_TIM3_Init+0xa0>)
 8001d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d12:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <MX_TIM3_Init+0xa0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <MX_TIM3_Init+0xa0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001d20:	4816      	ldr	r0, [pc, #88]	; (8001d7c <MX_TIM3_Init+0xa0>)
 8001d22:	f010 fa69 	bl	80121f8 <HAL_TIM_IC_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8001d2c:	f000 fb5e 	bl	80023ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	480f      	ldr	r0, [pc, #60]	; (8001d7c <MX_TIM3_Init+0xa0>)
 8001d40:	f010 fd94 	bl	801286c <HAL_TIMEx_MasterConfigSynchronization>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM3_Init+0x72>
	{
		Error_Handler();
 8001d4a:	f000 fb4f 	bl	80023ec <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d52:	2301      	movs	r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2200      	movs	r2, #0
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_TIM3_Init+0xa0>)
 8001d66:	f010 fa9e 	bl	80122a6 <HAL_TIM_IC_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 8001d70:	f000 fb3c 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20001498 	.word	0x20001498
 8001d80:	40000400 	.word	0x40000400

08001d84 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001d88:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001d8a:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <MX_USART2_UART_Init+0x98>)
 8001d8c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 921600;
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001d90:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001d94:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001daa:	220c      	movs	r2, #12
 8001dac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db4:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dce:	4812      	ldr	r0, [pc, #72]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001dd0:	f010 fe0e 	bl	80129f0 <HAL_UART_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_USART2_UART_Init+0x5a>
	{
		Error_Handler();
 8001dda:	f000 fb07 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dde:	2100      	movs	r1, #0
 8001de0:	480d      	ldr	r0, [pc, #52]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001de2:	f011 fa8b 	bl	80132fc <HAL_UARTEx_SetTxFifoThreshold>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_USART2_UART_Init+0x6c>
	{
		Error_Handler();
 8001dec:	f000 fafe 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001df0:	2100      	movs	r1, #0
 8001df2:	4809      	ldr	r0, [pc, #36]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001df4:	f011 fac0 	bl	8013378 <HAL_UARTEx_SetRxFifoThreshold>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USART2_UART_Init+0x7e>
	{
		Error_Handler();
 8001dfe:	f000 faf5 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_USART2_UART_Init+0x94>)
 8001e04:	f011 fa41 	bl	801328a <HAL_UARTEx_DisableFifoMode>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_USART2_UART_Init+0x8e>
	{
		Error_Handler();
 8001e0e:	f000 faed 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200014e4 	.word	0x200014e4
 8001e1c:	40004400 	.word	0x40004400

08001e20 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e26:	4a24      	ldr	r2, [pc, #144]	; (8001eb8 <MX_USART3_UART_Init+0x98>)
 8001e28:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e30:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e46:	220c      	movs	r2, #12
 8001e48:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e50:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e6a:	4812      	ldr	r0, [pc, #72]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e6c:	f010 fdc0 	bl	80129f0 <HAL_UART_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USART3_UART_Init+0x5a>
	{
		Error_Handler();
 8001e76:	f000 fab9 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e7e:	f011 fa3d 	bl	80132fc <HAL_UARTEx_SetTxFifoThreshold>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_USART3_UART_Init+0x6c>
	{
		Error_Handler();
 8001e88:	f000 fab0 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001e90:	f011 fa72 	bl	8013378 <HAL_UARTEx_SetRxFifoThreshold>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART3_UART_Init+0x7e>
	{
		Error_Handler();
 8001e9a:	f000 faa7 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <MX_USART3_UART_Init+0x94>)
 8001ea0:	f011 f9f3 	bl	801328a <HAL_UARTEx_DisableFifoMode>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_USART3_UART_Init+0x8e>
	{
		Error_Handler();
 8001eaa:	f000 fa9f 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20001574 	.word	0x20001574
 8001eb8:	40004800 	.word	0x40004800

08001ebc <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ec2:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8001ec4:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ec8:	2206      	movs	r2, #6
 8001eca:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ece:	2202      	movs	r2, #2
 8001ed0:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ef8:	f009 f848 	bl	800af8c <HAL_PCD_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_USB_OTG_FS_PCD_Init+0x4a>
	{
		Error_Handler();
 8001f02:	f000 fa73 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20001604 	.word	0x20001604
 8001f10:	42040000 	.word	0x42040000

08001f14 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08e      	sub	sp, #56	; 0x38
 8001f18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001f2a:	4bbe      	ldr	r3, [pc, #760]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f30:	4abc      	ldr	r2, [pc, #752]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f32:	f043 0310 	orr.w	r3, r3, #16
 8001f36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f3a:	4bba      	ldr	r3, [pc, #744]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	623b      	str	r3, [r7, #32]
 8001f46:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001f48:	4bb6      	ldr	r3, [pc, #728]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f4e:	4ab5      	ldr	r2, [pc, #724]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f58:	4bb2      	ldr	r3, [pc, #712]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001f66:	4baf      	ldr	r3, [pc, #700]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f6c:	4aad      	ldr	r2, [pc, #692]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f76:	4bab      	ldr	r3, [pc, #684]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	4ba7      	ldr	r3, [pc, #668]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f8a:	4aa6      	ldr	r2, [pc, #664]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f94:	4ba3      	ldr	r3, [pc, #652]	; (8002224 <MX_GPIO_Init+0x310>)
 8001f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4ba0      	ldr	r3, [pc, #640]	; (8002224 <MX_GPIO_Init+0x310>)
 8001fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fa8:	4a9e      	ldr	r2, [pc, #632]	; (8002224 <MX_GPIO_Init+0x310>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fb2:	4b9c      	ldr	r3, [pc, #624]	; (8002224 <MX_GPIO_Init+0x310>)
 8001fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001fc0:	4b98      	ldr	r3, [pc, #608]	; (8002224 <MX_GPIO_Init+0x310>)
 8001fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fc6:	4a97      	ldr	r2, [pc, #604]	; (8002224 <MX_GPIO_Init+0x310>)
 8001fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fcc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fd0:	4b94      	ldr	r3, [pc, #592]	; (8002224 <MX_GPIO_Init+0x310>)
 8001fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4b91      	ldr	r3, [pc, #580]	; (8002224 <MX_GPIO_Init+0x310>)
 8001fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe4:	4a8f      	ldr	r2, [pc, #572]	; (8002224 <MX_GPIO_Init+0x310>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fee:	4b8d      	ldr	r3, [pc, #564]	; (8002224 <MX_GPIO_Init+0x310>)
 8001ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffc:	4b89      	ldr	r3, [pc, #548]	; (8002224 <MX_GPIO_Init+0x310>)
 8001ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002002:	4a88      	ldr	r2, [pc, #544]	; (8002224 <MX_GPIO_Init+0x310>)
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800200c:	4b85      	ldr	r3, [pc, #532]	; (8002224 <MX_GPIO_Init+0x310>)
 800200e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800201a:	4b82      	ldr	r3, [pc, #520]	; (8002224 <MX_GPIO_Init+0x310>)
 800201c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002020:	4a80      	ldr	r2, [pc, #512]	; (8002224 <MX_GPIO_Init+0x310>)
 8002022:	f043 0320 	orr.w	r3, r3, #32
 8002026:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800202a:	4b7e      	ldr	r3, [pc, #504]	; (8002224 <MX_GPIO_Init+0x310>)
 800202c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	603b      	str	r3, [r7, #0]
 8002036:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	f248 01c0 	movw	r1, #32960	; 0x80c0
 800203e:	487a      	ldr	r0, [pc, #488]	; (8002228 <MX_GPIO_Init+0x314>)
 8002040:	f008 fc68 	bl	800a914 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 8002044:	2201      	movs	r2, #1
 8002046:	2181      	movs	r1, #129	; 0x81
 8002048:	4878      	ldr	r0, [pc, #480]	; (800222c <MX_GPIO_Init+0x318>)
 800204a:	f008 fc63 	bl	800a914 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	2102      	movs	r1, #2
 8002052:	4877      	ldr	r0, [pc, #476]	; (8002230 <MX_GPIO_Init+0x31c>)
 8002054:	f008 fc5e 	bl	800a914 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8002058:	2201      	movs	r2, #1
 800205a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800205e:	4875      	ldr	r0, [pc, #468]	; (8002234 <MX_GPIO_Init+0x320>)
 8002060:	f008 fc58 	bl	800a914 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : INT_HTS_Pin */
	GPIO_InitStruct.Pin = INT_HTS_Pin;
 8002064:	2340      	movs	r3, #64	; 0x40
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002068:	4b73      	ldr	r3, [pc, #460]	; (8002238 <MX_GPIO_Init+0x324>)
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	4619      	mov	r1, r3
 8002076:	486d      	ldr	r0, [pc, #436]	; (800222c <MX_GPIO_Init+0x318>)
 8002078:	f008 f97e 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
	GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 800207c:	f248 0362 	movw	r3, #32866	; 0x8062
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002082:	2303      	movs	r3, #3
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800208a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208e:	4619      	mov	r1, r3
 8002090:	486a      	ldr	r0, [pc, #424]	; (800223c <MX_GPIO_Init+0x328>)
 8002092:	f008 f971 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC11 PC10 PC12 PC9
                           PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8002096:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a4:	2302      	movs	r3, #2
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020a8:	230c      	movs	r3, #12
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	4863      	ldr	r0, [pc, #396]	; (8002240 <MX_GPIO_Init+0x32c>)
 80020b4:	f008 f960 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_DHCX_Pin CS_DLPC_Pin WIFI_CS_Pin */
	GPIO_InitStruct.Pin = CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin;
 80020b8:	f248 03c0 	movw	r3, #32960	; 0x80c0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ce:	4619      	mov	r1, r3
 80020d0:	4855      	ldr	r0, [pc, #340]	; (8002228 <MX_GPIO_Init+0x314>)
 80020d2:	f008 f951 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
	GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 80020d6:	2324      	movs	r3, #36	; 0x24
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020da:	2303      	movs	r3, #3
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	4619      	mov	r1, r3
 80020e8:	4850      	ldr	r0, [pc, #320]	; (800222c <MX_GPIO_Init+0x318>)
 80020ea:	f008 f945 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
	GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 80020ee:	f24a 2301 	movw	r3, #41473	; 0xa201
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f4:	2303      	movs	r3, #3
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002100:	4619      	mov	r1, r3
 8002102:	4850      	ldr	r0, [pc, #320]	; (8002244 <MX_GPIO_Init+0x330>)
 8002104:	f008 f938 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
	GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 8002108:	2381      	movs	r3, #129	; 0x81
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210c:	2301      	movs	r3, #1
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211c:	4619      	mov	r1, r3
 800211e:	4843      	ldr	r0, [pc, #268]	; (800222c <MX_GPIO_Init+0x318>)
 8002120:	f008 f92a 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin BOOT0_Pin LED2_Pin STSAFE_RESET_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|BOOT0_Pin|LED2_Pin|STSAFE_RESET_Pin;
 8002124:	f241 6308 	movw	r3, #5640	; 0x1608
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212a:	2303      	movs	r3, #3
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002136:	4619      	mov	r1, r3
 8002138:	483b      	ldr	r0, [pc, #236]	; (8002228 <MX_GPIO_Init+0x314>)
 800213a:	f008 f91d 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLE_SPI_CS_Pin */
	GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 800213e:	2302      	movs	r3, #2
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	2301      	movs	r3, #1
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800214e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002152:	4619      	mov	r1, r3
 8002154:	4836      	ldr	r0, [pc, #216]	; (8002230 <MX_GPIO_Init+0x31c>)
 8002156:	f008 f90f 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
	GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 800215a:	2381      	movs	r3, #129	; 0x81
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800215e:	4b36      	ldr	r3, [pc, #216]	; (8002238 <MX_GPIO_Init+0x324>)
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216a:	4619      	mov	r1, r3
 800216c:	4830      	ldr	r0, [pc, #192]	; (8002230 <MX_GPIO_Init+0x31c>)
 800216e:	f008 f903 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
	GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 8002172:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002178:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <MX_GPIO_Init+0x324>)
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002184:	4619      	mov	r1, r3
 8002186:	4830      	ldr	r0, [pc, #192]	; (8002248 <MX_GPIO_Init+0x334>)
 8002188:	f008 f8f6 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
	GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 800218c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002192:	2303      	movs	r3, #3
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800219a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219e:	4619      	mov	r1, r3
 80021a0:	4824      	ldr	r0, [pc, #144]	; (8002234 <MX_GPIO_Init+0x320>)
 80021a2:	f008 f8e9 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
	GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 80021a6:	f64c 233e 	movw	r3, #51774	; 0xca3e
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
			|INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
			|INT1_DWB_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <MX_GPIO_Init+0x324>)
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	4619      	mov	r1, r3
 80021ba:	481e      	ldr	r0, [pc, #120]	; (8002234 <MX_GPIO_Init+0x320>)
 80021bc:	f008 f8dc 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021c0:	2304      	movs	r3, #4
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021cc:	2302      	movs	r3, #2
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021d0:	230c      	movs	r3, #12
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d8:	4619      	mov	r1, r3
 80021da:	481a      	ldr	r0, [pc, #104]	; (8002244 <MX_GPIO_Init+0x330>)
 80021dc:	f008 f8cc 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
	GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 80021e0:	f240 1301 	movw	r3, #257	; 0x101
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e6:	2303      	movs	r3, #3
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4815      	ldr	r0, [pc, #84]	; (800224c <MX_GPIO_Init+0x338>)
 80021f6:	f008 f8bf 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
	GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 80021fa:	230c      	movs	r3, #12
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fe:	2303      	movs	r3, #3
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	4619      	mov	r1, r3
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <MX_GPIO_Init+0x32c>)
 800220e:	f008 f8b3 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_DWB_Pin */
	GPIO_InitStruct.Pin = CS_DWB_Pin;
 8002212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002218:	2301      	movs	r3, #1
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	e015      	b.n	8002250 <MX_GPIO_Init+0x33c>
 8002224:	46020c00 	.word	0x46020c00
 8002228:	42021c00 	.word	0x42021c00
 800222c:	42022000 	.word	0x42022000
 8002230:	42021000 	.word	0x42021000
 8002234:	42021400 	.word	0x42021400
 8002238:	10110000 	.word	0x10110000
 800223c:	42021800 	.word	0x42021800
 8002240:	42020800 	.word	0x42020800
 8002244:	42020c00 	.word	0x42020c00
 8002248:	42020400 	.word	0x42020400
 800224c:	42020000 	.word	0x42020000
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	4619      	mov	r1, r3
 8002258:	484e      	ldr	r0, [pc, #312]	; (8002394 <MX_GPIO_Init+0x480>)
 800225a:	f008 f88d 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_PWR_Pin */
	GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 800225e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002264:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <MX_GPIO_Init+0x484>)
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002270:	4619      	mov	r1, r3
 8002272:	484a      	ldr	r0, [pc, #296]	; (800239c <MX_GPIO_Init+0x488>)
 8002274:	f008 f880 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
	GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 8002278:	f248 0302 	movw	r3, #32770	; 0x8002
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800227e:	2303      	movs	r3, #3
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228a:	4619      	mov	r1, r3
 800228c:	4844      	ldr	r0, [pc, #272]	; (80023a0 <MX_GPIO_Init+0x48c>)
 800228e:	f008 f873 	bl	800a378 <HAL_GPIO_Init>

	/*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
	GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 8002292:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002298:	2303      	movs	r3, #3
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a4:	4619      	mov	r1, r3
 80022a6:	483f      	ldr	r0, [pc, #252]	; (80023a4 <MX_GPIO_Init+0x490>)
 80022a8:	f008 f866 	bl	800a378 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2107      	movs	r1, #7
 80022b0:	200b      	movs	r0, #11
 80022b2:	f005 ff66 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80022b6:	200b      	movs	r0, #11
 80022b8:	f005 ff7d 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2107      	movs	r1, #7
 80022c0:	200c      	movs	r0, #12
 80022c2:	f005 ff5e 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80022c6:	200c      	movs	r0, #12
 80022c8:	f005 ff75 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2107      	movs	r1, #7
 80022d0:	200d      	movs	r0, #13
 80022d2:	f005 ff56 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80022d6:	200d      	movs	r0, #13
 80022d8:	f005 ff6d 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2107      	movs	r1, #7
 80022e0:	200e      	movs	r0, #14
 80022e2:	f005 ff4e 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80022e6:	200e      	movs	r0, #14
 80022e8:	f005 ff65 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2107      	movs	r1, #7
 80022f0:	200f      	movs	r0, #15
 80022f2:	f005 ff46 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80022f6:	200f      	movs	r0, #15
 80022f8:	f005 ff5d 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2107      	movs	r1, #7
 8002300:	2010      	movs	r0, #16
 8002302:	f005 ff3e 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8002306:	2010      	movs	r0, #16
 8002308:	f005 ff55 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2107      	movs	r1, #7
 8002310:	2011      	movs	r0, #17
 8002312:	f005 ff36 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8002316:	2011      	movs	r0, #17
 8002318:	f005 ff4d 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2107      	movs	r1, #7
 8002320:	2012      	movs	r0, #18
 8002322:	f005 ff2e 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8002326:	2012      	movs	r0, #18
 8002328:	f005 ff45 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2107      	movs	r1, #7
 8002330:	2013      	movs	r0, #19
 8002332:	f005 ff26 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8002336:	2013      	movs	r0, #19
 8002338:	f005 ff3d 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2107      	movs	r1, #7
 8002340:	2014      	movs	r0, #20
 8002342:	f005 ff1e 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8002346:	2014      	movs	r0, #20
 8002348:	f005 ff35 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2107      	movs	r1, #7
 8002350:	2015      	movs	r0, #21
 8002352:	f005 ff16 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8002356:	2015      	movs	r0, #21
 8002358:	f005 ff2d 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2107      	movs	r1, #7
 8002360:	2016      	movs	r0, #22
 8002362:	f005 ff0e 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8002366:	2016      	movs	r0, #22
 8002368:	f005 ff25 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2107      	movs	r1, #7
 8002370:	2018      	movs	r0, #24
 8002372:	f005 ff06 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8002376:	2018      	movs	r0, #24
 8002378:	f005 ff1d 	bl	80081b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2107      	movs	r1, #7
 8002380:	2019      	movs	r0, #25
 8002382:	f005 fefe 	bl	8008182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8002386:	2019      	movs	r0, #25
 8002388:	f005 ff15 	bl	80081b6 <HAL_NVIC_EnableIRQ>

}
 800238c:	bf00      	nop
 800238e:	3738      	adds	r7, #56	; 0x38
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	42021400 	.word	0x42021400
 8002398:	10110000 	.word	0x10110000
 800239c:	42020c00 	.word	0x42020c00
 80023a0:	42020400 	.word	0x42020400
 80023a4:	42021000 	.word	0x42021000

080023a8 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <MX_CRC_Init+0x3c>)
 80023ae:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <MX_CRC_Init+0x40>)
 80023b0:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <MX_CRC_Init+0x3c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <MX_CRC_Init+0x3c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <MX_CRC_Init+0x3c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80023c4:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <MX_CRC_Init+0x3c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <MX_CRC_Init+0x3c>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80023d0:	4804      	ldr	r0, [pc, #16]	; (80023e4 <MX_CRC_Init+0x3c>)
 80023d2:	f005 ff19 	bl	8008208 <HAL_CRC_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 80023dc:	f000 f806 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20001b10 	.word	0x20001b10
 80023e8:	40023000 	.word	0x40023000

080023ec <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f0:	b672      	cpsid	i
}
 80023f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80023f4:	e7fe      	b.n	80023f4 <Error_Handler+0x8>
	...

080023f8 <sensor_init>:
// time measurement variables
int32_t time_elapsed=0;
int32_t post_FIFO_read;
int32_t pre_FIFO_read;

void sensor_init(void){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0

	// init GREEN LED and Turn it on
	BSP_LED_Init(LED1);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f004 fa5d 	bl	80068bc <BSP_LED_Init>

	// init user button
	ret = BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002402:	2101      	movs	r1, #1
 8002404:	2000      	movs	r0, #0
 8002406:	f004 f99b 	bl	8006740 <BSP_PB_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	4a31      	ldr	r2, [pc, #196]	; (80024d4 <sensor_init+0xdc>)
 800240e:	6013      	str	r3, [r2, #0]
	PushButtonState = (BSP_PB_GetState(BUTTON_USER)) ?  0 : 1;
 8002410:	2000      	movs	r0, #0
 8002412:	f004 fa2b 	bl	800686c <BSP_PB_GetState>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <sensor_init+0xe0>)
 8002426:	601a      	str	r2, [r3, #0]


	// init mems exti 8
	set_mems_int_pin_a_exti();
 8002428:	f7fe fdf8 	bl	800101c <set_mems_int_pin_a_exti>

	// init ism330dhcx sensor
	ret_uint = Sensor_IO_SPI_CS_Init_All();
 800242c:	f004 fac2 	bl	80069b4 <Sensor_IO_SPI_CS_Init_All>
 8002430:	4603      	mov	r3, r0
 8002432:	461a      	mov	r2, r3
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <sensor_init+0xe4>)
 8002436:	701a      	strb	r2, [r3, #0]
	ret = BSP_MOTION_SENSOR_Init(ISM330DHCX_0,MOTION_ACCELERO);
 8002438:	2102      	movs	r1, #2
 800243a:	2000      	movs	r0, #0
 800243c:	f004 fcdc 	bl	8006df8 <BSP_MOTION_SENSOR_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <sensor_init+0xdc>)
 8002444:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_SetOutputDataRate(ISM330DHCX_0, MOTION_ACCELERO,ISM330DHCX_ODR);
 8002446:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80024e0 <sensor_init+0xe8>
 800244a:	2102      	movs	r1, #2
 800244c:	2000      	movs	r0, #0
 800244e:	f004 fd9f 	bl	8006f90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 8002452:	4603      	mov	r3, r0
 8002454:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <sensor_init+0xdc>)
 8002456:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_BDR( ISM330DHCX_0,  MOTION_ACCELERO, ISM330DHCX_ODR);
 8002458:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80024e0 <sensor_init+0xe8>
 800245c:	2102      	movs	r1, #2
 800245e:	2000      	movs	r0, #0
 8002460:	f004 ffe0 	bl	8007424 <BSP_MOTION_SENSOR_FIFO_Set_BDR>
 8002464:	4603      	mov	r3, r0
 8002466:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <sensor_init+0xdc>)
 8002468:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_SetFullScale( ISM330DHCX_0,  MOTION_ACCELERO, ISM330DHCX_FS);
 800246a:	2202      	movs	r2, #2
 800246c:	2102      	movs	r1, #2
 800246e:	2000      	movs	r0, #0
 8002470:	f004 fdd4 	bl	800701c <BSP_MOTION_SENSOR_SetFullScale>
 8002474:	4603      	mov	r3, r0
 8002476:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <sensor_init+0xdc>)
 8002478:	6013      	str	r3, [r2, #0]


	// get sensor sensitivity
	ret = BSP_MOTION_SENSOR_GetSensitivity(ISM330DHCX_0, MOTION_ACCELERO, &ism330dhcx_acc_sensitivity);
 800247a:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <sensor_init+0xec>)
 800247c:	2102      	movs	r1, #2
 800247e:	2000      	movs	r0, #0
 8002480:	f004 fd42 	bl	8006f08 <BSP_MOTION_SENSOR_GetSensitivity>
 8002484:	4603      	mov	r3, r0
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <sensor_init+0xdc>)
 8002488:	6013      	str	r3, [r2, #0]

	// sensor fifo init
	ret = BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(ISM330DHCX_0, ENABLE);
 800248a:	2101      	movs	r1, #1
 800248c:	2000      	movs	r0, #0
 800248e:	f005 f813 	bl	80074b8 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>
 8002492:	4603      	mov	r3, r0
 8002494:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <sensor_init+0xdc>)
 8002496:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level( ISM330DHCX_0, INPUT_BUFFER_SIZE);
 8002498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800249c:	2000      	movs	r0, #0
 800249e:	f005 f833 	bl	8007508 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <sensor_init+0xdc>)
 80024a6:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(ISM330DHCX_0,  ENABLE);
 80024a8:	2101      	movs	r1, #1
 80024aa:	2000      	movs	r0, #0
 80024ac:	f005 f854 	bl	8007558 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <sensor_init+0xdc>)
 80024b4:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_Mode(ISM330DHCX_0,  ISM330DHCX_STREAM_MODE);
 80024b6:	2106      	movs	r1, #6
 80024b8:	2000      	movs	r0, #0
 80024ba:	f005 f8bb 	bl	8007634 <BSP_MOTION_SENSOR_FIFO_Set_Mode>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <sensor_init+0xdc>)
 80024c2:	6013      	str	r3, [r2, #0]

	// AI init
	aiInit();
 80024c4:	f014 fe02 	bl	80170cc <aiInit>
	// PRE PROCESSING init
	pre_processing_init(&pre_processing_data);
 80024c8:	4807      	ldr	r0, [pc, #28]	; (80024e8 <sensor_init+0xf0>)
 80024ca:	f001 fcbc 	bl	8003e46 <pre_processing_init>

}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20001b54 	.word	0x20001b54
 80024d8:	20001dc8 	.word	0x20001dc8
 80024dc:	20001b58 	.word	0x20001b58
 80024e0:	43500000 	.word	0x43500000
 80024e4:	20001dcc 	.word	0x20001dcc
 80024e8:	20001b5c 	.word	0x20001b5c
 80024ec:	00000000 	.word	0x00000000

080024f0 <sensor_process>:

void sensor_process(void){
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af04      	add	r7, sp, #16
		}
	}*/

	/*if(ButtonEventDetected==1){
		ButtonEventDetected = 0;*/
	if (MemsEventDetected == 1){
 80024f6:	4b62      	ldr	r3, [pc, #392]	; (8002680 <sensor_process+0x190>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	f040 80b4 	bne.w	8002668 <sensor_process+0x178>

		//pre_FIFO_read = BSP_GetTick();
		MemsEventDetected = 0;
 8002500:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <sensor_process+0x190>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]

		BSP_LED_On(LED1);
 8002506:	2000      	movs	r0, #0
 8002508:	f004 fa20 	bl	800694c <BSP_LED_On>

		for(int jj=0;jj<num_samples;jj++){
 800250c:	2300      	movs	r3, #0
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	e075      	b.n	80025fe <sensor_process+0x10e>
			BSP_MOTION_SENSOR_FIFO_Get_Data_Word(ISM330DHCX_0, MOTION_ACCELERO, &DataOut);
 8002512:	4a5c      	ldr	r2, [pc, #368]	; (8002684 <sensor_process+0x194>)
 8002514:	2102      	movs	r1, #2
 8002516:	2000      	movs	r0, #0
 8002518:	f005 f846 	bl	80075a8 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word>
			ism330dhcx_acc[jj].x = ((float)DataOut[0])*ism330dhcx_acc_sensitivity*0.001; // from [mg] to [g]
 800251c:	4b59      	ldr	r3, [pc, #356]	; (8002684 <sensor_process+0x194>)
 800251e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800252a:	4b57      	ldr	r3, [pc, #348]	; (8002688 <sensor_process+0x198>)
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002534:	ee17 0a90 	vmov	r0, s15
 8002538:	f7fe f80a 	bl	8000550 <__aeabi_f2d>
 800253c:	a34e      	add	r3, pc, #312	; (adr r3, 8002678 <sensor_process+0x188>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fe f85d 	bl	8000600 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe fb4f 	bl	8000bf0 <__aeabi_d2f>
 8002552:	4601      	mov	r1, r0
 8002554:	484d      	ldr	r0, [pc, #308]	; (800268c <sensor_process+0x19c>)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4403      	add	r3, r0
 8002562:	6019      	str	r1, [r3, #0]
			ism330dhcx_acc[jj].y = ((float)DataOut[1])*ism330dhcx_acc_sensitivity*0.001;
 8002564:	4b47      	ldr	r3, [pc, #284]	; (8002684 <sensor_process+0x194>)
 8002566:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002572:	4b45      	ldr	r3, [pc, #276]	; (8002688 <sensor_process+0x198>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	ee17 0a90 	vmov	r0, s15
 8002580:	f7fd ffe6 	bl	8000550 <__aeabi_f2d>
 8002584:	a33c      	add	r3, pc, #240	; (adr r3, 8002678 <sensor_process+0x188>)
 8002586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258a:	f7fe f839 	bl	8000600 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	f7fe fb2b 	bl	8000bf0 <__aeabi_d2f>
 800259a:	4601      	mov	r1, r0
 800259c:	483b      	ldr	r0, [pc, #236]	; (800268c <sensor_process+0x19c>)
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4403      	add	r3, r0
 80025aa:	3304      	adds	r3, #4
 80025ac:	6019      	str	r1, [r3, #0]
			ism330dhcx_acc[jj].z = ((float)DataOut[2])*ism330dhcx_acc_sensitivity*0.001;
 80025ae:	4b35      	ldr	r3, [pc, #212]	; (8002684 <sensor_process+0x194>)
 80025b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025bc:	4b32      	ldr	r3, [pc, #200]	; (8002688 <sensor_process+0x198>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c6:	ee17 0a90 	vmov	r0, s15
 80025ca:	f7fd ffc1 	bl	8000550 <__aeabi_f2d>
 80025ce:	a32a      	add	r3, pc, #168	; (adr r3, 8002678 <sensor_process+0x188>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	f7fe f814 	bl	8000600 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f7fe fb06 	bl	8000bf0 <__aeabi_d2f>
 80025e4:	4601      	mov	r1, r0
 80025e6:	4829      	ldr	r0, [pc, #164]	; (800268c <sensor_process+0x19c>)
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4403      	add	r3, r0
 80025f4:	3308      	adds	r3, #8
 80025f6:	6019      	str	r1, [r3, #0]
		for(int jj=0;jj<num_samples;jj++){
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3301      	adds	r3, #1
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4b23      	ldr	r3, [pc, #140]	; (8002690 <sensor_process+0x1a0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d384      	bcc.n	8002512 <sensor_process+0x22>
		}

		// call pre_processing_functions
		pre_processing_process(ism330dhcx_acc, INPUT_BUFFER_SIZE, preprocessing_output_array, INPUT_BUFFER_SIZE/2, &pre_processing_data);
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <sensor_process+0x1a4>)
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	4a22      	ldr	r2, [pc, #136]	; (8002698 <sensor_process+0x1a8>)
 8002610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002614:	481d      	ldr	r0, [pc, #116]	; (800268c <sensor_process+0x19c>)
 8002616:	f001 fc41 	bl	8003e9c <pre_processing_process>

		// call ai process
		aiProcess(preprocessing_output_array, ai_out);
 800261a:	4920      	ldr	r1, [pc, #128]	; (800269c <sensor_process+0x1ac>)
 800261c:	481e      	ldr	r0, [pc, #120]	; (8002698 <sensor_process+0x1a8>)
 800261e:	f014 fd81 	bl	8017124 <aiProcess>

		// print to Virtual COM
		snprintf(string_out, sizeof(string_out), "label: %.0f , Accuracy: %.2f \r\n", ai_out[0], ai_out[1]);
 8002622:	4b1e      	ldr	r3, [pc, #120]	; (800269c <sensor_process+0x1ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff92 	bl	8000550 <__aeabi_f2d>
 800262c:	4604      	mov	r4, r0
 800262e:	460d      	mov	r5, r1
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <sensor_process+0x1ac>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fd ff8b 	bl	8000550 <__aeabi_f2d>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002642:	e9cd 4500 	strd	r4, r5, [sp]
 8002646:	4a16      	ldr	r2, [pc, #88]	; (80026a0 <sensor_process+0x1b0>)
 8002648:	211e      	movs	r1, #30
 800264a:	4816      	ldr	r0, [pc, #88]	; (80026a4 <sensor_process+0x1b4>)
 800264c:	f019 fa18 	bl	801ba80 <sniprintf>
		CDC_Transmit_FS((uint8_t*)string_out, strlen(string_out));
 8002650:	4814      	ldr	r0, [pc, #80]	; (80026a4 <sensor_process+0x1b4>)
 8002652:	f7fd fe11 	bl	8000278 <strlen>
 8002656:	4603      	mov	r3, r0
 8002658:	b29b      	uxth	r3, r3
 800265a:	4619      	mov	r1, r3
 800265c:	4811      	ldr	r0, [pc, #68]	; (80026a4 <sensor_process+0x1b4>)
 800265e:	f014 f921 	bl	80168a4 <CDC_Transmit_FS>

		// print to STLINK
		//printf("Class: %f, Accuracy: %f \r\n",ai_out[0],ai_out[1]);

		BSP_LED_Off(LED1);
 8002662:	2000      	movs	r0, #0
 8002664:	f004 f98c 	bl	8006980 <BSP_LED_Off>


	}

	//Get number of unread FIFO samples
	BSP_MOTION_SENSOR_FIFO_Get_Num_Samples(ISM330DHCX_0, &num_samples);
 8002668:	4909      	ldr	r1, [pc, #36]	; (8002690 <sensor_process+0x1a0>)
 800266a:	2000      	movs	r0, #0
 800266c:	f005 f80a 	bl	8007684 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples>
		  BSP_LED_Off(LED1);
		  MemsEventDetected = 0;

	  }
	}*/
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bdb0      	pop	{r4, r5, r7, pc}
 8002678:	d2f1a9fc 	.word	0xd2f1a9fc
 800267c:	3f50624d 	.word	0x3f50624d
 8002680:	20001dd1 	.word	0x20001dd1
 8002684:	20001ddc 	.word	0x20001ddc
 8002688:	20001dcc 	.word	0x20001dcc
 800268c:	20001de4 	.word	0x20001de4
 8002690:	20001dd8 	.word	0x20001dd8
 8002694:	20001b5c 	.word	0x20001b5c
 8002698:	200029e4 	.word	0x200029e4
 800269c:	20002be4 	.word	0x20002be4
 80026a0:	0801f7a0 	.word	0x0801f7a0
 80026a4:	20001b34 	.word	0x20001b34

080026a8 <BSP_PB_Callback>:


void BSP_PB_Callback(Button_TypeDef Button)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
	BP_Interrupt=1;
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <BSP_PB_Callback+0x1c>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	20001dd4 	.word	0x20001dd4

080026c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_MspInit+0x30>)
 80026d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d4:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <HAL_MspInit+0x30>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_MspInit+0x30>)
 80026e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	46020c00 	.word	0x46020c00

080026fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a18      	ldr	r2, [pc, #96]	; (800277c <HAL_ADC_MspInit+0x80>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d129      	bne.n	8002772 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800271e:	4b18      	ldr	r3, [pc, #96]	; (8002780 <HAL_ADC_MspInit+0x84>)
 8002720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002724:	4a16      	ldr	r2, [pc, #88]	; (8002780 <HAL_ADC_MspInit+0x84>)
 8002726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800272e:	4b14      	ldr	r3, [pc, #80]	; (8002780 <HAL_ADC_MspInit+0x84>)
 8002730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_ADC_MspInit+0x84>)
 800273e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002742:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <HAL_ADC_MspInit+0x84>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_ADC_MspInit+0x84>)
 800274e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800275a:	2303      	movs	r3, #3
 800275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800275e:	2303      	movs	r3, #3
 8002760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	4619      	mov	r1, r3
 800276c:	4805      	ldr	r0, [pc, #20]	; (8002784 <HAL_ADC_MspInit+0x88>)
 800276e:	f007 fe03 	bl	800a378 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002772:	bf00      	nop
 8002774:	3728      	adds	r7, #40	; 0x28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	42028000 	.word	0x42028000
 8002780:	46020c00 	.word	0x46020c00
 8002784:	42020800 	.word	0x42020800

08002788 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b0a6      	sub	sp, #152	; 0x98
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  if(IS_ADF_INSTANCE(hmdf->Instance))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a57      	ldr	r2, [pc, #348]	; (8002904 <HAL_MDF_MspInit+0x17c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	f040 80ba 	bne.w	8002920 <HAL_MDF_MspInit+0x198>
  {
  /* USER CODE BEGIN ADF1_MspInit 0 */

  /* USER CODE END ADF1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 80027ac:	4b56      	ldr	r3, [pc, #344]	; (8002908 <HAL_MDF_MspInit+0x180>)
 80027ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b2:	4a55      	ldr	r2, [pc, #340]	; (8002908 <HAL_MDF_MspInit+0x180>)
 80027b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80027bc:	4b52      	ldr	r3, [pc, #328]	; (8002908 <HAL_MDF_MspInit+0x180>)
 80027be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027ca:	4b4f      	ldr	r3, [pc, #316]	; (8002908 <HAL_MDF_MspInit+0x180>)
 80027cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d0:	4a4d      	ldr	r2, [pc, #308]	; (8002908 <HAL_MDF_MspInit+0x180>)
 80027d2:	f043 0310 	orr.w	r3, r3, #16
 80027d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027da:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <HAL_MDF_MspInit+0x180>)
 80027dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	693b      	ldr	r3, [r7, #16]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80027e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8002802:	2303      	movs	r3, #3
 8002804:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002808:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800280c:	4619      	mov	r1, r3
 800280e:	483f      	ldr	r0, [pc, #252]	; (800290c <HAL_MDF_MspInit+0x184>)
 8002810:	f007 fdb2 	bl	800a378 <HAL_GPIO_Init>

    /* ADF1 DMA Init */
    /* GPDMA1_REQUEST_ADF1_FLT0 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002814:	2321      	movs	r3, #33	; 0x21
 8002816:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADF1_FLT0;
 8002818:	2362      	movs	r3, #98	; 0x62
 800281a:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002824:	2300      	movs	r3, #0
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002828:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800282e:	2301      	movs	r3, #1
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002836:	637b      	str	r3, [r7, #52]	; 0x34
    NodeConfig.Init.SrcBurstLength = 1;
 8002838:	2301      	movs	r3, #1
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
    NodeConfig.Init.DestBurstLength = 1;
 800283c:	2301      	movs	r3, #1
 800283e:	643b      	str	r3, [r7, #64]	; 0x40
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8002840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
    NodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8002846:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800284a:	64bb      	str	r3, [r7, #72]	; 0x48
    NodeConfig.Init.Mode = DMA_NORMAL;
 800284c:	2300      	movs	r3, #0
 800284e:	64fb      	str	r3, [r7, #76]	; 0x4c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002850:	2300      	movs	r3, #0
 8002852:	65fb      	str	r3, [r7, #92]	; 0x5c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002854:	2300      	movs	r3, #0
 8002856:	653b      	str	r3, [r7, #80]	; 0x50
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_UNPACK;
 8002858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel5) != HAL_OK)
 800285e:	f107 0318 	add.w	r3, r7, #24
 8002862:	492b      	ldr	r1, [pc, #172]	; (8002910 <HAL_MDF_MspInit+0x188>)
 8002864:	4618      	mov	r0, r3
 8002866:	f006 ff43 	bl	80096f0 <HAL_DMAEx_List_BuildNode>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_MDF_MspInit+0xec>
    {
      Error_Handler();
 8002870:	f7ff fdbc 	bl	80023ec <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel5, NULL, &Node_GPDMA1_Channel5) != HAL_OK)
 8002874:	4a26      	ldr	r2, [pc, #152]	; (8002910 <HAL_MDF_MspInit+0x188>)
 8002876:	2100      	movs	r1, #0
 8002878:	4826      	ldr	r0, [pc, #152]	; (8002914 <HAL_MDF_MspInit+0x18c>)
 800287a:	f006 ff4f 	bl	800971c <HAL_DMAEx_List_InsertNode>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_MDF_MspInit+0x100>
    {
      Error_Handler();
 8002884:	f7ff fdb2 	bl	80023ec <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel5) != HAL_OK)
 8002888:	4822      	ldr	r0, [pc, #136]	; (8002914 <HAL_MDF_MspInit+0x18c>)
 800288a:	f007 f810 	bl	80098ae <HAL_DMAEx_List_SetCircularMode>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_MDF_MspInit+0x110>
    {
      Error_Handler();
 8002894:	f7ff fdaa 	bl	80023ec <Error_Handler>
    }

    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8002898:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <HAL_MDF_MspInit+0x190>)
 800289a:	4a20      	ldr	r2, [pc, #128]	; (800291c <HAL_MDF_MspInit+0x194>)
 800289c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <HAL_MDF_MspInit+0x190>)
 80028a0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel5.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <HAL_MDF_MspInit+0x190>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel5.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <HAL_MDF_MspInit+0x190>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel5.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_MDF_MspInit+0x190>)
 80028b4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel5.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80028ba:	4b17      	ldr	r3, [pc, #92]	; (8002918 <HAL_MDF_MspInit+0x190>)
 80028bc:	2281      	movs	r2, #129	; 0x81
 80028be:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 80028c0:	4815      	ldr	r0, [pc, #84]	; (8002918 <HAL_MDF_MspInit+0x190>)
 80028c2:	f006 fde7 	bl	8009494 <HAL_DMAEx_List_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_MDF_MspInit+0x148>
    {
      Error_Handler();
 80028cc:	f7ff fd8e 	bl	80023ec <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel5, &List_GPDMA1_Channel5) != HAL_OK)
 80028d0:	4910      	ldr	r1, [pc, #64]	; (8002914 <HAL_MDF_MspInit+0x18c>)
 80028d2:	4811      	ldr	r0, [pc, #68]	; (8002918 <HAL_MDF_MspInit+0x190>)
 80028d4:	f007 f84c 	bl	8009970 <HAL_DMAEx_List_LinkQ>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_MDF_MspInit+0x15a>
    {
      Error_Handler();
 80028de:	f7ff fd85 	bl	80023ec <Error_Handler>
    }

    __HAL_LINKDMA(hmdf, hdma, handle_GPDMA1_Channel5);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <HAL_MDF_MspInit+0x190>)
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
 80028e8:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <HAL_MDF_MspInit+0x190>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 80028ee:	2110      	movs	r1, #16
 80028f0:	4809      	ldr	r0, [pc, #36]	; (8002918 <HAL_MDF_MspInit+0x190>)
 80028f2:	f006 fb12 	bl	8008f1a <HAL_DMA_ConfigChannelAttributes>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80d9 	beq.w	8002ab0 <HAL_MDF_MspInit+0x328>
    {
      Error_Handler();
 80028fe:	f7ff fd75 	bl	80023ec <Error_Handler>
  /* USER CODE BEGIN MDF1_MspInit 1 */

  /* USER CODE END MDF1_MspInit 1 */
  }

}
 8002902:	e0d5      	b.n	8002ab0 <HAL_MDF_MspInit+0x328>
 8002904:	46024080 	.word	0x46024080
 8002908:	46020c00 	.word	0x46020c00
 800290c:	42021000 	.word	0x42021000
 8002910:	20000d48 	.word	0x20000d48
 8002914:	20000d6c 	.word	0x20000d6c
 8002918:	20000d84 	.word	0x20000d84
 800291c:	400202d0 	.word	0x400202d0
  else if(IS_MDF_INSTANCE(hmdf->Instance))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a64      	ldr	r2, [pc, #400]	; (8002ab8 <HAL_MDF_MspInit+0x330>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_MDF_MspInit+0x1d6>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a63      	ldr	r2, [pc, #396]	; (8002abc <HAL_MDF_MspInit+0x334>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d014      	beq.n	800295e <HAL_MDF_MspInit+0x1d6>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a61      	ldr	r2, [pc, #388]	; (8002ac0 <HAL_MDF_MspInit+0x338>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00f      	beq.n	800295e <HAL_MDF_MspInit+0x1d6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a60      	ldr	r2, [pc, #384]	; (8002ac4 <HAL_MDF_MspInit+0x33c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00a      	beq.n	800295e <HAL_MDF_MspInit+0x1d6>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a5e      	ldr	r2, [pc, #376]	; (8002ac8 <HAL_MDF_MspInit+0x340>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d005      	beq.n	800295e <HAL_MDF_MspInit+0x1d6>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a5d      	ldr	r2, [pc, #372]	; (8002acc <HAL_MDF_MspInit+0x344>)
 8002958:	4293      	cmp	r3, r2
 800295a:	f040 80a9 	bne.w	8002ab0 <HAL_MDF_MspInit+0x328>
    __HAL_RCC_MDF1_CLK_ENABLE();
 800295e:	4b5c      	ldr	r3, [pc, #368]	; (8002ad0 <HAL_MDF_MspInit+0x348>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	4a5a      	ldr	r2, [pc, #360]	; (8002ad0 <HAL_MDF_MspInit+0x348>)
 8002966:	f043 0308 	orr.w	r3, r3, #8
 800296a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800296e:	4b58      	ldr	r3, [pc, #352]	; (8002ad0 <HAL_MDF_MspInit+0x348>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800297c:	4b54      	ldr	r3, [pc, #336]	; (8002ad0 <HAL_MDF_MspInit+0x348>)
 800297e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002982:	4a53      	ldr	r2, [pc, #332]	; (8002ad0 <HAL_MDF_MspInit+0x348>)
 8002984:	f043 0320 	orr.w	r3, r3, #32
 8002988:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800298c:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <HAL_MDF_MspInit+0x348>)
 800298e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO3_EX_Pin;
 800299a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80029b4:	2306      	movs	r3, #6
 80029b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIO3_EX_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80029be:	4619      	mov	r1, r3
 80029c0:	4844      	ldr	r0, [pc, #272]	; (8002ad4 <HAL_MDF_MspInit+0x34c>)
 80029c2:	f007 fcd9 	bl	800a378 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80029c6:	2321      	movs	r3, #33	; 0x21
 80029c8:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Request = GPDMA1_REQUEST_MDF1_FLT0;
 80029ca:	235c      	movs	r3, #92	; 0x5c
 80029cc:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80029da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80029e0:	2301      	movs	r3, #1
 80029e2:	633b      	str	r3, [r7, #48]	; 0x30
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80029e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
    NodeConfig.Init.SrcBurstLength = 1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    NodeConfig.Init.DestBurstLength = 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	643b      	str	r3, [r7, #64]	; 0x40
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	647b      	str	r3, [r7, #68]	; 0x44
    NodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80029f6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80029fa:	64bb      	str	r3, [r7, #72]	; 0x48
    NodeConfig.Init.Mode = DMA_NORMAL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002a00:	2300      	movs	r3, #0
 8002a02:	65fb      	str	r3, [r7, #92]	; 0x5c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	653b      	str	r3, [r7, #80]	; 0x50
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_UNPACK;
 8002a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel4) != HAL_OK)
 8002a0e:	f107 0318 	add.w	r3, r7, #24
 8002a12:	4931      	ldr	r1, [pc, #196]	; (8002ad8 <HAL_MDF_MspInit+0x350>)
 8002a14:	4618      	mov	r0, r3
 8002a16:	f006 fe6b 	bl	80096f0 <HAL_DMAEx_List_BuildNode>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_MDF_MspInit+0x29c>
      Error_Handler();
 8002a20:	f7ff fce4 	bl	80023ec <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel4, NULL, &Node_GPDMA1_Channel4) != HAL_OK)
 8002a24:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <HAL_MDF_MspInit+0x350>)
 8002a26:	2100      	movs	r1, #0
 8002a28:	482c      	ldr	r0, [pc, #176]	; (8002adc <HAL_MDF_MspInit+0x354>)
 8002a2a:	f006 fe77 	bl	800971c <HAL_DMAEx_List_InsertNode>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_MDF_MspInit+0x2b0>
      Error_Handler();
 8002a34:	f7ff fcda 	bl	80023ec <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel4) != HAL_OK)
 8002a38:	4828      	ldr	r0, [pc, #160]	; (8002adc <HAL_MDF_MspInit+0x354>)
 8002a3a:	f006 ff38 	bl	80098ae <HAL_DMAEx_List_SetCircularMode>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_MDF_MspInit+0x2c0>
      Error_Handler();
 8002a44:	f7ff fcd2 	bl	80023ec <Error_Handler>
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_MDF_MspInit+0x358>)
 8002a4a:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <HAL_MDF_MspInit+0x35c>)
 8002a4c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8002a4e:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <HAL_MDF_MspInit+0x358>)
 8002a50:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel4.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_MDF_MspInit+0x358>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel4.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002a5c:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_MDF_MspInit+0x358>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel4.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8002a62:	4b1f      	ldr	r3, [pc, #124]	; (8002ae0 <HAL_MDF_MspInit+0x358>)
 8002a64:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel4.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <HAL_MDF_MspInit+0x358>)
 8002a6c:	2281      	movs	r2, #129	; 0x81
 8002a6e:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 8002a70:	481b      	ldr	r0, [pc, #108]	; (8002ae0 <HAL_MDF_MspInit+0x358>)
 8002a72:	f006 fd0f 	bl	8009494 <HAL_DMAEx_List_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_MDF_MspInit+0x2f8>
      Error_Handler();
 8002a7c:	f7ff fcb6 	bl	80023ec <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel4, &List_GPDMA1_Channel4) != HAL_OK)
 8002a80:	4916      	ldr	r1, [pc, #88]	; (8002adc <HAL_MDF_MspInit+0x354>)
 8002a82:	4817      	ldr	r0, [pc, #92]	; (8002ae0 <HAL_MDF_MspInit+0x358>)
 8002a84:	f006 ff74 	bl	8009970 <HAL_DMAEx_List_LinkQ>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_MDF_MspInit+0x30a>
      Error_Handler();
 8002a8e:	f7ff fcad 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(hmdf, hdma, handle_GPDMA1_Channel4);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <HAL_MDF_MspInit+0x358>)
 8002a96:	639a      	str	r2, [r3, #56]	; 0x38
 8002a98:	4a11      	ldr	r2, [pc, #68]	; (8002ae0 <HAL_MDF_MspInit+0x358>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002a9e:	2110      	movs	r1, #16
 8002aa0:	480f      	ldr	r0, [pc, #60]	; (8002ae0 <HAL_MDF_MspInit+0x358>)
 8002aa2:	f006 fa3a 	bl	8008f1a <HAL_DMA_ConfigChannelAttributes>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_MDF_MspInit+0x328>
      Error_Handler();
 8002aac:	f7ff fc9e 	bl	80023ec <Error_Handler>
}
 8002ab0:	bf00      	nop
 8002ab2:	3798      	adds	r7, #152	; 0x98
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40025080 	.word	0x40025080
 8002abc:	40025100 	.word	0x40025100
 8002ac0:	40025180 	.word	0x40025180
 8002ac4:	40025200 	.word	0x40025200
 8002ac8:	40025280 	.word	0x40025280
 8002acc:	40025300 	.word	0x40025300
 8002ad0:	46020c00 	.word	0x46020c00
 8002ad4:	42021400 	.word	0x42021400
 8002ad8:	20000dfc 	.word	0x20000dfc
 8002adc:	20000e20 	.word	0x20000e20
 8002ae0:	20000e38 	.word	0x20000e38
 8002ae4:	40020250 	.word	0x40020250

08002ae8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b0bc      	sub	sp, #240	; 0xf0
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	22c8      	movs	r2, #200	; 0xc8
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f018 f83c 	bl	801ab86 <memset>
  if(hdac->Instance==DAC1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <HAL_DAC_MspInit+0xbc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d140      	bne.n	8002b9a <HAL_DAC_MspInit+0xb2>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DAC1;
 8002b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 8002b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	4618      	mov	r0, r3
 8002b32:	f00b f86b 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_DAC_MspInit+0x58>
    {
      Error_Handler();
 8002b3c:	f7ff fc56 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_DAC_MspInit+0xc0>)
 8002b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_DAC_MspInit+0xc0>)
 8002b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_DAC_MspInit+0xc0>)
 8002b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_DAC_MspInit+0xc0>)
 8002b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b64:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <HAL_DAC_MspInit+0xc0>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_DAC_MspInit+0xc0>)
 8002b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b82:	2303      	movs	r3, #3
 8002b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b92:	4619      	mov	r1, r3
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <HAL_DAC_MspInit+0xc4>)
 8002b96:	f007 fbef 	bl	800a378 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002b9a:	bf00      	nop
 8002b9c:	37f0      	adds	r7, #240	; 0xf0
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	46021800 	.word	0x46021800
 8002ba8:	46020c00 	.word	0x46020c00
 8002bac:	42020000 	.word	0x42020000

08002bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b0c2      	sub	sp, #264	; 0x108
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002bba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002bbe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bd4:	22c8      	movs	r2, #200	; 0xc8
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f017 ffd4 	bl	801ab86 <memset>
  if(hi2c->Instance==I2C1)
 8002bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002be2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4aaa      	ldr	r2, [pc, #680]	; (8002e94 <HAL_I2C_MspInit+0x2e4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d147      	bne.n	8002c80 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002bf0:	f04f 0240 	mov.w	r2, #64	; 0x40
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c06:	4618      	mov	r0, r3
 8002c08:	f00b f800 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8002c12:	f7ff fbeb 	bl	80023ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c16:	4ba0      	ldr	r3, [pc, #640]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c1c:	4a9e      	ldr	r2, [pc, #632]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002c1e:	f043 0302 	orr.w	r3, r3, #2
 8002c22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c26:	4b9c      	ldr	r3, [pc, #624]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002c34:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002c38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c3c:	2312      	movs	r3, #18
 8002c3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c54:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4890      	ldr	r0, [pc, #576]	; (8002e9c <HAL_I2C_MspInit+0x2ec>)
 8002c5c:	f007 fb8c 	bl	800a378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c60:	4b8d      	ldr	r3, [pc, #564]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c66:	4a8c      	ldr	r2, [pc, #560]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c6c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002c70:	4b89      	ldr	r3, [pc, #548]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c7e:	e16d      	b.n	8002f5c <HAL_I2C_MspInit+0x3ac>
  else if(hi2c->Instance==I2C2)
 8002c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a84      	ldr	r2, [pc, #528]	; (8002ea0 <HAL_I2C_MspInit+0x2f0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	f040 8114 	bne.w	8002ebc <HAL_I2C_MspInit+0x30c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c94:	f04f 0280 	mov.w	r2, #128	; 0x80
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002caa:	4618      	mov	r0, r3
 8002cac:	f00a ffae 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 8002cb6:	f7ff fb99 	bl	80023ec <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cba:	4b77      	ldr	r3, [pc, #476]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc0:	4a75      	ldr	r2, [pc, #468]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002cc2:	f043 0320 	orr.w	r3, r3, #32
 8002cc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cca:	4b73      	ldr	r3, [pc, #460]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cd8:	4b6f      	ldr	r3, [pc, #444]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cde:	4a6e      	ldr	r2, [pc, #440]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ce8:	4b6b      	ldr	r3, [pc, #428]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cfc:	2312      	movs	r3, #18
 8002cfe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d0e:	2304      	movs	r3, #4
 8002d10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d14:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4862      	ldr	r0, [pc, #392]	; (8002ea4 <HAL_I2C_MspInit+0x2f4>)
 8002d1c:	f007 fb2c 	bl	800a378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d20:	2310      	movs	r3, #16
 8002d22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d26:	2312      	movs	r3, #18
 8002d28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d38:	2304      	movs	r3, #4
 8002d3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d3e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002d42:	4619      	mov	r1, r3
 8002d44:	4858      	ldr	r0, [pc, #352]	; (8002ea8 <HAL_I2C_MspInit+0x2f8>)
 8002d46:	f007 fb17 	bl	800a378 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d4a:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d50:	4a51      	ldr	r2, [pc, #324]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002d52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002d5a:	4b4f      	ldr	r3, [pc, #316]	; (8002e98 <HAL_I2C_MspInit+0x2e8>)
 8002d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	697b      	ldr	r3, [r7, #20]
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002d68:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002d6a:	4a51      	ldr	r2, [pc, #324]	; (8002eb0 <HAL_I2C_MspInit+0x300>)
 8002d6c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_I2C2_TX;
 8002d6e:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002d70:	2210      	movs	r2, #16
 8002d72:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002d74:	4b4d      	ldr	r3, [pc, #308]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d7a:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d80:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002d82:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002d84:	2208      	movs	r2, #8
 8002d86:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8002d88:	4b48      	ldr	r3, [pc, #288]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002d94:	4b45      	ldr	r3, [pc, #276]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002d9a:	4b44      	ldr	r3, [pc, #272]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8002da0:	4b42      	ldr	r3, [pc, #264]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8002da6:	4b41      	ldr	r3, [pc, #260]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002dac:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002db2:	4b3e      	ldr	r3, [pc, #248]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8002db8:	4b3c      	ldr	r3, [pc, #240]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002dbe:	483b      	ldr	r0, [pc, #236]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002dc0:	f005 fd02 	bl	80087c8 <HAL_DMA_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_MspInit+0x21e>
      Error_Handler();
 8002dca:	f7ff fb0f 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmatx, handle_GPDMA1_Channel3);
 8002dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a34      	ldr	r2, [pc, #208]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38
 8002ddc:	4a33      	ldr	r2, [pc, #204]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002dea:	2110      	movs	r1, #16
 8002dec:	482f      	ldr	r0, [pc, #188]	; (8002eac <HAL_I2C_MspInit+0x2fc>)
 8002dee:	f006 f894 	bl	8008f1a <HAL_DMA_ConfigChannelAttributes>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_I2C_MspInit+0x24c>
      Error_Handler();
 8002df8:	f7ff faf8 	bl	80023ec <Error_Handler>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <HAL_I2C_MspInit+0x308>)
 8002e00:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_I2C2_RX;
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e04:	220f      	movs	r2, #15
 8002e06:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002e08:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e0e:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8002e14:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e20:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002e22:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002e28:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002e2e:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8002e34:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8002e3a:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002e40:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8002e52:	4818      	ldr	r0, [pc, #96]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e54:	f005 fcb8 	bl	80087c8 <HAL_DMA_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_MspInit+0x2b2>
      Error_Handler();
 8002e5e:	f7ff fac5 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmarx, handle_GPDMA1_Channel2);
 8002e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e70:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002e7e:	2110      	movs	r1, #16
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <HAL_I2C_MspInit+0x304>)
 8002e82:	f006 f84a 	bl	8008f1a <HAL_DMA_ConfigChannelAttributes>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d067      	beq.n	8002f5c <HAL_I2C_MspInit+0x3ac>
      Error_Handler();
 8002e8c:	f7ff faae 	bl	80023ec <Error_Handler>
}
 8002e90:	e064      	b.n	8002f5c <HAL_I2C_MspInit+0x3ac>
 8002e92:	bf00      	nop
 8002e94:	40005400 	.word	0x40005400
 8002e98:	46020c00 	.word	0x46020c00
 8002e9c:	42020400 	.word	0x42020400
 8002ea0:	40005800 	.word	0x40005800
 8002ea4:	42021400 	.word	0x42021400
 8002ea8:	42021c00 	.word	0x42021c00
 8002eac:	20000fa8 	.word	0x20000fa8
 8002eb0:	400201d0 	.word	0x400201d0
 8002eb4:	20001020 	.word	0x20001020
 8002eb8:	40020150 	.word	0x40020150
  else if(hi2c->Instance==I2C3)
 8002ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <HAL_I2C_MspInit+0x3b8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d146      	bne.n	8002f5c <HAL_I2C_MspInit+0x3ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f00a fe91 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_I2C_MspInit+0x344>
      Error_Handler();
 8002ef0:	f7ff fa7c 	bl	80023ec <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_I2C_MspInit+0x3bc>)
 8002ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002efa:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_I2C_MspInit+0x3bc>)
 8002efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f00:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_I2C_MspInit+0x3bc>)
 8002f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002f12:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002f16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f1a:	2312      	movs	r3, #18
 8002f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f32:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f36:	4619      	mov	r1, r3
 8002f38:	480d      	ldr	r0, [pc, #52]	; (8002f70 <HAL_I2C_MspInit+0x3c0>)
 8002f3a:	f007 fa1d 	bl	800a378 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_I2C_MspInit+0x3bc>)
 8002f40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f44:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_I2C_MspInit+0x3bc>)
 8002f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_I2C_MspInit+0x3bc>)
 8002f50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	46002800 	.word	0x46002800
 8002f6c:	46020c00 	.word	0x46020c00
 8002f70:	42021800 	.word	0x42021800

08002f74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b0b6      	sub	sp, #216	; 0xd8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f7c:	f107 0310 	add.w	r3, r7, #16
 8002f80:	22c8      	movs	r2, #200	; 0xc8
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f017 fdfe 	bl	801ab86 <memset>
  if(hrtc->Instance==RTC)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_RTC_MspInit+0x80>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d12a      	bne.n	8002fea <HAL_RTC_MspInit+0x76>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	4618      	mov	r0, r3
 8002fae:	f00a fe2d 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002fb8:	f7ff fa18 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <HAL_RTC_MspInit+0x84>)
 8002fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fc2:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <HAL_RTC_MspInit+0x84>)
 8002fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_RTC_MspInit+0x84>)
 8002fce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <HAL_RTC_MspInit+0x84>)
 8002fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fd8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_RTC_MspInit+0x84>)
 8002fde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002fea:	bf00      	nop
 8002fec:	37d8      	adds	r7, #216	; 0xd8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	46007800 	.word	0x46007800
 8002ff8:	46020c00 	.word	0x46020c00

08002ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b0c4      	sub	sp, #272	; 0x110
 8003000:	af00      	add	r7, sp, #0
 8003002:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003006:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800300a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800301c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003020:	22c8      	movs	r2, #200	; 0xc8
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f017 fdae 	bl	801ab86 <memset>
  if(hspi->Instance==SPI1)
 800302a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800302e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4aaf      	ldr	r2, [pc, #700]	; (80032f4 <HAL_SPI_MspInit+0x2f8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d147      	bne.n	80030cc <HAL_SPI_MspInit+0xd0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800303c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8003048:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800304c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003054:	4618      	mov	r0, r3
 8003056:	f00a fdd9 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8003060:	f7ff f9c4 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003064:	4ba4      	ldr	r3, [pc, #656]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 8003066:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800306a:	4aa3      	ldr	r2, [pc, #652]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 800306c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003070:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003074:	4ba0      	ldr	r3, [pc, #640]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 8003076:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800307a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003082:	4b9d      	ldr	r3, [pc, #628]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 8003084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003088:	4a9b      	ldr	r2, [pc, #620]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 800308a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003092:	4b99      	ldr	r3, [pc, #612]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 8003094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 80030a0:	231c      	movs	r3, #28
 80030a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a6:	2302      	movs	r3, #2
 80030a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030b8:	2305      	movs	r3, #5
 80030ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030be:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80030c2:	4619      	mov	r1, r3
 80030c4:	488d      	ldr	r0, [pc, #564]	; (80032fc <HAL_SPI_MspInit+0x300>)
 80030c6:	f007 f957 	bl	800a378 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80030ca:	e1d1      	b.n	8003470 <HAL_SPI_MspInit+0x474>
  else if(hspi->Instance==SPI2)
 80030cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a89      	ldr	r2, [pc, #548]	; (8003300 <HAL_SPI_MspInit+0x304>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	f040 811e 	bne.w	800331c <HAL_SPI_MspInit+0x320>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80030e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030f6:	4618      	mov	r0, r3
 80030f8:	f00a fd88 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 8003102:	f7ff f973 	bl	80023ec <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003106:	4b7c      	ldr	r3, [pc, #496]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 8003108:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800310c:	4a7a      	ldr	r2, [pc, #488]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 800310e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003112:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003116:	4b78      	ldr	r3, [pc, #480]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 8003118:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800311c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003124:	4b74      	ldr	r3, [pc, #464]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 8003126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800312a:	4a73      	ldr	r2, [pc, #460]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003130:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003134:	4b70      	ldr	r3, [pc, #448]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 8003136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	623b      	str	r3, [r7, #32]
 8003140:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003142:	4b6d      	ldr	r3, [pc, #436]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 8003144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003148:	4a6b      	ldr	r2, [pc, #428]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 800314a:	f043 0308 	orr.w	r3, r3, #8
 800314e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003152:	4b69      	ldr	r3, [pc, #420]	; (80032f8 <HAL_SPI_MspInit+0x2fc>)
 8003154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003160:	230a      	movs	r3, #10
 8003162:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003166:	2302      	movs	r3, #2
 8003168:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003178:	2305      	movs	r3, #5
 800317a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800317e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003182:	4619      	mov	r1, r3
 8003184:	485f      	ldr	r0, [pc, #380]	; (8003304 <HAL_SPI_MspInit+0x308>)
 8003186:	f007 f8f7 	bl	800a378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800318a:	2308      	movs	r3, #8
 800318c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	2302      	movs	r3, #2
 8003192:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031a2:	2305      	movs	r3, #5
 80031a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80031ac:	4619      	mov	r1, r3
 80031ae:	4856      	ldr	r0, [pc, #344]	; (8003308 <HAL_SPI_MspInit+0x30c>)
 80031b0:	f007 f8e2 	bl	800a378 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80031b4:	4b55      	ldr	r3, [pc, #340]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031b6:	4a56      	ldr	r2, [pc, #344]	; (8003310 <HAL_SPI_MspInit+0x314>)
 80031b8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 80031ba:	4b54      	ldr	r3, [pc, #336]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031bc:	2209      	movs	r2, #9
 80031be:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80031c0:	4b52      	ldr	r3, [pc, #328]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031c6:	4b51      	ldr	r3, [pc, #324]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031cc:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 80031ce:	4b4f      	ldr	r3, [pc, #316]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031d0:	2208      	movs	r2, #8
 80031d2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 80031d4:	4b4d      	ldr	r3, [pc, #308]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80031da:	4b4c      	ldr	r3, [pc, #304]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80031e0:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80031e6:	4b49      	ldr	r3, [pc, #292]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 80031ec:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 80031f2:	4b46      	ldr	r3, [pc, #280]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80031f8:	4b44      	ldr	r3, [pc, #272]	; (800330c <HAL_SPI_MspInit+0x310>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80031fe:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_SPI_MspInit+0x310>)
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8003204:	4b41      	ldr	r3, [pc, #260]	; (800330c <HAL_SPI_MspInit+0x310>)
 8003206:	2200      	movs	r2, #0
 8003208:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 800320a:	4840      	ldr	r0, [pc, #256]	; (800330c <HAL_SPI_MspInit+0x310>)
 800320c:	f005 fadc 	bl	80087c8 <HAL_DMA_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_SPI_MspInit+0x21e>
      Error_Handler();
 8003216:	f7ff f8e9 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 800321a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800321e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a39      	ldr	r2, [pc, #228]	; (800330c <HAL_SPI_MspInit+0x310>)
 8003226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800322a:	4a38      	ldr	r2, [pc, #224]	; (800330c <HAL_SPI_MspInit+0x310>)
 800322c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003230:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003238:	2110      	movs	r1, #16
 800323a:	4834      	ldr	r0, [pc, #208]	; (800330c <HAL_SPI_MspInit+0x310>)
 800323c:	f005 fe6d 	bl	8008f1a <HAL_DMA_ConfigChannelAttributes>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_SPI_MspInit+0x24e>
      Error_Handler();
 8003246:	f7ff f8d1 	bl	80023ec <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800324a:	4b32      	ldr	r3, [pc, #200]	; (8003314 <HAL_SPI_MspInit+0x318>)
 800324c:	4a32      	ldr	r2, [pc, #200]	; (8003318 <HAL_SPI_MspInit+0x31c>)
 800324e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 8003250:	4b30      	ldr	r3, [pc, #192]	; (8003314 <HAL_SPI_MspInit+0x318>)
 8003252:	2208      	movs	r2, #8
 8003254:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003256:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_SPI_MspInit+0x318>)
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800325c:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_SPI_MspInit+0x318>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8003262:	4b2c      	ldr	r3, [pc, #176]	; (8003314 <HAL_SPI_MspInit+0x318>)
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_SPI_MspInit+0x318>)
 800326a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800326e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8003270:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_SPI_MspInit+0x318>)
 8003272:	2200      	movs	r2, #0
 8003274:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8003276:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_SPI_MspInit+0x318>)
 8003278:	2200      	movs	r2, #0
 800327a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_SPI_MspInit+0x318>)
 800327e:	2200      	movs	r2, #0
 8003280:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_SPI_MspInit+0x318>)
 8003284:	2201      	movs	r2, #1
 8003286:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8003288:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_SPI_MspInit+0x318>)
 800328a:	2201      	movs	r2, #1
 800328c:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800328e:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_SPI_MspInit+0x318>)
 8003290:	2200      	movs	r2, #0
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003294:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <HAL_SPI_MspInit+0x318>)
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 800329a:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_SPI_MspInit+0x318>)
 800329c:	2200      	movs	r2, #0
 800329e:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80032a0:	481c      	ldr	r0, [pc, #112]	; (8003314 <HAL_SPI_MspInit+0x318>)
 80032a2:	f005 fa91 	bl	80087c8 <HAL_DMA_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_SPI_MspInit+0x2b4>
      Error_Handler();
 80032ac:	f7ff f89e 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 80032b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a16      	ldr	r2, [pc, #88]	; (8003314 <HAL_SPI_MspInit+0x318>)
 80032bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80032c0:	4a14      	ldr	r2, [pc, #80]	; (8003314 <HAL_SPI_MspInit+0x318>)
 80032c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80032ce:	2110      	movs	r1, #16
 80032d0:	4810      	ldr	r0, [pc, #64]	; (8003314 <HAL_SPI_MspInit+0x318>)
 80032d2:	f005 fe22 	bl	8008f1a <HAL_DMA_ConfigChannelAttributes>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_SPI_MspInit+0x2e4>
      Error_Handler();
 80032dc:	f7ff f886 	bl	80023ec <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	203c      	movs	r0, #60	; 0x3c
 80032e6:	f004 ff4c 	bl	8008182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80032ea:	203c      	movs	r0, #60	; 0x3c
 80032ec:	f004 ff63 	bl	80081b6 <HAL_NVIC_EnableIRQ>
}
 80032f0:	e0be      	b.n	8003470 <HAL_SPI_MspInit+0x474>
 80032f2:	bf00      	nop
 80032f4:	40013000 	.word	0x40013000
 80032f8:	46020c00 	.word	0x46020c00
 80032fc:	42021800 	.word	0x42021800
 8003300:	40003800 	.word	0x40003800
 8003304:	42022000 	.word	0x42022000
 8003308:	42020c00 	.word	0x42020c00
 800330c:	200013a8 	.word	0x200013a8
 8003310:	400200d0 	.word	0x400200d0
 8003314:	20001420 	.word	0x20001420
 8003318:	40020050 	.word	0x40020050
  else if(hspi->Instance==SPI3)
 800331c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003320:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a54      	ldr	r2, [pc, #336]	; (800347c <HAL_SPI_MspInit+0x480>)
 800332a:	4293      	cmp	r3, r2
 800332c:	f040 80a0 	bne.w	8003470 <HAL_SPI_MspInit+0x474>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003330:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 800333c:	2310      	movs	r3, #16
 800333e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003342:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003346:	4618      	mov	r0, r3
 8003348:	f00a fc60 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_SPI_MspInit+0x35a>
      Error_Handler();
 8003352:	f7ff f84b 	bl	80023ec <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003356:	4b4a      	ldr	r3, [pc, #296]	; (8003480 <HAL_SPI_MspInit+0x484>)
 8003358:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800335c:	4a48      	ldr	r2, [pc, #288]	; (8003480 <HAL_SPI_MspInit+0x484>)
 800335e:	f043 0320 	orr.w	r3, r3, #32
 8003362:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8003366:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_SPI_MspInit+0x484>)
 8003368:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003374:	4b42      	ldr	r3, [pc, #264]	; (8003480 <HAL_SPI_MspInit+0x484>)
 8003376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800337a:	4a41      	ldr	r2, [pc, #260]	; (8003480 <HAL_SPI_MspInit+0x484>)
 800337c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003380:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003384:	4b3e      	ldr	r3, [pc, #248]	; (8003480 <HAL_SPI_MspInit+0x484>)
 8003386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003392:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <HAL_SPI_MspInit+0x484>)
 8003394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003398:	4a39      	ldr	r2, [pc, #228]	; (8003480 <HAL_SPI_MspInit+0x484>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033a2:	4b37      	ldr	r3, [pc, #220]	; (8003480 <HAL_SPI_MspInit+0x484>)
 80033a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a8:	f003 0201 	and.w	r2, r3, #1
 80033ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033be:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c0:	4b2f      	ldr	r3, [pc, #188]	; (8003480 <HAL_SPI_MspInit+0x484>)
 80033c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c6:	4a2e      	ldr	r2, [pc, #184]	; (8003480 <HAL_SPI_MspInit+0x484>)
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033d0:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <HAL_SPI_MspInit+0x484>)
 80033d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d6:	f003 0202 	and.w	r2, r3, #2
 80033da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033ec:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003408:	2306      	movs	r3, #6
 800340a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800340e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003412:	4619      	mov	r1, r3
 8003414:	481b      	ldr	r0, [pc, #108]	; (8003484 <HAL_SPI_MspInit+0x488>)
 8003416:	f006 ffaf 	bl	800a378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800341a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800341e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003422:	2302      	movs	r3, #2
 8003424:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003434:	2306      	movs	r3, #6
 8003436:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800343e:	4619      	mov	r1, r3
 8003440:	4811      	ldr	r0, [pc, #68]	; (8003488 <HAL_SPI_MspInit+0x48c>)
 8003442:	f006 ff99 	bl	800a378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003446:	2330      	movs	r3, #48	; 0x30
 8003448:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800345e:	2306      	movs	r3, #6
 8003460:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003464:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003468:	4619      	mov	r1, r3
 800346a:	4808      	ldr	r0, [pc, #32]	; (800348c <HAL_SPI_MspInit+0x490>)
 800346c:	f006 ff84 	bl	800a378 <HAL_GPIO_Init>
}
 8003470:	bf00      	nop
 8003472:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	46002000 	.word	0x46002000
 8003480:	46020c00 	.word	0x46020c00
 8003484:	42021800 	.word	0x42021800
 8003488:	42020000 	.word	0x42020000
 800348c:	42020400 	.word	0x42020400

08003490 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a29      	ldr	r2, [pc, #164]	; (8003544 <HAL_SPI_MspDeInit+0xb4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10c      	bne.n	80034bc <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80034a2:	4b29      	ldr	r3, [pc, #164]	; (8003548 <HAL_SPI_MspDeInit+0xb8>)
 80034a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034a8:	4a27      	ldr	r2, [pc, #156]	; (8003548 <HAL_SPI_MspDeInit+0xb8>)
 80034aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ae:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2);
 80034b2:	211c      	movs	r1, #28
 80034b4:	4825      	ldr	r0, [pc, #148]	; (800354c <HAL_SPI_MspDeInit+0xbc>)
 80034b6:	f007 f937 	bl	800a728 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80034ba:	e03f      	b.n	800353c <HAL_SPI_MspDeInit+0xac>
  else if(hspi->Instance==SPI2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a23      	ldr	r2, [pc, #140]	; (8003550 <HAL_SPI_MspDeInit+0xc0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d11f      	bne.n	8003506 <HAL_SPI_MspDeInit+0x76>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_SPI_MspDeInit+0xb8>)
 80034c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034cc:	4a1e      	ldr	r2, [pc, #120]	; (8003548 <HAL_SPI_MspDeInit+0xb8>)
 80034ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_1|GPIO_PIN_3);
 80034d6:	210a      	movs	r1, #10
 80034d8:	481e      	ldr	r0, [pc, #120]	; (8003554 <HAL_SPI_MspDeInit+0xc4>)
 80034da:	f007 f925 	bl	800a728 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3);
 80034de:	2108      	movs	r1, #8
 80034e0:	481d      	ldr	r0, [pc, #116]	; (8003558 <HAL_SPI_MspDeInit+0xc8>)
 80034e2:	f007 f921 	bl	800a728 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ec:	4618      	mov	r0, r3
 80034ee:	f005 fa9d 	bl	8008a2c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f8:	4618      	mov	r0, r3
 80034fa:	f005 fa97 	bl	8008a2c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 80034fe:	203c      	movs	r0, #60	; 0x3c
 8003500:	f004 fe67 	bl	80081d2 <HAL_NVIC_DisableIRQ>
}
 8003504:	e01a      	b.n	800353c <HAL_SPI_MspDeInit+0xac>
  else if(hspi->Instance==SPI3)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a14      	ldr	r2, [pc, #80]	; (800355c <HAL_SPI_MspDeInit+0xcc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d115      	bne.n	800353c <HAL_SPI_MspDeInit+0xac>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_SPI_MspDeInit+0xb8>)
 8003512:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <HAL_SPI_MspDeInit+0xb8>)
 8003518:	f023 0320 	bic.w	r3, r3, #32
 800351c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 8003520:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003524:	4809      	ldr	r0, [pc, #36]	; (800354c <HAL_SPI_MspDeInit+0xbc>)
 8003526:	f007 f8ff 	bl	800a728 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 800352a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800352e:	480c      	ldr	r0, [pc, #48]	; (8003560 <HAL_SPI_MspDeInit+0xd0>)
 8003530:	f007 f8fa 	bl	800a728 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4|GPIO_PIN_5);
 8003534:	2130      	movs	r1, #48	; 0x30
 8003536:	480b      	ldr	r0, [pc, #44]	; (8003564 <HAL_SPI_MspDeInit+0xd4>)
 8003538:	f007 f8f6 	bl	800a728 <HAL_GPIO_DeInit>
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40013000 	.word	0x40013000
 8003548:	46020c00 	.word	0x46020c00
 800354c:	42021800 	.word	0x42021800
 8003550:	40003800 	.word	0x40003800
 8003554:	42022000 	.word	0x42022000
 8003558:	42020c00 	.word	0x42020c00
 800355c:	46002000 	.word	0x46002000
 8003560:	42020000 	.word	0x42020000
 8003564:	42020400 	.word	0x42020400

08003568 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <HAL_TIM_IC_MspInit+0x88>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d12d      	bne.n	80035e6 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800358a:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_TIM_IC_MspInit+0x8c>)
 800358c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003590:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <HAL_TIM_IC_MspInit+0x8c>)
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800359a:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_TIM_IC_MspInit+0x8c>)
 800359c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a8:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_TIM_IC_MspInit+0x8c>)
 80035aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ae:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <HAL_TIM_IC_MspInit+0x8c>)
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_TIM_IC_MspInit+0x8c>)
 80035ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_PWM_Pin;
 80035c6:	2340      	movs	r3, #64	; 0x40
 80035c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d2:	2300      	movs	r3, #0
 80035d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035d6:	2302      	movs	r3, #2
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_PWM_GPIO_Port, &GPIO_InitStruct);
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	4619      	mov	r1, r3
 80035e0:	4805      	ldr	r0, [pc, #20]	; (80035f8 <HAL_TIM_IC_MspInit+0x90>)
 80035e2:	f006 fec9 	bl	800a378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035e6:	bf00      	nop
 80035e8:	3728      	adds	r7, #40	; 0x28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40000400 	.word	0x40000400
 80035f4:	46020c00 	.word	0x46020c00
 80035f8:	42020800 	.word	0x42020800

080035fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b0c0      	sub	sp, #256	; 0x100
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003614:	f107 0320 	add.w	r3, r7, #32
 8003618:	22c8      	movs	r2, #200	; 0xc8
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f017 fab2 	bl	801ab86 <memset>
  if(huart->Instance==USART2)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5e      	ldr	r2, [pc, #376]	; (80037a0 <HAL_UART_MspInit+0x1a4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d145      	bne.n	80036b8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800362c:	f04f 0202 	mov.w	r2, #2
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003638:	2300      	movs	r3, #0
 800363a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800363c:	f107 0320 	add.w	r3, r7, #32
 8003640:	4618      	mov	r0, r3
 8003642:	f00a fae3 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800364c:	f7fe fece 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003650:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 8003652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003656:	4a53      	ldr	r2, [pc, #332]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 8003658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003660:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 8003662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800366e:	4b4d      	ldr	r3, [pc, #308]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 8003670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003674:	4a4b      	ldr	r2, [pc, #300]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 8003676:	f043 0308 	orr.w	r3, r3, #8
 800367a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800367e:	4b49      	ldr	r3, [pc, #292]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 8003680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 800368c:	2370      	movs	r3, #112	; 0x70
 800368e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	2302      	movs	r3, #2
 8003694:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036a4:	2307      	movs	r3, #7
 80036a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036aa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80036ae:	4619      	mov	r1, r3
 80036b0:	483d      	ldr	r0, [pc, #244]	; (80037a8 <HAL_UART_MspInit+0x1ac>)
 80036b2:	f006 fe61 	bl	800a378 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036b6:	e06e      	b.n	8003796 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3b      	ldr	r2, [pc, #236]	; (80037ac <HAL_UART_MspInit+0x1b0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d169      	bne.n	8003796 <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80036c2:	f04f 0204 	mov.w	r2, #4
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80036ce:	2300      	movs	r3, #0
 80036d0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036d2:	f107 0320 	add.w	r3, r7, #32
 80036d6:	4618      	mov	r0, r3
 80036d8:	f00a fa98 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_UART_MspInit+0xea>
      Error_Handler();
 80036e2:	f7fe fe83 	bl	80023ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036e6:	4b2f      	ldr	r3, [pc, #188]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 80036e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ec:	4a2d      	ldr	r2, [pc, #180]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 80036ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80036f6:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 80036f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003704:	4b27      	ldr	r3, [pc, #156]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 8003706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370a:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003714:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 8003716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 8003724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003728:	4a1e      	ldr	r2, [pc, #120]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 800372a:	f043 0308 	orr.w	r3, r3, #8
 800372e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003732:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <HAL_UART_MspInit+0x1a8>)
 8003734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8003740:	23a0      	movs	r3, #160	; 0xa0
 8003742:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003758:	2307      	movs	r3, #7
 800375a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003762:	4619      	mov	r1, r3
 8003764:	4812      	ldr	r0, [pc, #72]	; (80037b0 <HAL_UART_MspInit+0x1b4>)
 8003766:	f006 fe07 	bl	800a378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800376a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800376e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003772:	2302      	movs	r3, #2
 8003774:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377e:	2300      	movs	r3, #0
 8003780:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003784:	2307      	movs	r3, #7
 8003786:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800378a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800378e:	4619      	mov	r1, r3
 8003790:	4805      	ldr	r0, [pc, #20]	; (80037a8 <HAL_UART_MspInit+0x1ac>)
 8003792:	f006 fdf1 	bl	800a378 <HAL_GPIO_Init>
}
 8003796:	bf00      	nop
 8003798:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40004400 	.word	0x40004400
 80037a4:	46020c00 	.word	0x46020c00
 80037a8:	42020c00 	.word	0x42020c00
 80037ac:	40004800 	.word	0x40004800
 80037b0:	42020000 	.word	0x42020000

080037b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b0be      	sub	sp, #248	; 0xf8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037cc:	f107 0318 	add.w	r3, r7, #24
 80037d0:	22c8      	movs	r2, #200	; 0xc8
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f017 f9d6 	bl	801ab86 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a3c      	ldr	r2, [pc, #240]	; (80038d0 <HAL_PCD_MspInit+0x11c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d171      	bne.n	80038c8 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80037e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037f6:	f107 0318 	add.w	r3, r7, #24
 80037fa:	4618      	mov	r0, r3
 80037fc:	f00a fa06 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8003806:	f7fe fdf1 	bl	80023ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800380a:	4b32      	ldr	r3, [pc, #200]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003810:	4a30      	ldr	r2, [pc, #192]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800381a:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 800381c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8003828:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800382c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383c:	2303      	movs	r3, #3
 800383e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003842:	230a      	movs	r3, #10
 8003844:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003848:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800384c:	4619      	mov	r1, r3
 800384e:	4822      	ldr	r0, [pc, #136]	; (80038d8 <HAL_PCD_MspInit+0x124>)
 8003850:	f006 fd92 	bl	800a378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003854:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 8003856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800385a:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 800385c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003860:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 8003866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800386a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003872:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 8003874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d119      	bne.n	80038b4 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 8003882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003886:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003890:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 8003892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800389e:	f008 fed9 	bl	800c654 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 80038a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a8:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <HAL_PCD_MspInit+0x120>)
 80038aa:	f023 0304 	bic.w	r3, r3, #4
 80038ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80038b2:	e001      	b.n	80038b8 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80038b4:	f008 fece 	bl	800c654 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80038b8:	2200      	movs	r2, #0
 80038ba:	2100      	movs	r1, #0
 80038bc:	2049      	movs	r0, #73	; 0x49
 80038be:	f004 fc60 	bl	8008182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80038c2:	2049      	movs	r0, #73	; 0x49
 80038c4:	f004 fc77 	bl	80081b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80038c8:	bf00      	nop
 80038ca:	37f8      	adds	r7, #248	; 0xf8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	42040000 	.word	0x42040000
 80038d4:	46020c00 	.word	0x46020c00
 80038d8:	42020000 	.word	0x42020000

080038dc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b0bc      	sub	sp, #240	; 0xf0
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038e4:	f107 0310 	add.w	r3, r7, #16
 80038e8:	22c8      	movs	r2, #200	; 0xc8
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f017 f94a 	bl	801ab86 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a46      	ldr	r2, [pc, #280]	; (8003a10 <HAL_SAI_MspInit+0x134>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d13f      	bne.n	800397c <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80038fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL1;
 8003908:	2340      	movs	r3, #64	; 0x40
 800390a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800390e:	f107 0310 	add.w	r3, r7, #16
 8003912:	4618      	mov	r0, r3
 8003914:	f00a f97a 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_SAI_MspInit+0x46>
    {
      Error_Handler();
 800391e:	f7fe fd65 	bl	80023ec <Error_Handler>
    }

    if (SAI1_client == 0)
 8003922:	4b3c      	ldr	r3, [pc, #240]	; (8003a14 <HAL_SAI_MspInit+0x138>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <HAL_SAI_MspInit+0x6c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_SAI_MspInit+0x13c>)
 800392c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003930:	4a39      	ldr	r2, [pc, #228]	; (8003a18 <HAL_SAI_MspInit+0x13c>)
 8003932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003936:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <HAL_SAI_MspInit+0x13c>)
 800393c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <HAL_SAI_MspInit+0x138>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	4a31      	ldr	r2, [pc, #196]	; (8003a14 <HAL_SAI_MspInit+0x138>)
 8003950:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003952:	2374      	movs	r3, #116	; 0x74
 8003954:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003964:	2300      	movs	r3, #0
 8003966:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800396a:	230d      	movs	r3, #13
 800396c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003970:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003974:	4619      	mov	r1, r3
 8003976:	4829      	ldr	r0, [pc, #164]	; (8003a1c <HAL_SAI_MspInit+0x140>)
 8003978:	f006 fcfe 	bl	800a378 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <HAL_SAI_MspInit+0x144>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d13f      	bne.n	8003a06 <HAL_SAI_MspInit+0x12a>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8003986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL1;
 8003992:	2340      	movs	r3, #64	; 0x40
 8003994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003998:	f107 0310 	add.w	r3, r7, #16
 800399c:	4618      	mov	r0, r3
 800399e:	f00a f935 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_SAI_MspInit+0xd0>
    {
      Error_Handler();
 80039a8:	f7fe fd20 	bl	80023ec <Error_Handler>
    }

      if (SAI1_client == 0)
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_SAI_MspInit+0x138>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10e      	bne.n	80039d2 <HAL_SAI_MspInit+0xf6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80039b4:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <HAL_SAI_MspInit+0x13c>)
 80039b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039ba:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <HAL_SAI_MspInit+0x13c>)
 80039bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039c0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80039c4:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <HAL_SAI_MspInit+0x13c>)
 80039c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 80039d2:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <HAL_SAI_MspInit+0x138>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3301      	adds	r3, #1
 80039d8:	4a0e      	ldr	r2, [pc, #56]	; (8003a14 <HAL_SAI_MspInit+0x138>)
 80039da:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039dc:	2308      	movs	r3, #8
 80039de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e2:	2302      	movs	r3, #2
 80039e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80039f4:	230d      	movs	r3, #13
 80039f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80039fe:	4619      	mov	r1, r3
 8003a00:	4806      	ldr	r0, [pc, #24]	; (8003a1c <HAL_SAI_MspInit+0x140>)
 8003a02:	f006 fcb9 	bl	800a378 <HAL_GPIO_Init>

    }
}
 8003a06:	bf00      	nop
 8003a08:	37f0      	adds	r7, #240	; 0xf0
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40015404 	.word	0x40015404
 8003a14:	20002bec 	.word	0x20002bec
 8003a18:	46020c00 	.word	0x46020c00
 8003a1c:	42021000 	.word	0x42021000
 8003a20:	40015424 	.word	0x40015424

08003a24 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003a28:	e7fe      	b.n	8003a28 <NMI_Handler+0x4>

08003a2a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8003a2e:	e7fe      	b.n	8003a2e <HardFault_Handler+0x4>

08003a30 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8003a34:	e7fe      	b.n	8003a34 <MemManage_Handler+0x4>

08003a36 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8003a3a:	e7fe      	b.n	8003a3a <BusFault_Handler+0x4>

08003a3c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8003a40:	e7fe      	b.n	8003a40 <UsageFault_Handler+0x4>

08003a42 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8003a70:	f003 fe92 	bl	8007798 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI Line0 interrupt.
 */
void EXTI0_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	f006 ff61 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */

	/* USER CODE END EXTI0_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <EXTI1_IRQHandler>:

/**
 * @brief This function handles EXTI Line1 interrupt.
 */
void EXTI1_IRQHandler(void)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI1_IRQn 0 */

	/* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 8003a8a:	2002      	movs	r0, #2
 8003a8c:	f006 ff5a 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI1_IRQn 1 */

	/* USER CODE END EXTI1_IRQn 1 */
}
 8003a90:	bf00      	nop
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <EXTI2_IRQHandler>:

/**
 * @brief This function handles EXTI Line2 interrupt.
 */
void EXTI2_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI2_IRQn 0 */

	/* USER CODE END EXTI2_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 8003a98:	2004      	movs	r0, #4
 8003a9a:	f006 ff53 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI2_IRQn 1 */

	/* USER CODE END EXTI2_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <EXTI3_IRQHandler>:

/**
 * @brief This function handles EXTI Line3 interrupt.
 */
void EXTI3_IRQHandler(void)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI3_IRQn 0 */

	/* USER CODE END EXTI3_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 8003aa6:	2008      	movs	r0, #8
 8003aa8:	f006 ff4c 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI3_IRQn 1 */

	/* USER CODE END EXTI3_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <EXTI4_IRQHandler>:

/**
 * @brief This function handles EXTI Line4 interrupt.
 */
void EXTI4_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI4_IRQn 0 */

	/* USER CODE END EXTI4_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 8003ab4:	2010      	movs	r0, #16
 8003ab6:	f006 ff45 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI4_IRQn 1 */

	/* USER CODE END EXTI4_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}

08003abe <EXTI5_IRQHandler>:

/**
 * @brief This function handles EXTI Line5 interrupt.
 */
void EXTI5_IRQHandler(void)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI5_IRQn 0 */

	/* USER CODE END EXTI5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 8003ac2:	2020      	movs	r0, #32
 8003ac4:	f006 ff3e 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI5_IRQn 1 */

	/* USER CODE END EXTI5_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	bd80      	pop	{r7, pc}

08003acc <EXTI6_IRQHandler>:

/**
 * @brief This function handles EXTI Line6 interrupt.
 */
void EXTI6_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI6_IRQn 0 */

	/* USER CODE END EXTI6_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8003ad0:	2040      	movs	r0, #64	; 0x40
 8003ad2:	f006 ff37 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI6_IRQn 1 */

	/* USER CODE END EXTI6_IRQn 1 */
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <EXTI7_IRQHandler>:

/**
 * @brief This function handles EXTI Line7 interrupt.
 */
void EXTI7_IRQHandler(void)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI7_IRQn 0 */

	/* USER CODE END EXTI7_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 8003ade:	2080      	movs	r0, #128	; 0x80
 8003ae0:	f006 ff30 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI7_IRQn 1 */

	/* USER CODE END EXTI7_IRQn 1 */
}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <EXTI9_IRQHandler>:

/**
 * @brief This function handles EXTI Line9 interrupt.
 */
void EXTI9_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_IRQn 0 */

	/* USER CODE END EXTI9_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 8003aec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003af0:	f006 ff28 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_IRQn 1 */

	/* USER CODE END EXTI9_IRQn 1 */
}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <EXTI10_IRQHandler>:

/**
 * @brief This function handles EXTI Line10 interrupt.
 */
void EXTI10_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI10_IRQn 0 */

	/* USER CODE END EXTI10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 8003afc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003b00:	f006 ff20 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI10_IRQn 1 */

	/* USER CODE END EXTI10_IRQn 1 */
}
 8003b04:	bf00      	nop
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <EXTI11_IRQHandler>:

/**
 * @brief This function handles EXTI Line11 interrupt.
 */
void EXTI11_IRQHandler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI11_IRQn 0 */

	/* USER CODE END EXTI11_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 8003b0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b10:	f006 ff18 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI11_IRQn 1 */

	/* USER CODE END EXTI11_IRQn 1 */
}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <EXTI13_IRQHandler>:

/**
 * @brief This function handles EXTI Line13 interrupt.
 */
void EXTI13_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI13_IRQn 0 */

	/* USER CODE END EXTI13_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 8003b1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b20:	f006 ff10 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI13_IRQn 1 */

	/* USER CODE END EXTI13_IRQn 1 */
}
 8003b24:	bf00      	nop
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <EXTI14_IRQHandler>:

/**
 * @brief This function handles EXTI Line14 interrupt.
 */
void EXTI14_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI14_IRQn 0 */

	/* USER CODE END EXTI14_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8003b2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b30:	f006 ff08 	bl	800a944 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI14_IRQn 1 */

	/* USER CODE END EXTI14_IRQn 1 */
}
 8003b34:	bf00      	nop
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <GPDMA1_Channel0_IRQHandler>:

/**
 * @brief This function handles GPDMA1 Channel 0 global interrupt.
 */
void GPDMA1_Channel0_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

	/* USER CODE END GPDMA1_Channel0_IRQn 0 */
	HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8003b3c:	4802      	ldr	r0, [pc, #8]	; (8003b48 <GPDMA1_Channel0_IRQHandler+0x10>)
 8003b3e:	f005 f878 	bl	8008c32 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

	/* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20001420 	.word	0x20001420

08003b4c <GPDMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles GPDMA1 Channel 1 global interrupt.
 */
void GPDMA1_Channel1_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

	/* USER CODE END GPDMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8003b50:	4802      	ldr	r0, [pc, #8]	; (8003b5c <GPDMA1_Channel1_IRQHandler+0x10>)
 8003b52:	f005 f86e 	bl	8008c32 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

	/* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	200013a8 	.word	0x200013a8

08003b60 <GPDMA1_Channel2_IRQHandler>:

/**
 * @brief This function handles GPDMA1 Channel 2 global interrupt.
 */
void GPDMA1_Channel2_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

	/* USER CODE END GPDMA1_Channel2_IRQn 0 */
	HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8003b64:	4802      	ldr	r0, [pc, #8]	; (8003b70 <GPDMA1_Channel2_IRQHandler+0x10>)
 8003b66:	f005 f864 	bl	8008c32 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

	/* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20001020 	.word	0x20001020

08003b74 <GPDMA1_Channel3_IRQHandler>:

/**
 * @brief This function handles GPDMA1 Channel 3 global interrupt.
 */
void GPDMA1_Channel3_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

	/* USER CODE END GPDMA1_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8003b78:	4802      	ldr	r0, [pc, #8]	; (8003b84 <GPDMA1_Channel3_IRQHandler+0x10>)
 8003b7a:	f005 f85a 	bl	8008c32 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

	/* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000fa8 	.word	0x20000fa8

08003b88 <GPDMA1_Channel4_IRQHandler>:

/**
 * @brief This function handles GPDMA1 Channel 4 global interrupt.
 */
void GPDMA1_Channel4_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

	/* USER CODE END GPDMA1_Channel4_IRQn 0 */
	HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8003b8c:	4802      	ldr	r0, [pc, #8]	; (8003b98 <GPDMA1_Channel4_IRQHandler+0x10>)
 8003b8e:	f005 f850 	bl	8008c32 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

	/* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000e38 	.word	0x20000e38

08003b9c <GPDMA1_Channel5_IRQHandler>:

/**
 * @brief This function handles GPDMA1 Channel 5 global interrupt.
 */
void GPDMA1_Channel5_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

	/* USER CODE END GPDMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8003ba0:	4802      	ldr	r0, [pc, #8]	; (8003bac <GPDMA1_Channel5_IRQHandler+0x10>)
 8003ba2:	f005 f846 	bl	8008c32 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

	/* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000d84 	.word	0x20000d84

08003bb0 <SPI2_IRQHandler>:

/**
 * @brief This function handles SPI2 global interrupt.
 */
void SPI2_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI2_IRQn 0 */

	/* USER CODE END SPI2_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi2);
 8003bb4:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <SPI2_IRQHandler+0x10>)
 8003bb6:	f00d ffd3 	bl	8011b60 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI2_IRQn 1 */

	/* USER CODE END SPI2_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20001288 	.word	0x20001288

08003bc4 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB OTG FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003bc8:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <OTG_FS_IRQHandler+0x10>)
 8003bca:	f007 fb32 	bl	800b232 <HAL_PCD_IRQHandler>
	/* USER CODE BEGIN OTG_FS_IRQn 1 */

	/* USER CODE END OTG_FS_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20001604 	.word	0x20001604

08003bd8 <EXTI8_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI8_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	HAL_EXTI_IRQHandler(&H_EXTI_8);
 8003bdc:	4804      	ldr	r0, [pc, #16]	; (8003bf0 <EXTI8_IRQHandler+0x18>)
 8003bde:	f006 fb83 	bl	800a2e8 <HAL_EXTI_IRQHandler>
	count++;
 8003be2:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <EXTI8_IRQHandler+0x1c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3301      	adds	r3, #1
 8003be8:	4a02      	ldr	r2, [pc, #8]	; (8003bf4 <EXTI8_IRQHandler+0x1c>)
 8003bea:	6013      	str	r3, [r2, #0]
}
 8003bec:	bf00      	nop
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	20002bf0 	.word	0x20002bf0

08003bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return 1;
 8003bfc:	2301      	movs	r3, #1
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <_kill>:

int _kill(int pid, int sig)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c12:	f016 ff79 	bl	801ab08 <__errno>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2216      	movs	r2, #22
 8003c1a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <_exit>:

void _exit (int status)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c30:	f04f 31ff 	mov.w	r1, #4294967295
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ffe7 	bl	8003c08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c3a:	e7fe      	b.n	8003c3a <_exit+0x12>

08003c3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	e00a      	b.n	8003c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c4e:	e000      	b.n	8003c52 <_read+0x16>
 8003c50:	bf00      	nop
 8003c52:	4601      	mov	r1, r0
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	60ba      	str	r2, [r7, #8]
 8003c5a:	b2ca      	uxtb	r2, r1
 8003c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	dbf0      	blt.n	8003c4e <_read+0x12>
  }

  return len;
 8003c6c:	687b      	ldr	r3, [r7, #4]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e009      	b.n	8003c9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	60ba      	str	r2, [r7, #8]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fd f9f5 	bl	8001080 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	dbf1      	blt.n	8003c88 <_write+0x12>
  }
  return len;
 8003ca4:	687b      	ldr	r3, [r7, #4]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <_close>:

int _close(int file)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_isatty>:

int _isatty(int file)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cee:	2301      	movs	r3, #1
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d20:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <_sbrk+0x5c>)
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <_sbrk+0x60>)
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d2c:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <_sbrk+0x64>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <_sbrk+0x64>)
 8003d36:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <_sbrk+0x68>)
 8003d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <_sbrk+0x64>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d207      	bcs.n	8003d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d48:	f016 fede 	bl	801ab08 <__errno>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	220c      	movs	r2, #12
 8003d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	e009      	b.n	8003d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <_sbrk+0x64>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d5e:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <_sbrk+0x64>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <_sbrk+0x64>)
 8003d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200c0000 	.word	0x200c0000
 8003d78:	00000400 	.word	0x00000400
 8003d7c:	20002bf4 	.word	0x20002bf4
 8003d80:	20004478 	.word	0x20004478

08003d84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d88:	4b18      	ldr	r3, [pc, #96]	; (8003dec <SystemInit+0x68>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8e:	4a17      	ldr	r2, [pc, #92]	; (8003dec <SystemInit+0x68>)
 8003d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <SystemInit+0x6c>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <SystemInit+0x6c>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <SystemInit+0x6c>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <SystemInit+0x6c>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <SystemInit+0x6c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <SystemInit+0x6c>)
 8003db6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003dba:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003dbe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <SystemInit+0x6c>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <SystemInit+0x6c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <SystemInit+0x6c>)
 8003dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <SystemInit+0x6c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <SystemInit+0x68>)
 8003dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dde:	609a      	str	r2, [r3, #8]
  #endif
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	e000ed00 	.word	0xe000ed00
 8003df0:	46020c00 	.word	0x46020c00

08003df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e2c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003df8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003dfa:	e003      	b.n	8003e04 <LoopCopyDataInit>

08003dfc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003dfe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003e00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003e02:	3104      	adds	r1, #4

08003e04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003e04:	480b      	ldr	r0, [pc, #44]	; (8003e34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003e08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003e0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003e0c:	d3f6      	bcc.n	8003dfc <CopyDataInit>
	ldr	r2, =_sbss
 8003e0e:	4a0b      	ldr	r2, [pc, #44]	; (8003e3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003e10:	e002      	b.n	8003e18 <LoopFillZerobss>

08003e12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003e12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003e14:	f842 3b04 	str.w	r3, [r2], #4

08003e18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <LoopForever+0x16>)
	cmp	r2, r3
 8003e1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003e1c:	d3f9      	bcc.n	8003e12 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e1e:	f7ff ffb1 	bl	8003d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e22:	f016 fe77 	bl	801ab14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e26:	f7fd f93d 	bl	80010a4 <main>

08003e2a <LoopForever>:

LoopForever:
    b LoopForever
 8003e2a:	e7fe      	b.n	8003e2a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003e2c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8003e30:	08074b64 	.word	0x08074b64
	ldr	r0, =_sdata
 8003e34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003e38:	20000b04 	.word	0x20000b04
	ldr	r2, =_sbss
 8003e3c:	20000b20 	.word	0x20000b20
	ldr	r3, = _ebss
 8003e40:	20004477 	.word	0x20004477

08003e44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e44:	e7fe      	b.n	8003e44 <ADC1_IRQHandler>

08003e46 <pre_processing_init>:

#include "arm_math.h"
#include "params.h"
#include "pre_processing_app.h"

void pre_processing_init(pre_processing_data_t * pre_processing_data) {
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b086      	sub	sp, #24
 8003e4a:	af02      	add	r7, sp, #8
 8003e4c:	6078      	str	r0, [r7, #4]
	arm_status status;

	arm_rfft_fast_init_f32(&((*pre_processing_data).fft_handler), INPUT_BUFFER_SIZE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3318      	adds	r3, #24
 8003e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e56:	4618      	mov	r0, r3
 8003e58:	f015 fd86 	bl	8019968 <arm_rfft_fast_init_f32>
	status=arm_dct4_init_f32(&((*pre_processing_data).dct4f32), &((*pre_processing_data).rfftf32), &((*pre_processing_data).cfftradix4f32), TRIANGULAR_FILTERS_BANK_SIZE, TRIANGULAR_FILTERS_BANK_SIZE/2, 0.125);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003e6a:	2340      	movs	r3, #64	; 0x40
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8003e72:	2380      	movs	r3, #128	; 0x80
 8003e74:	f016 fa1c 	bl	801a2b0 <arm_dct4_init_f32>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]


	pre_processing_data->axis = SELECTED_AXIS;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
	pre_processing_data->triangular_filters_scale = TRIANGULAR_FILTERS_SCALE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
	pre_processing_data->signal_windowing = SIGNAL_WINDOWING;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a

	// Calculation of the triangular filters bank.
	//triangular_filters_bank(INPUT_BUFFER_SIZE, ISM330DHCX_ODR, pre_processing_data->triangular_filters_scale, (*pre_processing_data).bin);
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <pre_processing_process>:

void pre_processing_process(tridimensional_data_t * data_in , uint32_t data_in_size , float32_t * data_out, uint32_t data_out_size, pre_processing_data_t * pre_processing_data) {
 8003e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea0:	b08d      	sub	sp, #52	; 0x34
 8003ea2:	af02      	add	r7, sp, #8
 8003ea4:	6178      	str	r0, [r7, #20]
 8003ea6:	6139      	str	r1, [r7, #16]
 8003ea8:	60fa      	str	r2, [r7, #12]
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	466b      	mov	r3, sp
 8003eae:	461e      	mov	r6, r3
	// Accelerometer axes selection among X, Y, Z.
	float32_t data_1[data_in_size];
 8003eb0:	6939      	ldr	r1, [r7, #16]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb8:	2300      	movs	r3, #0
 8003eba:	6039      	str	r1, [r7, #0]
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	0143      	lsls	r3, r0, #5
 8003eca:	6838      	ldr	r0, [r7, #0]
 8003ecc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ed0:	6838      	ldr	r0, [r7, #0]
 8003ed2:	0142      	lsls	r2, r0, #5
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	468a      	mov	sl, r1
 8003ed8:	469b      	mov	fp, r3
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8003ee6:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8003eea:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8003eee:	008b      	lsls	r3, r1, #2
 8003ef0:	3307      	adds	r3, #7
 8003ef2:	08db      	lsrs	r3, r3, #3
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	ebad 0d03 	sub.w	sp, sp, r3
 8003efa:	ab02      	add	r3, sp, #8
 8003efc:	3303      	adds	r3, #3
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	623b      	str	r3, [r7, #32]
	axis_selection(data_in, data_in_size, data_1, data_in_size, pre_processing_data->axis);
 8003f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f06:	f893 3268 	ldrb.w	r3, [r3, #616]	; 0x268
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	6a3a      	ldr	r2, [r7, #32]
 8003f10:	6939      	ldr	r1, [r7, #16]
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	f000 f85c 	bl	8003fd0 <axis_selection>

	// Remove mean value from the signal.
	float32_t data_2[data_in_size];
 8003f18:	6939      	ldr	r1, [r7, #16]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	2300      	movs	r3, #0
 8003f22:	4688      	mov	r8, r1
 8003f24:	4699      	mov	r9, r3
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003f32:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003f36:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	461d      	mov	r5, r3
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	016b      	lsls	r3, r5, #5
 8003f4a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003f4e:	0162      	lsls	r2, r4, #5
 8003f50:	008b      	lsls	r3, r1, #2
 8003f52:	3307      	adds	r3, #7
 8003f54:	08db      	lsrs	r3, r3, #3
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	ebad 0d03 	sub.w	sp, sp, r3
 8003f5c:	ab02      	add	r3, sp, #8
 8003f5e:	3303      	adds	r3, #3
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	61bb      	str	r3, [r7, #24]
	mean_removal(data_1, data_in_size, data_2, data_in_size);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	6939      	ldr	r1, [r7, #16]
 8003f6c:	6a38      	ldr	r0, [r7, #32]
 8003f6e:	f000 f893 	bl	8004098 <mean_removal>

	// Mel Frequency Cepstral Coefficient calculation.
	//mfcc(data_2, data_in_size, data_out, data_out_size, ((*pre_processing_data).bin), &((*pre_processing_data).dct4f32), &((*pre_processing_data).fft_handler), (*pre_processing_data).signal_windowing);
	fft( data_2,  data_in_size, data_out,  data_out_size, &((*pre_processing_data).fft_handler), (*pre_processing_data).signal_windowing);
 8003f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f74:	3318      	adds	r3, #24
 8003f76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f78:	f892 226a 	ldrb.w	r2, [r2, #618]	; 0x26a
 8003f7c:	9201      	str	r2, [sp, #4]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	6939      	ldr	r1, [r7, #16]
 8003f86:	69b8      	ldr	r0, [r7, #24]
 8003f88:	f000 f90a 	bl	80041a0 <fft>
 8003f8c:	46b5      	mov	sp, r6
}
 8003f8e:	bf00      	nop
 8003f90:	372c      	adds	r7, #44	; 0x2c
 8003f92:	46bd      	mov	sp, r7
 8003f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003f98 <complex_abs>:
/*----------------------------------------------------------------------------*/
/* Support functions          			      						          */
/*----------------------------------------------------------------------------*/

// calculation of the complex absolute value
float complex_abs(float real, float compl) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003fa2:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8003fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003faa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003fae:	edd7 7a00 	vldr	s15, [r7]
 8003fb2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fba:	eeb0 0a67 	vmov.f32	s0, s15
 8003fbe:	f01b fabf 	bl	801f540 <sqrtf>
 8003fc2:	eef0 7a40 	vmov.f32	s15, s0
}
 8003fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <axis_selection>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Axis selection        						      */
/*----------------------------------------------------------------------------*/

void axis_selection( tridimensional_data_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, axis_t axis) {
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	; 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
	if (axis == X)
 8003fde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d118      	bne.n	8004018 <axis_selection+0x48>
	{
		for (int i=0; i<data_out_size ; i++){
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	e010      	b.n	800400e <axis_selection+0x3e>
	    	data_out[i]=data_in[i].x;
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	441a      	add	r2, r3
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	440b      	add	r3, r1
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	3301      	adds	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d8ea      	bhi.n	8003fec <axis_selection+0x1c>
	{
		for (int i=0; i<data_out_size ; i++){
	    	data_out[i]=data_in[i].z;
	    }
	}
}
 8004016:	e038      	b.n	800408a <axis_selection+0xba>
	else if (axis == Y)
 8004018:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800401c:	2b01      	cmp	r3, #1
 800401e:	d118      	bne.n	8004052 <axis_selection+0x82>
		for (int i=0; i<data_out_size ; i++){
 8004020:	2300      	movs	r3, #0
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	e010      	b.n	8004048 <axis_selection+0x78>
	    	data_out[i]=data_in[i].y;
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4613      	mov	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	461a      	mov	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	441a      	add	r2, r3
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	440b      	add	r3, r1
 800403e:	6852      	ldr	r2, [r2, #4]
 8004040:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	3301      	adds	r3, #1
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d8ea      	bhi.n	8004026 <axis_selection+0x56>
}
 8004050:	e01b      	b.n	800408a <axis_selection+0xba>
	else if (axis == Z)
 8004052:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004056:	2b02      	cmp	r3, #2
 8004058:	d117      	bne.n	800408a <axis_selection+0xba>
		for (int i=0; i<data_out_size ; i++){
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	e010      	b.n	8004082 <axis_selection+0xb2>
	    	data_out[i]=data_in[i].z;
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	441a      	add	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	440b      	add	r3, r1
 8004078:	6892      	ldr	r2, [r2, #8]
 800407a:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3301      	adds	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d8ea      	bhi.n	8004060 <axis_selection+0x90>
}
 800408a:	bf00      	nop
 800408c:	3724      	adds	r7, #36	; 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <mean_removal>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Remove mean from signal     			          */
/*----------------------------------------------------------------------------*/

void mean_removal (float32_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]

	static float32_t mean;

	// calculation of the signal mean value
	arm_mean_f32(data_in, data_in_size, &mean);
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <mean_removal+0x58>)
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f015 fae8 	bl	8019680 <arm_mean_f32>

	// subtract the mean value from the signal in order to remove gravity effect on the accelerometric data
	for (int i=0 ; i < data_out_size ; i++){
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	e013      	b.n	80040de <mean_removal+0x46>
		data_out[i] = data_in[i] - mean;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4413      	add	r3, r2
 80040be:	ed93 7a00 	vldr	s14, [r3]
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <mean_removal+0x58>)
 80040c4:	edd3 7a00 	vldr	s15, [r3]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	4413      	add	r3, r2
 80040d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d4:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0 ; i < data_out_size ; i++){
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3301      	adds	r3, #1
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d8e7      	bhi.n	80040b6 <mean_removal+0x1e>
	}
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20002bf8 	.word	0x20002bf8

080040f4 <hanning>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Multiply the Hanning window to the input signal   */
/*----------------------------------------------------------------------------*/

void hanning(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < data_in_size; i++) {
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	e03e      	b.n	8004186 <hanning+0x92>
		float32_t multiplier = 0.5 * (1 - arm_cos_f32((float32_t) 2*PI*i/(data_out_size-1)));
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004112:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004198 <hanning+0xa4>
 8004116:	ee27 7a87 	vmul.f32	s14, s15, s14
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	3b01      	subs	r3, #1
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800412a:	eeb0 0a66 	vmov.f32	s0, s13
 800412e:	f016 f933 	bl	801a398 <arm_cos_f32>
 8004132:	eef0 7a40 	vmov.f32	s15, s0
 8004136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800413a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800413e:	ee17 0a90 	vmov	r0, s15
 8004142:	f7fc fa05 	bl	8000550 <__aeabi_f2d>
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	4b14      	ldr	r3, [pc, #80]	; (800419c <hanning+0xa8>)
 800414c:	f7fc fa58 	bl	8000600 <__aeabi_dmul>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	f7fc fd4a 	bl	8000bf0 <__aeabi_d2f>
 800415c:	4603      	mov	r3, r0
 800415e:	613b      	str	r3, [r7, #16]
		data_out[i] = multiplier * data_in[i];
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	ed93 7a00 	vldr	s14, [r3]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	edd7 7a04 	vldr	s15, [r7, #16]
 8004178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417c:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < data_in_size; i++) {
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	3301      	adds	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	d8bc      	bhi.n	8004108 <hanning+0x14>
	}
}
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40c90fdb 	.word	0x40c90fdb
 800419c:	3fe00000 	.word	0x3fe00000

080041a0 <fft>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  FFT Calculation using CMSIS DSP Library           */
/*----------------------------------------------------------------------------*/

void fft(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, arm_rfft_fast_instance_f32 * fft_handler, signal_windowing_t signal_windowing) {
 80041a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041a4:	b089      	sub	sp, #36	; 0x24
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	466b      	mov	r3, sp
 80041b2:	461e      	mov	r6, r3

	float32_t fft_out_buf[data_in_size];
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	460b      	mov	r3, r1
 80041b8:	3b01      	subs	r3, #1
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	2300      	movs	r3, #0
 80041be:	4688      	mov	r8, r1
 80041c0:	4699      	mov	r9, r3
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80041ce:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80041d2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80041d6:	2300      	movs	r3, #0
 80041d8:	460c      	mov	r4, r1
 80041da:	461d      	mov	r5, r3
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	016b      	lsls	r3, r5, #5
 80041e6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80041ea:	0162      	lsls	r2, r4, #5
 80041ec:	008b      	lsls	r3, r1, #2
 80041ee:	3307      	adds	r3, #7
 80041f0:	08db      	lsrs	r3, r3, #3
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	ebad 0d03 	sub.w	sp, sp, r3
 80041f8:	466b      	mov	r3, sp
 80041fa:	3303      	adds	r3, #3
 80041fc:	089b      	lsrs	r3, r3, #2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	613b      	str	r3, [r7, #16]

	switch (signal_windowing){
 8004202:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004206:	2b01      	cmp	r3, #1
 8004208:	d106      	bne.n	8004218 <fft+0x78>
		case HANNING:
		{
			hanning(data_in, data_in_size, data_in, data_in_size);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff ff6f 	bl	80040f4 <hanning>
			break;
 8004216:	e000      	b.n	800421a <fft+0x7a>
		}
		default: {
			// no window applied (rectangular case)
			break;
 8004218:	bf00      	nop
		}
	}

	arm_rfft_fast_f32(fft_handler, (float32_t*)  data_in, (float32_t*) fft_out_buf, 0);
 800421a:	2300      	movs	r3, #0
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	68f9      	ldr	r1, [r7, #12]
 8004220:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004222:	f015 fc87 	bl	8019b34 <arm_rfft_fast_f32>

	int freqpoint = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]

	for (int i=0;   i<data_in_size   ; i=i+2) {
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	e036      	b.n	800429e <fft+0xfe>
	  data_out[freqpoint] =(complex_abs(fft_out_buf[i], fft_out_buf[i+1])); //(sqrt(data_in_size));
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	3301      	adds	r3, #1
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	ed93 7a00 	vldr	s14, [r3]
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	18d4      	adds	r4, r2, r3
 8004252:	eef0 0a47 	vmov.f32	s1, s14
 8004256:	eeb0 0a67 	vmov.f32	s0, s15
 800425a:	f7ff fe9d 	bl	8003f98 <complex_abs>
 800425e:	eef0 7a40 	vmov.f32	s15, s0
 8004262:	edc4 7a00 	vstr	s15, [r4]
	  //data_out[freqpoint] = 2 * data_out[freqpoint]*data_out[freqpoint] /(float32_t)ISM330DHCX_ODR;

	  if(data_out[freqpoint] < 1e-3){
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7fc f96d 	bl	8000550 <__aeabi_f2d>
 8004276:	a311      	add	r3, pc, #68	; (adr r3, 80042bc <fft+0x11c>)
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f7fc fc32 	bl	8000ae4 <__aeabi_dcmplt>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <fft+0xf2>
		  data_out[freqpoint] = 1e-3;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <fft+0x118>)
 8004290:	601a      	str	r2, [r3, #0]
	  }
	  freqpoint++;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	3301      	adds	r3, #1
 8004296:	61bb      	str	r3, [r7, #24]
	for (int i=0;   i<data_in_size   ; i=i+2) {
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	3302      	adds	r3, #2
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d8c4      	bhi.n	8004230 <fft+0x90>
 80042a6:	46b5      	mov	sp, r6
	}
}
 80042a8:	bf00      	nop
 80042aa:	3724      	adds	r7, #36	; 0x24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042b2:	bf00      	nop
 80042b4:	f3af 8000 	nop.w
 80042b8:	3a83126f 	.word	0x3a83126f
 80042bc:	d2f1a9fc 	.word	0xd2f1a9fc
 80042c0:	3f50624d 	.word	0x3f50624d

080042c4 <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d103      	bne.n	80042e0 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e04d      	b.n	800437c <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	7b1a      	ldrb	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	699a      	ldr	r2, [r3, #24]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <ISM330DHCX_RegisterBusIO+0xc4>)
 800431c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a1a      	ldr	r2, [pc, #104]	; (800438c <ISM330DHCX_RegisterBusIO+0xc8>)
 8004322:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e020      	b.n	800437c <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4798      	blx	r3
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e016      	b.n	800437c <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d112      	bne.n	800437c <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10d      	bne.n	800437c <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004360:	230c      	movs	r3, #12
 8004362:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8004364:	7afb      	ldrb	r3, [r7, #11]
 8004366:	461a      	mov	r2, r3
 8004368:	2112      	movs	r1, #18
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fd61 	bl	8004e32 <ISM330DHCX_Write_Reg>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800437c:	68fb      	ldr	r3, [r7, #12]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	080056c5 	.word	0x080056c5
 800438c:	080056fb 	.word	0x080056fb

08004390 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	331c      	adds	r3, #28
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 ff43 	bl	800622a <ism330dhcx_device_conf_set>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295
 80043ae:	e078      	b.n	80044a2 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	331c      	adds	r3, #28
 80043b4:	2101      	movs	r1, #1
 80043b6:	4618      	mov	r0, r3
 80043b8:	f001 ffba 	bl	8006330 <ism330dhcx_auto_increment_set>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 80043c2:	f04f 33ff 	mov.w	r3, #4294967295
 80043c6:	e06c      	b.n	80044a2 <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	331c      	adds	r3, #28
 80043cc:	2101      	movs	r1, #1
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 ff88 	bl	80062e4 <ism330dhcx_reset_set>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 80043da:	f04f 33ff 	mov.w	r3, #4294967295
 80043de:	e060      	b.n	80044a2 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	331c      	adds	r3, #28
 80043e4:	2101      	movs	r1, #1
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 ffa2 	bl	8006330 <ism330dhcx_auto_increment_set>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 80043f2:	f04f 33ff 	mov.w	r3, #4294967295
 80043f6:	e054      	b.n	80044a2 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	331c      	adds	r3, #28
 80043fc:	2101      	movs	r1, #1
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 fe46 	bl	8006090 <ism330dhcx_block_data_update_set>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	e048      	b.n	80044a2 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	331c      	adds	r3, #28
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f002 f858 	bl	80064cc <ism330dhcx_fifo_mode_set>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	e03c      	b.n	80044a2 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2204      	movs	r2, #4
 800442c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	331c      	adds	r3, #28
 8004434:	2100      	movs	r1, #0
 8004436:	4618      	mov	r0, r3
 8004438:	f001 fa08 	bl	800584c <ism330dhcx_xl_data_rate_set>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8004442:	f04f 33ff 	mov.w	r3, #4294967295
 8004446:	e02c      	b.n	80044a2 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	331c      	adds	r3, #28
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f001 f99e 	bl	8005790 <ism330dhcx_xl_full_scale_set>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	e020      	b.n	80044a2 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2204      	movs	r2, #4
 8004464:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	331c      	adds	r3, #28
 800446c:	2100      	movs	r1, #0
 800446e:	4618      	mov	r0, r3
 8004470:	f001 fc3c 	bl	8005cec <ism330dhcx_gy_data_rate_set>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	e010      	b.n	80044a2 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	331c      	adds	r3, #28
 8004484:	210c      	movs	r1, #12
 8004486:	4618      	mov	r0, r3
 8004488:	f001 fbb8 	bl	8005bfc <ism330dhcx_gy_full_scale_set>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	e004      	b.n	80044a2 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f888 	bl	80045c8 <ISM330DHCX_ACC_Disable>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 80044be:	f04f 33ff 	mov.w	r3, #4294967295
 80044c2:	e015      	b.n	80044f0 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fa92 	bl	80049ee <ISM330DHCX_GYRO_Disable>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
 80044d4:	e00c      	b.n	80044f0 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	331c      	adds	r3, #28
 8004506:	6839      	ldr	r1, [r7, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f001 feda 	bl	80062c2 <ism330dhcx_device_id_get>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8004514:	f04f 33ff 	mov.w	r3, #4294967295
 8004518:	e000      	b.n	800451c <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2201      	movs	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2201      	movs	r2, #1
 8004538:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2200      	movs	r2, #0
 800453e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2200      	movs	r2, #0
 8004544:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800454c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2210      	movs	r2, #16
 8004552:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	4a07      	ldr	r2, [pc, #28]	; (800457c <ISM330DHCX_GetCapabilities+0x58>)
 800455e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	4a06      	ldr	r2, [pc, #24]	; (800457c <ISM330DHCX_GetCapabilities+0x58>)
 8004564:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	45d05800 	.word	0x45d05800

08004580 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	e014      	b.n	80045c0 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f103 021c 	add.w	r2, r3, #28
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f001 f951 	bl	800584c <ism330dhcx_xl_data_rate_set>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80045b0:	f04f 33ff 	mov.w	r3, #4294967295
 80045b4:	e004      	b.n	80045c0 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e01f      	b.n	800461e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f103 021c 	add.w	r2, r3, #28
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	332b      	adds	r3, #43	; 0x2b
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f001 fa9e 	bl	8005b2c <ism330dhcx_xl_data_rate_get>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	e010      	b.n	800461e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	331c      	adds	r3, #28
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f001 f922 	bl	800584c <ism330dhcx_xl_data_rate_set>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 800460e:	f04f 33ff 	mov.w	r3, #4294967295
 8004612:	e004      	b.n	800461e <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	331c      	adds	r3, #28
 800463a:	f107 020b 	add.w	r2, r7, #11
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f001 f8cb 	bl	80057dc <ism330dhcx_xl_full_scale_get>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 800464c:	f04f 33ff 	mov.w	r3, #4294967295
 8004650:	e023      	b.n	800469a <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004652:	7afb      	ldrb	r3, [r7, #11]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d81b      	bhi.n	8004690 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8004658:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004671 	.word	0x08004671
 8004664:	08004689 	.word	0x08004689
 8004668:	08004679 	.word	0x08004679
 800466c:	08004681 	.word	0x08004681
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4a0c      	ldr	r2, [pc, #48]	; (80046a4 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8004674:	601a      	str	r2, [r3, #0]
      break;
 8004676:	e00f      	b.n	8004698 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4a0b      	ldr	r2, [pc, #44]	; (80046a8 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 800467c:	601a      	str	r2, [r3, #0]
      break;
 800467e:	e00b      	b.n	8004698 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8004684:	601a      	str	r2, [r3, #0]
      break;
 8004686:	e007      	b.n	8004698 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 800468c:	601a      	str	r2, [r3, #0]
      break;
 800468e:	e003      	b.n	8004698 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8004690:	f04f 33ff 	mov.w	r3, #4294967295
 8004694:	60fb      	str	r3, [r7, #12]
      break;
 8004696:	bf00      	nop
  }

  return ret;
 8004698:	68fb      	ldr	r3, [r7, #12]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	3d79db23 	.word	0x3d79db23
 80046a8:	3df9db23 	.word	0x3df9db23
 80046ac:	3e79db23 	.word	0x3e79db23
 80046b0:	3ef9db23 	.word	0x3ef9db23

080046b4 <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	331c      	adds	r3, #28
 80046c6:	f107 020b 	add.w	r2, r7, #11
 80046ca:	4611      	mov	r1, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f001 fa2d 	bl	8005b2c <ism330dhcx_xl_data_rate_get>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80046d8:	f04f 33ff 	mov.w	r3, #4294967295
 80046dc:	e04e      	b.n	800477c <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80046de:	7afb      	ldrb	r3, [r7, #11]
 80046e0:	2b0a      	cmp	r3, #10
 80046e2:	d846      	bhi.n	8004772 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004719 	.word	0x08004719
 80046f0:	08004723 	.word	0x08004723
 80046f4:	0800472b 	.word	0x0800472b
 80046f8:	08004733 	.word	0x08004733
 80046fc:	0800473b 	.word	0x0800473b
 8004700:	08004743 	.word	0x08004743
 8004704:	0800474b 	.word	0x0800474b
 8004708:	08004753 	.word	0x08004753
 800470c:	0800475b 	.word	0x0800475b
 8004710:	08004763 	.word	0x08004763
 8004714:	0800476b 	.word	0x0800476b
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
      break;
 8004720:	e02b      	b.n	800477a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	4a17      	ldr	r2, [pc, #92]	; (8004784 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8004726:	601a      	str	r2, [r3, #0]
      break;
 8004728:	e027      	b.n	800477a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	4a16      	ldr	r2, [pc, #88]	; (8004788 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 800472e:	601a      	str	r2, [r3, #0]
      break;
 8004730:	e023      	b.n	800477a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	4a15      	ldr	r2, [pc, #84]	; (800478c <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8004736:	601a      	str	r2, [r3, #0]
      break;
 8004738:	e01f      	b.n	800477a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	4a14      	ldr	r2, [pc, #80]	; (8004790 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 800473e:	601a      	str	r2, [r3, #0]
      break;
 8004740:	e01b      	b.n	800477a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	4a13      	ldr	r2, [pc, #76]	; (8004794 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8004746:	601a      	str	r2, [r3, #0]
      break;
 8004748:	e017      	b.n	800477a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	4a12      	ldr	r2, [pc, #72]	; (8004798 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 800474e:	601a      	str	r2, [r3, #0]
      break;
 8004750:	e013      	b.n	800477a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	4a11      	ldr	r2, [pc, #68]	; (800479c <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8004756:	601a      	str	r2, [r3, #0]
      break;
 8004758:	e00f      	b.n	800477a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	4a10      	ldr	r2, [pc, #64]	; (80047a0 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 800475e:	601a      	str	r2, [r3, #0]
      break;
 8004760:	e00b      	b.n	800477a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8004766:	601a      	str	r2, [r3, #0]
      break;
 8004768:	e007      	b.n	800477a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	4a0e      	ldr	r2, [pc, #56]	; (80047a8 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 800476e:	601a      	str	r2, [r3, #0]
      break;
 8004770:	e003      	b.n	800477a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004772:	f04f 33ff 	mov.w	r3, #4294967295
 8004776:	60fb      	str	r3, [r7, #12]
      break;
 8004778:	bf00      	nop
  }

  return ret;
 800477a:	68fb      	ldr	r3, [r7, #12]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	41480000 	.word	0x41480000
 8004788:	41d00000 	.word	0x41d00000
 800478c:	42500000 	.word	0x42500000
 8004790:	42d00000 	.word	0x42d00000
 8004794:	43500000 	.word	0x43500000
 8004798:	43d00000 	.word	0x43d00000
 800479c:	44504000 	.word	0x44504000
 80047a0:	44d04000 	.word	0x44d04000
 80047a4:	45504000 	.word	0x45504000
 80047a8:	45d05800 	.word	0x45d05800

080047ac <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d106      	bne.n	80047d0 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80047c2:	ed97 0a00 	vldr	s0, [r7]
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fd60 	bl	800528c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 80047cc:	4603      	mov	r3, r0
 80047ce:	e005      	b.n	80047dc <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80047d0:	ed97 0a00 	vldr	s0, [r7]
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fde5 	bl	80053a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 80047da:	4603      	mov	r3, r0
  }
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	331c      	adds	r3, #28
 80047f6:	f107 020b 	add.w	r2, r7, #11
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 ffed 	bl	80057dc <ism330dhcx_xl_full_scale_get>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004808:	f04f 33ff 	mov.w	r3, #4294967295
 800480c:	e023      	b.n	8004856 <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800480e:	7afb      	ldrb	r3, [r7, #11]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d81b      	bhi.n	800484c <ISM330DHCX_ACC_GetFullScale+0x68>
 8004814:	a201      	add	r2, pc, #4	; (adr r2, 800481c <ISM330DHCX_ACC_GetFullScale+0x38>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	0800482d 	.word	0x0800482d
 8004820:	08004845 	.word	0x08004845
 8004824:	08004835 	.word	0x08004835
 8004828:	0800483d 	.word	0x0800483d
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2202      	movs	r2, #2
 8004830:	601a      	str	r2, [r3, #0]
      break;
 8004832:	e00f      	b.n	8004854 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2204      	movs	r2, #4
 8004838:	601a      	str	r2, [r3, #0]
      break;
 800483a:	e00b      	b.n	8004854 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2208      	movs	r2, #8
 8004840:	601a      	str	r2, [r3, #0]
      break;
 8004842:	e007      	b.n	8004854 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2210      	movs	r2, #16
 8004848:	601a      	str	r2, [r3, #0]
      break;
 800484a:	e003      	b.n	8004854 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 800484c:	f04f 33ff 	mov.w	r3, #4294967295
 8004850:	60fb      	str	r3, [r7, #12]
      break;
 8004852:	bf00      	nop
  }

  return ret;
 8004854:	68fb      	ldr	r3, [r7, #12]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop

08004860 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b02      	cmp	r3, #2
 800486e:	dd0b      	ble.n	8004888 <ISM330DHCX_ACC_SetFullScale+0x28>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b04      	cmp	r3, #4
 8004874:	dd06      	ble.n	8004884 <ISM330DHCX_ACC_SetFullScale+0x24>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b08      	cmp	r3, #8
 800487a:	dc01      	bgt.n	8004880 <ISM330DHCX_ACC_SetFullScale+0x20>
 800487c:	2303      	movs	r3, #3
 800487e:	e004      	b.n	800488a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004880:	2301      	movs	r3, #1
 8004882:	e002      	b.n	800488a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004884:	2302      	movs	r3, #2
 8004886:	e000      	b.n	800488a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004888:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 800488a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	331c      	adds	r3, #28
 8004890:	7bfa      	ldrb	r2, [r7, #15]
 8004892:	4611      	mov	r1, r2
 8004894:	4618      	mov	r0, r3
 8004896:	f000 ff7b 	bl	8005790 <ism330dhcx_xl_full_scale_set>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 80048a0:	f04f 33ff 	mov.w	r3, #4294967295
 80048a4:	e000      	b.n	80048a8 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	331c      	adds	r3, #28
 80048be:	f107 0208 	add.w	r2, r7, #8
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f001 fc54 	bl	8006172 <ism330dhcx_acceleration_raw_get>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295
 80048d4:	e00c      	b.n	80048f0 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80048d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80048de:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80048e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	331c      	adds	r3, #28
 800490c:	f107 0210 	add.w	r2, r7, #16
 8004910:	4611      	mov	r1, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f001 fc2d 	bl	8006172 <ism330dhcx_acceleration_raw_get>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 800491e:	f04f 33ff 	mov.w	r3, #4294967295
 8004922:	e03c      	b.n	800499e <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004924:	f107 030c 	add.w	r3, r7, #12
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff fe7c 	bl	8004628 <ISM330DHCX_ACC_GetSensitivity>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8004936:	f04f 33ff 	mov.w	r3, #4294967295
 800493a:	e030      	b.n	800499e <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800493c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004940:	ee07 3a90 	vmov	s15, r3
 8004944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004948:	edd7 7a03 	vldr	s15, [r7, #12]
 800494c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004954:	ee17 2a90 	vmov	r2, s15
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800495c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004960:	ee07 3a90 	vmov	s15, r3
 8004964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004968:	edd7 7a03 	vldr	s15, [r7, #12]
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004974:	ee17 2a90 	vmov	r2, s15
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800497c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004988:	edd7 7a03 	vldr	s15, [r7, #12]
 800498c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004994:	ee17 2a90 	vmov	r2, s15
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e014      	b.n	80049e6 <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f103 021c 	add.w	r2, r3, #28
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f001 f98e 	bl	8005cec <ism330dhcx_gy_data_rate_set>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80049d6:	f04f 33ff 	mov.w	r3, #4294967295
 80049da:	e004      	b.n	80049e6 <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e01f      	b.n	8004a44 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f103 021c 	add.w	r2, r3, #28
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	332c      	adds	r3, #44	; 0x2c
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4610      	mov	r0, r2
 8004a12:	f001 fadb 	bl	8005fcc <ism330dhcx_gy_data_rate_get>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a20:	e010      	b.n	8004a44 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	331c      	adds	r3, #28
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 f95f 	bl	8005cec <ism330dhcx_gy_data_rate_set>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8004a34:	f04f 33ff 	mov.w	r3, #4294967295
 8004a38:	e004      	b.n	8004a44 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	331c      	adds	r3, #28
 8004a5e:	f107 020b 	add.w	r2, r7, #11
 8004a62:	4611      	mov	r1, r2
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 f8ef 	bl	8005c48 <ism330dhcx_gy_full_scale_get>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004a70:	f04f 33ff 	mov.w	r3, #4294967295
 8004a74:	e039      	b.n	8004aea <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004a76:	7afb      	ldrb	r3, [r7, #11]
 8004a78:	2b0c      	cmp	r3, #12
 8004a7a:	d831      	bhi.n	8004ae0 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004ac1 	.word	0x08004ac1
 8004a88:	08004ae1 	.word	0x08004ae1
 8004a8c:	08004ab9 	.word	0x08004ab9
 8004a90:	08004ae1 	.word	0x08004ae1
 8004a94:	08004ac9 	.word	0x08004ac9
 8004a98:	08004ae1 	.word	0x08004ae1
 8004a9c:	08004ae1 	.word	0x08004ae1
 8004aa0:	08004ae1 	.word	0x08004ae1
 8004aa4:	08004ad1 	.word	0x08004ad1
 8004aa8:	08004ae1 	.word	0x08004ae1
 8004aac:	08004ae1 	.word	0x08004ae1
 8004ab0:	08004ae1 	.word	0x08004ae1
 8004ab4:	08004ad9 	.word	0x08004ad9
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	4a0e      	ldr	r2, [pc, #56]	; (8004af4 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8004abc:	601a      	str	r2, [r3, #0]
      break;
 8004abe:	e013      	b.n	8004ae8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	4a0d      	ldr	r2, [pc, #52]	; (8004af8 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8004ac4:	601a      	str	r2, [r3, #0]
      break;
 8004ac6:	e00f      	b.n	8004ae8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	4a0c      	ldr	r2, [pc, #48]	; (8004afc <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8004acc:	601a      	str	r2, [r3, #0]
      break;
 8004ace:	e00b      	b.n	8004ae8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	4a0b      	ldr	r2, [pc, #44]	; (8004b00 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8004ad4:	601a      	str	r2, [r3, #0]
      break;
 8004ad6:	e007      	b.n	8004ae8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8004adc:	601a      	str	r2, [r3, #0]
      break;
 8004ade:	e003      	b.n	8004ae8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae4:	60fb      	str	r3, [r7, #12]
      break;
 8004ae6:	bf00      	nop
  }

  return ret;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	408c0000 	.word	0x408c0000
 8004af8:	410c0000 	.word	0x410c0000
 8004afc:	418c0000 	.word	0x418c0000
 8004b00:	420c0000 	.word	0x420c0000
 8004b04:	428c0000 	.word	0x428c0000

08004b08 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	331c      	adds	r3, #28
 8004b1a:	f107 020b 	add.w	r2, r7, #11
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f001 fa53 	bl	8005fcc <ism330dhcx_gy_data_rate_get>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b30:	e04e      	b.n	8004bd0 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004b32:	7afb      	ldrb	r3, [r7, #11]
 8004b34:	2b0a      	cmp	r3, #10
 8004b36:	d846      	bhi.n	8004bc6 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8004b38:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b6d 	.word	0x08004b6d
 8004b44:	08004b77 	.word	0x08004b77
 8004b48:	08004b7f 	.word	0x08004b7f
 8004b4c:	08004b87 	.word	0x08004b87
 8004b50:	08004b8f 	.word	0x08004b8f
 8004b54:	08004b97 	.word	0x08004b97
 8004b58:	08004b9f 	.word	0x08004b9f
 8004b5c:	08004ba7 	.word	0x08004ba7
 8004b60:	08004baf 	.word	0x08004baf
 8004b64:	08004bb7 	.word	0x08004bb7
 8004b68:	08004bbf 	.word	0x08004bbf
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
      break;
 8004b74:	e02b      	b.n	8004bce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8004b7a:	601a      	str	r2, [r3, #0]
      break;
 8004b7c:	e027      	b.n	8004bce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8004b82:	601a      	str	r2, [r3, #0]
      break;
 8004b84:	e023      	b.n	8004bce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	4a15      	ldr	r2, [pc, #84]	; (8004be0 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8004b8a:	601a      	str	r2, [r3, #0]
      break;
 8004b8c:	e01f      	b.n	8004bce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8004b92:	601a      	str	r2, [r3, #0]
      break;
 8004b94:	e01b      	b.n	8004bce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	4a13      	ldr	r2, [pc, #76]	; (8004be8 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8004b9a:	601a      	str	r2, [r3, #0]
      break;
 8004b9c:	e017      	b.n	8004bce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	4a12      	ldr	r2, [pc, #72]	; (8004bec <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8004ba2:	601a      	str	r2, [r3, #0]
      break;
 8004ba4:	e013      	b.n	8004bce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	4a11      	ldr	r2, [pc, #68]	; (8004bf0 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8004baa:	601a      	str	r2, [r3, #0]
      break;
 8004bac:	e00f      	b.n	8004bce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	4a10      	ldr	r2, [pc, #64]	; (8004bf4 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8004bb2:	601a      	str	r2, [r3, #0]
      break;
 8004bb4:	e00b      	b.n	8004bce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	4a0f      	ldr	r2, [pc, #60]	; (8004bf8 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8004bba:	601a      	str	r2, [r3, #0]
      break;
 8004bbc:	e007      	b.n	8004bce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8004bc2:	601a      	str	r2, [r3, #0]
      break;
 8004bc4:	e003      	b.n	8004bce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bca:	60fb      	str	r3, [r7, #12]
      break;
 8004bcc:	bf00      	nop
  }

  return ret;
 8004bce:	68fb      	ldr	r3, [r7, #12]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	41480000 	.word	0x41480000
 8004bdc:	41d00000 	.word	0x41d00000
 8004be0:	42500000 	.word	0x42500000
 8004be4:	42d00000 	.word	0x42d00000
 8004be8:	43500000 	.word	0x43500000
 8004bec:	43d00000 	.word	0x43d00000
 8004bf0:	44504000 	.word	0x44504000
 8004bf4:	44d04000 	.word	0x44d04000
 8004bf8:	45504000 	.word	0x45504000
 8004bfc:	45d05800 	.word	0x45d05800

08004c00 <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d106      	bne.n	8004c24 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004c16:	ed97 0a00 	vldr	s0, [r7]
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fc44 	bl	80054a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8004c20:	4603      	mov	r3, r0
 8004c22:	e005      	b.n	8004c30 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004c24:	ed97 0a00 	vldr	s0, [r7]
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fcc9 	bl	80055c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 8004c2e:	4603      	mov	r3, r0
  }
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	331c      	adds	r3, #28
 8004c4a:	f107 020b 	add.w	r2, r7, #11
 8004c4e:	4611      	mov	r1, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fff9 	bl	8005c48 <ism330dhcx_gy_full_scale_get>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c60:	e03c      	b.n	8004cdc <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 8004c62:	7afb      	ldrb	r3, [r7, #11]
 8004c64:	2b0c      	cmp	r3, #12
 8004c66:	d834      	bhi.n	8004cd2 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004cad 	.word	0x08004cad
 8004c74:	08004cd3 	.word	0x08004cd3
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	08004cd3 	.word	0x08004cd3
 8004c80:	08004cb5 	.word	0x08004cb5
 8004c84:	08004cd3 	.word	0x08004cd3
 8004c88:	08004cd3 	.word	0x08004cd3
 8004c8c:	08004cd3 	.word	0x08004cd3
 8004c90:	08004cbf 	.word	0x08004cbf
 8004c94:	08004cd3 	.word	0x08004cd3
 8004c98:	08004cd3 	.word	0x08004cd3
 8004c9c:	08004cd3 	.word	0x08004cd3
 8004ca0:	08004cc9 	.word	0x08004cc9
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	227d      	movs	r2, #125	; 0x7d
 8004ca8:	601a      	str	r2, [r3, #0]
      break;
 8004caa:	e016      	b.n	8004cda <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	22fa      	movs	r2, #250	; 0xfa
 8004cb0:	601a      	str	r2, [r3, #0]
      break;
 8004cb2:	e012      	b.n	8004cda <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004cba:	601a      	str	r2, [r3, #0]
      break;
 8004cbc:	e00d      	b.n	8004cda <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cc4:	601a      	str	r2, [r3, #0]
      break;
 8004cc6:	e008      	b.n	8004cda <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004cce:	601a      	str	r2, [r3, #0]
      break;
 8004cd0:	e003      	b.n	8004cda <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd6:	60fb      	str	r3, [r7, #12]
      break;
 8004cd8:	bf00      	nop
  }

  return ret;
 8004cda:	68fb      	ldr	r3, [r7, #12]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b7d      	cmp	r3, #125	; 0x7d
 8004cf2:	dd12      	ble.n	8004d1a <ISM330DHCX_GYRO_SetFullScale+0x36>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2bfa      	cmp	r3, #250	; 0xfa
 8004cf8:	dd0d      	ble.n	8004d16 <ISM330DHCX_GYRO_SetFullScale+0x32>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d00:	dd07      	ble.n	8004d12 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d08:	dc01      	bgt.n	8004d0e <ISM330DHCX_GYRO_SetFullScale+0x2a>
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	e006      	b.n	8004d1c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	e004      	b.n	8004d1c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004d12:	2304      	movs	r3, #4
 8004d14:	e002      	b.n	8004d1c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004d16:	2300      	movs	r3, #0
 8004d18:	e000      	b.n	8004d1c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004d1a:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8004d1c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	331c      	adds	r3, #28
 8004d22:	7bfa      	ldrb	r2, [r7, #15]
 8004d24:	4611      	mov	r1, r2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 ff68 	bl	8005bfc <ism330dhcx_gy_full_scale_set>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
 8004d36:	e000      	b.n	8004d3a <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	331c      	adds	r3, #28
 8004d50:	f107 0208 	add.w	r2, r7, #8
 8004d54:	4611      	mov	r1, r2
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 f9c0 	bl	80060dc <ism330dhcx_angular_rate_raw_get>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004d62:	f04f 33ff 	mov.w	r3, #4294967295
 8004d66:	e00c      	b.n	8004d82 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004d68:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004d70:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004d78:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b086      	sub	sp, #24
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	331c      	adds	r3, #28
 8004d98:	f107 0210 	add.w	r2, r7, #16
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 f99c 	bl	80060dc <ism330dhcx_angular_rate_raw_get>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 8004daa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dae:	e03c      	b.n	8004e2a <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004db0:	f107 030c 	add.w	r3, r7, #12
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff fe48 	bl	8004a4c <ISM330DHCX_GYRO_GetSensitivity>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	e030      	b.n	8004e2a <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004dc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004dcc:	ee07 3a90 	vmov	s15, r3
 8004dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004de0:	ee17 2a90 	vmov	r2, s15
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004de8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004df4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e00:	ee17 2a90 	vmov	r2, s15
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004e08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e14:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e20:	ee17 2a90 	vmov	r2, s15
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	70fb      	strb	r3, [r7, #3]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f103 001c 	add.w	r0, r3, #28
 8004e48:	1cba      	adds	r2, r7, #2
 8004e4a:	78f9      	ldrb	r1, [r7, #3]
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f000 fc87 	bl	8005760 <ism330dhcx_write_reg>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5c:	e000      	b.n	8004e60 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <ISM330DHCX_FIFO_Get_Num_Samples>:
  * @param  pObj the device pObj
  * @param  NumSamples number of samples
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Num_Samples(ISM330DHCX_Object_t *pObj, uint16_t *NumSamples)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_fifo_data_level_get(&(pObj->Ctx), NumSamples) != ISM330DHCX_OK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	331c      	adds	r3, #28
 8004e76:	6839      	ldr	r1, [r7, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f001 fb4d 	bl	8006518 <ism330dhcx_fifo_data_level_get>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <ISM330DHCX_FIFO_Get_Num_Samples+0x22>
  {
    return ISM330DHCX_ERROR;
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
 8004e88:	e000      	b.n	8004e8c <ISM330DHCX_FIFO_Get_Num_Samples+0x24>
  }

  return ISM330DHCX_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <ISM330DHCX_FIFO_ACC_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Odr FIFO ODR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_ACC_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_xl_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz
 8004ea0:	edd7 7a00 	vldr	s15, [r7]
 8004ea4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb0:	d801      	bhi.n	8004eb6 <ISM330DHCX_FIFO_ACC_Set_BDR+0x22>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e058      	b.n	8004f68 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004eb6:	edd7 7a00 	vldr	s15, [r7]
 8004eba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec6:	d801      	bhi.n	8004ecc <ISM330DHCX_FIFO_ACC_Set_BDR+0x38>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e04d      	b.n	8004f68 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004ecc:	edd7 7a00 	vldr	s15, [r7]
 8004ed0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004f90 <ISM330DHCX_FIFO_ACC_Set_BDR+0xfc>
 8004ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004edc:	d801      	bhi.n	8004ee2 <ISM330DHCX_FIFO_ACC_Set_BDR+0x4e>
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e042      	b.n	8004f68 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004ee2:	edd7 7a00 	vldr	s15, [r7]
 8004ee6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004f94 <ISM330DHCX_FIFO_ACC_Set_BDR+0x100>
 8004eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef2:	d801      	bhi.n	8004ef8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x64>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	e037      	b.n	8004f68 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004ef8:	edd7 7a00 	vldr	s15, [r7]
 8004efc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004f98 <ISM330DHCX_FIFO_ACC_Set_BDR+0x104>
 8004f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f08:	d801      	bhi.n	8004f0e <ISM330DHCX_FIFO_ACC_Set_BDR+0x7a>
 8004f0a:	2305      	movs	r3, #5
 8004f0c:	e02c      	b.n	8004f68 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004f0e:	edd7 7a00 	vldr	s15, [r7]
 8004f12:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004f9c <ISM330DHCX_FIFO_ACC_Set_BDR+0x108>
 8004f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1e:	d801      	bhi.n	8004f24 <ISM330DHCX_FIFO_ACC_Set_BDR+0x90>
 8004f20:	2306      	movs	r3, #6
 8004f22:	e021      	b.n	8004f68 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004f24:	edd7 7a00 	vldr	s15, [r7]
 8004f28:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004fa0 <ISM330DHCX_FIFO_ACC_Set_BDR+0x10c>
 8004f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f34:	d801      	bhi.n	8004f3a <ISM330DHCX_FIFO_ACC_Set_BDR+0xa6>
 8004f36:	2307      	movs	r3, #7
 8004f38:	e016      	b.n	8004f68 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004f3a:	edd7 7a00 	vldr	s15, [r7]
 8004f3e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004fa4 <ISM330DHCX_FIFO_ACC_Set_BDR+0x110>
 8004f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4a:	d801      	bhi.n	8004f50 <ISM330DHCX_FIFO_ACC_Set_BDR+0xbc>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	e00b      	b.n	8004f68 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004f50:	edd7 7a00 	vldr	s15, [r7]
 8004f54:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004fa8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x114>
 8004f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f60:	d801      	bhi.n	8004f66 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd2>
 8004f62:	2309      	movs	r3, #9
 8004f64:	e000      	b.n	8004f68 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004f66:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
 8004f68:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_XL_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_XL_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_XL_BATCHED_AT_3333Hz
            :                    ISM330DHCX_XL_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_xl_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	331c      	adds	r3, #28
 8004f6e:	7bfa      	ldrb	r2, [r7, #15]
 8004f70:	4611      	mov	r1, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 fa5e 	bl	8006434 <ism330dhcx_fifo_xl_batch_set>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <ISM330DHCX_FIFO_ACC_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f82:	e000      	b.n	8004f86 <ISM330DHCX_FIFO_ACC_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	42500000 	.word	0x42500000
 8004f94:	42d00000 	.word	0x42d00000
 8004f98:	43500000 	.word	0x43500000
 8004f9c:	43d08000 	.word	0x43d08000
 8004fa0:	44504000 	.word	0x44504000
 8004fa4:	44d06000 	.word	0x44d06000
 8004fa8:	45505000 	.word	0x45505000

08004fac <ISM330DHCX_FIFO_GYRO_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Odr FIFO ODR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_GYRO_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_gy_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz
 8004fb8:	edd7 7a00 	vldr	s15, [r7]
 8004fbc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc8:	d801      	bhi.n	8004fce <ISM330DHCX_FIFO_GYRO_Set_BDR+0x22>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e058      	b.n	8005080 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004fce:	edd7 7a00 	vldr	s15, [r7]
 8004fd2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fde:	d801      	bhi.n	8004fe4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x38>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e04d      	b.n	8005080 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004fe4:	edd7 7a00 	vldr	s15, [r7]
 8004fe8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80050a8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xfc>
 8004fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff4:	d801      	bhi.n	8004ffa <ISM330DHCX_FIFO_GYRO_Set_BDR+0x4e>
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e042      	b.n	8005080 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004ffa:	edd7 7a00 	vldr	s15, [r7]
 8004ffe:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80050ac <ISM330DHCX_FIFO_GYRO_Set_BDR+0x100>
 8005002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500a:	d801      	bhi.n	8005010 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x64>
 800500c:	2304      	movs	r3, #4
 800500e:	e037      	b.n	8005080 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8005010:	edd7 7a00 	vldr	s15, [r7]
 8005014:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80050b0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x104>
 8005018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800501c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005020:	d801      	bhi.n	8005026 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x7a>
 8005022:	2305      	movs	r3, #5
 8005024:	e02c      	b.n	8005080 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8005026:	edd7 7a00 	vldr	s15, [r7]
 800502a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80050b4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x108>
 800502e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005036:	d801      	bhi.n	800503c <ISM330DHCX_FIFO_GYRO_Set_BDR+0x90>
 8005038:	2306      	movs	r3, #6
 800503a:	e021      	b.n	8005080 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 800503c:	edd7 7a00 	vldr	s15, [r7]
 8005040:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80050b8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x10c>
 8005044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504c:	d801      	bhi.n	8005052 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xa6>
 800504e:	2307      	movs	r3, #7
 8005050:	e016      	b.n	8005080 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8005052:	edd7 7a00 	vldr	s15, [r7]
 8005056:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80050bc <ISM330DHCX_FIFO_GYRO_Set_BDR+0x110>
 800505a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005062:	d801      	bhi.n	8005068 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xbc>
 8005064:	2308      	movs	r3, #8
 8005066:	e00b      	b.n	8005080 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8005068:	edd7 7a00 	vldr	s15, [r7]
 800506c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80050c0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x114>
 8005070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005078:	d801      	bhi.n	800507e <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd2>
 800507a:	2309      	movs	r3, #9
 800507c:	e000      	b.n	8005080 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 800507e:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
 8005080:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_GY_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_GY_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_GY_BATCHED_AT_3333Hz
            :                    ISM330DHCX_GY_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_gy_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	331c      	adds	r3, #28
 8005086:	7bfa      	ldrb	r2, [r7, #15]
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f001 f9f8 	bl	8006480 <ism330dhcx_fifo_gy_batch_set>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8005096:	f04f 33ff 	mov.w	r3, #4294967295
 800509a:	e000      	b.n	800509e <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	42500000 	.word	0x42500000
 80050ac:	42d00000 	.word	0x42d00000
 80050b0:	43500000 	.word	0x43500000
 80050b4:	43d08000 	.word	0x43d08000
 80050b8:	44504000 	.word	0x44504000
 80050bc:	44d06000 	.word	0x44d06000
 80050c0:	45505000 	.word	0x45505000

080050c4 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>:
  * @param  pObj the device pObj
  * @param  Status FIFO full interrupt on INT1 pin status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_INT1_FIFO_Full(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_reg_t reg;

  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f103 001c 	add.w	r0, r3, #28
 80050d6:	f107 020c 	add.w	r2, r7, #12
 80050da:	2301      	movs	r3, #1
 80050dc:	210d      	movs	r1, #13
 80050de:	f000 fb27 	bl	8005730 <ism330dhcx_read_reg>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x2a>
  {
    return ISM330DHCX_ERROR;
 80050e8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ec:	e017      	b.n	800511e <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  reg.int1_ctrl.int1_fifo_full = Status;
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	7b3b      	ldrb	r3, [r7, #12]
 80050f8:	f362 1345 	bfi	r3, r2, #5, #1
 80050fc:	733b      	strb	r3, [r7, #12]

  if (ism330dhcx_write_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f103 001c 	add.w	r0, r3, #28
 8005104:	f107 020c 	add.w	r2, r7, #12
 8005108:	2301      	movs	r3, #1
 800510a:	210d      	movs	r1, #13
 800510c:	f000 fb28 	bl	8005760 <ism330dhcx_write_reg>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x58>
  {
    return ISM330DHCX_ERROR;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
 800511a:	e000      	b.n	800511e <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  return ISM330DHCX_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <ISM330DHCX_FIFO_Set_Watermark_Level>:
  * @param  pObj the device pObj
  * @param  Watermark FIFO watermark level
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Watermark_Level(ISM330DHCX_Object_t *pObj, uint16_t Watermark)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	460b      	mov	r3, r1
 8005130:	807b      	strh	r3, [r7, #2]
  if (ism330dhcx_fifo_watermark_set(&(pObj->Ctx), Watermark) != ISM330DHCX_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	331c      	adds	r3, #28
 8005136:	887a      	ldrh	r2, [r7, #2]
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f001 f91e 	bl	800637c <ism330dhcx_fifo_watermark_set>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <ISM330DHCX_FIFO_Set_Watermark_Level+0x26>
  {
    return ISM330DHCX_ERROR;
 8005146:	f04f 33ff 	mov.w	r3, #4294967295
 800514a:	e000      	b.n	800514e <ISM330DHCX_FIFO_Set_Watermark_Level+0x28>
  }

  return ISM330DHCX_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <ISM330DHCX_FIFO_Set_Stop_On_Fth>:
  * @param  pObj the device pObj
  * @param  Status FIFO stop on watermark status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Stop_On_Fth(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
  if (ism330dhcx_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != ISM330DHCX_OK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	331c      	adds	r3, #28
 8005166:	78fa      	ldrb	r2, [r7, #3]
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f001 f93c 	bl	80063e8 <ism330dhcx_fifo_stop_on_wtm_set>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x26>
  {
    return ISM330DHCX_ERROR;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	e000      	b.n	800517e <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x28>
  }

  return ISM330DHCX_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <ISM330DHCX_FIFO_Set_Mode>:
  * @param  pObj the device pObj
  * @param  Mode FIFO mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Mode(ISM330DHCX_Object_t *pObj, uint8_t Mode)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	70fb      	strb	r3, [r7, #3]
  int32_t ret = ISM330DHCX_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((ism330dhcx_fifo_mode_t)Mode)
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	2b06      	cmp	r3, #6
 800519a:	bf8c      	ite	hi
 800519c:	2201      	movhi	r2, #1
 800519e:	2200      	movls	r2, #0
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	2a00      	cmp	r2, #0
 80051a4:	d10b      	bne.n	80051be <ISM330DHCX_FIFO_Set_Mode+0x38>
 80051a6:	2201      	movs	r2, #1
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d103      	bne.n	80051c6 <ISM330DHCX_FIFO_Set_Mode+0x40>
    case ISM330DHCX_BYPASS_TO_STREAM_MODE:
    case ISM330DHCX_STREAM_MODE:
      break;

    default:
      ret = ISM330DHCX_ERROR;
 80051be:	f04f 33ff 	mov.w	r3, #4294967295
 80051c2:	60fb      	str	r3, [r7, #12]
      break;
 80051c4:	e000      	b.n	80051c8 <ISM330DHCX_FIFO_Set_Mode+0x42>
      break;
 80051c6:	bf00      	nop
  }

  if (ret == ISM330DHCX_ERROR)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ce:	d101      	bne.n	80051d4 <ISM330DHCX_FIFO_Set_Mode+0x4e>
  {
    return ret;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	e00d      	b.n	80051f0 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), (ism330dhcx_fifo_mode_t)Mode) != ISM330DHCX_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	331c      	adds	r3, #28
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 f975 	bl	80064cc <ism330dhcx_fifo_mode_set>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <ISM330DHCX_FIFO_Set_Mode+0x68>
  {
    return ISM330DHCX_ERROR;
 80051e8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ec:	e000      	b.n	80051f0 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  return ret;
 80051ee:	68fb      	ldr	r3, [r7, #12]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <ISM330DHCX_FIFO_Get_Data>:
  * @param  pObj the device pObj
  * @param  Data FIFO raw data array [6]
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Data(ISM330DHCX_Object_t *pObj, uint8_t *Data)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_fifo_out_raw_get(&(pObj->Ctx), Data) != ISM330DHCX_OK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	331c      	adds	r3, #28
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fffd 	bl	8006208 <ism330dhcx_fifo_out_raw_get>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <ISM330DHCX_FIFO_Get_Data+0x22>
  {
    return ISM330DHCX_ERROR;
 8005214:	f04f 33ff 	mov.w	r3, #4294967295
 8005218:	e000      	b.n	800521c <ISM330DHCX_FIFO_Get_Data+0x24>
  }

  return ISM330DHCX_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <ISM330DHCX_FIFO_Get_Data_Word>:
  * @param  pObj the device pObj
  * @param  Acceleration FIFO single data
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Data_Word(ISM330DHCX_Object_t *pObj, int16_t *data_raw)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint8_t data[6];

  if (ISM330DHCX_FIFO_Get_Data(pObj, data) != ISM330DHCX_OK)
 800522e:	f107 0308 	add.w	r3, r7, #8
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff ffdf 	bl	80051f8 <ISM330DHCX_FIFO_Get_Data>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <ISM330DHCX_FIFO_Get_Data_Word+0x22>
  {
    return ISM330DHCX_ERROR;
 8005240:	f04f 33ff 	mov.w	r3, #4294967295
 8005244:	e01d      	b.n	8005282 <ISM330DHCX_FIFO_Get_Data_Word+0x5e>
  }

  data_raw[0] = ((int16_t)data[1] << 8) | data[0];
 8005246:	7a7b      	ldrb	r3, [r7, #9]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	b21a      	sxth	r2, r3
 800524c:	7a3b      	ldrb	r3, [r7, #8]
 800524e:	b21b      	sxth	r3, r3
 8005250:	4313      	orrs	r3, r2
 8005252:	b21a      	sxth	r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	801a      	strh	r2, [r3, #0]
  data_raw[1] = ((int16_t)data[3] << 8) | data[2];
 8005258:	7afb      	ldrb	r3, [r7, #11]
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	b219      	sxth	r1, r3
 800525e:	7abb      	ldrb	r3, [r7, #10]
 8005260:	b21a      	sxth	r2, r3
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	3302      	adds	r3, #2
 8005266:	430a      	orrs	r2, r1
 8005268:	b212      	sxth	r2, r2
 800526a:	801a      	strh	r2, [r3, #0]
  data_raw[2] = ((int16_t)data[5] << 8) | data[4];
 800526c:	7b7b      	ldrb	r3, [r7, #13]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	b219      	sxth	r1, r3
 8005272:	7b3b      	ldrb	r3, [r7, #12]
 8005274:	b21a      	sxth	r2, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	3304      	adds	r3, #4
 800527a:	430a      	orrs	r2, r1
 800527c:	b212      	sxth	r2, r2
 800527e:	801a      	strh	r2, [r3, #0]

  return ISM330DHCX_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8005298:	edd7 7a00 	vldr	s15, [r7]
 800529c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80052a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a8:	d801      	bhi.n	80052ae <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e058      	b.n	8005360 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052ae:	edd7 7a00 	vldr	s15, [r7]
 80052b2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80052b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052be:	d801      	bhi.n	80052c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e04d      	b.n	8005360 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052c4:	edd7 7a00 	vldr	s15, [r7]
 80052c8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005388 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80052cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d4:	d801      	bhi.n	80052da <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80052d6:	2303      	movs	r3, #3
 80052d8:	e042      	b.n	8005360 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052da:	edd7 7a00 	vldr	s15, [r7]
 80052de:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800538c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 80052e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ea:	d801      	bhi.n	80052f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 80052ec:	2304      	movs	r3, #4
 80052ee:	e037      	b.n	8005360 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052f0:	edd7 7a00 	vldr	s15, [r7]
 80052f4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005390 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 80052f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005300:	d801      	bhi.n	8005306 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005302:	2305      	movs	r3, #5
 8005304:	e02c      	b.n	8005360 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005306:	edd7 7a00 	vldr	s15, [r7]
 800530a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005394 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 800530e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005316:	d801      	bhi.n	800531c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005318:	2306      	movs	r3, #6
 800531a:	e021      	b.n	8005360 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800531c:	edd7 7a00 	vldr	s15, [r7]
 8005320:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005398 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8005324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800532c:	d801      	bhi.n	8005332 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800532e:	2307      	movs	r3, #7
 8005330:	e016      	b.n	8005360 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005332:	edd7 7a00 	vldr	s15, [r7]
 8005336:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800539c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800533a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800533e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005342:	d801      	bhi.n	8005348 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005344:	2308      	movs	r3, #8
 8005346:	e00b      	b.n	8005360 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005348:	edd7 7a00 	vldr	s15, [r7]
 800534c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80053a0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005358:	d801      	bhi.n	800535e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800535a:	2309      	movs	r3, #9
 800535c:	e000      	b.n	8005360 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800535e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8005360:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	331c      	adds	r3, #28
 8005366:	7bfa      	ldrb	r2, [r7, #15]
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fa6e 	bl	800584c <ism330dhcx_xl_data_rate_set>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8005376:	f04f 33ff 	mov.w	r3, #4294967295
 800537a:	e000      	b.n	800537e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	42500000 	.word	0x42500000
 800538c:	42d00000 	.word	0x42d00000
 8005390:	43500000 	.word	0x43500000
 8005394:	43d00000 	.word	0x43d00000
 8005398:	44504000 	.word	0x44504000
 800539c:	44d04000 	.word	0x44d04000
 80053a0:	45504000 	.word	0x45504000

080053a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80053b0:	edd7 7a00 	vldr	s15, [r7]
 80053b4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80053b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c0:	d801      	bhi.n	80053c6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e058      	b.n	8005478 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053c6:	edd7 7a00 	vldr	s15, [r7]
 80053ca:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80053ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d6:	d801      	bhi.n	80053dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 80053d8:	2302      	movs	r3, #2
 80053da:	e04d      	b.n	8005478 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053dc:	edd7 7a00 	vldr	s15, [r7]
 80053e0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800548c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80053e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ec:	d801      	bhi.n	80053f2 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80053ee:	2303      	movs	r3, #3
 80053f0:	e042      	b.n	8005478 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053f2:	edd7 7a00 	vldr	s15, [r7]
 80053f6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005490 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 80053fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005402:	d801      	bhi.n	8005408 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005404:	2304      	movs	r3, #4
 8005406:	e037      	b.n	8005478 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005408:	edd7 7a00 	vldr	s15, [r7]
 800540c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005494 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005418:	d801      	bhi.n	800541e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800541a:	2305      	movs	r3, #5
 800541c:	e02c      	b.n	8005478 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800541e:	edd7 7a00 	vldr	s15, [r7]
 8005422:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005498 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8005426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542e:	d801      	bhi.n	8005434 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005430:	2306      	movs	r3, #6
 8005432:	e021      	b.n	8005478 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005434:	edd7 7a00 	vldr	s15, [r7]
 8005438:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800549c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800543c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005444:	d801      	bhi.n	800544a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005446:	2307      	movs	r3, #7
 8005448:	e016      	b.n	8005478 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800544a:	edd7 7a00 	vldr	s15, [r7]
 800544e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80054a0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8005452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545a:	d801      	bhi.n	8005460 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800545c:	2308      	movs	r3, #8
 800545e:	e00b      	b.n	8005478 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005460:	edd7 7a00 	vldr	s15, [r7]
 8005464:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80054a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005470:	d801      	bhi.n	8005476 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005472:	2309      	movs	r3, #9
 8005474:	e000      	b.n	8005478 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005476:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	42500000 	.word	0x42500000
 8005490:	42d00000 	.word	0x42d00000
 8005494:	43500000 	.word	0x43500000
 8005498:	43d00000 	.word	0x43d00000
 800549c:	44504000 	.word	0x44504000
 80054a0:	44d04000 	.word	0x44d04000
 80054a4:	45504000 	.word	0x45504000

080054a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80054b4:	edd7 7a00 	vldr	s15, [r7]
 80054b8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80054bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c4:	d801      	bhi.n	80054ca <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e058      	b.n	800557c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054ca:	edd7 7a00 	vldr	s15, [r7]
 80054ce:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80054d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054da:	d801      	bhi.n	80054e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80054dc:	2302      	movs	r3, #2
 80054de:	e04d      	b.n	800557c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054e0:	edd7 7a00 	vldr	s15, [r7]
 80054e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80055a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80054e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f0:	d801      	bhi.n	80054f6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80054f2:	2303      	movs	r3, #3
 80054f4:	e042      	b.n	800557c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054f6:	edd7 7a00 	vldr	s15, [r7]
 80054fa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80055a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80054fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005506:	d801      	bhi.n	800550c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005508:	2304      	movs	r3, #4
 800550a:	e037      	b.n	800557c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800550c:	edd7 7a00 	vldr	s15, [r7]
 8005510:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80055ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551c:	d801      	bhi.n	8005522 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800551e:	2305      	movs	r3, #5
 8005520:	e02c      	b.n	800557c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005522:	edd7 7a00 	vldr	s15, [r7]
 8005526:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80055b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800552a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005532:	d801      	bhi.n	8005538 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005534:	2306      	movs	r3, #6
 8005536:	e021      	b.n	800557c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005538:	edd7 7a00 	vldr	s15, [r7]
 800553c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80055b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005548:	d801      	bhi.n	800554e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800554a:	2307      	movs	r3, #7
 800554c:	e016      	b.n	800557c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800554e:	edd7 7a00 	vldr	s15, [r7]
 8005552:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80055b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800555a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555e:	d801      	bhi.n	8005564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005560:	2308      	movs	r3, #8
 8005562:	e00b      	b.n	800557c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005564:	edd7 7a00 	vldr	s15, [r7]
 8005568:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80055bc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800556c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005574:	d801      	bhi.n	800557a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005576:	2309      	movs	r3, #9
 8005578:	e000      	b.n	800557c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800557a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 800557c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	331c      	adds	r3, #28
 8005582:	7bfa      	ldrb	r2, [r7, #15]
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fbb0 	bl	8005cec <ism330dhcx_gy_data_rate_set>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8005592:	f04f 33ff 	mov.w	r3, #4294967295
 8005596:	e000      	b.n	800559a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	42500000 	.word	0x42500000
 80055a8:	42d00000 	.word	0x42d00000
 80055ac:	43500000 	.word	0x43500000
 80055b0:	43d00000 	.word	0x43d00000
 80055b4:	44504000 	.word	0x44504000
 80055b8:	44d04000 	.word	0x44d04000
 80055bc:	45504000 	.word	0x45504000

080055c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80055cc:	edd7 7a00 	vldr	s15, [r7]
 80055d0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80055d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055dc:	d801      	bhi.n	80055e2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80055de:	2301      	movs	r3, #1
 80055e0:	e058      	b.n	8005694 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055e2:	edd7 7a00 	vldr	s15, [r7]
 80055e6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80055ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f2:	d801      	bhi.n	80055f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e04d      	b.n	8005694 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055f8:	edd7 7a00 	vldr	s15, [r7]
 80055fc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80056a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005608:	d801      	bhi.n	800560e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800560a:	2303      	movs	r3, #3
 800560c:	e042      	b.n	8005694 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800560e:	edd7 7a00 	vldr	s15, [r7]
 8005612:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80056ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561e:	d801      	bhi.n	8005624 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005620:	2304      	movs	r3, #4
 8005622:	e037      	b.n	8005694 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005624:	edd7 7a00 	vldr	s15, [r7]
 8005628:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80056b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800562c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005634:	d801      	bhi.n	800563a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005636:	2305      	movs	r3, #5
 8005638:	e02c      	b.n	8005694 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800563a:	edd7 7a00 	vldr	s15, [r7]
 800563e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80056b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564a:	d801      	bhi.n	8005650 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800564c:	2306      	movs	r3, #6
 800564e:	e021      	b.n	8005694 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005650:	edd7 7a00 	vldr	s15, [r7]
 8005654:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80056b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800565c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005660:	d801      	bhi.n	8005666 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005662:	2307      	movs	r3, #7
 8005664:	e016      	b.n	8005694 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005666:	edd7 7a00 	vldr	s15, [r7]
 800566a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80056bc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800566e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005676:	d801      	bhi.n	800567c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005678:	2308      	movs	r3, #8
 800567a:	e00b      	b.n	8005694 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800567c:	edd7 7a00 	vldr	s15, [r7]
 8005680:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80056c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568c:	d801      	bhi.n	8005692 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800568e:	2309      	movs	r3, #9
 8005690:	e000      	b.n	8005694 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005692:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	42500000 	.word	0x42500000
 80056ac:	42d00000 	.word	0x42d00000
 80056b0:	43500000 	.word	0x43500000
 80056b4:	43d00000 	.word	0x43d00000
 80056b8:	44504000 	.word	0x44504000
 80056bc:	44d04000 	.word	0x44d04000
 80056c0:	45504000 	.word	0x45504000

080056c4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80056c4:	b590      	push	{r4, r7, lr}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	461a      	mov	r2, r3
 80056d0:	460b      	mov	r3, r1
 80056d2:	72fb      	strb	r3, [r7, #11]
 80056d4:	4613      	mov	r3, r2
 80056d6:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	695c      	ldr	r4, [r3, #20]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	7b1b      	ldrb	r3, [r3, #12]
 80056e4:	b298      	uxth	r0, r3
 80056e6:	7afb      	ldrb	r3, [r7, #11]
 80056e8:	b299      	uxth	r1, r3
 80056ea:	893b      	ldrh	r3, [r7, #8]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	47a0      	blx	r4
 80056f0:	4603      	mov	r3, r0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd90      	pop	{r4, r7, pc}

080056fa <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80056fa:	b590      	push	{r4, r7, lr}
 80056fc:	b087      	sub	sp, #28
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	461a      	mov	r2, r3
 8005706:	460b      	mov	r3, r1
 8005708:	72fb      	strb	r3, [r7, #11]
 800570a:	4613      	mov	r3, r2
 800570c:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	691c      	ldr	r4, [r3, #16]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	7b1b      	ldrb	r3, [r3, #12]
 800571a:	b298      	uxth	r0, r3
 800571c:	7afb      	ldrb	r3, [r7, #11]
 800571e:	b299      	uxth	r1, r3
 8005720:	893b      	ldrh	r3, [r7, #8]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	47a0      	blx	r4
 8005726:	4603      	mov	r3, r0
}
 8005728:	4618      	mov	r0, r3
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	bd90      	pop	{r4, r7, pc}

08005730 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8005730:	b590      	push	{r4, r7, lr}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	607a      	str	r2, [r7, #4]
 800573a:	461a      	mov	r2, r3
 800573c:	460b      	mov	r3, r1
 800573e:	72fb      	strb	r3, [r7, #11]
 8005740:	4613      	mov	r3, r2
 8005742:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685c      	ldr	r4, [r3, #4]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6898      	ldr	r0, [r3, #8]
 800574c:	893b      	ldrh	r3, [r7, #8]
 800574e:	7af9      	ldrb	r1, [r7, #11]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	47a0      	blx	r4
 8005754:	6178      	str	r0, [r7, #20]

  return ret;
 8005756:	697b      	ldr	r3, [r7, #20]
}
 8005758:	4618      	mov	r0, r3
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	bd90      	pop	{r4, r7, pc}

08005760 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	461a      	mov	r2, r3
 800576c:	460b      	mov	r3, r1
 800576e:	72fb      	strb	r3, [r7, #11]
 8005770:	4613      	mov	r3, r2
 8005772:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681c      	ldr	r4, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6898      	ldr	r0, [r3, #8]
 800577c:	893b      	ldrh	r3, [r7, #8]
 800577e:	7af9      	ldrb	r1, [r7, #11]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	47a0      	blx	r4
 8005784:	6178      	str	r0, [r7, #20]

  return ret;
 8005786:	697b      	ldr	r3, [r7, #20]
}
 8005788:	4618      	mov	r0, r3
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	bd90      	pop	{r4, r7, pc}

08005790 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800579c:	f107 0208 	add.w	r2, r7, #8
 80057a0:	2301      	movs	r3, #1
 80057a2:	2110      	movs	r1, #16
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ffc3 	bl	8005730 <ism330dhcx_read_reg>
 80057aa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10f      	bne.n	80057d2 <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	7a3b      	ldrb	r3, [r7, #8]
 80057bc:	f362 0383 	bfi	r3, r2, #2, #2
 80057c0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80057c2:	f107 0208 	add.w	r2, r7, #8
 80057c6:	2301      	movs	r3, #1
 80057c8:	2110      	movs	r1, #16
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff ffc8 	bl	8005760 <ism330dhcx_write_reg>
 80057d0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80057d2:	68fb      	ldr	r3, [r7, #12]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80057e6:	f107 0208 	add.w	r2, r7, #8
 80057ea:	2301      	movs	r3, #1
 80057ec:	2110      	movs	r1, #16
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff ff9e 	bl	8005730 <ism330dhcx_read_reg>
 80057f4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 80057f6:	7a3b      	ldrb	r3, [r7, #8]
 80057f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d81a      	bhi.n	8005838 <ism330dhcx_xl_full_scale_get+0x5c>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <ism330dhcx_xl_full_scale_get+0x2c>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	08005819 	.word	0x08005819
 800580c:	08005821 	.word	0x08005821
 8005810:	08005829 	.word	0x08005829
 8005814:	08005831 	.word	0x08005831
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
      break;
 800581e:	e00f      	b.n	8005840 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2201      	movs	r2, #1
 8005824:	701a      	strb	r2, [r3, #0]
      break;
 8005826:	e00b      	b.n	8005840 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2202      	movs	r2, #2
 800582c:	701a      	strb	r2, [r3, #0]
      break;
 800582e:	e007      	b.n	8005840 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2203      	movs	r2, #3
 8005834:	701a      	strb	r2, [r3, #0]
      break;
 8005836:	e003      	b.n	8005840 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
      break;
 800583e:	bf00      	nop
  }

  return ret;
 8005840:	68fb      	ldr	r3, [r7, #12]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop

0800584c <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 800585c:	f107 030c 	add.w	r3, r7, #12
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fe86 	bl	8006574 <ism330dhcx_fsm_enable_get>
 8005868:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f040 80c4 	bne.w	80059fa <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005872:	7b3b      	ldrb	r3, [r7, #12]
 8005874:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005878:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800587a:	7b3b      	ldrb	r3, [r7, #12]
 800587c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005880:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005882:	4313      	orrs	r3, r2
 8005884:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005886:	7b3b      	ldrb	r3, [r7, #12]
 8005888:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800588c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800588e:	4313      	orrs	r3, r2
 8005890:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005892:	7b3b      	ldrb	r3, [r7, #12]
 8005894:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005898:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800589a:	4313      	orrs	r3, r2
 800589c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800589e:	7b3b      	ldrb	r3, [r7, #12]
 80058a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80058a6:	4313      	orrs	r3, r2
 80058a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80058aa:	7b3b      	ldrb	r3, [r7, #12]
 80058ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80058b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80058b2:	4313      	orrs	r3, r2
 80058b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80058b6:	7b3b      	ldrb	r3, [r7, #12]
 80058b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80058bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80058be:	4313      	orrs	r3, r2
 80058c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80058c2:	7b3b      	ldrb	r3, [r7, #12]
 80058c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80058c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80058ca:	4313      	orrs	r3, r2
 80058cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80058ce:	7b7b      	ldrb	r3, [r7, #13]
 80058d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80058d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80058d6:	4313      	orrs	r3, r2
 80058d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80058da:	7b7b      	ldrb	r3, [r7, #13]
 80058dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80058e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80058e2:	4313      	orrs	r3, r2
 80058e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80058e6:	7b7b      	ldrb	r3, [r7, #13]
 80058e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80058ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80058ee:	4313      	orrs	r3, r2
 80058f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80058f2:	7b7b      	ldrb	r3, [r7, #13]
 80058f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80058f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80058fa:	4313      	orrs	r3, r2
 80058fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80058fe:	7b7b      	ldrb	r3, [r7, #13]
 8005900:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005904:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005906:	4313      	orrs	r3, r2
 8005908:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800590a:	7b7b      	ldrb	r3, [r7, #13]
 800590c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005910:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005912:	4313      	orrs	r3, r2
 8005914:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005916:	7b7b      	ldrb	r3, [r7, #13]
 8005918:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800591c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800591e:	4313      	orrs	r3, r2
 8005920:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005922:	7b7b      	ldrb	r3, [r7, #13]
 8005924:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005928:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800592a:	4313      	orrs	r3, r2
 800592c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800592e:	2b01      	cmp	r3, #1
 8005930:	d163      	bne.n	80059fa <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005932:	f107 030b 	add.w	r3, r7, #11
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fe47 	bl	80065cc <ism330dhcx_fsm_data_rate_get>
 800593e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d159      	bne.n	80059fa <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005946:	7afb      	ldrb	r3, [r7, #11]
 8005948:	2b03      	cmp	r3, #3
 800594a:	d853      	bhi.n	80059f4 <ism330dhcx_xl_data_rate_set+0x1a8>
 800594c:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <ism330dhcx_xl_data_rate_set+0x108>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	08005965 	.word	0x08005965
 8005958:	08005977 	.word	0x08005977
 800595c:	08005995 	.word	0x08005995
 8005960:	080059bf 	.word	0x080059bf
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d102      	bne.n	8005970 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800596a:	2301      	movs	r3, #1
 800596c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800596e:	e045      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	75fb      	strb	r3, [r7, #23]
            break;
 8005974:	e042      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800597c:	2302      	movs	r3, #2
 800597e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005980:	e03c      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d102      	bne.n	800598e <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005988:	2302      	movs	r3, #2
 800598a:	75fb      	strb	r3, [r7, #23]
            break;
 800598c:	e036      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	75fb      	strb	r3, [r7, #23]
            break;
 8005992:	e033      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d102      	bne.n	80059a0 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800599a:	2303      	movs	r3, #3
 800599c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800599e:	e02d      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d102      	bne.n	80059ac <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80059a6:	2303      	movs	r3, #3
 80059a8:	75fb      	strb	r3, [r7, #23]
            break;
 80059aa:	e027      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d102      	bne.n	80059b8 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80059b2:	2303      	movs	r3, #3
 80059b4:	75fb      	strb	r3, [r7, #23]
            break;
 80059b6:	e021      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	75fb      	strb	r3, [r7, #23]
            break;
 80059bc:	e01e      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80059c4:	2304      	movs	r3, #4
 80059c6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80059c8:	e018      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d102      	bne.n	80059d6 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80059d0:	2304      	movs	r3, #4
 80059d2:	75fb      	strb	r3, [r7, #23]
            break;
 80059d4:	e012      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d102      	bne.n	80059e2 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80059dc:	2304      	movs	r3, #4
 80059de:	75fb      	strb	r3, [r7, #23]
            break;
 80059e0:	e00c      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d102      	bne.n	80059ee <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80059e8:	2304      	movs	r3, #4
 80059ea:	75fb      	strb	r3, [r7, #23]
            break;
 80059ec:	e006      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	75fb      	strb	r3, [r7, #23]
            break;
 80059f2:	e003      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	75fb      	strb	r3, [r7, #23]
            break;
 80059f8:	e000      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 80059fa:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d16d      	bne.n	8005ae2 <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005a06:	f107 030a 	add.w	r3, r7, #10
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fe25 	bl	800665c <ism330dhcx_mlc_get>
 8005a12:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8005a14:	7abb      	ldrb	r3, [r7, #10]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d163      	bne.n	8005ae2 <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005a1a:	f107 0309 	add.w	r3, r7, #9
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fe45 	bl	80066b0 <ism330dhcx_mlc_data_rate_get>
 8005a26:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d159      	bne.n	8005ae2 <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8005a2e:	7a7b      	ldrb	r3, [r7, #9]
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d853      	bhi.n	8005adc <ism330dhcx_xl_data_rate_set+0x290>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <ism330dhcx_xl_data_rate_set+0x1f0>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a4d 	.word	0x08005a4d
 8005a40:	08005a5f 	.word	0x08005a5f
 8005a44:	08005a7d 	.word	0x08005a7d
 8005a48:	08005aa7 	.word	0x08005aa7
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8005a52:	2301      	movs	r3, #1
 8005a54:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005a56:	e045      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	75fb      	strb	r3, [r7, #23]
            break;
 8005a5c:	e042      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005a64:	2302      	movs	r3, #2
 8005a66:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005a68:	e03c      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d102      	bne.n	8005a76 <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005a70:	2302      	movs	r3, #2
 8005a72:	75fb      	strb	r3, [r7, #23]
            break;
 8005a74:	e036      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	75fb      	strb	r3, [r7, #23]
            break;
 8005a7a:	e033      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005a82:	2303      	movs	r3, #3
 8005a84:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005a86:	e02d      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d102      	bne.n	8005a94 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	75fb      	strb	r3, [r7, #23]
            break;
 8005a92:	e027      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d102      	bne.n	8005aa0 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	75fb      	strb	r3, [r7, #23]
            break;
 8005a9e:	e021      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	75fb      	strb	r3, [r7, #23]
            break;
 8005aa4:	e01e      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005aac:	2304      	movs	r3, #4
 8005aae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005ab0:	e018      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d102      	bne.n	8005abe <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005ab8:	2304      	movs	r3, #4
 8005aba:	75fb      	strb	r3, [r7, #23]
            break;
 8005abc:	e012      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d102      	bne.n	8005aca <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	75fb      	strb	r3, [r7, #23]
            break;
 8005ac8:	e00c      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d102      	bne.n	8005ad6 <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ad4:	e006      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	75fb      	strb	r3, [r7, #23]
            break;
 8005ada:	e003      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	75fb      	strb	r3, [r7, #23]
            break;
 8005ae0:	e000      	b.n	8005ae4 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8005ae2:	bf00      	nop
    }
  }

  if (ret == 0)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d107      	bne.n	8005afa <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005aea:	f107 0208 	add.w	r2, r7, #8
 8005aee:	2301      	movs	r3, #1
 8005af0:	2110      	movs	r1, #16
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff fe1c 	bl	8005730 <ism330dhcx_read_reg>
 8005af8:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10f      	bne.n	8005b20 <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	7a3b      	ldrb	r3, [r7, #8]
 8005b0a:	f362 1307 	bfi	r3, r2, #4, #4
 8005b0e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005b10:	f107 0208 	add.w	r2, r7, #8
 8005b14:	2301      	movs	r3, #1
 8005b16:	2110      	movs	r1, #16
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff fe21 	bl	8005760 <ism330dhcx_write_reg>
 8005b1e:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005b20:	693b      	ldr	r3, [r7, #16]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop

08005b2c <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005b36:	f107 0208 	add.w	r2, r7, #8
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	2110      	movs	r1, #16
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff fdf6 	bl	8005730 <ism330dhcx_read_reg>
 8005b44:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8005b46:	7a3b      	ldrb	r3, [r7, #8]
 8005b48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b0b      	cmp	r3, #11
 8005b50:	d84a      	bhi.n	8005be8 <ism330dhcx_xl_data_rate_get+0xbc>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <ism330dhcx_xl_data_rate_get+0x2c>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b89 	.word	0x08005b89
 8005b5c:	08005b91 	.word	0x08005b91
 8005b60:	08005b99 	.word	0x08005b99
 8005b64:	08005ba1 	.word	0x08005ba1
 8005b68:	08005ba9 	.word	0x08005ba9
 8005b6c:	08005bb1 	.word	0x08005bb1
 8005b70:	08005bb9 	.word	0x08005bb9
 8005b74:	08005bc1 	.word	0x08005bc1
 8005b78:	08005bc9 	.word	0x08005bc9
 8005b7c:	08005bd1 	.word	0x08005bd1
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	08005be1 	.word	0x08005be1
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
      break;
 8005b8e:	e02f      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
      break;
 8005b96:	e02b      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	701a      	strb	r2, [r3, #0]
      break;
 8005b9e:	e027      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	701a      	strb	r2, [r3, #0]
      break;
 8005ba6:	e023      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2204      	movs	r2, #4
 8005bac:	701a      	strb	r2, [r3, #0]
      break;
 8005bae:	e01f      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2205      	movs	r2, #5
 8005bb4:	701a      	strb	r2, [r3, #0]
      break;
 8005bb6:	e01b      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2206      	movs	r2, #6
 8005bbc:	701a      	strb	r2, [r3, #0]
      break;
 8005bbe:	e017      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2207      	movs	r2, #7
 8005bc4:	701a      	strb	r2, [r3, #0]
      break;
 8005bc6:	e013      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2208      	movs	r2, #8
 8005bcc:	701a      	strb	r2, [r3, #0]
      break;
 8005bce:	e00f      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2209      	movs	r2, #9
 8005bd4:	701a      	strb	r2, [r3, #0]
      break;
 8005bd6:	e00b      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	220a      	movs	r2, #10
 8005bdc:	701a      	strb	r2, [r3, #0]
      break;
 8005bde:	e007      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	220b      	movs	r2, #11
 8005be4:	701a      	strb	r2, [r3, #0]
      break;
 8005be6:	e003      	b.n	8005bf0 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
      break;
 8005bee:	bf00      	nop
  }

  return ret;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop

08005bfc <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005c08:	f107 0208 	add.w	r2, r7, #8
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	2111      	movs	r1, #17
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff fd8d 	bl	8005730 <ism330dhcx_read_reg>
 8005c16:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10f      	bne.n	8005c3e <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	7a3b      	ldrb	r3, [r7, #8]
 8005c28:	f362 0303 	bfi	r3, r2, #0, #4
 8005c2c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005c2e:	f107 0208 	add.w	r2, r7, #8
 8005c32:	2301      	movs	r3, #1
 8005c34:	2111      	movs	r1, #17
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff fd92 	bl	8005760 <ism330dhcx_write_reg>
 8005c3c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005c52:	f107 0208 	add.w	r2, r7, #8
 8005c56:	2301      	movs	r3, #1
 8005c58:	2111      	movs	r1, #17
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff fd68 	bl	8005730 <ism330dhcx_read_reg>
 8005c60:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 8005c62:	7a3b      	ldrb	r3, [r7, #8]
 8005c64:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b0c      	cmp	r3, #12
 8005c6c:	d834      	bhi.n	8005cd8 <ism330dhcx_gy_full_scale_get+0x90>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <ism330dhcx_gy_full_scale_get+0x2c>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005cb1 	.word	0x08005cb1
 8005c78:	08005cd1 	.word	0x08005cd1
 8005c7c:	08005ca9 	.word	0x08005ca9
 8005c80:	08005cd9 	.word	0x08005cd9
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08005cd9 	.word	0x08005cd9
 8005c8c:	08005cd9 	.word	0x08005cd9
 8005c90:	08005cd9 	.word	0x08005cd9
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	08005cd9 	.word	0x08005cd9
 8005c9c:	08005cd9 	.word	0x08005cd9
 8005ca0:	08005cd9 	.word	0x08005cd9
 8005ca4:	08005cc9 	.word	0x08005cc9
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2202      	movs	r2, #2
 8005cac:	701a      	strb	r2, [r3, #0]
      break;
 8005cae:	e017      	b.n	8005ce0 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
      break;
 8005cb6:	e013      	b.n	8005ce0 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2204      	movs	r2, #4
 8005cbc:	701a      	strb	r2, [r3, #0]
      break;
 8005cbe:	e00f      	b.n	8005ce0 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	701a      	strb	r2, [r3, #0]
      break;
 8005cc6:	e00b      	b.n	8005ce0 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	220c      	movs	r2, #12
 8005ccc:	701a      	strb	r2, [r3, #0]
      break;
 8005cce:	e007      	b.n	8005ce0 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	701a      	strb	r2, [r3, #0]
      break;
 8005cd6:	e003      	b.n	8005ce0 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	701a      	strb	r2, [r3, #0]
      break;
 8005cde:	bf00      	nop
  }

  return ret;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop

08005cec <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005cfc:	f107 030c 	add.w	r3, r7, #12
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fc36 	bl	8006574 <ism330dhcx_fsm_enable_get>
 8005d08:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 80c4 	bne.w	8005e9a <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d12:	7b3b      	ldrb	r3, [r7, #12]
 8005d14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d1a:	7b3b      	ldrb	r3, [r7, #12]
 8005d1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d20:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d22:	4313      	orrs	r3, r2
 8005d24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d26:	7b3b      	ldrb	r3, [r7, #12]
 8005d28:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d32:	7b3b      	ldrb	r3, [r7, #12]
 8005d34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d3e:	7b3b      	ldrb	r3, [r7, #12]
 8005d40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d46:	4313      	orrs	r3, r2
 8005d48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005d4a:	7b3b      	ldrb	r3, [r7, #12]
 8005d4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d52:	4313      	orrs	r3, r2
 8005d54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005d56:	7b3b      	ldrb	r3, [r7, #12]
 8005d58:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005d62:	7b3b      	ldrb	r3, [r7, #12]
 8005d64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005d68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005d6e:	7b7b      	ldrb	r3, [r7, #13]
 8005d70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005d76:	4313      	orrs	r3, r2
 8005d78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005d7a:	7b7b      	ldrb	r3, [r7, #13]
 8005d7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005d82:	4313      	orrs	r3, r2
 8005d84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005d86:	7b7b      	ldrb	r3, [r7, #13]
 8005d88:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005d92:	7b7b      	ldrb	r3, [r7, #13]
 8005d94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005d9e:	7b7b      	ldrb	r3, [r7, #13]
 8005da0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005da4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005da6:	4313      	orrs	r3, r2
 8005da8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005daa:	7b7b      	ldrb	r3, [r7, #13]
 8005dac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005db0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005db2:	4313      	orrs	r3, r2
 8005db4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005db6:	7b7b      	ldrb	r3, [r7, #13]
 8005db8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005dbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005dc2:	7b7b      	ldrb	r3, [r7, #13]
 8005dc4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005dc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d163      	bne.n	8005e9a <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005dd2:	f107 030b 	add.w	r3, r7, #11
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fbf7 	bl	80065cc <ism330dhcx_fsm_data_rate_get>
 8005dde:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d159      	bne.n	8005e9a <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005de6:	7afb      	ldrb	r3, [r7, #11]
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d853      	bhi.n	8005e94 <ism330dhcx_gy_data_rate_set+0x1a8>
 8005dec:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <ism330dhcx_gy_data_rate_set+0x108>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e05 	.word	0x08005e05
 8005df8:	08005e17 	.word	0x08005e17
 8005dfc:	08005e35 	.word	0x08005e35
 8005e00:	08005e5f 	.word	0x08005e5f
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d102      	bne.n	8005e10 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e0e:	e045      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	75fb      	strb	r3, [r7, #23]
            break;
 8005e14:	e042      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e20:	e03c      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d102      	bne.n	8005e2e <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e2c:	e036      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	75fb      	strb	r3, [r7, #23]
            break;
 8005e32:	e033      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d102      	bne.n	8005e40 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e3e:	e02d      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d102      	bne.n	8005e4c <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005e46:	2303      	movs	r3, #3
 8005e48:	75fb      	strb	r3, [r7, #23]
            break;
 8005e4a:	e027      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d102      	bne.n	8005e58 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005e52:	2303      	movs	r3, #3
 8005e54:	75fb      	strb	r3, [r7, #23]
            break;
 8005e56:	e021      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e5c:	e01e      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005e64:	2304      	movs	r3, #4
 8005e66:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e68:	e018      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d102      	bne.n	8005e76 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005e70:	2304      	movs	r3, #4
 8005e72:	75fb      	strb	r3, [r7, #23]
            break;
 8005e74:	e012      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d102      	bne.n	8005e82 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e80:	e00c      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d102      	bne.n	8005e8e <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005e88:	2304      	movs	r3, #4
 8005e8a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e8c:	e006      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	75fb      	strb	r3, [r7, #23]
            break;
 8005e92:	e003      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	75fb      	strb	r3, [r7, #23]
            break;
 8005e98:	e000      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 8005e9a:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d16d      	bne.n	8005f82 <ism330dhcx_gy_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005ea6:	f107 030a 	add.w	r3, r7, #10
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fbd5 	bl	800665c <ism330dhcx_mlc_get>
 8005eb2:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8005eb4:	7abb      	ldrb	r3, [r7, #10]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d163      	bne.n	8005f82 <ism330dhcx_gy_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005eba:	f107 0309 	add.w	r3, r7, #9
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fbf5 	bl	80066b0 <ism330dhcx_mlc_data_rate_get>
 8005ec6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d159      	bne.n	8005f82 <ism330dhcx_gy_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8005ece:	7a7b      	ldrb	r3, [r7, #9]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d853      	bhi.n	8005f7c <ism330dhcx_gy_data_rate_set+0x290>
 8005ed4:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <ism330dhcx_gy_data_rate_set+0x1f0>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005eed 	.word	0x08005eed
 8005ee0:	08005eff 	.word	0x08005eff
 8005ee4:	08005f1d 	.word	0x08005f1d
 8005ee8:	08005f47 	.word	0x08005f47
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <ism330dhcx_gy_data_rate_set+0x20c>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005ef6:	e045      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	75fb      	strb	r3, [r7, #23]
            break;
 8005efc:	e042      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <ism330dhcx_gy_data_rate_set+0x21e>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005f04:	2302      	movs	r3, #2
 8005f06:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005f08:	e03c      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005f0a:	78fb      	ldrb	r3, [r7, #3]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d102      	bne.n	8005f16 <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005f10:	2302      	movs	r3, #2
 8005f12:	75fb      	strb	r3, [r7, #23]
            break;
 8005f14:	e036      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	75fb      	strb	r3, [r7, #23]
            break;
 8005f1a:	e033      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d102      	bne.n	8005f28 <ism330dhcx_gy_data_rate_set+0x23c>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005f22:	2303      	movs	r3, #3
 8005f24:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005f26:	e02d      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d102      	bne.n	8005f34 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	75fb      	strb	r3, [r7, #23]
            break;
 8005f32:	e027      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d102      	bne.n	8005f40 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	75fb      	strb	r3, [r7, #23]
            break;
 8005f3e:	e021      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	75fb      	strb	r3, [r7, #23]
            break;
 8005f44:	e01e      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <ism330dhcx_gy_data_rate_set+0x266>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005f50:	e018      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d102      	bne.n	8005f5e <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005f58:	2304      	movs	r3, #4
 8005f5a:	75fb      	strb	r3, [r7, #23]
            break;
 8005f5c:	e012      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d102      	bne.n	8005f6a <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005f64:	2304      	movs	r3, #4
 8005f66:	75fb      	strb	r3, [r7, #23]
            break;
 8005f68:	e00c      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d102      	bne.n	8005f76 <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005f70:	2304      	movs	r3, #4
 8005f72:	75fb      	strb	r3, [r7, #23]
            break;
 8005f74:	e006      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	75fb      	strb	r3, [r7, #23]
            break;
 8005f7a:	e003      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	75fb      	strb	r3, [r7, #23]
            break;
 8005f80:	e000      	b.n	8005f84 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8005f82:	bf00      	nop
    }
  }

  if (ret == 0)
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d107      	bne.n	8005f9a <ism330dhcx_gy_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005f8a:	f107 0208 	add.w	r2, r7, #8
 8005f8e:	2301      	movs	r3, #1
 8005f90:	2111      	movs	r1, #17
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fbcc 	bl	8005730 <ism330dhcx_read_reg>
 8005f98:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10f      	bne.n	8005fc0 <ism330dhcx_gy_data_rate_set+0x2d4>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	7a3b      	ldrb	r3, [r7, #8]
 8005faa:	f362 1307 	bfi	r3, r2, #4, #4
 8005fae:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005fb0:	f107 0208 	add.w	r2, r7, #8
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	2111      	movs	r1, #17
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff fbd1 	bl	8005760 <ism330dhcx_write_reg>
 8005fbe:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8005fc0:	693b      	ldr	r3, [r7, #16]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop

08005fcc <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005fd6:	f107 0208 	add.w	r2, r7, #8
 8005fda:	2301      	movs	r3, #1
 8005fdc:	2111      	movs	r1, #17
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff fba6 	bl	8005730 <ism330dhcx_read_reg>
 8005fe4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 8005fe6:	7a3b      	ldrb	r3, [r7, #8]
 8005fe8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b0a      	cmp	r3, #10
 8005ff0:	d844      	bhi.n	800607c <ism330dhcx_gy_data_rate_get+0xb0>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <ism330dhcx_gy_data_rate_get+0x2c>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	08006025 	.word	0x08006025
 8005ffc:	0800602d 	.word	0x0800602d
 8006000:	08006035 	.word	0x08006035
 8006004:	0800603d 	.word	0x0800603d
 8006008:	08006045 	.word	0x08006045
 800600c:	0800604d 	.word	0x0800604d
 8006010:	08006055 	.word	0x08006055
 8006014:	0800605d 	.word	0x0800605d
 8006018:	08006065 	.word	0x08006065
 800601c:	0800606d 	.word	0x0800606d
 8006020:	08006075 	.word	0x08006075
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2200      	movs	r2, #0
 8006028:	701a      	strb	r2, [r3, #0]
      break;
 800602a:	e02b      	b.n	8006084 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2201      	movs	r2, #1
 8006030:	701a      	strb	r2, [r3, #0]
      break;
 8006032:	e027      	b.n	8006084 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2202      	movs	r2, #2
 8006038:	701a      	strb	r2, [r3, #0]
      break;
 800603a:	e023      	b.n	8006084 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2203      	movs	r2, #3
 8006040:	701a      	strb	r2, [r3, #0]
      break;
 8006042:	e01f      	b.n	8006084 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2204      	movs	r2, #4
 8006048:	701a      	strb	r2, [r3, #0]
      break;
 800604a:	e01b      	b.n	8006084 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2205      	movs	r2, #5
 8006050:	701a      	strb	r2, [r3, #0]
      break;
 8006052:	e017      	b.n	8006084 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2206      	movs	r2, #6
 8006058:	701a      	strb	r2, [r3, #0]
      break;
 800605a:	e013      	b.n	8006084 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2207      	movs	r2, #7
 8006060:	701a      	strb	r2, [r3, #0]
      break;
 8006062:	e00f      	b.n	8006084 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2208      	movs	r2, #8
 8006068:	701a      	strb	r2, [r3, #0]
      break;
 800606a:	e00b      	b.n	8006084 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2209      	movs	r2, #9
 8006070:	701a      	strb	r2, [r3, #0]
      break;
 8006072:	e007      	b.n	8006084 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	220a      	movs	r2, #10
 8006078:	701a      	strb	r2, [r3, #0]
      break;
 800607a:	e003      	b.n	8006084 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
      break;
 8006082:	bf00      	nop
  }

  return ret;
 8006084:	68fb      	ldr	r3, [r7, #12]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop

08006090 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800609c:	f107 0208 	add.w	r2, r7, #8
 80060a0:	2301      	movs	r3, #1
 80060a2:	2112      	movs	r1, #18
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff fb43 	bl	8005730 <ism330dhcx_read_reg>
 80060aa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10f      	bne.n	80060d2 <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	7a3b      	ldrb	r3, [r7, #8]
 80060bc:	f362 1386 	bfi	r3, r2, #6, #1
 80060c0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80060c2:	f107 0208 	add.w	r2, r7, #8
 80060c6:	2301      	movs	r3, #1
 80060c8:	2112      	movs	r1, #18
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff fb48 	bl	8005760 <ism330dhcx_write_reg>
 80060d0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80060d2:	68fb      	ldr	r3, [r7, #12]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 80060e6:	f107 020c 	add.w	r2, r7, #12
 80060ea:	2306      	movs	r3, #6
 80060ec:	2122      	movs	r1, #34	; 0x22
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fb1e 	bl	8005730 <ism330dhcx_read_reg>
 80060f4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80060f6:	7b7b      	ldrb	r3, [r7, #13]
 80060f8:	b21a      	sxth	r2, r3
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006104:	b29b      	uxth	r3, r3
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	b29a      	uxth	r2, r3
 800610a:	7b3b      	ldrb	r3, [r7, #12]
 800610c:	b29b      	uxth	r3, r3
 800610e:	4413      	add	r3, r2
 8006110:	b29b      	uxth	r3, r3
 8006112:	b21a      	sxth	r2, r3
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006118:	7bfa      	ldrb	r2, [r7, #15]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	3302      	adds	r3, #2
 800611e:	b212      	sxth	r2, r2
 8006120:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	3302      	adds	r3, #2
 8006126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800612a:	b29b      	uxth	r3, r3
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	b29a      	uxth	r2, r3
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	b29b      	uxth	r3, r3
 8006134:	4413      	add	r3, r2
 8006136:	b29a      	uxth	r2, r3
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	3302      	adds	r3, #2
 800613c:	b212      	sxth	r2, r2
 800613e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006140:	7c7a      	ldrb	r2, [r7, #17]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	3304      	adds	r3, #4
 8006146:	b212      	sxth	r2, r2
 8006148:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	3304      	adds	r3, #4
 800614e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006152:	b29b      	uxth	r3, r3
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	b29a      	uxth	r2, r3
 8006158:	7c3b      	ldrb	r3, [r7, #16]
 800615a:	b29b      	uxth	r3, r3
 800615c:	4413      	add	r3, r2
 800615e:	b29a      	uxth	r2, r3
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	3304      	adds	r3, #4
 8006164:	b212      	sxth	r2, r2
 8006166:	801a      	strh	r2, [r3, #0]

  return ret;
 8006168:	697b      	ldr	r3, [r7, #20]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 800617c:	f107 020c 	add.w	r2, r7, #12
 8006180:	2306      	movs	r3, #6
 8006182:	2128      	movs	r1, #40	; 0x28
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff fad3 	bl	8005730 <ism330dhcx_read_reg>
 800618a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800618c:	7b7b      	ldrb	r3, [r7, #13]
 800618e:	b21a      	sxth	r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800619a:	b29b      	uxth	r3, r3
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	b29a      	uxth	r2, r3
 80061a0:	7b3b      	ldrb	r3, [r7, #12]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	4413      	add	r3, r2
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	b21a      	sxth	r2, r3
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80061ae:	7bfa      	ldrb	r2, [r7, #15]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	3302      	adds	r3, #2
 80061b4:	b212      	sxth	r2, r2
 80061b6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	3302      	adds	r3, #2
 80061bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	4413      	add	r3, r2
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	3302      	adds	r3, #2
 80061d2:	b212      	sxth	r2, r2
 80061d4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80061d6:	7c7a      	ldrb	r2, [r7, #17]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	3304      	adds	r3, #4
 80061dc:	b212      	sxth	r2, r2
 80061de:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	3304      	adds	r3, #4
 80061e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	7c3b      	ldrb	r3, [r7, #16]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	4413      	add	r3, r2
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	3304      	adds	r3, #4
 80061fa:	b212      	sxth	r2, r2
 80061fc:	801a      	strh	r2, [r3, #0]

  return ret;
 80061fe:	697b      	ldr	r3, [r7, #20]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <ism330dhcx_fifo_out_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_out_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_DATA_OUT_X_L, buff, 6);
 8006212:	2306      	movs	r3, #6
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	2179      	movs	r1, #121	; 0x79
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff fa89 	bl	8005730 <ism330dhcx_read_reg>
 800621e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006220:	68fb      	ldr	r3, [r7, #12]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	460b      	mov	r3, r1
 8006234:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8006236:	f107 0208 	add.w	r2, r7, #8
 800623a:	2301      	movs	r3, #1
 800623c:	2118      	movs	r1, #24
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fa76 	bl	8005730 <ism330dhcx_read_reg>
 8006244:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10f      	bne.n	800626c <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	b2da      	uxtb	r2, r3
 8006254:	7a3b      	ldrb	r3, [r7, #8]
 8006256:	f362 0341 	bfi	r3, r2, #1, #1
 800625a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800625c:	f107 0208 	add.w	r2, r7, #8
 8006260:	2301      	movs	r3, #1
 8006262:	2118      	movs	r1, #24
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff fa7b 	bl	8005760 <ism330dhcx_write_reg>
 800626a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8006282:	f107 0208 	add.w	r2, r7, #8
 8006286:	2301      	movs	r3, #1
 8006288:	2101      	movs	r1, #1
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff fa50 	bl	8005730 <ism330dhcx_read_reg>
 8006290:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10f      	bne.n	80062b8 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	7a3b      	ldrb	r3, [r7, #8]
 80062a2:	f362 1387 	bfi	r3, r2, #6, #2
 80062a6:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80062a8:	f107 0208 	add.w	r2, r7, #8
 80062ac:	2301      	movs	r3, #1
 80062ae:	2101      	movs	r1, #1
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fa55 	bl	8005760 <ism330dhcx_write_reg>
 80062b6:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80062b8:	68fb      	ldr	r3, [r7, #12]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 80062cc:	2301      	movs	r3, #1
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	210f      	movs	r1, #15
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff fa2c 	bl	8005730 <ism330dhcx_read_reg>
 80062d8:	60f8      	str	r0, [r7, #12]

  return ret;
 80062da:	68fb      	ldr	r3, [r7, #12]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80062f0:	f107 0208 	add.w	r2, r7, #8
 80062f4:	2301      	movs	r3, #1
 80062f6:	2112      	movs	r1, #18
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff fa19 	bl	8005730 <ism330dhcx_read_reg>
 80062fe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10f      	bne.n	8006326 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	b2da      	uxtb	r2, r3
 800630e:	7a3b      	ldrb	r3, [r7, #8]
 8006310:	f362 0300 	bfi	r3, r2, #0, #1
 8006314:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8006316:	f107 0208 	add.w	r2, r7, #8
 800631a:	2301      	movs	r3, #1
 800631c:	2112      	movs	r1, #18
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff fa1e 	bl	8005760 <ism330dhcx_write_reg>
 8006324:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8006326:	68fb      	ldr	r3, [r7, #12]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800633c:	f107 0208 	add.w	r2, r7, #8
 8006340:	2301      	movs	r3, #1
 8006342:	2112      	movs	r1, #18
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff f9f3 	bl	8005730 <ism330dhcx_read_reg>
 800634a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10f      	bne.n	8006372 <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	b2da      	uxtb	r2, r3
 800635a:	7a3b      	ldrb	r3, [r7, #8]
 800635c:	f362 0382 	bfi	r3, r2, #2, #1
 8006360:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8006362:	f107 0208 	add.w	r2, r7, #8
 8006366:	2301      	movs	r3, #1
 8006368:	2112      	movs	r1, #18
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff f9f8 	bl	8005760 <ism330dhcx_write_reg>
 8006370:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8006372:	68fb      	ldr	r3, [r7, #12]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <ism330dhcx_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	807b      	strh	r3, [r7, #2]
  ism330dhcx_fifo_ctrl1_t fifo_ctrl1;
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8006388:	f107 020c 	add.w	r2, r7, #12
 800638c:	2301      	movs	r3, #1
 800638e:	2108      	movs	r1, #8
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff f9cd 	bl	8005730 <ism330dhcx_read_reg>
 8006396:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d111      	bne.n	80063c2 <ism330dhcx_fifo_watermark_set+0x46>
  {
    fifo_ctrl2.wtm = (uint8_t)(val / 256U) & 0x01U;
 800639e:	887b      	ldrh	r3, [r7, #2]
 80063a0:	0a1b      	lsrs	r3, r3, #8
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	7b3b      	ldrb	r3, [r7, #12]
 80063ac:	f362 0300 	bfi	r3, r2, #0, #1
 80063b0:	733b      	strb	r3, [r7, #12]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 80063b2:	f107 020c 	add.w	r2, r7, #12
 80063b6:	2301      	movs	r3, #1
 80063b8:	2108      	movs	r1, #8
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff f9d0 	bl	8005760 <ism330dhcx_write_reg>
 80063c0:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  if (ret == 0)
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <ism330dhcx_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.wtm = (uint8_t)(val - (fifo_ctrl2.wtm * 256U));
 80063c8:	887b      	ldrh	r3, [r7, #2]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	743b      	strb	r3, [r7, #16]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL1,
 80063ce:	f107 0210 	add.w	r2, r7, #16
 80063d2:	2301      	movs	r3, #1
 80063d4:	2107      	movs	r1, #7
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff f9c2 	bl	8005760 <ism330dhcx_write_reg>
 80063dc:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl1, 1);
  }

  return ret;
 80063de:	697b      	ldr	r3, [r7, #20]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <ism330dhcx_fifo_stop_on_wtm_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 80063f4:	f107 0208 	add.w	r2, r7, #8
 80063f8:	2301      	movs	r3, #1
 80063fa:	2108      	movs	r1, #8
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff f997 	bl	8005730 <ism330dhcx_read_reg>
 8006402:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10f      	bne.n	800642a <ism330dhcx_fifo_stop_on_wtm_set+0x42>
  {
    fifo_ctrl2.stop_on_wtm = (uint8_t)val;
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	b2da      	uxtb	r2, r3
 8006412:	7a3b      	ldrb	r3, [r7, #8]
 8006414:	f362 13c7 	bfi	r3, r2, #7, #1
 8006418:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 800641a:	f107 0208 	add.w	r2, r7, #8
 800641e:	2301      	movs	r3, #1
 8006420:	2108      	movs	r1, #8
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff f99c 	bl	8005760 <ism330dhcx_write_reg>
 8006428:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
 800642a:	68fb      	ldr	r3, [r7, #12]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8006440:	f107 0208 	add.w	r2, r7, #8
 8006444:	2301      	movs	r3, #1
 8006446:	2109      	movs	r1, #9
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff f971 	bl	8005730 <ism330dhcx_read_reg>
 800644e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10f      	bne.n	8006476 <ism330dhcx_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 8006456:	78fb      	ldrb	r3, [r7, #3]
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	b2da      	uxtb	r2, r3
 800645e:	7a3b      	ldrb	r3, [r7, #8]
 8006460:	f362 0303 	bfi	r3, r2, #0, #4
 8006464:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8006466:	f107 0208 	add.w	r2, r7, #8
 800646a:	2301      	movs	r3, #1
 800646c:	2109      	movs	r1, #9
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff f976 	bl	8005760 <ism330dhcx_write_reg>
 8006474:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8006476:	68fb      	ldr	r3, [r7, #12]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 800648c:	f107 0208 	add.w	r2, r7, #8
 8006490:	2301      	movs	r3, #1
 8006492:	2109      	movs	r1, #9
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff f94b 	bl	8005730 <ism330dhcx_read_reg>
 800649a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10f      	bne.n	80064c2 <ism330dhcx_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	7a3b      	ldrb	r3, [r7, #8]
 80064ac:	f362 1307 	bfi	r3, r2, #4, #4
 80064b0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80064b2:	f107 0208 	add.w	r2, r7, #8
 80064b6:	2301      	movs	r3, #1
 80064b8:	2109      	movs	r1, #9
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff f950 	bl	8005760 <ism330dhcx_write_reg>
 80064c0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 80064c2:	68fb      	ldr	r3, [r7, #12]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80064d8:	f107 0208 	add.w	r2, r7, #8
 80064dc:	2301      	movs	r3, #1
 80064de:	210a      	movs	r1, #10
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff f925 	bl	8005730 <ism330dhcx_read_reg>
 80064e6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10f      	bne.n	800650e <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	7a3b      	ldrb	r3, [r7, #8]
 80064f8:	f362 0302 	bfi	r3, r2, #0, #3
 80064fc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80064fe:	f107 0208 	add.w	r2, r7, #8
 8006502:	2301      	movs	r3, #1
 8006504:	210a      	movs	r1, #10
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff f92a 	bl	8005760 <ism330dhcx_write_reg>
 800650c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 800650e:	68fb      	ldr	r3, [r7, #12]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <ism330dhcx_fifo_data_level_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_data_level_get(stmdev_ctx_t *ctx,
                                       uint16_t *val)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  ism330dhcx_fifo_status1_t fifo_status1;
  ism330dhcx_fifo_status2_t fifo_status2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_STATUS1,
 8006522:	f107 0210 	add.w	r2, r7, #16
 8006526:	2301      	movs	r3, #1
 8006528:	213a      	movs	r1, #58	; 0x3a
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff f900 	bl	8005730 <ism330dhcx_read_reg>
 8006530:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_status1, 1);

  if (ret == 0)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d118      	bne.n	800656a <ism330dhcx_fifo_data_level_get+0x52>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_STATUS2,
 8006538:	f107 020c 	add.w	r2, r7, #12
 800653c:	2301      	movs	r3, #1
 800653e:	213b      	movs	r1, #59	; 0x3b
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff f8f5 	bl	8005730 <ism330dhcx_read_reg>
 8006546:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_status2, 1);
    *val = fifo_status2.diff_fifo;
 8006548:	7b3b      	ldrb	r3, [r7, #12]
 800654a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800654e:	b2db      	uxtb	r3, r3
 8006550:	b29a      	uxth	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256U) +  fifo_status1.diff_fifo;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	b29a      	uxth	r2, r3
 800655e:	7c3b      	ldrb	r3, [r7, #16]
 8006560:	b29b      	uxth	r3, r3
 8006562:	4413      	add	r3, r2
 8006564:	b29a      	uxth	r2, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800656a:	697b      	ldr	r3, [r7, #20]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800657e:	2102      	movs	r1, #2
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff fe78 	bl	8006276 <ism330dhcx_mem_bank_set>
 8006586:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d106      	bne.n	800659c <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 800658e:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8006590:	2301      	movs	r3, #1
 8006592:	2146      	movs	r1, #70	; 0x46
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff f8cb 	bl	8005730 <ism330dhcx_read_reg>
 800659a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d107      	bne.n	80065b2 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80065a6:	2301      	movs	r3, #1
 80065a8:	2147      	movs	r1, #71	; 0x47
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff f8c0 	bl	8005730 <ism330dhcx_read_reg>
 80065b0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80065b8:	2100      	movs	r1, #0
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fe5b 	bl	8006276 <ism330dhcx_mem_bank_set>
 80065c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065c2:	68fb      	ldr	r3, [r7, #12]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80065d6:	2102      	movs	r1, #2
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff fe4c 	bl	8006276 <ism330dhcx_mem_bank_set>
 80065de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d107      	bne.n	80065f6 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 80065e6:	f107 0208 	add.w	r2, r7, #8
 80065ea:	2301      	movs	r3, #1
 80065ec:	215f      	movs	r1, #95	; 0x5f
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff f89e 	bl	8005730 <ism330dhcx_read_reg>
 80065f4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80065fc:	2100      	movs	r1, #0
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff fe39 	bl	8006276 <ism330dhcx_mem_bank_set>
 8006604:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8006606:	7a3b      	ldrb	r3, [r7, #8]
 8006608:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b03      	cmp	r3, #3
 8006610:	d81a      	bhi.n	8006648 <ism330dhcx_fsm_data_rate_get+0x7c>
 8006612:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	08006629 	.word	0x08006629
 800661c:	08006631 	.word	0x08006631
 8006620:	08006639 	.word	0x08006639
 8006624:	08006641 	.word	0x08006641
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
      break;
 800662e:	e00f      	b.n	8006650 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
      break;
 8006636:	e00b      	b.n	8006650 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2202      	movs	r2, #2
 800663c:	701a      	strb	r2, [r3, #0]
      break;
 800663e:	e007      	b.n	8006650 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2203      	movs	r2, #3
 8006644:	701a      	strb	r2, [r3, #0]
      break;
 8006646:	e003      	b.n	8006650 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]
      break;
 800664e:	bf00      	nop
  }

  return ret;
 8006650:	68fb      	ldr	r3, [r7, #12]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop

0800665c <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006666:	2102      	movs	r1, #2
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff fe04 	bl	8006276 <ism330dhcx_mem_bank_set>
 800666e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d107      	bne.n	8006686 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8006676:	f107 0208 	add.w	r2, r7, #8
 800667a:	2301      	movs	r3, #1
 800667c:	2105      	movs	r1, #5
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff f856 	bl	8005730 <ism330dhcx_read_reg>
 8006684:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10b      	bne.n	80066a4 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800668c:	2100      	movs	r1, #0
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fdf1 	bl	8006276 <ism330dhcx_mem_bank_set>
 8006694:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8006696:	7a3b      	ldrb	r3, [r7, #8]
 8006698:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800669c:	b2db      	uxtb	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80066a4:	68fb      	ldr	r3, [r7, #12]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80066ba:	2102      	movs	r1, #2
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff fdda 	bl	8006276 <ism330dhcx_mem_bank_set>
 80066c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d107      	bne.n	80066da <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 80066ca:	f107 0208 	add.w	r2, r7, #8
 80066ce:	2301      	movs	r3, #1
 80066d0:	2160      	movs	r1, #96	; 0x60
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff f82c 	bl	8005730 <ism330dhcx_read_reg>
 80066d8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d12a      	bne.n	8006736 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 80066e0:	7a3b      	ldrb	r3, [r7, #8]
 80066e2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d81b      	bhi.n	8006724 <ism330dhcx_mlc_data_rate_get+0x74>
 80066ec:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <ism330dhcx_mlc_data_rate_get+0x44>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006705 	.word	0x08006705
 80066f8:	0800670d 	.word	0x0800670d
 80066fc:	08006715 	.word	0x08006715
 8006700:	0800671d 	.word	0x0800671d
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
        break;
 800670a:	e00f      	b.n	800672c <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2201      	movs	r2, #1
 8006710:	701a      	strb	r2, [r3, #0]
        break;
 8006712:	e00b      	b.n	800672c <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2202      	movs	r2, #2
 8006718:	701a      	strb	r2, [r3, #0]
        break;
 800671a:	e007      	b.n	800672c <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2203      	movs	r2, #3
 8006720:	701a      	strb	r2, [r3, #0]
        break;
 8006722:	e003      	b.n	800672c <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
        break;
 800672a:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800672c:	2100      	movs	r1, #0
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff fda1 	bl	8006276 <ism330dhcx_mem_bank_set>
 8006734:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006736:	68fb      	ldr	r3, [r7, #12]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <BSP_PB_Init>:
 *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
 *                                    with interrupt generation capability
 * @retval BSP status
 */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	; 0x28
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	460a      	mov	r2, r1
 800674a:	71fb      	strb	r3, [r7, #7]
 800674c:	4613      	mov	r3, r2
 800674e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock*/
  if(Button == BUTTON_USER)
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10f      	bne.n	8006776 <BSP_PB_Init+0x36>
  {
    BUTTON_USER_GPIO_CLK_ENABLE();
 8006756:	4b3c      	ldr	r3, [pc, #240]	; (8006848 <BSP_PB_Init+0x108>)
 8006758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800675c:	4a3a      	ldr	r2, [pc, #232]	; (8006848 <BSP_PB_Init+0x108>)
 800675e:	f043 0310 	orr.w	r3, r3, #16
 8006762:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006766:	4b38      	ldr	r3, [pc, #224]	; (8006848 <BSP_PB_Init+0x108>)
 8006768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	e00e      	b.n	8006794 <BSP_PB_Init+0x54>
  }
  else
  {
    BUTTON_PWR_GPIO_CLK_ENABLE();
 8006776:	4b34      	ldr	r3, [pc, #208]	; (8006848 <BSP_PB_Init+0x108>)
 8006778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800677c:	4a32      	ldr	r2, [pc, #200]	; (8006848 <BSP_PB_Init+0x108>)
 800677e:	f043 0308 	orr.w	r3, r3, #8
 8006782:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006786:	4b30      	ldr	r3, [pc, #192]	; (8006848 <BSP_PB_Init+0x108>)
 8006788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	68fb      	ldr	r3, [r7, #12]
  }
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	4a2d      	ldr	r2, [pc, #180]	; (800684c <BSP_PB_Init+0x10c>)
 8006798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800679c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800679e:	2302      	movs	r3, #2
 80067a0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80067a2:	2302      	movs	r3, #2
 80067a4:	623b      	str	r3, [r7, #32]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80067a6:	79bb      	ldrb	r3, [r7, #6]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10c      	bne.n	80067c6 <BSP_PB_Init+0x86>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init((GPIO_TypeDef*) BUTTON_PORT[Button], &gpio_init_structure);
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	4a27      	ldr	r2, [pc, #156]	; (8006850 <BSP_PB_Init+0x110>)
 80067b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067b8:	f107 0214 	add.w	r2, r7, #20
 80067bc:	4611      	mov	r1, r2
 80067be:	4618      	mov	r0, r3
 80067c0:	f003 fdda 	bl	800a378 <HAL_GPIO_Init>
 80067c4:	e03a      	b.n	800683c <BSP_PB_Init+0xfc>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80067c6:	4b23      	ldr	r3, [pc, #140]	; (8006854 <BSP_PB_Init+0x114>)
 80067c8:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init((GPIO_TypeDef*) BUTTON_PORT[Button], &gpio_init_structure);
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	4a20      	ldr	r2, [pc, #128]	; (8006850 <BSP_PB_Init+0x110>)
 80067ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d2:	f107 0214 	add.w	r2, r7, #20
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f003 fdcd 	bl	800a378 <HAL_GPIO_Init>

    (void) HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80067de:	79fa      	ldrb	r2, [r7, #7]
 80067e0:	4613      	mov	r3, r2
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4a1b      	ldr	r2, [pc, #108]	; (8006858 <BSP_PB_Init+0x118>)
 80067ea:	441a      	add	r2, r3
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	491b      	ldr	r1, [pc, #108]	; (800685c <BSP_PB_Init+0x11c>)
 80067f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80067f4:	4619      	mov	r1, r3
 80067f6:	4610      	mov	r0, r2
 80067f8:	f003 fd61 	bl	800a2be <HAL_EXTI_GetHandle>
    (void) HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, BUTTON_CALLBACK[Button]);
 80067fc:	79fa      	ldrb	r2, [r7, #7]
 80067fe:	4613      	mov	r3, r2
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4a14      	ldr	r2, [pc, #80]	; (8006858 <BSP_PB_Init+0x118>)
 8006808:	1898      	adds	r0, r3, r2
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	4a14      	ldr	r2, [pc, #80]	; (8006860 <BSP_PB_Init+0x120>)
 800680e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006812:	461a      	mov	r2, r3
 8006814:	2100      	movs	r1, #0
 8006816:	f003 fd26 	bl	800a266 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BUTTON_PRIO[Button], 0x00);
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	4a11      	ldr	r2, [pc, #68]	; (8006864 <BSP_PB_Init+0x124>)
 800681e:	56d0      	ldrsb	r0, [r2, r3]
 8006820:	79fb      	ldrb	r3, [r7, #7]
 8006822:	4a11      	ldr	r2, [pc, #68]	; (8006868 <BSP_PB_Init+0x128>)
 8006824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006828:	2200      	movs	r2, #0
 800682a:	4619      	mov	r1, r3
 800682c:	f001 fca9 	bl	8008182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	4a0c      	ldr	r2, [pc, #48]	; (8006864 <BSP_PB_Init+0x124>)
 8006834:	56d3      	ldrsb	r3, [r2, r3]
 8006836:	4618      	mov	r0, r3
 8006838:	f001 fcbd 	bl	80081b6 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3728      	adds	r7, #40	; 0x28
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	46020c00 	.word	0x46020c00
 800684c:	0801f8a4 	.word	0x0801f8a4
 8006850:	20000068 	.word	0x20000068
 8006854:	10110000 	.word	0x10110000
 8006858:	20000070 	.word	0x20000070
 800685c:	0801f8bc 	.word	0x0801f8bc
 8006860:	0801f8ac 	.word	0x0801f8ac
 8006864:	0801f8a8 	.word	0x0801f8a8
 8006868:	0801f8b4 	.word	0x0801f8b4

0800686c <BSP_PB_GetState>:
 * @param  Button: Specifies the Button to be checked.
 *   This parameter should be: BUTTON_USER
 * @retval The Button GPIO pin value.
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	71fb      	strb	r3, [r7, #7]
  return (int32_t) (HAL_GPIO_ReadPin((GPIO_TypeDef*) BUTTON_PORT[Button], BUTTON_PIN[Button]));
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	4a07      	ldr	r2, [pc, #28]	; (8006898 <BSP_PB_GetState+0x2c>)
 800687a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	4906      	ldr	r1, [pc, #24]	; (800689c <BSP_PB_GetState+0x30>)
 8006882:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f004 f82b 	bl	800a8e4 <HAL_GPIO_ReadPin>
 800688e:	4603      	mov	r3, r0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20000068 	.word	0x20000068
 800689c:	0801f8a4 	.word	0x0801f8a4

080068a0 <BUTTON_USER_EXTI_Callback>:
/**
 * @brief  User EXTI line detection callbacks.
 * @retval None
 */
static void BUTTON_USER_EXTI_Callback(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80068a4:	2000      	movs	r0, #0
 80068a6:	f7fb feff 	bl	80026a8 <BSP_PB_Callback>
}
 80068aa:	bf00      	nop
 80068ac:	bd80      	pop	{r7, pc}

080068ae <BUTTON_PWR_EXTI_Callback>:
/**
 * @brief  Pwr EXTI line detection callbacks.
 * @retval None
 */
static void BUTTON_PWR_EXTI_Callback(void)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_PWR);
 80068b2:	2001      	movs	r0, #1
 80068b4:	f7fb fef8 	bl	80026a8 <BSP_PB_Callback>
}
 80068b8:	bf00      	nop
 80068ba:	bd80      	pop	{r7, pc}

080068bc <BSP_LED_Init>:
 *          This parameter can be one of the following values:
 *            @arg  LED1
 * @retval None
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t )Led);
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10f      	bne.n	80068ec <BSP_LED_Init+0x30>
 80068cc:	4b1c      	ldr	r3, [pc, #112]	; (8006940 <BSP_LED_Init+0x84>)
 80068ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068d2:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <BSP_LED_Init+0x84>)
 80068d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80068dc:	4b18      	ldr	r3, [pc, #96]	; (8006940 <BSP_LED_Init+0x84>)
 80068de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	e00e      	b.n	800690a <BSP_LED_Init+0x4e>
 80068ec:	4b14      	ldr	r3, [pc, #80]	; (8006940 <BSP_LED_Init+0x84>)
 80068ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068f2:	4a13      	ldr	r2, [pc, #76]	; (8006940 <BSP_LED_Init+0x84>)
 80068f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80068fc:	4b10      	ldr	r3, [pc, #64]	; (8006940 <BSP_LED_Init+0x84>)
 80068fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	4a0d      	ldr	r2, [pc, #52]	; (8006944 <BSP_LED_Init+0x88>)
 800690e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006914:	2301      	movs	r3, #1
 8006916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006918:	2300      	movs	r3, #0
 800691a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800691c:	2302      	movs	r3, #2
 800691e:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	4a09      	ldr	r2, [pc, #36]	; (8006948 <BSP_LED_Init+0x8c>)
 8006924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006928:	f107 0214 	add.w	r2, r7, #20
 800692c:	4611      	mov	r1, r2
 800692e:	4618      	mov	r0, r3
 8006930:	f003 fd22 	bl	800a378 <HAL_GPIO_Init>

  return BSP_ERROR_NONE;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3728      	adds	r7, #40	; 0x28
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	46020c00 	.word	0x46020c00
 8006944:	0801f8c4 	.word	0x0801f8c4
 8006948:	20000088 	.word	0x20000088

0800694c <BSP_LED_On>:
 *            @arg  LED1
 *            @arg  LED2
 * @retval None
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	4a07      	ldr	r2, [pc, #28]	; (8006978 <BSP_LED_On+0x2c>)
 800695a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	4a06      	ldr	r2, [pc, #24]	; (800697c <BSP_LED_On+0x30>)
 8006962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006966:	2201      	movs	r2, #1
 8006968:	4619      	mov	r1, r3
 800696a:	f003 ffd3 	bl	800a914 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20000088 	.word	0x20000088
 800697c:	0801f8c4 	.word	0x0801f8c4

08006980 <BSP_LED_Off>:
 *            @arg  LED1
 *            @arg  LED2
 * @retval None
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	4a07      	ldr	r2, [pc, #28]	; (80069ac <BSP_LED_Off+0x2c>)
 800698e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	4a06      	ldr	r2, [pc, #24]	; (80069b0 <BSP_LED_Off+0x30>)
 8006996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800699a:	2200      	movs	r2, #0
 800699c:	4619      	mov	r1, r3
 800699e:	f003 ffb9 	bl	800a914 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000088 	.word	0x20000088
 80069b0:	0801f8c4 	.word	0x0801f8c4

080069b4 <Sensor_IO_SPI_CS_Init_All>:
 * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
 * @param  None
 * @retval HAL_StatusTypeDef HAL Status
 */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08a      	sub	sp, #40	; 0x28
 80069b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_IIS2DLPC_CS_GPIO_CLK_ENABLE();
 80069ba:	4b4e      	ldr	r3, [pc, #312]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80069bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069c0:	4a4c      	ldr	r2, [pc, #304]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80069c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80069ca:	4b4a      	ldr	r3, [pc, #296]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80069cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	693b      	ldr	r3, [r7, #16]
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 80069d8:	4b46      	ldr	r3, [pc, #280]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80069da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069de:	4a45      	ldr	r2, [pc, #276]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80069e0:	f043 0320 	orr.w	r3, r3, #32
 80069e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80069e8:	4b42      	ldr	r3, [pc, #264]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80069ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	68fb      	ldr	r3, [r7, #12]
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 80069f6:	4b3f      	ldr	r3, [pc, #252]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80069f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069fc:	4a3d      	ldr	r2, [pc, #244]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80069fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a06:	4b3b      	ldr	r3, [pc, #236]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a10:	60bb      	str	r3, [r7, #8]
 8006a12:	68bb      	ldr	r3, [r7, #8]
  BSP_IIS2ICLX_CS_GPIO_CLK_ENABLE();
 8006a14:	4b37      	ldr	r3, [pc, #220]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a1a:	4a36      	ldr	r2, [pc, #216]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a24:	4b33      	ldr	r3, [pc, #204]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2e:	607b      	str	r3, [r7, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
  BSP_EXT_SPI3_CS_GPIO_CLK_ENABLE();
 8006a32:	4b30      	ldr	r3, [pc, #192]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a38:	4a2e      	ldr	r2, [pc, #184]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a42:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(BSP_IIS2DLPC_CS_PORT, BSP_IIS2DLPC_CS_PIN, GPIO_PIN_SET);
 8006a50:	2201      	movs	r2, #1
 8006a52:	2140      	movs	r1, #64	; 0x40
 8006a54:	4828      	ldr	r0, [pc, #160]	; (8006af8 <Sensor_IO_SPI_CS_Init_All+0x144>)
 8006a56:	f003 ff5d 	bl	800a914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a60:	4826      	ldr	r0, [pc, #152]	; (8006afc <Sensor_IO_SPI_CS_Init_All+0x148>)
 8006a62:	f003 ff57 	bl	800a914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006a66:	2201      	movs	r2, #1
 8006a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a6c:	4822      	ldr	r0, [pc, #136]	; (8006af8 <Sensor_IO_SPI_CS_Init_All+0x144>)
 8006a6e:	f003 ff51 	bl	800a914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_IIS2ICLX_CS_PORT, BSP_IIS2ICLX_CS_PIN, GPIO_PIN_SET);
 8006a72:	2201      	movs	r2, #1
 8006a74:	2180      	movs	r1, #128	; 0x80
 8006a76:	4822      	ldr	r0, [pc, #136]	; (8006b00 <Sensor_IO_SPI_CS_Init_All+0x14c>)
 8006a78:	f003 ff4c 	bl	800a914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_EXT_SPI3_CS_PORT, BSP_EXT_SPI3_CS_PIN, GPIO_PIN_SET);
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a82:	4820      	ldr	r0, [pc, #128]	; (8006b04 <Sensor_IO_SPI_CS_Init_All+0x150>)
 8006a84:	f003 ff46 	bl	800a914 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a90:	2301      	movs	r3, #1
 8006a92:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Pin = BSP_IIS2DLPC_CS_PIN;
 8006a94:	2340      	movs	r3, #64	; 0x40
 8006a96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_IIS2DLPC_CS_PORT, &GPIO_InitStruct);
 8006a98:	f107 0314 	add.w	r3, r7, #20
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4816      	ldr	r0, [pc, #88]	; (8006af8 <Sensor_IO_SPI_CS_Init_All+0x144>)
 8006aa0:	f003 fc6a 	bl	800a378 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8006aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8006aaa:	f107 0314 	add.w	r3, r7, #20
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4812      	ldr	r0, [pc, #72]	; (8006afc <Sensor_IO_SPI_CS_Init_All+0x148>)
 8006ab2:	f003 fc61 	bl	800a378 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8006ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8006abc:	f107 0314 	add.w	r3, r7, #20
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	480d      	ldr	r0, [pc, #52]	; (8006af8 <Sensor_IO_SPI_CS_Init_All+0x144>)
 8006ac4:	f003 fc58 	bl	800a378 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_IIS2ICLX_CS_PIN;
 8006ac8:	2380      	movs	r3, #128	; 0x80
 8006aca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_IIS2ICLX_CS_PORT, &GPIO_InitStruct);
 8006acc:	f107 0314 	add.w	r3, r7, #20
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	480b      	ldr	r0, [pc, #44]	; (8006b00 <Sensor_IO_SPI_CS_Init_All+0x14c>)
 8006ad4:	f003 fc50 	bl	800a378 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_EXT_SPI3_CS_PIN;
 8006ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006adc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_EXT_SPI3_CS_PORT, &GPIO_InitStruct);
 8006ade:	f107 0314 	add.w	r3, r7, #20
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4807      	ldr	r0, [pc, #28]	; (8006b04 <Sensor_IO_SPI_CS_Init_All+0x150>)
 8006ae6:	f003 fc47 	bl	800a378 <HAL_GPIO_Init>

  return 0;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3728      	adds	r7, #40	; 0x28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	46020c00 	.word	0x46020c00
 8006af8:	42021c00 	.word	0x42021c00
 8006afc:	42021400 	.word	0x42021400
 8006b00:	42022000 	.word	0x42022000
 8006b04:	42020000 	.word	0x42020000

08006b08 <BSP_SPI2_Init>:
 * @brief  Initializes SPI HAL.
 * @retval None
 * @retval BSP status
 */
int32_t BSP_SPI2_Init(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	607b      	str	r3, [r7, #4]

  hbusspi2.Instance = SPI2;
 8006b12:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <BSP_SPI2_Init+0x50>)
 8006b14:	4a11      	ldr	r2, [pc, #68]	; (8006b5c <BSP_SPI2_Init+0x54>)
 8006b16:	601a      	str	r2, [r3, #0]
  if(HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET)
 8006b18:	480f      	ldr	r0, [pc, #60]	; (8006b58 <BSP_SPI2_Init+0x50>)
 8006b1a:	f00b fa1b 	bl	8011f54 <HAL_SPI_GetState>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10b      	bne.n	8006b3c <BSP_SPI2_Init+0x34>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI2_MspInit(&hbusspi2);
 8006b24:	480c      	ldr	r0, [pc, #48]	; (8006b58 <BSP_SPI2_Init+0x50>)
 8006b26:	f000 f8ed 	bl	8006d04 <SPI2_MspInit>
      }
    }
#endif   

    /* Init the SPI */
    if(MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8006b2a:	480b      	ldr	r0, [pc, #44]	; (8006b58 <BSP_SPI2_Init+0x50>)
 8006b2c:	f000 f870 	bl	8006c10 <MX_SPI2_Init>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <BSP_SPI2_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8006b36:	f06f 0307 	mvn.w	r3, #7
 8006b3a:	607b      	str	r3, [r7, #4]
    }
  }

  __HAL_SPI_ENABLE(&hbusspi2);
 8006b3c:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <BSP_SPI2_Init+0x50>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <BSP_SPI2_Init+0x50>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]

  return ret;
 8006b4c:	687b      	ldr	r3, [r7, #4]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20002bfc 	.word	0x20002bfc
 8006b5c:	40003800 	.word	0x40003800

08006b60 <BSP_SPI2_DeInit>:
 * @brief  DeInitializes SPI HAL.
 * @retval None
 * @retval BSP status
 */
int32_t BSP_SPI2_DeInit(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8006b66:	f06f 0307 	mvn.w	r3, #7
 8006b6a:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
  SPI2_MspDeInit(&hbusspi2);
 8006b6c:	4807      	ldr	r0, [pc, #28]	; (8006b8c <BSP_SPI2_DeInit+0x2c>)
 8006b6e:	f000 f925 	bl	8006dbc <SPI2_MspDeInit>
#endif  

  if(HAL_SPI_DeInit(&hbusspi2) == HAL_OK)
 8006b72:	4806      	ldr	r0, [pc, #24]	; (8006b8c <BSP_SPI2_DeInit+0x2c>)
 8006b74:	f00a f9b0 	bl	8010ed8 <HAL_SPI_DeInit>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <BSP_SPI2_DeInit+0x22>
  {
    ret = BSP_ERROR_NONE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8006b82:	687b      	ldr	r3, [r7, #4]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20002bfc 	.word	0x20002bfc

08006b90 <BSP_SPI2_Send>:
 * @param  pData: Data
 * @param  len: Length of data in byte
 * @retval BSP status
 */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t len)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006b9c:	f06f 0305 	mvn.w	r3, #5
 8006ba0:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8006ba2:	887a      	ldrh	r2, [r7, #2]
 8006ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	4806      	ldr	r0, [pc, #24]	; (8006bc4 <BSP_SPI2_Send+0x34>)
 8006bac:	f00a f9be 	bl	8010f2c <HAL_SPI_Transmit>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <BSP_SPI2_Send+0x2a>
  {
    ret = BSP_ERROR_NONE;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8006bba:	68fb      	ldr	r3, [r7, #12]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20002bfc 	.word	0x20002bfc

08006bc8 <BSP_SPI2_Recv>:
 * @param  pData: Data
 * @param  len: Length of data in byte
 * @retval BSP status
 */
int32_t BSP_SPI2_Recv(uint8_t *pData, uint16_t len)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006bd4:	f06f 0305 	mvn.w	r3, #5
 8006bd8:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8006bda:	887a      	ldrh	r2, [r7, #2]
 8006bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	4806      	ldr	r0, [pc, #24]	; (8006bfc <BSP_SPI2_Recv+0x34>)
 8006be4:	f00a fbb4 	bl	8011350 <HAL_SPI_Receive>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <BSP_SPI2_Recv+0x2a>
  {
    ret = BSP_ERROR_NONE;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20002bfc 	.word	0x20002bfc

08006c00 <BSP_GetTick>:
/**
 * @brief  Return system tick in ms
 * @retval Current HAL time base time stamp
 */
int32_t BSP_GetTick(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  return (int32_t) HAL_GetTick();
 8006c04:	f000 fddc 	bl	80077c0 <HAL_GetTick>
 8006c08:	4603      	mov	r3, r0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <MX_SPI2_Init>:
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4);
}

/* SPI2 init function */
__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef *hspi)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	75fb      	strb	r3, [r7, #23]

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct =
 8006c1c:	f107 0308 	add.w	r3, r7, #8
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	605a      	str	r2, [r3, #4]
 8006c26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi->Instance = SPI2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a35      	ldr	r2, [pc, #212]	; (8006d00 <MX_SPI2_Init+0xf0>)
 8006c2c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006c34:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2207      	movs	r2, #7
 8006c40:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c48:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c50:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006c58:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8006c60:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 0x7;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2207      	movs	r2, #7
 8006c78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi->Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	659a      	str	r2, [r3, #88]	; 0x58
  hspi->Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	661a      	str	r2, [r3, #96]	; 0x60
  if(HAL_SPI_Init(hspi) != HAL_OK)
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f00a f810 	bl	8010ce8 <HAL_SPI_Init>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <MX_SPI2_Init+0xc2>
  {
    ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8006cd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cda:	60fb      	str	r3, [r7, #12]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	613b      	str	r3, [r7, #16]
  if(HAL_SPIEx_SetConfigAutonomousMode(hspi, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8006ce0:	f107 0308 	add.w	r3, r7, #8
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f00b fa45 	bl	8012176 <HAL_SPIEx_SetConfigAutonomousMode>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <MX_SPI2_Init+0xe6>
  {
    ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40003800 	.word	0x40003800

08006d04 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef *spiHandle)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  UNUSED(spiHandle);
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable Peripheral clock */
  __HAL_RCC_SPI2_CLK_ENABLE();
 8006d0c:	4b28      	ldr	r3, [pc, #160]	; (8006db0 <SPI2_MspInit+0xac>)
 8006d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d12:	4a27      	ldr	r2, [pc, #156]	; (8006db0 <SPI2_MspInit+0xac>)
 8006d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d18:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006d1c:	4b24      	ldr	r3, [pc, #144]	; (8006db0 <SPI2_MspInit+0xac>)
 8006d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d26:	613b      	str	r3, [r7, #16]
 8006d28:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006d2a:	4b21      	ldr	r3, [pc, #132]	; (8006db0 <SPI2_MspInit+0xac>)
 8006d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d30:	4a1f      	ldr	r2, [pc, #124]	; (8006db0 <SPI2_MspInit+0xac>)
 8006d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d3a:	4b1d      	ldr	r3, [pc, #116]	; (8006db0 <SPI2_MspInit+0xac>)
 8006d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d48:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <SPI2_MspInit+0xac>)
 8006d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d4e:	4a18      	ldr	r2, [pc, #96]	; (8006db0 <SPI2_MspInit+0xac>)
 8006d50:	f043 0308 	orr.w	r3, r3, #8
 8006d54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d58:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <SPI2_MspInit+0xac>)
 8006d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	60bb      	str	r3, [r7, #8]
 8006d64:	68bb      	ldr	r3, [r7, #8]
   PI1     ------> SPI2_SCK
   PD3     ------> SPI2_MISO
   PI3     ------> SPI2_MOSI
   */

  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 8006d66:	230a      	movs	r3, #10
 8006d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d72:	2303      	movs	r3, #3
 8006d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006d76:	2305      	movs	r3, #5
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006d7a:	f107 0314 	add.w	r3, r7, #20
 8006d7e:	4619      	mov	r1, r3
 8006d80:	480c      	ldr	r0, [pc, #48]	; (8006db4 <SPI2_MspInit+0xb0>)
 8006d82:	f003 faf9 	bl	800a378 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006d86:	2308      	movs	r3, #8
 8006d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d92:	2303      	movs	r3, #3
 8006d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006d96:	2305      	movs	r3, #5
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d9a:	f107 0314 	add.w	r3, r7, #20
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4805      	ldr	r0, [pc, #20]	; (8006db8 <SPI2_MspInit+0xb4>)
 8006da2:	f003 fae9 	bl	800a378 <HAL_GPIO_Init>
}
 8006da6:	bf00      	nop
 8006da8:	3728      	adds	r7, #40	; 0x28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	46020c00 	.word	0x46020c00
 8006db4:	42022000 	.word	0x42022000
 8006db8:	42020c00 	.word	0x42020c00

08006dbc <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef *spiHandle)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(spiHandle);

  /* Peripheral clock disable */
  __HAL_RCC_SPI2_CLK_DISABLE();
 8006dc4:	4b09      	ldr	r3, [pc, #36]	; (8006dec <SPI2_MspDeInit+0x30>)
 8006dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dca:	4a08      	ldr	r2, [pc, #32]	; (8006dec <SPI2_MspDeInit+0x30>)
 8006dcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dd0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  /**SPI2 GPIO Configuration
   PI1     ------> SPI2_SCK
   PD3     ------> SPI2_MISO
   PI3     ------> SPI2_MOSI
   */
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_1 | GPIO_PIN_3);
 8006dd4:	210a      	movs	r1, #10
 8006dd6:	4806      	ldr	r0, [pc, #24]	; (8006df0 <SPI2_MspDeInit+0x34>)
 8006dd8:	f003 fca6 	bl	800a728 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3);
 8006ddc:	2108      	movs	r1, #8
 8006dde:	4805      	ldr	r0, [pc, #20]	; (8006df4 <SPI2_MspDeInit+0x38>)
 8006de0:	f003 fca2 	bl	800a728 <HAL_GPIO_DeInit>
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	46020c00 	.word	0x46020c00
 8006df0:	42022000 	.word	0x42022000
 8006df4:	42020c00 	.word	0x42020c00

08006df8 <BSP_MOTION_SENSOR_Init>:
 * @brief  Initializes the motion sensors
 * @param  Instance Motion sensor instance
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08e      	sub	sp, #56	; 0x38
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8006e06:	2301      	movs	r3, #1
 8006e08:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  MOTION_SENSOR_Capabilities_t cap;

  switch(Instance)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d131      	bne.n	8006e78 <BSP_MOTION_SENSOR_Init+0x80>
      break;
#endif

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8006e14:	6838      	ldr	r0, [r7, #0]
 8006e16:	f000 f945 	bl	80070a4 <ISM330DHCX_0_Probe>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <BSP_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 8006e20:	f04f 33ff 	mov.w	r3, #4294967295
 8006e24:	e064      	b.n	8006ef0 <BSP_MOTION_SENSOR_Init+0xf8>
      }
      if(MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void*) &cap) != BSP_ERROR_NONE)
 8006e26:	4a34      	ldr	r2, [pc, #208]	; (8006ef8 <BSP_MOTION_SENSOR_Init+0x100>)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	4932      	ldr	r1, [pc, #200]	; (8006efc <BSP_MOTION_SENSOR_Init+0x104>)
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006e38:	f107 010c 	add.w	r1, r7, #12
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4798      	blx	r3
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <BSP_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006e46:	f06f 0306 	mvn.w	r3, #6
 8006e4a:	e051      	b.n	8006ef0 <BSP_MOTION_SENSOR_Init+0xf8>
      }
      if(cap.Acc == 1U)
 8006e4c:	7b3b      	ldrb	r3, [r7, #12]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d103      	bne.n	8006e5a <BSP_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	f043 0302 	orr.w	r3, r3, #2
 8006e58:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if(cap.Gyro == 1U)
 8006e5a:	7b7b      	ldrb	r3, [r7, #13]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d103      	bne.n	8006e68 <BSP_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	f043 0301 	orr.w	r3, r3, #1
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if(cap.Magneto == 1U)
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d108      	bne.n	8006e80 <BSP_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	f043 0304 	orr.w	r3, r3, #4
 8006e74:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006e76:	e003      	b.n	8006e80 <BSP_MOTION_SENSOR_Init+0x88>
        component_functions |= MOTION_MAGNETO;
      }
      break;
#endif      
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8006e78:	f06f 0301 	mvn.w	r3, #1
 8006e7c:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006e7e:	e000      	b.n	8006e82 <BSP_MOTION_SENSOR_Init+0x8a>
      break;
 8006e80:	bf00      	nop
  }

  if(ret != BSP_ERROR_NONE)
 8006e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <BSP_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 8006e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8a:	e031      	b.n	8006ef0 <BSP_MOTION_SENSOR_Init+0xf8>
  }

  for(i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e90:	e02a      	b.n	8006ee8 <BSP_MOTION_SENSOR_Init+0xf0>
  {
    if(((Functions & function) == function) && ((component_functions & function) == function))
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	4013      	ands	r3, r2
 8006e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d11e      	bne.n	8006edc <BSP_MOTION_SENSOR_Init+0xe4>
 8006e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d118      	bne.n	8006edc <BSP_MOTION_SENSOR_Init+0xe4>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006eaa:	4a15      	ldr	r2, [pc, #84]	; (8006f00 <BSP_MOTION_SENSOR_Init+0x108>)
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006eb2:	4814      	ldr	r0, [pc, #80]	; (8006f04 <BSP_MOTION_SENSOR_Init+0x10c>)
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	490d      	ldr	r1, [pc, #52]	; (8006efc <BSP_MOTION_SENSOR_Init+0x104>)
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006ecc:	4610      	mov	r0, r2
 8006ece:	4798      	blx	r3
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <BSP_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8006ed6:	f06f 0304 	mvn.w	r3, #4
 8006eda:	e009      	b.n	8006ef0 <BSP_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	633b      	str	r3, [r7, #48]	; 0x30
  for(i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d9d1      	bls.n	8006e92 <BSP_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 8006eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3738      	adds	r7, #56	; 0x38
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20002c9c 	.word	0x20002c9c
 8006efc:	20002c8c 	.word	0x20002c8c
 8006f00:	20000090 	.word	0x20000090
 8006f04:	20002c90 	.word	0x20002c90

08006f08 <BSP_MOTION_SENSOR_GetSensitivity>:
 *         - MOTION_MAGNETO
 * @param  Sensitivity pointer to sensitivity read value
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float *Sensitivity)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= MOTION_INSTANCES_NBR)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <BSP_MOTION_SENSOR_GetSensitivity+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006f1a:	f06f 0301 	mvn.w	r3, #1
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	e029      	b.n	8006f76 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
  }
  else
  {
    if((MotionCtx[Instance].Functions & Function) == Function)
 8006f22:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <BSP_MOTION_SENSOR_GetSensitivity+0x78>)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d11d      	bne.n	8006f70 <BSP_MOTION_SENSOR_GetSensitivity+0x68>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance], Sensitivity) != BSP_ERROR_NONE)
 8006f34:	4a13      	ldr	r2, [pc, #76]	; (8006f84 <BSP_MOTION_SENSOR_GetSensitivity+0x7c>)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006f3c:	4812      	ldr	r0, [pc, #72]	; (8006f88 <BSP_MOTION_SENSOR_GetSensitivity+0x80>)
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4613      	mov	r3, r2
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	4413      	add	r3, r2
 8006f46:	440b      	add	r3, r1
 8006f48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	490f      	ldr	r1, [pc, #60]	; (8006f8c <BSP_MOTION_SENSOR_GetSensitivity+0x84>)
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4610      	mov	r0, r2
 8006f5a:	4798      	blx	r3
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <BSP_MOTION_SENSOR_GetSensitivity+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006f62:	f06f 0304 	mvn.w	r3, #4
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	e005      	b.n	8006f76 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	e002      	b.n	8006f76 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006f70:	f06f 0301 	mvn.w	r3, #1
 8006f74:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006f76:	697b      	ldr	r3, [r7, #20]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20002ca0 	.word	0x20002ca0
 8006f84:	20000090 	.word	0x20000090
 8006f88:	20002c90 	.word	0x20002c90
 8006f8c:	20002c8c 	.word	0x20002c8c

08006f90 <BSP_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if(Instance >= MOTION_INSTANCES_NBR)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <BSP_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006fa4:	f06f 0301 	mvn.w	r3, #1
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e02a      	b.n	8007002 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if((MotionCtx[Instance].Functions & Function) == Function)
 8006fac:	4a17      	ldr	r2, [pc, #92]	; (800700c <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d11e      	bne.n	8006ffc <BSP_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8006fbe:	4a14      	ldr	r2, [pc, #80]	; (8007010 <BSP_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006fc6:	4813      	ldr	r0, [pc, #76]	; (8007014 <BSP_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	4413      	add	r3, r2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	490f      	ldr	r1, [pc, #60]	; (8007018 <BSP_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006fe0:	ed97 0a01 	vldr	s0, [r7, #4]
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <BSP_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006fee:	f06f 0304 	mvn.w	r3, #4
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	e005      	b.n	8007002 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	e002      	b.n	8007002 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006ffc:	f06f 0301 	mvn.w	r3, #1
 8007000:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007002:	697b      	ldr	r3, [r7, #20]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20002ca0 	.word	0x20002ca0
 8007010:	20000090 	.word	0x20000090
 8007014:	20002c90 	.word	0x20002c90
 8007018:	20002c8c 	.word	0x20002c8c

0800701c <BSP_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= MOTION_INSTANCES_NBR)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <BSP_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800702e:	f06f 0301 	mvn.w	r3, #1
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	e029      	b.n	800708a <BSP_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if((MotionCtx[Instance].Functions & Function) == Function)
 8007036:	4a17      	ldr	r2, [pc, #92]	; (8007094 <BSP_MOTION_SENSOR_SetFullScale+0x78>)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4013      	ands	r3, r2
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	429a      	cmp	r2, r3
 8007046:	d11d      	bne.n	8007084 <BSP_MOTION_SENSOR_SetFullScale+0x68>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 8007048:	4a13      	ldr	r2, [pc, #76]	; (8007098 <BSP_MOTION_SENSOR_SetFullScale+0x7c>)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007050:	4812      	ldr	r0, [pc, #72]	; (800709c <BSP_MOTION_SENSOR_SetFullScale+0x80>)
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4613      	mov	r3, r2
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	4413      	add	r3, r2
 800705a:	440b      	add	r3, r1
 800705c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	490f      	ldr	r1, [pc, #60]	; (80070a0 <BSP_MOTION_SENSOR_SetFullScale+0x84>)
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <BSP_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007076:	f06f 0304 	mvn.w	r3, #4
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e005      	b.n	800708a <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	e002      	b.n	800708a <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007084:	f06f 0301 	mvn.w	r3, #1
 8007088:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800708a:	697b      	ldr	r3, [r7, #20]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20002ca0 	.word	0x20002ca0
 8007098:	20000090 	.word	0x20000090
 800709c:	20002c90 	.word	0x20002c90
 80070a0:	20002c8c 	.word	0x20002c8c

080070a4 <ISM330DHCX_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b092      	sub	sp, #72	; 0x48
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t io_ctx;
  uint8_t id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t cap;
  int32_t ret = BSP_ERROR_NONE;
 80070ac:	2300      	movs	r3, #0
 80070ae:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 80070b0:	2301      	movs	r3, #1
 80070b2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address = 0x0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init = BSP_ISM330DHCX_Init;
 80070ba:	4b47      	ldr	r3, [pc, #284]	; (80071d8 <ISM330DHCX_0_Probe+0x134>)
 80070bc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit = BSP_ISM330DHCX_DeInit;
 80070be:	4b47      	ldr	r3, [pc, #284]	; (80071dc <ISM330DHCX_0_Probe+0x138>)
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg = BSP_ISM330DHCX_ReadReg;
 80070c2:	4b47      	ldr	r3, [pc, #284]	; (80071e0 <ISM330DHCX_0_Probe+0x13c>)
 80070c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg = BSP_ISM330DHCX_WriteReg;
 80070c6:	4b47      	ldr	r3, [pc, #284]	; (80071e4 <ISM330DHCX_0_Probe+0x140>)
 80070c8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick = BSP_GetTick;
 80070ca:	4b47      	ldr	r3, [pc, #284]	; (80071e8 <ISM330DHCX_0_Probe+0x144>)
 80070cc:	643b      	str	r3, [r7, #64]	; 0x40

  if(ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80070ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070d2:	4619      	mov	r1, r3
 80070d4:	4845      	ldr	r0, [pc, #276]	; (80071ec <ISM330DHCX_0_Probe+0x148>)
 80070d6:	f7fd f8f5 	bl	80042c4 <ISM330DHCX_RegisterBusIO>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80070e0:	f06f 0306 	mvn.w	r3, #6
 80070e4:	647b      	str	r3, [r7, #68]	; 0x44
 80070e6:	e071      	b.n	80071cc <ISM330DHCX_0_Probe+0x128>
  }
  else if(ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 80070e8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80070ec:	4619      	mov	r1, r3
 80070ee:	483f      	ldr	r0, [pc, #252]	; (80071ec <ISM330DHCX_0_Probe+0x148>)
 80070f0:	f7fd fa02 	bl	80044f8 <ISM330DHCX_ReadID>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80070fa:	f06f 0306 	mvn.w	r3, #6
 80070fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007100:	e064      	b.n	80071cc <ISM330DHCX_0_Probe+0x128>
  }
  else if(id != ISM330DHCX_ID)
 8007102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007106:	2b6b      	cmp	r3, #107	; 0x6b
 8007108:	d003      	beq.n	8007112 <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800710a:	f06f 0306 	mvn.w	r3, #6
 800710e:	647b      	str	r3, [r7, #68]	; 0x44
 8007110:	e05c      	b.n	80071cc <ISM330DHCX_0_Probe+0x128>
  }
  else
  {
    (void) ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8007112:	f107 0308 	add.w	r3, r7, #8
 8007116:	4619      	mov	r1, r3
 8007118:	4834      	ldr	r0, [pc, #208]	; (80071ec <ISM330DHCX_0_Probe+0x148>)
 800711a:	f7fd fa03 	bl	8004524 <ISM330DHCX_GetCapabilities>
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t) cap.Gyro) | ((uint32_t) cap.Acc << 1) | ((uint32_t) cap.Magneto << 2);
 800711e:	7a7b      	ldrb	r3, [r7, #9]
 8007120:	461a      	mov	r2, r3
 8007122:	7a3b      	ldrb	r3, [r7, #8]
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	431a      	orrs	r2, r3
 8007128:	7abb      	ldrb	r3, [r7, #10]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4313      	orrs	r3, r2
 800712e:	4a30      	ldr	r2, [pc, #192]	; (80071f0 <ISM330DHCX_0_Probe+0x14c>)
 8007130:	6013      	str	r3, [r2, #0]

    MotionCompObj[ISM330DHCX_0] = &ism330dhcx_obj_0;
 8007132:	4b30      	ldr	r3, [pc, #192]	; (80071f4 <ISM330DHCX_0_Probe+0x150>)
 8007134:	4a2d      	ldr	r2, [pc, #180]	; (80071ec <ISM330DHCX_0_Probe+0x148>)
 8007136:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t*) (void*) &ISM330DHCX_COMMON_Driver;
 8007138:	4b2f      	ldr	r3, [pc, #188]	; (80071f8 <ISM330DHCX_0_Probe+0x154>)
 800713a:	4a30      	ldr	r2, [pc, #192]	; (80071fc <ISM330DHCX_0_Probe+0x158>)
 800713c:	601a      	str	r2, [r3, #0]

    if(((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d018      	beq.n	800717a <ISM330DHCX_0_Probe+0xd6>
 8007148:	7a3b      	ldrb	r3, [r7, #8]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d115      	bne.n	800717a <ISM330DHCX_0_Probe+0xd6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t*) (void*) &ISM330DHCX_ACC_Driver;
 800714e:	4b2c      	ldr	r3, [pc, #176]	; (8007200 <ISM330DHCX_0_Probe+0x15c>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	4a2c      	ldr	r2, [pc, #176]	; (8007204 <ISM330DHCX_0_Probe+0x160>)
 8007154:	492c      	ldr	r1, [pc, #176]	; (8007208 <ISM330DHCX_0_Probe+0x164>)
 8007156:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if(MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 800715a:	4b27      	ldr	r3, [pc, #156]	; (80071f8 <ISM330DHCX_0_Probe+0x154>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a24      	ldr	r2, [pc, #144]	; (80071f4 <ISM330DHCX_0_Probe+0x150>)
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <ISM330DHCX_0_Probe+0xd2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800716e:	f06f 0304 	mvn.w	r3, #4
 8007172:	647b      	str	r3, [r7, #68]	; 0x44
 8007174:	e001      	b.n	800717a <ISM330DHCX_0_Probe+0xd6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007176:	2300      	movs	r3, #0
 8007178:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }

    if(((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d018      	beq.n	80071b6 <ISM330DHCX_0_Probe+0x112>
 8007184:	7a7b      	ldrb	r3, [r7, #9]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d115      	bne.n	80071b6 <ISM330DHCX_0_Probe+0x112>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t*) (void*) &ISM330DHCX_GYRO_Driver;
 800718a:	4b1d      	ldr	r3, [pc, #116]	; (8007200 <ISM330DHCX_0_Probe+0x15c>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	4a1d      	ldr	r2, [pc, #116]	; (8007204 <ISM330DHCX_0_Probe+0x160>)
 8007190:	491e      	ldr	r1, [pc, #120]	; (800720c <ISM330DHCX_0_Probe+0x168>)
 8007192:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if(MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8007196:	4b18      	ldr	r3, [pc, #96]	; (80071f8 <ISM330DHCX_0_Probe+0x154>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <ISM330DHCX_0_Probe+0x150>)
 800719e:	6812      	ldr	r2, [r2, #0]
 80071a0:	4610      	mov	r0, r2
 80071a2:	4798      	blx	r3
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <ISM330DHCX_0_Probe+0x10e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80071aa:	f06f 0304 	mvn.w	r3, #4
 80071ae:	647b      	str	r3, [r7, #68]	; 0x44
 80071b0:	e001      	b.n	80071b6 <ISM330DHCX_0_Probe+0x112>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80071b2:	2300      	movs	r3, #0
 80071b4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if(((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 0U))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <ISM330DHCX_0_Probe+0x128>
 80071c0:	7abb      	ldrb	r3, [r7, #10]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <ISM330DHCX_0_Probe+0x128>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80071c6:	f06f 0304 	mvn.w	r3, #4
 80071ca:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 80071cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3748      	adds	r7, #72	; 0x48
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	08007211 	.word	0x08007211
 80071dc:	08007329 	.word	0x08007329
 80071e0:	080073b5 	.word	0x080073b5
 80071e4:	0800734d 	.word	0x0800734d
 80071e8:	08006c01 	.word	0x08006c01
 80071ec:	20002ca4 	.word	0x20002ca4
 80071f0:	20002ca0 	.word	0x20002ca0
 80071f4:	20002c8c 	.word	0x20002c8c
 80071f8:	20002c9c 	.word	0x20002c9c
 80071fc:	20000010 	.word	0x20000010
 8007200:	20000090 	.word	0x20000090
 8007204:	20002c90 	.word	0x20002c90
 8007208:	20000020 	.word	0x20000020
 800720c:	20000044 	.word	0x20000044

08007210 <BSP_ISM330DHCX_Init>:

static int32_t BSP_ISM330DHCX_Init(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	; 0x28
 8007214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8007216:	f06f 0305 	mvn.w	r3, #5
 800721a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure ISM330DHCX INT1 pin */
  BSP_ISM330DHCX_INT1_GPIO_CLK_ENABLE();
 800721c:	4b3d      	ldr	r3, [pc, #244]	; (8007314 <BSP_ISM330DHCX_Init+0x104>)
 800721e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007222:	4a3c      	ldr	r2, [pc, #240]	; (8007314 <BSP_ISM330DHCX_Init+0x104>)
 8007224:	f043 0302 	orr.w	r3, r3, #2
 8007228:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800722c:	4b39      	ldr	r3, [pc, #228]	; (8007314 <BSP_ISM330DHCX_Init+0x104>)
 800722e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT1_PIN;
 800723a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800723e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007240:	4b35      	ldr	r3, [pc, #212]	; (8007318 <BSP_ISM330DHCX_Init+0x108>)
 8007242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007244:	2302      	movs	r3, #2
 8007246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007248:	2300      	movs	r3, #0
 800724a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT1_PORT, &GPIO_InitStruct);
 800724c:	f107 0310 	add.w	r3, r7, #16
 8007250:	4619      	mov	r1, r3
 8007252:	4832      	ldr	r0, [pc, #200]	; (800731c <BSP_ISM330DHCX_Init+0x10c>)
 8007254:	f003 f890 	bl	800a378 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  /* Enable and set EXTI Interrupt priority */
  HAL_NVIC_SetPriority(BSP_ISM330DHCX_INT1_EXTI_IRQn, BSP_ISM330DHCX_INT1_EXTI_IRQ_PP, BSP_ISM330DHCX_INT1_EXTI_IRQ_SP);
 8007258:	2200      	movs	r2, #0
 800725a:	2101      	movs	r1, #1
 800725c:	2013      	movs	r0, #19
 800725e:	f000 ff90 	bl	8008182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_ISM330DHCX_INT1_EXTI_IRQn);
 8007262:	2013      	movs	r0, #19
 8007264:	f000 ffa7 	bl	80081b6 <HAL_NVIC_EnableIRQ>

  /* Configure ISM330DHCX INT2 pin */
  BSP_ISM330DHCX_INT2_GPIO_CLK_ENABLE();
 8007268:	4b2a      	ldr	r3, [pc, #168]	; (8007314 <BSP_ISM330DHCX_Init+0x104>)
 800726a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800726e:	4a29      	ldr	r2, [pc, #164]	; (8007314 <BSP_ISM330DHCX_Init+0x104>)
 8007270:	f043 0320 	orr.w	r3, r3, #32
 8007274:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007278:	4b26      	ldr	r3, [pc, #152]	; (8007314 <BSP_ISM330DHCX_Init+0x104>)
 800727a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	60bb      	str	r3, [r7, #8]
 8007284:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT2_PIN;
 8007286:	2310      	movs	r3, #16
 8007288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800728a:	4b23      	ldr	r3, [pc, #140]	; (8007318 <BSP_ISM330DHCX_Init+0x108>)
 800728c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800728e:	2302      	movs	r3, #2
 8007290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007292:	2300      	movs	r3, #0
 8007294:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 8007296:	f107 0310 	add.w	r3, r7, #16
 800729a:	4619      	mov	r1, r3
 800729c:	4820      	ldr	r0, [pc, #128]	; (8007320 <BSP_ISM330DHCX_Init+0x110>)
 800729e:	f003 f86b 	bl	800a378 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  /* Enable and set EXTI Interrupt priority */
  HAL_NVIC_SetPriority(BSP_ISM330DHCX_INT2_EXTI_IRQn, BSP_ISM330DHCX_INT2_EXTI_IRQ_PP, BSP_ISM330DHCX_INT2_EXTI_IRQ_SP);
 80072a2:	2200      	movs	r2, #0
 80072a4:	2101      	movs	r1, #1
 80072a6:	200f      	movs	r0, #15
 80072a8:	f000 ff6b 	bl	8008182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_ISM330DHCX_INT2_EXTI_IRQn);
 80072ac:	200f      	movs	r0, #15
 80072ae:	f000 ff82 	bl	80081b6 <HAL_NVIC_EnableIRQ>

  /* Configure ISM330DHCX CS pin */
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 80072b2:	4b18      	ldr	r3, [pc, #96]	; (8007314 <BSP_ISM330DHCX_Init+0x104>)
 80072b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072b8:	4a16      	ldr	r2, [pc, #88]	; (8007314 <BSP_ISM330DHCX_Init+0x104>)
 80072ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80072c2:	4b14      	ldr	r3, [pc, #80]	; (8007314 <BSP_ISM330DHCX_Init+0x104>)
 80072c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072cc:	607b      	str	r3, [r7, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80072d0:	2201      	movs	r2, #1
 80072d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072d6:	4813      	ldr	r0, [pc, #76]	; (8007324 <BSP_ISM330DHCX_Init+0x114>)
 80072d8:	f003 fb1c 	bl	800a914 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072dc:	2302      	movs	r3, #2
 80072de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072e4:	2301      	movs	r3, #1
 80072e6:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 80072e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 80072ee:	f107 0310 	add.w	r3, r7, #16
 80072f2:	4619      	mov	r1, r3
 80072f4:	480b      	ldr	r0, [pc, #44]	; (8007324 <BSP_ISM330DHCX_Init+0x114>)
 80072f6:	f003 f83f 	bl	800a378 <HAL_GPIO_Init>

  if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 80072fa:	f7ff fc05 	bl	8006b08 <BSP_SPI2_Init>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <BSP_ISM330DHCX_Init+0xf8>
  {
    ret = BSP_ERROR_NONE;
 8007304:	2300      	movs	r3, #0
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800730a:	4618      	mov	r0, r3
 800730c:	3728      	adds	r7, #40	; 0x28
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	46020c00 	.word	0x46020c00
 8007318:	10110000 	.word	0x10110000
 800731c:	42020400 	.word	0x42020400
 8007320:	42021400 	.word	0x42021400
 8007324:	42021c00 	.word	0x42021c00

08007328 <BSP_ISM330DHCX_DeInit>:

static int32_t BSP_ISM330DHCX_DeInit(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800732e:	f06f 0305 	mvn.w	r3, #5
 8007332:	607b      	str	r3, [r7, #4]

  if(BSP_SPI2_DeInit() == BSP_ERROR_NONE)
 8007334:	f7ff fc14 	bl	8006b60 <BSP_SPI2_DeInit>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <BSP_ISM330DHCX_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800733e:	2300      	movs	r3, #0
 8007340:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8007342:	687b      	ldr	r3, [r7, #4]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <BSP_ISM330DHCX_WriteReg>:

static int32_t BSP_ISM330DHCX_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60ba      	str	r2, [r7, #8]
 8007354:	461a      	mov	r2, r3
 8007356:	4603      	mov	r3, r0
 8007358:	81fb      	strh	r3, [r7, #14]
 800735a:	460b      	mov	r3, r1
 800735c:	81bb      	strh	r3, [r7, #12]
 800735e:	4613      	mov	r3, r2
 8007360:	80fb      	strh	r3, [r7, #6]
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
 8007362:	2300      	movs	r3, #0
 8007364:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t) Reg;
 8007366:	89bb      	ldrh	r3, [r7, #12]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 800736c:	2200      	movs	r2, #0
 800736e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007372:	480f      	ldr	r0, [pc, #60]	; (80073b0 <BSP_ISM330DHCX_WriteReg+0x64>)
 8007374:	f003 face 	bl	800a914 <HAL_GPIO_WritePin>

  ret = BSP_SPI2_Send(&dataReg, 1);
 8007378:	f107 0313 	add.w	r3, r7, #19
 800737c:	2101      	movs	r1, #1
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff fc06 	bl	8006b90 <BSP_SPI2_Send>
 8007384:	6178      	str	r0, [r7, #20]

  if(ret == BSP_ERROR_NONE)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d105      	bne.n	8007398 <BSP_ISM330DHCX_WriteReg+0x4c>
  {
    ret = BSP_SPI2_Send(pdata, len);
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	4619      	mov	r1, r3
 8007390:	68b8      	ldr	r0, [r7, #8]
 8007392:	f7ff fbfd 	bl	8006b90 <BSP_SPI2_Send>
 8007396:	6178      	str	r0, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8007398:	2201      	movs	r2, #1
 800739a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800739e:	4804      	ldr	r0, [pc, #16]	; (80073b0 <BSP_ISM330DHCX_WriteReg+0x64>)
 80073a0:	f003 fab8 	bl	800a914 <HAL_GPIO_WritePin>

  return ret;
 80073a4:	697b      	ldr	r3, [r7, #20]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	42021c00 	.word	0x42021c00

080073b4 <BSP_ISM330DHCX_ReadReg>:

static int32_t BSP_ISM330DHCX_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60ba      	str	r2, [r7, #8]
 80073bc:	461a      	mov	r2, r3
 80073be:	4603      	mov	r3, r0
 80073c0:	81fb      	strh	r3, [r7, #14]
 80073c2:	460b      	mov	r3, r1
 80073c4:	81bb      	strh	r3, [r7, #12]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t) Reg;
 80073ce:	89bb      	ldrh	r3, [r7, #12]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80U;
 80073d4:	7cfb      	ldrb	r3, [r7, #19]
 80073d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 80073de:	2200      	movs	r2, #0
 80073e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073e4:	480e      	ldr	r0, [pc, #56]	; (8007420 <BSP_ISM330DHCX_ReadReg+0x6c>)
 80073e6:	f003 fa95 	bl	800a914 <HAL_GPIO_WritePin>

  ret = BSP_SPI2_Send(&dataReg, 1);
 80073ea:	f107 0313 	add.w	r3, r7, #19
 80073ee:	2101      	movs	r1, #1
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff fbcd 	bl	8006b90 <BSP_SPI2_Send>
 80073f6:	6178      	str	r0, [r7, #20]

  if(ret == BSP_ERROR_NONE)
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d105      	bne.n	800740a <BSP_ISM330DHCX_ReadReg+0x56>
  {
    ret = BSP_SPI2_Recv(pdata, len);
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	4619      	mov	r1, r3
 8007402:	68b8      	ldr	r0, [r7, #8]
 8007404:	f7ff fbe0 	bl	8006bc8 <BSP_SPI2_Recv>
 8007408:	6178      	str	r0, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 800740a:	2201      	movs	r2, #1
 800740c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007410:	4803      	ldr	r0, [pc, #12]	; (8007420 <BSP_ISM330DHCX_ReadReg+0x6c>)
 8007412:	f003 fa7f 	bl	800a914 <HAL_GPIO_WritePin>

  return ret;
 8007416:	697b      	ldr	r3, [r7, #20]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	42021c00 	.word	0x42021c00

08007424 <BSP_MOTION_SENSOR_FIFO_Set_BDR>:
 * @param  Instance the device instance
 * @param  Odr FIFO ODR value
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_BDR(uint32_t Instance, uint32_t Function, float Bdr)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  switch(Instance)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d133      	bne.n	80074a0 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x7c>
      break;
#endif

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d012      	beq.n	8007468 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x44>
      {
        if(ISM330DHCX_FIFO_ACC_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 8007442:	4a1c      	ldr	r2, [pc, #112]	; (80074b4 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800744a:	ed97 0a01 	vldr	s0, [r7, #4]
 800744e:	4618      	mov	r0, r3
 8007450:	f7fd fd20 	bl	8004e94 <ISM330DHCX_FIFO_ACC_Set_BDR>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x3e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800745a:	f06f 0304 	mvn.w	r3, #4
 800745e:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 8007460:	e022      	b.n	80074a8 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
          ret = BSP_ERROR_NONE;
 8007462:	2300      	movs	r3, #0
 8007464:	617b      	str	r3, [r7, #20]
      break;
 8007466:	e01f      	b.n	80074a8 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
      else if((Function & MOTION_GYRO) == MOTION_GYRO)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d012      	beq.n	8007498 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x74>
        if(ISM330DHCX_FIFO_GYRO_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 8007472:	4a10      	ldr	r2, [pc, #64]	; (80074b4 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747a:	ed97 0a01 	vldr	s0, [r7, #4]
 800747e:	4618      	mov	r0, r3
 8007480:	f7fd fd94 	bl	8004fac <ISM330DHCX_FIFO_GYRO_Set_BDR>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x6e>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800748a:	f06f 0304 	mvn.w	r3, #4
 800748e:	617b      	str	r3, [r7, #20]
      break;
 8007490:	e00a      	b.n	80074a8 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
          ret = BSP_ERROR_NONE;
 8007492:	2300      	movs	r3, #0
 8007494:	617b      	str	r3, [r7, #20]
      break;
 8007496:	e007      	b.n	80074a8 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
        ret = BSP_ERROR_WRONG_PARAM;
 8007498:	f06f 0301 	mvn.w	r3, #1
 800749c:	617b      	str	r3, [r7, #20]
      break;
 800749e:	e003      	b.n	80074a8 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80074a0:	f06f 0301 	mvn.w	r3, #1
 80074a4:	617b      	str	r3, [r7, #20]
      break;
 80074a6:	bf00      	nop
  }

  return ret;
 80074a8:	697b      	ldr	r3, [r7, #20]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20002c8c 	.word	0x20002c8c

080074b8 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT1 pin
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(uint32_t Instance, uint8_t Status)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch(Instance)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d112      	bne.n	80074f0 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x38>
      break;
#endif      

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_INT1_FIFO_Full(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 80074ca:	4a0e      	ldr	r2, [pc, #56]	; (8007504 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x4c>)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	4611      	mov	r1, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fd fdf4 	bl	80050c4 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80074e2:	f06f 0304 	mvn.w	r3, #4
 80074e6:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80074e8:	e006      	b.n	80074f8 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
        ret = BSP_ERROR_NONE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
      break;
 80074ee:	e003      	b.n	80074f8 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
#endif      

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80074f0:	f06f 0301 	mvn.w	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]
      break;
 80074f6:	bf00      	nop
  }

  return ret;
 80074f8:	68fb      	ldr	r3, [r7, #12]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20002c8c 	.word	0x20002c8c

08007508 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level>:
 * @param  Instance the device instance
 * @param  Watermark FIFO watermark level
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level(uint32_t Instance, uint16_t Watermark)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	807b      	strh	r3, [r7, #2]
  int32_t ret;

  switch(Instance)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d112      	bne.n	8007540 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x38>
      break;
#endif 

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_Watermark_Level(MotionCompObj[Instance], Watermark) != BSP_ERROR_NONE)
 800751a:	4a0e      	ldr	r2, [pc, #56]	; (8007554 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x4c>)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007522:	887a      	ldrh	r2, [r7, #2]
 8007524:	4611      	mov	r1, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f7fd fdfd 	bl	8005126 <ISM330DHCX_FIFO_Set_Watermark_Level>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007532:	f06f 0304 	mvn.w	r3, #4
 8007536:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007538:	e006      	b.n	8007548 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
        ret = BSP_ERROR_NONE;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
      break;
 800753e:	e003      	b.n	8007548 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007540:	f06f 0301 	mvn.w	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
      break;
 8007546:	bf00      	nop
  }

  return ret;
 8007548:	68fb      	ldr	r3, [r7, #12]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20002c8c 	.word	0x20002c8c

08007558 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>:
 * @param  Instance the device instance
 * @param  Status FIFO stop on watermark status
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(uint32_t Instance, uint8_t Status)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch(Instance)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d112      	bne.n	8007590 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x38>
      break;
#endif      

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_Stop_On_Fth(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800756a:	4a0e      	ldr	r2, [pc, #56]	; (80075a4 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x4c>)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007572:	78fa      	ldrb	r2, [r7, #3]
 8007574:	4611      	mov	r1, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f7fd fded 	bl	8005156 <ISM330DHCX_FIFO_Set_Stop_On_Fth>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007582:	f06f 0304 	mvn.w	r3, #4
 8007586:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007588:	e006      	b.n	8007598 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
        ret = BSP_ERROR_NONE;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]
      break;
 800758e:	e003      	b.n	8007598 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
#endif 

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007590:	f06f 0301 	mvn.w	r3, #1
 8007594:	60fb      	str	r3, [r7, #12]
      break;
 8007596:	bf00      	nop
  }

  return ret;
 8007598:	68fb      	ldr	r3, [r7, #12]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20002c8c 	.word	0x20002c8c

080075a8 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word>:
 *         - MOTION_GYRO or MOTION_ACCELERO
 * @param  Data FIFO single axis data
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Get_Data_Word(uint32_t Instance, uint32_t Function, int16_t *Data)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  switch(Instance)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d131      	bne.n	800761e <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x76>
  {
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d011      	beq.n	80075e8 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x40>
      {
        if(ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 80075c4:	4a1a      	ldr	r2, [pc, #104]	; (8007630 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fd fe28 	bl	8005224 <ISM330DHCX_FIFO_Get_Data_Word>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x3a>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80075da:	f06f 0304 	mvn.w	r3, #4
 80075de:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 80075e0:	e021      	b.n	8007626 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
          ret = BSP_ERROR_NONE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
      break;
 80075e6:	e01e      	b.n	8007626 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
      else if((Function & MOTION_GYRO) == MOTION_GYRO)
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d011      	beq.n	8007616 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x6e>
        if(ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 80075f2:	4a0f      	ldr	r2, [pc, #60]	; (8007630 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fd fe11 	bl	8005224 <ISM330DHCX_FIFO_Get_Data_Word>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x68>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007608:	f06f 0304 	mvn.w	r3, #4
 800760c:	617b      	str	r3, [r7, #20]
      break;
 800760e:	e00a      	b.n	8007626 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
          ret = BSP_ERROR_NONE;
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]
      break;
 8007614:	e007      	b.n	8007626 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
        ret = BSP_ERROR_WRONG_PARAM;
 8007616:	f06f 0301 	mvn.w	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
      break;
 800761c:	e003      	b.n	8007626 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800761e:	f06f 0301 	mvn.w	r3, #1
 8007622:	617b      	str	r3, [r7, #20]
      break;
 8007624:	bf00      	nop
  }

  return ret;
 8007626:	697b      	ldr	r3, [r7, #20]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20002c8c 	.word	0x20002c8c

08007634 <BSP_MOTION_SENSOR_FIFO_Set_Mode>:
 * @param  Instance the device instance
 * @param  Mode FIFO mode
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Mode(uint32_t Instance, uint8_t Mode)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch(Instance)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d112      	bne.n	800766c <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x38>
      break;
#endif   

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_Mode(MotionCompObj[Instance], Mode) != BSP_ERROR_NONE)
 8007646:	4a0e      	ldr	r2, [pc, #56]	; (8007680 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x4c>)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800764e:	78fa      	ldrb	r2, [r7, #3]
 8007650:	4611      	mov	r1, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f7fd fd97 	bl	8005186 <ISM330DHCX_FIFO_Set_Mode>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800765e:	f06f 0304 	mvn.w	r3, #4
 8007662:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007664:	e006      	b.n	8007674 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x40>
        ret = BSP_ERROR_NONE;
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]
      break;
 800766a:	e003      	b.n	8007674 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800766c:	f06f 0301 	mvn.w	r3, #1
 8007670:	60fb      	str	r3, [r7, #12]
      break;
 8007672:	bf00      	nop
  }

  return ret;
 8007674:	68fb      	ldr	r3, [r7, #12]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20002c8c 	.word	0x20002c8c

08007684 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples>:
 * @param  Instance the device instance
 * @param  NumSamples number of unread FIFO samples
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Get_Num_Samples(uint32_t Instance, uint16_t *NumSamples)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch(Instance)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d111      	bne.n	80076b8 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x34>
      break;
#endif

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Get_Num_Samples(MotionCompObj[Instance], NumSamples) != BSP_ERROR_NONE)
 8007694:	4a0d      	ldr	r2, [pc, #52]	; (80076cc <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x48>)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fd fbe2 	bl	8004e68 <ISM330DHCX_FIFO_Get_Num_Samples>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80076aa:	f06f 0304 	mvn.w	r3, #4
 80076ae:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80076b0:	e006      	b.n	80076c0 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x3c>
        ret = BSP_ERROR_NONE;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
      break;
 80076b6:	e003      	b.n	80076c0 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80076b8:	f06f 0301 	mvn.w	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
      break;
 80076be:	bf00      	nop
  }

  return ret;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20002c8c 	.word	0x20002c8c

080076d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80076d4:	4b11      	ldr	r3, [pc, #68]	; (800771c <HAL_Init+0x4c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a10      	ldr	r2, [pc, #64]	; (800771c <HAL_Init+0x4c>)
 80076da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076e0:	2003      	movs	r0, #3
 80076e2:	f000 fd43 	bl	800816c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80076e6:	f006 f8ad 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 80076ea:	4602      	mov	r2, r0
 80076ec:	4b0c      	ldr	r3, [pc, #48]	; (8007720 <HAL_Init+0x50>)
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	f003 030f 	and.w	r3, r3, #15
 80076f4:	490b      	ldr	r1, [pc, #44]	; (8007724 <HAL_Init+0x54>)
 80076f6:	5ccb      	ldrb	r3, [r1, r3]
 80076f8:	fa22 f303 	lsr.w	r3, r2, r3
 80076fc:	4a0a      	ldr	r2, [pc, #40]	; (8007728 <HAL_Init+0x58>)
 80076fe:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007700:	200f      	movs	r0, #15
 8007702:	f000 f813 	bl	800772c <HAL_InitTick>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e002      	b.n	8007716 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007710:	f7fa ffda 	bl	80026c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	40022000 	.word	0x40022000
 8007720:	46020c00 	.word	0x46020c00
 8007724:	0801f84c 	.word	0x0801f84c
 8007728:	2000000c 	.word	0x2000000c

0800772c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8007734:	4b15      	ldr	r3, [pc, #84]	; (800778c <HAL_InitTick+0x60>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e021      	b.n	8007784 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007740:	4b13      	ldr	r3, [pc, #76]	; (8007790 <HAL_InitTick+0x64>)
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	4b11      	ldr	r3, [pc, #68]	; (800778c <HAL_InitTick+0x60>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	4619      	mov	r1, r3
 800774a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800774e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007752:	fbb2 f3f3 	udiv	r3, r2, r3
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fd49 	bl	80081ee <HAL_SYSTICK_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e00e      	b.n	8007784 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b0f      	cmp	r3, #15
 800776a:	d80a      	bhi.n	8007782 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800776c:	2200      	movs	r2, #0
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	f04f 30ff 	mov.w	r0, #4294967295
 8007774:	f000 fd05 	bl	8008182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007778:	4a06      	ldr	r2, [pc, #24]	; (8007794 <HAL_InitTick+0x68>)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	e000      	b.n	8007784 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	200000a8 	.word	0x200000a8
 8007790:	2000000c 	.word	0x2000000c
 8007794:	200000a4 	.word	0x200000a4

08007798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <HAL_IncTick+0x20>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	461a      	mov	r2, r3
 80077a2:	4b06      	ldr	r3, [pc, #24]	; (80077bc <HAL_IncTick+0x24>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4413      	add	r3, r2
 80077a8:	4a04      	ldr	r2, [pc, #16]	; (80077bc <HAL_IncTick+0x24>)
 80077aa:	6013      	str	r3, [r2, #0]
}
 80077ac:	bf00      	nop
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	200000a8 	.word	0x200000a8
 80077bc:	20002cd4 	.word	0x20002cd4

080077c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
  return uwTick;
 80077c4:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <HAL_GetTick+0x14>)
 80077c6:	681b      	ldr	r3, [r3, #0]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	20002cd4 	.word	0x20002cd4

080077d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	601a      	str	r2, [r3, #0]
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	2a00      	cmp	r2, #0
 8007828:	d002      	beq.n	8007830 <LL_ADC_SetGainCompensation+0x32>
 800782a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800782e:	e000      	b.n	8007832 <LL_ADC_SetGainCompensation+0x34>
 8007830:	2200      	movs	r2, #0
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	695a      	ldr	r2, [r3, #20]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f003 0304 	and.w	r3, r3, #4
 800785a:	2107      	movs	r1, #7
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	43db      	mvns	r3, r3
 8007862:	401a      	ands	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f003 0304 	and.w	r3, r3, #4
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	fa01 f303 	lsl.w	r3, r1, r3
 8007870:	431a      	orrs	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007892:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	6093      	str	r3, [r2, #8]
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ba:	d101      	bne.n	80078c0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80078bc:	2301      	movs	r3, #1
 80078be:	e000      	b.n	80078c2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80078de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80078e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	609a      	str	r2, [r3, #8]
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800790a:	d101      	bne.n	8007910 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <LL_ADC_IsEnabled+0x18>
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <LL_ADC_IsEnabled+0x1a>
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b04      	cmp	r3, #4
 8007956:	d101      	bne.n	800795c <LL_ADC_REG_IsConversionOngoing+0x18>
 8007958:	2301      	movs	r3, #1
 800795a:	e000      	b.n	800795e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	2b08      	cmp	r3, #8
 800797c:	d101      	bne.n	8007982 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800797e:	2301      	movs	r3, #1
 8007980:	e000      	b.n	8007984 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08a      	sub	sp, #40	; 0x28
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 800799e:	2300      	movs	r3, #0
 80079a0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e2e3      	b.n	8007f78 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a92      	ldr	r2, [pc, #584]	; (8007c08 <HAL_ADC_Init+0x278>)
 80079be:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d109      	bne.n	80079dc <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7fa fe97 	bl	80026fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff ff60 	bl	80078a6 <LL_ADC_IsDeepPowerDownEnabled>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff ff46 	bl	8007882 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff ff7b 	bl	80078f6 <LL_ADC_IsInternalRegulatorEnabled>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d115      	bne.n	8007a32 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff ff5f 	bl	80078ce <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a10:	4b7e      	ldr	r3, [pc, #504]	; (8007c0c <HAL_ADC_Init+0x27c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	099b      	lsrs	r3, r3, #6
 8007a16:	4a7e      	ldr	r2, [pc, #504]	; (8007c10 <HAL_ADC_Init+0x280>)
 8007a18:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1c:	099b      	lsrs	r3, r3, #6
 8007a1e:	3301      	adds	r3, #1
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007a24:	e002      	b.n	8007a2c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f9      	bne.n	8007a26 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff ff5d 	bl	80078f6 <LL_ADC_IsInternalRegulatorEnabled>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10e      	bne.n	8007a60 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a46:	f043 0210 	orr.w	r2, r3, #16
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a52:	f043 0201 	orr.w	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff ff6d 	bl	8007944 <LL_ADC_REG_IsConversionOngoing>
 8007a6a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a70:	f003 0310 	and.w	r3, r3, #16
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f040 8274 	bne.w	8007f62 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f040 8270 	bne.w	8007f62 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a86:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007a8a:	f043 0202 	orr.w	r2, r3, #2
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff ff41 	bl	800791e <LL_ADC_IsEnabled>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d14e      	bne.n	8007b40 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a58      	ldr	r2, [pc, #352]	; (8007c08 <HAL_ADC_Init+0x278>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d028      	beq.n	8007afe <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a58      	ldr	r2, [pc, #352]	; (8007c14 <HAL_ADC_Init+0x284>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d109      	bne.n	8007aca <HAL_ADC_Init+0x13a>
 8007ab6:	4857      	ldr	r0, [pc, #348]	; (8007c14 <HAL_ADC_Init+0x284>)
 8007ab8:	f7ff ff31 	bl	800791e <LL_ADC_IsEnabled>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bf0c      	ite	eq
 8007ac2:	2301      	moveq	r3, #1
 8007ac4:	2300      	movne	r3, #0
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	e008      	b.n	8007adc <HAL_ADC_Init+0x14c>
 8007aca:	484f      	ldr	r0, [pc, #316]	; (8007c08 <HAL_ADC_Init+0x278>)
 8007acc:	f7ff ff27 	bl	800791e <LL_ADC_IsEnabled>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bf0c      	ite	eq
 8007ad6:	2301      	moveq	r3, #1
 8007ad8:	2300      	movne	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d02f      	beq.n	8007b40 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a4b      	ldr	r2, [pc, #300]	; (8007c14 <HAL_ADC_Init+0x284>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d101      	bne.n	8007aee <HAL_ADC_Init+0x15e>
 8007aea:	4a4b      	ldr	r2, [pc, #300]	; (8007c18 <HAL_ADC_Init+0x288>)
 8007aec:	e000      	b.n	8007af0 <HAL_ADC_Init+0x160>
 8007aee:	4a4b      	ldr	r2, [pc, #300]	; (8007c1c <HAL_ADC_Init+0x28c>)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7ff fe6e 	bl	80077d8 <LL_ADC_SetCommonClock>
 8007afc:	e020      	b.n	8007b40 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f023 010c 	bic.w	r1, r3, #12
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d005      	beq.n	8007b20 <HAL_ADC_Init+0x190>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	f003 030c 	and.w	r3, r3, #12
 8007b1e:	e000      	b.n	8007b22 <HAL_ADC_Init+0x192>
 8007b20:	230c      	movs	r3, #12
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	6812      	ldr	r2, [r2, #0]
 8007b26:	430b      	orrs	r3, r1
 8007b28:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8007b2a:	4b3c      	ldr	r3, [pc, #240]	; (8007c1c <HAL_ADC_Init+0x28c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007b3a:	4938      	ldr	r1, [pc, #224]	; (8007c1c <HAL_ADC_Init+0x28c>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a30      	ldr	r2, [pc, #192]	; (8007c08 <HAL_ADC_Init+0x278>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d010      	beq.n	8007b6c <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b50:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007b56:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8007b5c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b64:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8007b66:	4313      	orrs	r3, r2
 8007b68:	623b      	str	r3, [r7, #32]
 8007b6a:	e030      	b.n	8007bce <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7f1b      	ldrb	r3, [r3, #28]
 8007b70:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b78:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007b7a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007b80:	2a00      	cmp	r2, #0
 8007b82:	d002      	beq.n	8007b8a <HAL_ADC_Init+0x1fa>
 8007b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b88:	e000      	b.n	8007b8c <HAL_ADC_Init+0x1fc>
 8007b8a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8007b8c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8007b92:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	da04      	bge.n	8007ba6 <HAL_ADC_Init+0x216>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ba4:	e001      	b.n	8007baa <HAL_ADC_Init+0x21a>
 8007ba6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8007baa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4918      	ldr	r1, [pc, #96]	; (8007c14 <HAL_ADC_Init+0x284>)
 8007bb2:	428b      	cmp	r3, r1
 8007bb4:	d103      	bne.n	8007bbe <HAL_ADC_Init+0x22e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bbc:	e003      	b.n	8007bc6 <HAL_ADC_Init+0x236>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bc4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8007bc6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007bc8:	6a3a      	ldr	r2, [r7, #32]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d12f      	bne.n	8007c38 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a0a      	ldr	r2, [pc, #40]	; (8007c08 <HAL_ADC_Init+0x278>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d007      	beq.n	8007bf2 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be6:	3b01      	subs	r3, #1
 8007be8:	045b      	lsls	r3, r3, #17
 8007bea:	6a3a      	ldr	r2, [r7, #32]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	623b      	str	r3, [r7, #32]
 8007bf0:	e022      	b.n	8007c38 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d111      	bne.n	8007c20 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c02:	623b      	str	r3, [r7, #32]
 8007c04:	e018      	b.n	8007c38 <HAL_ADC_Init+0x2a8>
 8007c06:	bf00      	nop
 8007c08:	46021000 	.word	0x46021000
 8007c0c:	2000000c 	.word	0x2000000c
 8007c10:	053e2d63 	.word	0x053e2d63
 8007c14:	42028000 	.word	0x42028000
 8007c18:	42028308 	.word	0x42028308
 8007c1c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c24:	f043 0220 	orr.w	r2, r3, #32
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c30:	f043 0201 	orr.w	r2, r3, #1
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a93      	ldr	r2, [pc, #588]	; (8007e8c <HAL_ADC_Init+0x4fc>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d018      	beq.n	8007c74 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	4313      	orrs	r3, r2
 8007c58:	6a3a      	ldr	r2, [r7, #32]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	4b8a      	ldr	r3, [pc, #552]	; (8007e90 <HAL_ADC_Init+0x500>)
 8007c66:	4013      	ands	r3, r2
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	6a39      	ldr	r1, [r7, #32]
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	60d3      	str	r3, [r2, #12]
 8007c72:	e033      	b.n	8007cdc <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d009      	beq.n	8007c90 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c80:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	6a3a      	ldr	r2, [r7, #32]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8007c9a:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6812      	ldr	r2, [r2, #0]
 8007ca2:	6a39      	ldr	r1, [r7, #32]
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d008      	beq.n	8007cc2 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1a      	ldr	r2, [r3, #32]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d008      	beq.n	8007cdc <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a6a      	ldr	r2, [pc, #424]	; (8007e8c <HAL_ADC_Init+0x4fc>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	f000 8093 	beq.w	8007e0e <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff fe29 	bl	8007944 <LL_ADC_REG_IsConversionOngoing>
 8007cf2:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff fe36 	bl	800796a <LL_ADC_INJ_IsConversionOngoing>
 8007cfe:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d161      	bne.n	8007dca <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d15e      	bne.n	8007dca <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	7f1b      	ldrb	r3, [r3, #28]
 8007d10:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	495f      	ldr	r1, [pc, #380]	; (8007e94 <HAL_ADC_Init+0x504>)
 8007d18:	428b      	cmp	r3, r1
 8007d1a:	d102      	bne.n	8007d22 <HAL_ADC_Init+0x392>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d20:	e002      	b.n	8007d28 <HAL_ADC_Init+0x398>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d26:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d36:	f023 0303 	bic.w	r3, r3, #3
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	6a39      	ldr	r1, [r7, #32]
 8007d40:	430b      	orrs	r3, r1
 8007d42:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d007      	beq.n	8007d5c <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f7ff fd51 	bl	80077fe <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d11e      	bne.n	8007da4 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691a      	ldr	r2, [r3, #16]
 8007d72:	4b49      	ldr	r3, [pc, #292]	; (8007e98 <HAL_ADC_Init+0x508>)
 8007d74:	4013      	ands	r3, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007d7a:	0411      	lsls	r1, r2, #16
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007d80:	4311      	orrs	r1, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8007d86:	4311      	orrs	r1, r2
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007d8c:	4311      	orrs	r1, r2
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d92:	0892      	lsrs	r2, r2, #2
 8007d94:	430a      	orrs	r2, r1
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f042 0201 	orr.w	r2, r2, #1
 8007da0:	611a      	str	r2, [r3, #16]
 8007da2:	e007      	b.n	8007db4 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691a      	ldr	r2, [r3, #16]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0201 	bic.w	r2, r2, #1
 8007db2:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d10c      	bne.n	8007dec <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd8:	f023 010f 	bic.w	r1, r3, #15
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de0:	1e5a      	subs	r2, r3, #1
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	631a      	str	r2, [r3, #48]	; 0x30
 8007dea:	e007      	b.n	8007dfc <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f022 020f 	bic.w	r2, r2, #15
 8007dfa:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e00:	f023 0303 	bic.w	r3, r3, #3
 8007e04:	f043 0201 	orr.w	r2, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007e0c:	e0b2      	b.n	8007f74 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8007e16:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8007e1c:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8007e22:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8007e24:	69fa      	ldr	r2, [r7, #28]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d103      	bne.n	8007e3c <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691a      	ldr	r2, [r3, #16]
 8007e42:	4b16      	ldr	r3, [pc, #88]	; (8007e9c <HAL_ADC_Init+0x50c>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6812      	ldr	r2, [r2, #0]
 8007e4a:	69f9      	ldr	r1, [r7, #28]
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e58:	461a      	mov	r2, r3
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	f7ff fcf2 	bl	8007844 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8007e6e:	f7ff fce9 	bl	8007844 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d112      	bne.n	8007ea0 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f062 020f 	orn	r2, r2, #15
 8007e88:	629a      	str	r2, [r3, #40]	; 0x28
 8007e8a:	e044      	b.n	8007f16 <HAL_ADC_Init+0x586>
 8007e8c:	46021000 	.word	0x46021000
 8007e90:	fff0c013 	.word	0xfff0c013
 8007e94:	42028000 	.word	0x42028000
 8007e98:	fc00f81e 	.word	0xfc00f81e
 8007e9c:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ea8:	d135      	bne.n	8007f16 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61bb      	str	r3, [r7, #24]
 8007eae:	e00d      	b.n	8007ecc <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebe:	f003 030f 	and.w	r3, r3, #15
 8007ec2:	2b0f      	cmp	r3, #15
 8007ec4:	d006      	beq.n	8007ed4 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2b07      	cmp	r3, #7
 8007ed0:	d9ee      	bls.n	8007eb0 <HAL_ADC_Init+0x520>
 8007ed2:	e000      	b.n	8007ed6 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8007ed4:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d108      	bne.n	8007eee <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f062 020f 	orn	r2, r2, #15
 8007eea:	629a      	str	r2, [r3, #40]	; 0x28
 8007eec:	e013      	b.n	8007f16 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	f003 031c 	and.w	r3, r3, #28
 8007f00:	f06f 020f 	mvn.w	r2, #15
 8007f04:	fa02 f103 	lsl.w	r1, r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	4b18      	ldr	r3, [pc, #96]	; (8007f80 <HAL_ADC_Init+0x5f0>)
 8007f1e:	4013      	ands	r3, r2
 8007f20:	6a3a      	ldr	r2, [r7, #32]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d10b      	bne.n	8007f3e <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f30:	f023 0303 	bic.w	r3, r3, #3
 8007f34:	f043 0201 	orr.w	r2, r3, #1
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007f3c:	e01a      	b.n	8007f74 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f42:	f023 0312 	bic.w	r3, r3, #18
 8007f46:	f043 0210 	orr.w	r2, r3, #16
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f52:	f043 0201 	orr.w	r2, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007f60:	e008      	b.n	8007f74 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f66:	f043 0210 	orr.w	r2, r3, #16
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8007f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3728      	adds	r7, #40	; 0x28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	833ffff3 	.word	0x833ffff3

08007f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f003 0307 	and.w	r3, r3, #7
 8007f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f94:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fb6:	4a04      	ldr	r2, [pc, #16]	; (8007fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	60d3      	str	r3, [r2, #12]
}
 8007fbc:	bf00      	nop
 8007fbe:	3714      	adds	r7, #20
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	e000ed00 	.word	0xe000ed00

08007fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fd0:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	0a1b      	lsrs	r3, r3, #8
 8007fd6:	f003 0307 	and.w	r3, r3, #7
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	e000ed00 	.word	0xe000ed00

08007fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	db0b      	blt.n	8008012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	f003 021f 	and.w	r2, r3, #31
 8008000:	4907      	ldr	r1, [pc, #28]	; (8008020 <__NVIC_EnableIRQ+0x38>)
 8008002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008006:	095b      	lsrs	r3, r3, #5
 8008008:	2001      	movs	r0, #1
 800800a:	fa00 f202 	lsl.w	r2, r0, r2
 800800e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	e000e100 	.word	0xe000e100

08008024 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800802e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008032:	2b00      	cmp	r3, #0
 8008034:	db12      	blt.n	800805c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	f003 021f 	and.w	r2, r3, #31
 800803c:	490a      	ldr	r1, [pc, #40]	; (8008068 <__NVIC_DisableIRQ+0x44>)
 800803e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008042:	095b      	lsrs	r3, r3, #5
 8008044:	2001      	movs	r0, #1
 8008046:	fa00 f202 	lsl.w	r2, r0, r2
 800804a:	3320      	adds	r3, #32
 800804c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008050:	f3bf 8f4f 	dsb	sy
}
 8008054:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008056:	f3bf 8f6f 	isb	sy
}
 800805a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	e000e100 	.word	0xe000e100

0800806c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	6039      	str	r1, [r7, #0]
 8008076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800807c:	2b00      	cmp	r3, #0
 800807e:	db0a      	blt.n	8008096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	b2da      	uxtb	r2, r3
 8008084:	490c      	ldr	r1, [pc, #48]	; (80080b8 <__NVIC_SetPriority+0x4c>)
 8008086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800808a:	0112      	lsls	r2, r2, #4
 800808c:	b2d2      	uxtb	r2, r2
 800808e:	440b      	add	r3, r1
 8008090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008094:	e00a      	b.n	80080ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	b2da      	uxtb	r2, r3
 800809a:	4908      	ldr	r1, [pc, #32]	; (80080bc <__NVIC_SetPriority+0x50>)
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	f003 030f 	and.w	r3, r3, #15
 80080a2:	3b04      	subs	r3, #4
 80080a4:	0112      	lsls	r2, r2, #4
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	440b      	add	r3, r1
 80080aa:	761a      	strb	r2, [r3, #24]
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	e000e100 	.word	0xe000e100
 80080bc:	e000ed00 	.word	0xe000ed00

080080c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b089      	sub	sp, #36	; 0x24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f1c3 0307 	rsb	r3, r3, #7
 80080da:	2b04      	cmp	r3, #4
 80080dc:	bf28      	it	cs
 80080de:	2304      	movcs	r3, #4
 80080e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	3304      	adds	r3, #4
 80080e6:	2b06      	cmp	r3, #6
 80080e8:	d902      	bls.n	80080f0 <NVIC_EncodePriority+0x30>
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	3b03      	subs	r3, #3
 80080ee:	e000      	b.n	80080f2 <NVIC_EncodePriority+0x32>
 80080f0:	2300      	movs	r3, #0
 80080f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080f4:	f04f 32ff 	mov.w	r2, #4294967295
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	43da      	mvns	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	401a      	ands	r2, r3
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008108:	f04f 31ff 	mov.w	r1, #4294967295
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	fa01 f303 	lsl.w	r3, r1, r3
 8008112:	43d9      	mvns	r1, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008118:	4313      	orrs	r3, r2
         );
}
 800811a:	4618      	mov	r0, r3
 800811c:	3724      	adds	r7, #36	; 0x24
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
	...

08008128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3b01      	subs	r3, #1
 8008134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008138:	d301      	bcc.n	800813e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800813a:	2301      	movs	r3, #1
 800813c:	e00f      	b.n	800815e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800813e:	4a0a      	ldr	r2, [pc, #40]	; (8008168 <SysTick_Config+0x40>)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3b01      	subs	r3, #1
 8008144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008146:	210f      	movs	r1, #15
 8008148:	f04f 30ff 	mov.w	r0, #4294967295
 800814c:	f7ff ff8e 	bl	800806c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008150:	4b05      	ldr	r3, [pc, #20]	; (8008168 <SysTick_Config+0x40>)
 8008152:	2200      	movs	r2, #0
 8008154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008156:	4b04      	ldr	r3, [pc, #16]	; (8008168 <SysTick_Config+0x40>)
 8008158:	2207      	movs	r2, #7
 800815a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	e000e010 	.word	0xe000e010

0800816c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff ff05 	bl	8007f84 <__NVIC_SetPriorityGrouping>
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b086      	sub	sp, #24
 8008186:	af00      	add	r7, sp, #0
 8008188:	4603      	mov	r3, r0
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
 800818e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008190:	f7ff ff1c 	bl	8007fcc <__NVIC_GetPriorityGrouping>
 8008194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	6978      	ldr	r0, [r7, #20]
 800819c:	f7ff ff90 	bl	80080c0 <NVIC_EncodePriority>
 80081a0:	4602      	mov	r2, r0
 80081a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081a6:	4611      	mov	r1, r2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff ff5f 	bl	800806c <__NVIC_SetPriority>
}
 80081ae:	bf00      	nop
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	4603      	mov	r3, r0
 80081be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff ff0f 	bl	8007fe8 <__NVIC_EnableIRQ>
}
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	4603      	mov	r3, r0
 80081da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80081dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff ff1f 	bl	8008024 <__NVIC_DisableIRQ>
}
 80081e6:	bf00      	nop
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff ff96 	bl	8008128 <SysTick_Config>
 80081fc:	4603      	mov	r3, r0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e054      	b.n	80082c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	7f5b      	ldrb	r3, [r3, #29]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d105      	bne.n	8008230 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f850 	bl	80082d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10c      	bne.n	8008258 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a22      	ldr	r2, [pc, #136]	; (80082cc <HAL_CRC_Init+0xc4>)
 8008244:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0218 	bic.w	r2, r2, #24
 8008254:	609a      	str	r2, [r3, #8]
 8008256:	e00c      	b.n	8008272 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6899      	ldr	r1, [r3, #8]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	461a      	mov	r2, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f83e 	bl	80082e4 <HAL_CRCEx_Polynomial_Set>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e028      	b.n	80082c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	795b      	ldrb	r3, [r3, #5]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d105      	bne.n	8008286 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f04f 32ff 	mov.w	r2, #4294967295
 8008282:	611a      	str	r2, [r3, #16]
 8008284:	e004      	b.n	8008290 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	6912      	ldr	r2, [r2, #16]
 800828e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695a      	ldr	r2, [r3, #20]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699a      	ldr	r2, [r3, #24]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	04c11db7 	.word	0x04c11db7

080082d0 <HAL_CRC_MspInit>:
  * @brief  Initializes the CRC MSP.
  * @param  hcrc CRC handle
  * @retval None
  */
__weak void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcrc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspInit can be implemented in the user file
   */
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80082f4:	231f      	movs	r3, #31
 80082f6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80082f8:	bf00      	nop
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	1e5a      	subs	r2, r3, #1
 80082fe:	613a      	str	r2, [r7, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d009      	beq.n	8008318 <HAL_CRCEx_Polynomial_Set+0x34>
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f003 031f 	and.w	r3, r3, #31
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	fa22 f303 	lsr.w	r3, r2, r3
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0f0      	beq.n	80082fa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b18      	cmp	r3, #24
 800831c:	d846      	bhi.n	80083ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800831e:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <HAL_CRCEx_Polynomial_Set+0x40>)
 8008320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008324:	080083b3 	.word	0x080083b3
 8008328:	080083ad 	.word	0x080083ad
 800832c:	080083ad 	.word	0x080083ad
 8008330:	080083ad 	.word	0x080083ad
 8008334:	080083ad 	.word	0x080083ad
 8008338:	080083ad 	.word	0x080083ad
 800833c:	080083ad 	.word	0x080083ad
 8008340:	080083ad 	.word	0x080083ad
 8008344:	080083a1 	.word	0x080083a1
 8008348:	080083ad 	.word	0x080083ad
 800834c:	080083ad 	.word	0x080083ad
 8008350:	080083ad 	.word	0x080083ad
 8008354:	080083ad 	.word	0x080083ad
 8008358:	080083ad 	.word	0x080083ad
 800835c:	080083ad 	.word	0x080083ad
 8008360:	080083ad 	.word	0x080083ad
 8008364:	08008395 	.word	0x08008395
 8008368:	080083ad 	.word	0x080083ad
 800836c:	080083ad 	.word	0x080083ad
 8008370:	080083ad 	.word	0x080083ad
 8008374:	080083ad 	.word	0x080083ad
 8008378:	080083ad 	.word	0x080083ad
 800837c:	080083ad 	.word	0x080083ad
 8008380:	080083ad 	.word	0x080083ad
 8008384:	08008389 	.word	0x08008389
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	2b06      	cmp	r3, #6
 800838c:	d913      	bls.n	80083b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008392:	e010      	b.n	80083b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2b07      	cmp	r3, #7
 8008398:	d90f      	bls.n	80083ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800839e:	e00c      	b.n	80083ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	2b0f      	cmp	r3, #15
 80083a4:	d90b      	bls.n	80083be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80083aa:	e008      	b.n	80083be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	75fb      	strb	r3, [r7, #23]
      break;
 80083b0:	e006      	b.n	80083c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80083b2:	bf00      	nop
 80083b4:	e004      	b.n	80083c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80083b6:	bf00      	nop
 80083b8:	e002      	b.n	80083c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80083ba:	bf00      	nop
 80083bc:	e000      	b.n	80083c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80083be:	bf00      	nop
  }
  if (status == HAL_OK)
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10d      	bne.n	80083e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f023 0118 	bic.w	r1, r3, #24
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	430a      	orrs	r2, r1
 80083e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	371c      	adds	r7, #28
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e014      	b.n	800842c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	791b      	ldrb	r3, [r3, #4]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d105      	bne.n	8008418 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7fa fb68 	bl	8002ae8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08a      	sub	sp, #40	; 0x28
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	795b      	ldrb	r3, [r3, #5]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d101      	bne.n	800844c <HAL_DAC_ConfigChannel+0x18>
 8008448:	2302      	movs	r3, #2
 800844a:	e185      	b.n	8008758 <HAL_DAC_ConfigChannel+0x324>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2201      	movs	r2, #1
 8008450:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2202      	movs	r2, #2
 8008456:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	2b04      	cmp	r3, #4
 800845e:	f040 8081 	bne.w	8008564 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008462:	f7ff f9ad 	bl	80077c0 <HAL_GetTick>
 8008466:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d140      	bne.n	80084f0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800846e:	e018      	b.n	80084a2 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008470:	f7ff f9a6 	bl	80077c0 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b01      	cmp	r3, #1
 800847c:	d911      	bls.n	80084a2 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00a      	beq.n	80084a2 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	f043 0208 	orr.w	r2, r3, #8
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2203      	movs	r2, #3
 800849c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e15a      	b.n	8008758 <HAL_DAC_ConfigChannel+0x324>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1df      	bne.n	8008470 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80084b0:	2001      	movs	r0, #1
 80084b2:	f00e fda5 	bl	8017000 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084be:	641a      	str	r2, [r3, #64]	; 0x40
 80084c0:	e023      	b.n	800850a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80084c2:	f7ff f97d 	bl	80077c0 <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d90f      	bls.n	80084f0 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da0a      	bge.n	80084f0 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f043 0208 	orr.w	r2, r3, #8
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2203      	movs	r2, #3
 80084ea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e133      	b.n	8008758 <HAL_DAC_ConfigChannel+0x324>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dbe3      	blt.n	80084c2 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80084fa:	2001      	movs	r0, #1
 80084fc:	f00e fd80 	bl	8017000 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008508:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800851a:	fa01 f303 	lsl.w	r3, r1, r3
 800851e:	43db      	mvns	r3, r3
 8008520:	ea02 0103 	and.w	r1, r2, r3
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f003 0310 	and.w	r3, r3, #16
 800852e:	409a      	lsls	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f003 0310 	and.w	r3, r3, #16
 8008544:	21ff      	movs	r1, #255	; 0xff
 8008546:	fa01 f303 	lsl.w	r3, r1, r3
 800854a:	43db      	mvns	r3, r3
 800854c:	ea02 0103 	and.w	r1, r2, r3
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f003 0310 	and.w	r3, r3, #16
 800855a:	409a      	lsls	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800856a:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	655a      	str	r2, [r3, #84]	; 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d11d      	bne.n	80085be <HAL_DAC_ConfigChannel+0x18a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f003 0310 	and.w	r3, r3, #16
 8008590:	221f      	movs	r2, #31
 8008592:	fa02 f303 	lsl.w	r3, r2, r3
 8008596:	43db      	mvns	r3, r3
 8008598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800859a:	4013      	ands	r3, r2
 800859c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f003 0310 	and.w	r3, r3, #16
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	fa02 f303 	lsl.w	r3, r2, r3
 80085b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b2:	4313      	orrs	r3, r2
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f003 0310 	and.w	r3, r3, #16
 80085cc:	2207      	movs	r2, #7
 80085ce:	fa02 f303 	lsl.w	r3, r2, r3
 80085d2:	43db      	mvns	r3, r3
 80085d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d6:	4013      	ands	r3, r2
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d102      	bne.n	80085e8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = 0x00000000UL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	623b      	str	r3, [r7, #32]
 80085e6:	e00f      	b.n	8008608 <HAL_DAC_ConfigChannel+0x1d4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d102      	bne.n	80085f6 <HAL_DAC_ConfigChannel+0x1c2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80085f0:	2301      	movs	r3, #1
 80085f2:	623b      	str	r3, [r7, #32]
 80085f4:	e008      	b.n	8008608 <HAL_DAC_ConfigChannel+0x1d4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d102      	bne.n	8008604 <HAL_DAC_ConfigChannel+0x1d0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80085fe:	2301      	movs	r3, #1
 8008600:	623b      	str	r3, [r7, #32]
 8008602:	e001      	b.n	8008608 <HAL_DAC_ConfigChannel+0x1d4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008604:	2300      	movs	r3, #0
 8008606:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	68da      	ldr	r2, [r3, #12]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	4313      	orrs	r3, r2
 8008612:	6a3a      	ldr	r2, [r7, #32]
 8008614:	4313      	orrs	r3, r2
 8008616:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f003 0310 	and.w	r3, r3, #16
 800861e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008622:	fa02 f303 	lsl.w	r3, r2, r3
 8008626:	43db      	mvns	r3, r3
 8008628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862a:	4013      	ands	r3, r2
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	7a1b      	ldrb	r3, [r3, #8]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d102      	bne.n	800863c <HAL_DAC_ConfigChannel+0x208>
 8008636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800863a:	e000      	b.n	800863e <HAL_DAC_ConfigChannel+0x20a>
 800863c:	2300      	movs	r3, #0
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	4313      	orrs	r3, r2
 8008642:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800864e:	fa02 f303 	lsl.w	r3, r2, r3
 8008652:	43db      	mvns	r3, r3
 8008654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008656:	4013      	ands	r3, r2
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	7a5b      	ldrb	r3, [r3, #9]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d102      	bne.n	8008668 <HAL_DAC_ConfigChannel+0x234>
 8008662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008666:	e000      	b.n	800866a <HAL_DAC_ConfigChannel+0x236>
 8008668:	2300      	movs	r3, #0
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	4313      	orrs	r3, r2
 800866e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b02      	cmp	r3, #2
 800867e:	d114      	bne.n	80086aa <HAL_DAC_ConfigChannel+0x276>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008680:	f005 f9e8 	bl	800da54 <HAL_RCC_GetHCLKFreq>
 8008684:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	4a35      	ldr	r2, [pc, #212]	; (8008760 <HAL_DAC_ConfigChannel+0x32c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d904      	bls.n	8008698 <HAL_DAC_ConfigChannel+0x264>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
 8008696:	e00f      	b.n	80086b8 <HAL_DAC_ConfigChannel+0x284>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	4a32      	ldr	r2, [pc, #200]	; (8008764 <HAL_DAC_ConfigChannel+0x330>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d90a      	bls.n	80086b6 <HAL_DAC_ConfigChannel+0x282>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
 80086a8:	e006      	b.n	80086b8 <HAL_DAC_ConfigChannel+0x284>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b0:	4313      	orrs	r3, r2
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
 80086b4:	e000      	b.n	80086b8 <HAL_DAC_ConfigChannel+0x284>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80086b6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f003 0310 	and.w	r3, r3, #16
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c6:	4313      	orrs	r3, r2
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6819      	ldr	r1, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f003 0310 	and.w	r3, r3, #16
 80086de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086e2:	fa02 f303 	lsl.w	r3, r2, r3
 80086e6:	43da      	mvns	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	400a      	ands	r2, r1
 80086ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f003 0310 	and.w	r3, r3, #16
 80086fe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008702:	fa02 f303 	lsl.w	r3, r2, r3
 8008706:	43db      	mvns	r3, r3
 8008708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870a:	4013      	ands	r3, r2
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	fa02 f303 	lsl.w	r3, r2, r3
 8008720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008722:	4313      	orrs	r3, r2
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6819      	ldr	r1, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f003 0310 	and.w	r3, r3, #16
 800873a:	22c0      	movs	r2, #192	; 0xc0
 800873c:	fa02 f303 	lsl.w	r3, r2, r3
 8008740:	43da      	mvns	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	400a      	ands	r2, r1
 8008748:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2201      	movs	r2, #1
 800874e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3728      	adds	r7, #40	; 0x28
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	09896800 	.word	0x09896800
 8008764:	04c4b400 	.word	0x04c4b400

08008768 <HAL_DACEx_SetConfigAutonomousMode>:
  *        the configuration information for the specified DAC.
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac, DAC_AutonomousModeConfTypeDef *sConfig)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	791b      	ldrb	r3, [r3, #4]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b01      	cmp	r3, #1
 800877a:	d11e      	bne.n	80087ba <HAL_DACEx_SetConfigAutonomousMode+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	795b      	ldrb	r3, [r3, #5]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_DACEx_SetConfigAutonomousMode+0x20>
 8008784:	2302      	movs	r3, #2
 8008786:	e019      	b.n	80087bc <HAL_DACEx_SetConfigAutonomousMode+0x54>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2202      	movs	r2, #2
 8008792:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879a:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e000      	b.n	80087bc <HAL_DACEx_SetConfigAutonomousMode+0x54>
  }
  else
  {
    return HAL_BUSY;
 80087ba:	2302      	movs	r3, #2
  }
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80087d0:	f7fe fff6 	bl	80077c0 <HAL_GetTick>
 80087d4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e0e0      	b.n	80089a2 <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a6f      	ldr	r2, [pc, #444]	; (80089ac <HAL_DMA_Init+0x1e4>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	f000 809f 	beq.w	8008932 <HAL_DMA_Init+0x16a>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a6d      	ldr	r2, [pc, #436]	; (80089b0 <HAL_DMA_Init+0x1e8>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	f000 8099 	beq.w	8008932 <HAL_DMA_Init+0x16a>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a6b      	ldr	r2, [pc, #428]	; (80089b4 <HAL_DMA_Init+0x1ec>)
 8008806:	4293      	cmp	r3, r2
 8008808:	f000 8093 	beq.w	8008932 <HAL_DMA_Init+0x16a>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a69      	ldr	r2, [pc, #420]	; (80089b8 <HAL_DMA_Init+0x1f0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	f000 808d 	beq.w	8008932 <HAL_DMA_Init+0x16a>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a67      	ldr	r2, [pc, #412]	; (80089bc <HAL_DMA_Init+0x1f4>)
 800881e:	4293      	cmp	r3, r2
 8008820:	f000 8087 	beq.w	8008932 <HAL_DMA_Init+0x16a>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a65      	ldr	r2, [pc, #404]	; (80089c0 <HAL_DMA_Init+0x1f8>)
 800882a:	4293      	cmp	r3, r2
 800882c:	f000 8081 	beq.w	8008932 <HAL_DMA_Init+0x16a>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a63      	ldr	r2, [pc, #396]	; (80089c4 <HAL_DMA_Init+0x1fc>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d07b      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a62      	ldr	r2, [pc, #392]	; (80089c8 <HAL_DMA_Init+0x200>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d076      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a60      	ldr	r2, [pc, #384]	; (80089cc <HAL_DMA_Init+0x204>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d071      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a5f      	ldr	r2, [pc, #380]	; (80089d0 <HAL_DMA_Init+0x208>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d06c      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a5d      	ldr	r2, [pc, #372]	; (80089d4 <HAL_DMA_Init+0x20c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d067      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a5c      	ldr	r2, [pc, #368]	; (80089d8 <HAL_DMA_Init+0x210>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d062      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a5a      	ldr	r2, [pc, #360]	; (80089dc <HAL_DMA_Init+0x214>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d05d      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a59      	ldr	r2, [pc, #356]	; (80089e0 <HAL_DMA_Init+0x218>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d058      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a57      	ldr	r2, [pc, #348]	; (80089e4 <HAL_DMA_Init+0x21c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d053      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a56      	ldr	r2, [pc, #344]	; (80089e8 <HAL_DMA_Init+0x220>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d04e      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a54      	ldr	r2, [pc, #336]	; (80089ec <HAL_DMA_Init+0x224>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d049      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a53      	ldr	r2, [pc, #332]	; (80089f0 <HAL_DMA_Init+0x228>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d044      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a51      	ldr	r2, [pc, #324]	; (80089f4 <HAL_DMA_Init+0x22c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d03f      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a50      	ldr	r2, [pc, #320]	; (80089f8 <HAL_DMA_Init+0x230>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d03a      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a4e      	ldr	r2, [pc, #312]	; (80089fc <HAL_DMA_Init+0x234>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d035      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a4d      	ldr	r2, [pc, #308]	; (8008a00 <HAL_DMA_Init+0x238>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d030      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a4b      	ldr	r2, [pc, #300]	; (8008a04 <HAL_DMA_Init+0x23c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d02b      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a4a      	ldr	r2, [pc, #296]	; (8008a08 <HAL_DMA_Init+0x240>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d026      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a48      	ldr	r2, [pc, #288]	; (8008a0c <HAL_DMA_Init+0x244>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d021      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a47      	ldr	r2, [pc, #284]	; (8008a10 <HAL_DMA_Init+0x248>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d01c      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a45      	ldr	r2, [pc, #276]	; (8008a14 <HAL_DMA_Init+0x24c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d017      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a44      	ldr	r2, [pc, #272]	; (8008a18 <HAL_DMA_Init+0x250>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d012      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a42      	ldr	r2, [pc, #264]	; (8008a1c <HAL_DMA_Init+0x254>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d00d      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a41      	ldr	r2, [pc, #260]	; (8008a20 <HAL_DMA_Init+0x258>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d008      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a3f      	ldr	r2, [pc, #252]	; (8008a24 <HAL_DMA_Init+0x25c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d003      	beq.n	8008932 <HAL_DMA_Init+0x16a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a3e      	ldr	r2, [pc, #248]	; (8008a28 <HAL_DMA_Init+0x260>)
 8008930:	4293      	cmp	r3, r2
 8008932:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695a      	ldr	r2, [r3, #20]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0206 	orr.w	r2, r2, #6
 8008952:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008954:	e00f      	b.n	8008976 <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8008956:	f7fe ff33 	bl	80077c0 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b05      	cmp	r3, #5
 8008962:	d908      	bls.n	8008976 <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2210      	movs	r2, #16
 8008968:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2203      	movs	r2, #3
 800896e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e015      	b.n	80089a2 <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	f003 0301 	and.w	r3, r3, #1
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e8      	bne.n	8008956 <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fb05 	bl	8008f94 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	40020050 	.word	0x40020050
 80089b0:	50020050 	.word	0x50020050
 80089b4:	400200d0 	.word	0x400200d0
 80089b8:	500200d0 	.word	0x500200d0
 80089bc:	40020150 	.word	0x40020150
 80089c0:	50020150 	.word	0x50020150
 80089c4:	400201d0 	.word	0x400201d0
 80089c8:	500201d0 	.word	0x500201d0
 80089cc:	40020250 	.word	0x40020250
 80089d0:	50020250 	.word	0x50020250
 80089d4:	400202d0 	.word	0x400202d0
 80089d8:	500202d0 	.word	0x500202d0
 80089dc:	40020350 	.word	0x40020350
 80089e0:	50020350 	.word	0x50020350
 80089e4:	400203d0 	.word	0x400203d0
 80089e8:	500203d0 	.word	0x500203d0
 80089ec:	40020450 	.word	0x40020450
 80089f0:	50020450 	.word	0x50020450
 80089f4:	400204d0 	.word	0x400204d0
 80089f8:	500204d0 	.word	0x500204d0
 80089fc:	40020550 	.word	0x40020550
 8008a00:	50020550 	.word	0x50020550
 8008a04:	400205d0 	.word	0x400205d0
 8008a08:	500205d0 	.word	0x500205d0
 8008a0c:	40020650 	.word	0x40020650
 8008a10:	50020650 	.word	0x50020650
 8008a14:	400206d0 	.word	0x400206d0
 8008a18:	500206d0 	.word	0x500206d0
 8008a1c:	40020750 	.word	0x40020750
 8008a20:	50020750 	.word	0x50020750
 8008a24:	400207d0 	.word	0x400207d0
 8008a28:	500207d0 	.word	0x500207d0

08008a2c <HAL_DMA_DeInit>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *const hdma)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance;
  uint32_t tickstart = HAL_GetTick();
 8008a34:	f7fe fec4 	bl	80077c0 <HAL_GetTick>
 8008a38:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <HAL_DMA_DeInit+0x18>
  {
    return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e0b9      	b.n	8008bb8 <HAL_DMA_DeInit+0x18c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008a4c:	f023 030f 	bic.w	r3, r3, #15
 8008a50:	60bb      	str	r3, [r7, #8]

  /* Disable the selected DMA Channel */
  __HAL_DMA_DISABLE(hdma);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	695a      	ldr	r2, [r3, #20]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f042 0206 	orr.w	r2, r2, #6
 8008a60:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008a62:	e00f      	b.n	8008a84 <HAL_DMA_DeInit+0x58>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8008a64:	f7fe feac 	bl	80077c0 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b05      	cmp	r3, #5
 8008a70:	d908      	bls.n	8008a84 <HAL_DMA_DeInit+0x58>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2210      	movs	r2, #16
 8008a76:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2203      	movs	r2, #3
 8008a7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e099      	b.n	8008bb8 <HAL_DMA_DeInit+0x18c>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1e8      	bne.n	8008a64 <HAL_DMA_DeInit+0x38>
    }
  }

  /* Reset DMA Channel registers */
  hdma->Instance->CLBAR = 0U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
  hdma->Instance->CCR   = 0U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	615a      	str	r2, [r3, #20]
  hdma->Instance->CTR1  = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->Instance->CTR2  = 0U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->Instance->CBR1  = 0U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->Instance->CSAR  = 0U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->Instance->CDAR  = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->Instance->CLLR  = 0U;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Reset 2D Addressing registers */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a3a      	ldr	r2, [pc, #232]	; (8008bc0 <HAL_DMA_DeInit+0x194>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d022      	beq.n	8008b22 <HAL_DMA_DeInit+0xf6>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a38      	ldr	r2, [pc, #224]	; (8008bc4 <HAL_DMA_DeInit+0x198>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d01d      	beq.n	8008b22 <HAL_DMA_DeInit+0xf6>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a37      	ldr	r2, [pc, #220]	; (8008bc8 <HAL_DMA_DeInit+0x19c>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d018      	beq.n	8008b22 <HAL_DMA_DeInit+0xf6>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a35      	ldr	r2, [pc, #212]	; (8008bcc <HAL_DMA_DeInit+0x1a0>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d013      	beq.n	8008b22 <HAL_DMA_DeInit+0xf6>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a34      	ldr	r2, [pc, #208]	; (8008bd0 <HAL_DMA_DeInit+0x1a4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d00e      	beq.n	8008b22 <HAL_DMA_DeInit+0xf6>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a32      	ldr	r2, [pc, #200]	; (8008bd4 <HAL_DMA_DeInit+0x1a8>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d009      	beq.n	8008b22 <HAL_DMA_DeInit+0xf6>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a31      	ldr	r2, [pc, #196]	; (8008bd8 <HAL_DMA_DeInit+0x1ac>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d004      	beq.n	8008b22 <HAL_DMA_DeInit+0xf6>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a2f      	ldr	r2, [pc, #188]	; (8008bdc <HAL_DMA_DeInit+0x1b0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d101      	bne.n	8008b26 <HAL_DMA_DeInit+0xfa>
 8008b22:	2301      	movs	r3, #1
 8008b24:	e000      	b.n	8008b28 <HAL_DMA_DeInit+0xfc>
 8008b26:	2300      	movs	r3, #0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d007      	beq.n	8008b3c <HAL_DMA_DeInit+0x110>
  {
    hdma->Instance->CTR3 = 0U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2200      	movs	r2, #0
 8008b32:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->Instance->CBR2 = 0U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear privilege attribute */
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b48:	3b50      	subs	r3, #80	; 0x50
 8008b4a:	09db      	lsrs	r3, r3, #7
 8008b4c:	f003 031f 	and.w	r3, r3, #31
 8008b50:	2101      	movs	r1, #1
 8008b52:	fa01 f303 	lsl.w	r3, r1, r3
 8008b56:	43db      	mvns	r3, r3
 8008b58:	401a      	ands	r2, r3
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	605a      	str	r2, [r3, #4]
  /* Clear secure attribute */
  CLEAR_BIT(p_dma_instance->SECCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008b66:	60da      	str	r2, [r3, #12]
                              DMA_FLAG_TO));

  /* Clean all callbacks */
  hdma->XferCpltCallback     = NULL;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	661a      	str	r2, [r3, #96]	; 0x60
  hdma->XferHalfCpltCallback = NULL;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	665a      	str	r2, [r3, #100]	; 0x64
  hdma->XferErrorCallback    = NULL;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	669a      	str	r2, [r3, #104]	; 0x68
  hdma->XferAbortCallback    = NULL;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	66da      	str	r2, [r3, #108]	; 0x6c
  hdma->XferSuspendCallback  = NULL;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	671a      	str	r2, [r3, #112]	; 0x70

  /* Clean DMA queue */
  hdma->LinkedListQueue = NULL;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Clean DMA parent */
  if (hdma->Parent != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <HAL_DMA_DeInit+0x16e>
  {
    hdma->Parent = NULL;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Update DMA channel operation mode */
  hdma->Mode = DMA_NORMAL;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	40020650 	.word	0x40020650
 8008bc4:	50020650 	.word	0x50020650
 8008bc8:	400206d0 	.word	0x400206d0
 8008bcc:	500206d0 	.word	0x500206d0
 8008bd0:	40020750 	.word	0x40020750
 8008bd4:	50020750 	.word	0x50020750
 8008bd8:	400207d0 	.word	0x400207d0
 8008bdc:	500207d0 	.word	0x500207d0

08008be0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e019      	b.n	8008c26 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d004      	beq.n	8008c08 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e00e      	b.n	8008c26 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2204      	movs	r2, #4
 8008c0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	6812      	ldr	r2, [r2, #0]
 8008c1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008c1e:	f043 0304 	orr.w	r3, r3, #4
 8008c22:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008c42:	f023 030f 	bic.w	r3, r3, #15
 8008c46:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c50:	3b50      	subs	r3, #80	; 0x50
 8008c52:	09db      	lsrs	r3, r3, #7
 8008c54:	f003 031f 	and.w	r3, r3, #31
 8008c58:	2201      	movs	r2, #1
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	4013      	ands	r3, r2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 8150 	beq.w	8008f0e <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d011      	beq.n	8008ca0 <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c92:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c98:	f043 0201 	orr.w	r2, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d011      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00a      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cc4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cca:	f043 0202 	orr.w	r2, r3, #2
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d011      	beq.n	8008d04 <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00a      	beq.n	8008d04 <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008cf6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfc:	f043 0204 	orr.w	r2, r3, #4
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d011      	beq.n	8008d36 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00a      	beq.n	8008d36 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008d28:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2e:	f043 0208 	orr.w	r2, r3, #8
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d013      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00c      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d5a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d003      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d055      	beq.n	8008e26 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d04e      	beq.n	8008e26 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008d90:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	d137      	bne.n	8008e0e <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695a      	ldr	r2, [r3, #20]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dac:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	695a      	ldr	r2, [r3, #20]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0202 	orr.w	r2, r2, #2
 8008dbc:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d004      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2203      	movs	r2, #3
 8008dd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008dd4:	e003      	b.n	8008dde <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dee:	2201      	movs	r2, #1
 8008df0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 8087 	beq.w	8008f12 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	4798      	blx	r3
        }

        return;
 8008e0c:	e081      	b.n	8008f12 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2205      	movs	r2, #5
 8008e12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d039      	beq.n	8008ea8 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d032      	beq.n	8008ea8 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d012      	beq.n	8008e74 <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d116      	bne.n	8008e86 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d111      	bne.n	8008e86 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e6e:	2201      	movs	r2, #1
 8008e70:	731a      	strb	r2, [r3, #12]
 8008e72:	e008      	b.n	8008e86 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d103      	bne.n	8008e86 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008e8e:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d031      	beq.n	8008f14 <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	695a      	ldr	r2, [r3, #20]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0202 	orr.w	r2, r2, #2
 8008ebe:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d004      	beq.n	8008ed8 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008ed6:	e003      	b.n	8008ee0 <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d007      	beq.n	8008f14 <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	4798      	blx	r3
 8008f0c:	e002      	b.n	8008f14 <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8008f0e:	bf00      	nop
 8008f10:	e000      	b.n	8008f14 <HAL_DMA_IRQHandler+0x2e2>
        return;
 8008f12:	bf00      	nop
    }
  }
}
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e02b      	b.n	8008f86 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008f36:	f023 030f 	bic.w	r3, r3, #15
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f44:	3b50      	subs	r3, #80	; 0x50
 8008f46:	09db      	lsrs	r3, r3, #7
 8008f48:	f003 031f 	and.w	r3, r3, #31
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	f003 0310 	and.w	r3, r3, #16
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d012      	beq.n	8008f84 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	f003 0311 	and.w	r3, r3, #17
 8008f64:	2b11      	cmp	r3, #17
 8008f66:	d106      	bne.n	8008f76 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	605a      	str	r2, [r3, #4]
 8008f74:	e006      	b.n	8008f84 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	43db      	mvns	r3, r3
 8008f7e:	401a      	ands	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
	...

08008f94 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	695a      	ldr	r2, [r3, #20]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a53      	ldr	r2, [pc, #332]	; (8009120 <DMA_Init+0x18c>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	f000 80a0 	beq.w	800911a <DMA_Init+0x186>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a51      	ldr	r2, [pc, #324]	; (8009124 <DMA_Init+0x190>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	f000 809a 	beq.w	800911a <DMA_Init+0x186>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a4f      	ldr	r2, [pc, #316]	; (8009128 <DMA_Init+0x194>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	f000 8094 	beq.w	800911a <DMA_Init+0x186>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a4d      	ldr	r2, [pc, #308]	; (800912c <DMA_Init+0x198>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	f000 808e 	beq.w	800911a <DMA_Init+0x186>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a4b      	ldr	r2, [pc, #300]	; (8009130 <DMA_Init+0x19c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	f000 8088 	beq.w	800911a <DMA_Init+0x186>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a49      	ldr	r2, [pc, #292]	; (8009134 <DMA_Init+0x1a0>)
 8009010:	4293      	cmp	r3, r2
 8009012:	f000 8082 	beq.w	800911a <DMA_Init+0x186>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a47      	ldr	r2, [pc, #284]	; (8009138 <DMA_Init+0x1a4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d07c      	beq.n	800911a <DMA_Init+0x186>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a45      	ldr	r2, [pc, #276]	; (800913c <DMA_Init+0x1a8>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d077      	beq.n	800911a <DMA_Init+0x186>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a44      	ldr	r2, [pc, #272]	; (8009140 <DMA_Init+0x1ac>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d072      	beq.n	800911a <DMA_Init+0x186>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a42      	ldr	r2, [pc, #264]	; (8009144 <DMA_Init+0x1b0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d06d      	beq.n	800911a <DMA_Init+0x186>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a41      	ldr	r2, [pc, #260]	; (8009148 <DMA_Init+0x1b4>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d068      	beq.n	800911a <DMA_Init+0x186>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a3f      	ldr	r2, [pc, #252]	; (800914c <DMA_Init+0x1b8>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d063      	beq.n	800911a <DMA_Init+0x186>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a3e      	ldr	r2, [pc, #248]	; (8009150 <DMA_Init+0x1bc>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d05e      	beq.n	800911a <DMA_Init+0x186>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a3c      	ldr	r2, [pc, #240]	; (8009154 <DMA_Init+0x1c0>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d059      	beq.n	800911a <DMA_Init+0x186>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a3b      	ldr	r2, [pc, #236]	; (8009158 <DMA_Init+0x1c4>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d054      	beq.n	800911a <DMA_Init+0x186>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a39      	ldr	r2, [pc, #228]	; (800915c <DMA_Init+0x1c8>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d04f      	beq.n	800911a <DMA_Init+0x186>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a38      	ldr	r2, [pc, #224]	; (8009160 <DMA_Init+0x1cc>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d04a      	beq.n	800911a <DMA_Init+0x186>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a36      	ldr	r2, [pc, #216]	; (8009164 <DMA_Init+0x1d0>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d045      	beq.n	800911a <DMA_Init+0x186>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a35      	ldr	r2, [pc, #212]	; (8009168 <DMA_Init+0x1d4>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d040      	beq.n	800911a <DMA_Init+0x186>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a33      	ldr	r2, [pc, #204]	; (800916c <DMA_Init+0x1d8>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d03b      	beq.n	800911a <DMA_Init+0x186>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a32      	ldr	r2, [pc, #200]	; (8009170 <DMA_Init+0x1dc>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d036      	beq.n	800911a <DMA_Init+0x186>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a30      	ldr	r2, [pc, #192]	; (8009174 <DMA_Init+0x1e0>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d031      	beq.n	800911a <DMA_Init+0x186>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a2f      	ldr	r2, [pc, #188]	; (8009178 <DMA_Init+0x1e4>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d02c      	beq.n	800911a <DMA_Init+0x186>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a2d      	ldr	r2, [pc, #180]	; (800917c <DMA_Init+0x1e8>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d027      	beq.n	800911a <DMA_Init+0x186>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a2c      	ldr	r2, [pc, #176]	; (8009180 <DMA_Init+0x1ec>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d022      	beq.n	800911a <DMA_Init+0x186>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a2a      	ldr	r2, [pc, #168]	; (8009184 <DMA_Init+0x1f0>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d01d      	beq.n	800911a <DMA_Init+0x186>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a29      	ldr	r2, [pc, #164]	; (8009188 <DMA_Init+0x1f4>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d018      	beq.n	800911a <DMA_Init+0x186>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a27      	ldr	r2, [pc, #156]	; (800918c <DMA_Init+0x1f8>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d013      	beq.n	800911a <DMA_Init+0x186>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a26      	ldr	r2, [pc, #152]	; (8009190 <DMA_Init+0x1fc>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d00e      	beq.n	800911a <DMA_Init+0x186>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a24      	ldr	r2, [pc, #144]	; (8009194 <DMA_Init+0x200>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d009      	beq.n	800911a <DMA_Init+0x186>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a23      	ldr	r2, [pc, #140]	; (8009198 <DMA_Init+0x204>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d004      	beq.n	800911a <DMA_Init+0x186>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a21      	ldr	r2, [pc, #132]	; (800919c <DMA_Init+0x208>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d142      	bne.n	80091a0 <DMA_Init+0x20c>
 800911a:	2301      	movs	r3, #1
 800911c:	e041      	b.n	80091a2 <DMA_Init+0x20e>
 800911e:	bf00      	nop
 8009120:	40020050 	.word	0x40020050
 8009124:	50020050 	.word	0x50020050
 8009128:	400200d0 	.word	0x400200d0
 800912c:	500200d0 	.word	0x500200d0
 8009130:	40020150 	.word	0x40020150
 8009134:	50020150 	.word	0x50020150
 8009138:	400201d0 	.word	0x400201d0
 800913c:	500201d0 	.word	0x500201d0
 8009140:	40020250 	.word	0x40020250
 8009144:	50020250 	.word	0x50020250
 8009148:	400202d0 	.word	0x400202d0
 800914c:	500202d0 	.word	0x500202d0
 8009150:	40020350 	.word	0x40020350
 8009154:	50020350 	.word	0x50020350
 8009158:	400203d0 	.word	0x400203d0
 800915c:	500203d0 	.word	0x500203d0
 8009160:	40020450 	.word	0x40020450
 8009164:	50020450 	.word	0x50020450
 8009168:	400204d0 	.word	0x400204d0
 800916c:	500204d0 	.word	0x500204d0
 8009170:	40020550 	.word	0x40020550
 8009174:	50020550 	.word	0x50020550
 8009178:	400205d0 	.word	0x400205d0
 800917c:	500205d0 	.word	0x500205d0
 8009180:	40020650 	.word	0x40020650
 8009184:	50020650 	.word	0x50020650
 8009188:	400206d0 	.word	0x400206d0
 800918c:	500206d0 	.word	0x500206d0
 8009190:	40020750 	.word	0x40020750
 8009194:	50020750 	.word	0x50020750
 8009198:	400207d0 	.word	0x400207d0
 800919c:	500207d0 	.word	0x500207d0
 80091a0:	2300      	movs	r3, #0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d012      	beq.n	80091cc <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ae:	3b01      	subs	r3, #1
 80091b0:	051b      	lsls	r3, r3, #20
 80091b2:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80091b6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	3b01      	subs	r3, #1
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80091c4:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	430a      	orrs	r2, r1
 80091de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ec:	431a      	orrs	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091fe:	f040 80b0 	bne.w	8009362 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a82      	ldr	r2, [pc, #520]	; (8009410 <DMA_Init+0x47c>)
 8009208:	4293      	cmp	r3, r2
 800920a:	f000 80a0 	beq.w	800934e <DMA_Init+0x3ba>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a80      	ldr	r2, [pc, #512]	; (8009414 <DMA_Init+0x480>)
 8009214:	4293      	cmp	r3, r2
 8009216:	f000 809a 	beq.w	800934e <DMA_Init+0x3ba>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a7e      	ldr	r2, [pc, #504]	; (8009418 <DMA_Init+0x484>)
 8009220:	4293      	cmp	r3, r2
 8009222:	f000 8094 	beq.w	800934e <DMA_Init+0x3ba>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a7c      	ldr	r2, [pc, #496]	; (800941c <DMA_Init+0x488>)
 800922c:	4293      	cmp	r3, r2
 800922e:	f000 808e 	beq.w	800934e <DMA_Init+0x3ba>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a7a      	ldr	r2, [pc, #488]	; (8009420 <DMA_Init+0x48c>)
 8009238:	4293      	cmp	r3, r2
 800923a:	f000 8088 	beq.w	800934e <DMA_Init+0x3ba>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a78      	ldr	r2, [pc, #480]	; (8009424 <DMA_Init+0x490>)
 8009244:	4293      	cmp	r3, r2
 8009246:	f000 8082 	beq.w	800934e <DMA_Init+0x3ba>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a76      	ldr	r2, [pc, #472]	; (8009428 <DMA_Init+0x494>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d07c      	beq.n	800934e <DMA_Init+0x3ba>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a74      	ldr	r2, [pc, #464]	; (800942c <DMA_Init+0x498>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d077      	beq.n	800934e <DMA_Init+0x3ba>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a73      	ldr	r2, [pc, #460]	; (8009430 <DMA_Init+0x49c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d072      	beq.n	800934e <DMA_Init+0x3ba>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a71      	ldr	r2, [pc, #452]	; (8009434 <DMA_Init+0x4a0>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d06d      	beq.n	800934e <DMA_Init+0x3ba>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a70      	ldr	r2, [pc, #448]	; (8009438 <DMA_Init+0x4a4>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d068      	beq.n	800934e <DMA_Init+0x3ba>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a6e      	ldr	r2, [pc, #440]	; (800943c <DMA_Init+0x4a8>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d063      	beq.n	800934e <DMA_Init+0x3ba>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a6d      	ldr	r2, [pc, #436]	; (8009440 <DMA_Init+0x4ac>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d05e      	beq.n	800934e <DMA_Init+0x3ba>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a6b      	ldr	r2, [pc, #428]	; (8009444 <DMA_Init+0x4b0>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d059      	beq.n	800934e <DMA_Init+0x3ba>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a6a      	ldr	r2, [pc, #424]	; (8009448 <DMA_Init+0x4b4>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d054      	beq.n	800934e <DMA_Init+0x3ba>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a68      	ldr	r2, [pc, #416]	; (800944c <DMA_Init+0x4b8>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d04f      	beq.n	800934e <DMA_Init+0x3ba>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a67      	ldr	r2, [pc, #412]	; (8009450 <DMA_Init+0x4bc>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d04a      	beq.n	800934e <DMA_Init+0x3ba>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a65      	ldr	r2, [pc, #404]	; (8009454 <DMA_Init+0x4c0>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d045      	beq.n	800934e <DMA_Init+0x3ba>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a64      	ldr	r2, [pc, #400]	; (8009458 <DMA_Init+0x4c4>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d040      	beq.n	800934e <DMA_Init+0x3ba>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a62      	ldr	r2, [pc, #392]	; (800945c <DMA_Init+0x4c8>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d03b      	beq.n	800934e <DMA_Init+0x3ba>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a61      	ldr	r2, [pc, #388]	; (8009460 <DMA_Init+0x4cc>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d036      	beq.n	800934e <DMA_Init+0x3ba>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a5f      	ldr	r2, [pc, #380]	; (8009464 <DMA_Init+0x4d0>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d031      	beq.n	800934e <DMA_Init+0x3ba>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a5e      	ldr	r2, [pc, #376]	; (8009468 <DMA_Init+0x4d4>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d02c      	beq.n	800934e <DMA_Init+0x3ba>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a5c      	ldr	r2, [pc, #368]	; (800946c <DMA_Init+0x4d8>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d027      	beq.n	800934e <DMA_Init+0x3ba>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a5b      	ldr	r2, [pc, #364]	; (8009470 <DMA_Init+0x4dc>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d022      	beq.n	800934e <DMA_Init+0x3ba>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a59      	ldr	r2, [pc, #356]	; (8009474 <DMA_Init+0x4e0>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d01d      	beq.n	800934e <DMA_Init+0x3ba>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a58      	ldr	r2, [pc, #352]	; (8009478 <DMA_Init+0x4e4>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d018      	beq.n	800934e <DMA_Init+0x3ba>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a56      	ldr	r2, [pc, #344]	; (800947c <DMA_Init+0x4e8>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d013      	beq.n	800934e <DMA_Init+0x3ba>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a55      	ldr	r2, [pc, #340]	; (8009480 <DMA_Init+0x4ec>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d00e      	beq.n	800934e <DMA_Init+0x3ba>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a53      	ldr	r2, [pc, #332]	; (8009484 <DMA_Init+0x4f0>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d009      	beq.n	800934e <DMA_Init+0x3ba>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a52      	ldr	r2, [pc, #328]	; (8009488 <DMA_Init+0x4f4>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d004      	beq.n	800934e <DMA_Init+0x3ba>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a50      	ldr	r2, [pc, #320]	; (800948c <DMA_Init+0x4f8>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d101      	bne.n	8009352 <DMA_Init+0x3be>
 800934e:	2301      	movs	r3, #1
 8009350:	e000      	b.n	8009354 <DMA_Init+0x3c0>
 8009352:	2300      	movs	r3, #0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00d      	beq.n	8009374 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	e008      	b.n	8009374 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800936a:	d103      	bne.n	8009374 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009372:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800937a:	4b45      	ldr	r3, [pc, #276]	; (8009490 <DMA_Init+0x4fc>)
 800937c:	4013      	ands	r3, r2
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	6812      	ldr	r2, [r2, #0]
 8009382:	68f9      	ldr	r1, [r7, #12]
 8009384:	430b      	orrs	r3, r1
 8009386:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2200      	movs	r2, #0
 800938e:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a36      	ldr	r2, [pc, #216]	; (8009470 <DMA_Init+0x4dc>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d022      	beq.n	80093e0 <DMA_Init+0x44c>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a35      	ldr	r2, [pc, #212]	; (8009474 <DMA_Init+0x4e0>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d01d      	beq.n	80093e0 <DMA_Init+0x44c>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a33      	ldr	r2, [pc, #204]	; (8009478 <DMA_Init+0x4e4>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d018      	beq.n	80093e0 <DMA_Init+0x44c>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a32      	ldr	r2, [pc, #200]	; (800947c <DMA_Init+0x4e8>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d013      	beq.n	80093e0 <DMA_Init+0x44c>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a30      	ldr	r2, [pc, #192]	; (8009480 <DMA_Init+0x4ec>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d00e      	beq.n	80093e0 <DMA_Init+0x44c>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a2f      	ldr	r2, [pc, #188]	; (8009484 <DMA_Init+0x4f0>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d009      	beq.n	80093e0 <DMA_Init+0x44c>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a2d      	ldr	r2, [pc, #180]	; (8009488 <DMA_Init+0x4f4>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d004      	beq.n	80093e0 <DMA_Init+0x44c>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a2c      	ldr	r2, [pc, #176]	; (800948c <DMA_Init+0x4f8>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d101      	bne.n	80093e4 <DMA_Init+0x450>
 80093e0:	2301      	movs	r3, #1
 80093e2:	e000      	b.n	80093e6 <DMA_Init+0x452>
 80093e4:	2300      	movs	r3, #0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d007      	beq.n	80093fa <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2200      	movs	r2, #0
 80093f0:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2200      	movs	r2, #0
 80093f8:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2200      	movs	r2, #0
 8009400:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	40020050 	.word	0x40020050
 8009414:	50020050 	.word	0x50020050
 8009418:	400200d0 	.word	0x400200d0
 800941c:	500200d0 	.word	0x500200d0
 8009420:	40020150 	.word	0x40020150
 8009424:	50020150 	.word	0x50020150
 8009428:	400201d0 	.word	0x400201d0
 800942c:	500201d0 	.word	0x500201d0
 8009430:	40020250 	.word	0x40020250
 8009434:	50020250 	.word	0x50020250
 8009438:	400202d0 	.word	0x400202d0
 800943c:	500202d0 	.word	0x500202d0
 8009440:	40020350 	.word	0x40020350
 8009444:	50020350 	.word	0x50020350
 8009448:	400203d0 	.word	0x400203d0
 800944c:	500203d0 	.word	0x500203d0
 8009450:	40020450 	.word	0x40020450
 8009454:	50020450 	.word	0x50020450
 8009458:	400204d0 	.word	0x400204d0
 800945c:	500204d0 	.word	0x500204d0
 8009460:	40020550 	.word	0x40020550
 8009464:	50020550 	.word	0x50020550
 8009468:	400205d0 	.word	0x400205d0
 800946c:	500205d0 	.word	0x500205d0
 8009470:	40020650 	.word	0x40020650
 8009474:	50020650 	.word	0x50020650
 8009478:	400206d0 	.word	0x400206d0
 800947c:	500206d0 	.word	0x500206d0
 8009480:	40020750 	.word	0x40020750
 8009484:	50020750 	.word	0x50020750
 8009488:	400207d0 	.word	0x400207d0
 800948c:	500207d0 	.word	0x500207d0
 8009490:	3cc03180 	.word	0x3cc03180

08009494 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800949c:	f7fe f990 	bl	80077c0 <HAL_GetTick>
 80094a0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e0dc      	b.n	8009666 <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a6f      	ldr	r2, [pc, #444]	; (8009670 <HAL_DMAEx_List_Init+0x1dc>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	f000 809f 	beq.w	80095f6 <HAL_DMAEx_List_Init+0x162>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a6d      	ldr	r2, [pc, #436]	; (8009674 <HAL_DMAEx_List_Init+0x1e0>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	f000 8099 	beq.w	80095f6 <HAL_DMAEx_List_Init+0x162>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a6b      	ldr	r2, [pc, #428]	; (8009678 <HAL_DMAEx_List_Init+0x1e4>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	f000 8093 	beq.w	80095f6 <HAL_DMAEx_List_Init+0x162>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a69      	ldr	r2, [pc, #420]	; (800967c <HAL_DMAEx_List_Init+0x1e8>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	f000 808d 	beq.w	80095f6 <HAL_DMAEx_List_Init+0x162>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a67      	ldr	r2, [pc, #412]	; (8009680 <HAL_DMAEx_List_Init+0x1ec>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	f000 8087 	beq.w	80095f6 <HAL_DMAEx_List_Init+0x162>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a65      	ldr	r2, [pc, #404]	; (8009684 <HAL_DMAEx_List_Init+0x1f0>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	f000 8081 	beq.w	80095f6 <HAL_DMAEx_List_Init+0x162>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a63      	ldr	r2, [pc, #396]	; (8009688 <HAL_DMAEx_List_Init+0x1f4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d07b      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a62      	ldr	r2, [pc, #392]	; (800968c <HAL_DMAEx_List_Init+0x1f8>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d076      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a60      	ldr	r2, [pc, #384]	; (8009690 <HAL_DMAEx_List_Init+0x1fc>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d071      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a5f      	ldr	r2, [pc, #380]	; (8009694 <HAL_DMAEx_List_Init+0x200>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d06c      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a5d      	ldr	r2, [pc, #372]	; (8009698 <HAL_DMAEx_List_Init+0x204>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d067      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a5c      	ldr	r2, [pc, #368]	; (800969c <HAL_DMAEx_List_Init+0x208>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d062      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a5a      	ldr	r2, [pc, #360]	; (80096a0 <HAL_DMAEx_List_Init+0x20c>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d05d      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a59      	ldr	r2, [pc, #356]	; (80096a4 <HAL_DMAEx_List_Init+0x210>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d058      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a57      	ldr	r2, [pc, #348]	; (80096a8 <HAL_DMAEx_List_Init+0x214>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d053      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a56      	ldr	r2, [pc, #344]	; (80096ac <HAL_DMAEx_List_Init+0x218>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d04e      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a54      	ldr	r2, [pc, #336]	; (80096b0 <HAL_DMAEx_List_Init+0x21c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d049      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a53      	ldr	r2, [pc, #332]	; (80096b4 <HAL_DMAEx_List_Init+0x220>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d044      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a51      	ldr	r2, [pc, #324]	; (80096b8 <HAL_DMAEx_List_Init+0x224>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d03f      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a50      	ldr	r2, [pc, #320]	; (80096bc <HAL_DMAEx_List_Init+0x228>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d03a      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a4e      	ldr	r2, [pc, #312]	; (80096c0 <HAL_DMAEx_List_Init+0x22c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d035      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a4d      	ldr	r2, [pc, #308]	; (80096c4 <HAL_DMAEx_List_Init+0x230>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d030      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a4b      	ldr	r2, [pc, #300]	; (80096c8 <HAL_DMAEx_List_Init+0x234>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d02b      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a4a      	ldr	r2, [pc, #296]	; (80096cc <HAL_DMAEx_List_Init+0x238>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d026      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a48      	ldr	r2, [pc, #288]	; (80096d0 <HAL_DMAEx_List_Init+0x23c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d021      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a47      	ldr	r2, [pc, #284]	; (80096d4 <HAL_DMAEx_List_Init+0x240>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d01c      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a45      	ldr	r2, [pc, #276]	; (80096d8 <HAL_DMAEx_List_Init+0x244>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d017      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a44      	ldr	r2, [pc, #272]	; (80096dc <HAL_DMAEx_List_Init+0x248>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d012      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a42      	ldr	r2, [pc, #264]	; (80096e0 <HAL_DMAEx_List_Init+0x24c>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d00d      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a41      	ldr	r2, [pc, #260]	; (80096e4 <HAL_DMAEx_List_Init+0x250>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d008      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a3f      	ldr	r2, [pc, #252]	; (80096e8 <HAL_DMAEx_List_Init+0x254>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d003      	beq.n	80095f6 <HAL_DMAEx_List_Init+0x162>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a3e      	ldr	r2, [pc, #248]	; (80096ec <HAL_DMAEx_List_Init+0x258>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2202      	movs	r2, #2
 8009604:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	695a      	ldr	r2, [r3, #20]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0206 	orr.w	r2, r2, #6
 8009616:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8009618:	e00f      	b.n	800963a <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800961a:	f7fe f8d1 	bl	80077c0 <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b05      	cmp	r3, #5
 8009626:	d908      	bls.n	800963a <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2210      	movs	r2, #16
 800962c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2203      	movs	r2, #3
 8009632:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e015      	b.n	8009666 <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e8      	bne.n	800961a <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fa27 	bl	8009a9c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	40020050 	.word	0x40020050
 8009674:	50020050 	.word	0x50020050
 8009678:	400200d0 	.word	0x400200d0
 800967c:	500200d0 	.word	0x500200d0
 8009680:	40020150 	.word	0x40020150
 8009684:	50020150 	.word	0x50020150
 8009688:	400201d0 	.word	0x400201d0
 800968c:	500201d0 	.word	0x500201d0
 8009690:	40020250 	.word	0x40020250
 8009694:	50020250 	.word	0x50020250
 8009698:	400202d0 	.word	0x400202d0
 800969c:	500202d0 	.word	0x500202d0
 80096a0:	40020350 	.word	0x40020350
 80096a4:	50020350 	.word	0x50020350
 80096a8:	400203d0 	.word	0x400203d0
 80096ac:	500203d0 	.word	0x500203d0
 80096b0:	40020450 	.word	0x40020450
 80096b4:	50020450 	.word	0x50020450
 80096b8:	400204d0 	.word	0x400204d0
 80096bc:	500204d0 	.word	0x500204d0
 80096c0:	40020550 	.word	0x40020550
 80096c4:	50020550 	.word	0x50020550
 80096c8:	400205d0 	.word	0x400205d0
 80096cc:	500205d0 	.word	0x500205d0
 80096d0:	40020650 	.word	0x40020650
 80096d4:	50020650 	.word	0x50020650
 80096d8:	400206d0 	.word	0x400206d0
 80096dc:	500206d0 	.word	0x500206d0
 80096e0:	40020750 	.word	0x40020750
 80096e4:	50020750 	.word	0x50020750
 80096e8:	400207d0 	.word	0x400207d0
 80096ec:	500207d0 	.word	0x500207d0

080096f0 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <HAL_DMAEx_List_BuildNode+0x16>
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e004      	b.n	8009714 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fb1d 	bl	8009d4c <DMA_List_BuildNode>

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08c      	sub	sp, #48	; 0x30
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <HAL_DMAEx_List_InsertNode+0x18>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e0b6      	b.n	80098a6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d104      	bne.n	800974a <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2204      	movs	r2, #4
 8009744:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e0ad      	b.n	80098a6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fc4c 	bl	8009ff0 <DMA_List_CheckNodesBaseAddresses>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d004      	beq.n	8009768 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2205      	movs	r2, #5
 8009762:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e09e      	b.n	80098a6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fc6d 	bl	800a050 <DMA_List_CheckNodesTypes>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d004      	beq.n	8009786 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2204      	movs	r2, #4
 8009780:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e08f      	b.n	80098a6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2202      	movs	r2, #2
 800978a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8009792:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fc93 	bl	800a0c8 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d11a      	bne.n	80097e0 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d106      	bne.n	80097be <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2201      	movs	r2, #1
 80097ba:	609a      	str	r2, [r3, #8]
 80097bc:	e06c      	b.n	8009898 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80097ca:	4013      	ands	r3, r2
 80097cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d0:	4319      	orrs	r1, r3
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2202      	movs	r2, #2
 80097dc:	609a      	str	r2, [r3, #8]
 80097de:	e05b      	b.n	8009898 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10f      	bne.n	8009806 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80097f0:	4013      	ands	r3, r2
 80097f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097f6:	4319      	orrs	r1, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	e043      	b.n	800988e <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8009806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009808:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 800980a:	f107 0314 	add.w	r3, r7, #20
 800980e:	461a      	mov	r2, r3
 8009810:	68b9      	ldr	r1, [r7, #8]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 fc88 	bl	800a128 <DMA_List_FindNode>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d132      	bne.n	8009884 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 800981e:	69fa      	ldr	r2, [r7, #28]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	429a      	cmp	r2, r3
 8009826:	d11a      	bne.n	800985e <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	461a      	mov	r2, r3
 8009836:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800983a:	4013      	ands	r3, r2
 800983c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800983e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009840:	4319      	orrs	r1, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800984e:	4013      	ands	r3, r2
 8009850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009854:	4319      	orrs	r1, r3
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800985c:	e017      	b.n	800988e <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800985e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009874:	4013      	ands	r3, r2
 8009876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800987a:	4319      	orrs	r1, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009882:	e004      	b.n	800988e <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2206      	movs	r2, #6
 8009888:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e00b      	b.n	80098a6 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2201      	movs	r2, #1
 80098a2:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3730      	adds	r7, #48	; 0x30
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b08a      	sub	sp, #40	; 0x28
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e052      	b.n	8009966 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d104      	bne.n	80098d2 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2202      	movs	r2, #2
 80098cc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e049      	b.n	8009966 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00c      	beq.n	80098f4 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d101      	bne.n	80098ea <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	e03d      	b.n	8009966 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2204      	movs	r2, #4
 80098ee:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e038      	b.n	8009966 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d104      	bne.n	8009906 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2204      	movs	r2, #4
 8009900:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e02f      	b.n	8009966 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2202      	movs	r2, #2
 800990a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f107 0220 	add.w	r2, r7, #32
 800991a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800991e:	4618      	mov	r0, r3
 8009920:	f000 fbd2 	bl	800a0c8 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8009928:	f107 030c 	add.w	r3, r7, #12
 800992c:	461a      	mov	r2, r3
 800992e:	2100      	movs	r1, #0
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fbf9 	bl	800a128 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009940:	4013      	ands	r3, r2
 8009942:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8009944:	69ba      	ldr	r2, [r7, #24]
 8009946:	4610      	mov	r0, r2
 8009948:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800994a:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800994c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2201      	movs	r2, #1
 8009962:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3728      	adds	r7, #40	; 0x28
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <HAL_DMAEx_List_LinkQ+0x16>
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e072      	b.n	8009a70 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009990:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b02      	cmp	r3, #2
 800999c:	d002      	beq.n	80099a4 <HAL_DMAEx_List_LinkQ+0x34>
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	2b05      	cmp	r3, #5
 80099a2:	d108      	bne.n	80099b6 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2240      	movs	r2, #64	; 0x40
 80099a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e05c      	b.n	8009a70 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	7b1b      	ldrb	r3, [r3, #12]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d104      	bne.n	80099ca <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	2201      	movs	r2, #1
 80099c4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e052      	b.n	8009a70 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a2b      	ldr	r2, [pc, #172]	; (8009a7c <HAL_DMAEx_List_LinkQ+0x10c>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d022      	beq.n	8009a1a <HAL_DMAEx_List_LinkQ+0xaa>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a29      	ldr	r2, [pc, #164]	; (8009a80 <HAL_DMAEx_List_LinkQ+0x110>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d01d      	beq.n	8009a1a <HAL_DMAEx_List_LinkQ+0xaa>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a28      	ldr	r2, [pc, #160]	; (8009a84 <HAL_DMAEx_List_LinkQ+0x114>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d018      	beq.n	8009a1a <HAL_DMAEx_List_LinkQ+0xaa>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a26      	ldr	r2, [pc, #152]	; (8009a88 <HAL_DMAEx_List_LinkQ+0x118>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d013      	beq.n	8009a1a <HAL_DMAEx_List_LinkQ+0xaa>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a25      	ldr	r2, [pc, #148]	; (8009a8c <HAL_DMAEx_List_LinkQ+0x11c>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d00e      	beq.n	8009a1a <HAL_DMAEx_List_LinkQ+0xaa>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a23      	ldr	r2, [pc, #140]	; (8009a90 <HAL_DMAEx_List_LinkQ+0x120>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d009      	beq.n	8009a1a <HAL_DMAEx_List_LinkQ+0xaa>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a22      	ldr	r2, [pc, #136]	; (8009a94 <HAL_DMAEx_List_LinkQ+0x124>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d004      	beq.n	8009a1a <HAL_DMAEx_List_LinkQ+0xaa>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a20      	ldr	r2, [pc, #128]	; (8009a98 <HAL_DMAEx_List_LinkQ+0x128>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d101      	bne.n	8009a1e <HAL_DMAEx_List_LinkQ+0xae>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e000      	b.n	8009a20 <HAL_DMAEx_List_LinkQ+0xb0>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10b      	bne.n	8009a3c <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d004      	beq.n	8009a3c <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2203      	movs	r2, #3
 8009a36:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e019      	b.n	8009a70 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a40:	2b81      	cmp	r3, #129	; 0x81
 8009a42:	d108      	bne.n	8009a56 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10d      	bne.n	8009a68 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2204      	movs	r2, #4
 8009a50:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e00c      	b.n	8009a70 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d004      	beq.n	8009a68 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2204      	movs	r2, #4
 8009a62:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e003      	b.n	8009a70 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	40020650 	.word	0x40020650
 8009a80:	50020650 	.word	0x50020650
 8009a84:	400206d0 	.word	0x400206d0
 8009a88:	500206d0 	.word	0x500206d0
 8009a8c:	40020750 	.word	0x40020750
 8009a90:	50020750 	.word	0x50020750
 8009a94:	400207d0 	.word	0x400207d0
 8009a98:	500207d0 	.word	0x500207d0

08009a9c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a85      	ldr	r2, [pc, #532]	; (8009ccc <DMA_List_Init+0x230>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	f000 80a0 	beq.w	8009bfc <DMA_List_Init+0x160>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a83      	ldr	r2, [pc, #524]	; (8009cd0 <DMA_List_Init+0x234>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	f000 809a 	beq.w	8009bfc <DMA_List_Init+0x160>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a81      	ldr	r2, [pc, #516]	; (8009cd4 <DMA_List_Init+0x238>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	f000 8094 	beq.w	8009bfc <DMA_List_Init+0x160>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a7f      	ldr	r2, [pc, #508]	; (8009cd8 <DMA_List_Init+0x23c>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	f000 808e 	beq.w	8009bfc <DMA_List_Init+0x160>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a7d      	ldr	r2, [pc, #500]	; (8009cdc <DMA_List_Init+0x240>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	f000 8088 	beq.w	8009bfc <DMA_List_Init+0x160>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a7b      	ldr	r2, [pc, #492]	; (8009ce0 <DMA_List_Init+0x244>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	f000 8082 	beq.w	8009bfc <DMA_List_Init+0x160>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a79      	ldr	r2, [pc, #484]	; (8009ce4 <DMA_List_Init+0x248>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d07c      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a78      	ldr	r2, [pc, #480]	; (8009ce8 <DMA_List_Init+0x24c>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d077      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a76      	ldr	r2, [pc, #472]	; (8009cec <DMA_List_Init+0x250>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d072      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a75      	ldr	r2, [pc, #468]	; (8009cf0 <DMA_List_Init+0x254>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d06d      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a73      	ldr	r2, [pc, #460]	; (8009cf4 <DMA_List_Init+0x258>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d068      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a72      	ldr	r2, [pc, #456]	; (8009cf8 <DMA_List_Init+0x25c>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d063      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a70      	ldr	r2, [pc, #448]	; (8009cfc <DMA_List_Init+0x260>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d05e      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a6f      	ldr	r2, [pc, #444]	; (8009d00 <DMA_List_Init+0x264>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d059      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a6d      	ldr	r2, [pc, #436]	; (8009d04 <DMA_List_Init+0x268>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d054      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a6c      	ldr	r2, [pc, #432]	; (8009d08 <DMA_List_Init+0x26c>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d04f      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a6a      	ldr	r2, [pc, #424]	; (8009d0c <DMA_List_Init+0x270>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d04a      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a69      	ldr	r2, [pc, #420]	; (8009d10 <DMA_List_Init+0x274>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d045      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a67      	ldr	r2, [pc, #412]	; (8009d14 <DMA_List_Init+0x278>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d040      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a66      	ldr	r2, [pc, #408]	; (8009d18 <DMA_List_Init+0x27c>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d03b      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a64      	ldr	r2, [pc, #400]	; (8009d1c <DMA_List_Init+0x280>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d036      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a63      	ldr	r2, [pc, #396]	; (8009d20 <DMA_List_Init+0x284>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d031      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a61      	ldr	r2, [pc, #388]	; (8009d24 <DMA_List_Init+0x288>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d02c      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a60      	ldr	r2, [pc, #384]	; (8009d28 <DMA_List_Init+0x28c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d027      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a5e      	ldr	r2, [pc, #376]	; (8009d2c <DMA_List_Init+0x290>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d022      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a5d      	ldr	r2, [pc, #372]	; (8009d30 <DMA_List_Init+0x294>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d01d      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a5b      	ldr	r2, [pc, #364]	; (8009d34 <DMA_List_Init+0x298>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d018      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a5a      	ldr	r2, [pc, #360]	; (8009d38 <DMA_List_Init+0x29c>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d013      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a58      	ldr	r2, [pc, #352]	; (8009d3c <DMA_List_Init+0x2a0>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d00e      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a57      	ldr	r2, [pc, #348]	; (8009d40 <DMA_List_Init+0x2a4>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d009      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a55      	ldr	r2, [pc, #340]	; (8009d44 <DMA_List_Init+0x2a8>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d004      	beq.n	8009bfc <DMA_List_Init+0x160>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a54      	ldr	r2, [pc, #336]	; (8009d48 <DMA_List_Init+0x2ac>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d101      	bne.n	8009c00 <DMA_List_Init+0x164>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <DMA_List_Init+0x166>
 8009c00:	2300      	movs	r3, #0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d004      	beq.n	8009c10 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009c34:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2200      	movs	r2, #0
 8009c44:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a36      	ldr	r2, [pc, #216]	; (8009d2c <DMA_List_Init+0x290>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d022      	beq.n	8009c9e <DMA_List_Init+0x202>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a34      	ldr	r2, [pc, #208]	; (8009d30 <DMA_List_Init+0x294>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d01d      	beq.n	8009c9e <DMA_List_Init+0x202>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a33      	ldr	r2, [pc, #204]	; (8009d34 <DMA_List_Init+0x298>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d018      	beq.n	8009c9e <DMA_List_Init+0x202>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a31      	ldr	r2, [pc, #196]	; (8009d38 <DMA_List_Init+0x29c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d013      	beq.n	8009c9e <DMA_List_Init+0x202>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a30      	ldr	r2, [pc, #192]	; (8009d3c <DMA_List_Init+0x2a0>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d00e      	beq.n	8009c9e <DMA_List_Init+0x202>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a2e      	ldr	r2, [pc, #184]	; (8009d40 <DMA_List_Init+0x2a4>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d009      	beq.n	8009c9e <DMA_List_Init+0x202>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a2d      	ldr	r2, [pc, #180]	; (8009d44 <DMA_List_Init+0x2a8>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d004      	beq.n	8009c9e <DMA_List_Init+0x202>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a2b      	ldr	r2, [pc, #172]	; (8009d48 <DMA_List_Init+0x2ac>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d101      	bne.n	8009ca2 <DMA_List_Init+0x206>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <DMA_List_Init+0x208>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d007      	beq.n	8009cb8 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2200      	movs	r2, #0
 8009cae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009cc0:	bf00      	nop
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	40020050 	.word	0x40020050
 8009cd0:	50020050 	.word	0x50020050
 8009cd4:	400200d0 	.word	0x400200d0
 8009cd8:	500200d0 	.word	0x500200d0
 8009cdc:	40020150 	.word	0x40020150
 8009ce0:	50020150 	.word	0x50020150
 8009ce4:	400201d0 	.word	0x400201d0
 8009ce8:	500201d0 	.word	0x500201d0
 8009cec:	40020250 	.word	0x40020250
 8009cf0:	50020250 	.word	0x50020250
 8009cf4:	400202d0 	.word	0x400202d0
 8009cf8:	500202d0 	.word	0x500202d0
 8009cfc:	40020350 	.word	0x40020350
 8009d00:	50020350 	.word	0x50020350
 8009d04:	400203d0 	.word	0x400203d0
 8009d08:	500203d0 	.word	0x500203d0
 8009d0c:	40020450 	.word	0x40020450
 8009d10:	50020450 	.word	0x50020450
 8009d14:	400204d0 	.word	0x400204d0
 8009d18:	500204d0 	.word	0x500204d0
 8009d1c:	40020550 	.word	0x40020550
 8009d20:	50020550 	.word	0x50020550
 8009d24:	400205d0 	.word	0x400205d0
 8009d28:	500205d0 	.word	0x500205d0
 8009d2c:	40020650 	.word	0x40020650
 8009d30:	50020650 	.word	0x50020650
 8009d34:	400206d0 	.word	0x400206d0
 8009d38:	500206d0 	.word	0x500206d0
 8009d3c:	40020750 	.word	0x40020750
 8009d40:	50020750 	.word	0x50020750
 8009d44:	400207d0 	.word	0x400207d0
 8009d48:	500207d0 	.word	0x500207d0

08009d4c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009d5e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8009d64:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009d6a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8009d70:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0320 	and.w	r3, r3, #32
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d017      	beq.n	8009db2 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d94:	3b01      	subs	r3, #1
 8009d96:	051b      	lsls	r3, r3, #20
 8009d98:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009d9c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	3b01      	subs	r3, #1
 8009da4:	011b      	lsls	r3, r3, #4
 8009da6:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009daa:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009dac:	431a      	orrs	r2, r3
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6859      	ldr	r1, [r3, #4]
 8009dba:	f240 237f 	movw	r3, #639	; 0x27f
 8009dbe:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dce:	d10c      	bne.n	8009dea <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d011      	beq.n	8009e00 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	605a      	str	r2, [r3, #4]
 8009de8:	e00a      	b.n	8009e00 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009df2:	d105      	bne.n	8009e00 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00f      	beq.n	8009e28 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e14:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e1a:	041b      	lsls	r3, r3, #16
 8009e1c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8009e20:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8009e22:	431a      	orrs	r2, r3
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d04e      	beq.n	8009edc <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e46:	3b01      	subs	r3, #1
 8009e48:	0419      	lsls	r1, r3, #16
 8009e4a:	4b67      	ldr	r3, [pc, #412]	; (8009fe8 <DMA_List_BuildNode+0x29c>)
 8009e4c:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	da06      	bge.n	8009e6a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	609a      	str	r2, [r3, #8]
 8009e68:	e005      	b.n	8009e76 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	da06      	bge.n	8009e8c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	609a      	str	r2, [r3, #8]
 8009e8a:	e005      	b.n	8009e98 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	da06      	bge.n	8009eae <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	609a      	str	r2, [r3, #8]
 8009eac:	e005      	b.n	8009eba <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	da06      	bge.n	8009ed0 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	609a      	str	r2, [r3, #8]
 8009ece:	e005      	b.n	8009edc <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0302 	and.w	r3, r3, #2
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d059      	beq.n	8009fac <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	da09      	bge.n	8009f14 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f04:	425b      	negs	r3, r3
 8009f06:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	615a      	str	r2, [r3, #20]
 8009f12:	e005      	b.n	8009f20 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f18:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	da0d      	bge.n	8009f44 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2c:	425b      	negs	r3, r3
 8009f2e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	695a      	ldr	r2, [r3, #20]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	0419      	lsls	r1, r3, #16
 8009f38:	4b2c      	ldr	r3, [pc, #176]	; (8009fec <DMA_List_BuildNode+0x2a0>)
 8009f3a:	400b      	ands	r3, r1
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	615a      	str	r2, [r3, #20]
 8009f42:	e009      	b.n	8009f58 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f4c:	0419      	lsls	r1, r3, #16
 8009f4e:	4b27      	ldr	r3, [pc, #156]	; (8009fec <DMA_List_BuildNode+0x2a0>)
 8009f50:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8009f52:	431a      	orrs	r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	da08      	bge.n	8009f72 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f64:	425b      	negs	r3, r3
 8009f66:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	619a      	str	r2, [r3, #24]
 8009f70:	e004      	b.n	8009f7c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f76:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	da0b      	bge.n	8009f9c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f88:	425b      	negs	r3, r3
 8009f8a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009f94:	431a      	orrs	r2, r3
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	619a      	str	r2, [r3, #24]
 8009f9a:	e007      	b.n	8009fac <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fa4:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d006      	beq.n	8009fce <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	6a1b      	ldr	r3, [r3, #32]
 8009fc4:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8009fcc:	e005      	b.n	8009fda <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	621a      	str	r2, [r3, #32]
}
 8009fda:	bf00      	nop
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	07ff0000 	.word	0x07ff0000
 8009fec:	1fff0000 	.word	0x1fff0000

08009ff0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	431a      	orrs	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4313      	orrs	r3, r2
 800a006:	0c1b      	lsrs	r3, r3, #16
 800a008:	041b      	lsls	r3, r3, #16
 800a00a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800a00c:	2300      	movs	r3, #0
 800a00e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	617b      	str	r3, [r7, #20]
 800a01a:	e00a      	b.n	800a032 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	e004      	b.n	800a032 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	0c1b      	lsrs	r3, r3, #16
 800a036:	041b      	lsls	r3, r3, #16
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d001      	beq.n	800a042 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800a03e:	2301      	movs	r3, #1
 800a040:	e000      	b.n	800a044 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	371c      	adds	r7, #28
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800a050:	b480      	push	{r7}
 800a052:	b087      	sub	sp, #28
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800a05c:	2300      	movs	r3, #0
 800a05e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d004      	beq.n	800a070 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	617b      	str	r3, [r7, #20]
 800a06e:	e00e      	b.n	800a08e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d004      	beq.n	800a080 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	617b      	str	r3, [r7, #20]
 800a07e:	e006      	b.n	800a08e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d007      	beq.n	800a0a4 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d001      	beq.n	800a0a4 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	e00b      	b.n	800a0bc <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d007      	beq.n	800a0ba <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d001      	beq.n	800a0ba <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e000      	b.n	800a0bc <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	371c      	adds	r7, #28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6a1b      	ldr	r3, [r3, #32]
 800a0d8:	f003 0302 	and.w	r3, r3, #2
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00c      	beq.n	800a0fa <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	4a0d      	ldr	r2, [pc, #52]	; (800a120 <DMA_List_GetCLLRNodeInfo+0x58>)
 800a0ea:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00f      	beq.n	800a112 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2207      	movs	r2, #7
 800a0f6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800a0f8:	e00b      	b.n	800a112 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	4a08      	ldr	r2, [pc, #32]	; (800a124 <DMA_List_GetCLLRNodeInfo+0x5c>)
 800a104:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2205      	movs	r2, #5
 800a110:	601a      	str	r2, [r3, #0]
}
 800a112:	bf00      	nop
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	fe010000 	.word	0xfe010000
 800a124:	f8010000 	.word	0xf8010000

0800a128 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 800a128:	b480      	push	{r7}
 800a12a:	b089      	sub	sp, #36	; 0x24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800a138:	2300      	movs	r3, #0
 800a13a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d142      	bne.n	800a1d2 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800a14c:	e01d      	b.n	800a18a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d107      	bne.n	800a164 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	461a      	mov	r2, r3
 800a15a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a15e:	4013      	ands	r3, r2
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	e00f      	b.n	800a184 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	0c1b      	lsrs	r3, r3, #16
 800a16e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	4413      	add	r3, r2
 800a174:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800a17c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a180:	4013      	ands	r3, r2
 800a182:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	3301      	adds	r3, #1
 800a188:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	429a      	cmp	r2, r3
 800a192:	d3dc      	bcc.n	800a14e <DMA_List_FindNode+0x26>
 800a194:	e029      	b.n	800a1ea <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d107      	bne.n	800a1ac <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	61bb      	str	r3, [r7, #24]
 800a1aa:	e00f      	b.n	800a1cc <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	0c1b      	lsrs	r3, r3, #16
 800a1b6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800a1b8:	69ba      	ldr	r2, [r7, #24]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800a1c4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d206      	bcs.n	800a1ea <DMA_List_FindNode+0xc2>
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	69ba      	ldr	r2, [r7, #24]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d1d5      	bne.n	800a196 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d008      	beq.n	800a202 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d001      	beq.n	800a202 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e02b      	b.n	800a25a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	69fa      	ldr	r2, [r7, #28]
 800a206:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	0c1b      	lsrs	r3, r3, #16
 800a20e:	041b      	lsls	r3, r3, #16
 800a210:	697a      	ldr	r2, [r7, #20]
 800a212:	431a      	orrs	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	0c1b      	lsrs	r3, r3, #16
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	69ba      	ldr	r2, [r7, #24]
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	461a      	mov	r2, r3
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00f      	beq.n	800a258 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	461a      	mov	r2, r3
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a244:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a248:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	0c1b      	lsrs	r3, r3, #16
 800a250:	041b      	lsls	r3, r3, #16
 800a252:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3724      	adds	r7, #36	; 0x24
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800a266:	b480      	push	{r7}
 800a268:	b087      	sub	sp, #28
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	60f8      	str	r0, [r7, #12]
 800a26e:	460b      	mov	r3, r1
 800a270:	607a      	str	r2, [r7, #4]
 800a272:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800a278:	7afb      	ldrb	r3, [r7, #11]
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d011      	beq.n	800a2a2 <HAL_EXTI_RegisterCallback+0x3c>
 800a27e:	2b02      	cmp	r3, #2
 800a280:	dc13      	bgt.n	800a2aa <HAL_EXTI_RegisterCallback+0x44>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d002      	beq.n	800a28c <HAL_EXTI_RegisterCallback+0x26>
 800a286:	2b01      	cmp	r3, #1
 800a288:	d007      	beq.n	800a29a <HAL_EXTI_RegisterCallback+0x34>
 800a28a:	e00e      	b.n	800a2aa <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	609a      	str	r2, [r3, #8]
      break;
 800a298:	e00a      	b.n	800a2b0 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	605a      	str	r2, [r3, #4]
      break;
 800a2a0:	e006      	b.n	800a2b0 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	609a      	str	r2, [r3, #8]
      break;
 800a2a8:	e002      	b.n	800a2b0 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ae:	bf00      	nop
  }

  return status;
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e003      	b.n	800a2da <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a2d8:	2300      	movs	r3, #0
  }
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
	...

0800a2e8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	0c1b      	lsrs	r3, r3, #16
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 031f 	and.w	r3, r3, #31
 800a304:	2201      	movs	r2, #1
 800a306:	fa02 f303 	lsl.w	r3, r2, r3
 800a30a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	4b17      	ldr	r3, [pc, #92]	; (800a370 <HAL_EXTI_IRQHandler+0x88>)
 800a312:	4413      	add	r3, r2
 800a314:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	4013      	ands	r3, r2
 800a31e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d009      	beq.n	800a33a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	4b0d      	ldr	r3, [pc, #52]	; (800a374 <HAL_EXTI_IRQHandler+0x8c>)
 800a340:	4413      	add	r3, r2
 800a342:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	4013      	ands	r3, r2
 800a34c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d009      	beq.n	800a368 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	4798      	blx	r3
    }
  }
}
 800a368:	bf00      	nop
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	4602200c 	.word	0x4602200c
 800a374:	46022010 	.word	0x46022010

0800a378 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800a378:	b480      	push	{r7}
 800a37a:	b089      	sub	sp, #36	; 0x24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a382:	2300      	movs	r3, #0
 800a384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a38a:	e1ba      	b.n	800a702 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	2101      	movs	r1, #1
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	fa01 f303 	lsl.w	r3, r1, r3
 800a398:	4013      	ands	r3, r2
 800a39a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f000 81aa 	beq.w	800a6fc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a55      	ldr	r2, [pc, #340]	; (800a500 <HAL_GPIO_Init+0x188>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d15d      	bne.n	800a46c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a3be:	43db      	mvns	r3, r3
 800a3c0:	69fa      	ldr	r2, [r7, #28]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f003 0201 	and.w	r2, r3, #1
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d4:	69fa      	ldr	r2, [r7, #28]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800a3e0:	4a48      	ldr	r2, [pc, #288]	; (800a504 <HAL_GPIO_Init+0x18c>)
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3e8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a3ea:	4a46      	ldr	r2, [pc, #280]	; (800a504 <HAL_GPIO_Init+0x18c>)
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	00db      	lsls	r3, r3, #3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	08da      	lsrs	r2, r3, #3
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	3208      	adds	r2, #8
 800a3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a402:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	220f      	movs	r2, #15
 800a40e:	fa02 f303 	lsl.w	r3, r2, r3
 800a412:	43db      	mvns	r3, r3
 800a414:	69fa      	ldr	r2, [r7, #28]
 800a416:	4013      	ands	r3, r2
 800a418:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	f003 0307 	and.w	r3, r3, #7
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	220b      	movs	r2, #11
 800a424:	fa02 f303 	lsl.w	r3, r2, r3
 800a428:	69fa      	ldr	r2, [r7, #28]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	08da      	lsrs	r2, r3, #3
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	3208      	adds	r2, #8
 800a436:	69f9      	ldr	r1, [r7, #28]
 800a438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	2203      	movs	r2, #3
 800a448:	fa02 f303 	lsl.w	r3, r2, r3
 800a44c:	43db      	mvns	r3, r3
 800a44e:	69fa      	ldr	r2, [r7, #28]
 800a450:	4013      	ands	r3, r2
 800a452:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	2202      	movs	r2, #2
 800a45a:	fa02 f303 	lsl.w	r3, r2, r3
 800a45e:	69fa      	ldr	r2, [r7, #28]
 800a460:	4313      	orrs	r3, r2
 800a462:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	69fa      	ldr	r2, [r7, #28]
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	e067      	b.n	800a53c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	2b02      	cmp	r3, #2
 800a472:	d003      	beq.n	800a47c <HAL_GPIO_Init+0x104>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	2b12      	cmp	r3, #18
 800a47a:	d145      	bne.n	800a508 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	08da      	lsrs	r2, r3, #3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	3208      	adds	r2, #8
 800a484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a488:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f003 0307 	and.w	r3, r3, #7
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	220f      	movs	r2, #15
 800a494:	fa02 f303 	lsl.w	r3, r2, r3
 800a498:	43db      	mvns	r3, r3
 800a49a:	69fa      	ldr	r2, [r7, #28]
 800a49c:	4013      	ands	r3, r2
 800a49e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	f003 020f 	and.w	r2, r3, #15
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f003 0307 	and.w	r3, r3, #7
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b4:	69fa      	ldr	r2, [r7, #28]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	08da      	lsrs	r2, r3, #3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	3208      	adds	r2, #8
 800a4c2:	69f9      	ldr	r1, [r7, #28]
 800a4c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	005b      	lsls	r3, r3, #1
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d8:	43db      	mvns	r3, r3
 800a4da:	69fa      	ldr	r2, [r7, #28]
 800a4dc:	4013      	ands	r3, r2
 800a4de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f003 0203 	and.w	r2, r3, #3
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	005b      	lsls	r3, r3, #1
 800a4ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f0:	69fa      	ldr	r2, [r7, #28]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	69fa      	ldr	r2, [r7, #28]
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	e01e      	b.n	800a53c <HAL_GPIO_Init+0x1c4>
 800a4fe:	bf00      	nop
 800a500:	46020000 	.word	0x46020000
 800a504:	0801f8c8 	.word	0x0801f8c8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	2203      	movs	r2, #3
 800a514:	fa02 f303 	lsl.w	r3, r2, r3
 800a518:	43db      	mvns	r3, r3
 800a51a:	69fa      	ldr	r2, [r7, #28]
 800a51c:	4013      	ands	r3, r2
 800a51e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	f003 0203 	and.w	r2, r3, #3
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	005b      	lsls	r3, r3, #1
 800a52c:	fa02 f303 	lsl.w	r3, r2, r3
 800a530:	69fa      	ldr	r2, [r7, #28]
 800a532:	4313      	orrs	r3, r2
 800a534:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	69fa      	ldr	r2, [r7, #28]
 800a53a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d00b      	beq.n	800a55c <HAL_GPIO_Init+0x1e4>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d007      	beq.n	800a55c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a550:	2b11      	cmp	r3, #17
 800a552:	d003      	beq.n	800a55c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	2b12      	cmp	r3, #18
 800a55a:	d130      	bne.n	800a5be <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	005b      	lsls	r3, r3, #1
 800a566:	2203      	movs	r2, #3
 800a568:	fa02 f303 	lsl.w	r3, r2, r3
 800a56c:	43db      	mvns	r3, r3
 800a56e:	69fa      	ldr	r2, [r7, #28]
 800a570:	4013      	ands	r3, r2
 800a572:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	68da      	ldr	r2, [r3, #12]
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	fa02 f303 	lsl.w	r3, r2, r3
 800a580:	69fa      	ldr	r2, [r7, #28]
 800a582:	4313      	orrs	r3, r2
 800a584:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	69fa      	ldr	r2, [r7, #28]
 800a58a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a592:	2201      	movs	r2, #1
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	fa02 f303 	lsl.w	r3, r2, r3
 800a59a:	43db      	mvns	r3, r3
 800a59c:	69fa      	ldr	r2, [r7, #28]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	091b      	lsrs	r3, r3, #4
 800a5a8:	f003 0201 	and.w	r2, r3, #1
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b2:	69fa      	ldr	r2, [r7, #28]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	69fa      	ldr	r2, [r7, #28]
 800a5bc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d017      	beq.n	800a5f6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	2203      	movs	r2, #3
 800a5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d6:	43db      	mvns	r3, r3
 800a5d8:	69fa      	ldr	r2, [r7, #28]
 800a5da:	4013      	ands	r3, r2
 800a5dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ea:	69fa      	ldr	r2, [r7, #28]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	69fa      	ldr	r2, [r7, #28]
 800a5f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d07c      	beq.n	800a6fc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800a602:	4a47      	ldr	r2, [pc, #284]	; (800a720 <HAL_GPIO_Init+0x3a8>)
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	089b      	lsrs	r3, r3, #2
 800a608:	3318      	adds	r3, #24
 800a60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a60e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	220f      	movs	r2, #15
 800a61a:	fa02 f303 	lsl.w	r3, r2, r3
 800a61e:	43db      	mvns	r3, r3
 800a620:	69fa      	ldr	r2, [r7, #28]
 800a622:	4013      	ands	r3, r2
 800a624:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	0a9a      	lsrs	r2, r3, #10
 800a62a:	4b3e      	ldr	r3, [pc, #248]	; (800a724 <HAL_GPIO_Init+0x3ac>)
 800a62c:	4013      	ands	r3, r2
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	f002 0203 	and.w	r2, r2, #3
 800a634:	00d2      	lsls	r2, r2, #3
 800a636:	4093      	lsls	r3, r2
 800a638:	69fa      	ldr	r2, [r7, #28]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800a63e:	4938      	ldr	r1, [pc, #224]	; (800a720 <HAL_GPIO_Init+0x3a8>)
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	089b      	lsrs	r3, r3, #2
 800a644:	3318      	adds	r3, #24
 800a646:	69fa      	ldr	r2, [r7, #28]
 800a648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800a64c:	4b34      	ldr	r3, [pc, #208]	; (800a720 <HAL_GPIO_Init+0x3a8>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	43db      	mvns	r3, r3
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	4013      	ands	r3, r2
 800a65a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d003      	beq.n	800a670 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800a668:	69fa      	ldr	r2, [r7, #28]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800a670:	4a2b      	ldr	r2, [pc, #172]	; (800a720 <HAL_GPIO_Init+0x3a8>)
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800a676:	4b2a      	ldr	r3, [pc, #168]	; (800a720 <HAL_GPIO_Init+0x3a8>)
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	43db      	mvns	r3, r3
 800a680:	69fa      	ldr	r2, [r7, #28]
 800a682:	4013      	ands	r3, r2
 800a684:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d003      	beq.n	800a69a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800a692:	69fa      	ldr	r2, [r7, #28]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800a69a:	4a21      	ldr	r2, [pc, #132]	; (800a720 <HAL_GPIO_Init+0x3a8>)
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800a6a0:	4b1f      	ldr	r3, [pc, #124]	; (800a720 <HAL_GPIO_Init+0x3a8>)
 800a6a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	43db      	mvns	r3, r3
 800a6ac:	69fa      	ldr	r2, [r7, #28]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d003      	beq.n	800a6c6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800a6be:	69fa      	ldr	r2, [r7, #28]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800a6c6:	4a16      	ldr	r2, [pc, #88]	; (800a720 <HAL_GPIO_Init+0x3a8>)
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800a6ce:	4b14      	ldr	r3, [pc, #80]	; (800a720 <HAL_GPIO_Init+0x3a8>)
 800a6d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	43db      	mvns	r3, r3
 800a6da:	69fa      	ldr	r2, [r7, #28]
 800a6dc:	4013      	ands	r3, r2
 800a6de:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800a6f4:	4a0a      	ldr	r2, [pc, #40]	; (800a720 <HAL_GPIO_Init+0x3a8>)
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	3301      	adds	r3, #1
 800a700:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	fa22 f303 	lsr.w	r3, r2, r3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f47f ae3d 	bne.w	800a38c <HAL_GPIO_Init+0x14>
  }
}
 800a712:	bf00      	nop
 800a714:	bf00      	nop
 800a716:	3724      	adds	r7, #36	; 0x24
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	46022000 	.word	0x46022000
 800a724:	002f7f7f 	.word	0x002f7f7f

0800a728 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a728:	b480      	push	{r7}
 800a72a:	b089      	sub	sp, #36	; 0x24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a73a:	e0bc      	b.n	800a8b6 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a73c:	2201      	movs	r2, #1
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	fa02 f303 	lsl.w	r3, r2, r3
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	4013      	ands	r3, r2
 800a748:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 80ad 	beq.w	800a8b0 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a5e      	ldr	r2, [pc, #376]	; (800a8d4 <HAL_GPIO_DeInit+0x1ac>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d115      	bne.n	800a78a <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800a75e:	4a5e      	ldr	r2, [pc, #376]	; (800a8d8 <HAL_GPIO_DeInit+0x1b0>)
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a766:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a768:	4a5b      	ldr	r2, [pc, #364]	; (800a8d8 <HAL_GPIO_DeInit+0x1b0>)
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	00db      	lsls	r3, r3, #3
 800a76e:	4413      	add	r3, r2
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800a774:	4b57      	ldr	r3, [pc, #348]	; (800a8d4 <HAL_GPIO_DeInit+0x1ac>)
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	2101      	movs	r1, #1
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	fa01 f303 	lsl.w	r3, r1, r3
 800a780:	43db      	mvns	r3, r3
 800a782:	4954      	ldr	r1, [pc, #336]	; (800a8d4 <HAL_GPIO_DeInit+0x1ac>)
 800a784:	4013      	ands	r3, r2
 800a786:	600b      	str	r3, [r1, #0]
 800a788:	e053      	b.n	800a832 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800a78a:	4a54      	ldr	r2, [pc, #336]	; (800a8dc <HAL_GPIO_DeInit+0x1b4>)
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	089b      	lsrs	r3, r3, #2
 800a790:	3318      	adds	r3, #24
 800a792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a796:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	f003 0303 	and.w	r3, r3, #3
 800a79e:	00db      	lsls	r3, r3, #3
 800a7a0:	220f      	movs	r2, #15
 800a7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	0a9a      	lsrs	r2, r3, #10
 800a7b0:	4b4b      	ldr	r3, [pc, #300]	; (800a8e0 <HAL_GPIO_DeInit+0x1b8>)
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	f002 0203 	and.w	r2, r2, #3
 800a7ba:	00d2      	lsls	r2, r2, #3
 800a7bc:	4093      	lsls	r3, r2
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d136      	bne.n	800a832 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800a7c4:	4b45      	ldr	r3, [pc, #276]	; (800a8dc <HAL_GPIO_DeInit+0x1b4>)
 800a7c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	43db      	mvns	r3, r3
 800a7ce:	4943      	ldr	r1, [pc, #268]	; (800a8dc <HAL_GPIO_DeInit+0x1b4>)
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800a7d6:	4b41      	ldr	r3, [pc, #260]	; (800a8dc <HAL_GPIO_DeInit+0x1b4>)
 800a7d8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	43db      	mvns	r3, r3
 800a7e0:	493e      	ldr	r1, [pc, #248]	; (800a8dc <HAL_GPIO_DeInit+0x1b4>)
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800a7e8:	4b3c      	ldr	r3, [pc, #240]	; (800a8dc <HAL_GPIO_DeInit+0x1b4>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	43db      	mvns	r3, r3
 800a7f0:	493a      	ldr	r1, [pc, #232]	; (800a8dc <HAL_GPIO_DeInit+0x1b4>)
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800a7f6:	4b39      	ldr	r3, [pc, #228]	; (800a8dc <HAL_GPIO_DeInit+0x1b4>)
 800a7f8:	685a      	ldr	r2, [r3, #4]
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	43db      	mvns	r3, r3
 800a7fe:	4937      	ldr	r1, [pc, #220]	; (800a8dc <HAL_GPIO_DeInit+0x1b4>)
 800a800:	4013      	ands	r3, r2
 800a802:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	f003 0303 	and.w	r3, r3, #3
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	220f      	movs	r2, #15
 800a80e:	fa02 f303 	lsl.w	r3, r2, r3
 800a812:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800a814:	4a31      	ldr	r2, [pc, #196]	; (800a8dc <HAL_GPIO_DeInit+0x1b4>)
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	089b      	lsrs	r3, r3, #2
 800a81a:	3318      	adds	r3, #24
 800a81c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	43da      	mvns	r2, r3
 800a824:	482d      	ldr	r0, [pc, #180]	; (800a8dc <HAL_GPIO_DeInit+0x1b4>)
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	089b      	lsrs	r3, r3, #2
 800a82a:	400a      	ands	r2, r1
 800a82c:	3318      	adds	r3, #24
 800a82e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	2103      	movs	r1, #3
 800a83c:	fa01 f303 	lsl.w	r3, r1, r3
 800a840:	431a      	orrs	r2, r3
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	08da      	lsrs	r2, r3, #3
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	3208      	adds	r2, #8
 800a84e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	f003 0307 	and.w	r3, r3, #7
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	220f      	movs	r2, #15
 800a85c:	fa02 f303 	lsl.w	r3, r2, r3
 800a860:	43db      	mvns	r3, r3
 800a862:	69fa      	ldr	r2, [r7, #28]
 800a864:	08d2      	lsrs	r2, r2, #3
 800a866:	4019      	ands	r1, r3
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	3208      	adds	r2, #8
 800a86c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	689a      	ldr	r2, [r3, #8]
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	005b      	lsls	r3, r3, #1
 800a878:	2103      	movs	r1, #3
 800a87a:	fa01 f303 	lsl.w	r3, r1, r3
 800a87e:	43db      	mvns	r3, r3
 800a880:	401a      	ands	r2, r3
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	685a      	ldr	r2, [r3, #4]
 800a88a:	2101      	movs	r1, #1
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	fa01 f303 	lsl.w	r3, r1, r3
 800a892:	43db      	mvns	r3, r3
 800a894:	401a      	ands	r2, r3
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	68da      	ldr	r2, [r3, #12]
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	005b      	lsls	r3, r3, #1
 800a8a2:	2103      	movs	r1, #3
 800a8a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8a8:	43db      	mvns	r3, r3
 800a8aa:	401a      	ands	r2, r3
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f47f af3c 	bne.w	800a73c <HAL_GPIO_DeInit+0x14>
  }
}
 800a8c4:	bf00      	nop
 800a8c6:	bf00      	nop
 800a8c8:	3724      	adds	r7, #36	; 0x24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	46020000 	.word	0x46020000
 800a8d8:	0801f8c8 	.word	0x0801f8c8
 800a8dc:	46022000 	.word	0x46022000
 800a8e0:	002f7f7f 	.word	0x002f7f7f

0800a8e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	691a      	ldr	r2, [r3, #16]
 800a8f4:	887b      	ldrh	r3, [r7, #2]
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d002      	beq.n	800a902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	73fb      	strb	r3, [r7, #15]
 800a900:	e001      	b.n	800a906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a902:	2300      	movs	r3, #0
 800a904:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800a906:	7bfb      	ldrb	r3, [r7, #15]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	460b      	mov	r3, r1
 800a91e:	807b      	strh	r3, [r7, #2]
 800a920:	4613      	mov	r3, r2
 800a922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a924:	787b      	ldrb	r3, [r7, #1]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a92a:	887a      	ldrh	r2, [r7, #2]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800a930:	e002      	b.n	800a938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800a932:	887a      	ldrh	r2, [r7, #2]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800a94e:	4b0f      	ldr	r3, [pc, #60]	; (800a98c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a950:	68da      	ldr	r2, [r3, #12]
 800a952:	88fb      	ldrh	r3, [r7, #6]
 800a954:	4013      	ands	r3, r2
 800a956:	2b00      	cmp	r3, #0
 800a958:	d006      	beq.n	800a968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a95a:	4a0c      	ldr	r2, [pc, #48]	; (800a98c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a95c:	88fb      	ldrh	r3, [r7, #6]
 800a95e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a960:	88fb      	ldrh	r3, [r7, #6]
 800a962:	4618      	mov	r0, r3
 800a964:	f00b fed2 	bl	801670c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800a968:	4b08      	ldr	r3, [pc, #32]	; (800a98c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a96a:	691a      	ldr	r2, [r3, #16]
 800a96c:	88fb      	ldrh	r3, [r7, #6]
 800a96e:	4013      	ands	r3, r2
 800a970:	2b00      	cmp	r3, #0
 800a972:	d006      	beq.n	800a982 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a974:	4a05      	ldr	r2, [pc, #20]	; (800a98c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a976:	88fb      	ldrh	r3, [r7, #6]
 800a978:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a97a:	88fb      	ldrh	r3, [r7, #6]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 f807 	bl	800a990 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a982:	bf00      	nop
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	46022000 	.word	0x46022000

0800a990 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	4603      	mov	r3, r0
 800a998:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800a99a:	bf00      	nop
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e081      	b.n	800aabc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d106      	bne.n	800a9d2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7f8 f8ef 	bl	8002bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2224      	movs	r2, #36	; 0x24
 800a9d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f022 0201 	bic.w	r2, r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a9f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	689a      	ldr	r2, [r3, #8]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d107      	bne.n	800aa20 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa1c:	609a      	str	r2, [r3, #8]
 800aa1e:	e006      	b.n	800aa2e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	689a      	ldr	r2, [r3, #8]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800aa2c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d104      	bne.n	800aa40 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa3e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	6812      	ldr	r2, [r2, #0]
 800aa4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aa4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa52:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68da      	ldr	r2, [r3, #12]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa62:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	691a      	ldr	r2, [r3, #16]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	430a      	orrs	r2, r1
 800aa7c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	69d9      	ldr	r1, [r3, #28]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a1a      	ldr	r2, [r3, #32]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f042 0201 	orr.w	r2, r2, #1
 800aa9c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2220      	movs	r2, #32
 800aaa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b20      	cmp	r3, #32
 800aad8:	d138      	bne.n	800ab4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d101      	bne.n	800aae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aae4:	2302      	movs	r3, #2
 800aae6:	e032      	b.n	800ab4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2224      	movs	r2, #36	; 0x24
 800aaf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f022 0201 	bic.w	r2, r2, #1
 800ab06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6819      	ldr	r1, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	430a      	orrs	r2, r1
 800ab26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f042 0201 	orr.w	r2, r2, #1
 800ab36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2220      	movs	r2, #32
 800ab3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	e000      	b.n	800ab4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab4c:	2302      	movs	r3, #2
  }
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b085      	sub	sp, #20
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	2b20      	cmp	r3, #32
 800ab6e:	d139      	bne.n	800abe4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d101      	bne.n	800ab7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	e033      	b.n	800abe6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2224      	movs	r2, #36	; 0x24
 800ab8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f022 0201 	bic.w	r2, r2, #1
 800ab9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800abac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	021b      	lsls	r3, r3, #8
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f042 0201 	orr.w	r2, r2, #1
 800abce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2220      	movs	r2, #32
 800abd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	e000      	b.n	800abe6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800abe4:	2302      	movs	r3, #2
  }
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
	...

0800abf4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800ac00:	4b0b      	ldr	r3, [pc, #44]	; (800ac30 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	73fb      	strb	r3, [r7, #15]
 800ac10:	e007      	b.n	800ac22 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800ac12:	4b07      	ldr	r3, [pc, #28]	; (800ac30 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f023 0204 	bic.w	r2, r3, #4
 800ac1a:	4905      	ldr	r1, [pc, #20]	; (800ac30 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	600b      	str	r3, [r1, #0]
  }

  return status;
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	40030400 	.word	0x40030400

0800ac34 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800ac34:	b480      	push	{r7}
 800ac36:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800ac38:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <HAL_ICACHE_Enable+0x1c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <HAL_ICACHE_Enable+0x1c>)
 800ac3e:	f043 0301 	orr.w	r3, r3, #1
 800ac42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	40030400 	.word	0x40030400

0800ac54 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d102      	bne.n	800ac6c <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	73fb      	strb	r3, [r7, #15]
 800ac6a:	e141      	b.n	800aef0 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 f947 	bl	800af04 <MDF_GetHandleNumberFromInstance>
 800ac76:	4603      	mov	r3, r0
 800ac78:	4a86      	ldr	r2, [pc, #536]	; (800ae94 <HAL_MDF_Init+0x240>)
 800ac7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d002      	beq.n	800ac88 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	73fb      	strb	r3, [r7, #15]
 800ac86:	e133      	b.n	800aef0 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7f7 fd7d 	bl	8002788 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800ac8e:	4b82      	ldr	r3, [pc, #520]	; (800ae98 <HAL_MDF_Init+0x244>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d11d      	bne.n	800acd2 <HAL_MDF_Init+0x7e>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a80      	ldr	r2, [pc, #512]	; (800ae9c <HAL_MDF_Init+0x248>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d023      	beq.n	800ace8 <HAL_MDF_Init+0x94>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a7e      	ldr	r2, [pc, #504]	; (800aea0 <HAL_MDF_Init+0x24c>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d01e      	beq.n	800ace8 <HAL_MDF_Init+0x94>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a7d      	ldr	r2, [pc, #500]	; (800aea4 <HAL_MDF_Init+0x250>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d019      	beq.n	800ace8 <HAL_MDF_Init+0x94>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a7b      	ldr	r2, [pc, #492]	; (800aea8 <HAL_MDF_Init+0x254>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d014      	beq.n	800ace8 <HAL_MDF_Init+0x94>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a7a      	ldr	r2, [pc, #488]	; (800aeac <HAL_MDF_Init+0x258>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00f      	beq.n	800ace8 <HAL_MDF_Init+0x94>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a78      	ldr	r2, [pc, #480]	; (800aeb0 <HAL_MDF_Init+0x25c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d00a      	beq.n	800ace8 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800acd2:	4b78      	ldr	r3, [pc, #480]	; (800aeb4 <HAL_MDF_Init+0x260>)
 800acd4:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f040 8090 	bne.w	800adfc <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a75      	ldr	r2, [pc, #468]	; (800aeb8 <HAL_MDF_Init+0x264>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	f040 808a 	bne.w	800adfc <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a72      	ldr	r2, [pc, #456]	; (800aeb8 <HAL_MDF_Init+0x264>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d101      	bne.n	800acf6 <HAL_MDF_Init+0xa2>
 800acf2:	4b72      	ldr	r3, [pc, #456]	; (800aebc <HAL_MDF_Init+0x268>)
 800acf4:	e000      	b.n	800acf8 <HAL_MDF_Init+0xa4>
 800acf6:	4b72      	ldr	r3, [pc, #456]	; (800aec0 <HAL_MDF_Init+0x26c>)
 800acf8:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	da02      	bge.n	800ad08 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	73fb      	strb	r3, [r7, #15]
 800ad06:	e079      	b.n	800adfc <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a63      	ldr	r2, [pc, #396]	; (800ae9c <HAL_MDF_Init+0x248>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d018      	beq.n	800ad44 <HAL_MDF_Init+0xf0>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a62      	ldr	r2, [pc, #392]	; (800aea0 <HAL_MDF_Init+0x24c>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d013      	beq.n	800ad44 <HAL_MDF_Init+0xf0>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a60      	ldr	r2, [pc, #384]	; (800aea4 <HAL_MDF_Init+0x250>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d00e      	beq.n	800ad44 <HAL_MDF_Init+0xf0>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a5f      	ldr	r2, [pc, #380]	; (800aea8 <HAL_MDF_Init+0x254>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d009      	beq.n	800ad44 <HAL_MDF_Init+0xf0>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a5d      	ldr	r2, [pc, #372]	; (800aeac <HAL_MDF_Init+0x258>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d004      	beq.n	800ad44 <HAL_MDF_Init+0xf0>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a5c      	ldr	r2, [pc, #368]	; (800aeb0 <HAL_MDF_Init+0x25c>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d10d      	bne.n	800ad60 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	011b      	lsls	r3, r3, #4
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2200      	movs	r2, #0
 800ad64:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	685a      	ldr	r2, [r3, #4]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	061b      	lsls	r3, r3, #24
 800ad72:	431a      	orrs	r2, r3
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	7b1b      	ldrb	r3, [r3, #12]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d137      	bne.n	800adf0 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	695b      	ldr	r3, [r3, #20]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800ad90:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 800ad98:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800ad9a:	431a      	orrs	r2, r3
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	7e1b      	ldrb	r3, [r3, #24]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d123      	bne.n	800adf0 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a3b      	ldr	r2, [pc, #236]	; (800ae9c <HAL_MDF_Init+0x248>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d012      	beq.n	800add8 <HAL_MDF_Init+0x184>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a3a      	ldr	r2, [pc, #232]	; (800aea0 <HAL_MDF_Init+0x24c>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d00d      	beq.n	800add8 <HAL_MDF_Init+0x184>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a38      	ldr	r2, [pc, #224]	; (800aea4 <HAL_MDF_Init+0x250>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d008      	beq.n	800add8 <HAL_MDF_Init+0x184>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a37      	ldr	r2, [pc, #220]	; (800aea8 <HAL_MDF_Init+0x254>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d003      	beq.n	800add8 <HAL_MDF_Init+0x184>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a35      	ldr	r2, [pc, #212]	; (800aeac <HAL_MDF_Init+0x258>)
 800add6:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800ade4:	430b      	orrs	r3, r1
 800ade6:	4313      	orrs	r3, r2
 800ade8:	f043 0210 	orr.w	r2, r3, #16
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	f043 0201 	orr.w	r2, r3, #1
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d128      	bne.n	800ae54 <HAL_MDF_Init+0x200>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d123      	bne.n	800ae54 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	da02      	bge.n	800ae1c <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	73fb      	strb	r3, [r7, #15]
 800ae1a:	e01b      	b.n	800ae54 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2200      	movs	r2, #0
 800ae22:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6819      	ldr	r1, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2e:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 800ae34:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3a:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	430a      	orrs	r2, r1
 800ae42:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f042 0201 	orr.w	r2, r2, #1
 800ae52:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d14a      	bne.n	800aef0 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685a      	ldr	r2, [r3, #4]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 021f 	bic.w	r2, r2, #31
 800ae68:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	6859      	ldr	r1, [r3, #4]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	430a      	orrs	r2, r1
 800ae7a:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a0d      	ldr	r2, [pc, #52]	; (800aeb8 <HAL_MDF_Init+0x264>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d11e      	bne.n	800aec4 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 800ae86:	4b0b      	ldr	r3, [pc, #44]	; (800aeb4 <HAL_MDF_Init+0x260>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	4a09      	ldr	r2, [pc, #36]	; (800aeb4 <HAL_MDF_Init+0x260>)
 800ae8e:	6013      	str	r3, [r2, #0]
 800ae90:	e01d      	b.n	800aece <HAL_MDF_Init+0x27a>
 800ae92:	bf00      	nop
 800ae94:	20002ce0 	.word	0x20002ce0
 800ae98:	20002cd8 	.word	0x20002cd8
 800ae9c:	40025080 	.word	0x40025080
 800aea0:	40025100 	.word	0x40025100
 800aea4:	40025180 	.word	0x40025180
 800aea8:	40025200 	.word	0x40025200
 800aeac:	40025280 	.word	0x40025280
 800aeb0:	40025300 	.word	0x40025300
 800aeb4:	20002cdc 	.word	0x20002cdc
 800aeb8:	46024080 	.word	0x46024080
 800aebc:	46024000 	.word	0x46024000
 800aec0:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 800aec4:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <HAL_MDF_Init+0x2a8>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3301      	adds	r3, #1
 800aeca:	4a0c      	ldr	r2, [pc, #48]	; (800aefc <HAL_MDF_Init+0x2a8>)
 800aecc:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f816 	bl	800af04 <MDF_GetHandleNumberFromInstance>
 800aed8:	4602      	mov	r2, r0
 800aeda:	4909      	ldr	r1, [pc, #36]	; (800af00 <HAL_MDF_Init+0x2ac>)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20002cd8 	.word	0x20002cd8
 800af00:	20002ce0 	.word	0x20002ce0

0800af04 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a19      	ldr	r2, [pc, #100]	; (800af74 <MDF_GetHandleNumberFromInstance+0x70>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d102      	bne.n	800af1a <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 800af14:	2300      	movs	r3, #0
 800af16:	60fb      	str	r3, [r7, #12]
 800af18:	e024      	b.n	800af64 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a16      	ldr	r2, [pc, #88]	; (800af78 <MDF_GetHandleNumberFromInstance+0x74>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d102      	bne.n	800af28 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 800af22:	2301      	movs	r3, #1
 800af24:	60fb      	str	r3, [r7, #12]
 800af26:	e01d      	b.n	800af64 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter2)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a14      	ldr	r2, [pc, #80]	; (800af7c <MDF_GetHandleNumberFromInstance+0x78>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d102      	bne.n	800af36 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 800af30:	2302      	movs	r3, #2
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	e016      	b.n	800af64 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a11      	ldr	r2, [pc, #68]	; (800af80 <MDF_GetHandleNumberFromInstance+0x7c>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d102      	bne.n	800af44 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 800af3e:	2303      	movs	r3, #3
 800af40:	60fb      	str	r3, [r7, #12]
 800af42:	e00f      	b.n	800af64 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a0f      	ldr	r2, [pc, #60]	; (800af84 <MDF_GetHandleNumberFromInstance+0x80>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d102      	bne.n	800af52 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 800af4c:	2304      	movs	r3, #4
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	e008      	b.n	800af64 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a0c      	ldr	r2, [pc, #48]	; (800af88 <MDF_GetHandleNumberFromInstance+0x84>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d102      	bne.n	800af60 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 800af5a:	2305      	movs	r3, #5
 800af5c:	60fb      	str	r3, [r7, #12]
 800af5e:	e001      	b.n	800af64 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 800af60:	2306      	movs	r3, #6
 800af62:	60fb      	str	r3, [r7, #12]
  }

  return handle_number;
 800af64:	68fb      	ldr	r3, [r7, #12]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	40025080 	.word	0x40025080
 800af78:	40025100 	.word	0x40025100
 800af7c:	40025180 	.word	0x40025180
 800af80:	40025200 	.word	0x40025200
 800af84:	40025280 	.word	0x40025280
 800af88:	40025300 	.word	0x40025300

0800af8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800af8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af8e:	b08f      	sub	sp, #60	; 0x3c
 800af90:	af0a      	add	r7, sp, #40	; 0x28
 800af92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e116      	b.n	800b1cc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b00      	cmp	r3, #0
 800afae:	d106      	bne.n	800afbe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7f8 fbfb 	bl	80037b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2203      	movs	r2, #3
 800afc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d102      	bne.n	800afd8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4618      	mov	r0, r3
 800afde:	f008 fb36 	bl	801364e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	603b      	str	r3, [r7, #0]
 800afe8:	687e      	ldr	r6, [r7, #4]
 800afea:	466d      	mov	r5, sp
 800afec:	f106 0410 	add.w	r4, r6, #16
 800aff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aff8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800affc:	e885 0003 	stmia.w	r5, {r0, r1}
 800b000:	1d33      	adds	r3, r6, #4
 800b002:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b004:	6838      	ldr	r0, [r7, #0]
 800b006:	f008 fa43 	bl	8013490 <USB_CoreInit>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d005      	beq.n	800b01c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2202      	movs	r2, #2
 800b014:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	e0d7      	b.n	800b1cc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2100      	movs	r1, #0
 800b022:	4618      	mov	r0, r3
 800b024:	f008 fb24 	bl	8013670 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b028:	2300      	movs	r3, #0
 800b02a:	73fb      	strb	r3, [r7, #15]
 800b02c:	e04a      	b.n	800b0c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b02e:	7bfa      	ldrb	r2, [r7, #15]
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	4613      	mov	r3, r2
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	4413      	add	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	440b      	add	r3, r1
 800b03c:	333d      	adds	r3, #61	; 0x3d
 800b03e:	2201      	movs	r2, #1
 800b040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b042:	7bfa      	ldrb	r2, [r7, #15]
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	4613      	mov	r3, r2
 800b048:	00db      	lsls	r3, r3, #3
 800b04a:	4413      	add	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	440b      	add	r3, r1
 800b050:	333c      	adds	r3, #60	; 0x3c
 800b052:	7bfa      	ldrb	r2, [r7, #15]
 800b054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b056:	7bfa      	ldrb	r2, [r7, #15]
 800b058:	7bfb      	ldrb	r3, [r7, #15]
 800b05a:	b298      	uxth	r0, r3
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	4613      	mov	r3, r2
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	440b      	add	r3, r1
 800b068:	3344      	adds	r3, #68	; 0x44
 800b06a:	4602      	mov	r2, r0
 800b06c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b06e:	7bfa      	ldrb	r2, [r7, #15]
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	4613      	mov	r3, r2
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	4413      	add	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	440b      	add	r3, r1
 800b07c:	3340      	adds	r3, #64	; 0x40
 800b07e:	2200      	movs	r2, #0
 800b080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b082:	7bfa      	ldrb	r2, [r7, #15]
 800b084:	6879      	ldr	r1, [r7, #4]
 800b086:	4613      	mov	r3, r2
 800b088:	00db      	lsls	r3, r3, #3
 800b08a:	4413      	add	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	440b      	add	r3, r1
 800b090:	3348      	adds	r3, #72	; 0x48
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b096:	7bfa      	ldrb	r2, [r7, #15]
 800b098:	6879      	ldr	r1, [r7, #4]
 800b09a:	4613      	mov	r3, r2
 800b09c:	00db      	lsls	r3, r3, #3
 800b09e:	4413      	add	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	440b      	add	r3, r1
 800b0a4:	334c      	adds	r3, #76	; 0x4c
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b0aa:	7bfa      	ldrb	r2, [r7, #15]
 800b0ac:	6879      	ldr	r1, [r7, #4]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	00db      	lsls	r3, r3, #3
 800b0b2:	4413      	add	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	440b      	add	r3, r1
 800b0b8:	3354      	adds	r3, #84	; 0x54
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	73fb      	strb	r3, [r7, #15]
 800b0c4:	7bfa      	ldrb	r2, [r7, #15]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d3af      	bcc.n	800b02e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
 800b0d2:	e044      	b.n	800b15e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b0d4:	7bfa      	ldrb	r2, [r7, #15]
 800b0d6:	6879      	ldr	r1, [r7, #4]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	00db      	lsls	r3, r3, #3
 800b0dc:	4413      	add	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	440b      	add	r3, r1
 800b0e2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b0ea:	7bfa      	ldrb	r2, [r7, #15]
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	00db      	lsls	r3, r3, #3
 800b0f2:	4413      	add	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	440b      	add	r3, r1
 800b0f8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b0fc:	7bfa      	ldrb	r2, [r7, #15]
 800b0fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b100:	7bfa      	ldrb	r2, [r7, #15]
 800b102:	6879      	ldr	r1, [r7, #4]
 800b104:	4613      	mov	r3, r2
 800b106:	00db      	lsls	r3, r3, #3
 800b108:	4413      	add	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	440b      	add	r3, r1
 800b10e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b112:	2200      	movs	r2, #0
 800b114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b116:	7bfa      	ldrb	r2, [r7, #15]
 800b118:	6879      	ldr	r1, [r7, #4]
 800b11a:	4613      	mov	r3, r2
 800b11c:	00db      	lsls	r3, r3, #3
 800b11e:	4413      	add	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	440b      	add	r3, r1
 800b124:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b128:	2200      	movs	r2, #0
 800b12a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b12c:	7bfa      	ldrb	r2, [r7, #15]
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	4613      	mov	r3, r2
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b142:	7bfa      	ldrb	r2, [r7, #15]
 800b144:	6879      	ldr	r1, [r7, #4]
 800b146:	4613      	mov	r3, r2
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	4413      	add	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	440b      	add	r3, r1
 800b150:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b154:	2200      	movs	r2, #0
 800b156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b158:	7bfb      	ldrb	r3, [r7, #15]
 800b15a:	3301      	adds	r3, #1
 800b15c:	73fb      	strb	r3, [r7, #15]
 800b15e:	7bfa      	ldrb	r2, [r7, #15]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d3b5      	bcc.n	800b0d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	603b      	str	r3, [r7, #0]
 800b16e:	687e      	ldr	r6, [r7, #4]
 800b170:	466d      	mov	r5, sp
 800b172:	f106 0410 	add.w	r4, r6, #16
 800b176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b17a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b17c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b17e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b182:	e885 0003 	stmia.w	r5, {r0, r1}
 800b186:	1d33      	adds	r3, r6, #4
 800b188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b18a:	6838      	ldr	r0, [r7, #0]
 800b18c:	f008 fabc 	bl	8013708 <USB_DevInit>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d005      	beq.n	800b1a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2202      	movs	r2, #2
 800b19a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e014      	b.n	800b1cc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d102      	bne.n	800b1c0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f001 f988 	bl	800c4d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f009 fbee 	bl	80149a6 <USB_DevDisconnect>

  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d101      	bne.n	800b1f0 <HAL_PCD_Start+0x1c>
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	e01c      	b.n	800b22a <HAL_PCD_Start+0x56>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d105      	bne.n	800b20c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b204:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4618      	mov	r0, r3
 800b212:	f008 fa0b 	bl	801362c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f009 fba2 	bl	8014964 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b232:	b590      	push	{r4, r7, lr}
 800b234:	b08d      	sub	sp, #52	; 0x34
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4618      	mov	r0, r3
 800b24a:	f009 fc60 	bl	8014b0e <USB_GetMode>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	f040 84b7 	bne.w	800bbc4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f009 fbc4 	bl	80149e8 <USB_ReadInterrupts>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 84ad 	beq.w	800bbc2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	0a1b      	lsrs	r3, r3, #8
 800b272:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4618      	mov	r0, r3
 800b282:	f009 fbb1 	bl	80149e8 <USB_ReadInterrupts>
 800b286:	4603      	mov	r3, r0
 800b288:	f003 0302 	and.w	r3, r3, #2
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d107      	bne.n	800b2a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	695a      	ldr	r2, [r3, #20]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f002 0202 	and.w	r2, r2, #2
 800b29e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f009 fb9f 	bl	80149e8 <USB_ReadInterrupts>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	f003 0310 	and.w	r3, r3, #16
 800b2b0:	2b10      	cmp	r3, #16
 800b2b2:	d161      	bne.n	800b378 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	699a      	ldr	r2, [r3, #24]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f022 0210 	bic.w	r2, r2, #16
 800b2c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
 800b2c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	f003 020f 	and.w	r2, r3, #15
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	00db      	lsls	r3, r3, #3
 800b2d4:	4413      	add	r3, r2
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	4413      	add	r3, r2
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	0c5b      	lsrs	r3, r3, #17
 800b2e8:	f003 030f 	and.w	r3, r3, #15
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d124      	bne.n	800b33a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d035      	beq.n	800b368 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	091b      	lsrs	r3, r3, #4
 800b304:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	461a      	mov	r2, r3
 800b30e:	6a38      	ldr	r0, [r7, #32]
 800b310:	f009 f9d6 	bl	80146c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	691a      	ldr	r2, [r3, #16]
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	091b      	lsrs	r3, r3, #4
 800b31c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b320:	441a      	add	r2, r3
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	6a1a      	ldr	r2, [r3, #32]
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	091b      	lsrs	r3, r3, #4
 800b32e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b332:	441a      	add	r2, r3
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	621a      	str	r2, [r3, #32]
 800b338:	e016      	b.n	800b368 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	0c5b      	lsrs	r3, r3, #17
 800b33e:	f003 030f 	and.w	r3, r3, #15
 800b342:	2b06      	cmp	r3, #6
 800b344:	d110      	bne.n	800b368 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b34c:	2208      	movs	r2, #8
 800b34e:	4619      	mov	r1, r3
 800b350:	6a38      	ldr	r0, [r7, #32]
 800b352:	f009 f9b5 	bl	80146c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	6a1a      	ldr	r2, [r3, #32]
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	091b      	lsrs	r3, r3, #4
 800b35e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b362:	441a      	add	r2, r3
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	699a      	ldr	r2, [r3, #24]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f042 0210 	orr.w	r2, r2, #16
 800b376:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4618      	mov	r0, r3
 800b37e:	f009 fb33 	bl	80149e8 <USB_ReadInterrupts>
 800b382:	4603      	mov	r3, r0
 800b384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b388:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b38c:	f040 80a7 	bne.w	800b4de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b390:	2300      	movs	r3, #0
 800b392:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4618      	mov	r0, r3
 800b39a:	f009 fb38 	bl	8014a0e <USB_ReadDevAllOutEpInterrupt>
 800b39e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b3a0:	e099      	b.n	800b4d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a4:	f003 0301 	and.w	r3, r3, #1
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f000 808e 	beq.w	800b4ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3b4:	b2d2      	uxtb	r2, r2
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f009 fb5c 	bl	8014a76 <USB_ReadDevOutEPInterrupt>
 800b3be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00c      	beq.n	800b3e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	015a      	lsls	r2, r3, #5
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	2301      	movs	r3, #1
 800b3da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b3dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fef0 	bl	800c1c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	f003 0308 	and.w	r3, r3, #8
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00c      	beq.n	800b408 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	2308      	movs	r3, #8
 800b3fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 ffc6 	bl	800c394 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	f003 0310 	and.w	r3, r3, #16
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d008      	beq.n	800b424 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41e:	461a      	mov	r2, r3
 800b420:	2310      	movs	r3, #16
 800b422:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d030      	beq.n	800b490 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b42e:	6a3b      	ldr	r3, [r7, #32]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b436:	2b80      	cmp	r3, #128	; 0x80
 800b438:	d109      	bne.n	800b44e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	69fa      	ldr	r2, [r7, #28]
 800b444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b44c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b44e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b450:	4613      	mov	r3, r2
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	4413      	add	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	4413      	add	r3, r2
 800b460:	3304      	adds	r3, #4
 800b462:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	78db      	ldrb	r3, [r3, #3]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d108      	bne.n	800b47e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	2200      	movs	r2, #0
 800b470:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b474:	b2db      	uxtb	r3, r3
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f00b fbdb 	bl	8016c34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b480:	015a      	lsls	r2, r3, #5
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	4413      	add	r3, r2
 800b486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48a:	461a      	mov	r2, r3
 800b48c:	2302      	movs	r3, #2
 800b48e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	f003 0320 	and.w	r3, r3, #32
 800b496:	2b00      	cmp	r3, #0
 800b498:	d008      	beq.n	800b4ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49c:	015a      	lsls	r2, r3, #5
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	2320      	movs	r3, #32
 800b4aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d009      	beq.n	800b4ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b8:	015a      	lsls	r2, r3, #5
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	4413      	add	r3, r2
 800b4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d2:	085b      	lsrs	r3, r3, #1
 800b4d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f47f af62 	bne.w	800b3a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f009 fa80 	bl	80149e8 <USB_ReadInterrupts>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4f2:	f040 80db 	bne.w	800b6ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f009 faa1 	bl	8014a42 <USB_ReadDevAllInEpInterrupt>
 800b500:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b502:	2300      	movs	r3, #0
 800b504:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b506:	e0cd      	b.n	800b6a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f000 80c2 	beq.w	800b698 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b51a:	b2d2      	uxtb	r2, r2
 800b51c:	4611      	mov	r1, r2
 800b51e:	4618      	mov	r0, r3
 800b520:	f009 fac7 	bl	8014ab2 <USB_ReadDevInEPInterrupt>
 800b524:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	f003 0301 	and.w	r3, r3, #1
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d057      	beq.n	800b5e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	f003 030f 	and.w	r3, r3, #15
 800b536:	2201      	movs	r2, #1
 800b538:	fa02 f303 	lsl.w	r3, r2, r3
 800b53c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	43db      	mvns	r3, r3
 800b54a:	69f9      	ldr	r1, [r7, #28]
 800b54c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b550:	4013      	ands	r3, r2
 800b552:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	015a      	lsls	r2, r3, #5
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	4413      	add	r3, r2
 800b55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b560:	461a      	mov	r2, r3
 800b562:	2301      	movs	r3, #1
 800b564:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d132      	bne.n	800b5d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b56e:	6879      	ldr	r1, [r7, #4]
 800b570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b572:	4613      	mov	r3, r2
 800b574:	00db      	lsls	r3, r3, #3
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	440b      	add	r3, r1
 800b57c:	334c      	adds	r3, #76	; 0x4c
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b584:	4613      	mov	r3, r2
 800b586:	00db      	lsls	r3, r3, #3
 800b588:	4413      	add	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4403      	add	r3, r0
 800b58e:	3348      	adds	r3, #72	; 0x48
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4419      	add	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b598:	4613      	mov	r3, r2
 800b59a:	00db      	lsls	r3, r3, #3
 800b59c:	4413      	add	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4403      	add	r3, r0
 800b5a2:	334c      	adds	r3, #76	; 0x4c
 800b5a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d113      	bne.n	800b5d4 <HAL_PCD_IRQHandler+0x3a2>
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	00db      	lsls	r3, r3, #3
 800b5b4:	4413      	add	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	440b      	add	r3, r1
 800b5ba:	3354      	adds	r3, #84	; 0x54
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d108      	bne.n	800b5d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6818      	ldr	r0, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	f009 face 	bl	8014b70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f00b fa77 	bl	8016ace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	f003 0308 	and.w	r3, r3, #8
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d008      	beq.n	800b5fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	015a      	lsls	r2, r3, #5
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	2308      	movs	r3, #8
 800b5fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	f003 0310 	and.w	r3, r3, #16
 800b602:	2b00      	cmp	r3, #0
 800b604:	d008      	beq.n	800b618 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b608:	015a      	lsls	r2, r3, #5
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	4413      	add	r3, r2
 800b60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b612:	461a      	mov	r2, r3
 800b614:	2310      	movs	r3, #16
 800b616:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d008      	beq.n	800b634 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b624:	015a      	lsls	r2, r3, #5
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	4413      	add	r3, r2
 800b62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b62e:	461a      	mov	r2, r3
 800b630:	2340      	movs	r3, #64	; 0x40
 800b632:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	f003 0302 	and.w	r3, r3, #2
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d023      	beq.n	800b686 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b63e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b640:	6a38      	ldr	r0, [r7, #32]
 800b642:	f008 f9af 	bl	80139a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b648:	4613      	mov	r3, r2
 800b64a:	00db      	lsls	r3, r3, #3
 800b64c:	4413      	add	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	3338      	adds	r3, #56	; 0x38
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	4413      	add	r3, r2
 800b656:	3304      	adds	r3, #4
 800b658:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	78db      	ldrb	r3, [r3, #3]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d108      	bne.n	800b674 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2200      	movs	r2, #0
 800b666:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f00b faf2 	bl	8016c58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b676:	015a      	lsls	r2, r3, #5
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	4413      	add	r3, r2
 800b67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b680:	461a      	mov	r2, r3
 800b682:	2302      	movs	r3, #2
 800b684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fd08 	bl	800c0a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	3301      	adds	r3, #1
 800b69c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a0:	085b      	lsrs	r3, r3, #1
 800b6a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f47f af2e 	bne.w	800b508 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f009 f999 	bl	80149e8 <USB_ReadInterrupts>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6c0:	d122      	bne.n	800b708 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	69fa      	ldr	r2, [r7, #28]
 800b6cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6d0:	f023 0301 	bic.w	r3, r3, #1
 800b6d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d108      	bne.n	800b6f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 ff14 	bl	800c518 <HAL_PCDEx_LPM_Callback>
 800b6f0:	e002      	b.n	800b6f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f00b fa76 	bl	8016be4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	695a      	ldr	r2, [r3, #20]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f009 f96b 	bl	80149e8 <USB_ReadInterrupts>
 800b712:	4603      	mov	r3, r0
 800b714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b71c:	d112      	bne.n	800b744 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d102      	bne.n	800b734 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f00b fa14 	bl	8016b5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	695a      	ldr	r2, [r3, #20]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b742:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4618      	mov	r0, r3
 800b74a:	f009 f94d 	bl	80149e8 <USB_ReadInterrupts>
 800b74e:	4603      	mov	r3, r0
 800b750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b758:	d121      	bne.n	800b79e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	695a      	ldr	r2, [r3, #20]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b768:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b770:	2b00      	cmp	r3, #0
 800b772:	d111      	bne.n	800b798 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b782:	089b      	lsrs	r3, r3, #2
 800b784:	f003 020f 	and.w	r2, r3, #15
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b78e:	2101      	movs	r1, #1
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fec1 	bl	800c518 <HAL_PCDEx_LPM_Callback>
 800b796:	e002      	b.n	800b79e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f00b f9df 	bl	8016b5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f009 f920 	bl	80149e8 <USB_ReadInterrupts>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b7ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7b2:	f040 80b7 	bne.w	800b924 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	69fa      	ldr	r2, [r7, #28]
 800b7c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7c4:	f023 0301 	bic.w	r3, r3, #1
 800b7c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2110      	movs	r1, #16
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f008 f8e7 	bl	80139a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7da:	e046      	b.n	800b86a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7de:	015a      	lsls	r2, r3, #5
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b7ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f2:	015a      	lsls	r2, r3, #5
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b800:	0151      	lsls	r1, r2, #5
 800b802:	69fa      	ldr	r2, [r7, #28]
 800b804:	440a      	add	r2, r1
 800b806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b80a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b80e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b812:	015a      	lsls	r2, r3, #5
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	4413      	add	r3, r2
 800b818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b81c:	461a      	mov	r2, r3
 800b81e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b822:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b826:	015a      	lsls	r2, r3, #5
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	4413      	add	r3, r2
 800b82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b834:	0151      	lsls	r1, r2, #5
 800b836:	69fa      	ldr	r2, [r7, #28]
 800b838:	440a      	add	r2, r1
 800b83a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b83e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b842:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	015a      	lsls	r2, r3, #5
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	4413      	add	r3, r2
 800b84c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b854:	0151      	lsls	r1, r2, #5
 800b856:	69fa      	ldr	r2, [r7, #28]
 800b858:	440a      	add	r2, r1
 800b85a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b85e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b862:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b866:	3301      	adds	r3, #1
 800b868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b870:	429a      	cmp	r2, r3
 800b872:	d3b3      	bcc.n	800b7dc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b87a:	69db      	ldr	r3, [r3, #28]
 800b87c:	69fa      	ldr	r2, [r7, #28]
 800b87e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b882:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b886:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d016      	beq.n	800b8be <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b89a:	69fa      	ldr	r2, [r7, #28]
 800b89c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8a0:	f043 030b 	orr.w	r3, r3, #11
 800b8a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8b0:	69fa      	ldr	r2, [r7, #28]
 800b8b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8b6:	f043 030b 	orr.w	r3, r3, #11
 800b8ba:	6453      	str	r3, [r2, #68]	; 0x44
 800b8bc:	e015      	b.n	800b8ea <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	69fa      	ldr	r2, [r7, #28]
 800b8c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b8d0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b8d4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	69fa      	ldr	r2, [r7, #28]
 800b8e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8e4:	f043 030b 	orr.w	r3, r3, #11
 800b8e8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	69fa      	ldr	r2, [r7, #28]
 800b8f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b8fc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6818      	ldr	r0, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b90e:	461a      	mov	r2, r3
 800b910:	f009 f92e 	bl	8014b70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	695a      	ldr	r2, [r3, #20]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4618      	mov	r0, r3
 800b92a:	f009 f85d 	bl	80149e8 <USB_ReadInterrupts>
 800b92e:	4603      	mov	r3, r0
 800b930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b938:	d124      	bne.n	800b984 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4618      	mov	r0, r3
 800b940:	f009 f8f3 	bl	8014b2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4618      	mov	r0, r3
 800b94a:	f008 f8a8 	bl	8013a9e <USB_GetDevSpeed>
 800b94e:	4603      	mov	r3, r0
 800b950:	461a      	mov	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681c      	ldr	r4, [r3, #0]
 800b95a:	f002 f87b 	bl	800da54 <HAL_RCC_GetHCLKFreq>
 800b95e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b964:	b2db      	uxtb	r3, r3
 800b966:	461a      	mov	r2, r3
 800b968:	4620      	mov	r0, r4
 800b96a:	f007 fdbd 	bl	80134e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f00b f8d5 	bl	8016b1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	695a      	ldr	r2, [r3, #20]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b982:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4618      	mov	r0, r3
 800b98a:	f009 f82d 	bl	80149e8 <USB_ReadInterrupts>
 800b98e:	4603      	mov	r3, r0
 800b990:	f003 0308 	and.w	r3, r3, #8
 800b994:	2b08      	cmp	r3, #8
 800b996:	d10a      	bne.n	800b9ae <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f00b f8b2 	bl	8016b02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	695a      	ldr	r2, [r3, #20]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f002 0208 	and.w	r2, r2, #8
 800b9ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f009 f818 	bl	80149e8 <USB_ReadInterrupts>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9be:	2b80      	cmp	r3, #128	; 0x80
 800b9c0:	d122      	bne.n	800ba08 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9ca:	6a3b      	ldr	r3, [r7, #32]
 800b9cc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b9d2:	e014      	b.n	800b9fe <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b9d4:	6879      	ldr	r1, [r7, #4]
 800b9d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d8:	4613      	mov	r3, r2
 800b9da:	00db      	lsls	r3, r3, #3
 800b9dc:	4413      	add	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	440b      	add	r3, r1
 800b9e2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d105      	bne.n	800b9f8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fb27 	bl	800c046 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d3e5      	bcc.n	800b9d4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f008 ffeb 	bl	80149e8 <USB_ReadInterrupts>
 800ba12:	4603      	mov	r3, r0
 800ba14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba1c:	d13b      	bne.n	800ba96 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ba1e:	2301      	movs	r3, #1
 800ba20:	627b      	str	r3, [r7, #36]	; 0x24
 800ba22:	e02b      	b.n	800ba7c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800ba24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba26:	015a      	lsls	r2, r3, #5
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ba34:	6879      	ldr	r1, [r7, #4]
 800ba36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba38:	4613      	mov	r3, r2
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	440b      	add	r3, r1
 800ba42:	3340      	adds	r3, #64	; 0x40
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d115      	bne.n	800ba76 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800ba4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	da12      	bge.n	800ba76 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800ba50:	6879      	ldr	r1, [r7, #4]
 800ba52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba54:	4613      	mov	r3, r2
 800ba56:	00db      	lsls	r3, r3, #3
 800ba58:	4413      	add	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	440b      	add	r3, r1
 800ba5e:	333f      	adds	r3, #63	; 0x3f
 800ba60:	2201      	movs	r2, #1
 800ba62:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	4619      	mov	r1, r3
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fae8 	bl	800c046 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ba76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba78:	3301      	adds	r3, #1
 800ba7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d3ce      	bcc.n	800ba24 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	695a      	ldr	r2, [r3, #20]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ba94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f008 ffa4 	bl	80149e8 <USB_ReadInterrupts>
 800baa0:	4603      	mov	r3, r0
 800baa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800baa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800baaa:	d155      	bne.n	800bb58 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800baac:	2301      	movs	r3, #1
 800baae:	627b      	str	r3, [r7, #36]	; 0x24
 800bab0:	e045      	b.n	800bb3e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	015a      	lsls	r2, r3, #5
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	4413      	add	r3, r2
 800baba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bac2:	6879      	ldr	r1, [r7, #4]
 800bac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bac6:	4613      	mov	r3, r2
 800bac8:	00db      	lsls	r3, r3, #3
 800baca:	4413      	add	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	440b      	add	r3, r1
 800bad0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d12e      	bne.n	800bb38 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bada:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800badc:	2b00      	cmp	r3, #0
 800bade:	da2b      	bge.n	800bb38 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800baec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d121      	bne.n	800bb38 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800baf4:	6879      	ldr	r1, [r7, #4]
 800baf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf8:	4613      	mov	r3, r2
 800bafa:	00db      	lsls	r3, r3, #3
 800bafc:	4413      	add	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	440b      	add	r3, r1
 800bb02:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800bb06:	2201      	movs	r2, #1
 800bb08:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bb0a:	6a3b      	ldr	r3, [r7, #32]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb12:	6a3b      	ldr	r3, [r7, #32]
 800bb14:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bb16:	6a3b      	ldr	r3, [r7, #32]
 800bb18:	695b      	ldr	r3, [r3, #20]
 800bb1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10a      	bne.n	800bb38 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	69fa      	ldr	r2, [r7, #28]
 800bb2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb34:	6053      	str	r3, [r2, #4]
            break;
 800bb36:	e007      	b.n	800bb48 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d3b4      	bcc.n	800bab2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	695a      	ldr	r2, [r3, #20]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800bb56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f008 ff43 	bl	80149e8 <USB_ReadInterrupts>
 800bb62:	4603      	mov	r3, r0
 800bb64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb6c:	d10a      	bne.n	800bb84 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f00b f884 	bl	8016c7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	695a      	ldr	r2, [r3, #20]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800bb82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f008 ff2d 	bl	80149e8 <USB_ReadInterrupts>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	f003 0304 	and.w	r3, r3, #4
 800bb94:	2b04      	cmp	r3, #4
 800bb96:	d115      	bne.n	800bbc4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	f003 0304 	and.w	r3, r3, #4
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d002      	beq.n	800bbb0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f00b f874 	bl	8016c98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6859      	ldr	r1, [r3, #4]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	69ba      	ldr	r2, [r7, #24]
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	605a      	str	r2, [r3, #4]
 800bbc0:	e000      	b.n	800bbc4 <HAL_PCD_IRQHandler+0x992>
      return;
 800bbc2:	bf00      	nop
    }
  }
}
 800bbc4:	3734      	adds	r7, #52	; 0x34
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd90      	pop	{r4, r7, pc}

0800bbca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b082      	sub	sp, #8
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d101      	bne.n	800bbe4 <HAL_PCD_SetAddress+0x1a>
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	e013      	b.n	800bc0c <HAL_PCD_SetAddress+0x42>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	78fa      	ldrb	r2, [r7, #3]
 800bbf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	78fa      	ldrb	r2, [r7, #3]
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f008 fe8b 	bl	8014918 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	4608      	mov	r0, r1
 800bc1e:	4611      	mov	r1, r2
 800bc20:	461a      	mov	r2, r3
 800bc22:	4603      	mov	r3, r0
 800bc24:	70fb      	strb	r3, [r7, #3]
 800bc26:	460b      	mov	r3, r1
 800bc28:	803b      	strh	r3, [r7, #0]
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bc32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	da0f      	bge.n	800bc5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc3a:	78fb      	ldrb	r3, [r7, #3]
 800bc3c:	f003 020f 	and.w	r2, r3, #15
 800bc40:	4613      	mov	r3, r2
 800bc42:	00db      	lsls	r3, r3, #3
 800bc44:	4413      	add	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	3338      	adds	r3, #56	; 0x38
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	3304      	adds	r3, #4
 800bc50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2201      	movs	r2, #1
 800bc56:	705a      	strb	r2, [r3, #1]
 800bc58:	e00f      	b.n	800bc7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bc5a:	78fb      	ldrb	r3, [r7, #3]
 800bc5c:	f003 020f 	and.w	r2, r3, #15
 800bc60:	4613      	mov	r3, r2
 800bc62:	00db      	lsls	r3, r3, #3
 800bc64:	4413      	add	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	4413      	add	r3, r2
 800bc70:	3304      	adds	r3, #4
 800bc72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800bc7a:	78fb      	ldrb	r3, [r7, #3]
 800bc7c:	f003 030f 	and.w	r3, r3, #15
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800bc86:	883a      	ldrh	r2, [r7, #0]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	78ba      	ldrb	r2, [r7, #2]
 800bc90:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	785b      	ldrb	r3, [r3, #1]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d004      	beq.n	800bca4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bca4:	78bb      	ldrb	r3, [r7, #2]
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d102      	bne.n	800bcb0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d101      	bne.n	800bcbe <HAL_PCD_EP_Open+0xaa>
 800bcba:	2302      	movs	r3, #2
 800bcbc:	e00e      	b.n	800bcdc <HAL_PCD_EP_Open+0xc8>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68f9      	ldr	r1, [r7, #12]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f007 ff0b 	bl	8013ae8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800bcda:	7afb      	ldrb	r3, [r7, #11]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bcf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	da0f      	bge.n	800bd18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bcf8:	78fb      	ldrb	r3, [r7, #3]
 800bcfa:	f003 020f 	and.w	r2, r3, #15
 800bcfe:	4613      	mov	r3, r2
 800bd00:	00db      	lsls	r3, r3, #3
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	3338      	adds	r3, #56	; 0x38
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2201      	movs	r2, #1
 800bd14:	705a      	strb	r2, [r3, #1]
 800bd16:	e00f      	b.n	800bd38 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bd18:	78fb      	ldrb	r3, [r7, #3]
 800bd1a:	f003 020f 	and.w	r2, r3, #15
 800bd1e:	4613      	mov	r3, r2
 800bd20:	00db      	lsls	r3, r3, #3
 800bd22:	4413      	add	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	3304      	adds	r3, #4
 800bd30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800bd38:	78fb      	ldrb	r3, [r7, #3]
 800bd3a:	f003 030f 	and.w	r3, r3, #15
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d101      	bne.n	800bd52 <HAL_PCD_EP_Close+0x6e>
 800bd4e:	2302      	movs	r3, #2
 800bd50:	e00e      	b.n	800bd70 <HAL_PCD_EP_Close+0x8c>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68f9      	ldr	r1, [r7, #12]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f007 ff49 	bl	8013bf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	607a      	str	r2, [r7, #4]
 800bd82:	603b      	str	r3, [r7, #0]
 800bd84:	460b      	mov	r3, r1
 800bd86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bd88:	7afb      	ldrb	r3, [r7, #11]
 800bd8a:	f003 020f 	and.w	r2, r3, #15
 800bd8e:	4613      	mov	r3, r2
 800bd90:	00db      	lsls	r3, r3, #3
 800bd92:	4413      	add	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	3304      	adds	r3, #4
 800bda0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bdba:	7afb      	ldrb	r3, [r7, #11]
 800bdbc:	f003 030f 	and.w	r3, r3, #15
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d102      	bne.n	800bdd4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bdd4:	7afb      	ldrb	r3, [r7, #11]
 800bdd6:	f003 030f 	and.w	r3, r3, #15
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d109      	bne.n	800bdf2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6818      	ldr	r0, [r3, #0]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	461a      	mov	r2, r3
 800bdea:	6979      	ldr	r1, [r7, #20]
 800bdec:	f008 fa28 	bl	8014240 <USB_EP0StartXfer>
 800bdf0:	e008      	b.n	800be04 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6818      	ldr	r0, [r3, #0]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	6979      	ldr	r1, [r7, #20]
 800be00:	f007 ffd6 	bl	8013db0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800be0e:	b480      	push	{r7}
 800be10:	b083      	sub	sp, #12
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	460b      	mov	r3, r1
 800be18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800be1a:	78fb      	ldrb	r3, [r7, #3]
 800be1c:	f003 020f 	and.w	r2, r3, #15
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	4613      	mov	r3, r2
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	440b      	add	r3, r1
 800be2c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800be30:	681b      	ldr	r3, [r3, #0]
}
 800be32:	4618      	mov	r0, r3
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b086      	sub	sp, #24
 800be42:	af00      	add	r7, sp, #0
 800be44:	60f8      	str	r0, [r7, #12]
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	603b      	str	r3, [r7, #0]
 800be4a:	460b      	mov	r3, r1
 800be4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800be4e:	7afb      	ldrb	r3, [r7, #11]
 800be50:	f003 020f 	and.w	r2, r3, #15
 800be54:	4613      	mov	r3, r2
 800be56:	00db      	lsls	r3, r3, #3
 800be58:	4413      	add	r3, r2
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	3338      	adds	r3, #56	; 0x38
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	4413      	add	r3, r2
 800be62:	3304      	adds	r3, #4
 800be64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	2200      	movs	r2, #0
 800be76:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	2201      	movs	r2, #1
 800be7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800be7e:	7afb      	ldrb	r3, [r7, #11]
 800be80:	f003 030f 	and.w	r3, r3, #15
 800be84:	b2da      	uxtb	r2, r3
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d102      	bne.n	800be98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800be98:	7afb      	ldrb	r3, [r7, #11]
 800be9a:	f003 030f 	and.w	r3, r3, #15
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d109      	bne.n	800beb6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6818      	ldr	r0, [r3, #0]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	461a      	mov	r2, r3
 800beae:	6979      	ldr	r1, [r7, #20]
 800beb0:	f008 f9c6 	bl	8014240 <USB_EP0StartXfer>
 800beb4:	e008      	b.n	800bec8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6818      	ldr	r0, [r3, #0]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	461a      	mov	r2, r3
 800bec2:	6979      	ldr	r1, [r7, #20]
 800bec4:	f007 ff74 	bl	8013db0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3718      	adds	r7, #24
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b084      	sub	sp, #16
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	460b      	mov	r3, r1
 800bedc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bede:	78fb      	ldrb	r3, [r7, #3]
 800bee0:	f003 020f 	and.w	r2, r3, #15
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d901      	bls.n	800bef0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	e050      	b.n	800bf92 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	da0f      	bge.n	800bf18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bef8:	78fb      	ldrb	r3, [r7, #3]
 800befa:	f003 020f 	and.w	r2, r3, #15
 800befe:	4613      	mov	r3, r2
 800bf00:	00db      	lsls	r3, r3, #3
 800bf02:	4413      	add	r3, r2
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	3338      	adds	r3, #56	; 0x38
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2201      	movs	r2, #1
 800bf14:	705a      	strb	r2, [r3, #1]
 800bf16:	e00d      	b.n	800bf34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bf18:	78fa      	ldrb	r2, [r7, #3]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	00db      	lsls	r3, r3, #3
 800bf1e:	4413      	add	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	4413      	add	r3, r2
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2201      	movs	r2, #1
 800bf38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf3a:	78fb      	ldrb	r3, [r7, #3]
 800bf3c:	f003 030f 	and.w	r3, r3, #15
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d101      	bne.n	800bf54 <HAL_PCD_EP_SetStall+0x82>
 800bf50:	2302      	movs	r3, #2
 800bf52:	e01e      	b.n	800bf92 <HAL_PCD_EP_SetStall+0xc0>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2201      	movs	r2, #1
 800bf58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68f9      	ldr	r1, [r7, #12]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f008 fc04 	bl	8014770 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bf68:	78fb      	ldrb	r3, [r7, #3]
 800bf6a:	f003 030f 	and.w	r3, r3, #15
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10a      	bne.n	800bf88 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6818      	ldr	r0, [r3, #0]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	b2d9      	uxtb	r1, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf82:	461a      	mov	r2, r3
 800bf84:	f008 fdf4 	bl	8014b70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b084      	sub	sp, #16
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bfa6:	78fb      	ldrb	r3, [r7, #3]
 800bfa8:	f003 020f 	and.w	r2, r3, #15
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d901      	bls.n	800bfb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e042      	b.n	800c03e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bfb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	da0f      	bge.n	800bfe0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bfc0:	78fb      	ldrb	r3, [r7, #3]
 800bfc2:	f003 020f 	and.w	r2, r3, #15
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	00db      	lsls	r3, r3, #3
 800bfca:	4413      	add	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	3338      	adds	r3, #56	; 0x38
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	705a      	strb	r2, [r3, #1]
 800bfde:	e00f      	b.n	800c000 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bfe0:	78fb      	ldrb	r3, [r7, #3]
 800bfe2:	f003 020f 	and.w	r2, r3, #15
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	00db      	lsls	r3, r3, #3
 800bfea:	4413      	add	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	4413      	add	r3, r2
 800bff6:	3304      	adds	r3, #4
 800bff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c006:	78fb      	ldrb	r3, [r7, #3]
 800c008:	f003 030f 	and.w	r3, r3, #15
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d101      	bne.n	800c020 <HAL_PCD_EP_ClrStall+0x86>
 800c01c:	2302      	movs	r3, #2
 800c01e:	e00e      	b.n	800c03e <HAL_PCD_EP_ClrStall+0xa4>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68f9      	ldr	r1, [r7, #12]
 800c02e:	4618      	mov	r0, r3
 800c030:	f008 fc0c 	bl	801484c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	460b      	mov	r3, r1
 800c050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c056:	2b00      	cmp	r3, #0
 800c058:	da0c      	bge.n	800c074 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c05a:	78fb      	ldrb	r3, [r7, #3]
 800c05c:	f003 020f 	and.w	r2, r3, #15
 800c060:	4613      	mov	r3, r2
 800c062:	00db      	lsls	r3, r3, #3
 800c064:	4413      	add	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	3338      	adds	r3, #56	; 0x38
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	4413      	add	r3, r2
 800c06e:	3304      	adds	r3, #4
 800c070:	60fb      	str	r3, [r7, #12]
 800c072:	e00c      	b.n	800c08e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c074:	78fb      	ldrb	r3, [r7, #3]
 800c076:	f003 020f 	and.w	r2, r3, #15
 800c07a:	4613      	mov	r3, r2
 800c07c:	00db      	lsls	r3, r3, #3
 800c07e:	4413      	add	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	4413      	add	r3, r2
 800c08a:	3304      	adds	r3, #4
 800c08c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68f9      	ldr	r1, [r7, #12]
 800c094:	4618      	mov	r0, r3
 800c096:	f008 fa2b 	bl	80144f0 <USB_EPStopXfer>
 800c09a:	4603      	mov	r3, r0
 800c09c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c09e:	7afb      	ldrb	r3, [r7, #11]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b08a      	sub	sp, #40	; 0x28
 800c0ac:	af02      	add	r7, sp, #8
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	00db      	lsls	r3, r3, #3
 800c0c2:	4413      	add	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	3338      	adds	r3, #56	; 0x38
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6a1a      	ldr	r2, [r3, #32]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	699b      	ldr	r3, [r3, #24]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d901      	bls.n	800c0e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e06c      	b.n	800c1ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	699a      	ldr	r2, [r3, #24]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6a1b      	ldr	r3, [r3, #32]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	69fa      	ldr	r2, [r7, #28]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d902      	bls.n	800c0fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	3303      	adds	r3, #3
 800c100:	089b      	lsrs	r3, r3, #2
 800c102:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c104:	e02b      	b.n	800c15e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	699a      	ldr	r2, [r3, #24]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	69fa      	ldr	r2, [r7, #28]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d902      	bls.n	800c122 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	3303      	adds	r3, #3
 800c126:	089b      	lsrs	r3, r3, #2
 800c128:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6919      	ldr	r1, [r3, #16]
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	b2da      	uxtb	r2, r3
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	4603      	mov	r3, r0
 800c140:	6978      	ldr	r0, [r7, #20]
 800c142:	f008 fa7f 	bl	8014644 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	691a      	ldr	r2, [r3, #16]
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	441a      	add	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6a1a      	ldr	r2, [r3, #32]
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	441a      	add	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	015a      	lsls	r2, r3, #5
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	4413      	add	r3, r2
 800c166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c16a:	699b      	ldr	r3, [r3, #24]
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	69ba      	ldr	r2, [r7, #24]
 800c170:	429a      	cmp	r2, r3
 800c172:	d809      	bhi.n	800c188 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6a1a      	ldr	r2, [r3, #32]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d203      	bcs.n	800c188 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1be      	bne.n	800c106 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	699a      	ldr	r2, [r3, #24]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	429a      	cmp	r2, r3
 800c192:	d811      	bhi.n	800c1b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	f003 030f 	and.w	r3, r3, #15
 800c19a:	2201      	movs	r2, #1
 800c19c:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	43db      	mvns	r3, r3
 800c1ae:	6939      	ldr	r1, [r7, #16]
 800c1b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3720      	adds	r7, #32
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	333c      	adds	r3, #60	; 0x3c
 800c1dc:	3304      	adds	r3, #4
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	015a      	lsls	r2, r3, #5
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d17b      	bne.n	800c2f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	f003 0308 	and.w	r3, r3, #8
 800c200:	2b00      	cmp	r3, #0
 800c202:	d015      	beq.n	800c230 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	4a61      	ldr	r2, [pc, #388]	; (800c38c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	f240 80b9 	bls.w	800c380 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c214:	2b00      	cmp	r3, #0
 800c216:	f000 80b3 	beq.w	800c380 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	015a      	lsls	r2, r3, #5
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	4413      	add	r3, r2
 800c222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c226:	461a      	mov	r2, r3
 800c228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c22c:	6093      	str	r3, [r2, #8]
 800c22e:	e0a7      	b.n	800c380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	f003 0320 	and.w	r3, r3, #32
 800c236:	2b00      	cmp	r3, #0
 800c238:	d009      	beq.n	800c24e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	015a      	lsls	r2, r3, #5
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	4413      	add	r3, r2
 800c242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c246:	461a      	mov	r2, r3
 800c248:	2320      	movs	r3, #32
 800c24a:	6093      	str	r3, [r2, #8]
 800c24c:	e098      	b.n	800c380 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c254:	2b00      	cmp	r3, #0
 800c256:	f040 8093 	bne.w	800c380 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	4a4b      	ldr	r2, [pc, #300]	; (800c38c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d90f      	bls.n	800c282 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00a      	beq.n	800c282 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	015a      	lsls	r2, r3, #5
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	4413      	add	r3, r2
 800c274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c278:	461a      	mov	r2, r3
 800c27a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c27e:	6093      	str	r3, [r2, #8]
 800c280:	e07e      	b.n	800c380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c282:	683a      	ldr	r2, [r7, #0]
 800c284:	4613      	mov	r3, r2
 800c286:	00db      	lsls	r3, r3, #3
 800c288:	4413      	add	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	4413      	add	r3, r2
 800c294:	3304      	adds	r3, #4
 800c296:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	69da      	ldr	r2, [r3, #28]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	0159      	lsls	r1, r3, #5
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	440b      	add	r3, r1
 800c2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2ae:	1ad2      	subs	r2, r2, r3
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d114      	bne.n	800c2e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d109      	bne.n	800c2d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6818      	ldr	r0, [r3, #0]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	f008 fc4e 	bl	8014b70 <USB_EP0_OutStart>
 800c2d4:	e006      	b.n	800c2e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	691a      	ldr	r2, [r3, #16]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	441a      	add	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f00a fbd4 	bl	8016a98 <HAL_PCD_DataOutStageCallback>
 800c2f0:	e046      	b.n	800c380 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	4a26      	ldr	r2, [pc, #152]	; (800c390 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d124      	bne.n	800c344 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00a      	beq.n	800c31a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	015a      	lsls	r2, r3, #5
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	4413      	add	r3, r2
 800c30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c310:	461a      	mov	r2, r3
 800c312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c316:	6093      	str	r3, [r2, #8]
 800c318:	e032      	b.n	800c380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	f003 0320 	and.w	r3, r3, #32
 800c320:	2b00      	cmp	r3, #0
 800c322:	d008      	beq.n	800c336 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	015a      	lsls	r2, r3, #5
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	4413      	add	r3, r2
 800c32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c330:	461a      	mov	r2, r3
 800c332:	2320      	movs	r3, #32
 800c334:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	4619      	mov	r1, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f00a fbab 	bl	8016a98 <HAL_PCD_DataOutStageCallback>
 800c342:	e01d      	b.n	800c380 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d114      	bne.n	800c374 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c34a:	6879      	ldr	r1, [r7, #4]
 800c34c:	683a      	ldr	r2, [r7, #0]
 800c34e:	4613      	mov	r3, r2
 800c350:	00db      	lsls	r3, r3, #3
 800c352:	4413      	add	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	440b      	add	r3, r1
 800c358:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d108      	bne.n	800c374 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6818      	ldr	r0, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c36c:	461a      	mov	r2, r3
 800c36e:	2100      	movs	r1, #0
 800c370:	f008 fbfe 	bl	8014b70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	b2db      	uxtb	r3, r3
 800c378:	4619      	mov	r1, r3
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f00a fb8c 	bl	8016a98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3720      	adds	r7, #32
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	4f54300a 	.word	0x4f54300a
 800c390:	4f54310a 	.word	0x4f54310a

0800c394 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	333c      	adds	r3, #60	; 0x3c
 800c3ac:	3304      	adds	r3, #4
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	4a15      	ldr	r2, [pc, #84]	; (800c41c <PCD_EP_OutSetupPacket_int+0x88>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d90e      	bls.n	800c3e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d009      	beq.n	800c3e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f00a fb43 	bl	8016a74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	4a0a      	ldr	r2, [pc, #40]	; (800c41c <PCD_EP_OutSetupPacket_int+0x88>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d90c      	bls.n	800c410 <PCD_EP_OutSetupPacket_int+0x7c>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d108      	bne.n	800c410 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c408:	461a      	mov	r2, r3
 800c40a:	2101      	movs	r1, #1
 800c40c:	f008 fbb0 	bl	8014b70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3718      	adds	r7, #24
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	4f54300a 	.word	0x4f54300a

0800c420 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	460b      	mov	r3, r1
 800c42a:	70fb      	strb	r3, [r7, #3]
 800c42c:	4613      	mov	r3, r2
 800c42e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c436:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c438:	78fb      	ldrb	r3, [r7, #3]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d107      	bne.n	800c44e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c43e:	883b      	ldrh	r3, [r7, #0]
 800c440:	0419      	lsls	r1, r3, #16
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	430a      	orrs	r2, r1
 800c44a:	629a      	str	r2, [r3, #40]	; 0x28
 800c44c:	e028      	b.n	800c4a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c454:	0c1b      	lsrs	r3, r3, #16
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	4413      	add	r3, r2
 800c45a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c45c:	2300      	movs	r3, #0
 800c45e:	73fb      	strb	r3, [r7, #15]
 800c460:	e00d      	b.n	800c47e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	3340      	adds	r3, #64	; 0x40
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	4413      	add	r3, r2
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	0c1b      	lsrs	r3, r3, #16
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	4413      	add	r3, r2
 800c476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	3301      	adds	r3, #1
 800c47c:	73fb      	strb	r3, [r7, #15]
 800c47e:	7bfa      	ldrb	r2, [r7, #15]
 800c480:	78fb      	ldrb	r3, [r7, #3]
 800c482:	3b01      	subs	r3, #1
 800c484:	429a      	cmp	r2, r3
 800c486:	d3ec      	bcc.n	800c462 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c488:	883b      	ldrh	r3, [r7, #0]
 800c48a:	0418      	lsls	r0, r3, #16
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6819      	ldr	r1, [r3, #0]
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	3b01      	subs	r3, #1
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	4302      	orrs	r2, r0
 800c498:	3340      	adds	r3, #64	; 0x40
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	440b      	add	r3, r1
 800c49e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b083      	sub	sp, #12
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	887a      	ldrh	r2, [r7, #2]
 800c4c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c502:	f043 0303 	orr.w	r3, r3, #3
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3714      	adds	r7, #20
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	460b      	mov	r3, r1
 800c522:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c524:	bf00      	nop
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800c530:	b480      	push	{r7}
 800c532:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-M33 System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 800c534:	4b05      	ldr	r3, [pc, #20]	; (800c54c <HAL_PWR_EnableSleepOnExit+0x1c>)
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	4a04      	ldr	r2, [pc, #16]	; (800c54c <HAL_PWR_EnableSleepOnExit+0x1c>)
 800c53a:	f043 0302 	orr.w	r3, r3, #2
 800c53e:	6113      	str	r3, [r2, #16]
}
 800c540:	bf00      	nop
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	e000ed00 	.word	0xe000ed00

0800c550 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800c558:	4b34      	ldr	r3, [pc, #208]	; (800c62c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c55a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c55c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c560:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	429a      	cmp	r2, r3
 800c568:	d101      	bne.n	800c56e <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	e057      	b.n	800c61e <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c574:	d90a      	bls.n	800c58c <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800c576:	4b2d      	ldr	r3, [pc, #180]	; (800c62c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4313      	orrs	r3, r2
 800c582:	4a2a      	ldr	r2, [pc, #168]	; (800c62c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c588:	60d3      	str	r3, [r2, #12]
 800c58a:	e007      	b.n	800c59c <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800c58c:	4b27      	ldr	r3, [pc, #156]	; (800c62c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c594:	4925      	ldr	r1, [pc, #148]	; (800c62c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4313      	orrs	r3, r2
 800c59a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c59c:	4b24      	ldr	r3, [pc, #144]	; (800c630 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a24      	ldr	r2, [pc, #144]	; (800c634 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800c5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5a6:	099b      	lsrs	r3, r3, #6
 800c5a8:	2232      	movs	r2, #50	; 0x32
 800c5aa:	fb02 f303 	mul.w	r3, r2, r3
 800c5ae:	4a21      	ldr	r2, [pc, #132]	; (800c634 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800c5b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5b4:	099b      	lsrs	r3, r3, #6
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c5ba:	e002      	b.n	800c5c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c5c2:	4b1a      	ldr	r3, [pc, #104]	; (800c62c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d102      	bne.n	800c5d4 <HAL_PWREx_ControlVoltageScaling+0x84>
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1f3      	bne.n	800c5bc <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d01b      	beq.n	800c612 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c5da:	4b15      	ldr	r3, [pc, #84]	; (800c630 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4a15      	ldr	r2, [pc, #84]	; (800c634 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800c5e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e4:	099b      	lsrs	r3, r3, #6
 800c5e6:	2232      	movs	r2, #50	; 0x32
 800c5e8:	fb02 f303 	mul.w	r3, r2, r3
 800c5ec:	4a11      	ldr	r2, [pc, #68]	; (800c634 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800c5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f2:	099b      	lsrs	r3, r3, #6
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c5f8:	e002      	b.n	800c600 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c600:	4b0a      	ldr	r3, [pc, #40]	; (800c62c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d102      	bne.n	800c612 <HAL_PWREx_ControlVoltageScaling+0xc2>
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d1f3      	bne.n	800c5fa <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d101      	bne.n	800c61c <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 800c618:	2303      	movs	r3, #3
 800c61a:	e000      	b.n	800c61e <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3714      	adds	r7, #20
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	46020800 	.word	0x46020800
 800c630:	2000000c 	.word	0x2000000c
 800c634:	10624dd3 	.word	0x10624dd3

0800c638 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c638:	b480      	push	{r7}
 800c63a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800c63c:	4b04      	ldr	r3, [pc, #16]	; (800c650 <HAL_PWREx_GetVoltageRange+0x18>)
 800c63e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800c644:	4618      	mov	r0, r3
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	46020800 	.word	0x46020800

0800c654 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800c654:	b480      	push	{r7}
 800c656:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800c658:	4b05      	ldr	r3, [pc, #20]	; (800c670 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c65a:	691b      	ldr	r3, [r3, #16]
 800c65c:	4a04      	ldr	r2, [pc, #16]	; (800c670 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c65e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c662:	6113      	str	r3, [r2, #16]
}
 800c664:	bf00      	nop
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	46020800 	.word	0x46020800

0800c674 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800c678:	4b05      	ldr	r3, [pc, #20]	; (800c690 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	4a04      	ldr	r2, [pc, #16]	; (800c690 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c67e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c682:	6113      	str	r3, [r2, #16]
}
 800c684:	bf00      	nop
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	46020800 	.word	0x46020800

0800c694 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c694:	b480      	push	{r7}
 800c696:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800c698:	4b05      	ldr	r3, [pc, #20]	; (800c6b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	4a04      	ldr	r2, [pc, #16]	; (800c6b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c69e:	f043 0301 	orr.w	r3, r3, #1
 800c6a2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800c6a4:	bf00      	nop
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop
 800c6b0:	46020800 	.word	0x46020800

0800c6b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b08e      	sub	sp, #56	; 0x38
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d102      	bne.n	800c6ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	f000 bec3 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c6ce:	4b9c      	ldr	r3, [pc, #624]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c6d0:	69db      	ldr	r3, [r3, #28]
 800c6d2:	f003 030c 	and.w	r3, r3, #12
 800c6d6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c6d8:	4b99      	ldr	r3, [pc, #612]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6dc:	f003 0303 	and.w	r3, r3, #3
 800c6e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 0310 	and.w	r3, r3, #16
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 8172 	beq.w	800c9d4 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d007      	beq.n	800c706 <HAL_RCC_OscConfig+0x52>
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	2b0c      	cmp	r3, #12
 800c6fa:	f040 80e4 	bne.w	800c8c6 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	2b01      	cmp	r3, #1
 800c702:	f040 80e0 	bne.w	800c8c6 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c706:	4b8e      	ldr	r3, [pc, #568]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 0304 	and.w	r3, r3, #4
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d006      	beq.n	800c720 <HAL_RCC_OscConfig+0x6c>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d102      	bne.n	800c720 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	f000 be9a 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c724:	4b86      	ldr	r3, [pc, #536]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d004      	beq.n	800c73a <HAL_RCC_OscConfig+0x86>
 800c730:	4b83      	ldr	r3, [pc, #524]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c738:	e005      	b.n	800c746 <HAL_RCC_OscConfig+0x92>
 800c73a:	4b81      	ldr	r3, [pc, #516]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c73c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c740:	041b      	lsls	r3, r3, #16
 800c742:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c746:	4293      	cmp	r3, r2
 800c748:	d255      	bcs.n	800c7f6 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d10a      	bne.n	800c766 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c754:	4618      	mov	r0, r3
 800c756:	f001 f9d3 	bl	800db00 <RCC_SetFlashLatencyFromMSIRange>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800c760:	2301      	movs	r3, #1
 800c762:	f000 be77 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c766:	4b76      	ldr	r3, [pc, #472]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	4a75      	ldr	r2, [pc, #468]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c76c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c770:	6093      	str	r3, [r2, #8]
 800c772:	4b73      	ldr	r3, [pc, #460]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77e:	4970      	ldr	r1, [pc, #448]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c780:	4313      	orrs	r3, r2
 800c782:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c788:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c78c:	d309      	bcc.n	800c7a2 <HAL_RCC_OscConfig+0xee>
 800c78e:	4b6c      	ldr	r3, [pc, #432]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	f023 021f 	bic.w	r2, r3, #31
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a1b      	ldr	r3, [r3, #32]
 800c79a:	4969      	ldr	r1, [pc, #420]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c79c:	4313      	orrs	r3, r2
 800c79e:	60cb      	str	r3, [r1, #12]
 800c7a0:	e07e      	b.n	800c8a0 <HAL_RCC_OscConfig+0x1ec>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	da0a      	bge.n	800c7c0 <HAL_RCC_OscConfig+0x10c>
 800c7aa:	4b65      	ldr	r3, [pc, #404]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6a1b      	ldr	r3, [r3, #32]
 800c7b6:	015b      	lsls	r3, r3, #5
 800c7b8:	4961      	ldr	r1, [pc, #388]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	60cb      	str	r3, [r1, #12]
 800c7be:	e06f      	b.n	800c8a0 <HAL_RCC_OscConfig+0x1ec>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7c8:	d30a      	bcc.n	800c7e0 <HAL_RCC_OscConfig+0x12c>
 800c7ca:	4b5d      	ldr	r3, [pc, #372]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a1b      	ldr	r3, [r3, #32]
 800c7d6:	029b      	lsls	r3, r3, #10
 800c7d8:	4959      	ldr	r1, [pc, #356]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	60cb      	str	r3, [r1, #12]
 800c7de:	e05f      	b.n	800c8a0 <HAL_RCC_OscConfig+0x1ec>
 800c7e0:	4b57      	ldr	r3, [pc, #348]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6a1b      	ldr	r3, [r3, #32]
 800c7ec:	03db      	lsls	r3, r3, #15
 800c7ee:	4954      	ldr	r1, [pc, #336]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	60cb      	str	r3, [r1, #12]
 800c7f4:	e054      	b.n	800c8a0 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c7f6:	4b52      	ldr	r3, [pc, #328]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	4a51      	ldr	r2, [pc, #324]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c7fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c800:	6093      	str	r3, [r2, #8]
 800c802:	4b4f      	ldr	r3, [pc, #316]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80e:	494c      	ldr	r1, [pc, #304]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c810:	4313      	orrs	r3, r2
 800c812:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c818:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c81c:	d309      	bcc.n	800c832 <HAL_RCC_OscConfig+0x17e>
 800c81e:	4b48      	ldr	r3, [pc, #288]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	f023 021f 	bic.w	r2, r3, #31
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a1b      	ldr	r3, [r3, #32]
 800c82a:	4945      	ldr	r1, [pc, #276]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c82c:	4313      	orrs	r3, r2
 800c82e:	60cb      	str	r3, [r1, #12]
 800c830:	e028      	b.n	800c884 <HAL_RCC_OscConfig+0x1d0>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c836:	2b00      	cmp	r3, #0
 800c838:	da0a      	bge.n	800c850 <HAL_RCC_OscConfig+0x19c>
 800c83a:	4b41      	ldr	r3, [pc, #260]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a1b      	ldr	r3, [r3, #32]
 800c846:	015b      	lsls	r3, r3, #5
 800c848:	493d      	ldr	r1, [pc, #244]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c84a:	4313      	orrs	r3, r2
 800c84c:	60cb      	str	r3, [r1, #12]
 800c84e:	e019      	b.n	800c884 <HAL_RCC_OscConfig+0x1d0>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c858:	d30a      	bcc.n	800c870 <HAL_RCC_OscConfig+0x1bc>
 800c85a:	4b39      	ldr	r3, [pc, #228]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	029b      	lsls	r3, r3, #10
 800c868:	4935      	ldr	r1, [pc, #212]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c86a:	4313      	orrs	r3, r2
 800c86c:	60cb      	str	r3, [r1, #12]
 800c86e:	e009      	b.n	800c884 <HAL_RCC_OscConfig+0x1d0>
 800c870:	4b33      	ldr	r3, [pc, #204]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6a1b      	ldr	r3, [r3, #32]
 800c87c:	03db      	lsls	r3, r3, #15
 800c87e:	4930      	ldr	r1, [pc, #192]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c880:	4313      	orrs	r3, r2
 800c882:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10a      	bne.n	800c8a0 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88e:	4618      	mov	r0, r3
 800c890:	f001 f936 	bl	800db00 <RCC_SetFlashLatencyFromMSIRange>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d002      	beq.n	800c8a0 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	f000 bdda 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800c8a0:	f001 f8d8 	bl	800da54 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c8a4:	4b27      	ldr	r3, [pc, #156]	; (800c944 <HAL_RCC_OscConfig+0x290>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fa ff3f 	bl	800772c <HAL_InitTick>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800c8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f000 808a 	beq.w	800c9d2 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800c8be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8c2:	f000 bdc7 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	69db      	ldr	r3, [r3, #28]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d066      	beq.n	800c99c <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800c8ce:	4b1c      	ldr	r3, [pc, #112]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a1b      	ldr	r2, [pc, #108]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c8d4:	f043 0301 	orr.w	r3, r3, #1
 800c8d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c8da:	f7fa ff71 	bl	80077c0 <HAL_GetTick>
 800c8de:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c8e0:	e009      	b.n	800c8f6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c8e2:	f7fa ff6d 	bl	80077c0 <HAL_GetTick>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	d902      	bls.n	800c8f6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	f000 bdaf 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c8f6:	4b12      	ldr	r3, [pc, #72]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f003 0304 	and.w	r3, r3, #4
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d0ef      	beq.n	800c8e2 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c902:	4b0f      	ldr	r3, [pc, #60]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	4a0e      	ldr	r2, [pc, #56]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c908:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c90c:	6093      	str	r3, [r2, #8]
 800c90e:	4b0c      	ldr	r3, [pc, #48]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91a:	4909      	ldr	r1, [pc, #36]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c91c:	4313      	orrs	r3, r2
 800c91e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c924:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c928:	d30e      	bcc.n	800c948 <HAL_RCC_OscConfig+0x294>
 800c92a:	4b05      	ldr	r3, [pc, #20]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	f023 021f 	bic.w	r2, r3, #31
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	4902      	ldr	r1, [pc, #8]	; (800c940 <HAL_RCC_OscConfig+0x28c>)
 800c938:	4313      	orrs	r3, r2
 800c93a:	60cb      	str	r3, [r1, #12]
 800c93c:	e04a      	b.n	800c9d4 <HAL_RCC_OscConfig+0x320>
 800c93e:	bf00      	nop
 800c940:	46020c00 	.word	0x46020c00
 800c944:	200000a4 	.word	0x200000a4
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	da0a      	bge.n	800c966 <HAL_RCC_OscConfig+0x2b2>
 800c950:	4b9b      	ldr	r3, [pc, #620]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6a1b      	ldr	r3, [r3, #32]
 800c95c:	015b      	lsls	r3, r3, #5
 800c95e:	4998      	ldr	r1, [pc, #608]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800c960:	4313      	orrs	r3, r2
 800c962:	60cb      	str	r3, [r1, #12]
 800c964:	e036      	b.n	800c9d4 <HAL_RCC_OscConfig+0x320>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c96e:	d30a      	bcc.n	800c986 <HAL_RCC_OscConfig+0x2d2>
 800c970:	4b93      	ldr	r3, [pc, #588]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a1b      	ldr	r3, [r3, #32]
 800c97c:	029b      	lsls	r3, r3, #10
 800c97e:	4990      	ldr	r1, [pc, #576]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800c980:	4313      	orrs	r3, r2
 800c982:	60cb      	str	r3, [r1, #12]
 800c984:	e026      	b.n	800c9d4 <HAL_RCC_OscConfig+0x320>
 800c986:	4b8e      	ldr	r3, [pc, #568]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	03db      	lsls	r3, r3, #15
 800c994:	498a      	ldr	r1, [pc, #552]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800c996:	4313      	orrs	r3, r2
 800c998:	60cb      	str	r3, [r1, #12]
 800c99a:	e01b      	b.n	800c9d4 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800c99c:	4b88      	ldr	r3, [pc, #544]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a87      	ldr	r2, [pc, #540]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800c9a2:	f023 0301 	bic.w	r3, r3, #1
 800c9a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c9a8:	f7fa ff0a 	bl	80077c0 <HAL_GetTick>
 800c9ac:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c9ae:	e009      	b.n	800c9c4 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c9b0:	f7fa ff06 	bl	80077c0 <HAL_GetTick>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d902      	bls.n	800c9c4 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	f000 bd48 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c9c4:	4b7e      	ldr	r3, [pc, #504]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 0304 	and.w	r3, r3, #4
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1ef      	bne.n	800c9b0 <HAL_RCC_OscConfig+0x2fc>
 800c9d0:	e000      	b.n	800c9d4 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c9d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f000 8094 	beq.w	800cb0a <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e4:	2b08      	cmp	r3, #8
 800c9e6:	d005      	beq.n	800c9f4 <HAL_RCC_OscConfig+0x340>
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	2b0c      	cmp	r3, #12
 800c9ec:	d110      	bne.n	800ca10 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	2b03      	cmp	r3, #3
 800c9f2:	d10d      	bne.n	800ca10 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9f4:	4b72      	ldr	r3, [pc, #456]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f000 8083 	beq.w	800cb08 <HAL_RCC_OscConfig+0x454>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d17e      	bne.n	800cb08 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	f000 bd22 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca18:	d106      	bne.n	800ca28 <HAL_RCC_OscConfig+0x374>
 800ca1a:	4b69      	ldr	r3, [pc, #420]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a68      	ldr	r2, [pc, #416]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca24:	6013      	str	r3, [r2, #0]
 800ca26:	e041      	b.n	800caac <HAL_RCC_OscConfig+0x3f8>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca30:	d112      	bne.n	800ca58 <HAL_RCC_OscConfig+0x3a4>
 800ca32:	4b63      	ldr	r3, [pc, #396]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a62      	ldr	r2, [pc, #392]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	4b60      	ldr	r3, [pc, #384]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a5f      	ldr	r2, [pc, #380]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ca48:	6013      	str	r3, [r2, #0]
 800ca4a:	4b5d      	ldr	r3, [pc, #372]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a5c      	ldr	r2, [pc, #368]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	e029      	b.n	800caac <HAL_RCC_OscConfig+0x3f8>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800ca60:	d112      	bne.n	800ca88 <HAL_RCC_OscConfig+0x3d4>
 800ca62:	4b57      	ldr	r3, [pc, #348]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a56      	ldr	r2, [pc, #344]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	4b54      	ldr	r3, [pc, #336]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a53      	ldr	r2, [pc, #332]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca78:	6013      	str	r3, [r2, #0]
 800ca7a:	4b51      	ldr	r3, [pc, #324]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a50      	ldr	r2, [pc, #320]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca84:	6013      	str	r3, [r2, #0]
 800ca86:	e011      	b.n	800caac <HAL_RCC_OscConfig+0x3f8>
 800ca88:	4b4d      	ldr	r3, [pc, #308]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a4c      	ldr	r2, [pc, #304]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca92:	6013      	str	r3, [r2, #0]
 800ca94:	4b4a      	ldr	r3, [pc, #296]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a49      	ldr	r2, [pc, #292]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800ca9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	4b47      	ldr	r3, [pc, #284]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a46      	ldr	r2, [pc, #280]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800caa6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800caaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d014      	beq.n	800cade <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800cab4:	f7fa fe84 	bl	80077c0 <HAL_GetTick>
 800cab8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800caba:	e009      	b.n	800cad0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cabc:	f7fa fe80 	bl	80077c0 <HAL_GetTick>
 800cac0:	4602      	mov	r2, r0
 800cac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	2b64      	cmp	r3, #100	; 0x64
 800cac8:	d902      	bls.n	800cad0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800caca:	2303      	movs	r3, #3
 800cacc:	f000 bcc2 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cad0:	4b3b      	ldr	r3, [pc, #236]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d0ef      	beq.n	800cabc <HAL_RCC_OscConfig+0x408>
 800cadc:	e015      	b.n	800cb0a <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800cade:	f7fa fe6f 	bl	80077c0 <HAL_GetTick>
 800cae2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cae4:	e009      	b.n	800cafa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cae6:	f7fa fe6b 	bl	80077c0 <HAL_GetTick>
 800caea:	4602      	mov	r2, r0
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	2b64      	cmp	r3, #100	; 0x64
 800caf2:	d902      	bls.n	800cafa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800caf4:	2303      	movs	r3, #3
 800caf6:	f000 bcad 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cafa:	4b31      	ldr	r3, [pc, #196]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1ef      	bne.n	800cae6 <HAL_RCC_OscConfig+0x432>
 800cb06:	e000      	b.n	800cb0a <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d066      	beq.n	800cbe4 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800cb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb18:	2b04      	cmp	r3, #4
 800cb1a:	d005      	beq.n	800cb28 <HAL_RCC_OscConfig+0x474>
 800cb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1e:	2b0c      	cmp	r3, #12
 800cb20:	d11a      	bne.n	800cb58 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d117      	bne.n	800cb58 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb28:	4b25      	ldr	r3, [pc, #148]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d006      	beq.n	800cb42 <HAL_RCC_OscConfig+0x48e>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d102      	bne.n	800cb42 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	f000 bc89 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800cb42:	4b1f      	ldr	r3, [pc, #124]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	041b      	lsls	r3, r3, #16
 800cb50:	491b      	ldr	r1, [pc, #108]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cb52:	4313      	orrs	r3, r2
 800cb54:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb56:	e045      	b.n	800cbe4 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d024      	beq.n	800cbaa <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800cb60:	4b17      	ldr	r3, [pc, #92]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a16      	ldr	r2, [pc, #88]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cb66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb6a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cb6c:	f7fa fe28 	bl	80077c0 <HAL_GetTick>
 800cb70:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cb72:	e009      	b.n	800cb88 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb74:	f7fa fe24 	bl	80077c0 <HAL_GetTick>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d902      	bls.n	800cb88 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800cb82:	2303      	movs	r3, #3
 800cb84:	f000 bc66 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cb88:	4b0d      	ldr	r3, [pc, #52]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0ef      	beq.n	800cb74 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800cb94:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cb96:	691b      	ldr	r3, [r3, #16]
 800cb98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	041b      	lsls	r3, r3, #16
 800cba2:	4907      	ldr	r1, [pc, #28]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cba4:	4313      	orrs	r3, r2
 800cba6:	610b      	str	r3, [r1, #16]
 800cba8:	e01c      	b.n	800cbe4 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800cbaa:	4b05      	ldr	r3, [pc, #20]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4a04      	ldr	r2, [pc, #16]	; (800cbc0 <HAL_RCC_OscConfig+0x50c>)
 800cbb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbb4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cbb6:	f7fa fe03 	bl	80077c0 <HAL_GetTick>
 800cbba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cbbc:	e00c      	b.n	800cbd8 <HAL_RCC_OscConfig+0x524>
 800cbbe:	bf00      	nop
 800cbc0:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cbc4:	f7fa fdfc 	bl	80077c0 <HAL_GetTick>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	2b02      	cmp	r3, #2
 800cbd0:	d902      	bls.n	800cbd8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800cbd2:	2303      	movs	r3, #3
 800cbd4:	f000 bc3e 	b.w	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cbd8:	4baf      	ldr	r3, [pc, #700]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1ef      	bne.n	800cbc4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0308 	and.w	r3, r3, #8
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 80c7 	beq.w	800cd80 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cbf8:	4ba7      	ldr	r3, [pc, #668]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cbfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbfe:	f003 0304 	and.w	r3, r3, #4
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d111      	bne.n	800cc2a <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cc06:	4ba4      	ldr	r3, [pc, #656]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cc08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc0c:	4aa2      	ldr	r2, [pc, #648]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cc0e:	f043 0304 	orr.w	r3, r3, #4
 800cc12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cc16:	4ba0      	ldr	r3, [pc, #640]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cc18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc1c:	f003 0304 	and.w	r3, r3, #4
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800cc24:	2301      	movs	r3, #1
 800cc26:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cc2a:	4b9c      	ldr	r3, [pc, #624]	; (800ce9c <HAL_RCC_OscConfig+0x7e8>)
 800cc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d118      	bne.n	800cc68 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800cc36:	4b99      	ldr	r3, [pc, #612]	; (800ce9c <HAL_RCC_OscConfig+0x7e8>)
 800cc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc3a:	4a98      	ldr	r2, [pc, #608]	; (800ce9c <HAL_RCC_OscConfig+0x7e8>)
 800cc3c:	f043 0301 	orr.w	r3, r3, #1
 800cc40:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc42:	f7fa fdbd 	bl	80077c0 <HAL_GetTick>
 800cc46:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cc48:	e008      	b.n	800cc5c <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc4a:	f7fa fdb9 	bl	80077c0 <HAL_GetTick>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc52:	1ad3      	subs	r3, r2, r3
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d901      	bls.n	800cc5c <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	e3fb      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cc5c:	4b8f      	ldr	r3, [pc, #572]	; (800ce9c <HAL_RCC_OscConfig+0x7e8>)
 800cc5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d0f0      	beq.n	800cc4a <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	695b      	ldr	r3, [r3, #20]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d05f      	beq.n	800cd30 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800cc70:	4b89      	ldr	r3, [pc, #548]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cc72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc76:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	699a      	ldr	r2, [r3, #24]
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d037      	beq.n	800ccf6 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d006      	beq.n	800cc9e <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800cc90:	6a3b      	ldr	r3, [r7, #32]
 800cc92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e3da      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d01b      	beq.n	800cce0 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800cca8:	4b7b      	ldr	r3, [pc, #492]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ccaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ccae:	4a7a      	ldr	r2, [pc, #488]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ccb0:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800ccb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800ccb8:	f7fa fd82 	bl	80077c0 <HAL_GetTick>
 800ccbc:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ccbe:	e008      	b.n	800ccd2 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ccc0:	f7fa fd7e 	bl	80077c0 <HAL_GetTick>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d901      	bls.n	800ccd2 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	e3c0      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ccd2:	4b71      	ldr	r3, [pc, #452]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ccd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ccd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1ef      	bne.n	800ccc0 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800cce0:	4b6d      	ldr	r3, [pc, #436]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cce6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	699b      	ldr	r3, [r3, #24]
 800ccee:	496a      	ldr	r1, [pc, #424]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800ccf6:	4b68      	ldr	r3, [pc, #416]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ccf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ccfc:	4a66      	ldr	r2, [pc, #408]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ccfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800cd06:	f7fa fd5b 	bl	80077c0 <HAL_GetTick>
 800cd0a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800cd0c:	e008      	b.n	800cd20 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cd0e:	f7fa fd57 	bl	80077c0 <HAL_GetTick>
 800cd12:	4602      	mov	r2, r0
 800cd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d901      	bls.n	800cd20 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 800cd1c:	2303      	movs	r3, #3
 800cd1e:	e399      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800cd20:	4b5d      	ldr	r3, [pc, #372]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cd22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d0ef      	beq.n	800cd0e <HAL_RCC_OscConfig+0x65a>
 800cd2e:	e01b      	b.n	800cd68 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800cd30:	4b59      	ldr	r3, [pc, #356]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cd32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd36:	4a58      	ldr	r2, [pc, #352]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cd38:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800cd3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800cd40:	f7fa fd3e 	bl	80077c0 <HAL_GetTick>
 800cd44:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800cd46:	e008      	b.n	800cd5a <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cd48:	f7fa fd3a 	bl	80077c0 <HAL_GetTick>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d901      	bls.n	800cd5a <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800cd56:	2303      	movs	r3, #3
 800cd58:	e37c      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800cd5a:	4b4f      	ldr	r3, [pc, #316]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cd5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1ef      	bne.n	800cd48 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cd68:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d107      	bne.n	800cd80 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd70:	4b49      	ldr	r3, [pc, #292]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cd72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd76:	4a48      	ldr	r2, [pc, #288]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cd78:	f023 0304 	bic.w	r3, r3, #4
 800cd7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f003 0304 	and.w	r3, r3, #4
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f000 8112 	beq.w	800cfb2 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd94:	4b40      	ldr	r3, [pc, #256]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cd96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd9a:	f003 0304 	and.w	r3, r3, #4
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d111      	bne.n	800cdc6 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cda2:	4b3d      	ldr	r3, [pc, #244]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cda4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cda8:	4a3b      	ldr	r2, [pc, #236]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cdaa:	f043 0304 	orr.w	r3, r3, #4
 800cdae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cdb2:	4b39      	ldr	r3, [pc, #228]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800cdb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdb8:	f003 0304 	and.w	r3, r3, #4
 800cdbc:	613b      	str	r3, [r7, #16]
 800cdbe:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cdc6:	4b35      	ldr	r3, [pc, #212]	; (800ce9c <HAL_RCC_OscConfig+0x7e8>)
 800cdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdca:	f003 0301 	and.w	r3, r3, #1
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d118      	bne.n	800ce04 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800cdd2:	4b32      	ldr	r3, [pc, #200]	; (800ce9c <HAL_RCC_OscConfig+0x7e8>)
 800cdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd6:	4a31      	ldr	r2, [pc, #196]	; (800ce9c <HAL_RCC_OscConfig+0x7e8>)
 800cdd8:	f043 0301 	orr.w	r3, r3, #1
 800cddc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cdde:	f7fa fcef 	bl	80077c0 <HAL_GetTick>
 800cde2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cde4:	e008      	b.n	800cdf8 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cde6:	f7fa fceb 	bl	80077c0 <HAL_GetTick>
 800cdea:	4602      	mov	r2, r0
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d901      	bls.n	800cdf8 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	e32d      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cdf8:	4b28      	ldr	r3, [pc, #160]	; (800ce9c <HAL_RCC_OscConfig+0x7e8>)
 800cdfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdfc:	f003 0301 	and.w	r3, r3, #1
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d0f0      	beq.n	800cde6 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	f003 0301 	and.w	r3, r3, #1
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d01f      	beq.n	800ce50 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	f003 0304 	and.w	r3, r3, #4
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d010      	beq.n	800ce3e <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ce1c:	4b1e      	ldr	r3, [pc, #120]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ce1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce22:	4a1d      	ldr	r2, [pc, #116]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ce24:	f043 0304 	orr.w	r3, r3, #4
 800ce28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ce2c:	4b1a      	ldr	r3, [pc, #104]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ce2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce32:	4a19      	ldr	r2, [pc, #100]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ce34:	f043 0301 	orr.w	r3, r3, #1
 800ce38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ce3c:	e018      	b.n	800ce70 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ce3e:	4b16      	ldr	r3, [pc, #88]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ce40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce44:	4a14      	ldr	r2, [pc, #80]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ce46:	f043 0301 	orr.w	r3, r3, #1
 800ce4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ce4e:	e00f      	b.n	800ce70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ce50:	4b11      	ldr	r3, [pc, #68]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ce52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce56:	4a10      	ldr	r2, [pc, #64]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ce58:	f023 0301 	bic.w	r3, r3, #1
 800ce5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ce60:	4b0d      	ldr	r3, [pc, #52]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ce62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce66:	4a0c      	ldr	r2, [pc, #48]	; (800ce98 <HAL_RCC_OscConfig+0x7e4>)
 800ce68:	f023 0304 	bic.w	r3, r3, #4
 800ce6c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d058      	beq.n	800cf2a <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800ce78:	f7fa fca2 	bl	80077c0 <HAL_GetTick>
 800ce7c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce7e:	e00f      	b.n	800cea0 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce80:	f7fa fc9e 	bl	80077c0 <HAL_GetTick>
 800ce84:	4602      	mov	r2, r0
 800ce86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d906      	bls.n	800cea0 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800ce92:	2303      	movs	r3, #3
 800ce94:	e2de      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
 800ce96:	bf00      	nop
 800ce98:	46020c00 	.word	0x46020c00
 800ce9c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cea0:	4b9c      	ldr	r3, [pc, #624]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cea6:	f003 0302 	and.w	r3, r3, #2
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d0e8      	beq.n	800ce80 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d01b      	beq.n	800cef2 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ceba:	4b96      	ldr	r3, [pc, #600]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cec0:	4a94      	ldr	r2, [pc, #592]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cec6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800ceca:	e00a      	b.n	800cee2 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cecc:	f7fa fc78 	bl	80077c0 <HAL_GetTick>
 800ced0:	4602      	mov	r2, r0
 800ced2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced4:	1ad3      	subs	r3, r2, r3
 800ced6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d901      	bls.n	800cee2 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800cede:	2303      	movs	r3, #3
 800cee0:	e2b8      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800cee2:	4b8c      	ldr	r3, [pc, #560]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d0ed      	beq.n	800cecc <HAL_RCC_OscConfig+0x818>
 800cef0:	e053      	b.n	800cf9a <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800cef2:	4b88      	ldr	r3, [pc, #544]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cef8:	4a86      	ldr	r2, [pc, #536]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cefa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cefe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cf02:	e00a      	b.n	800cf1a <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf04:	f7fa fc5c 	bl	80077c0 <HAL_GetTick>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d901      	bls.n	800cf1a <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800cf16:	2303      	movs	r3, #3
 800cf18:	e29c      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cf1a:	4b7e      	ldr	r3, [pc, #504]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cf1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cf20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1ed      	bne.n	800cf04 <HAL_RCC_OscConfig+0x850>
 800cf28:	e037      	b.n	800cf9a <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800cf2a:	f7fa fc49 	bl	80077c0 <HAL_GetTick>
 800cf2e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cf30:	e00a      	b.n	800cf48 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf32:	f7fa fc45 	bl	80077c0 <HAL_GetTick>
 800cf36:	4602      	mov	r2, r0
 800cf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d901      	bls.n	800cf48 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800cf44:	2303      	movs	r3, #3
 800cf46:	e285      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cf48:	4b72      	ldr	r3, [pc, #456]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cf4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cf4e:	f003 0302 	and.w	r3, r3, #2
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1ed      	bne.n	800cf32 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800cf56:	4b6f      	ldr	r3, [pc, #444]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cf58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cf5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d01a      	beq.n	800cf9a <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800cf64:	4b6b      	ldr	r3, [pc, #428]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cf66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cf6a:	4a6a      	ldr	r2, [pc, #424]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cf6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cf74:	e00a      	b.n	800cf8c <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf76:	f7fa fc23 	bl	80077c0 <HAL_GetTick>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d901      	bls.n	800cf8c <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800cf88:	2303      	movs	r3, #3
 800cf8a:	e263      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cf8c:	4b61      	ldr	r3, [pc, #388]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cf8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cf92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1ed      	bne.n	800cf76 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cf9a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d107      	bne.n	800cfb2 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cfa2:	4b5c      	ldr	r3, [pc, #368]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cfa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfa8:	4a5a      	ldr	r2, [pc, #360]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cfaa:	f023 0304 	bic.w	r3, r3, #4
 800cfae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f003 0320 	and.w	r3, r3, #32
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d036      	beq.n	800d02c <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d019      	beq.n	800cffa <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800cfc6:	4b53      	ldr	r3, [pc, #332]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a52      	ldr	r2, [pc, #328]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cfcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cfd0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cfd2:	f7fa fbf5 	bl	80077c0 <HAL_GetTick>
 800cfd6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800cfd8:	e008      	b.n	800cfec <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cfda:	f7fa fbf1 	bl	80077c0 <HAL_GetTick>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d901      	bls.n	800cfec <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	e233      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800cfec:	4b49      	ldr	r3, [pc, #292]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d0f0      	beq.n	800cfda <HAL_RCC_OscConfig+0x926>
 800cff8:	e018      	b.n	800d02c <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800cffa:	4b46      	ldr	r3, [pc, #280]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a45      	ldr	r2, [pc, #276]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d004:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d006:	f7fa fbdb 	bl	80077c0 <HAL_GetTick>
 800d00a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d00c:	e008      	b.n	800d020 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d00e:	f7fa fbd7 	bl	80077c0 <HAL_GetTick>
 800d012:	4602      	mov	r2, r0
 800d014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d016:	1ad3      	subs	r3, r2, r3
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d901      	bls.n	800d020 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800d01c:	2303      	movs	r3, #3
 800d01e:	e219      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d020:	4b3c      	ldr	r3, [pc, #240]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1f0      	bne.n	800d00e <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d034:	2b00      	cmp	r3, #0
 800d036:	d036      	beq.n	800d0a6 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d019      	beq.n	800d074 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800d040:	4b34      	ldr	r3, [pc, #208]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a33      	ldr	r2, [pc, #204]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d04a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d04c:	f7fa fbb8 	bl	80077c0 <HAL_GetTick>
 800d050:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800d052:	e008      	b.n	800d066 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800d054:	f7fa fbb4 	bl	80077c0 <HAL_GetTick>
 800d058:	4602      	mov	r2, r0
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d901      	bls.n	800d066 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	e1f6      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800d066:	4b2b      	ldr	r3, [pc, #172]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d0f0      	beq.n	800d054 <HAL_RCC_OscConfig+0x9a0>
 800d072:	e018      	b.n	800d0a6 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800d074:	4b27      	ldr	r3, [pc, #156]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a26      	ldr	r2, [pc, #152]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d07a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d07e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d080:	f7fa fb9e 	bl	80077c0 <HAL_GetTick>
 800d084:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800d086:	e008      	b.n	800d09a <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800d088:	f7fa fb9a 	bl	80077c0 <HAL_GetTick>
 800d08c:	4602      	mov	r2, r0
 800d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	2b02      	cmp	r3, #2
 800d094:	d901      	bls.n	800d09a <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800d096:	2303      	movs	r3, #3
 800d098:	e1dc      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800d09a:	4b1e      	ldr	r3, [pc, #120]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1f0      	bne.n	800d088 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d07f      	beq.n	800d1b2 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d062      	beq.n	800d180 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800d0ba:	4b16      	ldr	r3, [pc, #88]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d0bc:	689b      	ldr	r3, [r3, #8]
 800d0be:	4a15      	ldr	r2, [pc, #84]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d0c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d0c4:	6093      	str	r3, [r2, #8]
 800d0c6:	4b13      	ldr	r3, [pc, #76]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d2:	4910      	ldr	r1, [pc, #64]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0dc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800d0e0:	d309      	bcc.n	800d0f6 <HAL_RCC_OscConfig+0xa42>
 800d0e2:	4b0c      	ldr	r3, [pc, #48]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	f023 021f 	bic.w	r2, r3, #31
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6a1b      	ldr	r3, [r3, #32]
 800d0ee:	4909      	ldr	r1, [pc, #36]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	60cb      	str	r3, [r1, #12]
 800d0f4:	e02a      	b.n	800d14c <HAL_RCC_OscConfig+0xa98>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	da0c      	bge.n	800d118 <HAL_RCC_OscConfig+0xa64>
 800d0fe:	4b05      	ldr	r3, [pc, #20]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a1b      	ldr	r3, [r3, #32]
 800d10a:	015b      	lsls	r3, r3, #5
 800d10c:	4901      	ldr	r1, [pc, #4]	; (800d114 <HAL_RCC_OscConfig+0xa60>)
 800d10e:	4313      	orrs	r3, r2
 800d110:	60cb      	str	r3, [r1, #12]
 800d112:	e01b      	b.n	800d14c <HAL_RCC_OscConfig+0xa98>
 800d114:	46020c00 	.word	0x46020c00
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d120:	d30a      	bcc.n	800d138 <HAL_RCC_OscConfig+0xa84>
 800d122:	4ba5      	ldr	r3, [pc, #660]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a1b      	ldr	r3, [r3, #32]
 800d12e:	029b      	lsls	r3, r3, #10
 800d130:	49a1      	ldr	r1, [pc, #644]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d132:	4313      	orrs	r3, r2
 800d134:	60cb      	str	r3, [r1, #12]
 800d136:	e009      	b.n	800d14c <HAL_RCC_OscConfig+0xa98>
 800d138:	4b9f      	ldr	r3, [pc, #636]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6a1b      	ldr	r3, [r3, #32]
 800d144:	03db      	lsls	r3, r3, #15
 800d146:	499c      	ldr	r1, [pc, #624]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d148:	4313      	orrs	r3, r2
 800d14a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800d14c:	4b9a      	ldr	r3, [pc, #616]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a99      	ldr	r2, [pc, #612]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d152:	f043 0310 	orr.w	r3, r3, #16
 800d156:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d158:	f7fa fb32 	bl	80077c0 <HAL_GetTick>
 800d15c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800d15e:	e008      	b.n	800d172 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800d160:	f7fa fb2e 	bl	80077c0 <HAL_GetTick>
 800d164:	4602      	mov	r2, r0
 800d166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d168:	1ad3      	subs	r3, r2, r3
 800d16a:	2b02      	cmp	r3, #2
 800d16c:	d901      	bls.n	800d172 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800d16e:	2303      	movs	r3, #3
 800d170:	e170      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800d172:	4b91      	ldr	r3, [pc, #580]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f003 0320 	and.w	r3, r3, #32
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d0f0      	beq.n	800d160 <HAL_RCC_OscConfig+0xaac>
 800d17e:	e018      	b.n	800d1b2 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800d180:	4b8d      	ldr	r3, [pc, #564]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a8c      	ldr	r2, [pc, #560]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d186:	f023 0310 	bic.w	r3, r3, #16
 800d18a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d18c:	f7fa fb18 	bl	80077c0 <HAL_GetTick>
 800d190:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800d192:	e008      	b.n	800d1a6 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800d194:	f7fa fb14 	bl	80077c0 <HAL_GetTick>
 800d198:	4602      	mov	r2, r0
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d901      	bls.n	800d1a6 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	e156      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800d1a6:	4b84      	ldr	r3, [pc, #528]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 0320 	and.w	r3, r3, #32
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1f0      	bne.n	800d194 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f000 814b 	beq.w	800d452 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d1c2:	4b7d      	ldr	r3, [pc, #500]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d1c4:	69db      	ldr	r3, [r3, #28]
 800d1c6:	f003 030c 	and.w	r3, r3, #12
 800d1ca:	2b0c      	cmp	r3, #12
 800d1cc:	f000 80fa 	beq.w	800d3c4 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	f040 80cc 	bne.w	800d372 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d1da:	4b77      	ldr	r3, [pc, #476]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a76      	ldr	r2, [pc, #472]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d1e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d1e4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d1e6:	f7fa faeb 	bl	80077c0 <HAL_GetTick>
 800d1ea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d1ec:	e008      	b.n	800d200 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1ee:	f7fa fae7 	bl	80077c0 <HAL_GetTick>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d901      	bls.n	800d200 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e129      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d200:	4b6d      	ldr	r3, [pc, #436]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d1f0      	bne.n	800d1ee <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d20c:	4b6a      	ldr	r3, [pc, #424]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d20e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d212:	f003 0304 	and.w	r3, r3, #4
 800d216:	2b00      	cmp	r3, #0
 800d218:	d111      	bne.n	800d23e <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800d21a:	4b67      	ldr	r3, [pc, #412]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d21c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d220:	4a65      	ldr	r2, [pc, #404]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d222:	f043 0304 	orr.w	r3, r3, #4
 800d226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d22a:	4b63      	ldr	r3, [pc, #396]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d22c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d230:	f003 0304 	and.w	r3, r3, #4
 800d234:	60fb      	str	r3, [r7, #12]
 800d236:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800d238:	2301      	movs	r3, #1
 800d23a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800d23e:	4b5f      	ldr	r3, [pc, #380]	; (800d3bc <HAL_RCC_OscConfig+0xd08>)
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d246:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d24a:	d102      	bne.n	800d252 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 800d24c:	2301      	movs	r3, #1
 800d24e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d252:	4b5a      	ldr	r3, [pc, #360]	; (800d3bc <HAL_RCC_OscConfig+0xd08>)
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	4a59      	ldr	r2, [pc, #356]	; (800d3bc <HAL_RCC_OscConfig+0xd08>)
 800d258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d25c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800d25e:	4b56      	ldr	r3, [pc, #344]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d266:	f023 0303 	bic.w	r3, r3, #3
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d272:	3a01      	subs	r2, #1
 800d274:	0212      	lsls	r2, r2, #8
 800d276:	4311      	orrs	r1, r2
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d27c:	430a      	orrs	r2, r1
 800d27e:	494e      	ldr	r1, [pc, #312]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d280:	4313      	orrs	r3, r2
 800d282:	628b      	str	r3, [r1, #40]	; 0x28
 800d284:	4b4c      	ldr	r3, [pc, #304]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d288:	4b4d      	ldr	r3, [pc, #308]	; (800d3c0 <HAL_RCC_OscConfig+0xd0c>)
 800d28a:	4013      	ands	r3, r2
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d290:	3a01      	subs	r2, #1
 800d292:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d29a:	3a01      	subs	r2, #1
 800d29c:	0252      	lsls	r2, r2, #9
 800d29e:	b292      	uxth	r2, r2
 800d2a0:	4311      	orrs	r1, r2
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d2a6:	3a01      	subs	r2, #1
 800d2a8:	0412      	lsls	r2, r2, #16
 800d2aa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800d2ae:	4311      	orrs	r1, r2
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d2b4:	3a01      	subs	r2, #1
 800d2b6:	0612      	lsls	r2, r2, #24
 800d2b8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800d2bc:	430a      	orrs	r2, r1
 800d2be:	493e      	ldr	r1, [pc, #248]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d2c4:	4b3c      	ldr	r3, [pc, #240]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c8:	4a3b      	ldr	r2, [pc, #236]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d2ca:	f023 0310 	bic.w	r3, r3, #16
 800d2ce:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800d2d0:	4b39      	ldr	r3, [pc, #228]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d2d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d2e0:	00d2      	lsls	r2, r2, #3
 800d2e2:	4935      	ldr	r1, [pc, #212]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d2e8:	4b33      	ldr	r3, [pc, #204]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ec:	4a32      	ldr	r2, [pc, #200]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d2ee:	f043 0310 	orr.w	r3, r3, #16
 800d2f2:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800d2f4:	4b30      	ldr	r3, [pc, #192]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2f8:	f023 020c 	bic.w	r2, r3, #12
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d300:	492d      	ldr	r1, [pc, #180]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d302:	4313      	orrs	r3, r2
 800d304:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800d306:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d105      	bne.n	800d31a <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d30e:	4b2b      	ldr	r3, [pc, #172]	; (800d3bc <HAL_RCC_OscConfig+0xd08>)
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	4a2a      	ldr	r2, [pc, #168]	; (800d3bc <HAL_RCC_OscConfig+0xd08>)
 800d314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d318:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800d31a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d107      	bne.n	800d332 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800d322:	4b25      	ldr	r3, [pc, #148]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d328:	4a23      	ldr	r2, [pc, #140]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d32a:	f023 0304 	bic.w	r3, r3, #4
 800d32e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d332:	4b21      	ldr	r3, [pc, #132]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d336:	4a20      	ldr	r2, [pc, #128]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d33c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800d33e:	4b1e      	ldr	r3, [pc, #120]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a1d      	ldr	r2, [pc, #116]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d348:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d34a:	f7fa fa39 	bl	80077c0 <HAL_GetTick>
 800d34e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d350:	e008      	b.n	800d364 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d352:	f7fa fa35 	bl	80077c0 <HAL_GetTick>
 800d356:	4602      	mov	r2, r0
 800d358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d901      	bls.n	800d364 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800d360:	2303      	movs	r3, #3
 800d362:	e077      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d364:	4b14      	ldr	r3, [pc, #80]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d0f0      	beq.n	800d352 <HAL_RCC_OscConfig+0xc9e>
 800d370:	e06f      	b.n	800d452 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d372:	4b11      	ldr	r3, [pc, #68]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	4a10      	ldr	r2, [pc, #64]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d37c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d37e:	f7fa fa1f 	bl	80077c0 <HAL_GetTick>
 800d382:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d384:	e008      	b.n	800d398 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d386:	f7fa fa1b 	bl	80077c0 <HAL_GetTick>
 800d38a:	4602      	mov	r2, r0
 800d38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38e:	1ad3      	subs	r3, r2, r3
 800d390:	2b02      	cmp	r3, #2
 800d392:	d901      	bls.n	800d398 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800d394:	2303      	movs	r3, #3
 800d396:	e05d      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d398:	4b07      	ldr	r3, [pc, #28]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1f0      	bne.n	800d386 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800d3a4:	4b04      	ldr	r3, [pc, #16]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a8:	4a03      	ldr	r2, [pc, #12]	; (800d3b8 <HAL_RCC_OscConfig+0xd04>)
 800d3aa:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800d3ae:	f023 0303 	bic.w	r3, r3, #3
 800d3b2:	6293      	str	r3, [r2, #40]	; 0x28
 800d3b4:	e04d      	b.n	800d452 <HAL_RCC_OscConfig+0xd9e>
 800d3b6:	bf00      	nop
 800d3b8:	46020c00 	.word	0x46020c00
 800d3bc:	46020800 	.word	0x46020800
 800d3c0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800d3c4:	4b25      	ldr	r3, [pc, #148]	; (800d45c <HAL_RCC_OscConfig+0xda8>)
 800d3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d3ca:	4b24      	ldr	r3, [pc, #144]	; (800d45c <HAL_RCC_OscConfig+0xda8>)
 800d3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ce:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d03a      	beq.n	800d44e <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	f003 0203 	and.w	r2, r3, #3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d133      	bne.n	800d44e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	0a1b      	lsrs	r3, r3, #8
 800d3ea:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d12a      	bne.n	800d44e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	0b1b      	lsrs	r3, r3, #12
 800d3fc:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d404:	429a      	cmp	r2, r3
 800d406:	d122      	bne.n	800d44e <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d412:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d414:	429a      	cmp	r2, r3
 800d416:	d11a      	bne.n	800d44e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	0a5b      	lsrs	r3, r3, #9
 800d41c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d424:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d426:	429a      	cmp	r2, r3
 800d428:	d111      	bne.n	800d44e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	0c1b      	lsrs	r3, r3, #16
 800d42e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d436:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d438:	429a      	cmp	r2, r3
 800d43a:	d108      	bne.n	800d44e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	0e1b      	lsrs	r3, r3, #24
 800d440:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d448:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d001      	beq.n	800d452 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	e000      	b.n	800d454 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3738      	adds	r7, #56	; 0x38
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	46020c00 	.word	0x46020c00

0800d460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d101      	bne.n	800d474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d470:	2301      	movs	r3, #1
 800d472:	e1d9      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d474:	4b9b      	ldr	r3, [pc, #620]	; (800d6e4 <HAL_RCC_ClockConfig+0x284>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f003 030f 	and.w	r3, r3, #15
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d910      	bls.n	800d4a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d482:	4b98      	ldr	r3, [pc, #608]	; (800d6e4 <HAL_RCC_ClockConfig+0x284>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f023 020f 	bic.w	r2, r3, #15
 800d48a:	4996      	ldr	r1, [pc, #600]	; (800d6e4 <HAL_RCC_ClockConfig+0x284>)
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	4313      	orrs	r3, r2
 800d490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d492:	4b94      	ldr	r3, [pc, #592]	; (800d6e4 <HAL_RCC_ClockConfig+0x284>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f003 030f 	and.w	r3, r3, #15
 800d49a:	683a      	ldr	r2, [r7, #0]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d001      	beq.n	800d4a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e1c1      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 0310 	and.w	r3, r3, #16
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d010      	beq.n	800d4d2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	695a      	ldr	r2, [r3, #20]
 800d4b4:	4b8c      	ldr	r3, [pc, #560]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d908      	bls.n	800d4d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800d4c0:	4b89      	ldr	r3, [pc, #548]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	695b      	ldr	r3, [r3, #20]
 800d4cc:	4986      	ldr	r1, [pc, #536]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f003 0308 	and.w	r3, r3, #8
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d012      	beq.n	800d504 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	691a      	ldr	r2, [r3, #16]
 800d4e2:	4b81      	ldr	r3, [pc, #516]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d4e4:	6a1b      	ldr	r3, [r3, #32]
 800d4e6:	091b      	lsrs	r3, r3, #4
 800d4e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d909      	bls.n	800d504 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d4f0:	4b7d      	ldr	r3, [pc, #500]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d4f2:	6a1b      	ldr	r3, [r3, #32]
 800d4f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	691b      	ldr	r3, [r3, #16]
 800d4fc:	011b      	lsls	r3, r3, #4
 800d4fe:	497a      	ldr	r1, [pc, #488]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d500:	4313      	orrs	r3, r2
 800d502:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f003 0304 	and.w	r3, r3, #4
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d010      	beq.n	800d532 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	68da      	ldr	r2, [r3, #12]
 800d514:	4b74      	ldr	r3, [pc, #464]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d516:	6a1b      	ldr	r3, [r3, #32]
 800d518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d908      	bls.n	800d532 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d520:	4b71      	ldr	r3, [pc, #452]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d522:	6a1b      	ldr	r3, [r3, #32]
 800d524:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	496e      	ldr	r1, [pc, #440]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d52e:	4313      	orrs	r3, r2
 800d530:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f003 0302 	and.w	r3, r3, #2
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d010      	beq.n	800d560 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	689a      	ldr	r2, [r3, #8]
 800d542:	4b69      	ldr	r3, [pc, #420]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d544:	6a1b      	ldr	r3, [r3, #32]
 800d546:	f003 030f 	and.w	r3, r3, #15
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d908      	bls.n	800d560 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d54e:	4b66      	ldr	r3, [pc, #408]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d550:	6a1b      	ldr	r3, [r3, #32]
 800d552:	f023 020f 	bic.w	r2, r3, #15
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	4963      	ldr	r1, [pc, #396]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d55c:	4313      	orrs	r3, r2
 800d55e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f003 0301 	and.w	r3, r3, #1
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 80d2 	beq.w	800d712 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800d56e:	2300      	movs	r3, #0
 800d570:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	2b03      	cmp	r3, #3
 800d578:	d143      	bne.n	800d602 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d57a:	4b5b      	ldr	r3, [pc, #364]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d57c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d580:	f003 0304 	and.w	r3, r3, #4
 800d584:	2b00      	cmp	r3, #0
 800d586:	d110      	bne.n	800d5aa <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800d588:	4b57      	ldr	r3, [pc, #348]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d58a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d58e:	4a56      	ldr	r2, [pc, #344]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d590:	f043 0304 	orr.w	r3, r3, #4
 800d594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d598:	4b53      	ldr	r3, [pc, #332]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d59a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d59e:	f003 0304 	and.w	r3, r3, #4
 800d5a2:	60bb      	str	r3, [r7, #8]
 800d5a4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800d5aa:	f7fa f909 	bl	80077c0 <HAL_GetTick>
 800d5ae:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800d5b0:	4b4e      	ldr	r3, [pc, #312]	; (800d6ec <HAL_RCC_ClockConfig+0x28c>)
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00f      	beq.n	800d5dc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d5bc:	e008      	b.n	800d5d0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800d5be:	f7fa f8ff 	bl	80077c0 <HAL_GetTick>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	1ad3      	subs	r3, r2, r3
 800d5c8:	2b02      	cmp	r3, #2
 800d5ca:	d901      	bls.n	800d5d0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800d5cc:	2303      	movs	r3, #3
 800d5ce:	e12b      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d5d0:	4b46      	ldr	r3, [pc, #280]	; (800d6ec <HAL_RCC_ClockConfig+0x28c>)
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d0f0      	beq.n	800d5be <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800d5dc:	7dfb      	ldrb	r3, [r7, #23]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d107      	bne.n	800d5f2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800d5e2:	4b41      	ldr	r3, [pc, #260]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d5e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5e8:	4a3f      	ldr	r2, [pc, #252]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d5ea:	f023 0304 	bic.w	r3, r3, #4
 800d5ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d5f2:	4b3d      	ldr	r3, [pc, #244]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d121      	bne.n	800d642 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e112      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	2b02      	cmp	r3, #2
 800d608:	d107      	bne.n	800d61a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d60a:	4b37      	ldr	r3, [pc, #220]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d612:	2b00      	cmp	r3, #0
 800d614:	d115      	bne.n	800d642 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d616:	2301      	movs	r3, #1
 800d618:	e106      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d107      	bne.n	800d632 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800d622:	4b31      	ldr	r3, [pc, #196]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f003 0304 	and.w	r3, r3, #4
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d109      	bne.n	800d642 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d62e:	2301      	movs	r3, #1
 800d630:	e0fa      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d632:	4b2d      	ldr	r3, [pc, #180]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d101      	bne.n	800d642 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	e0f2      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800d642:	4b29      	ldr	r3, [pc, #164]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d644:	69db      	ldr	r3, [r3, #28]
 800d646:	f023 0203 	bic.w	r2, r3, #3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	4926      	ldr	r1, [pc, #152]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d650:	4313      	orrs	r3, r2
 800d652:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800d654:	f7fa f8b4 	bl	80077c0 <HAL_GetTick>
 800d658:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	2b03      	cmp	r3, #3
 800d660:	d112      	bne.n	800d688 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d662:	e00a      	b.n	800d67a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d664:	f7fa f8ac 	bl	80077c0 <HAL_GetTick>
 800d668:	4602      	mov	r2, r0
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	1ad3      	subs	r3, r2, r3
 800d66e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d672:	4293      	cmp	r3, r2
 800d674:	d901      	bls.n	800d67a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800d676:	2303      	movs	r3, #3
 800d678:	e0d6      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d67a:	4b1b      	ldr	r3, [pc, #108]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d67c:	69db      	ldr	r3, [r3, #28]
 800d67e:	f003 030c 	and.w	r3, r3, #12
 800d682:	2b0c      	cmp	r3, #12
 800d684:	d1ee      	bne.n	800d664 <HAL_RCC_ClockConfig+0x204>
 800d686:	e044      	b.n	800d712 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d112      	bne.n	800d6b6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d690:	e00a      	b.n	800d6a8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d692:	f7fa f895 	bl	80077c0 <HAL_GetTick>
 800d696:	4602      	mov	r2, r0
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d901      	bls.n	800d6a8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	e0bf      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d6a8:	4b0f      	ldr	r3, [pc, #60]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d6aa:	69db      	ldr	r3, [r3, #28]
 800d6ac:	f003 030c 	and.w	r3, r3, #12
 800d6b0:	2b08      	cmp	r3, #8
 800d6b2:	d1ee      	bne.n	800d692 <HAL_RCC_ClockConfig+0x232>
 800d6b4:	e02d      	b.n	800d712 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d123      	bne.n	800d706 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d6be:	e00a      	b.n	800d6d6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d6c0:	f7fa f87e 	bl	80077c0 <HAL_GetTick>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	1ad3      	subs	r3, r2, r3
 800d6ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d901      	bls.n	800d6d6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	e0a8      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d6d6:	4b04      	ldr	r3, [pc, #16]	; (800d6e8 <HAL_RCC_ClockConfig+0x288>)
 800d6d8:	69db      	ldr	r3, [r3, #28]
 800d6da:	f003 030c 	and.w	r3, r3, #12
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1ee      	bne.n	800d6c0 <HAL_RCC_ClockConfig+0x260>
 800d6e2:	e016      	b.n	800d712 <HAL_RCC_ClockConfig+0x2b2>
 800d6e4:	40022000 	.word	0x40022000
 800d6e8:	46020c00 	.word	0x46020c00
 800d6ec:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d6f0:	f7fa f866 	bl	80077c0 <HAL_GetTick>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d901      	bls.n	800d706 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800d702:	2303      	movs	r3, #3
 800d704:	e090      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d706:	4b4a      	ldr	r3, [pc, #296]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d708:	69db      	ldr	r3, [r3, #28]
 800d70a:	f003 030c 	and.w	r3, r3, #12
 800d70e:	2b04      	cmp	r3, #4
 800d710:	d1ee      	bne.n	800d6f0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f003 0302 	and.w	r3, r3, #2
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d010      	beq.n	800d740 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	689a      	ldr	r2, [r3, #8]
 800d722:	4b43      	ldr	r3, [pc, #268]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d724:	6a1b      	ldr	r3, [r3, #32]
 800d726:	f003 030f 	and.w	r3, r3, #15
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d208      	bcs.n	800d740 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d72e:	4b40      	ldr	r3, [pc, #256]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d730:	6a1b      	ldr	r3, [r3, #32]
 800d732:	f023 020f 	bic.w	r2, r3, #15
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	493d      	ldr	r1, [pc, #244]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d73c:	4313      	orrs	r3, r2
 800d73e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d740:	4b3c      	ldr	r3, [pc, #240]	; (800d834 <HAL_RCC_ClockConfig+0x3d4>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f003 030f 	and.w	r3, r3, #15
 800d748:	683a      	ldr	r2, [r7, #0]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d210      	bcs.n	800d770 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d74e:	4b39      	ldr	r3, [pc, #228]	; (800d834 <HAL_RCC_ClockConfig+0x3d4>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f023 020f 	bic.w	r2, r3, #15
 800d756:	4937      	ldr	r1, [pc, #220]	; (800d834 <HAL_RCC_ClockConfig+0x3d4>)
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	4313      	orrs	r3, r2
 800d75c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d75e:	4b35      	ldr	r3, [pc, #212]	; (800d834 <HAL_RCC_ClockConfig+0x3d4>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f003 030f 	and.w	r3, r3, #15
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d001      	beq.n	800d770 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	e05b      	b.n	800d828 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f003 0304 	and.w	r3, r3, #4
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d010      	beq.n	800d79e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	68da      	ldr	r2, [r3, #12]
 800d780:	4b2b      	ldr	r3, [pc, #172]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d782:	6a1b      	ldr	r3, [r3, #32]
 800d784:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d788:	429a      	cmp	r2, r3
 800d78a:	d208      	bcs.n	800d79e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d78c:	4b28      	ldr	r3, [pc, #160]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d78e:	6a1b      	ldr	r3, [r3, #32]
 800d790:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	4925      	ldr	r1, [pc, #148]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d79a:	4313      	orrs	r3, r2
 800d79c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f003 0308 	and.w	r3, r3, #8
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d012      	beq.n	800d7d0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	691a      	ldr	r2, [r3, #16]
 800d7ae:	4b20      	ldr	r3, [pc, #128]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d7b0:	6a1b      	ldr	r3, [r3, #32]
 800d7b2:	091b      	lsrs	r3, r3, #4
 800d7b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d209      	bcs.n	800d7d0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d7bc:	4b1c      	ldr	r3, [pc, #112]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d7be:	6a1b      	ldr	r3, [r3, #32]
 800d7c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	011b      	lsls	r3, r3, #4
 800d7ca:	4919      	ldr	r1, [pc, #100]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f003 0310 	and.w	r3, r3, #16
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d010      	beq.n	800d7fe <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	695a      	ldr	r2, [r3, #20]
 800d7e0:	4b13      	ldr	r3, [pc, #76]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d208      	bcs.n	800d7fe <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800d7ec:	4b10      	ldr	r3, [pc, #64]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	695b      	ldr	r3, [r3, #20]
 800d7f8:	490d      	ldr	r1, [pc, #52]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d7fe:	f000 f821 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800d802:	4602      	mov	r2, r0
 800d804:	4b0a      	ldr	r3, [pc, #40]	; (800d830 <HAL_RCC_ClockConfig+0x3d0>)
 800d806:	6a1b      	ldr	r3, [r3, #32]
 800d808:	f003 030f 	and.w	r3, r3, #15
 800d80c:	490a      	ldr	r1, [pc, #40]	; (800d838 <HAL_RCC_ClockConfig+0x3d8>)
 800d80e:	5ccb      	ldrb	r3, [r1, r3]
 800d810:	fa22 f303 	lsr.w	r3, r2, r3
 800d814:	4a09      	ldr	r2, [pc, #36]	; (800d83c <HAL_RCC_ClockConfig+0x3dc>)
 800d816:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d818:	4b09      	ldr	r3, [pc, #36]	; (800d840 <HAL_RCC_ClockConfig+0x3e0>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7f9 ff85 	bl	800772c <HAL_InitTick>
 800d822:	4603      	mov	r3, r0
 800d824:	73fb      	strb	r3, [r7, #15]

  return status;
 800d826:	7bfb      	ldrb	r3, [r7, #15]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3718      	adds	r7, #24
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	46020c00 	.word	0x46020c00
 800d834:	40022000 	.word	0x40022000
 800d838:	0801f84c 	.word	0x0801f84c
 800d83c:	2000000c 	.word	0x2000000c
 800d840:	200000a4 	.word	0x200000a4

0800d844 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d844:	b480      	push	{r7}
 800d846:	b08b      	sub	sp, #44	; 0x2c
 800d848:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d84a:	2300      	movs	r3, #0
 800d84c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800d84e:	2300      	movs	r3, #0
 800d850:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d852:	4b7b      	ldr	r3, [pc, #492]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d854:	69db      	ldr	r3, [r3, #28]
 800d856:	f003 030c 	and.w	r3, r3, #12
 800d85a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d85c:	4b78      	ldr	r3, [pc, #480]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d860:	f003 0303 	and.w	r3, r3, #3
 800d864:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d005      	beq.n	800d878 <HAL_RCC_GetSysClockFreq+0x34>
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	2b0c      	cmp	r3, #12
 800d870:	d121      	bne.n	800d8b6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d11e      	bne.n	800d8b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800d878:	4b71      	ldr	r3, [pc, #452]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d880:	2b00      	cmp	r3, #0
 800d882:	d107      	bne.n	800d894 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800d884:	4b6e      	ldr	r3, [pc, #440]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d88a:	0b1b      	lsrs	r3, r3, #12
 800d88c:	f003 030f 	and.w	r3, r3, #15
 800d890:	627b      	str	r3, [r7, #36]	; 0x24
 800d892:	e005      	b.n	800d8a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800d894:	4b6a      	ldr	r3, [pc, #424]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	0f1b      	lsrs	r3, r3, #28
 800d89a:	f003 030f 	and.w	r3, r3, #15
 800d89e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d8a0:	4a68      	ldr	r2, [pc, #416]	; (800da44 <HAL_RCC_GetSysClockFreq+0x200>)
 800d8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8a8:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d110      	bne.n	800d8d2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d8b4:	e00d      	b.n	800d8d2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d8b6:	4b62      	ldr	r3, [pc, #392]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d8b8:	69db      	ldr	r3, [r3, #28]
 800d8ba:	f003 030c 	and.w	r3, r3, #12
 800d8be:	2b04      	cmp	r3, #4
 800d8c0:	d102      	bne.n	800d8c8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d8c2:	4b61      	ldr	r3, [pc, #388]	; (800da48 <HAL_RCC_GetSysClockFreq+0x204>)
 800d8c4:	623b      	str	r3, [r7, #32]
 800d8c6:	e004      	b.n	800d8d2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	2b08      	cmp	r3, #8
 800d8cc:	d101      	bne.n	800d8d2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d8ce:	4b5e      	ldr	r3, [pc, #376]	; (800da48 <HAL_RCC_GetSysClockFreq+0x204>)
 800d8d0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	2b0c      	cmp	r3, #12
 800d8d6:	f040 80ac 	bne.w	800da32 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d8da:	4b59      	ldr	r3, [pc, #356]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8de:	f003 0303 	and.w	r3, r3, #3
 800d8e2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d8e4:	4b56      	ldr	r3, [pc, #344]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8e8:	0a1b      	lsrs	r3, r3, #8
 800d8ea:	f003 030f 	and.w	r3, r3, #15
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800d8f2:	4b53      	ldr	r3, [pc, #332]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f6:	091b      	lsrs	r3, r3, #4
 800d8f8:	f003 0301 	and.w	r3, r3, #1
 800d8fc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d8fe:	4b50      	ldr	r3, [pc, #320]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d902:	08db      	lsrs	r3, r3, #3
 800d904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	fb02 f303 	mul.w	r3, r2, r3
 800d90e:	ee07 3a90 	vmov	s15, r3
 800d912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d916:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f000 8086 	beq.w	800da2e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	2b02      	cmp	r3, #2
 800d926:	d003      	beq.n	800d930 <HAL_RCC_GetSysClockFreq+0xec>
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	2b03      	cmp	r3, #3
 800d92c:	d022      	beq.n	800d974 <HAL_RCC_GetSysClockFreq+0x130>
 800d92e:	e043      	b.n	800d9b8 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	ee07 3a90 	vmov	s15, r3
 800d936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d93a:	eddf 6a44 	vldr	s13, [pc, #272]	; 800da4c <HAL_RCC_GetSysClockFreq+0x208>
 800d93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d942:	4b3f      	ldr	r3, [pc, #252]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d94a:	ee07 3a90 	vmov	s15, r3
 800d94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d952:	ed97 6a01 	vldr	s12, [r7, #4]
 800d956:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800da50 <HAL_RCC_GetSysClockFreq+0x20c>
 800d95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d966:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d96e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d972:	e046      	b.n	800da02 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	ee07 3a90 	vmov	s15, r3
 800d97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d97e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800da4c <HAL_RCC_GetSysClockFreq+0x208>
 800d982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d986:	4b2e      	ldr	r3, [pc, #184]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98e:	ee07 3a90 	vmov	s15, r3
 800d992:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d996:	ed97 6a01 	vldr	s12, [r7, #4]
 800d99a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800da50 <HAL_RCC_GetSysClockFreq+0x20c>
 800d99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d9a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d9b6:	e024      	b.n	800da02 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ba:	ee07 3a90 	vmov	s15, r3
 800d9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	ee07 3a90 	vmov	s15, r3
 800d9c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9d0:	4b1b      	ldr	r3, [pc, #108]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d8:	ee07 3a90 	vmov	s15, r3
 800d9dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d9e0:	ed97 6a01 	vldr	s12, [r7, #4]
 800d9e4:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800da50 <HAL_RCC_GetSysClockFreq+0x20c>
 800d9e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d9ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d9f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d9f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9fc:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800da00:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800da02:	4b0f      	ldr	r3, [pc, #60]	; (800da40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800da04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da06:	0e1b      	lsrs	r3, r3, #24
 800da08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da0c:	3301      	adds	r3, #1
 800da0e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	ee07 3a90 	vmov	s15, r3
 800da16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800da1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da26:	ee17 3a90 	vmov	r3, s15
 800da2a:	623b      	str	r3, [r7, #32]
 800da2c:	e001      	b.n	800da32 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800da32:	6a3b      	ldr	r3, [r7, #32]
}
 800da34:	4618      	mov	r0, r3
 800da36:	372c      	adds	r7, #44	; 0x2c
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr
 800da40:	46020c00 	.word	0x46020c00
 800da44:	0801f864 	.word	0x0801f864
 800da48:	00f42400 	.word	0x00f42400
 800da4c:	4b742400 	.word	0x4b742400
 800da50:	46000000 	.word	0x46000000

0800da54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800da58:	f7ff fef4 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800da5c:	4602      	mov	r2, r0
 800da5e:	4b07      	ldr	r3, [pc, #28]	; (800da7c <HAL_RCC_GetHCLKFreq+0x28>)
 800da60:	6a1b      	ldr	r3, [r3, #32]
 800da62:	f003 030f 	and.w	r3, r3, #15
 800da66:	4906      	ldr	r1, [pc, #24]	; (800da80 <HAL_RCC_GetHCLKFreq+0x2c>)
 800da68:	5ccb      	ldrb	r3, [r1, r3]
 800da6a:	fa22 f303 	lsr.w	r3, r2, r3
 800da6e:	4a05      	ldr	r2, [pc, #20]	; (800da84 <HAL_RCC_GetHCLKFreq+0x30>)
 800da70:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800da72:	4b04      	ldr	r3, [pc, #16]	; (800da84 <HAL_RCC_GetHCLKFreq+0x30>)
 800da74:	681b      	ldr	r3, [r3, #0]
}
 800da76:	4618      	mov	r0, r3
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	46020c00 	.word	0x46020c00
 800da80:	0801f84c 	.word	0x0801f84c
 800da84:	2000000c 	.word	0x2000000c

0800da88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800da8c:	f7ff ffe2 	bl	800da54 <HAL_RCC_GetHCLKFreq>
 800da90:	4602      	mov	r2, r0
 800da92:	4b05      	ldr	r3, [pc, #20]	; (800daa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800da94:	6a1b      	ldr	r3, [r3, #32]
 800da96:	091b      	lsrs	r3, r3, #4
 800da98:	f003 0307 	and.w	r3, r3, #7
 800da9c:	4903      	ldr	r1, [pc, #12]	; (800daac <HAL_RCC_GetPCLK1Freq+0x24>)
 800da9e:	5ccb      	ldrb	r3, [r1, r3]
 800daa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	46020c00 	.word	0x46020c00
 800daac:	0801f85c 	.word	0x0801f85c

0800dab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800dab4:	f7ff ffce 	bl	800da54 <HAL_RCC_GetHCLKFreq>
 800dab8:	4602      	mov	r2, r0
 800daba:	4b05      	ldr	r3, [pc, #20]	; (800dad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dabc:	6a1b      	ldr	r3, [r3, #32]
 800dabe:	0a1b      	lsrs	r3, r3, #8
 800dac0:	f003 0307 	and.w	r3, r3, #7
 800dac4:	4903      	ldr	r1, [pc, #12]	; (800dad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dac6:	5ccb      	ldrb	r3, [r1, r3]
 800dac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dacc:	4618      	mov	r0, r3
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	46020c00 	.word	0x46020c00
 800dad4:	0801f85c 	.word	0x0801f85c

0800dad8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800dadc:	f7ff ffba 	bl	800da54 <HAL_RCC_GetHCLKFreq>
 800dae0:	4602      	mov	r2, r0
 800dae2:	4b05      	ldr	r3, [pc, #20]	; (800daf8 <HAL_RCC_GetPCLK3Freq+0x20>)
 800dae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae6:	091b      	lsrs	r3, r3, #4
 800dae8:	f003 0307 	and.w	r3, r3, #7
 800daec:	4903      	ldr	r1, [pc, #12]	; (800dafc <HAL_RCC_GetPCLK3Freq+0x24>)
 800daee:	5ccb      	ldrb	r3, [r1, r3]
 800daf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	46020c00 	.word	0x46020c00
 800dafc:	0801f85c 	.word	0x0801f85c

0800db00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800db08:	4b3e      	ldr	r3, [pc, #248]	; (800dc04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800db0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db0e:	f003 0304 	and.w	r3, r3, #4
 800db12:	2b00      	cmp	r3, #0
 800db14:	d003      	beq.n	800db1e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800db16:	f7fe fd8f 	bl	800c638 <HAL_PWREx_GetVoltageRange>
 800db1a:	6178      	str	r0, [r7, #20]
 800db1c:	e019      	b.n	800db52 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800db1e:	4b39      	ldr	r3, [pc, #228]	; (800dc04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800db20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db24:	4a37      	ldr	r2, [pc, #220]	; (800dc04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800db26:	f043 0304 	orr.w	r3, r3, #4
 800db2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800db2e:	4b35      	ldr	r3, [pc, #212]	; (800dc04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800db30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db34:	f003 0304 	and.w	r3, r3, #4
 800db38:	60fb      	str	r3, [r7, #12]
 800db3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800db3c:	f7fe fd7c 	bl	800c638 <HAL_PWREx_GetVoltageRange>
 800db40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800db42:	4b30      	ldr	r3, [pc, #192]	; (800dc04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800db44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db48:	4a2e      	ldr	r2, [pc, #184]	; (800dc04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800db4a:	f023 0304 	bic.w	r3, r3, #4
 800db4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800db58:	d003      	beq.n	800db62 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db60:	d109      	bne.n	800db76 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db68:	d202      	bcs.n	800db70 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800db6a:	2301      	movs	r3, #1
 800db6c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800db6e:	e033      	b.n	800dbd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800db70:	2300      	movs	r3, #0
 800db72:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800db74:	e030      	b.n	800dbd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db7c:	d208      	bcs.n	800db90 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db84:	d102      	bne.n	800db8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800db86:	2303      	movs	r3, #3
 800db88:	613b      	str	r3, [r7, #16]
 800db8a:	e025      	b.n	800dbd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800db8c:	2301      	movs	r3, #1
 800db8e:	e035      	b.n	800dbfc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db96:	d90f      	bls.n	800dbb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d109      	bne.n	800dbb2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dba4:	d902      	bls.n	800dbac <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800dba6:	2300      	movs	r3, #0
 800dba8:	613b      	str	r3, [r7, #16]
 800dbaa:	e015      	b.n	800dbd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800dbac:	2301      	movs	r3, #1
 800dbae:	613b      	str	r3, [r7, #16]
 800dbb0:	e012      	b.n	800dbd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	613b      	str	r3, [r7, #16]
 800dbb6:	e00f      	b.n	800dbd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dbbe:	d109      	bne.n	800dbd4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbc6:	d102      	bne.n	800dbce <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800dbc8:	2301      	movs	r3, #1
 800dbca:	613b      	str	r3, [r7, #16]
 800dbcc:	e004      	b.n	800dbd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800dbce:	2302      	movs	r3, #2
 800dbd0:	613b      	str	r3, [r7, #16]
 800dbd2:	e001      	b.n	800dbd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800dbd8:	4b0b      	ldr	r3, [pc, #44]	; (800dc08 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f023 020f 	bic.w	r2, r3, #15
 800dbe0:	4909      	ldr	r1, [pc, #36]	; (800dc08 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800dbe8:	4b07      	ldr	r3, [pc, #28]	; (800dc08 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f003 030f 	and.w	r3, r3, #15
 800dbf0:	693a      	ldr	r2, [r7, #16]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d001      	beq.n	800dbfa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e000      	b.n	800dbfc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3718      	adds	r7, #24
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	46020c00 	.word	0x46020c00
 800dc08:	40022000 	.word	0x40022000

0800dc0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800dc0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc10:	b0ba      	sub	sp, #232	; 0xe8
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dc18:	2300      	movs	r3, #0
 800dc1a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dc24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2c:	f002 0401 	and.w	r4, r2, #1
 800dc30:	2500      	movs	r5, #0
 800dc32:	ea54 0305 	orrs.w	r3, r4, r5
 800dc36:	d00b      	beq.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800dc38:	4bcb      	ldr	r3, [pc, #812]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dc3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dc3e:	f023 0103 	bic.w	r1, r3, #3
 800dc42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc48:	4ac7      	ldr	r2, [pc, #796]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dc4a:	430b      	orrs	r3, r1
 800dc4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dc50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc58:	f002 0802 	and.w	r8, r2, #2
 800dc5c:	f04f 0900 	mov.w	r9, #0
 800dc60:	ea58 0309 	orrs.w	r3, r8, r9
 800dc64:	d00b      	beq.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800dc66:	4bc0      	ldr	r3, [pc, #768]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dc68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dc6c:	f023 010c 	bic.w	r1, r3, #12
 800dc70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc76:	4abc      	ldr	r2, [pc, #752]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dc78:	430b      	orrs	r3, r1
 800dc7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dc7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc86:	f002 0a04 	and.w	sl, r2, #4
 800dc8a:	f04f 0b00 	mov.w	fp, #0
 800dc8e:	ea5a 030b 	orrs.w	r3, sl, fp
 800dc92:	d00b      	beq.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800dc94:	4bb4      	ldr	r3, [pc, #720]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dc96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dc9a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800dc9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dca4:	4ab0      	ldr	r2, [pc, #704]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dca6:	430b      	orrs	r3, r1
 800dca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dcac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb4:	f002 0308 	and.w	r3, r2, #8
 800dcb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dcc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	d00b      	beq.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800dccc:	4ba6      	ldr	r3, [pc, #664]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dcce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dcd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800dcd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dcda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcdc:	4aa2      	ldr	r2, [pc, #648]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dcde:	430b      	orrs	r3, r1
 800dce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dce4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcec:	f002 0310 	and.w	r3, r2, #16
 800dcf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dcfa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	4313      	orrs	r3, r2
 800dd02:	d00b      	beq.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800dd04:	4b98      	ldr	r3, [pc, #608]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dd0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dd0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd14:	4a94      	ldr	r2, [pc, #592]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd16:	430b      	orrs	r3, r1
 800dd18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dd1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd24:	f002 0320 	and.w	r3, r2, #32
 800dd28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dd32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800dd36:	460b      	mov	r3, r1
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	d00b      	beq.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800dd3c:	4b8a      	ldr	r3, [pc, #552]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dd42:	f023 0107 	bic.w	r1, r3, #7
 800dd46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd4c:	4a86      	ldr	r2, [pc, #536]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd4e:	430b      	orrs	r3, r1
 800dd50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dd54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800dd60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dd64:	2300      	movs	r3, #0
 800dd66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dd6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	4313      	orrs	r3, r2
 800dd72:	d00b      	beq.n	800dd8c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800dd74:	4b7c      	ldr	r3, [pc, #496]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dd7a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800dd7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd84:	4a78      	ldr	r2, [pc, #480]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd86:	430b      	orrs	r3, r1
 800dd88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dd8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd94:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800dd98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dda2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800dda6:	460b      	mov	r3, r1
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	d00b      	beq.n	800ddc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800ddac:	4b6e      	ldr	r3, [pc, #440]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ddae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ddb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ddb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ddba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddbc:	4a6a      	ldr	r2, [pc, #424]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ddbe:	430b      	orrs	r3, r1
 800ddc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ddc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddcc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800ddd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ddda:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800ddde:	460b      	mov	r3, r1
 800dde0:	4313      	orrs	r3, r2
 800dde2:	d00b      	beq.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800dde4:	4b60      	ldr	r3, [pc, #384]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dde6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ddea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ddee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ddf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddf4:	4a5c      	ldr	r2, [pc, #368]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ddf6:	430b      	orrs	r3, r1
 800ddf8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ddfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800de08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800de0c:	2300      	movs	r3, #0
 800de0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800de12:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800de16:	460b      	mov	r3, r1
 800de18:	4313      	orrs	r3, r2
 800de1a:	d00b      	beq.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800de1c:	4b52      	ldr	r3, [pc, #328]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de22:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800de26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de2c:	4a4e      	ldr	r2, [pc, #312]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de2e:	430b      	orrs	r3, r1
 800de30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800de34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800de40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800de44:	2300      	movs	r3, #0
 800de46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800de4e:	460b      	mov	r3, r1
 800de50:	4313      	orrs	r3, r2
 800de52:	d00b      	beq.n	800de6c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800de54:	4b44      	ldr	r3, [pc, #272]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800de5a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800de5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de64:	4a40      	ldr	r2, [pc, #256]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de66:	430b      	orrs	r3, r1
 800de68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800de6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de74:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800de78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800de7c:	2300      	movs	r3, #0
 800de7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800de82:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800de86:	460b      	mov	r3, r1
 800de88:	4313      	orrs	r3, r2
 800de8a:	d00b      	beq.n	800dea4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800de8c:	4b36      	ldr	r3, [pc, #216]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de92:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800de96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de9c:	4a32      	ldr	r2, [pc, #200]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de9e:	430b      	orrs	r3, r1
 800dea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800dea4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deac:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800deb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800deb4:	2300      	movs	r3, #0
 800deb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800deba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800debe:	460b      	mov	r3, r1
 800dec0:	4313      	orrs	r3, r2
 800dec2:	d00c      	beq.n	800dede <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800dec4:	4b28      	ldr	r3, [pc, #160]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800deca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ded2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ded6:	4a24      	ldr	r2, [pc, #144]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ded8:	430b      	orrs	r3, r1
 800deda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800dede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800deea:	67bb      	str	r3, [r7, #120]	; 0x78
 800deec:	2300      	movs	r3, #0
 800deee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800def0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800def4:	460b      	mov	r3, r1
 800def6:	4313      	orrs	r3, r2
 800def8:	d04f      	beq.n	800df9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800defa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800defe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df02:	2b80      	cmp	r3, #128	; 0x80
 800df04:	d02d      	beq.n	800df62 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800df06:	2b80      	cmp	r3, #128	; 0x80
 800df08:	d827      	bhi.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800df0a:	2b60      	cmp	r3, #96	; 0x60
 800df0c:	d02e      	beq.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800df0e:	2b60      	cmp	r3, #96	; 0x60
 800df10:	d823      	bhi.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800df12:	2b40      	cmp	r3, #64	; 0x40
 800df14:	d006      	beq.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800df16:	2b40      	cmp	r3, #64	; 0x40
 800df18:	d81f      	bhi.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d009      	beq.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800df1e:	2b20      	cmp	r3, #32
 800df20:	d011      	beq.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800df22:	e01a      	b.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800df24:	4b10      	ldr	r3, [pc, #64]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df28:	4a0f      	ldr	r2, [pc, #60]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df2e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800df30:	e01d      	b.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800df32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df36:	3308      	adds	r3, #8
 800df38:	4618      	mov	r0, r3
 800df3a:	f002 f9c3 	bl	80102c4 <RCCEx_PLL2_Config>
 800df3e:	4603      	mov	r3, r0
 800df40:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800df44:	e013      	b.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800df46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df4a:	332c      	adds	r3, #44	; 0x2c
 800df4c:	4618      	mov	r0, r3
 800df4e:	f002 fa51 	bl	80103f4 <RCCEx_PLL3_Config>
 800df52:	4603      	mov	r3, r0
 800df54:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800df58:	e009      	b.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df5a:	2301      	movs	r3, #1
 800df5c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800df60:	e005      	b.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800df62:	bf00      	nop
 800df64:	e003      	b.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800df66:	bf00      	nop
 800df68:	46020c00 	.word	0x46020c00
        break;
 800df6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800df72:	2b00      	cmp	r3, #0
 800df74:	d10d      	bne.n	800df92 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800df76:	4bb6      	ldr	r3, [pc, #728]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800df78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800df7c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800df80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df88:	4ab1      	ldr	r2, [pc, #708]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800df8a:	430b      	orrs	r3, r1
 800df8c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800df90:	e003      	b.n	800df9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df92:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800df96:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800df9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800dfa6:	673b      	str	r3, [r7, #112]	; 0x70
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	677b      	str	r3, [r7, #116]	; 0x74
 800dfac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	d053      	beq.n	800e05e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800dfb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dfba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dfbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfc2:	d033      	beq.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800dfc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfc8:	d82c      	bhi.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800dfca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dfce:	d02f      	beq.n	800e030 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800dfd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dfd4:	d826      	bhi.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800dfd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfda:	d008      	beq.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800dfdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfe0:	d820      	bhi.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00a      	beq.n	800dffc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800dfe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfea:	d011      	beq.n	800e010 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800dfec:	e01a      	b.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dfee:	4b98      	ldr	r3, [pc, #608]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dff2:	4a97      	ldr	r2, [pc, #604]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dff8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800dffa:	e01a      	b.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e000:	3308      	adds	r3, #8
 800e002:	4618      	mov	r0, r3
 800e004:	f002 f95e 	bl	80102c4 <RCCEx_PLL2_Config>
 800e008:	4603      	mov	r3, r0
 800e00a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e00e:	e010      	b.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e014:	332c      	adds	r3, #44	; 0x2c
 800e016:	4618      	mov	r0, r3
 800e018:	f002 f9ec 	bl	80103f4 <RCCEx_PLL3_Config>
 800e01c:	4603      	mov	r3, r0
 800e01e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e022:	e006      	b.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e02a:	e002      	b.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800e02c:	bf00      	nop
 800e02e:	e000      	b.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800e030:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e032:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e036:	2b00      	cmp	r3, #0
 800e038:	d10d      	bne.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800e03a:	4b85      	ldr	r3, [pc, #532]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e03c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e040:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800e044:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e04c:	4a80      	ldr	r2, [pc, #512]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e04e:	430b      	orrs	r3, r1
 800e050:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e054:	e003      	b.n	800e05e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e056:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e05a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800e05e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800e06a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e06c:	2300      	movs	r3, #0
 800e06e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e070:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e074:	460b      	mov	r3, r1
 800e076:	4313      	orrs	r3, r2
 800e078:	d046      	beq.n	800e108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800e07a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e07e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e082:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e086:	d028      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e088:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e08c:	d821      	bhi.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e08e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e092:	d022      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e098:	d81b      	bhi.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e09a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e09e:	d01c      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e0a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e0a4:	d815      	bhi.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e0a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0aa:	d008      	beq.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800e0ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0b0:	d80f      	bhi.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d011      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0ba:	d00e      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e0bc:	e009      	b.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e0be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0c2:	3308      	adds	r3, #8
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f002 f8fd 	bl	80102c4 <RCCEx_PLL2_Config>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e0d0:	e004      	b.n	800e0dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e0d8:	e000      	b.n	800e0dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800e0da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d10d      	bne.n	800e100 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800e0e4:	4b5a      	ldr	r3, [pc, #360]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e0e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e0ea:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800e0ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e0f6:	4a56      	ldr	r2, [pc, #344]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e0f8:	430b      	orrs	r3, r1
 800e0fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e0fe:	e003      	b.n	800e108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e100:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e104:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800e108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e110:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800e114:	663b      	str	r3, [r7, #96]	; 0x60
 800e116:	2300      	movs	r3, #0
 800e118:	667b      	str	r3, [r7, #100]	; 0x64
 800e11a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800e11e:	460b      	mov	r3, r1
 800e120:	4313      	orrs	r3, r2
 800e122:	d03f      	beq.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800e124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e12c:	2b04      	cmp	r3, #4
 800e12e:	d81e      	bhi.n	800e16e <HAL_RCCEx_PeriphCLKConfig+0x562>
 800e130:	a201      	add	r2, pc, #4	; (adr r2, 800e138 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800e132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e136:	bf00      	nop
 800e138:	0800e177 	.word	0x0800e177
 800e13c:	0800e14d 	.word	0x0800e14d
 800e140:	0800e15b 	.word	0x0800e15b
 800e144:	0800e177 	.word	0x0800e177
 800e148:	0800e177 	.word	0x0800e177
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e14c:	4b40      	ldr	r3, [pc, #256]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e150:	4a3f      	ldr	r2, [pc, #252]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e156:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e158:	e00e      	b.n	800e178 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e15a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e15e:	332c      	adds	r3, #44	; 0x2c
 800e160:	4618      	mov	r0, r3
 800e162:	f002 f947 	bl	80103f4 <RCCEx_PLL3_Config>
 800e166:	4603      	mov	r3, r0
 800e168:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e16c:	e004      	b.n	800e178 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e16e:	2301      	movs	r3, #1
 800e170:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e174:	e000      	b.n	800e178 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800e176:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e178:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10d      	bne.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800e180:	4b33      	ldr	r3, [pc, #204]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e182:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e186:	f023 0107 	bic.w	r1, r3, #7
 800e18a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e192:	4a2f      	ldr	r2, [pc, #188]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e194:	430b      	orrs	r3, r1
 800e196:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e19a:	e003      	b.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e19c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e1a0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800e1a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ac:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e1b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	d04d      	beq.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800e1c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e1cc:	d028      	beq.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800e1ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e1d2:	d821      	bhi.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800e1d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e1d8:	d024      	beq.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800e1da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e1de:	d81b      	bhi.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800e1e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e1e4:	d00e      	beq.n	800e204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800e1e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e1ea:	d815      	bhi.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d01b      	beq.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800e1f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1f4:	d110      	bne.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e1f6:	4b16      	ldr	r3, [pc, #88]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1fa:	4a15      	ldr	r2, [pc, #84]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e1fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e200:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e202:	e012      	b.n	800e22a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e208:	332c      	adds	r3, #44	; 0x2c
 800e20a:	4618      	mov	r0, r3
 800e20c:	f002 f8f2 	bl	80103f4 <RCCEx_PLL3_Config>
 800e210:	4603      	mov	r3, r0
 800e212:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e216:	e008      	b.n	800e22a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e21e:	e004      	b.n	800e22a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800e220:	bf00      	nop
 800e222:	e002      	b.n	800e22a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800e224:	bf00      	nop
 800e226:	e000      	b.n	800e22a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800e228:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e22a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d110      	bne.n	800e254 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800e232:	4b07      	ldr	r3, [pc, #28]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e238:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e23c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e244:	4a02      	ldr	r2, [pc, #8]	; (800e250 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e246:	430b      	orrs	r3, r1
 800e248:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e24c:	e006      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x650>
 800e24e:	bf00      	nop
 800e250:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e254:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e258:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e25c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e264:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800e268:	653b      	str	r3, [r7, #80]	; 0x50
 800e26a:	2300      	movs	r3, #0
 800e26c:	657b      	str	r3, [r7, #84]	; 0x54
 800e26e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e272:	460b      	mov	r3, r1
 800e274:	4313      	orrs	r3, r2
 800e276:	f000 80b5 	beq.w	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e27a:	2300      	movs	r3, #0
 800e27c:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e280:	4b9d      	ldr	r3, [pc, #628]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e286:	f003 0304 	and.w	r3, r3, #4
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d113      	bne.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e28e:	4b9a      	ldr	r3, [pc, #616]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e294:	4a98      	ldr	r2, [pc, #608]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e296:	f043 0304 	orr.w	r3, r3, #4
 800e29a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800e29e:	4b96      	ldr	r3, [pc, #600]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e2a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e2a4:	f003 0304 	and.w	r3, r3, #4
 800e2a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e2ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800e2b6:	4b91      	ldr	r3, [pc, #580]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ba:	4a90      	ldr	r2, [pc, #576]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e2bc:	f043 0301 	orr.w	r3, r3, #1
 800e2c0:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e2c2:	f7f9 fa7d 	bl	80077c0 <HAL_GetTick>
 800e2c6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e2ca:	e00b      	b.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e2cc:	f7f9 fa78 	bl	80077c0 <HAL_GetTick>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2d6:	1ad3      	subs	r3, r2, r3
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d903      	bls.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800e2dc:	2303      	movs	r3, #3
 800e2de:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e2e2:	e005      	b.n	800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e2e4:	4b85      	ldr	r3, [pc, #532]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2e8:	f003 0301 	and.w	r3, r3, #1
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d0ed      	beq.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800e2f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d165      	bne.n	800e3c4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e2f8:	4b7f      	ldr	r3, [pc, #508]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e2fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e2fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800e306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d023      	beq.n	800e356 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800e30e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e312:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800e316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d01b      	beq.n	800e356 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e31e:	4b76      	ldr	r3, [pc, #472]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e328:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e32c:	4b72      	ldr	r3, [pc, #456]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e32e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e332:	4a71      	ldr	r2, [pc, #452]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e338:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e33c:	4b6e      	ldr	r3, [pc, #440]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e33e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e342:	4a6d      	ldr	r2, [pc, #436]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e348:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e34c:	4a6a      	ldr	r2, [pc, #424]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e352:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e35a:	f003 0301 	and.w	r3, r3, #1
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d019      	beq.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e362:	f7f9 fa2d 	bl	80077c0 <HAL_GetTick>
 800e366:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e36a:	e00d      	b.n	800e388 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e36c:	f7f9 fa28 	bl	80077c0 <HAL_GetTick>
 800e370:	4602      	mov	r2, r0
 800e372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e376:	1ad2      	subs	r2, r2, r3
 800e378:	f241 3388 	movw	r3, #5000	; 0x1388
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d903      	bls.n	800e388 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800e380:	2303      	movs	r3, #3
 800e382:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800e386:	e006      	b.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e388:	4b5b      	ldr	r3, [pc, #364]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e38a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e38e:	f003 0302 	and.w	r3, r3, #2
 800e392:	2b00      	cmp	r3, #0
 800e394:	d0ea      	beq.n	800e36c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800e396:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d10d      	bne.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800e39e:	4b56      	ldr	r3, [pc, #344]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e3a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e3a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e3a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e3ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e3b0:	4a51      	ldr	r2, [pc, #324]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e3b2:	430b      	orrs	r3, r1
 800e3b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800e3b8:	e008      	b.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e3ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e3be:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800e3c2:	e003      	b.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e3c8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e3cc:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d107      	bne.n	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e3d4:	4b48      	ldr	r3, [pc, #288]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e3d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e3da:	4a47      	ldr	r2, [pc, #284]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e3dc:	f023 0304 	bic.w	r3, r3, #4
 800e3e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800e3e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e3f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e3f6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	d042      	beq.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800e400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e404:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e408:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e40c:	d022      	beq.n	800e454 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800e40e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e412:	d81b      	bhi.n	800e44c <HAL_RCCEx_PeriphCLKConfig+0x840>
 800e414:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e418:	d011      	beq.n	800e43e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800e41a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e41e:	d815      	bhi.n	800e44c <HAL_RCCEx_PeriphCLKConfig+0x840>
 800e420:	2b00      	cmp	r3, #0
 800e422:	d019      	beq.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800e424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e428:	d110      	bne.n	800e44c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e42a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e42e:	3308      	adds	r3, #8
 800e430:	4618      	mov	r0, r3
 800e432:	f001 ff47 	bl	80102c4 <RCCEx_PLL2_Config>
 800e436:	4603      	mov	r3, r0
 800e438:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e43c:	e00d      	b.n	800e45a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e43e:	4b2e      	ldr	r3, [pc, #184]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e442:	4a2d      	ldr	r2, [pc, #180]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e448:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e44a:	e006      	b.n	800e45a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e44c:	2301      	movs	r3, #1
 800e44e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e452:	e002      	b.n	800e45a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800e454:	bf00      	nop
 800e456:	e000      	b.n	800e45a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800e458:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e45a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d10d      	bne.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800e462:	4b25      	ldr	r3, [pc, #148]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e468:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800e46c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e470:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e474:	4a20      	ldr	r2, [pc, #128]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e476:	430b      	orrs	r3, r1
 800e478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e47c:	e003      	b.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e47e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e482:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800e492:	643b      	str	r3, [r7, #64]	; 0x40
 800e494:	2300      	movs	r3, #0
 800e496:	647b      	str	r3, [r7, #68]	; 0x44
 800e498:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e49c:	460b      	mov	r3, r1
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	d032      	beq.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800e4a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e4a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e4aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4ae:	d00b      	beq.n	800e4c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800e4b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4b4:	d804      	bhi.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d008      	beq.n	800e4cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800e4ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4be:	d007      	beq.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e4c6:	e004      	b.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e4c8:	bf00      	nop
 800e4ca:	e002      	b.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e4cc:	bf00      	nop
 800e4ce:	e000      	b.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e4d0:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e4d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d112      	bne.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800e4da:	4b07      	ldr	r3, [pc, #28]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e4dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e4e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e4e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e4e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e4ec:	4a02      	ldr	r2, [pc, #8]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e4ee:	430b      	orrs	r3, r1
 800e4f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e4f4:	e008      	b.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800e4f6:	bf00      	nop
 800e4f8:	46020c00 	.word	0x46020c00
 800e4fc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e500:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e504:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800e508:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800e514:	63bb      	str	r3, [r7, #56]	; 0x38
 800e516:	2300      	movs	r3, #0
 800e518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e51a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e51e:	460b      	mov	r3, r1
 800e520:	4313      	orrs	r3, r2
 800e522:	d00c      	beq.n	800e53e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800e524:	4b98      	ldr	r3, [pc, #608]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e526:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e52a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800e52e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e536:	4a94      	ldr	r2, [pc, #592]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e538:	430b      	orrs	r3, r1
 800e53a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800e53e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e546:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e54a:	633b      	str	r3, [r7, #48]	; 0x30
 800e54c:	2300      	movs	r3, #0
 800e54e:	637b      	str	r3, [r7, #52]	; 0x34
 800e550:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e554:	460b      	mov	r3, r1
 800e556:	4313      	orrs	r3, r2
 800e558:	d019      	beq.n	800e58e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800e55a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e55e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e566:	d105      	bne.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e568:	4b87      	ldr	r3, [pc, #540]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e56c:	4a86      	ldr	r2, [pc, #536]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e56e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e572:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800e574:	4b84      	ldr	r3, [pc, #528]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e576:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e57a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800e57e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e582:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e586:	4a80      	ldr	r2, [pc, #512]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e588:	430b      	orrs	r3, r1
 800e58a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800e58e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e596:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e59a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e59c:	2300      	movs	r3, #0
 800e59e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	d00c      	beq.n	800e5c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800e5aa:	4b77      	ldr	r3, [pc, #476]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e5ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e5b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e5bc:	4972      	ldr	r1, [pc, #456]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800e5c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e5d0:	623b      	str	r3, [r7, #32]
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e5d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e5da:	460b      	mov	r3, r1
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	d00c      	beq.n	800e5fa <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800e5e0:	4b69      	ldr	r3, [pc, #420]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e5e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e5ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e5f2:	4965      	ldr	r1, [pc, #404]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800e5fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e602:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800e606:	61bb      	str	r3, [r7, #24]
 800e608:	2300      	movs	r3, #0
 800e60a:	61fb      	str	r3, [r7, #28]
 800e60c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e610:	460b      	mov	r3, r1
 800e612:	4313      	orrs	r3, r2
 800e614:	d00c      	beq.n	800e630 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800e616:	4b5c      	ldr	r3, [pc, #368]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e61c:	f023 0218 	bic.w	r2, r3, #24
 800e620:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e624:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e628:	4957      	ldr	r1, [pc, #348]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e62a:	4313      	orrs	r3, r2
 800e62c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e638:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800e63c:	613b      	str	r3, [r7, #16]
 800e63e:	2300      	movs	r3, #0
 800e640:	617b      	str	r3, [r7, #20]
 800e642:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e646:	460b      	mov	r3, r1
 800e648:	4313      	orrs	r3, r2
 800e64a:	d032      	beq.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800e64c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e650:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e658:	d105      	bne.n	800e666 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e65a:	4b4b      	ldr	r3, [pc, #300]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e65e:	4a4a      	ldr	r2, [pc, #296]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e664:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800e666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e66a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e66e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e672:	d108      	bne.n	800e686 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e678:	3308      	adds	r3, #8
 800e67a:	4618      	mov	r0, r3
 800e67c:	f001 fe22 	bl	80102c4 <RCCEx_PLL2_Config>
 800e680:	4603      	mov	r3, r0
 800e682:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800e686:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d10d      	bne.n	800e6aa <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800e68e:	4b3e      	ldr	r3, [pc, #248]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e690:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e694:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e69c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e6a0:	4939      	ldr	r1, [pc, #228]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e6a8:	e003      	b.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e6ae:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800e6b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ba:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800e6be:	60bb      	str	r3, [r7, #8]
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	60fb      	str	r3, [r7, #12]
 800e6c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	d03a      	beq.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800e6ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e6d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6da:	d00e      	beq.n	800e6fa <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800e6dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6e0:	d815      	bhi.n	800e70e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d017      	beq.n	800e716 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800e6e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e6ea:	d110      	bne.n	800e70e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6ec:	4b26      	ldr	r3, [pc, #152]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6f0:	4a25      	ldr	r2, [pc, #148]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e6f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e6f6:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e6f8:	e00e      	b.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e6fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e6fe:	3308      	adds	r3, #8
 800e700:	4618      	mov	r0, r3
 800e702:	f001 fddf 	bl	80102c4 <RCCEx_PLL2_Config>
 800e706:	4603      	mov	r3, r0
 800e708:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e70c:	e004      	b.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800e70e:	2301      	movs	r3, #1
 800e710:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e714:	e000      	b.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800e716:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e718:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10d      	bne.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800e720:	4b19      	ldr	r3, [pc, #100]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e726:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e72a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e732:	4915      	ldr	r1, [pc, #84]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e734:	4313      	orrs	r3, r2
 800e736:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800e73a:	e003      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e73c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e740:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800e744:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800e750:	603b      	str	r3, [r7, #0]
 800e752:	2300      	movs	r3, #0
 800e754:	607b      	str	r3, [r7, #4]
 800e756:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e75a:	460b      	mov	r3, r1
 800e75c:	4313      	orrs	r3, r2
 800e75e:	d00c      	beq.n	800e77a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800e760:	4b09      	ldr	r3, [pc, #36]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e766:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800e76a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e76e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e772:	4905      	ldr	r1, [pc, #20]	; (800e788 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e774:	4313      	orrs	r3, r2
 800e776:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800e77a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800e77e:	4618      	mov	r0, r3
 800e780:	37e8      	adds	r7, #232	; 0xe8
 800e782:	46bd      	mov	sp, r7
 800e784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e788:	46020c00 	.word	0x46020c00

0800e78c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b089      	sub	sp, #36	; 0x24
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800e794:	4bac      	ldr	r3, [pc, #688]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e79c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800e79e:	4baa      	ldr	r3, [pc, #680]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a2:	f003 0303 	and.w	r3, r3, #3
 800e7a6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800e7a8:	4ba7      	ldr	r3, [pc, #668]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ac:	0a1b      	lsrs	r3, r3, #8
 800e7ae:	f003 030f 	and.w	r3, r3, #15
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800e7b6:	4ba4      	ldr	r3, [pc, #656]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ba:	f003 0310 	and.w	r3, r3, #16
 800e7be:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800e7c0:	4ba1      	ldr	r3, [pc, #644]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7c4:	08db      	lsrs	r3, r3, #3
 800e7c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7ca:	68fa      	ldr	r2, [r7, #12]
 800e7cc:	fb02 f303 	mul.w	r3, r2, r3
 800e7d0:	ee07 3a90 	vmov	s15, r3
 800e7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7d8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f000 8123 	beq.w	800ea2a <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	2b03      	cmp	r3, #3
 800e7e8:	d062      	beq.n	800e8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	2b03      	cmp	r3, #3
 800e7ee:	f200 8081 	bhi.w	800e8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d024      	beq.n	800e842 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d17a      	bne.n	800e8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	ee07 3a90 	vmov	s15, r3
 800e804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e808:	eddf 6a90 	vldr	s13, [pc, #576]	; 800ea4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800e80c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e810:	4b8d      	ldr	r3, [pc, #564]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e818:	ee07 3a90 	vmov	s15, r3
 800e81c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e820:	ed97 6a02 	vldr	s12, [r7, #8]
 800e824:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800ea50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e828:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e82c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e834:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e83c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e840:	e08f      	b.n	800e962 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e842:	4b81      	ldr	r3, [pc, #516]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d005      	beq.n	800e85a <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800e84e:	4b7e      	ldr	r3, [pc, #504]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e850:	689b      	ldr	r3, [r3, #8]
 800e852:	0f1b      	lsrs	r3, r3, #28
 800e854:	f003 030f 	and.w	r3, r3, #15
 800e858:	e006      	b.n	800e868 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800e85a:	4b7b      	ldr	r3, [pc, #492]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e85c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e860:	041b      	lsls	r3, r3, #16
 800e862:	0f1b      	lsrs	r3, r3, #28
 800e864:	f003 030f 	and.w	r3, r3, #15
 800e868:	4a7a      	ldr	r2, [pc, #488]	; (800ea54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800e86a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e86e:	ee07 3a90 	vmov	s15, r3
 800e872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	ee07 3a90 	vmov	s15, r3
 800e87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	ee07 3a90 	vmov	s15, r3
 800e88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e88e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e892:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800ea50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e89e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e8ae:	e058      	b.n	800e962 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	ee07 3a90 	vmov	s15, r3
 800e8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8ba:	eddf 6a64 	vldr	s13, [pc, #400]	; 800ea4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800e8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8c2:	4b61      	ldr	r3, [pc, #388]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8ca:	ee07 3a90 	vmov	s15, r3
 800e8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e8d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8d6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800ea50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e8da:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e8e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e8f2:	e036      	b.n	800e962 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e8f4:	4b54      	ldr	r3, [pc, #336]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d005      	beq.n	800e90c <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800e900:	4b51      	ldr	r3, [pc, #324]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e902:	689b      	ldr	r3, [r3, #8]
 800e904:	0f1b      	lsrs	r3, r3, #28
 800e906:	f003 030f 	and.w	r3, r3, #15
 800e90a:	e006      	b.n	800e91a <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800e90c:	4b4e      	ldr	r3, [pc, #312]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e90e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e912:	041b      	lsls	r3, r3, #16
 800e914:	0f1b      	lsrs	r3, r3, #28
 800e916:	f003 030f 	and.w	r3, r3, #15
 800e91a:	4a4e      	ldr	r2, [pc, #312]	; (800ea54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800e91c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e920:	ee07 3a90 	vmov	s15, r3
 800e924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	ee07 3a90 	vmov	s15, r3
 800e92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	ee07 3a90 	vmov	s15, r3
 800e93c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e940:	ed97 6a02 	vldr	s12, [r7, #8]
 800e944:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ea50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e94c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e954:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e95c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e960:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800e962:	4b39      	ldr	r3, [pc, #228]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d017      	beq.n	800e99e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e96e:	4b36      	ldr	r3, [pc, #216]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e972:	0a5b      	lsrs	r3, r3, #9
 800e974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e978:	ee07 3a90 	vmov	s15, r3
 800e97c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800e980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e984:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e988:	edd7 6a07 	vldr	s13, [r7, #28]
 800e98c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e994:	ee17 2a90 	vmov	r2, s15
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	601a      	str	r2, [r3, #0]
 800e99c:	e002      	b.n	800e9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800e9a4:	4b28      	ldr	r3, [pc, #160]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d017      	beq.n	800e9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e9b0:	4b25      	ldr	r3, [pc, #148]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9b4:	0c1b      	lsrs	r3, r3, #16
 800e9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9ba:	ee07 3a90 	vmov	s15, r3
 800e9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800e9c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9c6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e9ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9d6:	ee17 2a90 	vmov	r2, s15
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	605a      	str	r2, [r3, #4]
 800e9de:	e002      	b.n	800e9e6 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800e9e6:	4b18      	ldr	r3, [pc, #96]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d017      	beq.n	800ea22 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e9f2:	4b15      	ldr	r3, [pc, #84]	; (800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f6:	0e1b      	lsrs	r3, r3, #24
 800e9f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9fc:	ee07 3a90 	vmov	s15, r3
 800ea00:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800ea04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea08:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ea0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea18:	ee17 2a90 	vmov	r2, s15
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ea20:	e00c      	b.n	800ea3c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	609a      	str	r2, [r3, #8]
}
 800ea28:	e008      	b.n	800ea3c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2200      	movs	r2, #0
 800ea34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	609a      	str	r2, [r3, #8]
}
 800ea3c:	bf00      	nop
 800ea3e:	3724      	adds	r7, #36	; 0x24
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr
 800ea48:	46020c00 	.word	0x46020c00
 800ea4c:	4b742400 	.word	0x4b742400
 800ea50:	46000000 	.word	0x46000000
 800ea54:	0801f864 	.word	0x0801f864

0800ea58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b089      	sub	sp, #36	; 0x24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800ea60:	4bac      	ldr	r3, [pc, #688]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ea62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea68:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800ea6a:	4baa      	ldr	r3, [pc, #680]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ea6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea6e:	f003 0303 	and.w	r3, r3, #3
 800ea72:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800ea74:	4ba7      	ldr	r3, [pc, #668]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ea76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea78:	0a1b      	lsrs	r3, r3, #8
 800ea7a:	f003 030f 	and.w	r3, r3, #15
 800ea7e:	3301      	adds	r3, #1
 800ea80:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800ea82:	4ba4      	ldr	r3, [pc, #656]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ea84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea86:	f003 0310 	and.w	r3, r3, #16
 800ea8a:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800ea8c:	4ba1      	ldr	r3, [pc, #644]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ea8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea90:	08db      	lsrs	r3, r3, #3
 800ea92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	fb02 f303 	mul.w	r3, r2, r3
 800ea9c:	ee07 3a90 	vmov	s15, r3
 800eaa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaa4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f000 8123 	beq.w	800ecf6 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	2b03      	cmp	r3, #3
 800eab4:	d062      	beq.n	800eb7c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	2b03      	cmp	r3, #3
 800eaba:	f200 8081 	bhi.w	800ebc0 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d024      	beq.n	800eb0e <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d17a      	bne.n	800ebc0 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	ee07 3a90 	vmov	s15, r3
 800ead0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ead4:	eddf 6a90 	vldr	s13, [pc, #576]	; 800ed18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800ead8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eadc:	4b8d      	ldr	r3, [pc, #564]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800eade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eae4:	ee07 3a90 	vmov	s15, r3
 800eae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800eaec:	ed97 6a02 	vldr	s12, [r7, #8]
 800eaf0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800ed1c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800eaf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800eaf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800eafc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb00:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800eb04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb0c:	e08f      	b.n	800ec2e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800eb0e:	4b81      	ldr	r3, [pc, #516]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d005      	beq.n	800eb26 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800eb1a:	4b7e      	ldr	r3, [pc, #504]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	0f1b      	lsrs	r3, r3, #28
 800eb20:	f003 030f 	and.w	r3, r3, #15
 800eb24:	e006      	b.n	800eb34 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800eb26:	4b7b      	ldr	r3, [pc, #492]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800eb28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eb2c:	041b      	lsls	r3, r3, #16
 800eb2e:	0f1b      	lsrs	r3, r3, #28
 800eb30:	f003 030f 	and.w	r3, r3, #15
 800eb34:	4a7a      	ldr	r2, [pc, #488]	; (800ed20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800eb36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb3a:	ee07 3a90 	vmov	s15, r3
 800eb3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	ee07 3a90 	vmov	s15, r3
 800eb48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eb50:	69bb      	ldr	r3, [r7, #24]
 800eb52:	ee07 3a90 	vmov	s15, r3
 800eb56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800eb5e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800ed1c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800eb62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800eb72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb7a:	e058      	b.n	800ec2e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	ee07 3a90 	vmov	s15, r3
 800eb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb86:	eddf 6a64 	vldr	s13, [pc, #400]	; 800ed18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800eb8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb8e:	4b61      	ldr	r3, [pc, #388]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800eb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb96:	ee07 3a90 	vmov	s15, r3
 800eb9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800eb9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800eba2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800ed1c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800eba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ebaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800ebae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ebb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ebbe:	e036      	b.n	800ec2e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ebc0:	4b54      	ldr	r3, [pc, #336]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ebc2:	689b      	ldr	r3, [r3, #8]
 800ebc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d005      	beq.n	800ebd8 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800ebcc:	4b51      	ldr	r3, [pc, #324]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	0f1b      	lsrs	r3, r3, #28
 800ebd2:	f003 030f 	and.w	r3, r3, #15
 800ebd6:	e006      	b.n	800ebe6 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800ebd8:	4b4e      	ldr	r3, [pc, #312]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ebda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ebde:	041b      	lsls	r3, r3, #16
 800ebe0:	0f1b      	lsrs	r3, r3, #28
 800ebe2:	f003 030f 	and.w	r3, r3, #15
 800ebe6:	4a4e      	ldr	r2, [pc, #312]	; (800ed20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800ebe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebec:	ee07 3a90 	vmov	s15, r3
 800ebf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	ee07 3a90 	vmov	s15, r3
 800ebfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	ee07 3a90 	vmov	s15, r3
 800ec08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec0c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec10:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ed1c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800ec14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec20:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ec24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec2c:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ec2e:	4b39      	ldr	r3, [pc, #228]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ec30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d017      	beq.n	800ec6a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ec3a:	4b36      	ldr	r3, [pc, #216]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ec3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec3e:	0a5b      	lsrs	r3, r3, #9
 800ec40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec44:	ee07 3a90 	vmov	s15, r3
 800ec48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ec4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec50:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ec54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ec58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ec60:	ee17 2a90 	vmov	r2, s15
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	e002      	b.n	800ec70 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ec70:	4b28      	ldr	r3, [pc, #160]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ec72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d017      	beq.n	800ecac <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ec7c:	4b25      	ldr	r3, [pc, #148]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ec7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec80:	0c1b      	lsrs	r3, r3, #16
 800ec82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec86:	ee07 3a90 	vmov	s15, r3
 800ec8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ec8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec92:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ec96:	edd7 6a07 	vldr	s13, [r7, #28]
 800ec9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eca2:	ee17 2a90 	vmov	r2, s15
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	605a      	str	r2, [r3, #4]
 800ecaa:	e002      	b.n	800ecb2 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ecb2:	4b18      	ldr	r3, [pc, #96]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ecb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d017      	beq.n	800ecee <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ecbe:	4b15      	ldr	r3, [pc, #84]	; (800ed14 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ecc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecc2:	0e1b      	lsrs	r3, r3, #24
 800ecc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecc8:	ee07 3a90 	vmov	s15, r3
 800eccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800ecd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ecd4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ecd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ecdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ece0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ece4:	ee17 2a90 	vmov	r2, s15
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ecec:	e00c      	b.n	800ed08 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	609a      	str	r2, [r3, #8]
}
 800ecf4:	e008      	b.n	800ed08 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	609a      	str	r2, [r3, #8]
}
 800ed08:	bf00      	nop
 800ed0a:	3724      	adds	r7, #36	; 0x24
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr
 800ed14:	46020c00 	.word	0x46020c00
 800ed18:	4b742400 	.word	0x4b742400
 800ed1c:	46000000 	.word	0x46000000
 800ed20:	0801f864 	.word	0x0801f864

0800ed24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b089      	sub	sp, #36	; 0x24
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ed2c:	4bac      	ldr	r3, [pc, #688]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ed2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed34:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ed36:	4baa      	ldr	r3, [pc, #680]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ed38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed3a:	f003 0303 	and.w	r3, r3, #3
 800ed3e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800ed40:	4ba7      	ldr	r3, [pc, #668]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ed42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed44:	0a1b      	lsrs	r3, r3, #8
 800ed46:	f003 030f 	and.w	r3, r3, #15
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800ed4e:	4ba4      	ldr	r3, [pc, #656]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ed50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed52:	f003 0310 	and.w	r3, r3, #16
 800ed56:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ed58:	4ba1      	ldr	r3, [pc, #644]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ed5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed5c:	08db      	lsrs	r3, r3, #3
 800ed5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	fb02 f303 	mul.w	r3, r2, r3
 800ed68:	ee07 3a90 	vmov	s15, r3
 800ed6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed70:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f000 8123 	beq.w	800efc2 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	2b03      	cmp	r3, #3
 800ed80:	d062      	beq.n	800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	2b03      	cmp	r3, #3
 800ed86:	f200 8081 	bhi.w	800ee8c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d024      	beq.n	800edda <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	2b02      	cmp	r3, #2
 800ed94:	d17a      	bne.n	800ee8c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	ee07 3a90 	vmov	s15, r3
 800ed9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eda0:	eddf 6a90 	vldr	s13, [pc, #576]	; 800efe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800eda4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eda8:	4b8d      	ldr	r3, [pc, #564]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800edaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edb0:	ee07 3a90 	vmov	s15, r3
 800edb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800edb8:	ed97 6a02 	vldr	s12, [r7, #8]
 800edbc:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800efe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800edc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800edc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800edc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800edcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800edd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edd4:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800edd8:	e08f      	b.n	800eefa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800edda:	4b81      	ldr	r3, [pc, #516]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800eddc:	689b      	ldr	r3, [r3, #8]
 800edde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d005      	beq.n	800edf2 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800ede6:	4b7e      	ldr	r3, [pc, #504]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ede8:	689b      	ldr	r3, [r3, #8]
 800edea:	0f1b      	lsrs	r3, r3, #28
 800edec:	f003 030f 	and.w	r3, r3, #15
 800edf0:	e006      	b.n	800ee00 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800edf2:	4b7b      	ldr	r3, [pc, #492]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800edf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800edf8:	041b      	lsls	r3, r3, #16
 800edfa:	0f1b      	lsrs	r3, r3, #28
 800edfc:	f003 030f 	and.w	r3, r3, #15
 800ee00:	4a7a      	ldr	r2, [pc, #488]	; (800efec <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800ee02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee06:	ee07 3a90 	vmov	s15, r3
 800ee0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	ee07 3a90 	vmov	s15, r3
 800ee14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	ee07 3a90 	vmov	s15, r3
 800ee22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee26:	ed97 6a02 	vldr	s12, [r7, #8]
 800ee2a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800efe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800ee2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ee3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ee46:	e058      	b.n	800eefa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	ee07 3a90 	vmov	s15, r3
 800ee4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee52:	eddf 6a64 	vldr	s13, [pc, #400]	; 800efe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800ee56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee5a:	4b61      	ldr	r3, [pc, #388]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ee5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee62:	ee07 3a90 	vmov	s15, r3
 800ee66:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ee6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ee6e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800efe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800ee72:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ee76:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ee7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ee82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ee8a:	e036      	b.n	800eefa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ee8c:	4b54      	ldr	r3, [pc, #336]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d005      	beq.n	800eea4 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800ee98:	4b51      	ldr	r3, [pc, #324]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ee9a:	689b      	ldr	r3, [r3, #8]
 800ee9c:	0f1b      	lsrs	r3, r3, #28
 800ee9e:	f003 030f 	and.w	r3, r3, #15
 800eea2:	e006      	b.n	800eeb2 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800eea4:	4b4e      	ldr	r3, [pc, #312]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800eea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eeaa:	041b      	lsls	r3, r3, #16
 800eeac:	0f1b      	lsrs	r3, r3, #28
 800eeae:	f003 030f 	and.w	r3, r3, #15
 800eeb2:	4a4e      	ldr	r2, [pc, #312]	; (800efec <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800eeb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeb8:	ee07 3a90 	vmov	s15, r3
 800eebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	ee07 3a90 	vmov	s15, r3
 800eec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eeca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	ee07 3a90 	vmov	s15, r3
 800eed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eed8:	ed97 6a02 	vldr	s12, [r7, #8]
 800eedc:	eddf 5a42 	vldr	s11, [pc, #264]	; 800efe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800eee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eeec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800eef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eef4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eef8:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800eefa:	4b39      	ldr	r3, [pc, #228]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800eefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eefe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d017      	beq.n	800ef36 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ef06:	4b36      	ldr	r3, [pc, #216]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ef08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef0a:	0a5b      	lsrs	r3, r3, #9
 800ef0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef10:	ee07 3a90 	vmov	s15, r3
 800ef14:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800ef18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ef1c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ef20:	edd7 6a07 	vldr	s13, [r7, #28]
 800ef24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef2c:	ee17 2a90 	vmov	r2, s15
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	e002      	b.n	800ef3c <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ef3c:	4b28      	ldr	r3, [pc, #160]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ef3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d017      	beq.n	800ef78 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ef48:	4b25      	ldr	r3, [pc, #148]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ef4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef4c:	0c1b      	lsrs	r3, r3, #16
 800ef4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef52:	ee07 3a90 	vmov	s15, r3
 800ef56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ef5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ef5e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ef62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ef66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef6e:	ee17 2a90 	vmov	r2, s15
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	605a      	str	r2, [r3, #4]
 800ef76:	e002      	b.n	800ef7e <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ef7e:	4b18      	ldr	r3, [pc, #96]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ef80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d017      	beq.n	800efba <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ef8a:	4b15      	ldr	r3, [pc, #84]	; (800efe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ef8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef8e:	0e1b      	lsrs	r3, r3, #24
 800ef90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef94:	ee07 3a90 	vmov	s15, r3
 800ef98:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800ef9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800efa0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800efa4:	edd7 6a07 	vldr	s13, [r7, #28]
 800efa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800efb0:	ee17 2a90 	vmov	r2, s15
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800efb8:	e00c      	b.n	800efd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	609a      	str	r2, [r3, #8]
}
 800efc0:	e008      	b.n	800efd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	609a      	str	r2, [r3, #8]
}
 800efd4:	bf00      	nop
 800efd6:	3724      	adds	r7, #36	; 0x24
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	46020c00 	.word	0x46020c00
 800efe4:	4b742400 	.word	0x4b742400
 800efe8:	46000000 	.word	0x46000000
 800efec:	0801f864 	.word	0x0801f864

0800eff0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b08e      	sub	sp, #56	; 0x38
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800effa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800effe:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800f002:	430b      	orrs	r3, r1
 800f004:	d145      	bne.n	800f092 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800f006:	4ba7      	ldr	r3, [pc, #668]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f00c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f010:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800f012:	4ba4      	ldr	r3, [pc, #656]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f018:	f003 0302 	and.w	r3, r3, #2
 800f01c:	2b02      	cmp	r3, #2
 800f01e:	d108      	bne.n	800f032 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800f020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f026:	d104      	bne.n	800f032 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800f028:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f02c:	637b      	str	r3, [r7, #52]	; 0x34
 800f02e:	f001 b8fc 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800f032:	4b9c      	ldr	r3, [pc, #624]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f03c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f040:	d114      	bne.n	800f06c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800f042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f048:	d110      	bne.n	800f06c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f04a:	4b96      	ldr	r3, [pc, #600]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f04c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f058:	d103      	bne.n	800f062 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800f05a:	23fa      	movs	r3, #250	; 0xfa
 800f05c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f05e:	f001 b8e4 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800f062:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f066:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f068:	f001 b8df 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800f06c:	4b8d      	ldr	r3, [pc, #564]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f078:	d107      	bne.n	800f08a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800f07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f080:	d103      	bne.n	800f08a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800f082:	4b89      	ldr	r3, [pc, #548]	; (800f2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800f084:	637b      	str	r3, [r7, #52]	; 0x34
 800f086:	f001 b8d0 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800f08a:	2300      	movs	r3, #0
 800f08c:	637b      	str	r3, [r7, #52]	; 0x34
 800f08e:	f001 b8cc 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f096:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f09a:	430b      	orrs	r3, r1
 800f09c:	d151      	bne.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800f09e:	4b81      	ldr	r3, [pc, #516]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f0a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f0a4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800f0a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ac:	2b80      	cmp	r3, #128	; 0x80
 800f0ae:	d035      	beq.n	800f11c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800f0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b2:	2b80      	cmp	r3, #128	; 0x80
 800f0b4:	d841      	bhi.n	800f13a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b8:	2b60      	cmp	r3, #96	; 0x60
 800f0ba:	d02a      	beq.n	800f112 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0be:	2b60      	cmp	r3, #96	; 0x60
 800f0c0:	d83b      	bhi.n	800f13a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c4:	2b40      	cmp	r3, #64	; 0x40
 800f0c6:	d009      	beq.n	800f0dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ca:	2b40      	cmp	r3, #64	; 0x40
 800f0cc:	d835      	bhi.n	800f13a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d00c      	beq.n	800f0ee <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800f0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d6:	2b20      	cmp	r3, #32
 800f0d8:	d012      	beq.n	800f100 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800f0da:	e02e      	b.n	800f13a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7ff fb53 	bl	800e78c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0ea:	f001 b89e 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0ee:	f107 0318 	add.w	r3, r7, #24
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7ff fcb0 	bl	800ea58 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0fc:	f001 b895 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f100:	f107 030c 	add.w	r3, r7, #12
 800f104:	4618      	mov	r0, r3
 800f106:	f7ff fe0d 	bl	800ed24 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f10e:	f001 b88c 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f112:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f116:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f118:	f001 b887 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f11c:	4b61      	ldr	r3, [pc, #388]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f128:	d103      	bne.n	800f132 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800f12a:	4b60      	ldr	r3, [pc, #384]	; (800f2ac <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f12c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f12e:	f001 b87c 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800f132:	2300      	movs	r3, #0
 800f134:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f136:	f001 b878 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800f13a:	2300      	movs	r3, #0
 800f13c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f13e:	f001 b874 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800f142:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f146:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f14a:	430b      	orrs	r3, r1
 800f14c:	d158      	bne.n	800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800f14e:	4b55      	ldr	r3, [pc, #340]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f150:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f158:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f160:	d03b      	beq.n	800f1da <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800f162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f168:	d846      	bhi.n	800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f170:	d02e      	beq.n	800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800f172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f178:	d83e      	bhi.n	800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f180:	d00b      	beq.n	800f19a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800f182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f188:	d836      	bhi.n	800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d00d      	beq.n	800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800f190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f196:	d012      	beq.n	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800f198:	e02e      	b.n	800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f19a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7ff faf4 	bl	800e78c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1a8:	f001 b83f 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1ac:	f107 0318 	add.w	r3, r7, #24
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7ff fc51 	bl	800ea58 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800f1b6:	69bb      	ldr	r3, [r7, #24]
 800f1b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1ba:	f001 b836 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1be:	f107 030c 	add.w	r3, r7, #12
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7ff fdae 	bl	800ed24 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1cc:	f001 b82d 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f1d0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f1d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1d6:	f001 b828 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f1da:	4b32      	ldr	r3, [pc, #200]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1e6:	d103      	bne.n	800f1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800f1e8:	4b30      	ldr	r3, [pc, #192]	; (800f2ac <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f1ea:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f1ec:	f001 b81d 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1f4:	f001 b819 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1fc:	f001 b815 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800f200:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f204:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f208:	430b      	orrs	r3, r1
 800f20a:	d126      	bne.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800f20c:	4b25      	ldr	r3, [pc, #148]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f20e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f216:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800f218:	4b22      	ldr	r3, [pc, #136]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f224:	d106      	bne.n	800f234 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800f226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d103      	bne.n	800f234 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800f22c:	4b1f      	ldr	r3, [pc, #124]	; (800f2ac <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f22e:	637b      	str	r3, [r7, #52]	; 0x34
 800f230:	f000 bffb 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800f234:	4b1b      	ldr	r3, [pc, #108]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f23c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f240:	d107      	bne.n	800f252 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800f242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f248:	d103      	bne.n	800f252 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800f24a:	4b19      	ldr	r3, [pc, #100]	; (800f2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800f24c:	637b      	str	r3, [r7, #52]	; 0x34
 800f24e:	f000 bfec 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800f252:	2300      	movs	r3, #0
 800f254:	637b      	str	r3, [r7, #52]	; 0x34
 800f256:	f000 bfe8 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800f25a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f25e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800f262:	430b      	orrs	r3, r1
 800f264:	d164      	bne.n	800f330 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800f266:	4b0f      	ldr	r3, [pc, #60]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f26c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f270:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f274:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f278:	d03d      	beq.n	800f2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f280:	d852      	bhi.n	800f328 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800f282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f288:	d014      	beq.n	800f2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800f28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f290:	d84a      	bhi.n	800f328 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	2b00      	cmp	r3, #0
 800f296:	d01f      	beq.n	800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800f298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f29e:	d012      	beq.n	800f2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800f2a0:	e042      	b.n	800f328 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800f2a2:	bf00      	nop
 800f2a4:	46020c00 	.word	0x46020c00
 800f2a8:	0007a120 	.word	0x0007a120
 800f2ac:	00f42400 	.word	0x00f42400
 800f2b0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f2b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7ff fa67 	bl	800e78c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800f2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f2c2:	f000 bfb2 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2c6:	f107 0318 	add.w	r3, r7, #24
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7ff fbc4 	bl	800ea58 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800f2d0:	69fb      	ldr	r3, [r7, #28]
 800f2d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f2d4:	f000 bfa9 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f2d8:	4bab      	ldr	r3, [pc, #684]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f2e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2e4:	d103      	bne.n	800f2ee <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800f2e6:	4ba9      	ldr	r3, [pc, #676]	; (800f58c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800f2e8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f2ea:	f000 bf9e 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f2f2:	f000 bf9a 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f2f6:	4ba4      	ldr	r3, [pc, #656]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d005      	beq.n	800f30e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f302:	4ba1      	ldr	r3, [pc, #644]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	0e1b      	lsrs	r3, r3, #24
 800f308:	f003 030f 	and.w	r3, r3, #15
 800f30c:	e006      	b.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800f30e:	4b9e      	ldr	r3, [pc, #632]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f314:	041b      	lsls	r3, r3, #16
 800f316:	0e1b      	lsrs	r3, r3, #24
 800f318:	f003 030f 	and.w	r3, r3, #15
 800f31c:	4a9c      	ldr	r2, [pc, #624]	; (800f590 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800f31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f322:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f324:	f000 bf81 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800f328:	2300      	movs	r3, #0
 800f32a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f32c:	f000 bf7d 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f330:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f334:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800f338:	430b      	orrs	r3, r1
 800f33a:	d175      	bne.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f33c:	4b92      	ldr	r3, [pc, #584]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f33e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f346:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800f348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d15b      	bne.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800f34e:	4b8e      	ldr	r3, [pc, #568]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f354:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f358:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800f35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f360:	d034      	beq.n	800f3cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f364:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f368:	d849      	bhi.n	800f3fe <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800f36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f370:	d00b      	beq.n	800f38a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800f372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f378:	d841      	bhi.n	800f3fe <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800f37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d016      	beq.n	800f3ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f386:	d009      	beq.n	800f39c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800f388:	e039      	b.n	800f3fe <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f38a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff f9fc 	bl	800e78c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f398:	f000 bf47 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f39c:	f107 0318 	add.w	r3, r7, #24
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7ff fb59 	bl	800ea58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f3aa:	f000 bf3e 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f3ae:	4b76      	ldr	r3, [pc, #472]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f3b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3ba:	d103      	bne.n	800f3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800f3bc:	4b73      	ldr	r3, [pc, #460]	; (800f58c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800f3be:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800f3c0:	f000 bf33 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f3c8:	f000 bf2f 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f3cc:	4b6e      	ldr	r3, [pc, #440]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f3ce:	689b      	ldr	r3, [r3, #8]
 800f3d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d005      	beq.n	800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800f3d8:	4b6b      	ldr	r3, [pc, #428]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f3da:	689b      	ldr	r3, [r3, #8]
 800f3dc:	0e1b      	lsrs	r3, r3, #24
 800f3de:	f003 030f 	and.w	r3, r3, #15
 800f3e2:	e006      	b.n	800f3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800f3e4:	4b68      	ldr	r3, [pc, #416]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f3e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f3ea:	041b      	lsls	r3, r3, #16
 800f3ec:	0e1b      	lsrs	r3, r3, #24
 800f3ee:	f003 030f 	and.w	r3, r3, #15
 800f3f2:	4a67      	ldr	r2, [pc, #412]	; (800f590 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800f3f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3f8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f3fa:	f000 bf16 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800f3fe:	2300      	movs	r3, #0
 800f400:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f402:	f000 bf12 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800f406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f40c:	d108      	bne.n	800f420 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f40e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f412:	4618      	mov	r0, r3
 800f414:	f7ff f9ba 	bl	800e78c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800f418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41a:	637b      	str	r3, [r7, #52]	; 0x34
 800f41c:	f000 bf05 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800f420:	2300      	movs	r3, #0
 800f422:	637b      	str	r3, [r7, #52]	; 0x34
 800f424:	f000 bf01 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800f428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f42c:	1e51      	subs	r1, r2, #1
 800f42e:	430b      	orrs	r3, r1
 800f430:	d136      	bne.n	800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800f432:	4b55      	ldr	r3, [pc, #340]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f438:	f003 0303 	and.w	r3, r3, #3
 800f43c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800f43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f440:	2b00      	cmp	r3, #0
 800f442:	d104      	bne.n	800f44e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800f444:	f7fe fb34 	bl	800dab0 <HAL_RCC_GetPCLK2Freq>
 800f448:	6378      	str	r0, [r7, #52]	; 0x34
 800f44a:	f000 beee 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800f44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f450:	2b01      	cmp	r3, #1
 800f452:	d104      	bne.n	800f45e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f454:	f7fe f9f6 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800f458:	6378      	str	r0, [r7, #52]	; 0x34
 800f45a:	f000 bee6 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800f45e:	4b4a      	ldr	r3, [pc, #296]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f46a:	d106      	bne.n	800f47a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800f46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d103      	bne.n	800f47a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800f472:	4b48      	ldr	r3, [pc, #288]	; (800f594 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800f474:	637b      	str	r3, [r7, #52]	; 0x34
 800f476:	f000 bed8 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800f47a:	4b43      	ldr	r3, [pc, #268]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f47c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f480:	f003 0302 	and.w	r3, r3, #2
 800f484:	2b02      	cmp	r3, #2
 800f486:	d107      	bne.n	800f498 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800f488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48a:	2b03      	cmp	r3, #3
 800f48c:	d104      	bne.n	800f498 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800f48e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f492:	637b      	str	r3, [r7, #52]	; 0x34
 800f494:	f000 bec9 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800f498:	2300      	movs	r3, #0
 800f49a:	637b      	str	r3, [r7, #52]	; 0x34
 800f49c:	f000 bec5 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800f4a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4a4:	1e91      	subs	r1, r2, #2
 800f4a6:	430b      	orrs	r3, r1
 800f4a8:	d136      	bne.n	800f518 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800f4aa:	4b37      	ldr	r3, [pc, #220]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f4ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f4b0:	f003 030c 	and.w	r3, r3, #12
 800f4b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d104      	bne.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f4bc:	f7fe fae4 	bl	800da88 <HAL_RCC_GetPCLK1Freq>
 800f4c0:	6378      	str	r0, [r7, #52]	; 0x34
 800f4c2:	f000 beb2 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800f4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c8:	2b04      	cmp	r3, #4
 800f4ca:	d104      	bne.n	800f4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f4cc:	f7fe f9ba 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800f4d0:	6378      	str	r0, [r7, #52]	; 0x34
 800f4d2:	f000 beaa 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800f4d6:	4b2c      	ldr	r3, [pc, #176]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4e2:	d106      	bne.n	800f4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e6:	2b08      	cmp	r3, #8
 800f4e8:	d103      	bne.n	800f4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800f4ea:	4b2a      	ldr	r3, [pc, #168]	; (800f594 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800f4ec:	637b      	str	r3, [r7, #52]	; 0x34
 800f4ee:	f000 be9c 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800f4f2:	4b25      	ldr	r3, [pc, #148]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f4f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f4f8:	f003 0302 	and.w	r3, r3, #2
 800f4fc:	2b02      	cmp	r3, #2
 800f4fe:	d107      	bne.n	800f510 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800f500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f502:	2b0c      	cmp	r3, #12
 800f504:	d104      	bne.n	800f510 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800f506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f50a:	637b      	str	r3, [r7, #52]	; 0x34
 800f50c:	f000 be8d 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800f510:	2300      	movs	r3, #0
 800f512:	637b      	str	r3, [r7, #52]	; 0x34
 800f514:	f000 be89 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800f518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f51c:	1f11      	subs	r1, r2, #4
 800f51e:	430b      	orrs	r3, r1
 800f520:	d13e      	bne.n	800f5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800f522:	4b19      	ldr	r3, [pc, #100]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f528:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f52c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800f52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f530:	2b00      	cmp	r3, #0
 800f532:	d104      	bne.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f534:	f7fe faa8 	bl	800da88 <HAL_RCC_GetPCLK1Freq>
 800f538:	6378      	str	r0, [r7, #52]	; 0x34
 800f53a:	f000 be76 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800f53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f540:	2b10      	cmp	r3, #16
 800f542:	d104      	bne.n	800f54e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f544:	f7fe f97e 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800f548:	6378      	str	r0, [r7, #52]	; 0x34
 800f54a:	f000 be6e 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800f54e:	4b0e      	ldr	r3, [pc, #56]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f55a:	d106      	bne.n	800f56a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800f55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55e:	2b20      	cmp	r3, #32
 800f560:	d103      	bne.n	800f56a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800f562:	4b0c      	ldr	r3, [pc, #48]	; (800f594 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800f564:	637b      	str	r3, [r7, #52]	; 0x34
 800f566:	f000 be60 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800f56a:	4b07      	ldr	r3, [pc, #28]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f56c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f570:	f003 0302 	and.w	r3, r3, #2
 800f574:	2b02      	cmp	r3, #2
 800f576:	d10f      	bne.n	800f598 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57a:	2b30      	cmp	r3, #48	; 0x30
 800f57c:	d10c      	bne.n	800f598 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800f57e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f582:	637b      	str	r3, [r7, #52]	; 0x34
 800f584:	f000 be51 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800f588:	46020c00 	.word	0x46020c00
 800f58c:	02dc6c00 	.word	0x02dc6c00
 800f590:	0801f864 	.word	0x0801f864
 800f594:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800f598:	2300      	movs	r3, #0
 800f59a:	637b      	str	r3, [r7, #52]	; 0x34
 800f59c:	f000 be45 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800f5a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5a4:	f1a2 0108 	sub.w	r1, r2, #8
 800f5a8:	430b      	orrs	r3, r1
 800f5aa:	d136      	bne.n	800f61a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800f5ac:	4b9f      	ldr	r3, [pc, #636]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f5ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f5b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f5b6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800f5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d104      	bne.n	800f5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f5be:	f7fe fa63 	bl	800da88 <HAL_RCC_GetPCLK1Freq>
 800f5c2:	6378      	str	r0, [r7, #52]	; 0x34
 800f5c4:	f000 be31 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800f5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ca:	2b40      	cmp	r3, #64	; 0x40
 800f5cc:	d104      	bne.n	800f5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f5ce:	f7fe f939 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800f5d2:	6378      	str	r0, [r7, #52]	; 0x34
 800f5d4:	f000 be29 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800f5d8:	4b94      	ldr	r3, [pc, #592]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5e4:	d106      	bne.n	800f5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800f5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e8:	2b80      	cmp	r3, #128	; 0x80
 800f5ea:	d103      	bne.n	800f5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800f5ec:	4b90      	ldr	r3, [pc, #576]	; (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f5ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f5f0:	f000 be1b 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800f5f4:	4b8d      	ldr	r3, [pc, #564]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f5f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f5fa:	f003 0302 	and.w	r3, r3, #2
 800f5fe:	2b02      	cmp	r3, #2
 800f600:	d107      	bne.n	800f612 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800f602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f604:	2bc0      	cmp	r3, #192	; 0xc0
 800f606:	d104      	bne.n	800f612 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800f608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f60c:	637b      	str	r3, [r7, #52]	; 0x34
 800f60e:	f000 be0c 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800f612:	2300      	movs	r3, #0
 800f614:	637b      	str	r3, [r7, #52]	; 0x34
 800f616:	f000 be08 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800f61a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f61e:	f1a2 0110 	sub.w	r1, r2, #16
 800f622:	430b      	orrs	r3, r1
 800f624:	d139      	bne.n	800f69a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800f626:	4b81      	ldr	r3, [pc, #516]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f62c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f630:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800f632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f634:	2b00      	cmp	r3, #0
 800f636:	d104      	bne.n	800f642 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f638:	f7fe fa26 	bl	800da88 <HAL_RCC_GetPCLK1Freq>
 800f63c:	6378      	str	r0, [r7, #52]	; 0x34
 800f63e:	f000 bdf4 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800f642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f648:	d104      	bne.n	800f654 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f64a:	f7fe f8fb 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800f64e:	6378      	str	r0, [r7, #52]	; 0x34
 800f650:	f000 bdeb 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800f654:	4b75      	ldr	r3, [pc, #468]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f65c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f660:	d107      	bne.n	800f672 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800f662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f668:	d103      	bne.n	800f672 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800f66a:	4b71      	ldr	r3, [pc, #452]	; (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f66c:	637b      	str	r3, [r7, #52]	; 0x34
 800f66e:	f000 bddc 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800f672:	4b6e      	ldr	r3, [pc, #440]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f678:	f003 0302 	and.w	r3, r3, #2
 800f67c:	2b02      	cmp	r3, #2
 800f67e:	d108      	bne.n	800f692 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800f680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f686:	d104      	bne.n	800f692 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800f688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f68c:	637b      	str	r3, [r7, #52]	; 0x34
 800f68e:	f000 bdcc 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f692:	2300      	movs	r3, #0
 800f694:	637b      	str	r3, [r7, #52]	; 0x34
 800f696:	f000 bdc8 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800f69a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f69e:	f1a2 0120 	sub.w	r1, r2, #32
 800f6a2:	430b      	orrs	r3, r1
 800f6a4:	d158      	bne.n	800f758 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800f6a6:	4b61      	ldr	r3, [pc, #388]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f6a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f6ac:	f003 0307 	and.w	r3, r3, #7
 800f6b0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800f6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d104      	bne.n	800f6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800f6b8:	f7fe fa0e 	bl	800dad8 <HAL_RCC_GetPCLK3Freq>
 800f6bc:	6378      	str	r0, [r7, #52]	; 0x34
 800f6be:	f000 bdb4 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800f6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d104      	bne.n	800f6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f6c8:	f7fe f8bc 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800f6cc:	6378      	str	r0, [r7, #52]	; 0x34
 800f6ce:	f000 bdac 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800f6d2:	4b56      	ldr	r3, [pc, #344]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f6da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6de:	d106      	bne.n	800f6ee <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800f6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e2:	2b02      	cmp	r3, #2
 800f6e4:	d103      	bne.n	800f6ee <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800f6e6:	4b52      	ldr	r3, [pc, #328]	; (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f6e8:	637b      	str	r3, [r7, #52]	; 0x34
 800f6ea:	f000 bd9e 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800f6ee:	4b4f      	ldr	r3, [pc, #316]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f6f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f6f4:	f003 0302 	and.w	r3, r3, #2
 800f6f8:	2b02      	cmp	r3, #2
 800f6fa:	d107      	bne.n	800f70c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800f6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fe:	2b03      	cmp	r3, #3
 800f700:	d104      	bne.n	800f70c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800f702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f706:	637b      	str	r3, [r7, #52]	; 0x34
 800f708:	f000 bd8f 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800f70c:	4b47      	ldr	r3, [pc, #284]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f003 0320 	and.w	r3, r3, #32
 800f714:	2b20      	cmp	r3, #32
 800f716:	d11b      	bne.n	800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800f718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71a:	2b04      	cmp	r3, #4
 800f71c:	d118      	bne.n	800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f71e:	4b43      	ldr	r3, [pc, #268]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f726:	2b00      	cmp	r3, #0
 800f728:	d005      	beq.n	800f736 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800f72a:	4b40      	ldr	r3, [pc, #256]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	0e1b      	lsrs	r3, r3, #24
 800f730:	f003 030f 	and.w	r3, r3, #15
 800f734:	e006      	b.n	800f744 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800f736:	4b3d      	ldr	r3, [pc, #244]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f73c:	041b      	lsls	r3, r3, #16
 800f73e:	0e1b      	lsrs	r3, r3, #24
 800f740:	f003 030f 	and.w	r3, r3, #15
 800f744:	4a3b      	ldr	r2, [pc, #236]	; (800f834 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f74a:	637b      	str	r3, [r7, #52]	; 0x34
 800f74c:	f000 bd6d 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800f750:	2300      	movs	r3, #0
 800f752:	637b      	str	r3, [r7, #52]	; 0x34
 800f754:	f000 bd69 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800f758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f75c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f760:	430b      	orrs	r3, r1
 800f762:	d169      	bne.n	800f838 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800f764:	4b31      	ldr	r3, [pc, #196]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f76a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f76e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800f770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f776:	d104      	bne.n	800f782 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f778:	f7fe f864 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800f77c:	6378      	str	r0, [r7, #52]	; 0x34
 800f77e:	f000 bd54 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800f782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f788:	d108      	bne.n	800f79c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f78a:	f107 0318 	add.w	r3, r7, #24
 800f78e:	4618      	mov	r0, r3
 800f790:	f7ff f962 	bl	800ea58 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800f794:	6a3b      	ldr	r3, [r7, #32]
 800f796:	637b      	str	r3, [r7, #52]	; 0x34
 800f798:	f000 bd47 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800f79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d104      	bne.n	800f7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800f7a2:	f7fe f957 	bl	800da54 <HAL_RCC_GetHCLKFreq>
 800f7a6:	6378      	str	r0, [r7, #52]	; 0x34
 800f7a8:	f000 bd3f 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800f7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800f7b2:	d118      	bne.n	800f7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800f7b4:	4b1d      	ldr	r3, [pc, #116]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d005      	beq.n	800f7cc <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800f7c0:	4b1a      	ldr	r3, [pc, #104]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f7c2:	689b      	ldr	r3, [r3, #8]
 800f7c4:	0f1b      	lsrs	r3, r3, #28
 800f7c6:	f003 030f 	and.w	r3, r3, #15
 800f7ca:	e006      	b.n	800f7da <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800f7cc:	4b17      	ldr	r3, [pc, #92]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f7ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f7d2:	041b      	lsls	r3, r3, #16
 800f7d4:	0f1b      	lsrs	r3, r3, #28
 800f7d6:	f003 030f 	and.w	r3, r3, #15
 800f7da:	4a16      	ldr	r2, [pc, #88]	; (800f834 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f7dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7e0:	637b      	str	r3, [r7, #52]	; 0x34
 800f7e2:	f000 bd22 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800f7e6:	4b11      	ldr	r3, [pc, #68]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f7f2:	d107      	bne.n	800f804 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800f7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f7fa:	d103      	bne.n	800f804 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800f7fc:	4b0c      	ldr	r3, [pc, #48]	; (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f7fe:	637b      	str	r3, [r7, #52]	; 0x34
 800f800:	f000 bd13 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800f804:	4b09      	ldr	r3, [pc, #36]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f80c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f810:	d107      	bne.n	800f822 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800f812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f818:	d103      	bne.n	800f822 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800f81a:	4b05      	ldr	r3, [pc, #20]	; (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f81c:	637b      	str	r3, [r7, #52]	; 0x34
 800f81e:	f000 bd04 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800f822:	2300      	movs	r3, #0
 800f824:	637b      	str	r3, [r7, #52]	; 0x34
 800f826:	f000 bd00 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800f82a:	bf00      	nop
 800f82c:	46020c00 	.word	0x46020c00
 800f830:	00f42400 	.word	0x00f42400
 800f834:	0801f864 	.word	0x0801f864
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800f838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f83c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f840:	430b      	orrs	r3, r1
 800f842:	d14e      	bne.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800f844:	4ba8      	ldr	r3, [pc, #672]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f846:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f84a:	f003 0307 	and.w	r3, r3, #7
 800f84e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f852:	2b04      	cmp	r3, #4
 800f854:	d841      	bhi.n	800f8da <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800f856:	a201      	add	r2, pc, #4	; (adr r2, 800f85c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800f858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f85c:	0800f895 	.word	0x0800f895
 800f860:	0800f871 	.word	0x0800f871
 800f864:	0800f883 	.word	0x0800f883
 800f868:	0800f89f 	.word	0x0800f89f
 800f86c:	0800f8a9 	.word	0x0800f8a9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f874:	4618      	mov	r0, r3
 800f876:	f7fe ff89 	bl	800e78c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f87e:	f000 bcd4 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f882:	f107 030c 	add.w	r3, r7, #12
 800f886:	4618      	mov	r0, r3
 800f888:	f7ff fa4c 	bl	800ed24 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f890:	f000 bccb 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f894:	f7fe f8de 	bl	800da54 <HAL_RCC_GetHCLKFreq>
 800f898:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f89a:	f000 bcc6 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f89e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f8a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f8a4:	f000 bcc1 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f8a8:	4b8f      	ldr	r3, [pc, #572]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f8aa:	689b      	ldr	r3, [r3, #8]
 800f8ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d005      	beq.n	800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800f8b4:	4b8c      	ldr	r3, [pc, #560]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	0e1b      	lsrs	r3, r3, #24
 800f8ba:	f003 030f 	and.w	r3, r3, #15
 800f8be:	e006      	b.n	800f8ce <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800f8c0:	4b89      	ldr	r3, [pc, #548]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f8c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f8c6:	041b      	lsls	r3, r3, #16
 800f8c8:	0e1b      	lsrs	r3, r3, #24
 800f8ca:	f003 030f 	and.w	r3, r3, #15
 800f8ce:	4a87      	ldr	r2, [pc, #540]	; (800faec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f8d6:	f000 bca8 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f8de:	f000 bca4 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800f8e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8e6:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800f8ea:	430b      	orrs	r3, r1
 800f8ec:	d15d      	bne.n	800f9aa <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800f8ee:	4b7e      	ldr	r3, [pc, #504]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f8f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f8f4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f8f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f900:	d036      	beq.n	800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800f902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f904:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f908:	d84b      	bhi.n	800f9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800f90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f910:	d029      	beq.n	800f966 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800f912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f914:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f918:	d843      	bhi.n	800f9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800f91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f920:	d013      	beq.n	800f94a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800f922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f928:	d83b      	bhi.n	800f9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800f92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d015      	beq.n	800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800f930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f936:	d134      	bne.n	800f9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7fe ff25 	bl	800e78c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f944:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f946:	f000 bc70 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f94a:	f107 030c 	add.w	r3, r7, #12
 800f94e:	4618      	mov	r0, r3
 800f950:	f7ff f9e8 	bl	800ed24 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f958:	f000 bc67 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f95c:	f7fe f87a 	bl	800da54 <HAL_RCC_GetHCLKFreq>
 800f960:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f962:	f000 bc62 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f966:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f96a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f96c:	f000 bc5d 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f970:	4b5d      	ldr	r3, [pc, #372]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f972:	689b      	ldr	r3, [r3, #8]
 800f974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d005      	beq.n	800f988 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800f97c:	4b5a      	ldr	r3, [pc, #360]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f97e:	689b      	ldr	r3, [r3, #8]
 800f980:	0e1b      	lsrs	r3, r3, #24
 800f982:	f003 030f 	and.w	r3, r3, #15
 800f986:	e006      	b.n	800f996 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800f988:	4b57      	ldr	r3, [pc, #348]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f98a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f98e:	041b      	lsls	r3, r3, #16
 800f990:	0e1b      	lsrs	r3, r3, #24
 800f992:	f003 030f 	and.w	r3, r3, #15
 800f996:	4a55      	ldr	r2, [pc, #340]	; (800faec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f99c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f99e:	f000 bc44 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9a6:	f000 bc40 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800f9aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9ae:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800f9b2:	430b      	orrs	r3, r1
 800f9b4:	d14a      	bne.n	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f9b6:	4b4c      	ldr	r3, [pc, #304]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f9b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f9bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f9c0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d104      	bne.n	800f9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f9c8:	f7fe f85e 	bl	800da88 <HAL_RCC_GetPCLK1Freq>
 800f9cc:	6378      	str	r0, [r7, #52]	; 0x34
 800f9ce:	f000 bc2c 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9d8:	d104      	bne.n	800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f9da:	f7fd ff33 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800f9de:	6378      	str	r0, [r7, #52]	; 0x34
 800f9e0:	f000 bc23 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f9e4:	4b40      	ldr	r3, [pc, #256]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9f0:	d107      	bne.n	800fa02 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800f9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9f8:	d103      	bne.n	800fa02 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800f9fa:	4b3d      	ldr	r3, [pc, #244]	; (800faf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f9fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f9fe:	f000 bc14 	b.w	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800fa02:	4b39      	ldr	r3, [pc, #228]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f003 0320 	and.w	r3, r3, #32
 800fa0a:	2b20      	cmp	r3, #32
 800fa0c:	d11b      	bne.n	800fa46 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800fa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fa14:	d117      	bne.n	800fa46 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fa16:	4b34      	ldr	r3, [pc, #208]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fa18:	689b      	ldr	r3, [r3, #8]
 800fa1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d005      	beq.n	800fa2e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800fa22:	4b31      	ldr	r3, [pc, #196]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fa24:	689b      	ldr	r3, [r3, #8]
 800fa26:	0e1b      	lsrs	r3, r3, #24
 800fa28:	f003 030f 	and.w	r3, r3, #15
 800fa2c:	e006      	b.n	800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800fa2e:	4b2e      	ldr	r3, [pc, #184]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fa30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fa34:	041b      	lsls	r3, r3, #16
 800fa36:	0e1b      	lsrs	r3, r3, #24
 800fa38:	f003 030f 	and.w	r3, r3, #15
 800fa3c:	4a2b      	ldr	r2, [pc, #172]	; (800faec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800fa3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa42:	637b      	str	r3, [r7, #52]	; 0x34
 800fa44:	e3f1      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800fa46:	2300      	movs	r3, #0
 800fa48:	637b      	str	r3, [r7, #52]	; 0x34
 800fa4a:	e3ee      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800fa4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa50:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800fa54:	430b      	orrs	r3, r1
 800fa56:	d14d      	bne.n	800faf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800fa58:	4b23      	ldr	r3, [pc, #140]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fa5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fa62:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800fa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d103      	bne.n	800fa72 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fa6a:	f7fe f80d 	bl	800da88 <HAL_RCC_GetPCLK1Freq>
 800fa6e:	6378      	str	r0, [r7, #52]	; 0x34
 800fa70:	e3db      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800fa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa78:	d103      	bne.n	800fa82 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fa7a:	f7fd fee3 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800fa7e:	6378      	str	r0, [r7, #52]	; 0x34
 800fa80:	e3d3      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800fa82:	4b19      	ldr	r3, [pc, #100]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa8e:	d106      	bne.n	800fa9e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800fa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa96:	d102      	bne.n	800fa9e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800fa98:	4b15      	ldr	r3, [pc, #84]	; (800faf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fa9a:	637b      	str	r3, [r7, #52]	; 0x34
 800fa9c:	e3c5      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800fa9e:	4b12      	ldr	r3, [pc, #72]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	f003 0320 	and.w	r3, r3, #32
 800faa6:	2b20      	cmp	r3, #32
 800faa8:	d11b      	bne.n	800fae2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800faaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fab0:	d117      	bne.n	800fae2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fab2:	4b0d      	ldr	r3, [pc, #52]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fab4:	689b      	ldr	r3, [r3, #8]
 800fab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d005      	beq.n	800faca <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800fabe:	4b0a      	ldr	r3, [pc, #40]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	0e1b      	lsrs	r3, r3, #24
 800fac4:	f003 030f 	and.w	r3, r3, #15
 800fac8:	e006      	b.n	800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800faca:	4b07      	ldr	r3, [pc, #28]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800facc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fad0:	041b      	lsls	r3, r3, #16
 800fad2:	0e1b      	lsrs	r3, r3, #24
 800fad4:	f003 030f 	and.w	r3, r3, #15
 800fad8:	4a04      	ldr	r2, [pc, #16]	; (800faec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800fada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fade:	637b      	str	r3, [r7, #52]	; 0x34
 800fae0:	e3a3      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800fae2:	2300      	movs	r3, #0
 800fae4:	637b      	str	r3, [r7, #52]	; 0x34
 800fae6:	e3a0      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800fae8:	46020c00 	.word	0x46020c00
 800faec:	0801f864 	.word	0x0801f864
 800faf0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800faf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faf8:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800fafc:	430b      	orrs	r3, r1
 800fafe:	d148      	bne.n	800fb92 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800fb00:	4b9d      	ldr	r3, [pc, #628]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fb02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fb06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fb0a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0e:	2bc0      	cmp	r3, #192	; 0xc0
 800fb10:	d024      	beq.n	800fb5c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800fb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb14:	2bc0      	cmp	r3, #192	; 0xc0
 800fb16:	d839      	bhi.n	800fb8c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800fb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1a:	2b80      	cmp	r3, #128	; 0x80
 800fb1c:	d00d      	beq.n	800fb3a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800fb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb20:	2b80      	cmp	r3, #128	; 0x80
 800fb22:	d833      	bhi.n	800fb8c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800fb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d003      	beq.n	800fb32 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800fb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2c:	2b40      	cmp	r3, #64	; 0x40
 800fb2e:	d011      	beq.n	800fb54 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800fb30:	e02c      	b.n	800fb8c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800fb32:	f7fd ffd1 	bl	800dad8 <HAL_RCC_GetPCLK3Freq>
 800fb36:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fb38:	e377      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fb3a:	4b8f      	ldr	r3, [pc, #572]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb46:	d102      	bne.n	800fb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800fb48:	4b8c      	ldr	r3, [pc, #560]	; (800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800fb4a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fb4c:	e36d      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb52:	e36a      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800fb54:	f7fd fe76 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800fb58:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fb5a:	e366      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800fb5c:	4b86      	ldr	r3, [pc, #536]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fb5e:	689b      	ldr	r3, [r3, #8]
 800fb60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d005      	beq.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800fb68:	4b83      	ldr	r3, [pc, #524]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fb6a:	689b      	ldr	r3, [r3, #8]
 800fb6c:	0f1b      	lsrs	r3, r3, #28
 800fb6e:	f003 030f 	and.w	r3, r3, #15
 800fb72:	e006      	b.n	800fb82 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800fb74:	4b80      	ldr	r3, [pc, #512]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fb76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fb7a:	041b      	lsls	r3, r3, #16
 800fb7c:	0f1b      	lsrs	r3, r3, #28
 800fb7e:	f003 030f 	and.w	r3, r3, #15
 800fb82:	4a7f      	ldr	r2, [pc, #508]	; (800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800fb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb8a:	e34e      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb90:	e34b      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800fb92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb96:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800fb9a:	430b      	orrs	r3, r1
 800fb9c:	d147      	bne.n	800fc2e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800fb9e:	4b76      	ldr	r3, [pc, #472]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fba4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fba8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800fbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d103      	bne.n	800fbb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fbb0:	f7fd ff6a 	bl	800da88 <HAL_RCC_GetPCLK1Freq>
 800fbb4:	6378      	str	r0, [r7, #52]	; 0x34
 800fbb6:	e338      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fbbe:	d103      	bne.n	800fbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fbc0:	f7fd fe40 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800fbc4:	6378      	str	r0, [r7, #52]	; 0x34
 800fbc6:	e330      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800fbc8:	4b6b      	ldr	r3, [pc, #428]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fbd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbd4:	d106      	bne.n	800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800fbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbdc:	d102      	bne.n	800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800fbde:	4b67      	ldr	r3, [pc, #412]	; (800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800fbe0:	637b      	str	r3, [r7, #52]	; 0x34
 800fbe2:	e322      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800fbe4:	4b64      	ldr	r3, [pc, #400]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f003 0320 	and.w	r3, r3, #32
 800fbec:	2b20      	cmp	r3, #32
 800fbee:	d11b      	bne.n	800fc28 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800fbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fbf6:	d117      	bne.n	800fc28 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fbf8:	4b5f      	ldr	r3, [pc, #380]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fbfa:	689b      	ldr	r3, [r3, #8]
 800fbfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d005      	beq.n	800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800fc04:	4b5c      	ldr	r3, [pc, #368]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fc06:	689b      	ldr	r3, [r3, #8]
 800fc08:	0e1b      	lsrs	r3, r3, #24
 800fc0a:	f003 030f 	and.w	r3, r3, #15
 800fc0e:	e006      	b.n	800fc1e <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800fc10:	4b59      	ldr	r3, [pc, #356]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fc12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fc16:	041b      	lsls	r3, r3, #16
 800fc18:	0e1b      	lsrs	r3, r3, #24
 800fc1a:	f003 030f 	and.w	r3, r3, #15
 800fc1e:	4a58      	ldr	r2, [pc, #352]	; (800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800fc20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc24:	637b      	str	r3, [r7, #52]	; 0x34
 800fc26:	e300      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	637b      	str	r3, [r7, #52]	; 0x34
 800fc2c:	e2fd      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800fc2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc32:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800fc36:	430b      	orrs	r3, r1
 800fc38:	d15b      	bne.n	800fcf2 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800fc3a:	4b4f      	ldr	r3, [pc, #316]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fc3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fc40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc44:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800fc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d117      	bne.n	800fc7c <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fc4c:	4b4a      	ldr	r3, [pc, #296]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d005      	beq.n	800fc64 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800fc58:	4b47      	ldr	r3, [pc, #284]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fc5a:	689b      	ldr	r3, [r3, #8]
 800fc5c:	0e1b      	lsrs	r3, r3, #24
 800fc5e:	f003 030f 	and.w	r3, r3, #15
 800fc62:	e006      	b.n	800fc72 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800fc64:	4b44      	ldr	r3, [pc, #272]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fc66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fc6a:	041b      	lsls	r3, r3, #16
 800fc6c:	0e1b      	lsrs	r3, r3, #24
 800fc6e:	f003 030f 	and.w	r3, r3, #15
 800fc72:	4a43      	ldr	r2, [pc, #268]	; (800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800fc74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc78:	637b      	str	r3, [r7, #52]	; 0x34
 800fc7a:	e2d6      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800fc7c:	4b3e      	ldr	r3, [pc, #248]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fc7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc8a:	d112      	bne.n	800fcb2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800fc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc92:	d10e      	bne.n	800fcb2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fc94:	4b38      	ldr	r3, [pc, #224]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fc96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fca2:	d102      	bne.n	800fcaa <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800fca4:	23fa      	movs	r3, #250	; 0xfa
 800fca6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fca8:	e2bf      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800fcaa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fcae:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fcb0:	e2bb      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800fcb2:	4b31      	ldr	r3, [pc, #196]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fcba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fcbe:	d106      	bne.n	800fcce <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800fcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcc6:	d102      	bne.n	800fcce <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800fcc8:	4b2c      	ldr	r3, [pc, #176]	; (800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800fcca:	637b      	str	r3, [r7, #52]	; 0x34
 800fccc:	e2ad      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800fcce:	4b2a      	ldr	r3, [pc, #168]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fcd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fcd4:	f003 0302 	and.w	r3, r3, #2
 800fcd8:	2b02      	cmp	r3, #2
 800fcda:	d107      	bne.n	800fcec <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800fcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fce2:	d103      	bne.n	800fcec <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 800fce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fce8:	637b      	str	r3, [r7, #52]	; 0x34
 800fcea:	e29e      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800fcec:	2300      	movs	r3, #0
 800fcee:	637b      	str	r3, [r7, #52]	; 0x34
 800fcf0:	e29b      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800fcf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcf6:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800fcfa:	430b      	orrs	r3, r1
 800fcfc:	d162      	bne.n	800fdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800fcfe:	4b1e      	ldr	r3, [pc, #120]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fd00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fd04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fd08:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800fd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d117      	bne.n	800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fd10:	4b19      	ldr	r3, [pc, #100]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fd12:	689b      	ldr	r3, [r3, #8]
 800fd14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d005      	beq.n	800fd28 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800fd1c:	4b16      	ldr	r3, [pc, #88]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fd1e:	689b      	ldr	r3, [r3, #8]
 800fd20:	0e1b      	lsrs	r3, r3, #24
 800fd22:	f003 030f 	and.w	r3, r3, #15
 800fd26:	e006      	b.n	800fd36 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800fd28:	4b13      	ldr	r3, [pc, #76]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fd2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fd2e:	041b      	lsls	r3, r3, #16
 800fd30:	0e1b      	lsrs	r3, r3, #24
 800fd32:	f003 030f 	and.w	r3, r3, #15
 800fd36:	4a12      	ldr	r2, [pc, #72]	; (800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800fd38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd3c:	637b      	str	r3, [r7, #52]	; 0x34
 800fd3e:	e274      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800fd40:	4b0d      	ldr	r3, [pc, #52]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fd42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fd46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fd4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fd4e:	d119      	bne.n	800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800fd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd56:	d115      	bne.n	800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fd58:	4b07      	ldr	r3, [pc, #28]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fd5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fd5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd66:	d102      	bne.n	800fd6e <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800fd68:	23fa      	movs	r3, #250	; 0xfa
 800fd6a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fd6c:	e25d      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800fd6e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fd72:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fd74:	e259      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800fd76:	bf00      	nop
 800fd78:	46020c00 	.word	0x46020c00
 800fd7c:	00f42400 	.word	0x00f42400
 800fd80:	0801f864 	.word	0x0801f864
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800fd84:	4b9d      	ldr	r3, [pc, #628]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd90:	d106      	bne.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800fd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd98:	d102      	bne.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800fd9a:	4b99      	ldr	r3, [pc, #612]	; (8010000 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800fd9c:	637b      	str	r3, [r7, #52]	; 0x34
 800fd9e:	e244      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800fda0:	4b96      	ldr	r3, [pc, #600]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fda2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fda6:	f003 0302 	and.w	r3, r3, #2
 800fdaa:	2b02      	cmp	r3, #2
 800fdac:	d107      	bne.n	800fdbe <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800fdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fdb4:	d103      	bne.n	800fdbe <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800fdb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdba:	637b      	str	r3, [r7, #52]	; 0x34
 800fdbc:	e235      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	637b      	str	r3, [r7, #52]	; 0x34
 800fdc2:	e232      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800fdc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdc8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800fdcc:	430b      	orrs	r3, r1
 800fdce:	d147      	bne.n	800fe60 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800fdd0:	4b8a      	ldr	r3, [pc, #552]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fdd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fdd6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800fdda:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800fddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d103      	bne.n	800fdea <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fde2:	f7fd fe51 	bl	800da88 <HAL_RCC_GetPCLK1Freq>
 800fde6:	6378      	str	r0, [r7, #52]	; 0x34
 800fde8:	e21f      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800fdea:	4b84      	ldr	r3, [pc, #528]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fdec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fdf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fdf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fdf8:	d112      	bne.n	800fe20 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800fdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fe00:	d10e      	bne.n	800fe20 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fe02:	4b7e      	ldr	r3, [pc, #504]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fe04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fe08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe10:	d102      	bne.n	800fe18 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800fe12:	23fa      	movs	r3, #250	; 0xfa
 800fe14:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fe16:	e208      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800fe18:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fe1c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fe1e:	e204      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800fe20:	4b76      	ldr	r3, [pc, #472]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe2c:	d106      	bne.n	800fe3c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800fe2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800fe34:	d102      	bne.n	800fe3c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800fe36:	4b72      	ldr	r3, [pc, #456]	; (8010000 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800fe38:	637b      	str	r3, [r7, #52]	; 0x34
 800fe3a:	e1f6      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800fe3c:	4b6f      	ldr	r3, [pc, #444]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fe3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fe42:	f003 0302 	and.w	r3, r3, #2
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d107      	bne.n	800fe5a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800fe4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800fe50:	d103      	bne.n	800fe5a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800fe52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe56:	637b      	str	r3, [r7, #52]	; 0x34
 800fe58:	e1e7      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	637b      	str	r3, [r7, #52]	; 0x34
 800fe5e:	e1e4      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800fe60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe64:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800fe68:	430b      	orrs	r3, r1
 800fe6a:	d12d      	bne.n	800fec8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800fe6c:	4b63      	ldr	r3, [pc, #396]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fe6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe72:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800fe76:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800fe78:	4b60      	ldr	r3, [pc, #384]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fe84:	d105      	bne.n	800fe92 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800fe86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d102      	bne.n	800fe92 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 800fe8c:	4b5c      	ldr	r3, [pc, #368]	; (8010000 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800fe8e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe90:	e1cb      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800fe92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fe98:	d107      	bne.n	800feaa <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fe9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fe fc74 	bl	800e78c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800fea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea6:	637b      	str	r3, [r7, #52]	; 0x34
 800fea8:	e1bf      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800feaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800feb0:	d107      	bne.n	800fec2 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800feb2:	f107 0318 	add.w	r3, r7, #24
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fe fdce 	bl	800ea58 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	637b      	str	r3, [r7, #52]	; 0x34
 800fec0:	e1b3      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800fec2:	2300      	movs	r3, #0
 800fec4:	637b      	str	r3, [r7, #52]	; 0x34
 800fec6:	e1b0      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800fec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fecc:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800fed0:	430b      	orrs	r3, r1
 800fed2:	d14d      	bne.n	800ff70 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800fed4:	4b49      	ldr	r3, [pc, #292]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800feda:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800fede:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fee6:	d028      	beq.n	800ff3a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800fee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800feee:	d83c      	bhi.n	800ff6a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800fef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fef6:	d013      	beq.n	800ff20 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800fef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fefe:	d834      	bhi.n	800ff6a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800ff00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d004      	beq.n	800ff10 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800ff06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff0c:	d004      	beq.n	800ff18 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800ff0e:	e02c      	b.n	800ff6a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800ff10:	f7fd fdce 	bl	800dab0 <HAL_RCC_GetPCLK2Freq>
 800ff14:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ff16:	e188      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ff18:	f7fd fc94 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800ff1c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ff1e:	e184      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ff20:	4b36      	ldr	r3, [pc, #216]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff2c:	d102      	bne.n	800ff34 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800ff2e:	4b34      	ldr	r3, [pc, #208]	; (8010000 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800ff30:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ff32:	e17a      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800ff34:	2300      	movs	r3, #0
 800ff36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ff38:	e177      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ff3a:	4b30      	ldr	r3, [pc, #192]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ff3c:	689b      	ldr	r3, [r3, #8]
 800ff3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d005      	beq.n	800ff52 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800ff46:	4b2d      	ldr	r3, [pc, #180]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ff48:	689b      	ldr	r3, [r3, #8]
 800ff4a:	0e1b      	lsrs	r3, r3, #24
 800ff4c:	f003 030f 	and.w	r3, r3, #15
 800ff50:	e006      	b.n	800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800ff52:	4b2a      	ldr	r3, [pc, #168]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ff54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ff58:	041b      	lsls	r3, r3, #16
 800ff5a:	0e1b      	lsrs	r3, r3, #24
 800ff5c:	f003 030f 	and.w	r3, r3, #15
 800ff60:	4a28      	ldr	r2, [pc, #160]	; (8010004 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800ff62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ff68:	e15f      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ff6e:	e15c      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800ff70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff74:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800ff78:	430b      	orrs	r3, r1
 800ff7a:	d154      	bne.n	8010026 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800ff7c:	4b1f      	ldr	r3, [pc, #124]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ff7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ff82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ff86:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800ff88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ff8e:	d028      	beq.n	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800ff90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ff96:	d843      	bhi.n	8010020 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800ff98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff9e:	d013      	beq.n	800ffc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800ffa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ffa6:	d83b      	bhi.n	8010020 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800ffa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d004      	beq.n	800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800ffae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffb4:	d004      	beq.n	800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800ffb6:	e033      	b.n	8010020 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800ffb8:	f7fd fd66 	bl	800da88 <HAL_RCC_GetPCLK1Freq>
 800ffbc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ffbe:	e134      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ffc0:	f7fd fc40 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 800ffc4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ffc6:	e130      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ffc8:	4b0c      	ldr	r3, [pc, #48]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ffd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffd4:	d102      	bne.n	800ffdc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800ffd6:	4b0a      	ldr	r3, [pc, #40]	; (8010000 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800ffd8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ffda:	e126      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ffe0:	e123      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ffe2:	4b06      	ldr	r3, [pc, #24]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d00c      	beq.n	8010008 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800ffee:	4b03      	ldr	r3, [pc, #12]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fff0:	689b      	ldr	r3, [r3, #8]
 800fff2:	0e1b      	lsrs	r3, r3, #24
 800fff4:	f003 030f 	and.w	r3, r3, #15
 800fff8:	e00d      	b.n	8010016 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800fffa:	bf00      	nop
 800fffc:	46020c00 	.word	0x46020c00
 8010000:	00f42400 	.word	0x00f42400
 8010004:	0801f864 	.word	0x0801f864
 8010008:	4b8a      	ldr	r3, [pc, #552]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 801000a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801000e:	041b      	lsls	r3, r3, #16
 8010010:	0e1b      	lsrs	r3, r3, #24
 8010012:	f003 030f 	and.w	r3, r3, #15
 8010016:	4a88      	ldr	r2, [pc, #544]	; (8010238 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8010018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801001c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801001e:	e104      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8010020:	2300      	movs	r3, #0
 8010022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010024:	e101      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8010026:	e9d7 2300 	ldrd	r2, r3, [r7]
 801002a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 801002e:	430b      	orrs	r3, r1
 8010030:	d16e      	bne.n	8010110 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8010032:	4b80      	ldr	r3, [pc, #512]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8010034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010038:	f003 0318 	and.w	r3, r3, #24
 801003c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 801003e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010040:	2b18      	cmp	r3, #24
 8010042:	d862      	bhi.n	801010a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8010044:	a201      	add	r2, pc, #4	; (adr r2, 801004c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8010046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801004a:	bf00      	nop
 801004c:	080100b1 	.word	0x080100b1
 8010050:	0801010b 	.word	0x0801010b
 8010054:	0801010b 	.word	0x0801010b
 8010058:	0801010b 	.word	0x0801010b
 801005c:	0801010b 	.word	0x0801010b
 8010060:	0801010b 	.word	0x0801010b
 8010064:	0801010b 	.word	0x0801010b
 8010068:	0801010b 	.word	0x0801010b
 801006c:	080100b9 	.word	0x080100b9
 8010070:	0801010b 	.word	0x0801010b
 8010074:	0801010b 	.word	0x0801010b
 8010078:	0801010b 	.word	0x0801010b
 801007c:	0801010b 	.word	0x0801010b
 8010080:	0801010b 	.word	0x0801010b
 8010084:	0801010b 	.word	0x0801010b
 8010088:	0801010b 	.word	0x0801010b
 801008c:	080100c1 	.word	0x080100c1
 8010090:	0801010b 	.word	0x0801010b
 8010094:	0801010b 	.word	0x0801010b
 8010098:	0801010b 	.word	0x0801010b
 801009c:	0801010b 	.word	0x0801010b
 80100a0:	0801010b 	.word	0x0801010b
 80100a4:	0801010b 	.word	0x0801010b
 80100a8:	0801010b 	.word	0x0801010b
 80100ac:	080100db 	.word	0x080100db
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80100b0:	f7fd fd12 	bl	800dad8 <HAL_RCC_GetPCLK3Freq>
 80100b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80100b6:	e0b8      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80100b8:	f7fd fbc4 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 80100bc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80100be:	e0b4      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80100c0:	4b5c      	ldr	r3, [pc, #368]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80100c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100cc:	d102      	bne.n	80100d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80100ce:	4b5b      	ldr	r3, [pc, #364]	; (801023c <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80100d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80100d2:	e0aa      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80100d4:	2300      	movs	r3, #0
 80100d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80100d8:	e0a7      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80100da:	4b56      	ldr	r3, [pc, #344]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d005      	beq.n	80100f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80100e6:	4b53      	ldr	r3, [pc, #332]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80100e8:	689b      	ldr	r3, [r3, #8]
 80100ea:	0e1b      	lsrs	r3, r3, #24
 80100ec:	f003 030f 	and.w	r3, r3, #15
 80100f0:	e006      	b.n	8010100 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80100f2:	4b50      	ldr	r3, [pc, #320]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80100f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80100f8:	041b      	lsls	r3, r3, #16
 80100fa:	0e1b      	lsrs	r3, r3, #24
 80100fc:	f003 030f 	and.w	r3, r3, #15
 8010100:	4a4d      	ldr	r2, [pc, #308]	; (8010238 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8010102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010106:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010108:	e08f      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 801010a:	2300      	movs	r3, #0
 801010c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801010e:	e08c      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8010110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010114:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8010118:	430b      	orrs	r3, r1
 801011a:	d14c      	bne.n	80101b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 801011c:	4b45      	ldr	r3, [pc, #276]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 801011e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010122:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8010126:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8010128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801012e:	d013      	beq.n	8010158 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8010130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010132:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010136:	d83b      	bhi.n	80101b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8010138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801013e:	d013      	beq.n	8010168 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8010140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010146:	d833      	bhi.n	80101b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8010148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014a:	2b00      	cmp	r3, #0
 801014c:	d014      	beq.n	8010178 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 801014e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010154:	d014      	beq.n	8010180 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8010156:	e02b      	b.n	80101b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010158:	f107 0318 	add.w	r3, r7, #24
 801015c:	4618      	mov	r0, r3
 801015e:	f7fe fc7b 	bl	800ea58 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010166:	e060      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801016c:	4618      	mov	r0, r3
 801016e:	f7fe fb0d 	bl	800e78c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8010172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010176:	e058      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010178:	f7fd fb64 	bl	800d844 <HAL_RCC_GetSysClockFreq>
 801017c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 801017e:	e054      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010180:	4b2c      	ldr	r3, [pc, #176]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010188:	2b00      	cmp	r3, #0
 801018a:	d005      	beq.n	8010198 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 801018c:	4b29      	ldr	r3, [pc, #164]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 801018e:	689b      	ldr	r3, [r3, #8]
 8010190:	0e1b      	lsrs	r3, r3, #24
 8010192:	f003 030f 	and.w	r3, r3, #15
 8010196:	e006      	b.n	80101a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8010198:	4b26      	ldr	r3, [pc, #152]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 801019a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801019e:	041b      	lsls	r3, r3, #16
 80101a0:	0e1b      	lsrs	r3, r3, #24
 80101a2:	f003 030f 	and.w	r3, r3, #15
 80101a6:	4a24      	ldr	r2, [pc, #144]	; (8010238 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80101a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80101ae:	e03c      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80101b0:	2300      	movs	r3, #0
 80101b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80101b4:	e039      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80101b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101ba:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80101be:	430b      	orrs	r3, r1
 80101c0:	d131      	bne.n	8010226 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80101c2:	4b1c      	ldr	r3, [pc, #112]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80101c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80101c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80101cc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80101ce:	4b19      	ldr	r3, [pc, #100]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80101d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80101d4:	f003 0302 	and.w	r3, r3, #2
 80101d8:	2b02      	cmp	r3, #2
 80101da:	d106      	bne.n	80101ea <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80101dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d103      	bne.n	80101ea <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80101e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80101e6:	637b      	str	r3, [r7, #52]	; 0x34
 80101e8:	e01f      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80101ea:	4b12      	ldr	r3, [pc, #72]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80101ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80101f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80101f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80101f8:	d112      	bne.n	8010220 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80101fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010200:	d10e      	bne.n	8010220 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010202:	4b0c      	ldr	r3, [pc, #48]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8010204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801020c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010210:	d102      	bne.n	8010218 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8010212:	23fa      	movs	r3, #250	; 0xfa
 8010214:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010216:	e008      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8010218:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801021c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801021e:	e004      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8010220:	2300      	movs	r3, #0
 8010222:	637b      	str	r3, [r7, #52]	; 0x34
 8010224:	e001      	b.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8010226:	2300      	movs	r3, #0
 8010228:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 801022a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801022c:	4618      	mov	r0, r3
 801022e:	3738      	adds	r7, #56	; 0x38
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	46020c00 	.word	0x46020c00
 8010238:	0801f864 	.word	0x0801f864
 801023c:	00f42400 	.word	0x00f42400

08010240 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 8010240:	b480      	push	{r7}
 8010242:	b085      	sub	sp, #20
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8010248:	4b1c      	ldr	r3, [pc, #112]	; (80102bc <HAL_RCCEx_CRSConfig+0x7c>)
 801024a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801024c:	4a1b      	ldr	r2, [pc, #108]	; (80102bc <HAL_RCCEx_CRSConfig+0x7c>)
 801024e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010252:	6753      	str	r3, [r2, #116]	; 0x74
  __HAL_RCC_CRS_RELEASE_RESET();
 8010254:	4b19      	ldr	r3, [pc, #100]	; (80102bc <HAL_RCCEx_CRSConfig+0x7c>)
 8010256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010258:	4a18      	ldr	r2, [pc, #96]	; (80102bc <HAL_RCCEx_CRSConfig+0x7c>)
 801025a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801025e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	431a      	orrs	r2, r3
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	4313      	orrs	r3, r2
 8010270:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	68db      	ldr	r3, [r3, #12]
 8010276:	68fa      	ldr	r2, [r7, #12]
 8010278:	4313      	orrs	r3, r2
 801027a:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	691b      	ldr	r3, [r3, #16]
 8010280:	041b      	lsls	r3, r3, #16
 8010282:	68fa      	ldr	r2, [r7, #12]
 8010284:	4313      	orrs	r3, r2
 8010286:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8010288:	4a0d      	ldr	r2, [pc, #52]	; (80102c0 <HAL_RCCEx_CRSConfig+0x80>)
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 801028e:	4b0c      	ldr	r3, [pc, #48]	; (80102c0 <HAL_RCCEx_CRSConfig+0x80>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	695b      	ldr	r3, [r3, #20]
 801029a:	021b      	lsls	r3, r3, #8
 801029c:	4908      	ldr	r1, [pc, #32]	; (80102c0 <HAL_RCCEx_CRSConfig+0x80>)
 801029e:	4313      	orrs	r3, r2
 80102a0:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80102a2:	4b07      	ldr	r3, [pc, #28]	; (80102c0 <HAL_RCCEx_CRSConfig+0x80>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	4a06      	ldr	r2, [pc, #24]	; (80102c0 <HAL_RCCEx_CRSConfig+0x80>)
 80102a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80102ac:	6013      	str	r3, [r2, #0]
}
 80102ae:	bf00      	nop
 80102b0:	3714      	adds	r7, #20
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop
 80102bc:	46020c00 	.word	0x46020c00
 80102c0:	40006000 	.word	0x40006000

080102c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80102cc:	4b47      	ldr	r3, [pc, #284]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	4a46      	ldr	r2, [pc, #280]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 80102d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80102d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80102d8:	f7f7 fa72 	bl	80077c0 <HAL_GetTick>
 80102dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80102de:	e008      	b.n	80102f2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80102e0:	f7f7 fa6e 	bl	80077c0 <HAL_GetTick>
 80102e4:	4602      	mov	r2, r0
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	1ad3      	subs	r3, r2, r3
 80102ea:	2b02      	cmp	r3, #2
 80102ec:	d901      	bls.n	80102f2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80102ee:	2303      	movs	r3, #3
 80102f0:	e077      	b.n	80103e2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80102f2:	4b3e      	ldr	r3, [pc, #248]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d1f0      	bne.n	80102e0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80102fe:	4b3b      	ldr	r3, [pc, #236]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 8010300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010302:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010306:	f023 0303 	bic.w	r3, r3, #3
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	6811      	ldr	r1, [r2, #0]
 801030e:	687a      	ldr	r2, [r7, #4]
 8010310:	6852      	ldr	r2, [r2, #4]
 8010312:	3a01      	subs	r2, #1
 8010314:	0212      	lsls	r2, r2, #8
 8010316:	430a      	orrs	r2, r1
 8010318:	4934      	ldr	r1, [pc, #208]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 801031a:	4313      	orrs	r3, r2
 801031c:	62cb      	str	r3, [r1, #44]	; 0x2c
 801031e:	4b33      	ldr	r3, [pc, #204]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 8010320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010322:	4b33      	ldr	r3, [pc, #204]	; (80103f0 <RCCEx_PLL2_Config+0x12c>)
 8010324:	4013      	ands	r3, r2
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	6892      	ldr	r2, [r2, #8]
 801032a:	3a01      	subs	r2, #1
 801032c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	68d2      	ldr	r2, [r2, #12]
 8010334:	3a01      	subs	r2, #1
 8010336:	0252      	lsls	r2, r2, #9
 8010338:	b292      	uxth	r2, r2
 801033a:	4311      	orrs	r1, r2
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	6912      	ldr	r2, [r2, #16]
 8010340:	3a01      	subs	r2, #1
 8010342:	0412      	lsls	r2, r2, #16
 8010344:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8010348:	4311      	orrs	r1, r2
 801034a:	687a      	ldr	r2, [r7, #4]
 801034c:	6952      	ldr	r2, [r2, #20]
 801034e:	3a01      	subs	r2, #1
 8010350:	0612      	lsls	r2, r2, #24
 8010352:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8010356:	430a      	orrs	r2, r1
 8010358:	4924      	ldr	r1, [pc, #144]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 801035a:	4313      	orrs	r3, r2
 801035c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 801035e:	4b23      	ldr	r3, [pc, #140]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 8010360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010362:	f023 020c 	bic.w	r2, r3, #12
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	699b      	ldr	r3, [r3, #24]
 801036a:	4920      	ldr	r1, [pc, #128]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 801036c:	4313      	orrs	r3, r2
 801036e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8010370:	4b1e      	ldr	r3, [pc, #120]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 8010372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6a1b      	ldr	r3, [r3, #32]
 8010378:	491c      	ldr	r1, [pc, #112]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 801037a:	4313      	orrs	r3, r2
 801037c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 801037e:	4b1b      	ldr	r3, [pc, #108]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 8010380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010382:	4a1a      	ldr	r2, [pc, #104]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 8010384:	f023 0310 	bic.w	r3, r3, #16
 8010388:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801038a:	4b18      	ldr	r3, [pc, #96]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 801038c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801038e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010392:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	69d2      	ldr	r2, [r2, #28]
 801039a:	00d2      	lsls	r2, r2, #3
 801039c:	4913      	ldr	r1, [pc, #76]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 801039e:	4313      	orrs	r3, r2
 80103a0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80103a2:	4b12      	ldr	r3, [pc, #72]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 80103a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a6:	4a11      	ldr	r2, [pc, #68]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 80103a8:	f043 0310 	orr.w	r3, r3, #16
 80103ac:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80103ae:	4b0f      	ldr	r3, [pc, #60]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4a0e      	ldr	r2, [pc, #56]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 80103b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80103b8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80103ba:	f7f7 fa01 	bl	80077c0 <HAL_GetTick>
 80103be:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80103c0:	e008      	b.n	80103d4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80103c2:	f7f7 f9fd 	bl	80077c0 <HAL_GetTick>
 80103c6:	4602      	mov	r2, r0
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	2b02      	cmp	r3, #2
 80103ce:	d901      	bls.n	80103d4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80103d0:	2303      	movs	r3, #3
 80103d2:	e006      	b.n	80103e2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80103d4:	4b05      	ldr	r3, [pc, #20]	; (80103ec <RCCEx_PLL2_Config+0x128>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d0f0      	beq.n	80103c2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80103e0:	2300      	movs	r3, #0

}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	46020c00 	.word	0x46020c00
 80103f0:	80800000 	.word	0x80800000

080103f4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b084      	sub	sp, #16
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80103fc:	4b47      	ldr	r3, [pc, #284]	; (801051c <RCCEx_PLL3_Config+0x128>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4a46      	ldr	r2, [pc, #280]	; (801051c <RCCEx_PLL3_Config+0x128>)
 8010402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010406:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010408:	f7f7 f9da 	bl	80077c0 <HAL_GetTick>
 801040c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801040e:	e008      	b.n	8010422 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010410:	f7f7 f9d6 	bl	80077c0 <HAL_GetTick>
 8010414:	4602      	mov	r2, r0
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	1ad3      	subs	r3, r2, r3
 801041a:	2b02      	cmp	r3, #2
 801041c:	d901      	bls.n	8010422 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 801041e:	2303      	movs	r3, #3
 8010420:	e077      	b.n	8010512 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010422:	4b3e      	ldr	r3, [pc, #248]	; (801051c <RCCEx_PLL3_Config+0x128>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1f0      	bne.n	8010410 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 801042e:	4b3b      	ldr	r3, [pc, #236]	; (801051c <RCCEx_PLL3_Config+0x128>)
 8010430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010432:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010436:	f023 0303 	bic.w	r3, r3, #3
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	6811      	ldr	r1, [r2, #0]
 801043e:	687a      	ldr	r2, [r7, #4]
 8010440:	6852      	ldr	r2, [r2, #4]
 8010442:	3a01      	subs	r2, #1
 8010444:	0212      	lsls	r2, r2, #8
 8010446:	430a      	orrs	r2, r1
 8010448:	4934      	ldr	r1, [pc, #208]	; (801051c <RCCEx_PLL3_Config+0x128>)
 801044a:	4313      	orrs	r3, r2
 801044c:	630b      	str	r3, [r1, #48]	; 0x30
 801044e:	4b33      	ldr	r3, [pc, #204]	; (801051c <RCCEx_PLL3_Config+0x128>)
 8010450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010452:	4b33      	ldr	r3, [pc, #204]	; (8010520 <RCCEx_PLL3_Config+0x12c>)
 8010454:	4013      	ands	r3, r2
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	6892      	ldr	r2, [r2, #8]
 801045a:	3a01      	subs	r2, #1
 801045c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	68d2      	ldr	r2, [r2, #12]
 8010464:	3a01      	subs	r2, #1
 8010466:	0252      	lsls	r2, r2, #9
 8010468:	b292      	uxth	r2, r2
 801046a:	4311      	orrs	r1, r2
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	6912      	ldr	r2, [r2, #16]
 8010470:	3a01      	subs	r2, #1
 8010472:	0412      	lsls	r2, r2, #16
 8010474:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8010478:	4311      	orrs	r1, r2
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	6952      	ldr	r2, [r2, #20]
 801047e:	3a01      	subs	r2, #1
 8010480:	0612      	lsls	r2, r2, #24
 8010482:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8010486:	430a      	orrs	r2, r1
 8010488:	4924      	ldr	r1, [pc, #144]	; (801051c <RCCEx_PLL3_Config+0x128>)
 801048a:	4313      	orrs	r3, r2
 801048c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 801048e:	4b23      	ldr	r3, [pc, #140]	; (801051c <RCCEx_PLL3_Config+0x128>)
 8010490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010492:	f023 020c 	bic.w	r2, r3, #12
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	699b      	ldr	r3, [r3, #24]
 801049a:	4920      	ldr	r1, [pc, #128]	; (801051c <RCCEx_PLL3_Config+0x128>)
 801049c:	4313      	orrs	r3, r2
 801049e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80104a0:	4b1e      	ldr	r3, [pc, #120]	; (801051c <RCCEx_PLL3_Config+0x128>)
 80104a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6a1b      	ldr	r3, [r3, #32]
 80104a8:	491c      	ldr	r1, [pc, #112]	; (801051c <RCCEx_PLL3_Config+0x128>)
 80104aa:	4313      	orrs	r3, r2
 80104ac:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80104ae:	4b1b      	ldr	r3, [pc, #108]	; (801051c <RCCEx_PLL3_Config+0x128>)
 80104b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104b2:	4a1a      	ldr	r2, [pc, #104]	; (801051c <RCCEx_PLL3_Config+0x128>)
 80104b4:	f023 0310 	bic.w	r3, r3, #16
 80104b8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80104ba:	4b18      	ldr	r3, [pc, #96]	; (801051c <RCCEx_PLL3_Config+0x128>)
 80104bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80104c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80104c6:	687a      	ldr	r2, [r7, #4]
 80104c8:	69d2      	ldr	r2, [r2, #28]
 80104ca:	00d2      	lsls	r2, r2, #3
 80104cc:	4913      	ldr	r1, [pc, #76]	; (801051c <RCCEx_PLL3_Config+0x128>)
 80104ce:	4313      	orrs	r3, r2
 80104d0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80104d2:	4b12      	ldr	r3, [pc, #72]	; (801051c <RCCEx_PLL3_Config+0x128>)
 80104d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104d6:	4a11      	ldr	r2, [pc, #68]	; (801051c <RCCEx_PLL3_Config+0x128>)
 80104d8:	f043 0310 	orr.w	r3, r3, #16
 80104dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80104de:	4b0f      	ldr	r3, [pc, #60]	; (801051c <RCCEx_PLL3_Config+0x128>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4a0e      	ldr	r2, [pc, #56]	; (801051c <RCCEx_PLL3_Config+0x128>)
 80104e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104e8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80104ea:	f7f7 f969 	bl	80077c0 <HAL_GetTick>
 80104ee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80104f0:	e008      	b.n	8010504 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80104f2:	f7f7 f965 	bl	80077c0 <HAL_GetTick>
 80104f6:	4602      	mov	r2, r0
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	1ad3      	subs	r3, r2, r3
 80104fc:	2b02      	cmp	r3, #2
 80104fe:	d901      	bls.n	8010504 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8010500:	2303      	movs	r3, #3
 8010502:	e006      	b.n	8010512 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010504:	4b05      	ldr	r3, [pc, #20]	; (801051c <RCCEx_PLL3_Config+0x128>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801050c:	2b00      	cmp	r3, #0
 801050e:	d0f0      	beq.n	80104f2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8010510:	2300      	movs	r3, #0
}
 8010512:	4618      	mov	r0, r3
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	46020c00 	.word	0x46020c00
 8010520:	80800000 	.word	0x80800000

08010524 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801052c:	2301      	movs	r3, #1
 801052e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d068      	beq.n	8010608 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801053c:	b2db      	uxtb	r3, r3
 801053e:	2b00      	cmp	r3, #0
 8010540:	d106      	bne.n	8010550 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2200      	movs	r2, #0
 8010546:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f7f2 fd12 	bl	8002f74 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2202      	movs	r2, #2
 8010554:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010558:	4b2e      	ldr	r3, [pc, #184]	; (8010614 <HAL_RTC_Init+0xf0>)
 801055a:	22ca      	movs	r2, #202	; 0xca
 801055c:	625a      	str	r2, [r3, #36]	; 0x24
 801055e:	4b2d      	ldr	r3, [pc, #180]	; (8010614 <HAL_RTC_Init+0xf0>)
 8010560:	2253      	movs	r2, #83	; 0x53
 8010562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 f87d 	bl	8010664 <RTC_EnterInitMode>
 801056a:	4603      	mov	r3, r0
 801056c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 801056e:	7bfb      	ldrb	r3, [r7, #15]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d13f      	bne.n	80105f4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8010574:	4b27      	ldr	r3, [pc, #156]	; (8010614 <HAL_RTC_Init+0xf0>)
 8010576:	699b      	ldr	r3, [r3, #24]
 8010578:	4a26      	ldr	r2, [pc, #152]	; (8010614 <HAL_RTC_Init+0xf0>)
 801057a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 801057e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010582:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8010584:	4b23      	ldr	r3, [pc, #140]	; (8010614 <HAL_RTC_Init+0xf0>)
 8010586:	699a      	ldr	r2, [r3, #24]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6859      	ldr	r1, [r3, #4]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	691b      	ldr	r3, [r3, #16]
 8010590:	4319      	orrs	r1, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	699b      	ldr	r3, [r3, #24]
 8010596:	430b      	orrs	r3, r1
 8010598:	491e      	ldr	r1, [pc, #120]	; (8010614 <HAL_RTC_Init+0xf0>)
 801059a:	4313      	orrs	r3, r2
 801059c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	68da      	ldr	r2, [r3, #12]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	041b      	lsls	r3, r3, #16
 80105a8:	491a      	ldr	r1, [pc, #104]	; (8010614 <HAL_RTC_Init+0xf0>)
 80105aa:	4313      	orrs	r3, r2
 80105ac:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80105ae:	4b19      	ldr	r3, [pc, #100]	; (8010614 <HAL_RTC_Init+0xf0>)
 80105b0:	68db      	ldr	r3, [r3, #12]
 80105b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105be:	430b      	orrs	r3, r1
 80105c0:	4914      	ldr	r1, [pc, #80]	; (8010614 <HAL_RTC_Init+0xf0>)
 80105c2:	4313      	orrs	r3, r2
 80105c4:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f000 f880 	bl	80106cc <RTC_ExitInitMode>
 80105cc:	4603      	mov	r3, r0
 80105ce:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80105d0:	7bfb      	ldrb	r3, [r7, #15]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d10e      	bne.n	80105f4 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80105d6:	4b0f      	ldr	r3, [pc, #60]	; (8010614 <HAL_RTC_Init+0xf0>)
 80105d8:	699b      	ldr	r3, [r3, #24]
 80105da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6a19      	ldr	r1, [r3, #32]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	69db      	ldr	r3, [r3, #28]
 80105e6:	4319      	orrs	r1, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	695b      	ldr	r3, [r3, #20]
 80105ec:	430b      	orrs	r3, r1
 80105ee:	4909      	ldr	r1, [pc, #36]	; (8010614 <HAL_RTC_Init+0xf0>)
 80105f0:	4313      	orrs	r3, r2
 80105f2:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80105f4:	4b07      	ldr	r3, [pc, #28]	; (8010614 <HAL_RTC_Init+0xf0>)
 80105f6:	22ff      	movs	r2, #255	; 0xff
 80105f8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80105fa:	7bfb      	ldrb	r3, [r7, #15]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d103      	bne.n	8010608 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2201      	movs	r2, #1
 8010604:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8010608:	7bfb      	ldrb	r3, [r7, #15]
}
 801060a:	4618      	mov	r0, r3
 801060c:	3710      	adds	r7, #16
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	46007800 	.word	0x46007800

08010618 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8010620:	4b0f      	ldr	r3, [pc, #60]	; (8010660 <HAL_RTC_WaitForSynchro+0x48>)
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	4a0e      	ldr	r2, [pc, #56]	; (8010660 <HAL_RTC_WaitForSynchro+0x48>)
 8010626:	f023 0320 	bic.w	r3, r3, #32
 801062a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 801062c:	f7f7 f8c8 	bl	80077c0 <HAL_GetTick>
 8010630:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010632:	e009      	b.n	8010648 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010634:	f7f7 f8c4 	bl	80077c0 <HAL_GetTick>
 8010638:	4602      	mov	r2, r0
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	1ad3      	subs	r3, r2, r3
 801063e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010642:	d901      	bls.n	8010648 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8010644:	2303      	movs	r3, #3
 8010646:	e006      	b.n	8010656 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010648:	4b05      	ldr	r3, [pc, #20]	; (8010660 <HAL_RTC_WaitForSynchro+0x48>)
 801064a:	68db      	ldr	r3, [r3, #12]
 801064c:	f003 0320 	and.w	r3, r3, #32
 8010650:	2b00      	cmp	r3, #0
 8010652:	d0ef      	beq.n	8010634 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	4618      	mov	r0, r3
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	46007800 	.word	0x46007800

08010664 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b084      	sub	sp, #16
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801066c:	2300      	movs	r3, #0
 801066e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8010670:	4b15      	ldr	r3, [pc, #84]	; (80106c8 <RTC_EnterInitMode+0x64>)
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010678:	2b00      	cmp	r3, #0
 801067a:	d120      	bne.n	80106be <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 801067c:	4b12      	ldr	r3, [pc, #72]	; (80106c8 <RTC_EnterInitMode+0x64>)
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	4a11      	ldr	r2, [pc, #68]	; (80106c8 <RTC_EnterInitMode+0x64>)
 8010682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010686:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8010688:	f7f7 f89a 	bl	80077c0 <HAL_GetTick>
 801068c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801068e:	e00d      	b.n	80106ac <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010690:	f7f7 f896 	bl	80077c0 <HAL_GetTick>
 8010694:	4602      	mov	r2, r0
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	1ad3      	subs	r3, r2, r3
 801069a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801069e:	d905      	bls.n	80106ac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80106a0:	2303      	movs	r3, #3
 80106a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2203      	movs	r2, #3
 80106a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80106ac:	4b06      	ldr	r3, [pc, #24]	; (80106c8 <RTC_EnterInitMode+0x64>)
 80106ae:	68db      	ldr	r3, [r3, #12]
 80106b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d102      	bne.n	80106be <RTC_EnterInitMode+0x5a>
 80106b8:	7bfb      	ldrb	r3, [r7, #15]
 80106ba:	2b03      	cmp	r3, #3
 80106bc:	d1e8      	bne.n	8010690 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80106be:	7bfb      	ldrb	r3, [r7, #15]
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3710      	adds	r7, #16
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	46007800 	.word	0x46007800

080106cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80106d4:	2300      	movs	r3, #0
 80106d6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80106d8:	4b1a      	ldr	r3, [pc, #104]	; (8010744 <RTC_ExitInitMode+0x78>)
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	4a19      	ldr	r2, [pc, #100]	; (8010744 <RTC_ExitInitMode+0x78>)
 80106de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106e2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80106e4:	4b17      	ldr	r3, [pc, #92]	; (8010744 <RTC_ExitInitMode+0x78>)
 80106e6:	699b      	ldr	r3, [r3, #24]
 80106e8:	f003 0320 	and.w	r3, r3, #32
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d10c      	bne.n	801070a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f7ff ff91 	bl	8010618 <HAL_RTC_WaitForSynchro>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d01e      	beq.n	801073a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2203      	movs	r2, #3
 8010700:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8010704:	2303      	movs	r3, #3
 8010706:	73fb      	strb	r3, [r7, #15]
 8010708:	e017      	b.n	801073a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801070a:	4b0e      	ldr	r3, [pc, #56]	; (8010744 <RTC_ExitInitMode+0x78>)
 801070c:	699b      	ldr	r3, [r3, #24]
 801070e:	4a0d      	ldr	r2, [pc, #52]	; (8010744 <RTC_ExitInitMode+0x78>)
 8010710:	f023 0320 	bic.w	r3, r3, #32
 8010714:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f7ff ff7e 	bl	8010618 <HAL_RTC_WaitForSynchro>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	d005      	beq.n	801072e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2203      	movs	r2, #3
 8010726:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 801072a:	2303      	movs	r3, #3
 801072c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801072e:	4b05      	ldr	r3, [pc, #20]	; (8010744 <RTC_ExitInitMode+0x78>)
 8010730:	699b      	ldr	r3, [r3, #24]
 8010732:	4a04      	ldr	r2, [pc, #16]	; (8010744 <RTC_ExitInitMode+0x78>)
 8010734:	f043 0320 	orr.w	r3, r3, #32
 8010738:	6193      	str	r3, [r2, #24]
  }
  return status;
 801073a:	7bfb      	ldrb	r3, [r7, #15]
}
 801073c:	4618      	mov	r0, r3
 801073e:	3710      	adds	r7, #16
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	46007800 	.word	0x46007800

08010748 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 8010748:	b480      	push	{r7}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	6039      	str	r1, [r7, #0]
               || ((sTamper->Filter == RTC_TAMPERFILTER_DISABLE)  && \
                   ((sTamper->Trigger == RTC_TAMPERTRIGGER_RISINGEDGE) || \
                    (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))));

  /* Configuration register 2 */
  tmpreg = READ_REG(TAMP->CR2);
 8010752:	4b35      	ldr	r3, [pc, #212]	; (8010828 <HAL_RTCEx_SetTamper+0xe0>)
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	60fb      	str	r3, [r7, #12]
  tmpreg &= ~((sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos) | (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos) | \
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	061a      	lsls	r2, r3, #24
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	041b      	lsls	r3, r3, #16
 8010764:	431a      	orrs	r2, r3
              (sTamper->Tamper << TAMP_CR2_TAMP1NOERASE_Pos));
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	681b      	ldr	r3, [r3, #0]
  tmpreg &= ~((sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos) | (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos) | \
 801076a:	4313      	orrs	r3, r2
 801076c:	43db      	mvns	r3, r3
 801076e:	68fa      	ldr	r2, [r7, #12]
 8010770:	4013      	ands	r3, r2
 8010772:	60fb      	str	r3, [r7, #12]

  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	2b03      	cmp	r3, #3
 801077a:	d003      	beq.n	8010784 <HAL_RTCEx_SetTamper+0x3c>
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	685b      	ldr	r3, [r3, #4]
 8010780:	2b01      	cmp	r3, #1
 8010782:	d105      	bne.n	8010790 <HAL_RTCEx_SetTamper+0x48>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos);
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	061b      	lsls	r3, r3, #24
 801078a:	68fa      	ldr	r2, [r7, #12]
 801078c:	4313      	orrs	r3, r2
 801078e:	60fb      	str	r3, [r7, #12]
  }

  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d005      	beq.n	80107a4 <HAL_RTCEx_SetTamper+0x5c>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos);
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	041b      	lsls	r3, r3, #16
 801079e:	68fa      	ldr	r2, [r7, #12]
 80107a0:	4313      	orrs	r3, r2
 80107a2:	60fb      	str	r3, [r7, #12]
  }

  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d004      	beq.n	80107b6 <HAL_RTCEx_SetTamper+0x6e>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1NOERASE_Pos);
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	4313      	orrs	r3, r2
 80107b4:	60fb      	str	r3, [r7, #12]
  }
  WRITE_REG(TAMP->CR2, tmpreg);
 80107b6:	4a1c      	ldr	r2, [pc, #112]	; (8010828 <HAL_RTCEx_SetTamper+0xe0>)
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6053      	str	r3, [r2, #4]

  /* Filter control register */
  WRITE_REG(TAMP->FLTCR, sTamper->Filter | sTamper->SamplingFrequency | sTamper->PrechargeDuration | \
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	691a      	ldr	r2, [r3, #16]
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	695b      	ldr	r3, [r3, #20]
 80107c4:	431a      	orrs	r2, r3
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	699b      	ldr	r3, [r3, #24]
 80107ca:	431a      	orrs	r2, r3
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	69db      	ldr	r3, [r3, #28]
 80107d0:	4915      	ldr	r1, [pc, #84]	; (8010828 <HAL_RTCEx_SetTamper+0xe0>)
 80107d2:	4313      	orrs	r3, r2
 80107d4:	60cb      	str	r3, [r1, #12]
            sTamper->TamperPullUp);

  /* Timestamp on tamper */
  if (READ_BIT(RTC->CR, RTC_CR_TAMPTS) != sTamper->TimeStampOnTamperDetection)
 80107d6:	4b15      	ldr	r3, [pc, #84]	; (801082c <HAL_RTCEx_SetTamper+0xe4>)
 80107d8:	699b      	ldr	r3, [r3, #24]
 80107da:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	6a1b      	ldr	r3, [r3, #32]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d011      	beq.n	801080a <HAL_RTCEx_SetTamper+0xc2>
  {
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80107e6:	4b11      	ldr	r3, [pc, #68]	; (801082c <HAL_RTCEx_SetTamper+0xe4>)
 80107e8:	22ca      	movs	r2, #202	; 0xca
 80107ea:	625a      	str	r2, [r3, #36]	; 0x24
 80107ec:	4b0f      	ldr	r3, [pc, #60]	; (801082c <HAL_RTCEx_SetTamper+0xe4>)
 80107ee:	2253      	movs	r2, #83	; 0x53
 80107f0:	625a      	str	r2, [r3, #36]	; 0x24
    MODIFY_REG(RTC->CR, RTC_CR_TAMPTS, sTamper->TimeStampOnTamperDetection);
 80107f2:	4b0e      	ldr	r3, [pc, #56]	; (801082c <HAL_RTCEx_SetTamper+0xe4>)
 80107f4:	699b      	ldr	r3, [r3, #24]
 80107f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	6a1b      	ldr	r3, [r3, #32]
 80107fe:	490b      	ldr	r1, [pc, #44]	; (801082c <HAL_RTCEx_SetTamper+0xe4>)
 8010800:	4313      	orrs	r3, r2
 8010802:	618b      	str	r3, [r1, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010804:	4b09      	ldr	r3, [pc, #36]	; (801082c <HAL_RTCEx_SetTamper+0xe4>)
 8010806:	22ff      	movs	r2, #255	; 0xff
 8010808:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Control register 1 */
  SET_BIT(TAMP->CR1, sTamper->Tamper);
 801080a:	4b07      	ldr	r3, [pc, #28]	; (8010828 <HAL_RTCEx_SetTamper+0xe0>)
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	4905      	ldr	r1, [pc, #20]	; (8010828 <HAL_RTCEx_SetTamper+0xe0>)
 8010814:	4313      	orrs	r3, r2
 8010816:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010818:	2300      	movs	r3, #0
}
 801081a:	4618      	mov	r0, r3
 801081c:	3714      	adds	r7, #20
 801081e:	46bd      	mov	sp, r7
 8010820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010824:	4770      	bx	lr
 8010826:	bf00      	nop
 8010828:	46007c00 	.word	0x46007c00
 801082c:	46007800 	.word	0x46007800

08010830 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8010830:	b480      	push	{r7}
 8010832:	b083      	sub	sp, #12
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	681a      	ldr	r2, [r3, #0]
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	4910      	ldr	r1, [pc, #64]	; (8010884 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8010844:	4313      	orrs	r3, r2
 8010846:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	689a      	ldr	r2, [r3, #8]
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	68db      	ldr	r3, [r3, #12]
 8010850:	431a      	orrs	r2, r3
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	699b      	ldr	r3, [r3, #24]
 8010856:	490c      	ldr	r1, [pc, #48]	; (8010888 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8010858:	4313      	orrs	r3, r2
 801085a:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 801085c:	4b0a      	ldr	r3, [pc, #40]	; (8010888 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 801085e:	6a1b      	ldr	r3, [r3, #32]
 8010860:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	6919      	ldr	r1, [r3, #16]
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	695b      	ldr	r3, [r3, #20]
 801086c:	041b      	lsls	r3, r3, #16
 801086e:	430b      	orrs	r3, r1
 8010870:	4905      	ldr	r1, [pc, #20]	; (8010888 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8010872:	4313      	orrs	r3, r2
 8010874:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8010876:	2300      	movs	r3, #0
}
 8010878:	4618      	mov	r0, r3
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr
 8010884:	46007800 	.word	0x46007800
 8010888:	46007c00 	.word	0x46007c00

0801088c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b08a      	sub	sp, #40	; 0x28
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d101      	bne.n	801089e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 801089a:	2301      	movs	r3, #1
 801089c:	e1de      	b.n	8010c5c <HAL_SAI_Init+0x3d0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d10e      	bne.n	80108c6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a89      	ldr	r2, [pc, #548]	; (8010ad4 <HAL_SAI_Init+0x248>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d107      	bne.n	80108c2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d103      	bne.n	80108c2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d001      	beq.n	80108c6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80108c2:	2301      	movs	r3, #1
 80108c4:	e1ca      	b.n	8010c5c <HAL_SAI_Init+0x3d0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d106      	bne.n	80108e0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2200      	movs	r2, #0
 80108d6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f7f2 fffe 	bl	80038dc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f000 f9c7 	bl	8010c74 <SAI_Disable>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d001      	beq.n	80108f0 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80108ec:	2301      	movs	r3, #1
 80108ee:	e1b5      	b.n	8010c5c <HAL_SAI_Init+0x3d0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2202      	movs	r2, #2
 80108f4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	68db      	ldr	r3, [r3, #12]
 80108fc:	2b02      	cmp	r3, #2
 80108fe:	d00c      	beq.n	801091a <HAL_SAI_Init+0x8e>
 8010900:	2b02      	cmp	r3, #2
 8010902:	d80d      	bhi.n	8010920 <HAL_SAI_Init+0x94>
 8010904:	2b00      	cmp	r3, #0
 8010906:	d002      	beq.n	801090e <HAL_SAI_Init+0x82>
 8010908:	2b01      	cmp	r3, #1
 801090a:	d003      	beq.n	8010914 <HAL_SAI_Init+0x88>
 801090c:	e008      	b.n	8010920 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 801090e:	2300      	movs	r3, #0
 8010910:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8010912:	e008      	b.n	8010926 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8010914:	2310      	movs	r3, #16
 8010916:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8010918:	e005      	b.n	8010926 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 801091a:	2320      	movs	r3, #32
 801091c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801091e:	e002      	b.n	8010926 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8010920:	2300      	movs	r3, #0
 8010922:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8010924:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	2b03      	cmp	r3, #3
 801092c:	d81d      	bhi.n	801096a <HAL_SAI_Init+0xde>
 801092e:	a201      	add	r2, pc, #4	; (adr r2, 8010934 <HAL_SAI_Init+0xa8>)
 8010930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010934:	08010945 	.word	0x08010945
 8010938:	0801094b 	.word	0x0801094b
 801093c:	08010953 	.word	0x08010953
 8010940:	0801095b 	.word	0x0801095b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8010944:	2300      	movs	r3, #0
 8010946:	61fb      	str	r3, [r7, #28]
      break;
 8010948:	e012      	b.n	8010970 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 801094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801094e:	61fb      	str	r3, [r7, #28]
      break;
 8010950:	e00e      	b.n	8010970 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8010952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010956:	61fb      	str	r3, [r7, #28]
      break;
 8010958:	e00a      	b.n	8010970 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801095a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801095e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010962:	f043 0301 	orr.w	r3, r3, #1
 8010966:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8010968:	e002      	b.n	8010970 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 801096a:	2300      	movs	r3, #0
 801096c:	61fb      	str	r3, [r7, #28]
      break;
 801096e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	4a57      	ldr	r2, [pc, #348]	; (8010ad4 <HAL_SAI_Init+0x248>)
 8010976:	4293      	cmp	r3, r2
 8010978:	d004      	beq.n	8010984 <HAL_SAI_Init+0xf8>
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4a56      	ldr	r2, [pc, #344]	; (8010ad8 <HAL_SAI_Init+0x24c>)
 8010980:	4293      	cmp	r3, r2
 8010982:	d103      	bne.n	801098c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8010984:	4a55      	ldr	r2, [pc, #340]	; (8010adc <HAL_SAI_Init+0x250>)
 8010986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010988:	6013      	str	r3, [r2, #0]
 801098a:	e002      	b.n	8010992 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 801098c:	4a54      	ldr	r2, [pc, #336]	; (8010ae0 <HAL_SAI_Init+0x254>)
 801098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010990:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6a1b      	ldr	r3, [r3, #32]
 8010996:	2b00      	cmp	r3, #0
 8010998:	f000 8083 	beq.w	8010aa2 <HAL_SAI_Init+0x216>
  {
    uint32_t freq = 0;
 801099c:	2300      	movs	r3, #0
 801099e:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4a4b      	ldr	r2, [pc, #300]	; (8010ad4 <HAL_SAI_Init+0x248>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d004      	beq.n	80109b4 <HAL_SAI_Init+0x128>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4a4a      	ldr	r2, [pc, #296]	; (8010ad8 <HAL_SAI_Init+0x24c>)
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d106      	bne.n	80109c2 <HAL_SAI_Init+0x136>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80109b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80109b8:	f04f 0100 	mov.w	r1, #0
 80109bc:	f7fe fb18 	bl	800eff0 <HAL_RCCEx_GetPeriphCLKFreq>
 80109c0:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4a47      	ldr	r2, [pc, #284]	; (8010ae4 <HAL_SAI_Init+0x258>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d004      	beq.n	80109d6 <HAL_SAI_Init+0x14a>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a45      	ldr	r2, [pc, #276]	; (8010ae8 <HAL_SAI_Init+0x25c>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d106      	bne.n	80109e4 <HAL_SAI_Init+0x158>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80109d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80109da:	f04f 0100 	mov.w	r1, #0
 80109de:	f7fe fb07 	bl	800eff0 <HAL_RCCEx_GetPeriphCLKFreq>
 80109e2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	699b      	ldr	r3, [r3, #24]
 80109e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80109ec:	d120      	bne.n	8010a30 <HAL_SAI_Init+0x1a4>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109f2:	2b04      	cmp	r3, #4
 80109f4:	d102      	bne.n	80109fc <HAL_SAI_Init+0x170>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80109f6:	2340      	movs	r3, #64	; 0x40
 80109f8:	613b      	str	r3, [r7, #16]
 80109fa:	e00a      	b.n	8010a12 <HAL_SAI_Init+0x186>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a00:	2b08      	cmp	r3, #8
 8010a02:	d103      	bne.n	8010a0c <HAL_SAI_Init+0x180>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8010a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a08:	613b      	str	r3, [r7, #16]
 8010a0a:	e002      	b.n	8010a12 <HAL_SAI_Init+0x186>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a10:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8010a12:	69ba      	ldr	r2, [r7, #24]
 8010a14:	4613      	mov	r3, r2
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	4413      	add	r3, r2
 8010a1a:	005b      	lsls	r3, r3, #1
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6a1b      	ldr	r3, [r3, #32]
 8010a22:	693a      	ldr	r2, [r7, #16]
 8010a24:	fb02 f303 	mul.w	r3, r2, r3
 8010a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8010a2c:	617b      	str	r3, [r7, #20]
 8010a2e:	e017      	b.n	8010a60 <HAL_SAI_Init+0x1d4>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010a38:	d101      	bne.n	8010a3e <HAL_SAI_Init+0x1b2>
 8010a3a:	2302      	movs	r3, #2
 8010a3c:	e000      	b.n	8010a40 <HAL_SAI_Init+0x1b4>
 8010a3e:	2301      	movs	r3, #1
 8010a40:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8010a42:	69ba      	ldr	r2, [r7, #24]
 8010a44:	4613      	mov	r3, r2
 8010a46:	009b      	lsls	r3, r3, #2
 8010a48:	4413      	add	r3, r2
 8010a4a:	005b      	lsls	r3, r3, #1
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6a1b      	ldr	r3, [r3, #32]
 8010a52:	68fa      	ldr	r2, [r7, #12]
 8010a54:	fb02 f303 	mul.w	r3, r2, r3
 8010a58:	021b      	lsls	r3, r3, #8
 8010a5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8010a5e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	4a22      	ldr	r2, [pc, #136]	; (8010aec <HAL_SAI_Init+0x260>)
 8010a64:	fba2 2303 	umull	r2, r3, r2, r3
 8010a68:	08da      	lsrs	r2, r3, #3
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8010a6e:	6979      	ldr	r1, [r7, #20]
 8010a70:	4b1e      	ldr	r3, [pc, #120]	; (8010aec <HAL_SAI_Init+0x260>)
 8010a72:	fba3 2301 	umull	r2, r3, r3, r1
 8010a76:	08da      	lsrs	r2, r3, #3
 8010a78:	4613      	mov	r3, r2
 8010a7a:	009b      	lsls	r3, r3, #2
 8010a7c:	4413      	add	r3, r2
 8010a7e:	005b      	lsls	r3, r3, #1
 8010a80:	1aca      	subs	r2, r1, r3
 8010a82:	2a08      	cmp	r2, #8
 8010a84:	d904      	bls.n	8010a90 <HAL_SAI_Init+0x204>
    {
      hsai->Init.Mckdiv += 1U;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a8a:	1c5a      	adds	r2, r3, #1
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a94:	2b04      	cmp	r3, #4
 8010a96:	d104      	bne.n	8010aa2 <HAL_SAI_Init+0x216>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a9c:	085a      	lsrs	r2, r3, #1
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	685b      	ldr	r3, [r3, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d003      	beq.n	8010ab2 <HAL_SAI_Init+0x226>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	2b02      	cmp	r3, #2
 8010ab0:	d109      	bne.n	8010ac6 <HAL_SAI_Init+0x23a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ab6:	2b01      	cmp	r3, #1
 8010ab8:	d101      	bne.n	8010abe <HAL_SAI_Init+0x232>
 8010aba:	2300      	movs	r3, #0
 8010abc:	e001      	b.n	8010ac2 <HAL_SAI_Init+0x236>
 8010abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ac2:	623b      	str	r3, [r7, #32]
 8010ac4:	e016      	b.n	8010af4 <HAL_SAI_Init+0x268>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d110      	bne.n	8010af0 <HAL_SAI_Init+0x264>
 8010ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ad2:	e00e      	b.n	8010af2 <HAL_SAI_Init+0x266>
 8010ad4:	40015404 	.word	0x40015404
 8010ad8:	40015424 	.word	0x40015424
 8010adc:	40015400 	.word	0x40015400
 8010ae0:	40015800 	.word	0x40015800
 8010ae4:	40015804 	.word	0x40015804
 8010ae8:	40015824 	.word	0x40015824
 8010aec:	cccccccd 	.word	0xcccccccd
 8010af0:	2300      	movs	r3, #0
 8010af2:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	6819      	ldr	r1, [r3, #0]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	4b59      	ldr	r3, [pc, #356]	; (8010c64 <HAL_SAI_Init+0x3d8>)
 8010b00:	400b      	ands	r3, r1
 8010b02:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	6819      	ldr	r1, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	685a      	ldr	r2, [r3, #4]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b12:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010b18:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b1e:	431a      	orrs	r2, r3
 8010b20:	6a3b      	ldr	r3, [r7, #32]
 8010b22:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8010b2c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	695b      	ldr	r3, [r3, #20]
 8010b32:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010b38:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b3e:	051b      	lsls	r3, r3, #20
 8010b40:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8010b46:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	691b      	ldr	r3, [r3, #16]
 8010b4c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	430a      	orrs	r2, r1
 8010b54:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	685b      	ldr	r3, [r3, #4]
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	6812      	ldr	r2, [r2, #0]
 8010b60:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8010b64:	f023 030f 	bic.w	r3, r3, #15
 8010b68:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	6859      	ldr	r1, [r3, #4]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	69da      	ldr	r2, [r3, #28]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b78:	431a      	orrs	r2, r3
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b7e:	431a      	orrs	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	430a      	orrs	r2, r1
 8010b86:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	6899      	ldr	r1, [r3, #8]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681a      	ldr	r2, [r3, #0]
 8010b92:	4b35      	ldr	r3, [pc, #212]	; (8010c68 <HAL_SAI_Init+0x3dc>)
 8010b94:	400b      	ands	r3, r1
 8010b96:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	6899      	ldr	r1, [r3, #8]
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ba2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010ba8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8010bae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8010bb4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bba:	3b01      	subs	r3, #1
 8010bbc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8010bbe:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	430a      	orrs	r2, r1
 8010bc6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	68d9      	ldr	r1, [r3, #12]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681a      	ldr	r2, [r3, #0]
 8010bd2:	f24f 0320 	movw	r3, #61472	; 0xf020
 8010bd6:	400b      	ands	r3, r1
 8010bd8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	68d9      	ldr	r1, [r3, #12]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bee:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8010bf0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bf6:	3b01      	subs	r3, #1
 8010bf8:	021b      	lsls	r3, r3, #8
 8010bfa:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	430a      	orrs	r2, r1
 8010c02:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	4a18      	ldr	r2, [pc, #96]	; (8010c6c <HAL_SAI_Init+0x3e0>)
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d119      	bne.n	8010c42 <HAL_SAI_Init+0x3b6>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8010c0e:	4b18      	ldr	r3, [pc, #96]	; (8010c70 <HAL_SAI_Init+0x3e4>)
 8010c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c12:	4a17      	ldr	r2, [pc, #92]	; (8010c70 <HAL_SAI_Init+0x3e4>)
 8010c14:	f023 0301 	bic.w	r3, r3, #1
 8010c18:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d10e      	bne.n	8010c42 <HAL_SAI_Init+0x3b6>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8010c30:	490f      	ldr	r1, [pc, #60]	; (8010c70 <HAL_SAI_Init+0x3e4>)
 8010c32:	4313      	orrs	r3, r2
 8010c34:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8010c36:	4b0e      	ldr	r3, [pc, #56]	; (8010c70 <HAL_SAI_Init+0x3e4>)
 8010c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c3a:	4a0d      	ldr	r2, [pc, #52]	; (8010c70 <HAL_SAI_Init+0x3e4>)
 8010c3c:	f043 0301 	orr.w	r3, r3, #1
 8010c40:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2200      	movs	r2, #0
 8010c46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2200      	movs	r2, #0
 8010c56:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8010c5a:	2300      	movs	r3, #0
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3728      	adds	r7, #40	; 0x28
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	f005c010 	.word	0xf005c010
 8010c68:	fff88000 	.word	0xfff88000
 8010c6c:	40015404 	.word	0x40015404
 8010c70:	40015400 	.word	0x40015400

08010c74 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b085      	sub	sp, #20
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8010c7c:	4b18      	ldr	r3, [pc, #96]	; (8010ce0 <SAI_Disable+0x6c>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	4a18      	ldr	r2, [pc, #96]	; (8010ce4 <SAI_Disable+0x70>)
 8010c82:	fba2 2303 	umull	r2, r3, r2, r3
 8010c86:	0b1b      	lsrs	r3, r3, #12
 8010c88:	009b      	lsls	r3, r3, #2
 8010c8a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	681a      	ldr	r2, [r3, #0]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010c9e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d10a      	bne.n	8010cbc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010cac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8010cb6:	2303      	movs	r3, #3
 8010cb8:	72fb      	strb	r3, [r7, #11]
      break;
 8010cba:	e009      	b.n	8010cd0 <SAI_Disable+0x5c>
    }
    count--;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	3b01      	subs	r3, #1
 8010cc0:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d1e7      	bne.n	8010ca0 <SAI_Disable+0x2c>

  return status;
 8010cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3714      	adds	r7, #20
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cdc:	4770      	bx	lr
 8010cde:	bf00      	nop
 8010ce0:	2000000c 	.word	0x2000000c
 8010ce4:	95cbec1b 	.word	0x95cbec1b

08010ce8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d101      	bne.n	8010cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	e0dd      	b.n	8010eb6 <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	4a70      	ldr	r2, [pc, #448]	; (8010ec0 <HAL_SPI_Init+0x1d8>)
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d004      	beq.n	8010d0e <HAL_SPI_Init+0x26>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	4a6e      	ldr	r2, [pc, #440]	; (8010ec4 <HAL_SPI_Init+0x1dc>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	e000      	b.n	8010d10 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8010d0e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2200      	movs	r2, #0
 8010d14:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4a69      	ldr	r2, [pc, #420]	; (8010ec0 <HAL_SPI_Init+0x1d8>)
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	d004      	beq.n	8010d2a <HAL_SPI_Init+0x42>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	4a67      	ldr	r2, [pc, #412]	; (8010ec4 <HAL_SPI_Init+0x1dc>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d105      	bne.n	8010d36 <HAL_SPI_Init+0x4e>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	2b0f      	cmp	r3, #15
 8010d30:	d901      	bls.n	8010d36 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8010d32:	2301      	movs	r3, #1
 8010d34:	e0bf      	b.n	8010eb6 <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f001 fa02 	bl	8012140 <SPI_GetPacketSize>
 8010d3c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	4a5f      	ldr	r2, [pc, #380]	; (8010ec0 <HAL_SPI_Init+0x1d8>)
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d004      	beq.n	8010d52 <HAL_SPI_Init+0x6a>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4a5d      	ldr	r2, [pc, #372]	; (8010ec4 <HAL_SPI_Init+0x1dc>)
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d102      	bne.n	8010d58 <HAL_SPI_Init+0x70>
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2b08      	cmp	r3, #8
 8010d56:	d816      	bhi.n	8010d86 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010d5c:	4a5a      	ldr	r2, [pc, #360]	; (8010ec8 <HAL_SPI_Init+0x1e0>)
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d00e      	beq.n	8010d80 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	4a59      	ldr	r2, [pc, #356]	; (8010ecc <HAL_SPI_Init+0x1e4>)
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d009      	beq.n	8010d80 <HAL_SPI_Init+0x98>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a57      	ldr	r2, [pc, #348]	; (8010ed0 <HAL_SPI_Init+0x1e8>)
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d004      	beq.n	8010d80 <HAL_SPI_Init+0x98>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	4a56      	ldr	r2, [pc, #344]	; (8010ed4 <HAL_SPI_Init+0x1ec>)
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	d104      	bne.n	8010d8a <HAL_SPI_Init+0xa2>
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2b10      	cmp	r3, #16
 8010d84:	d901      	bls.n	8010d8a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8010d86:	2301      	movs	r3, #1
 8010d88:	e095      	b.n	8010eb6 <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d106      	bne.n	8010da4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f7f2 f92c 	bl	8002ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2202      	movs	r2, #2
 8010da8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f022 0201 	bic.w	r2, r2, #1
 8010dba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	689b      	ldr	r3, [r3, #8]
 8010dc2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8010dc6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	699b      	ldr	r3, [r3, #24]
 8010dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010dd0:	d119      	bne.n	8010e06 <HAL_SPI_Init+0x11e>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010dda:	d103      	bne.n	8010de4 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d008      	beq.n	8010df6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d10c      	bne.n	8010e06 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010df4:	d107      	bne.n	8010e06 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	681a      	ldr	r2, [r3, #0]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010e04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	69da      	ldr	r2, [r3, #28]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e0e:	431a      	orrs	r2, r3
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	431a      	orrs	r2, r3
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e18:	ea42 0103 	orr.w	r1, r2, r3
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	68da      	ldr	r2, [r3, #12]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	430a      	orrs	r2, r1
 8010e26:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e30:	431a      	orrs	r2, r3
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e36:	431a      	orrs	r2, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	699b      	ldr	r3, [r3, #24]
 8010e3c:	431a      	orrs	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	691b      	ldr	r3, [r3, #16]
 8010e42:	431a      	orrs	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	695b      	ldr	r3, [r3, #20]
 8010e48:	431a      	orrs	r2, r3
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6a1b      	ldr	r3, [r3, #32]
 8010e4e:	431a      	orrs	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	431a      	orrs	r2, r3
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e5a:	431a      	orrs	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	689b      	ldr	r3, [r3, #8]
 8010e60:	431a      	orrs	r2, r3
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e66:	431a      	orrs	r2, r3
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e6c:	431a      	orrs	r2, r3
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e72:	ea42 0103 	orr.w	r1, r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	430a      	orrs	r2, r1
 8010e80:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d00a      	beq.n	8010ea4 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	430a      	orrs	r2, r1
 8010ea2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8010eb4:	2300      	movs	r3, #0
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3710      	adds	r7, #16
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	46002000 	.word	0x46002000
 8010ec4:	56002000 	.word	0x56002000
 8010ec8:	40013000 	.word	0x40013000
 8010ecc:	50013000 	.word	0x50013000
 8010ed0:	40003800 	.word	0x40003800
 8010ed4:	50003800 	.word	0x50003800

08010ed8 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d101      	bne.n	8010eea <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	e01b      	b.n	8010f22 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2202      	movs	r2, #2
 8010eee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	681a      	ldr	r2, [r3, #0]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f022 0201 	bic.w	r2, r2, #1
 8010f00:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f7f2 fac4 	bl	8003490 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State = HAL_SPI_STATE_RESET;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2200      	movs	r2, #0
 8010f14:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  return HAL_OK;
 8010f20:	2300      	movs	r3, #0
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3708      	adds	r7, #8
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
	...

08010f2c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b08a      	sub	sp, #40	; 0x28
 8010f30:	af02      	add	r7, sp, #8
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	603b      	str	r3, [r7, #0]
 8010f38:	4613      	mov	r3, r2
 8010f3a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	3320      	adds	r3, #32
 8010f42:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010f44:	2300      	movs	r3, #0
 8010f46:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8010f4e:	2b01      	cmp	r3, #1
 8010f50:	d101      	bne.n	8010f56 <HAL_SPI_Transmit+0x2a>
 8010f52:	2302      	movs	r3, #2
 8010f54:	e1f7      	b.n	8011346 <HAL_SPI_Transmit+0x41a>
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	2201      	movs	r2, #1
 8010f5a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010f5e:	f7f6 fc2f 	bl	80077c0 <HAL_GetTick>
 8010f62:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d007      	beq.n	8010f80 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8010f70:	2302      	movs	r3, #2
 8010f72:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2200      	movs	r2, #0
 8010f78:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8010f7c:	7efb      	ldrb	r3, [r7, #27]
 8010f7e:	e1e2      	b.n	8011346 <HAL_SPI_Transmit+0x41a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d002      	beq.n	8010f8c <HAL_SPI_Transmit+0x60>
 8010f86:	88fb      	ldrh	r3, [r7, #6]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d107      	bne.n	8010f9c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2200      	movs	r2, #0
 8010f94:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8010f98:	7efb      	ldrb	r3, [r7, #27]
 8010f9a:	e1d4      	b.n	8011346 <HAL_SPI_Transmit+0x41a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2203      	movs	r2, #3
 8010fa0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	68ba      	ldr	r2, [r7, #8]
 8010fb0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	88fa      	ldrh	r2, [r7, #6]
 8010fb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	88fa      	ldrh	r2, [r7, #6]
 8010fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	689b      	ldr	r3, [r3, #8]
 8010fe8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010fec:	d107      	bne.n	8010ffe <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	0c1b      	lsrs	r3, r3, #16
 8011006:	041b      	lsls	r3, r3, #16
 8011008:	88f9      	ldrh	r1, [r7, #6]
 801100a:	68fa      	ldr	r2, [r7, #12]
 801100c:	6812      	ldr	r2, [r2, #0]
 801100e:	430b      	orrs	r3, r1
 8011010:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	681a      	ldr	r2, [r3, #0]
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f042 0201 	orr.w	r2, r2, #1
 8011020:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	69db      	ldr	r3, [r3, #28]
 8011028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801102c:	2b00      	cmp	r3, #0
 801102e:	d10c      	bne.n	801104a <HAL_SPI_Transmit+0x11e>
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	685b      	ldr	r3, [r3, #4]
 8011034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011038:	d107      	bne.n	801104a <HAL_SPI_Transmit+0x11e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	68db      	ldr	r3, [r3, #12]
 801104e:	2b0f      	cmp	r3, #15
 8011050:	d95b      	bls.n	801110a <HAL_SPI_Transmit+0x1de>
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4a8f      	ldr	r2, [pc, #572]	; (8011294 <HAL_SPI_Transmit+0x368>)
 8011058:	4293      	cmp	r3, r2
 801105a:	d04f      	beq.n	80110fc <HAL_SPI_Transmit+0x1d0>
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4a8d      	ldr	r2, [pc, #564]	; (8011298 <HAL_SPI_Transmit+0x36c>)
 8011062:	4293      	cmp	r3, r2
 8011064:	d04a      	beq.n	80110fc <HAL_SPI_Transmit+0x1d0>
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	4a8c      	ldr	r2, [pc, #560]	; (801129c <HAL_SPI_Transmit+0x370>)
 801106c:	4293      	cmp	r3, r2
 801106e:	d045      	beq.n	80110fc <HAL_SPI_Transmit+0x1d0>
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	4a8a      	ldr	r2, [pc, #552]	; (80112a0 <HAL_SPI_Transmit+0x374>)
 8011076:	4293      	cmp	r3, r2
 8011078:	d147      	bne.n	801110a <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801107a:	e03f      	b.n	80110fc <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	695b      	ldr	r3, [r3, #20]
 8011082:	f003 0302 	and.w	r3, r3, #2
 8011086:	2b02      	cmp	r3, #2
 8011088:	d114      	bne.n	80110b4 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	6812      	ldr	r2, [r2, #0]
 8011094:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801109a:	1d1a      	adds	r2, r3, #4
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	3b01      	subs	r3, #1
 80110aa:	b29a      	uxth	r2, r3
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80110b2:	e023      	b.n	80110fc <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80110b4:	f7f6 fb84 	bl	80077c0 <HAL_GetTick>
 80110b8:	4602      	mov	r2, r0
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	1ad3      	subs	r3, r2, r3
 80110be:	683a      	ldr	r2, [r7, #0]
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d803      	bhi.n	80110cc <HAL_SPI_Transmit+0x1a0>
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ca:	d102      	bne.n	80110d2 <HAL_SPI_Transmit+0x1a6>
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d114      	bne.n	80110fc <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80110d2:	68f8      	ldr	r0, [r7, #12]
 80110d4:	f000 ff66 	bl	8011fa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2200      	movs	r2, #0
 80110dc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2201      	movs	r2, #1
 80110f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80110f8:	2303      	movs	r3, #3
 80110fa:	e124      	b.n	8011346 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011102:	b29b      	uxth	r3, r3
 8011104:	2b00      	cmp	r3, #0
 8011106:	d1b9      	bne.n	801107c <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8011108:	e0f7      	b.n	80112fa <HAL_SPI_Transmit+0x3ce>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	2b07      	cmp	r3, #7
 8011110:	f240 80ec 	bls.w	80112ec <HAL_SPI_Transmit+0x3c0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011114:	e05d      	b.n	80111d2 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	695b      	ldr	r3, [r3, #20]
 801111c:	f003 0302 	and.w	r3, r3, #2
 8011120:	2b02      	cmp	r3, #2
 8011122:	d132      	bne.n	801118a <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801112a:	b29b      	uxth	r3, r3
 801112c:	2b01      	cmp	r3, #1
 801112e:	d918      	bls.n	8011162 <HAL_SPI_Transmit+0x236>
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011134:	2b00      	cmp	r3, #0
 8011136:	d014      	beq.n	8011162 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	6812      	ldr	r2, [r2, #0]
 8011142:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011148:	1d1a      	adds	r2, r3, #4
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011154:	b29b      	uxth	r3, r3
 8011156:	3b02      	subs	r3, #2
 8011158:	b29a      	uxth	r2, r3
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011160:	e037      	b.n	80111d2 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011166:	881a      	ldrh	r2, [r3, #0]
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011170:	1c9a      	adds	r2, r3, #2
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801117c:	b29b      	uxth	r3, r3
 801117e:	3b01      	subs	r3, #1
 8011180:	b29a      	uxth	r2, r3
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011188:	e023      	b.n	80111d2 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801118a:	f7f6 fb19 	bl	80077c0 <HAL_GetTick>
 801118e:	4602      	mov	r2, r0
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	1ad3      	subs	r3, r2, r3
 8011194:	683a      	ldr	r2, [r7, #0]
 8011196:	429a      	cmp	r2, r3
 8011198:	d803      	bhi.n	80111a2 <HAL_SPI_Transmit+0x276>
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111a0:	d102      	bne.n	80111a8 <HAL_SPI_Transmit+0x27c>
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d114      	bne.n	80111d2 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80111a8:	68f8      	ldr	r0, [r7, #12]
 80111aa:	f000 fefb 	bl	8011fa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2200      	movs	r2, #0
 80111b2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2201      	movs	r2, #1
 80111ca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80111ce:	2303      	movs	r3, #3
 80111d0:	e0b9      	b.n	8011346 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80111d8:	b29b      	uxth	r3, r3
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d19b      	bne.n	8011116 <HAL_SPI_Transmit+0x1ea>
 80111de:	e08c      	b.n	80112fa <HAL_SPI_Transmit+0x3ce>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	695b      	ldr	r3, [r3, #20]
 80111e6:	f003 0302 	and.w	r3, r3, #2
 80111ea:	2b02      	cmp	r3, #2
 80111ec:	d15a      	bne.n	80112a4 <HAL_SPI_Transmit+0x378>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	2b03      	cmp	r3, #3
 80111f8:	d918      	bls.n	801122c <HAL_SPI_Transmit+0x300>
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111fe:	2b40      	cmp	r3, #64	; 0x40
 8011200:	d914      	bls.n	801122c <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	6812      	ldr	r2, [r2, #0]
 801120c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011212:	1d1a      	adds	r2, r3, #4
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801121e:	b29b      	uxth	r3, r3
 8011220:	3b04      	subs	r3, #4
 8011222:	b29a      	uxth	r2, r3
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801122a:	e05f      	b.n	80112ec <HAL_SPI_Transmit+0x3c0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011232:	b29b      	uxth	r3, r3
 8011234:	2b01      	cmp	r3, #1
 8011236:	d917      	bls.n	8011268 <HAL_SPI_Transmit+0x33c>
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801123c:	2b00      	cmp	r3, #0
 801123e:	d013      	beq.n	8011268 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011244:	881a      	ldrh	r2, [r3, #0]
 8011246:	69fb      	ldr	r3, [r7, #28]
 8011248:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801124e:	1c9a      	adds	r2, r3, #2
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801125a:	b29b      	uxth	r3, r3
 801125c:	3b02      	subs	r3, #2
 801125e:	b29a      	uxth	r2, r3
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011266:	e041      	b.n	80112ec <HAL_SPI_Transmit+0x3c0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	3320      	adds	r3, #32
 8011272:	7812      	ldrb	r2, [r2, #0]
 8011274:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801127a:	1c5a      	adds	r2, r3, #1
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011286:	b29b      	uxth	r3, r3
 8011288:	3b01      	subs	r3, #1
 801128a:	b29a      	uxth	r2, r3
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011292:	e02b      	b.n	80112ec <HAL_SPI_Transmit+0x3c0>
 8011294:	40013000 	.word	0x40013000
 8011298:	50013000 	.word	0x50013000
 801129c:	40003800 	.word	0x40003800
 80112a0:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80112a4:	f7f6 fa8c 	bl	80077c0 <HAL_GetTick>
 80112a8:	4602      	mov	r2, r0
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	1ad3      	subs	r3, r2, r3
 80112ae:	683a      	ldr	r2, [r7, #0]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d803      	bhi.n	80112bc <HAL_SPI_Transmit+0x390>
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ba:	d102      	bne.n	80112c2 <HAL_SPI_Transmit+0x396>
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d114      	bne.n	80112ec <HAL_SPI_Transmit+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80112c2:	68f8      	ldr	r0, [r7, #12]
 80112c4:	f000 fe6e 	bl	8011fa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2200      	movs	r2, #0
 80112cc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	2201      	movs	r2, #1
 80112e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80112e8:	2303      	movs	r3, #3
 80112ea:	e02c      	b.n	8011346 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80112f2:	b29b      	uxth	r3, r3
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	f47f af73 	bne.w	80111e0 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	9300      	str	r3, [sp, #0]
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	2200      	movs	r2, #0
 8011302:	2108      	movs	r1, #8
 8011304:	68f8      	ldr	r0, [r7, #12]
 8011306:	f000 feed 	bl	80120e4 <SPI_WaitOnFlagUntilTimeout>
 801130a:	4603      	mov	r3, r0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d007      	beq.n	8011320 <HAL_SPI_Transmit+0x3f4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011316:	f043 0220 	orr.w	r2, r3, #32
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	f000 fe3f 	bl	8011fa4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2200      	movs	r2, #0
 801132a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2201      	movs	r2, #1
 8011332:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801133c:	2b00      	cmp	r3, #0
 801133e:	d001      	beq.n	8011344 <HAL_SPI_Transmit+0x418>
  {
    return HAL_ERROR;
 8011340:	2301      	movs	r3, #1
 8011342:	e000      	b.n	8011346 <HAL_SPI_Transmit+0x41a>
  }
  return errorcode;
 8011344:	7efb      	ldrb	r3, [r7, #27]
}
 8011346:	4618      	mov	r0, r3
 8011348:	3720      	adds	r7, #32
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop

08011350 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b08a      	sub	sp, #40	; 0x28
 8011354:	af02      	add	r7, sp, #8
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	60b9      	str	r1, [r7, #8]
 801135a:	603b      	str	r3, [r7, #0]
 801135c:	4613      	mov	r3, r2
 801135e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011360:	2300      	movs	r3, #0
 8011362:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	3330      	adds	r3, #48	; 0x30
 801136a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011374:	d112      	bne.n	801139c <HAL_SPI_Receive+0x4c>
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	689b      	ldr	r3, [r3, #8]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d10e      	bne.n	801139c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	2204      	movs	r2, #4
 8011382:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011386:	88fa      	ldrh	r2, [r7, #6]
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	9300      	str	r3, [sp, #0]
 801138c:	4613      	mov	r3, r2
 801138e:	68ba      	ldr	r2, [r7, #8]
 8011390:	68b9      	ldr	r1, [r7, #8]
 8011392:	68f8      	ldr	r0, [r7, #12]
 8011394:	f000 f99a 	bl	80116cc <HAL_SPI_TransmitReceive>
 8011398:	4603      	mov	r3, r0
 801139a:	e18a      	b.n	80116b2 <HAL_SPI_Receive+0x362>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d101      	bne.n	80113aa <HAL_SPI_Receive+0x5a>
 80113a6:	2302      	movs	r3, #2
 80113a8:	e183      	b.n	80116b2 <HAL_SPI_Receive+0x362>
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	2201      	movs	r2, #1
 80113ae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80113b2:	f7f6 fa05 	bl	80077c0 <HAL_GetTick>
 80113b6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80113be:	b2db      	uxtb	r3, r3
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d007      	beq.n	80113d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80113c4:	2302      	movs	r3, #2
 80113c6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2200      	movs	r2, #0
 80113cc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80113d0:	7ffb      	ldrb	r3, [r7, #31]
 80113d2:	e16e      	b.n	80116b2 <HAL_SPI_Receive+0x362>
  }

  if ((pData == NULL) || (Size == 0UL))
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d002      	beq.n	80113e0 <HAL_SPI_Receive+0x90>
 80113da:	88fb      	ldrh	r3, [r7, #6]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d107      	bne.n	80113f0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80113e0:	2301      	movs	r3, #1
 80113e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	2200      	movs	r2, #0
 80113e8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80113ec:	7ffb      	ldrb	r3, [r7, #31]
 80113ee:	e160      	b.n	80116b2 <HAL_SPI_Receive+0x362>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	2204      	movs	r2, #4
 80113f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2200      	movs	r2, #0
 80113fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	68ba      	ldr	r2, [r7, #8]
 8011404:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	88fa      	ldrh	r2, [r7, #6]
 801140a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	88fa      	ldrh	r2, [r7, #6]
 8011412:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	2200      	movs	r2, #0
 801141a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	2200      	movs	r2, #0
 8011420:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2200      	movs	r2, #0
 8011428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	2200      	movs	r2, #0
 8011430:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	2200      	movs	r2, #0
 8011436:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	689b      	ldr	r3, [r3, #8]
 801143c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011440:	d107      	bne.n	8011452 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011450:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	0c1b      	lsrs	r3, r3, #16
 801145a:	041b      	lsls	r3, r3, #16
 801145c:	88f9      	ldrh	r1, [r7, #6]
 801145e:	68fa      	ldr	r2, [r7, #12]
 8011460:	6812      	ldr	r2, [r2, #0]
 8011462:	430b      	orrs	r3, r1
 8011464:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	681a      	ldr	r2, [r3, #0]
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	f042 0201 	orr.w	r2, r2, #1
 8011474:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	69db      	ldr	r3, [r3, #28]
 801147c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011480:	2b00      	cmp	r3, #0
 8011482:	d10c      	bne.n	801149e <HAL_SPI_Receive+0x14e>
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801148c:	d107      	bne.n	801149e <HAL_SPI_Receive+0x14e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	681a      	ldr	r2, [r3, #0]
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801149c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	68db      	ldr	r3, [r3, #12]
 80114a2:	2b0f      	cmp	r3, #15
 80114a4:	d95c      	bls.n	8011560 <HAL_SPI_Receive+0x210>
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	4a84      	ldr	r2, [pc, #528]	; (80116bc <HAL_SPI_Receive+0x36c>)
 80114ac:	4293      	cmp	r3, r2
 80114ae:	d050      	beq.n	8011552 <HAL_SPI_Receive+0x202>
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	4a82      	ldr	r2, [pc, #520]	; (80116c0 <HAL_SPI_Receive+0x370>)
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d04b      	beq.n	8011552 <HAL_SPI_Receive+0x202>
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	4a81      	ldr	r2, [pc, #516]	; (80116c4 <HAL_SPI_Receive+0x374>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d046      	beq.n	8011552 <HAL_SPI_Receive+0x202>
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	4a7f      	ldr	r2, [pc, #508]	; (80116c8 <HAL_SPI_Receive+0x378>)
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d148      	bne.n	8011560 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80114ce:	e040      	b.n	8011552 <HAL_SPI_Receive+0x202>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	695a      	ldr	r2, [r3, #20]
 80114d6:	f248 0308 	movw	r3, #32776	; 0x8008
 80114da:	4013      	ands	r3, r2
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d014      	beq.n	801150a <HAL_SPI_Receive+0x1ba>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681a      	ldr	r2, [r3, #0]
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80114ea:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114f0:	1d1a      	adds	r2, r3, #4
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	3b01      	subs	r3, #1
 8011500:	b29a      	uxth	r2, r3
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8011508:	e023      	b.n	8011552 <HAL_SPI_Receive+0x202>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801150a:	f7f6 f959 	bl	80077c0 <HAL_GetTick>
 801150e:	4602      	mov	r2, r0
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	683a      	ldr	r2, [r7, #0]
 8011516:	429a      	cmp	r2, r3
 8011518:	d803      	bhi.n	8011522 <HAL_SPI_Receive+0x1d2>
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011520:	d102      	bne.n	8011528 <HAL_SPI_Receive+0x1d8>
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d114      	bne.n	8011552 <HAL_SPI_Receive+0x202>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f000 fd3b 	bl	8011fa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2200      	movs	r2, #0
 8011532:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801153c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2201      	movs	r2, #1
 801154a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 801154e:	2303      	movs	r3, #3
 8011550:	e0af      	b.n	80116b2 <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011558:	b29b      	uxth	r3, r3
 801155a:	2b00      	cmp	r3, #0
 801155c:	d1b8      	bne.n	80114d0 <HAL_SPI_Receive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801155e:	e095      	b.n	801168c <HAL_SPI_Receive+0x33c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	68db      	ldr	r3, [r3, #12]
 8011564:	2b07      	cmp	r3, #7
 8011566:	f240 808b 	bls.w	8011680 <HAL_SPI_Receive+0x330>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801156a:	e03f      	b.n	80115ec <HAL_SPI_Receive+0x29c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	695b      	ldr	r3, [r3, #20]
 8011572:	f003 0301 	and.w	r3, r3, #1
 8011576:	2b01      	cmp	r3, #1
 8011578:	d114      	bne.n	80115a4 <HAL_SPI_Receive+0x254>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801157e:	69ba      	ldr	r2, [r7, #24]
 8011580:	8812      	ldrh	r2, [r2, #0]
 8011582:	b292      	uxth	r2, r2
 8011584:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801158a:	1c9a      	adds	r2, r3, #2
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011596:	b29b      	uxth	r3, r3
 8011598:	3b01      	subs	r3, #1
 801159a:	b29a      	uxth	r2, r3
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80115a2:	e023      	b.n	80115ec <HAL_SPI_Receive+0x29c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115a4:	f7f6 f90c 	bl	80077c0 <HAL_GetTick>
 80115a8:	4602      	mov	r2, r0
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	1ad3      	subs	r3, r2, r3
 80115ae:	683a      	ldr	r2, [r7, #0]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d803      	bhi.n	80115bc <HAL_SPI_Receive+0x26c>
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ba:	d102      	bne.n	80115c2 <HAL_SPI_Receive+0x272>
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d114      	bne.n	80115ec <HAL_SPI_Receive+0x29c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80115c2:	68f8      	ldr	r0, [r7, #12]
 80115c4:	f000 fcee 	bl	8011fa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2200      	movs	r2, #0
 80115cc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	2201      	movs	r2, #1
 80115e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80115e8:	2303      	movs	r3, #3
 80115ea:	e062      	b.n	80116b2 <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d1b9      	bne.n	801156c <HAL_SPI_Receive+0x21c>
 80115f8:	e048      	b.n	801168c <HAL_SPI_Receive+0x33c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	695b      	ldr	r3, [r3, #20]
 8011600:	f003 0301 	and.w	r3, r3, #1
 8011604:	2b01      	cmp	r3, #1
 8011606:	d117      	bne.n	8011638 <HAL_SPI_Receive+0x2e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011614:	7812      	ldrb	r2, [r2, #0]
 8011616:	b2d2      	uxtb	r2, r2
 8011618:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801161e:	1c5a      	adds	r2, r3, #1
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 801162a:	b29b      	uxth	r3, r3
 801162c:	3b01      	subs	r3, #1
 801162e:	b29a      	uxth	r2, r3
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8011636:	e023      	b.n	8011680 <HAL_SPI_Receive+0x330>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011638:	f7f6 f8c2 	bl	80077c0 <HAL_GetTick>
 801163c:	4602      	mov	r2, r0
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	1ad3      	subs	r3, r2, r3
 8011642:	683a      	ldr	r2, [r7, #0]
 8011644:	429a      	cmp	r2, r3
 8011646:	d803      	bhi.n	8011650 <HAL_SPI_Receive+0x300>
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801164e:	d102      	bne.n	8011656 <HAL_SPI_Receive+0x306>
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d114      	bne.n	8011680 <HAL_SPI_Receive+0x330>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	f000 fca4 	bl	8011fa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	2200      	movs	r2, #0
 8011660:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801166a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	2201      	movs	r2, #1
 8011678:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 801167c:	2303      	movs	r3, #3
 801167e:	e018      	b.n	80116b2 <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011686:	b29b      	uxth	r3, r3
 8011688:	2b00      	cmp	r3, #0
 801168a:	d1b6      	bne.n	80115fa <HAL_SPI_Receive+0x2aa>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801168c:	68f8      	ldr	r0, [r7, #12]
 801168e:	f000 fc89 	bl	8011fa4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	2200      	movs	r2, #0
 8011696:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2201      	movs	r2, #1
 801169e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d001      	beq.n	80116b0 <HAL_SPI_Receive+0x360>
  {
    return HAL_ERROR;
 80116ac:	2301      	movs	r3, #1
 80116ae:	e000      	b.n	80116b2 <HAL_SPI_Receive+0x362>
  }
  return errorcode;
 80116b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3720      	adds	r7, #32
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	40013000 	.word	0x40013000
 80116c0:	50013000 	.word	0x50013000
 80116c4:	40003800 	.word	0x40003800
 80116c8:	50003800 	.word	0x50003800

080116cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b08e      	sub	sp, #56	; 0x38
 80116d0:	af02      	add	r7, sp, #8
 80116d2:	60f8      	str	r0, [r7, #12]
 80116d4:	60b9      	str	r1, [r7, #8]
 80116d6:	607a      	str	r2, [r7, #4]
 80116d8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80116da:	2300      	movs	r3, #0
 80116dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	3320      	adds	r3, #32
 80116e6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	3330      	adds	r3, #48	; 0x30
 80116ee:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80116f6:	2b01      	cmp	r3, #1
 80116f8:	d101      	bne.n	80116fe <HAL_SPI_TransmitReceive+0x32>
 80116fa:	2302      	movs	r3, #2
 80116fc:	e22b      	b.n	8011b56 <HAL_SPI_TransmitReceive+0x48a>
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	2201      	movs	r2, #1
 8011702:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011706:	f7f6 f85b 	bl	80077c0 <HAL_GetTick>
 801170a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 801170c:	887b      	ldrh	r3, [r7, #2]
 801170e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8011710:	887b      	ldrh	r3, [r7, #2]
 8011712:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 801171a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011722:	7efb      	ldrb	r3, [r7, #27]
 8011724:	2b01      	cmp	r3, #1
 8011726:	d014      	beq.n	8011752 <HAL_SPI_TransmitReceive+0x86>
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801172e:	d106      	bne.n	801173e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8011734:	2b00      	cmp	r3, #0
 8011736:	d102      	bne.n	801173e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011738:	7efb      	ldrb	r3, [r7, #27]
 801173a:	2b04      	cmp	r3, #4
 801173c:	d009      	beq.n	8011752 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 801173e:	2302      	movs	r3, #2
 8011740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	2200      	movs	r2, #0
 8011748:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 801174c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011750:	e201      	b.n	8011b56 <HAL_SPI_TransmitReceive+0x48a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d005      	beq.n	8011764 <HAL_SPI_TransmitReceive+0x98>
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d002      	beq.n	8011764 <HAL_SPI_TransmitReceive+0x98>
 801175e:	887b      	ldrh	r3, [r7, #2]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d109      	bne.n	8011778 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8011764:	2301      	movs	r3, #1
 8011766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2200      	movs	r2, #0
 801176e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8011772:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011776:	e1ee      	b.n	8011b56 <HAL_SPI_TransmitReceive+0x48a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 801177e:	b2db      	uxtb	r3, r3
 8011780:	2b04      	cmp	r3, #4
 8011782:	d003      	beq.n	801178c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2205      	movs	r2, #5
 8011788:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2200      	movs	r2, #0
 8011790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	687a      	ldr	r2, [r7, #4]
 8011798:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	887a      	ldrh	r2, [r7, #2]
 801179e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	887a      	ldrh	r2, [r7, #2]
 80117a6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	68ba      	ldr	r2, [r7, #8]
 80117ae:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	887a      	ldrh	r2, [r7, #2]
 80117b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	887a      	ldrh	r2, [r7, #2]
 80117bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	2200      	movs	r2, #0
 80117c4:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2200      	movs	r2, #0
 80117ca:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	0c1b      	lsrs	r3, r3, #16
 80117d4:	041b      	lsls	r3, r3, #16
 80117d6:	8879      	ldrh	r1, [r7, #2]
 80117d8:	68fa      	ldr	r2, [r7, #12]
 80117da:	6812      	ldr	r2, [r2, #0]
 80117dc:	430b      	orrs	r3, r1
 80117de:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	f042 0201 	orr.w	r2, r2, #1
 80117ee:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	69db      	ldr	r3, [r3, #28]
 80117f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d10c      	bne.n	8011818 <HAL_SPI_TransmitReceive+0x14c>
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011806:	d107      	bne.n	8011818 <HAL_SPI_TransmitReceive+0x14c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	2b0f      	cmp	r3, #15
 801181e:	f240 8085 	bls.w	801192c <HAL_SPI_TransmitReceive+0x260>
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	4a7b      	ldr	r2, [pc, #492]	; (8011a14 <HAL_SPI_TransmitReceive+0x348>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d078      	beq.n	801191e <HAL_SPI_TransmitReceive+0x252>
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4a79      	ldr	r2, [pc, #484]	; (8011a18 <HAL_SPI_TransmitReceive+0x34c>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d073      	beq.n	801191e <HAL_SPI_TransmitReceive+0x252>
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4a78      	ldr	r2, [pc, #480]	; (8011a1c <HAL_SPI_TransmitReceive+0x350>)
 801183c:	4293      	cmp	r3, r2
 801183e:	d06e      	beq.n	801191e <HAL_SPI_TransmitReceive+0x252>
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	4a76      	ldr	r2, [pc, #472]	; (8011a20 <HAL_SPI_TransmitReceive+0x354>)
 8011846:	4293      	cmp	r3, r2
 8011848:	d170      	bne.n	801192c <HAL_SPI_TransmitReceive+0x260>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801184a:	e068      	b.n	801191e <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	695b      	ldr	r3, [r3, #20]
 8011852:	f003 0302 	and.w	r3, r3, #2
 8011856:	2b02      	cmp	r3, #2
 8011858:	d11a      	bne.n	8011890 <HAL_SPI_TransmitReceive+0x1c4>
 801185a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801185c:	2b00      	cmp	r3, #0
 801185e:	d017      	beq.n	8011890 <HAL_SPI_TransmitReceive+0x1c4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	6812      	ldr	r2, [r2, #0]
 801186a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011870:	1d1a      	adds	r2, r3, #4
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801187c:	b29b      	uxth	r3, r3
 801187e:	3b01      	subs	r3, #1
 8011880:	b29a      	uxth	r2, r3
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801188e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	695a      	ldr	r2, [r3, #20]
 8011896:	f248 0308 	movw	r3, #32776	; 0x8008
 801189a:	4013      	ands	r3, r2
 801189c:	2b00      	cmp	r3, #0
 801189e:	d01a      	beq.n	80118d6 <HAL_SPI_TransmitReceive+0x20a>
 80118a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d017      	beq.n	80118d6 <HAL_SPI_TransmitReceive+0x20a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80118b0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118b6:	1d1a      	adds	r2, r3, #4
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	3b01      	subs	r3, #1
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80118d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80118d6:	f7f5 ff73 	bl	80077c0 <HAL_GetTick>
 80118da:	4602      	mov	r2, r0
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	1ad3      	subs	r3, r2, r3
 80118e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d803      	bhi.n	80118ee <HAL_SPI_TransmitReceive+0x222>
 80118e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118ec:	d102      	bne.n	80118f4 <HAL_SPI_TransmitReceive+0x228>
 80118ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d114      	bne.n	801191e <HAL_SPI_TransmitReceive+0x252>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80118f4:	68f8      	ldr	r0, [r7, #12]
 80118f6:	f000 fb55 	bl	8011fa4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	2200      	movs	r2, #0
 80118fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011908:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	2201      	movs	r2, #1
 8011916:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 801191a:	2303      	movs	r3, #3
 801191c:	e11b      	b.n	8011b56 <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801191e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011920:	2b00      	cmp	r3, #0
 8011922:	d193      	bne.n	801184c <HAL_SPI_TransmitReceive+0x180>
 8011924:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011926:	2b00      	cmp	r3, #0
 8011928:	d190      	bne.n	801184c <HAL_SPI_TransmitReceive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801192a:	e0ed      	b.n	8011b08 <HAL_SPI_TransmitReceive+0x43c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	68db      	ldr	r3, [r3, #12]
 8011930:	2b07      	cmp	r3, #7
 8011932:	f240 80e3 	bls.w	8011afc <HAL_SPI_TransmitReceive+0x430>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011936:	e066      	b.n	8011a06 <HAL_SPI_TransmitReceive+0x33a>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	695b      	ldr	r3, [r3, #20]
 801193e:	f003 0302 	and.w	r3, r3, #2
 8011942:	2b02      	cmp	r3, #2
 8011944:	d119      	bne.n	801197a <HAL_SPI_TransmitReceive+0x2ae>
 8011946:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011948:	2b00      	cmp	r3, #0
 801194a:	d016      	beq.n	801197a <HAL_SPI_TransmitReceive+0x2ae>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011950:	881a      	ldrh	r2, [r3, #0]
 8011952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011954:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801195a:	1c9a      	adds	r2, r3, #2
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011966:	b29b      	uxth	r3, r3
 8011968:	3b01      	subs	r3, #1
 801196a:	b29a      	uxth	r2, r3
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011978:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	695b      	ldr	r3, [r3, #20]
 8011980:	f003 0301 	and.w	r3, r3, #1
 8011984:	2b01      	cmp	r3, #1
 8011986:	d11a      	bne.n	80119be <HAL_SPI_TransmitReceive+0x2f2>
 8011988:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801198a:	2b00      	cmp	r3, #0
 801198c:	d017      	beq.n	80119be <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011992:	6a3a      	ldr	r2, [r7, #32]
 8011994:	8812      	ldrh	r2, [r2, #0]
 8011996:	b292      	uxth	r2, r2
 8011998:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801199e:	1c9a      	adds	r2, r3, #2
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	3b01      	subs	r3, #1
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80119bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80119be:	f7f5 feff 	bl	80077c0 <HAL_GetTick>
 80119c2:	4602      	mov	r2, r0
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	1ad3      	subs	r3, r2, r3
 80119c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d803      	bhi.n	80119d6 <HAL_SPI_TransmitReceive+0x30a>
 80119ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119d4:	d102      	bne.n	80119dc <HAL_SPI_TransmitReceive+0x310>
 80119d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d114      	bne.n	8011a06 <HAL_SPI_TransmitReceive+0x33a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80119dc:	68f8      	ldr	r0, [r7, #12]
 80119de:	f000 fae1 	bl	8011fa4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2200      	movs	r2, #0
 80119e6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	2201      	movs	r2, #1
 80119fe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8011a02:	2303      	movs	r3, #3
 8011a04:	e0a7      	b.n	8011b56 <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011a06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d195      	bne.n	8011938 <HAL_SPI_TransmitReceive+0x26c>
 8011a0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d192      	bne.n	8011938 <HAL_SPI_TransmitReceive+0x26c>
 8011a12:	e079      	b.n	8011b08 <HAL_SPI_TransmitReceive+0x43c>
 8011a14:	40013000 	.word	0x40013000
 8011a18:	50013000 	.word	0x50013000
 8011a1c:	40003800 	.word	0x40003800
 8011a20:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	695b      	ldr	r3, [r3, #20]
 8011a2a:	f003 0302 	and.w	r3, r3, #2
 8011a2e:	2b02      	cmp	r3, #2
 8011a30:	d11b      	bne.n	8011a6a <HAL_SPI_TransmitReceive+0x39e>
 8011a32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d018      	beq.n	8011a6a <HAL_SPI_TransmitReceive+0x39e>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	3320      	adds	r3, #32
 8011a42:	7812      	ldrb	r2, [r2, #0]
 8011a44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a4a:	1c5a      	adds	r2, r3, #1
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	3b01      	subs	r3, #1
 8011a5a:	b29a      	uxth	r2, r3
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011a68:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	695b      	ldr	r3, [r3, #20]
 8011a70:	f003 0301 	and.w	r3, r3, #1
 8011a74:	2b01      	cmp	r3, #1
 8011a76:	d11d      	bne.n	8011ab4 <HAL_SPI_TransmitReceive+0x3e8>
 8011a78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d01a      	beq.n	8011ab4 <HAL_SPI_TransmitReceive+0x3e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a8a:	7812      	ldrb	r2, [r2, #0]
 8011a8c:	b2d2      	uxtb	r2, r2
 8011a8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a94:	1c5a      	adds	r2, r3, #1
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	3b01      	subs	r3, #1
 8011aa4:	b29a      	uxth	r2, r3
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011ab2:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011ab4:	f7f5 fe84 	bl	80077c0 <HAL_GetTick>
 8011ab8:	4602      	mov	r2, r0
 8011aba:	69fb      	ldr	r3, [r7, #28]
 8011abc:	1ad3      	subs	r3, r2, r3
 8011abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d803      	bhi.n	8011acc <HAL_SPI_TransmitReceive+0x400>
 8011ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aca:	d102      	bne.n	8011ad2 <HAL_SPI_TransmitReceive+0x406>
 8011acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d114      	bne.n	8011afc <HAL_SPI_TransmitReceive+0x430>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8011ad2:	68f8      	ldr	r0, [r7, #12]
 8011ad4:	f000 fa66 	bl	8011fa4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	2200      	movs	r2, #0
 8011adc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ae6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	2201      	movs	r2, #1
 8011af4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8011af8:	2303      	movs	r3, #3
 8011afa:	e02c      	b.n	8011b56 <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011afc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d190      	bne.n	8011a24 <HAL_SPI_TransmitReceive+0x358>
 8011b02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d18d      	bne.n	8011a24 <HAL_SPI_TransmitReceive+0x358>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8011b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0a:	9300      	str	r3, [sp, #0]
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	2108      	movs	r1, #8
 8011b12:	68f8      	ldr	r0, [r7, #12]
 8011b14:	f000 fae6 	bl	80120e4 <SPI_WaitOnFlagUntilTimeout>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d007      	beq.n	8011b2e <HAL_SPI_TransmitReceive+0x462>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b24:	f043 0220 	orr.w	r2, r3, #32
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011b2e:	68f8      	ldr	r0, [r7, #12]
 8011b30:	f000 fa38 	bl	8011fa4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	2200      	movs	r2, #0
 8011b38:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2201      	movs	r2, #1
 8011b40:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d001      	beq.n	8011b52 <HAL_SPI_TransmitReceive+0x486>
  {
    return HAL_ERROR;
 8011b4e:	2301      	movs	r3, #1
 8011b50:	e001      	b.n	8011b56 <HAL_SPI_TransmitReceive+0x48a>
  }
  return errorcode;
 8011b52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	3730      	adds	r7, #48	; 0x30
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	bf00      	nop

08011b60 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b08a      	sub	sp, #40	; 0x28
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	691b      	ldr	r3, [r3, #16]
 8011b6e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	695b      	ldr	r3, [r3, #20]
 8011b76:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011b78:	6a3a      	ldr	r2, [r7, #32]
 8011b7a:	69fb      	ldr	r3, [r7, #28]
 8011b7c:	4013      	ands	r3, r2
 8011b7e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011b88:	2300      	movs	r3, #0
 8011b8a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011b92:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	3330      	adds	r3, #48	; 0x30
 8011b9a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011b9c:	69bb      	ldr	r3, [r7, #24]
 8011b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d113      	bne.n	8011bce <HAL_SPI_IRQHandler+0x6e>
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	f003 0320 	and.w	r3, r3, #32
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d10e      	bne.n	8011bce <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d009      	beq.n	8011bce <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	4798      	blx	r3
    handled = 1UL;
 8011bca:	2301      	movs	r3, #1
 8011bcc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011bce:	69bb      	ldr	r3, [r7, #24]
 8011bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d10f      	bne.n	8011bf8 <HAL_SPI_IRQHandler+0x98>
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	f003 0301 	and.w	r3, r3, #1
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d00a      	beq.n	8011bf8 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011be2:	69bb      	ldr	r3, [r7, #24]
 8011be4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d105      	bne.n	8011bf8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	4798      	blx	r3
    handled = 1UL;
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011bf8:	69bb      	ldr	r3, [r7, #24]
 8011bfa:	f003 0320 	and.w	r3, r3, #32
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d10f      	bne.n	8011c22 <HAL_SPI_IRQHandler+0xc2>
 8011c02:	69bb      	ldr	r3, [r7, #24]
 8011c04:	f003 0302 	and.w	r3, r3, #2
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d00a      	beq.n	8011c22 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011c0c:	69bb      	ldr	r3, [r7, #24]
 8011c0e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d105      	bne.n	8011c22 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	4798      	blx	r3
    handled = 1UL;
 8011c1e:	2301      	movs	r3, #1
 8011c20:	627b      	str	r3, [r7, #36]	; 0x24
  }


  if (handled != 0UL)
 8011c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	f040 8162 	bne.w	8011eee <HAL_SPI_IRQHandler+0x38e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011c2a:	69bb      	ldr	r3, [r7, #24]
 8011c2c:	f003 0308 	and.w	r3, r3, #8
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	f000 808b 	beq.w	8011d4c <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	699a      	ldr	r2, [r3, #24]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f042 0208 	orr.w	r2, r2, #8
 8011c44:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	699a      	ldr	r2, [r3, #24]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f042 0210 	orr.w	r2, r2, #16
 8011c54:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	699a      	ldr	r2, [r3, #24]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011c64:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	691a      	ldr	r2, [r3, #16]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	f022 0208 	bic.w	r2, r2, #8
 8011c74:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	689b      	ldr	r3, [r3, #8]
 8011c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d13d      	bne.n	8011d00 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011c84:	e036      	b.n	8011cf4 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	2b0f      	cmp	r3, #15
 8011c8c:	d90b      	bls.n	8011ca6 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011c98:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c9e:	1d1a      	adds	r2, r3, #4
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	66da      	str	r2, [r3, #108]	; 0x6c
 8011ca4:	e01d      	b.n	8011ce2 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	68db      	ldr	r3, [r3, #12]
 8011caa:	2b07      	cmp	r3, #7
 8011cac:	d90b      	bls.n	8011cc6 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cb2:	68fa      	ldr	r2, [r7, #12]
 8011cb4:	8812      	ldrh	r2, [r2, #0]
 8011cb6:	b292      	uxth	r2, r2
 8011cb8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cbe:	1c9a      	adds	r2, r3, #2
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	66da      	str	r2, [r3, #108]	; 0x6c
 8011cc4:	e00d      	b.n	8011ce2 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cd2:	7812      	ldrb	r2, [r2, #0]
 8011cd4:	b2d2      	uxtb	r2, r2
 8011cd6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cdc:	1c5a      	adds	r2, r3, #1
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        hspi->RxXferCount--;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011ce8:	b29b      	uxth	r3, r3
 8011cea:	3b01      	subs	r3, #1
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      while (hspi->RxXferCount != 0UL)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d1c2      	bne.n	8011c86 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f000 f94f 	bl	8011fa4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2201      	movs	r2, #1
 8011d0a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d003      	beq.n	8011d20 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f000 f911 	bl	8011f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011d1e:	e0eb      	b.n	8011ef8 <HAL_SPI_IRQHandler+0x398>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011d20:	7cfb      	ldrb	r3, [r7, #19]
 8011d22:	2b05      	cmp	r3, #5
 8011d24:	d103      	bne.n	8011d2e <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f000 f900 	bl	8011f2c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011d2c:	e0e1      	b.n	8011ef2 <HAL_SPI_IRQHandler+0x392>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8011d2e:	7cfb      	ldrb	r3, [r7, #19]
 8011d30:	2b04      	cmp	r3, #4
 8011d32:	d103      	bne.n	8011d3c <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f000 f8ef 	bl	8011f18 <HAL_SPI_RxCpltCallback>
    return;
 8011d3a:	e0da      	b.n	8011ef2 <HAL_SPI_IRQHandler+0x392>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011d3c:	7cfb      	ldrb	r3, [r7, #19]
 8011d3e:	2b03      	cmp	r3, #3
 8011d40:	f040 80d7 	bne.w	8011ef2 <HAL_SPI_IRQHandler+0x392>
      HAL_SPI_TxCpltCallback(hspi);
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f000 f8dd 	bl	8011f04 <HAL_SPI_TxCpltCallback>
    return;
 8011d4a:	e0d2      	b.n	8011ef2 <HAL_SPI_IRQHandler+0x392>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011d4c:	69fb      	ldr	r3, [r7, #28]
 8011d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d00d      	beq.n	8011d72 <HAL_SPI_IRQHandler+0x212>
 8011d56:	6a3b      	ldr	r3, [r7, #32]
 8011d58:	f003 0308 	and.w	r3, r3, #8
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d008      	beq.n	8011d72 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	699a      	ldr	r2, [r3, #24]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011d6e:	619a      	str	r2, [r3, #24]

    return;
 8011d70:	e0c2      	b.n	8011ef8 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	f000 80bd 	beq.w	8011ef8 <HAL_SPI_IRQHandler+0x398>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d00f      	beq.n	8011da8 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d8e:	f043 0204 	orr.w	r2, r3, #4
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	699a      	ldr	r2, [r3, #24]
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011da6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011da8:	69bb      	ldr	r3, [r7, #24]
 8011daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d00f      	beq.n	8011dd2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011db8:	f043 0201 	orr.w	r2, r3, #1
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	699a      	ldr	r2, [r3, #24]
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011dd0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011dd2:	69bb      	ldr	r3, [r7, #24]
 8011dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d00f      	beq.n	8011dfc <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011de2:	f043 0208 	orr.w	r2, r3, #8
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	699a      	ldr	r2, [r3, #24]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011dfa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	f003 0320 	and.w	r3, r3, #32
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d00f      	beq.n	8011e26 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	699a      	ldr	r2, [r3, #24]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	f042 0220 	orr.w	r2, r2, #32
 8011e24:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d062      	beq.n	8011ef6 <HAL_SPI_IRQHandler+0x396>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f022 0201 	bic.w	r2, r2, #1
 8011e3e:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	691b      	ldr	r3, [r3, #16]
 8011e46:	687a      	ldr	r2, [r7, #4]
 8011e48:	6812      	ldr	r2, [r2, #0]
 8011e4a:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8011e4e:	f023 0303 	bic.w	r3, r3, #3
 8011e52:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011e5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011e5e:	d13e      	bne.n	8011ede <HAL_SPI_IRQHandler+0x37e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	689a      	ldr	r2, [r3, #8]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011e6e:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d015      	beq.n	8011ea6 <HAL_SPI_IRQHandler+0x346>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e80:	4a1f      	ldr	r2, [pc, #124]	; (8011f00 <HAL_SPI_IRQHandler+0x3a0>)
 8011e82:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7f6 fea8 	bl	8008be0 <HAL_DMA_Abort_IT>
 8011e90:	4603      	mov	r3, r0
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d007      	beq.n	8011ea6 <HAL_SPI_IRQHandler+0x346>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d022      	beq.n	8011ef6 <HAL_SPI_IRQHandler+0x396>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011eb6:	4a12      	ldr	r2, [pc, #72]	; (8011f00 <HAL_SPI_IRQHandler+0x3a0>)
 8011eb8:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7f6 fe8d 	bl	8008be0 <HAL_DMA_Abort_IT>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d014      	beq.n	8011ef6 <HAL_SPI_IRQHandler+0x396>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ed2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011edc:	e00b      	b.n	8011ef6 <HAL_SPI_IRQHandler+0x396>
        hspi->State = HAL_SPI_STATE_READY;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2201      	movs	r2, #1
 8011ee2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        HAL_SPI_ErrorCallback(hspi);
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f000 f82a 	bl	8011f40 <HAL_SPI_ErrorCallback>
    return;
 8011eec:	e003      	b.n	8011ef6 <HAL_SPI_IRQHandler+0x396>
    return;
 8011eee:	bf00      	nop
 8011ef0:	e002      	b.n	8011ef8 <HAL_SPI_IRQHandler+0x398>
    return;
 8011ef2:	bf00      	nop
 8011ef4:	e000      	b.n	8011ef8 <HAL_SPI_IRQHandler+0x398>
    return;
 8011ef6:	bf00      	nop
  }
}
 8011ef8:	3728      	adds	r7, #40	; 0x28
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
 8011efe:	bf00      	nop
 8011f00:	08011f71 	.word	0x08011f71

08011f04 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b083      	sub	sp, #12
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8011f0c:	bf00      	nop
 8011f0e:	370c      	adds	r7, #12
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b083      	sub	sp, #12
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8011f20:	bf00      	nop
 8011f22:	370c      	adds	r7, #12
 8011f24:	46bd      	mov	sp, r7
 8011f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2a:	4770      	bx	lr

08011f2c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b083      	sub	sp, #12
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011f34:	bf00      	nop
 8011f36:	370c      	adds	r7, #12
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3e:	4770      	bx	lr

08011f40 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8011f40:	b480      	push	{r7}
 8011f42:	b083      	sub	sp, #12
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011f48:	bf00      	nop
 8011f4a:	370c      	adds	r7, #12
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f52:	4770      	bx	lr

08011f54 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b083      	sub	sp, #12
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011f62:	b2db      	uxtb	r3, r3
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	370c      	adds	r7, #12
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr

08011f70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b084      	sub	sp, #16
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	2200      	movs	r2, #0
 8011f82:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	2201      	movs	r2, #1
 8011f92:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	f7ff ffd2 	bl	8011f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011f9c:	bf00      	nop
 8011f9e:	3710      	adds	r7, #16
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b085      	sub	sp, #20
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	695b      	ldr	r3, [r3, #20]
 8011fb2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	699a      	ldr	r2, [r3, #24]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f042 0208 	orr.w	r2, r2, #8
 8011fc2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	699a      	ldr	r2, [r3, #24]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f042 0210 	orr.w	r2, r2, #16
 8011fd2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	681a      	ldr	r2, [r3, #0]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f022 0201 	bic.w	r2, r2, #1
 8011fe2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	691b      	ldr	r3, [r3, #16]
 8011fea:	687a      	ldr	r2, [r7, #4]
 8011fec:	6812      	ldr	r2, [r2, #0]
 8011fee:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8011ff2:	f023 0303 	bic.w	r3, r3, #3
 8011ff6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	689a      	ldr	r2, [r3, #8]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012006:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 801200e:	b2db      	uxtb	r3, r3
 8012010:	2b04      	cmp	r3, #4
 8012012:	d014      	beq.n	801203e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	f003 0320 	and.w	r3, r3, #32
 801201a:	2b00      	cmp	r3, #0
 801201c:	d00f      	beq.n	801203e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012024:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	699a      	ldr	r2, [r3, #24]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f042 0220 	orr.w	r2, r2, #32
 801203c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8012044:	b2db      	uxtb	r3, r3
 8012046:	2b03      	cmp	r3, #3
 8012048:	d014      	beq.n	8012074 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012050:	2b00      	cmp	r3, #0
 8012052:	d00f      	beq.n	8012074 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801205a:	f043 0204 	orr.w	r2, r3, #4
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	699a      	ldr	r2, [r3, #24]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012072:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801207a:	2b00      	cmp	r3, #0
 801207c:	d00f      	beq.n	801209e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012084:	f043 0201 	orr.w	r2, r3, #1
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	699a      	ldr	r2, [r3, #24]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801209c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d00f      	beq.n	80120c8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120ae:	f043 0208 	orr.w	r2, r3, #8
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	699a      	ldr	r2, [r3, #24]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80120c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2200      	movs	r2, #0
 80120d4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 80120d8:	bf00      	nop
 80120da:	3714      	adds	r7, #20
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60f8      	str	r0, [r7, #12]
 80120ec:	60b9      	str	r1, [r7, #8]
 80120ee:	603b      	str	r3, [r7, #0]
 80120f0:	4613      	mov	r3, r2
 80120f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80120f4:	e010      	b.n	8012118 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80120f6:	f7f5 fb63 	bl	80077c0 <HAL_GetTick>
 80120fa:	4602      	mov	r2, r0
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	1ad3      	subs	r3, r2, r3
 8012100:	69ba      	ldr	r2, [r7, #24]
 8012102:	429a      	cmp	r2, r3
 8012104:	d803      	bhi.n	801210e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8012106:	69bb      	ldr	r3, [r7, #24]
 8012108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801210c:	d102      	bne.n	8012114 <SPI_WaitOnFlagUntilTimeout+0x30>
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d101      	bne.n	8012118 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8012114:	2303      	movs	r3, #3
 8012116:	e00f      	b.n	8012138 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	695a      	ldr	r2, [r3, #20]
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	4013      	ands	r3, r2
 8012122:	68ba      	ldr	r2, [r7, #8]
 8012124:	429a      	cmp	r2, r3
 8012126:	bf0c      	ite	eq
 8012128:	2301      	moveq	r3, #1
 801212a:	2300      	movne	r3, #0
 801212c:	b2db      	uxtb	r3, r3
 801212e:	461a      	mov	r2, r3
 8012130:	79fb      	ldrb	r3, [r7, #7]
 8012132:	429a      	cmp	r2, r3
 8012134:	d0df      	beq.n	80120f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8012136:	2300      	movs	r3, #0
}
 8012138:	4618      	mov	r0, r3
 801213a:	3710      	adds	r7, #16
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}

08012140 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8012140:	b480      	push	{r7}
 8012142:	b085      	sub	sp, #20
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801214c:	095b      	lsrs	r3, r3, #5
 801214e:	3301      	adds	r3, #1
 8012150:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	3301      	adds	r3, #1
 8012158:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	3307      	adds	r3, #7
 801215e:	08db      	lsrs	r3, r3, #3
 8012160:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	68fa      	ldr	r2, [r7, #12]
 8012166:	fb02 f303 	mul.w	r3, r2, r3
}
 801216a:	4618      	mov	r0, r3
 801216c:	3714      	adds	r7, #20
 801216e:	46bd      	mov	sp, r7
 8012170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012174:	4770      	bx	lr

08012176 <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 8012176:	b480      	push	{r7}
 8012178:	b083      	sub	sp, #12
 801217a:	af00      	add	r7, sp, #0
 801217c:	6078      	str	r0, [r7, #4]
 801217e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8012186:	b2db      	uxtb	r3, r3
 8012188:	2b01      	cmp	r3, #1
 801218a:	d12e      	bne.n	80121ea <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8012192:	2b01      	cmp	r3, #1
 8012194:	d101      	bne.n	801219a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8012196:	2302      	movs	r3, #2
 8012198:	e028      	b.n	80121ec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2201      	movs	r2, #1
 801219e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2202      	movs	r2, #2
 80121a6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	681a      	ldr	r2, [r3, #0]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	f022 0201 	bic.w	r2, r2, #1
 80121b8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	681a      	ldr	r2, [r3, #0]
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80121c6:	ea42 0103 	orr.w	r1, r2, r3
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	689a      	ldr	r2, [r3, #8]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	430a      	orrs	r2, r1
 80121d4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2201      	movs	r2, #1
 80121da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2200      	movs	r2, #0
 80121e2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80121e6:	2300      	movs	r3, #0
 80121e8:	e000      	b.n	80121ec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80121ea:	2301      	movs	r3, #1
  }
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	370c      	adds	r7, #12
 80121f0:	46bd      	mov	sp, r7
 80121f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f6:	4770      	bx	lr

080121f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d101      	bne.n	801220a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8012206:	2301      	movs	r3, #1
 8012208:	e049      	b.n	801229e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012210:	b2db      	uxtb	r3, r3
 8012212:	2b00      	cmp	r3, #0
 8012214:	d106      	bne.n	8012224 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2200      	movs	r2, #0
 801221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f7f1 f9a2 	bl	8003568 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2202      	movs	r2, #2
 8012228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681a      	ldr	r2, [r3, #0]
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	3304      	adds	r3, #4
 8012234:	4619      	mov	r1, r3
 8012236:	4610      	mov	r0, r2
 8012238:	f000 f8d2 	bl	80123e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2201      	movs	r2, #1
 8012240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2201      	movs	r2, #1
 8012248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2201      	movs	r2, #1
 8012250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2201      	movs	r2, #1
 8012258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2201      	movs	r2, #1
 8012260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2201      	movs	r2, #1
 8012268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2201      	movs	r2, #1
 8012270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2201      	movs	r2, #1
 8012278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2201      	movs	r2, #1
 8012280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2201      	movs	r2, #1
 8012288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2201      	movs	r2, #1
 8012290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2201      	movs	r2, #1
 8012298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801229c:	2300      	movs	r3, #0
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3708      	adds	r7, #8
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}

080122a6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80122a6:	b580      	push	{r7, lr}
 80122a8:	b086      	sub	sp, #24
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	60f8      	str	r0, [r7, #12]
 80122ae:	60b9      	str	r1, [r7, #8]
 80122b0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80122b2:	2300      	movs	r3, #0
 80122b4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d101      	bne.n	80122c4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80122c0:	2302      	movs	r3, #2
 80122c2:	e088      	b.n	80123d6 <HAL_TIM_IC_ConfigChannel+0x130>
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	2201      	movs	r2, #1
 80122c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d11b      	bne.n	801230a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	6818      	ldr	r0, [r3, #0]
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	6819      	ldr	r1, [r3, #0]
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	685a      	ldr	r2, [r3, #4]
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	f000 f977 	bl	80125d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	699a      	ldr	r2, [r3, #24]
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f022 020c 	bic.w	r2, r2, #12
 80122f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	6999      	ldr	r1, [r3, #24]
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	689a      	ldr	r2, [r3, #8]
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	430a      	orrs	r2, r1
 8012306:	619a      	str	r2, [r3, #24]
 8012308:	e060      	b.n	80123cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2b04      	cmp	r3, #4
 801230e:	d11c      	bne.n	801234a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	6818      	ldr	r0, [r3, #0]
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	6819      	ldr	r1, [r3, #0]
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	685a      	ldr	r2, [r3, #4]
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	f000 f9ee 	bl	8012700 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	699a      	ldr	r2, [r3, #24]
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8012332:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	6999      	ldr	r1, [r3, #24]
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	689b      	ldr	r3, [r3, #8]
 801233e:	021a      	lsls	r2, r3, #8
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	430a      	orrs	r2, r1
 8012346:	619a      	str	r2, [r3, #24]
 8012348:	e040      	b.n	80123cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2b08      	cmp	r3, #8
 801234e:	d11b      	bne.n	8012388 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	6818      	ldr	r0, [r3, #0]
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	6819      	ldr	r1, [r3, #0]
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	685a      	ldr	r2, [r3, #4]
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	68db      	ldr	r3, [r3, #12]
 8012360:	f000 fa0b 	bl	801277a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	69da      	ldr	r2, [r3, #28]
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f022 020c 	bic.w	r2, r2, #12
 8012372:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	69d9      	ldr	r1, [r3, #28]
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	689a      	ldr	r2, [r3, #8]
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	430a      	orrs	r2, r1
 8012384:	61da      	str	r2, [r3, #28]
 8012386:	e021      	b.n	80123cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2b0c      	cmp	r3, #12
 801238c:	d11c      	bne.n	80123c8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	6818      	ldr	r0, [r3, #0]
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	6819      	ldr	r1, [r3, #0]
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	685a      	ldr	r2, [r3, #4]
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	f000 fa28 	bl	80127f2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	69da      	ldr	r2, [r3, #28]
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80123b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	69d9      	ldr	r1, [r3, #28]
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	689b      	ldr	r3, [r3, #8]
 80123bc:	021a      	lsls	r2, r3, #8
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	430a      	orrs	r2, r1
 80123c4:	61da      	str	r2, [r3, #28]
 80123c6:	e001      	b.n	80123cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80123c8:	2301      	movs	r3, #1
 80123ca:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2200      	movs	r2, #0
 80123d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80123d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3718      	adds	r7, #24
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
	...

080123e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80123e0:	b480      	push	{r7}
 80123e2:	b085      	sub	sp, #20
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	4a68      	ldr	r2, [pc, #416]	; (8012594 <TIM_Base_SetConfig+0x1b4>)
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d02b      	beq.n	8012450 <TIM_Base_SetConfig+0x70>
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	4a67      	ldr	r2, [pc, #412]	; (8012598 <TIM_Base_SetConfig+0x1b8>)
 80123fc:	4293      	cmp	r3, r2
 80123fe:	d027      	beq.n	8012450 <TIM_Base_SetConfig+0x70>
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012406:	d023      	beq.n	8012450 <TIM_Base_SetConfig+0x70>
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801240e:	d01f      	beq.n	8012450 <TIM_Base_SetConfig+0x70>
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	4a62      	ldr	r2, [pc, #392]	; (801259c <TIM_Base_SetConfig+0x1bc>)
 8012414:	4293      	cmp	r3, r2
 8012416:	d01b      	beq.n	8012450 <TIM_Base_SetConfig+0x70>
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	4a61      	ldr	r2, [pc, #388]	; (80125a0 <TIM_Base_SetConfig+0x1c0>)
 801241c:	4293      	cmp	r3, r2
 801241e:	d017      	beq.n	8012450 <TIM_Base_SetConfig+0x70>
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	4a60      	ldr	r2, [pc, #384]	; (80125a4 <TIM_Base_SetConfig+0x1c4>)
 8012424:	4293      	cmp	r3, r2
 8012426:	d013      	beq.n	8012450 <TIM_Base_SetConfig+0x70>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	4a5f      	ldr	r2, [pc, #380]	; (80125a8 <TIM_Base_SetConfig+0x1c8>)
 801242c:	4293      	cmp	r3, r2
 801242e:	d00f      	beq.n	8012450 <TIM_Base_SetConfig+0x70>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	4a5e      	ldr	r2, [pc, #376]	; (80125ac <TIM_Base_SetConfig+0x1cc>)
 8012434:	4293      	cmp	r3, r2
 8012436:	d00b      	beq.n	8012450 <TIM_Base_SetConfig+0x70>
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	4a5d      	ldr	r2, [pc, #372]	; (80125b0 <TIM_Base_SetConfig+0x1d0>)
 801243c:	4293      	cmp	r3, r2
 801243e:	d007      	beq.n	8012450 <TIM_Base_SetConfig+0x70>
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	4a5c      	ldr	r2, [pc, #368]	; (80125b4 <TIM_Base_SetConfig+0x1d4>)
 8012444:	4293      	cmp	r3, r2
 8012446:	d003      	beq.n	8012450 <TIM_Base_SetConfig+0x70>
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	4a5b      	ldr	r2, [pc, #364]	; (80125b8 <TIM_Base_SetConfig+0x1d8>)
 801244c:	4293      	cmp	r3, r2
 801244e:	d108      	bne.n	8012462 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	68fa      	ldr	r2, [r7, #12]
 801245e:	4313      	orrs	r3, r2
 8012460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	4a4b      	ldr	r2, [pc, #300]	; (8012594 <TIM_Base_SetConfig+0x1b4>)
 8012466:	4293      	cmp	r3, r2
 8012468:	d043      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	4a4a      	ldr	r2, [pc, #296]	; (8012598 <TIM_Base_SetConfig+0x1b8>)
 801246e:	4293      	cmp	r3, r2
 8012470:	d03f      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012478:	d03b      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012480:	d037      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	4a45      	ldr	r2, [pc, #276]	; (801259c <TIM_Base_SetConfig+0x1bc>)
 8012486:	4293      	cmp	r3, r2
 8012488:	d033      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	4a44      	ldr	r2, [pc, #272]	; (80125a0 <TIM_Base_SetConfig+0x1c0>)
 801248e:	4293      	cmp	r3, r2
 8012490:	d02f      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	4a43      	ldr	r2, [pc, #268]	; (80125a4 <TIM_Base_SetConfig+0x1c4>)
 8012496:	4293      	cmp	r3, r2
 8012498:	d02b      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	4a42      	ldr	r2, [pc, #264]	; (80125a8 <TIM_Base_SetConfig+0x1c8>)
 801249e:	4293      	cmp	r3, r2
 80124a0:	d027      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	4a41      	ldr	r2, [pc, #260]	; (80125ac <TIM_Base_SetConfig+0x1cc>)
 80124a6:	4293      	cmp	r3, r2
 80124a8:	d023      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4a40      	ldr	r2, [pc, #256]	; (80125b0 <TIM_Base_SetConfig+0x1d0>)
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d01f      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4a3f      	ldr	r2, [pc, #252]	; (80125b4 <TIM_Base_SetConfig+0x1d4>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d01b      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	4a3e      	ldr	r2, [pc, #248]	; (80125b8 <TIM_Base_SetConfig+0x1d8>)
 80124be:	4293      	cmp	r3, r2
 80124c0:	d017      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4a3d      	ldr	r2, [pc, #244]	; (80125bc <TIM_Base_SetConfig+0x1dc>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d013      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	4a3c      	ldr	r2, [pc, #240]	; (80125c0 <TIM_Base_SetConfig+0x1e0>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d00f      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	4a3b      	ldr	r2, [pc, #236]	; (80125c4 <TIM_Base_SetConfig+0x1e4>)
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d00b      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4a3a      	ldr	r2, [pc, #232]	; (80125c8 <TIM_Base_SetConfig+0x1e8>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d007      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	4a39      	ldr	r2, [pc, #228]	; (80125cc <TIM_Base_SetConfig+0x1ec>)
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d003      	beq.n	80124f2 <TIM_Base_SetConfig+0x112>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	4a38      	ldr	r2, [pc, #224]	; (80125d0 <TIM_Base_SetConfig+0x1f0>)
 80124ee:	4293      	cmp	r3, r2
 80124f0:	d108      	bne.n	8012504 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80124f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	68db      	ldr	r3, [r3, #12]
 80124fe:	68fa      	ldr	r2, [r7, #12]
 8012500:	4313      	orrs	r3, r2
 8012502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	695b      	ldr	r3, [r3, #20]
 801250e:	4313      	orrs	r3, r2
 8012510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	68fa      	ldr	r2, [r7, #12]
 8012516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	689a      	ldr	r2, [r3, #8]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	681a      	ldr	r2, [r3, #0]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	4a1a      	ldr	r2, [pc, #104]	; (8012594 <TIM_Base_SetConfig+0x1b4>)
 801252c:	4293      	cmp	r3, r2
 801252e:	d023      	beq.n	8012578 <TIM_Base_SetConfig+0x198>
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	4a19      	ldr	r2, [pc, #100]	; (8012598 <TIM_Base_SetConfig+0x1b8>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d01f      	beq.n	8012578 <TIM_Base_SetConfig+0x198>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	4a1e      	ldr	r2, [pc, #120]	; (80125b4 <TIM_Base_SetConfig+0x1d4>)
 801253c:	4293      	cmp	r3, r2
 801253e:	d01b      	beq.n	8012578 <TIM_Base_SetConfig+0x198>
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	4a1d      	ldr	r2, [pc, #116]	; (80125b8 <TIM_Base_SetConfig+0x1d8>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d017      	beq.n	8012578 <TIM_Base_SetConfig+0x198>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	4a1c      	ldr	r2, [pc, #112]	; (80125bc <TIM_Base_SetConfig+0x1dc>)
 801254c:	4293      	cmp	r3, r2
 801254e:	d013      	beq.n	8012578 <TIM_Base_SetConfig+0x198>
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	4a1b      	ldr	r2, [pc, #108]	; (80125c0 <TIM_Base_SetConfig+0x1e0>)
 8012554:	4293      	cmp	r3, r2
 8012556:	d00f      	beq.n	8012578 <TIM_Base_SetConfig+0x198>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	4a1a      	ldr	r2, [pc, #104]	; (80125c4 <TIM_Base_SetConfig+0x1e4>)
 801255c:	4293      	cmp	r3, r2
 801255e:	d00b      	beq.n	8012578 <TIM_Base_SetConfig+0x198>
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	4a19      	ldr	r2, [pc, #100]	; (80125c8 <TIM_Base_SetConfig+0x1e8>)
 8012564:	4293      	cmp	r3, r2
 8012566:	d007      	beq.n	8012578 <TIM_Base_SetConfig+0x198>
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	4a18      	ldr	r2, [pc, #96]	; (80125cc <TIM_Base_SetConfig+0x1ec>)
 801256c:	4293      	cmp	r3, r2
 801256e:	d003      	beq.n	8012578 <TIM_Base_SetConfig+0x198>
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	4a17      	ldr	r2, [pc, #92]	; (80125d0 <TIM_Base_SetConfig+0x1f0>)
 8012574:	4293      	cmp	r3, r2
 8012576:	d103      	bne.n	8012580 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	691a      	ldr	r2, [r3, #16]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2201      	movs	r2, #1
 8012584:	615a      	str	r2, [r3, #20]
}
 8012586:	bf00      	nop
 8012588:	3714      	adds	r7, #20
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr
 8012592:	bf00      	nop
 8012594:	40012c00 	.word	0x40012c00
 8012598:	50012c00 	.word	0x50012c00
 801259c:	40000400 	.word	0x40000400
 80125a0:	50000400 	.word	0x50000400
 80125a4:	40000800 	.word	0x40000800
 80125a8:	50000800 	.word	0x50000800
 80125ac:	40000c00 	.word	0x40000c00
 80125b0:	50000c00 	.word	0x50000c00
 80125b4:	40013400 	.word	0x40013400
 80125b8:	50013400 	.word	0x50013400
 80125bc:	40014000 	.word	0x40014000
 80125c0:	50014000 	.word	0x50014000
 80125c4:	40014400 	.word	0x40014400
 80125c8:	50014400 	.word	0x50014400
 80125cc:	40014800 	.word	0x40014800
 80125d0:	50014800 	.word	0x50014800

080125d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80125d4:	b480      	push	{r7}
 80125d6:	b087      	sub	sp, #28
 80125d8:	af00      	add	r7, sp, #0
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	607a      	str	r2, [r7, #4]
 80125e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	6a1b      	ldr	r3, [r3, #32]
 80125e6:	f023 0201 	bic.w	r2, r3, #1
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	699b      	ldr	r3, [r3, #24]
 80125f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	6a1b      	ldr	r3, [r3, #32]
 80125f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	4a34      	ldr	r2, [pc, #208]	; (80126d0 <TIM_TI1_SetConfig+0xfc>)
 80125fe:	4293      	cmp	r3, r2
 8012600:	d033      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	4a33      	ldr	r2, [pc, #204]	; (80126d4 <TIM_TI1_SetConfig+0x100>)
 8012606:	4293      	cmp	r3, r2
 8012608:	d02f      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012610:	d02b      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012618:	d027      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	4a2e      	ldr	r2, [pc, #184]	; (80126d8 <TIM_TI1_SetConfig+0x104>)
 801261e:	4293      	cmp	r3, r2
 8012620:	d023      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	4a2d      	ldr	r2, [pc, #180]	; (80126dc <TIM_TI1_SetConfig+0x108>)
 8012626:	4293      	cmp	r3, r2
 8012628:	d01f      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	4a2c      	ldr	r2, [pc, #176]	; (80126e0 <TIM_TI1_SetConfig+0x10c>)
 801262e:	4293      	cmp	r3, r2
 8012630:	d01b      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	4a2b      	ldr	r2, [pc, #172]	; (80126e4 <TIM_TI1_SetConfig+0x110>)
 8012636:	4293      	cmp	r3, r2
 8012638:	d017      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	4a2a      	ldr	r2, [pc, #168]	; (80126e8 <TIM_TI1_SetConfig+0x114>)
 801263e:	4293      	cmp	r3, r2
 8012640:	d013      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	4a29      	ldr	r2, [pc, #164]	; (80126ec <TIM_TI1_SetConfig+0x118>)
 8012646:	4293      	cmp	r3, r2
 8012648:	d00f      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	4a28      	ldr	r2, [pc, #160]	; (80126f0 <TIM_TI1_SetConfig+0x11c>)
 801264e:	4293      	cmp	r3, r2
 8012650:	d00b      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	4a27      	ldr	r2, [pc, #156]	; (80126f4 <TIM_TI1_SetConfig+0x120>)
 8012656:	4293      	cmp	r3, r2
 8012658:	d007      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	4a26      	ldr	r2, [pc, #152]	; (80126f8 <TIM_TI1_SetConfig+0x124>)
 801265e:	4293      	cmp	r3, r2
 8012660:	d003      	beq.n	801266a <TIM_TI1_SetConfig+0x96>
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	4a25      	ldr	r2, [pc, #148]	; (80126fc <TIM_TI1_SetConfig+0x128>)
 8012666:	4293      	cmp	r3, r2
 8012668:	d101      	bne.n	801266e <TIM_TI1_SetConfig+0x9a>
 801266a:	2301      	movs	r3, #1
 801266c:	e000      	b.n	8012670 <TIM_TI1_SetConfig+0x9c>
 801266e:	2300      	movs	r3, #0
 8012670:	2b00      	cmp	r3, #0
 8012672:	d008      	beq.n	8012686 <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	f023 0303 	bic.w	r3, r3, #3
 801267a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801267c:	697a      	ldr	r2, [r7, #20]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	4313      	orrs	r3, r2
 8012682:	617b      	str	r3, [r7, #20]
 8012684:	e003      	b.n	801268e <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	f043 0301 	orr.w	r3, r3, #1
 801268c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	011b      	lsls	r3, r3, #4
 801269a:	b2db      	uxtb	r3, r3
 801269c:	697a      	ldr	r2, [r7, #20]
 801269e:	4313      	orrs	r3, r2
 80126a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80126a2:	693b      	ldr	r3, [r7, #16]
 80126a4:	f023 030a 	bic.w	r3, r3, #10
 80126a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	f003 030a 	and.w	r3, r3, #10
 80126b0:	693a      	ldr	r2, [r7, #16]
 80126b2:	4313      	orrs	r3, r2
 80126b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	697a      	ldr	r2, [r7, #20]
 80126ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	693a      	ldr	r2, [r7, #16]
 80126c0:	621a      	str	r2, [r3, #32]
}
 80126c2:	bf00      	nop
 80126c4:	371c      	adds	r7, #28
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr
 80126ce:	bf00      	nop
 80126d0:	40012c00 	.word	0x40012c00
 80126d4:	50012c00 	.word	0x50012c00
 80126d8:	40000400 	.word	0x40000400
 80126dc:	50000400 	.word	0x50000400
 80126e0:	40000800 	.word	0x40000800
 80126e4:	50000800 	.word	0x50000800
 80126e8:	40000c00 	.word	0x40000c00
 80126ec:	50000c00 	.word	0x50000c00
 80126f0:	40013400 	.word	0x40013400
 80126f4:	50013400 	.word	0x50013400
 80126f8:	40014000 	.word	0x40014000
 80126fc:	50014000 	.word	0x50014000

08012700 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012700:	b480      	push	{r7}
 8012702:	b087      	sub	sp, #28
 8012704:	af00      	add	r7, sp, #0
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	607a      	str	r2, [r7, #4]
 801270c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	6a1b      	ldr	r3, [r3, #32]
 8012712:	f023 0210 	bic.w	r2, r3, #16
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	699b      	ldr	r3, [r3, #24]
 801271e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	6a1b      	ldr	r3, [r3, #32]
 8012724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801272c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	021b      	lsls	r3, r3, #8
 8012732:	697a      	ldr	r2, [r7, #20]
 8012734:	4313      	orrs	r3, r2
 8012736:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801273e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	031b      	lsls	r3, r3, #12
 8012744:	b29b      	uxth	r3, r3
 8012746:	697a      	ldr	r2, [r7, #20]
 8012748:	4313      	orrs	r3, r2
 801274a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012752:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	011b      	lsls	r3, r3, #4
 8012758:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801275c:	693a      	ldr	r2, [r7, #16]
 801275e:	4313      	orrs	r3, r2
 8012760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	697a      	ldr	r2, [r7, #20]
 8012766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	693a      	ldr	r2, [r7, #16]
 801276c:	621a      	str	r2, [r3, #32]
}
 801276e:	bf00      	nop
 8012770:	371c      	adds	r7, #28
 8012772:	46bd      	mov	sp, r7
 8012774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012778:	4770      	bx	lr

0801277a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801277a:	b480      	push	{r7}
 801277c:	b087      	sub	sp, #28
 801277e:	af00      	add	r7, sp, #0
 8012780:	60f8      	str	r0, [r7, #12]
 8012782:	60b9      	str	r1, [r7, #8]
 8012784:	607a      	str	r2, [r7, #4]
 8012786:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	6a1b      	ldr	r3, [r3, #32]
 801278c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	69db      	ldr	r3, [r3, #28]
 8012798:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	6a1b      	ldr	r3, [r3, #32]
 801279e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	f023 0303 	bic.w	r3, r3, #3
 80127a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80127a8:	697a      	ldr	r2, [r7, #20]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	4313      	orrs	r3, r2
 80127ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80127b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	011b      	lsls	r3, r3, #4
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	697a      	ldr	r2, [r7, #20]
 80127c0:	4313      	orrs	r3, r2
 80127c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80127ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	021b      	lsls	r3, r3, #8
 80127d0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80127d4:	693a      	ldr	r2, [r7, #16]
 80127d6:	4313      	orrs	r3, r2
 80127d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	697a      	ldr	r2, [r7, #20]
 80127de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	693a      	ldr	r2, [r7, #16]
 80127e4:	621a      	str	r2, [r3, #32]
}
 80127e6:	bf00      	nop
 80127e8:	371c      	adds	r7, #28
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr

080127f2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80127f2:	b480      	push	{r7}
 80127f4:	b087      	sub	sp, #28
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	60f8      	str	r0, [r7, #12]
 80127fa:	60b9      	str	r1, [r7, #8]
 80127fc:	607a      	str	r2, [r7, #4]
 80127fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	6a1b      	ldr	r3, [r3, #32]
 8012804:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	69db      	ldr	r3, [r3, #28]
 8012810:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	6a1b      	ldr	r3, [r3, #32]
 8012816:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801281e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	021b      	lsls	r3, r3, #8
 8012824:	697a      	ldr	r2, [r7, #20]
 8012826:	4313      	orrs	r3, r2
 8012828:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012830:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	031b      	lsls	r3, r3, #12
 8012836:	b29b      	uxth	r3, r3
 8012838:	697a      	ldr	r2, [r7, #20]
 801283a:	4313      	orrs	r3, r2
 801283c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8012844:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	031b      	lsls	r3, r3, #12
 801284a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801284e:	693a      	ldr	r2, [r7, #16]
 8012850:	4313      	orrs	r3, r2
 8012852:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	697a      	ldr	r2, [r7, #20]
 8012858:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	693a      	ldr	r2, [r7, #16]
 801285e:	621a      	str	r2, [r3, #32]
}
 8012860:	bf00      	nop
 8012862:	371c      	adds	r7, #28
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr

0801286c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801286c:	b480      	push	{r7}
 801286e:	b085      	sub	sp, #20
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801287c:	2b01      	cmp	r3, #1
 801287e:	d101      	bne.n	8012884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012880:	2302      	movs	r3, #2
 8012882:	e097      	b.n	80129b4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2201      	movs	r2, #1
 8012888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2202      	movs	r2, #2
 8012890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	689b      	ldr	r3, [r3, #8]
 80128a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	4a45      	ldr	r2, [pc, #276]	; (80129c0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d00e      	beq.n	80128cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	4a44      	ldr	r2, [pc, #272]	; (80129c4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d009      	beq.n	80128cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	4a42      	ldr	r2, [pc, #264]	; (80129c8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80128be:	4293      	cmp	r3, r2
 80128c0:	d004      	beq.n	80128cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	4a41      	ldr	r2, [pc, #260]	; (80129cc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80128c8:	4293      	cmp	r3, r2
 80128ca:	d108      	bne.n	80128de <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80128d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	68fa      	ldr	r2, [r7, #12]
 80128da:	4313      	orrs	r3, r2
 80128dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80128e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80128e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	68fa      	ldr	r2, [r7, #12]
 80128f0:	4313      	orrs	r3, r2
 80128f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	68fa      	ldr	r2, [r7, #12]
 80128fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4a2f      	ldr	r2, [pc, #188]	; (80129c0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8012902:	4293      	cmp	r3, r2
 8012904:	d040      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	4a2e      	ldr	r2, [pc, #184]	; (80129c4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 801290c:	4293      	cmp	r3, r2
 801290e:	d03b      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012918:	d036      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012922:	d031      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	4a29      	ldr	r2, [pc, #164]	; (80129d0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 801292a:	4293      	cmp	r3, r2
 801292c:	d02c      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	4a28      	ldr	r2, [pc, #160]	; (80129d4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8012934:	4293      	cmp	r3, r2
 8012936:	d027      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	4a26      	ldr	r2, [pc, #152]	; (80129d8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 801293e:	4293      	cmp	r3, r2
 8012940:	d022      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	4a25      	ldr	r2, [pc, #148]	; (80129dc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8012948:	4293      	cmp	r3, r2
 801294a:	d01d      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4a23      	ldr	r2, [pc, #140]	; (80129e0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8012952:	4293      	cmp	r3, r2
 8012954:	d018      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	4a22      	ldr	r2, [pc, #136]	; (80129e4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 801295c:	4293      	cmp	r3, r2
 801295e:	d013      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	4a18      	ldr	r2, [pc, #96]	; (80129c8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8012966:	4293      	cmp	r3, r2
 8012968:	d00e      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	4a17      	ldr	r2, [pc, #92]	; (80129cc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8012970:	4293      	cmp	r3, r2
 8012972:	d009      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	4a1b      	ldr	r2, [pc, #108]	; (80129e8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 801297a:	4293      	cmp	r3, r2
 801297c:	d004      	beq.n	8012988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	4a1a      	ldr	r2, [pc, #104]	; (80129ec <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8012984:	4293      	cmp	r3, r2
 8012986:	d10c      	bne.n	80129a2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801298e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	689b      	ldr	r3, [r3, #8]
 8012994:	68ba      	ldr	r2, [r7, #8]
 8012996:	4313      	orrs	r3, r2
 8012998:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	68ba      	ldr	r2, [r7, #8]
 80129a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2201      	movs	r2, #1
 80129a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2200      	movs	r2, #0
 80129ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80129b2:	2300      	movs	r3, #0
}
 80129b4:	4618      	mov	r0, r3
 80129b6:	3714      	adds	r7, #20
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr
 80129c0:	40012c00 	.word	0x40012c00
 80129c4:	50012c00 	.word	0x50012c00
 80129c8:	40013400 	.word	0x40013400
 80129cc:	50013400 	.word	0x50013400
 80129d0:	40000400 	.word	0x40000400
 80129d4:	50000400 	.word	0x50000400
 80129d8:	40000800 	.word	0x40000800
 80129dc:	50000800 	.word	0x50000800
 80129e0:	40000c00 	.word	0x40000c00
 80129e4:	50000c00 	.word	0x50000c00
 80129e8:	40014000 	.word	0x40014000
 80129ec:	50014000 	.word	0x50014000

080129f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d101      	bne.n	8012a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80129fe:	2301      	movs	r3, #1
 8012a00:	e042      	b.n	8012a88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d106      	bne.n	8012a1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f7f0 fdf1 	bl	80035fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2224      	movs	r2, #36	; 0x24
 8012a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f022 0201 	bic.w	r2, r2, #1
 8012a30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f000 f8d2 	bl	8012bdc <UART_SetConfig>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b01      	cmp	r3, #1
 8012a3c:	d101      	bne.n	8012a42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012a3e:	2301      	movs	r3, #1
 8012a40:	e022      	b.n	8012a88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d002      	beq.n	8012a50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f000 fa68 	bl	8012f20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	685a      	ldr	r2, [r3, #4]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	689a      	ldr	r2, [r3, #8]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f042 0201 	orr.w	r2, r2, #1
 8012a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f000 faef 	bl	8013064 <UART_CheckIdleState>
 8012a86:	4603      	mov	r3, r0
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3708      	adds	r7, #8
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b08a      	sub	sp, #40	; 0x28
 8012a94:	af02      	add	r7, sp, #8
 8012a96:	60f8      	str	r0, [r7, #12]
 8012a98:	60b9      	str	r1, [r7, #8]
 8012a9a:	603b      	str	r3, [r7, #0]
 8012a9c:	4613      	mov	r3, r2
 8012a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012aa6:	2b20      	cmp	r3, #32
 8012aa8:	f040 8092 	bne.w	8012bd0 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d002      	beq.n	8012ab8 <HAL_UART_Transmit+0x28>
 8012ab2:	88fb      	ldrh	r3, [r7, #6]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d101      	bne.n	8012abc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8012ab8:	2301      	movs	r3, #1
 8012aba:	e08a      	b.n	8012bd2 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012ac2:	2b01      	cmp	r3, #1
 8012ac4:	d101      	bne.n	8012aca <HAL_UART_Transmit+0x3a>
 8012ac6:	2302      	movs	r3, #2
 8012ac8:	e083      	b.n	8012bd2 <HAL_UART_Transmit+0x142>
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2201      	movs	r2, #1
 8012ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	689b      	ldr	r3, [r3, #8]
 8012ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012adc:	2b80      	cmp	r3, #128	; 0x80
 8012ade:	d107      	bne.n	8012af0 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	689a      	ldr	r2, [r3, #8]
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012aee:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2200      	movs	r2, #0
 8012af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	2221      	movs	r2, #33	; 0x21
 8012afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012b00:	f7f4 fe5e 	bl	80077c0 <HAL_GetTick>
 8012b04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	88fa      	ldrh	r2, [r7, #6]
 8012b0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	88fa      	ldrh	r2, [r7, #6]
 8012b12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	689b      	ldr	r3, [r3, #8]
 8012b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b1e:	d108      	bne.n	8012b32 <HAL_UART_Transmit+0xa2>
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	691b      	ldr	r3, [r3, #16]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d104      	bne.n	8012b32 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	61bb      	str	r3, [r7, #24]
 8012b30:	e003      	b.n	8012b3a <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012b36:	2300      	movs	r3, #0
 8012b38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8012b42:	e02c      	b.n	8012b9e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	9300      	str	r3, [sp, #0]
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	2180      	movs	r1, #128	; 0x80
 8012b4e:	68f8      	ldr	r0, [r7, #12]
 8012b50:	f000 fad3 	bl	80130fa <UART_WaitOnFlagUntilTimeout>
 8012b54:	4603      	mov	r3, r0
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d001      	beq.n	8012b5e <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8012b5a:	2303      	movs	r3, #3
 8012b5c:	e039      	b.n	8012bd2 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8012b5e:	69fb      	ldr	r3, [r7, #28]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d10b      	bne.n	8012b7c <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	881b      	ldrh	r3, [r3, #0]
 8012b68:	461a      	mov	r2, r3
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012b72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012b74:	69bb      	ldr	r3, [r7, #24]
 8012b76:	3302      	adds	r3, #2
 8012b78:	61bb      	str	r3, [r7, #24]
 8012b7a:	e007      	b.n	8012b8c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	781a      	ldrb	r2, [r3, #0]
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	3301      	adds	r3, #1
 8012b8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	3b01      	subs	r3, #1
 8012b96:	b29a      	uxth	r2, r3
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d1cc      	bne.n	8012b44 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	9300      	str	r3, [sp, #0]
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	2140      	movs	r1, #64	; 0x40
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	f000 faa0 	bl	80130fa <UART_WaitOnFlagUntilTimeout>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d001      	beq.n	8012bc4 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8012bc0:	2303      	movs	r3, #3
 8012bc2:	e006      	b.n	8012bd2 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	2220      	movs	r2, #32
 8012bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8012bcc:	2300      	movs	r3, #0
 8012bce:	e000      	b.n	8012bd2 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8012bd0:	2302      	movs	r3, #2
  }
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3720      	adds	r7, #32
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
	...

08012bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012be0:	b094      	sub	sp, #80	; 0x50
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012be6:	2300      	movs	r3, #0
 8012be8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8012bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	4b7e      	ldr	r3, [pc, #504]	; (8012dec <UART_SetConfig+0x210>)
 8012bf2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf6:	689a      	ldr	r2, [r3, #8]
 8012bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfa:	691b      	ldr	r3, [r3, #16]
 8012bfc:	431a      	orrs	r2, r3
 8012bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c00:	695b      	ldr	r3, [r3, #20]
 8012c02:	431a      	orrs	r2, r3
 8012c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c06:	69db      	ldr	r3, [r3, #28]
 8012c08:	4313      	orrs	r3, r2
 8012c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	4977      	ldr	r1, [pc, #476]	; (8012df0 <UART_SetConfig+0x214>)
 8012c14:	4019      	ands	r1, r3
 8012c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c18:	681a      	ldr	r2, [r3, #0]
 8012c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c1c:	430b      	orrs	r3, r1
 8012c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	685b      	ldr	r3, [r3, #4]
 8012c26:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c2c:	68d9      	ldr	r1, [r3, #12]
 8012c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	ea40 0301 	orr.w	r3, r0, r1
 8012c36:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c3a:	699b      	ldr	r3, [r3, #24]
 8012c3c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c40:	681a      	ldr	r2, [r3, #0]
 8012c42:	4b6a      	ldr	r3, [pc, #424]	; (8012dec <UART_SetConfig+0x210>)
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d009      	beq.n	8012c5c <UART_SetConfig+0x80>
 8012c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4a:	681a      	ldr	r2, [r3, #0]
 8012c4c:	4b69      	ldr	r3, [pc, #420]	; (8012df4 <UART_SetConfig+0x218>)
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d004      	beq.n	8012c5c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c54:	6a1a      	ldr	r2, [r3, #32]
 8012c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c58:	4313      	orrs	r3, r2
 8012c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	689b      	ldr	r3, [r3, #8]
 8012c62:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8012c66:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8012c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c70:	430b      	orrs	r3, r1
 8012c72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c7a:	f023 000f 	bic.w	r0, r3, #15
 8012c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c84:	681a      	ldr	r2, [r3, #0]
 8012c86:	ea40 0301 	orr.w	r3, r0, r1
 8012c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c8e:	681a      	ldr	r2, [r3, #0]
 8012c90:	4b59      	ldr	r3, [pc, #356]	; (8012df8 <UART_SetConfig+0x21c>)
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d102      	bne.n	8012c9c <UART_SetConfig+0xc0>
 8012c96:	2301      	movs	r3, #1
 8012c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8012c9a:	e029      	b.n	8012cf0 <UART_SetConfig+0x114>
 8012c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9e:	681a      	ldr	r2, [r3, #0]
 8012ca0:	4b56      	ldr	r3, [pc, #344]	; (8012dfc <UART_SetConfig+0x220>)
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d102      	bne.n	8012cac <UART_SetConfig+0xd0>
 8012ca6:	2302      	movs	r3, #2
 8012ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012caa:	e021      	b.n	8012cf0 <UART_SetConfig+0x114>
 8012cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	4b53      	ldr	r3, [pc, #332]	; (8012e00 <UART_SetConfig+0x224>)
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d102      	bne.n	8012cbc <UART_SetConfig+0xe0>
 8012cb6:	2304      	movs	r3, #4
 8012cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012cba:	e019      	b.n	8012cf0 <UART_SetConfig+0x114>
 8012cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	4b50      	ldr	r3, [pc, #320]	; (8012e04 <UART_SetConfig+0x228>)
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d102      	bne.n	8012ccc <UART_SetConfig+0xf0>
 8012cc6:	2308      	movs	r3, #8
 8012cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012cca:	e011      	b.n	8012cf0 <UART_SetConfig+0x114>
 8012ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	4b4d      	ldr	r3, [pc, #308]	; (8012e08 <UART_SetConfig+0x22c>)
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	d102      	bne.n	8012cdc <UART_SetConfig+0x100>
 8012cd6:	2310      	movs	r3, #16
 8012cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012cda:	e009      	b.n	8012cf0 <UART_SetConfig+0x114>
 8012cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	4b42      	ldr	r3, [pc, #264]	; (8012dec <UART_SetConfig+0x210>)
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d102      	bne.n	8012cec <UART_SetConfig+0x110>
 8012ce6:	2320      	movs	r3, #32
 8012ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012cea:	e001      	b.n	8012cf0 <UART_SetConfig+0x114>
 8012cec:	2300      	movs	r3, #0
 8012cee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf2:	681a      	ldr	r2, [r3, #0]
 8012cf4:	4b3d      	ldr	r3, [pc, #244]	; (8012dec <UART_SetConfig+0x210>)
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d005      	beq.n	8012d06 <UART_SetConfig+0x12a>
 8012cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	4b3d      	ldr	r3, [pc, #244]	; (8012df4 <UART_SetConfig+0x218>)
 8012d00:	429a      	cmp	r2, r3
 8012d02:	f040 8085 	bne.w	8012e10 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d08:	2200      	movs	r2, #0
 8012d0a:	623b      	str	r3, [r7, #32]
 8012d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8012d0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012d12:	f7fc f96d 	bl	800eff0 <HAL_RCCEx_GetPeriphCLKFreq>
 8012d16:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8012d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	f000 80e8 	beq.w	8012ef0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d24:	4a39      	ldr	r2, [pc, #228]	; (8012e0c <UART_SetConfig+0x230>)
 8012d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d32:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d36:	685a      	ldr	r2, [r3, #4]
 8012d38:	4613      	mov	r3, r2
 8012d3a:	005b      	lsls	r3, r3, #1
 8012d3c:	4413      	add	r3, r2
 8012d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d305      	bcc.n	8012d50 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d903      	bls.n	8012d58 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8012d50:	2301      	movs	r3, #1
 8012d52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012d56:	e048      	b.n	8012dea <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	61bb      	str	r3, [r7, #24]
 8012d5e:	61fa      	str	r2, [r7, #28]
 8012d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d64:	4a29      	ldr	r2, [pc, #164]	; (8012e0c <UART_SetConfig+0x230>)
 8012d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012d6a:	b29b      	uxth	r3, r3
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	613b      	str	r3, [r7, #16]
 8012d70:	617a      	str	r2, [r7, #20]
 8012d72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012d76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012d7a:	f7ed ff89 	bl	8000c90 <__aeabi_uldivmod>
 8012d7e:	4602      	mov	r2, r0
 8012d80:	460b      	mov	r3, r1
 8012d82:	4610      	mov	r0, r2
 8012d84:	4619      	mov	r1, r3
 8012d86:	f04f 0200 	mov.w	r2, #0
 8012d8a:	f04f 0300 	mov.w	r3, #0
 8012d8e:	020b      	lsls	r3, r1, #8
 8012d90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012d94:	0202      	lsls	r2, r0, #8
 8012d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d98:	6849      	ldr	r1, [r1, #4]
 8012d9a:	0849      	lsrs	r1, r1, #1
 8012d9c:	2000      	movs	r0, #0
 8012d9e:	460c      	mov	r4, r1
 8012da0:	4605      	mov	r5, r0
 8012da2:	eb12 0804 	adds.w	r8, r2, r4
 8012da6:	eb43 0905 	adc.w	r9, r3, r5
 8012daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	60bb      	str	r3, [r7, #8]
 8012db2:	60fa      	str	r2, [r7, #12]
 8012db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012db8:	4640      	mov	r0, r8
 8012dba:	4649      	mov	r1, r9
 8012dbc:	f7ed ff68 	bl	8000c90 <__aeabi_uldivmod>
 8012dc0:	4602      	mov	r2, r0
 8012dc2:	460b      	mov	r3, r1
 8012dc4:	4613      	mov	r3, r2
 8012dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012dce:	d308      	bcc.n	8012de2 <UART_SetConfig+0x206>
 8012dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012dd6:	d204      	bcs.n	8012de2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8012dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012dde:	60da      	str	r2, [r3, #12]
 8012de0:	e003      	b.n	8012dea <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8012de2:	2301      	movs	r3, #1
 8012de4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8012de8:	e082      	b.n	8012ef0 <UART_SetConfig+0x314>
 8012dea:	e081      	b.n	8012ef0 <UART_SetConfig+0x314>
 8012dec:	46002400 	.word	0x46002400
 8012df0:	cfff69f3 	.word	0xcfff69f3
 8012df4:	56002400 	.word	0x56002400
 8012df8:	40013800 	.word	0x40013800
 8012dfc:	40004400 	.word	0x40004400
 8012e00:	40004800 	.word	0x40004800
 8012e04:	40004c00 	.word	0x40004c00
 8012e08:	40005000 	.word	0x40005000
 8012e0c:	0801f948 	.word	0x0801f948
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e12:	69db      	ldr	r3, [r3, #28]
 8012e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e18:	d13c      	bne.n	8012e94 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	603b      	str	r3, [r7, #0]
 8012e20:	607a      	str	r2, [r7, #4]
 8012e22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012e26:	f7fc f8e3 	bl	800eff0 <HAL_RCCEx_GetPeriphCLKFreq>
 8012e2a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d05e      	beq.n	8012ef0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e36:	4a39      	ldr	r2, [pc, #228]	; (8012f1c <UART_SetConfig+0x340>)
 8012e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e44:	005a      	lsls	r2, r3, #1
 8012e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e48:	685b      	ldr	r3, [r3, #4]
 8012e4a:	085b      	lsrs	r3, r3, #1
 8012e4c:	441a      	add	r2, r3
 8012e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e56:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e5a:	2b0f      	cmp	r3, #15
 8012e5c:	d916      	bls.n	8012e8c <UART_SetConfig+0x2b0>
 8012e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e64:	d212      	bcs.n	8012e8c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	f023 030f 	bic.w	r3, r3, #15
 8012e6e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e72:	085b      	lsrs	r3, r3, #1
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	f003 0307 	and.w	r3, r3, #7
 8012e7a:	b29a      	uxth	r2, r3
 8012e7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e7e:	4313      	orrs	r3, r2
 8012e80:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8012e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012e88:	60da      	str	r2, [r3, #12]
 8012e8a:	e031      	b.n	8012ef0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012e92:	e02d      	b.n	8012ef0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e96:	2200      	movs	r2, #0
 8012e98:	469a      	mov	sl, r3
 8012e9a:	4693      	mov	fp, r2
 8012e9c:	4650      	mov	r0, sl
 8012e9e:	4659      	mov	r1, fp
 8012ea0:	f7fc f8a6 	bl	800eff0 <HAL_RCCEx_GetPeriphCLKFreq>
 8012ea4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8012ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d021      	beq.n	8012ef0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb0:	4a1a      	ldr	r2, [pc, #104]	; (8012f1c <UART_SetConfig+0x340>)
 8012eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eba:	fbb3 f2f2 	udiv	r2, r3, r2
 8012ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	085b      	lsrs	r3, r3, #1
 8012ec4:	441a      	add	r2, r3
 8012ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec8:	685b      	ldr	r3, [r3, #4]
 8012eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ece:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ed2:	2b0f      	cmp	r3, #15
 8012ed4:	d909      	bls.n	8012eea <UART_SetConfig+0x30e>
 8012ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012edc:	d205      	bcs.n	8012eea <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ee0:	b29a      	uxth	r2, r3
 8012ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	60da      	str	r2, [r3, #12]
 8012ee8:	e002      	b.n	8012ef0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8012eea:	2301      	movs	r3, #1
 8012eec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012efa:	2201      	movs	r2, #1
 8012efc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f02:	2200      	movs	r2, #0
 8012f04:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8012f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f08:	2200      	movs	r2, #0
 8012f0a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8012f0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3750      	adds	r7, #80	; 0x50
 8012f14:	46bd      	mov	sp, r7
 8012f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012f1a:	bf00      	nop
 8012f1c:	0801f948 	.word	0x0801f948

08012f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012f20:	b480      	push	{r7}
 8012f22:	b083      	sub	sp, #12
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f2c:	f003 0301 	and.w	r3, r3, #1
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d00a      	beq.n	8012f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	430a      	orrs	r2, r1
 8012f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f4e:	f003 0302 	and.w	r3, r3, #2
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d00a      	beq.n	8012f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	430a      	orrs	r2, r1
 8012f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f70:	f003 0304 	and.w	r3, r3, #4
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d00a      	beq.n	8012f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	685b      	ldr	r3, [r3, #4]
 8012f7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	430a      	orrs	r2, r1
 8012f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f92:	f003 0308 	and.w	r3, r3, #8
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d00a      	beq.n	8012fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	685b      	ldr	r3, [r3, #4]
 8012fa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	430a      	orrs	r2, r1
 8012fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fb4:	f003 0310 	and.w	r3, r3, #16
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d00a      	beq.n	8012fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	689b      	ldr	r3, [r3, #8]
 8012fc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	430a      	orrs	r2, r1
 8012fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fd6:	f003 0320 	and.w	r3, r3, #32
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d00a      	beq.n	8012ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	689b      	ldr	r3, [r3, #8]
 8012fe4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	430a      	orrs	r2, r1
 8012ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d01a      	beq.n	8013036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	685b      	ldr	r3, [r3, #4]
 8013006:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	430a      	orrs	r2, r1
 8013014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801301a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801301e:	d10a      	bne.n	8013036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	430a      	orrs	r2, r1
 8013034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801303e:	2b00      	cmp	r3, #0
 8013040:	d00a      	beq.n	8013058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	430a      	orrs	r2, r1
 8013056:	605a      	str	r2, [r3, #4]
  }
}
 8013058:	bf00      	nop
 801305a:	370c      	adds	r7, #12
 801305c:	46bd      	mov	sp, r7
 801305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013062:	4770      	bx	lr

08013064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b086      	sub	sp, #24
 8013068:	af02      	add	r7, sp, #8
 801306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2200      	movs	r2, #0
 8013070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013074:	f7f4 fba4 	bl	80077c0 <HAL_GetTick>
 8013078:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	f003 0308 	and.w	r3, r3, #8
 8013084:	2b08      	cmp	r3, #8
 8013086:	d10e      	bne.n	80130a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801308c:	9300      	str	r3, [sp, #0]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	2200      	movs	r2, #0
 8013092:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f000 f82f 	bl	80130fa <UART_WaitOnFlagUntilTimeout>
 801309c:	4603      	mov	r3, r0
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d001      	beq.n	80130a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80130a2:	2303      	movs	r3, #3
 80130a4:	e025      	b.n	80130f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	f003 0304 	and.w	r3, r3, #4
 80130b0:	2b04      	cmp	r3, #4
 80130b2:	d10e      	bne.n	80130d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80130b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80130b8:	9300      	str	r3, [sp, #0]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	2200      	movs	r2, #0
 80130be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f000 f819 	bl	80130fa <UART_WaitOnFlagUntilTimeout>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d001      	beq.n	80130d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80130ce:	2303      	movs	r3, #3
 80130d0:	e00f      	b.n	80130f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2220      	movs	r2, #32
 80130d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	2220      	movs	r2, #32
 80130de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2200      	movs	r2, #0
 80130e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2200      	movs	r2, #0
 80130ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80130f0:	2300      	movs	r3, #0
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3710      	adds	r7, #16
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}

080130fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80130fa:	b580      	push	{r7, lr}
 80130fc:	b09c      	sub	sp, #112	; 0x70
 80130fe:	af00      	add	r7, sp, #0
 8013100:	60f8      	str	r0, [r7, #12]
 8013102:	60b9      	str	r1, [r7, #8]
 8013104:	603b      	str	r3, [r7, #0]
 8013106:	4613      	mov	r3, r2
 8013108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801310a:	e0a9      	b.n	8013260 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801310c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013112:	f000 80a5 	beq.w	8013260 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013116:	f7f4 fb53 	bl	80077c0 <HAL_GetTick>
 801311a:	4602      	mov	r2, r0
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	1ad3      	subs	r3, r2, r3
 8013120:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013122:	429a      	cmp	r2, r3
 8013124:	d302      	bcc.n	801312c <UART_WaitOnFlagUntilTimeout+0x32>
 8013126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013128:	2b00      	cmp	r3, #0
 801312a:	d140      	bne.n	80131ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013134:	e853 3f00 	ldrex	r3, [r3]
 8013138:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801313a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801313c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013140:	667b      	str	r3, [r7, #100]	; 0x64
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	461a      	mov	r2, r3
 8013148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801314a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801314c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801314e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013152:	e841 2300 	strex	r3, r2, [r1]
 8013156:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801315a:	2b00      	cmp	r3, #0
 801315c:	d1e6      	bne.n	801312c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	3308      	adds	r3, #8
 8013164:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013168:	e853 3f00 	ldrex	r3, [r3]
 801316c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013170:	f023 0301 	bic.w	r3, r3, #1
 8013174:	663b      	str	r3, [r7, #96]	; 0x60
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	3308      	adds	r3, #8
 801317c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801317e:	64ba      	str	r2, [r7, #72]	; 0x48
 8013180:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013186:	e841 2300 	strex	r3, r2, [r1]
 801318a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801318e:	2b00      	cmp	r3, #0
 8013190:	d1e5      	bne.n	801315e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2220      	movs	r2, #32
 8013196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2220      	movs	r2, #32
 801319e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	2200      	movs	r2, #0
 80131a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80131aa:	2303      	movs	r3, #3
 80131ac:	e069      	b.n	8013282 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	f003 0304 	and.w	r3, r3, #4
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d051      	beq.n	8013260 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	69db      	ldr	r3, [r3, #28]
 80131c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80131c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80131ca:	d149      	bne.n	8013260 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80131d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131de:	e853 3f00 	ldrex	r3, [r3]
 80131e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80131e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80131ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	461a      	mov	r2, r3
 80131f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80131f4:	637b      	str	r3, [r7, #52]	; 0x34
 80131f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80131fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131fc:	e841 2300 	strex	r3, r2, [r1]
 8013200:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013204:	2b00      	cmp	r3, #0
 8013206:	d1e6      	bne.n	80131d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	3308      	adds	r3, #8
 801320e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	e853 3f00 	ldrex	r3, [r3]
 8013216:	613b      	str	r3, [r7, #16]
   return(result);
 8013218:	693b      	ldr	r3, [r7, #16]
 801321a:	f023 0301 	bic.w	r3, r3, #1
 801321e:	66bb      	str	r3, [r7, #104]	; 0x68
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	3308      	adds	r3, #8
 8013226:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013228:	623a      	str	r2, [r7, #32]
 801322a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801322c:	69f9      	ldr	r1, [r7, #28]
 801322e:	6a3a      	ldr	r2, [r7, #32]
 8013230:	e841 2300 	strex	r3, r2, [r1]
 8013234:	61bb      	str	r3, [r7, #24]
   return(result);
 8013236:	69bb      	ldr	r3, [r7, #24]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d1e5      	bne.n	8013208 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	2220      	movs	r2, #32
 8013240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2220      	movs	r2, #32
 8013248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2220      	movs	r2, #32
 8013250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	2200      	movs	r2, #0
 8013258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801325c:	2303      	movs	r3, #3
 801325e:	e010      	b.n	8013282 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	69da      	ldr	r2, [r3, #28]
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	4013      	ands	r3, r2
 801326a:	68ba      	ldr	r2, [r7, #8]
 801326c:	429a      	cmp	r2, r3
 801326e:	bf0c      	ite	eq
 8013270:	2301      	moveq	r3, #1
 8013272:	2300      	movne	r3, #0
 8013274:	b2db      	uxtb	r3, r3
 8013276:	461a      	mov	r2, r3
 8013278:	79fb      	ldrb	r3, [r7, #7]
 801327a:	429a      	cmp	r2, r3
 801327c:	f43f af46 	beq.w	801310c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013280:	2300      	movs	r3, #0
}
 8013282:	4618      	mov	r0, r3
 8013284:	3770      	adds	r7, #112	; 0x70
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}

0801328a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801328a:	b480      	push	{r7}
 801328c:	b085      	sub	sp, #20
 801328e:	af00      	add	r7, sp, #0
 8013290:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013298:	2b01      	cmp	r3, #1
 801329a:	d101      	bne.n	80132a0 <HAL_UARTEx_DisableFifoMode+0x16>
 801329c:	2302      	movs	r3, #2
 801329e:	e027      	b.n	80132f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2201      	movs	r2, #1
 80132a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2224      	movs	r2, #36	; 0x24
 80132ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	f022 0201 	bic.w	r2, r2, #1
 80132c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80132ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2200      	movs	r2, #0
 80132d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	68fa      	ldr	r2, [r7, #12]
 80132dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2220      	movs	r2, #32
 80132e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2200      	movs	r2, #0
 80132ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80132ee:	2300      	movs	r3, #0
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3714      	adds	r7, #20
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr

080132fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b084      	sub	sp, #16
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
 8013304:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801330c:	2b01      	cmp	r3, #1
 801330e:	d101      	bne.n	8013314 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013310:	2302      	movs	r3, #2
 8013312:	e02d      	b.n	8013370 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2201      	movs	r2, #1
 8013318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2224      	movs	r2, #36	; 0x24
 8013320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	f022 0201 	bic.w	r2, r2, #1
 801333a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	689b      	ldr	r3, [r3, #8]
 8013342:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	683a      	ldr	r2, [r7, #0]
 801334c:	430a      	orrs	r2, r1
 801334e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f000 f84f 	bl	80133f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	68fa      	ldr	r2, [r7, #12]
 801335c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2220      	movs	r2, #32
 8013362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2200      	movs	r2, #0
 801336a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801336e:	2300      	movs	r3, #0
}
 8013370:	4618      	mov	r0, r3
 8013372:	3710      	adds	r7, #16
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}

08013378 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b084      	sub	sp, #16
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013388:	2b01      	cmp	r3, #1
 801338a:	d101      	bne.n	8013390 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801338c:	2302      	movs	r3, #2
 801338e:	e02d      	b.n	80133ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2201      	movs	r2, #1
 8013394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2224      	movs	r2, #36	; 0x24
 801339c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	f022 0201 	bic.w	r2, r2, #1
 80133b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	689b      	ldr	r3, [r3, #8]
 80133be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	683a      	ldr	r2, [r7, #0]
 80133c8:	430a      	orrs	r2, r1
 80133ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f000 f811 	bl	80133f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	68fa      	ldr	r2, [r7, #12]
 80133d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	2220      	movs	r2, #32
 80133de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2200      	movs	r2, #0
 80133e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80133ea:	2300      	movs	r3, #0
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	3710      	adds	r7, #16
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd80      	pop	{r7, pc}

080133f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80133f4:	b480      	push	{r7}
 80133f6:	b085      	sub	sp, #20
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013400:	2b00      	cmp	r3, #0
 8013402:	d108      	bne.n	8013416 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2201      	movs	r2, #1
 8013408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2201      	movs	r2, #1
 8013410:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013414:	e031      	b.n	801347a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013416:	2308      	movs	r3, #8
 8013418:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801341a:	2308      	movs	r3, #8
 801341c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	0e5b      	lsrs	r3, r3, #25
 8013426:	b2db      	uxtb	r3, r3
 8013428:	f003 0307 	and.w	r3, r3, #7
 801342c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	689b      	ldr	r3, [r3, #8]
 8013434:	0f5b      	lsrs	r3, r3, #29
 8013436:	b2db      	uxtb	r3, r3
 8013438:	f003 0307 	and.w	r3, r3, #7
 801343c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801343e:	7bbb      	ldrb	r3, [r7, #14]
 8013440:	7b3a      	ldrb	r2, [r7, #12]
 8013442:	4911      	ldr	r1, [pc, #68]	; (8013488 <UARTEx_SetNbDataToProcess+0x94>)
 8013444:	5c8a      	ldrb	r2, [r1, r2]
 8013446:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801344a:	7b3a      	ldrb	r2, [r7, #12]
 801344c:	490f      	ldr	r1, [pc, #60]	; (801348c <UARTEx_SetNbDataToProcess+0x98>)
 801344e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013450:	fb93 f3f2 	sdiv	r3, r3, r2
 8013454:	b29a      	uxth	r2, r3
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801345c:	7bfb      	ldrb	r3, [r7, #15]
 801345e:	7b7a      	ldrb	r2, [r7, #13]
 8013460:	4909      	ldr	r1, [pc, #36]	; (8013488 <UARTEx_SetNbDataToProcess+0x94>)
 8013462:	5c8a      	ldrb	r2, [r1, r2]
 8013464:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013468:	7b7a      	ldrb	r2, [r7, #13]
 801346a:	4908      	ldr	r1, [pc, #32]	; (801348c <UARTEx_SetNbDataToProcess+0x98>)
 801346c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801346e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013472:	b29a      	uxth	r2, r3
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801347a:	bf00      	nop
 801347c:	3714      	adds	r7, #20
 801347e:	46bd      	mov	sp, r7
 8013480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013484:	4770      	bx	lr
 8013486:	bf00      	nop
 8013488:	0801f960 	.word	0x0801f960
 801348c:	0801f968 	.word	0x0801f968

08013490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013490:	b084      	sub	sp, #16
 8013492:	b580      	push	{r7, lr}
 8013494:	b084      	sub	sp, #16
 8013496:	af00      	add	r7, sp, #0
 8013498:	6078      	str	r0, [r7, #4]
 801349a:	f107 001c 	add.w	r0, r7, #28
 801349e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f001 fbbc 	bl	8014c2c <USB_CoreReset>
 80134b4:	4603      	mov	r3, r0
 80134b6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80134b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d106      	bne.n	80134cc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	639a      	str	r2, [r3, #56]	; 0x38
 80134ca:	e005      	b.n	80134d8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 80134d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3710      	adds	r7, #16
 80134de:	46bd      	mov	sp, r7
 80134e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80134e4:	b004      	add	sp, #16
 80134e6:	4770      	bx	lr

080134e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80134e8:	b480      	push	{r7}
 80134ea:	b087      	sub	sp, #28
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	60f8      	str	r0, [r7, #12]
 80134f0:	60b9      	str	r1, [r7, #8]
 80134f2:	4613      	mov	r3, r2
 80134f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80134f6:	79fb      	ldrb	r3, [r7, #7]
 80134f8:	2b02      	cmp	r3, #2
 80134fa:	d165      	bne.n	80135c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	4a41      	ldr	r2, [pc, #260]	; (8013604 <USB_SetTurnaroundTime+0x11c>)
 8013500:	4293      	cmp	r3, r2
 8013502:	d906      	bls.n	8013512 <USB_SetTurnaroundTime+0x2a>
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	4a40      	ldr	r2, [pc, #256]	; (8013608 <USB_SetTurnaroundTime+0x120>)
 8013508:	4293      	cmp	r3, r2
 801350a:	d202      	bcs.n	8013512 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801350c:	230f      	movs	r3, #15
 801350e:	617b      	str	r3, [r7, #20]
 8013510:	e062      	b.n	80135d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	4a3c      	ldr	r2, [pc, #240]	; (8013608 <USB_SetTurnaroundTime+0x120>)
 8013516:	4293      	cmp	r3, r2
 8013518:	d306      	bcc.n	8013528 <USB_SetTurnaroundTime+0x40>
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	4a3b      	ldr	r2, [pc, #236]	; (801360c <USB_SetTurnaroundTime+0x124>)
 801351e:	4293      	cmp	r3, r2
 8013520:	d202      	bcs.n	8013528 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013522:	230e      	movs	r3, #14
 8013524:	617b      	str	r3, [r7, #20]
 8013526:	e057      	b.n	80135d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	4a38      	ldr	r2, [pc, #224]	; (801360c <USB_SetTurnaroundTime+0x124>)
 801352c:	4293      	cmp	r3, r2
 801352e:	d306      	bcc.n	801353e <USB_SetTurnaroundTime+0x56>
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	4a37      	ldr	r2, [pc, #220]	; (8013610 <USB_SetTurnaroundTime+0x128>)
 8013534:	4293      	cmp	r3, r2
 8013536:	d202      	bcs.n	801353e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013538:	230d      	movs	r3, #13
 801353a:	617b      	str	r3, [r7, #20]
 801353c:	e04c      	b.n	80135d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	4a33      	ldr	r2, [pc, #204]	; (8013610 <USB_SetTurnaroundTime+0x128>)
 8013542:	4293      	cmp	r3, r2
 8013544:	d306      	bcc.n	8013554 <USB_SetTurnaroundTime+0x6c>
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	4a32      	ldr	r2, [pc, #200]	; (8013614 <USB_SetTurnaroundTime+0x12c>)
 801354a:	4293      	cmp	r3, r2
 801354c:	d802      	bhi.n	8013554 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801354e:	230c      	movs	r3, #12
 8013550:	617b      	str	r3, [r7, #20]
 8013552:	e041      	b.n	80135d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	4a2f      	ldr	r2, [pc, #188]	; (8013614 <USB_SetTurnaroundTime+0x12c>)
 8013558:	4293      	cmp	r3, r2
 801355a:	d906      	bls.n	801356a <USB_SetTurnaroundTime+0x82>
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	4a2e      	ldr	r2, [pc, #184]	; (8013618 <USB_SetTurnaroundTime+0x130>)
 8013560:	4293      	cmp	r3, r2
 8013562:	d802      	bhi.n	801356a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013564:	230b      	movs	r3, #11
 8013566:	617b      	str	r3, [r7, #20]
 8013568:	e036      	b.n	80135d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	4a2a      	ldr	r2, [pc, #168]	; (8013618 <USB_SetTurnaroundTime+0x130>)
 801356e:	4293      	cmp	r3, r2
 8013570:	d906      	bls.n	8013580 <USB_SetTurnaroundTime+0x98>
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	4a29      	ldr	r2, [pc, #164]	; (801361c <USB_SetTurnaroundTime+0x134>)
 8013576:	4293      	cmp	r3, r2
 8013578:	d802      	bhi.n	8013580 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801357a:	230a      	movs	r3, #10
 801357c:	617b      	str	r3, [r7, #20]
 801357e:	e02b      	b.n	80135d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	4a26      	ldr	r2, [pc, #152]	; (801361c <USB_SetTurnaroundTime+0x134>)
 8013584:	4293      	cmp	r3, r2
 8013586:	d906      	bls.n	8013596 <USB_SetTurnaroundTime+0xae>
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	4a25      	ldr	r2, [pc, #148]	; (8013620 <USB_SetTurnaroundTime+0x138>)
 801358c:	4293      	cmp	r3, r2
 801358e:	d202      	bcs.n	8013596 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013590:	2309      	movs	r3, #9
 8013592:	617b      	str	r3, [r7, #20]
 8013594:	e020      	b.n	80135d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	4a21      	ldr	r2, [pc, #132]	; (8013620 <USB_SetTurnaroundTime+0x138>)
 801359a:	4293      	cmp	r3, r2
 801359c:	d306      	bcc.n	80135ac <USB_SetTurnaroundTime+0xc4>
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	4a20      	ldr	r2, [pc, #128]	; (8013624 <USB_SetTurnaroundTime+0x13c>)
 80135a2:	4293      	cmp	r3, r2
 80135a4:	d802      	bhi.n	80135ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80135a6:	2308      	movs	r3, #8
 80135a8:	617b      	str	r3, [r7, #20]
 80135aa:	e015      	b.n	80135d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	4a1d      	ldr	r2, [pc, #116]	; (8013624 <USB_SetTurnaroundTime+0x13c>)
 80135b0:	4293      	cmp	r3, r2
 80135b2:	d906      	bls.n	80135c2 <USB_SetTurnaroundTime+0xda>
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	4a1c      	ldr	r2, [pc, #112]	; (8013628 <USB_SetTurnaroundTime+0x140>)
 80135b8:	4293      	cmp	r3, r2
 80135ba:	d202      	bcs.n	80135c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80135bc:	2307      	movs	r3, #7
 80135be:	617b      	str	r3, [r7, #20]
 80135c0:	e00a      	b.n	80135d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80135c2:	2306      	movs	r3, #6
 80135c4:	617b      	str	r3, [r7, #20]
 80135c6:	e007      	b.n	80135d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80135c8:	79fb      	ldrb	r3, [r7, #7]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d102      	bne.n	80135d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80135ce:	2309      	movs	r3, #9
 80135d0:	617b      	str	r3, [r7, #20]
 80135d2:	e001      	b.n	80135d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80135d4:	2309      	movs	r3, #9
 80135d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	68db      	ldr	r3, [r3, #12]
 80135dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	68da      	ldr	r2, [r3, #12]
 80135e8:	697b      	ldr	r3, [r7, #20]
 80135ea:	029b      	lsls	r3, r3, #10
 80135ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80135f0:	431a      	orrs	r2, r3
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80135f6:	2300      	movs	r3, #0
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	371c      	adds	r7, #28
 80135fc:	46bd      	mov	sp, r7
 80135fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013602:	4770      	bx	lr
 8013604:	00d8acbf 	.word	0x00d8acbf
 8013608:	00e4e1c0 	.word	0x00e4e1c0
 801360c:	00f42400 	.word	0x00f42400
 8013610:	01067380 	.word	0x01067380
 8013614:	011a499f 	.word	0x011a499f
 8013618:	01312cff 	.word	0x01312cff
 801361c:	014ca43f 	.word	0x014ca43f
 8013620:	016e3600 	.word	0x016e3600
 8013624:	01a6ab1f 	.word	0x01a6ab1f
 8013628:	01e84800 	.word	0x01e84800

0801362c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801362c:	b480      	push	{r7}
 801362e:	b083      	sub	sp, #12
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	689b      	ldr	r3, [r3, #8]
 8013638:	f043 0201 	orr.w	r2, r3, #1
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013640:	2300      	movs	r3, #0
}
 8013642:	4618      	mov	r0, r3
 8013644:	370c      	adds	r7, #12
 8013646:	46bd      	mov	sp, r7
 8013648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364c:	4770      	bx	lr

0801364e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801364e:	b480      	push	{r7}
 8013650:	b083      	sub	sp, #12
 8013652:	af00      	add	r7, sp, #0
 8013654:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	689b      	ldr	r3, [r3, #8]
 801365a:	f023 0201 	bic.w	r2, r3, #1
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013662:	2300      	movs	r3, #0
}
 8013664:	4618      	mov	r0, r3
 8013666:	370c      	adds	r7, #12
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr

08013670 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	460b      	mov	r3, r1
 801367a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801367c:	2300      	movs	r3, #0
 801367e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	68db      	ldr	r3, [r3, #12]
 8013684:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801368c:	78fb      	ldrb	r3, [r7, #3]
 801368e:	2b01      	cmp	r3, #1
 8013690:	d115      	bne.n	80136be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	68db      	ldr	r3, [r3, #12]
 8013696:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801369e:	2001      	movs	r0, #1
 80136a0:	f003 fcae 	bl	8017000 <HAL_Delay>
      ms++;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	3301      	adds	r3, #1
 80136a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f001 fa2f 	bl	8014b0e <USB_GetMode>
 80136b0:	4603      	mov	r3, r0
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d01e      	beq.n	80136f4 <USB_SetCurrentMode+0x84>
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	2b31      	cmp	r3, #49	; 0x31
 80136ba:	d9f0      	bls.n	801369e <USB_SetCurrentMode+0x2e>
 80136bc:	e01a      	b.n	80136f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80136be:	78fb      	ldrb	r3, [r7, #3]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d115      	bne.n	80136f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80136d0:	2001      	movs	r0, #1
 80136d2:	f003 fc95 	bl	8017000 <HAL_Delay>
      ms++;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	3301      	adds	r3, #1
 80136da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f001 fa16 	bl	8014b0e <USB_GetMode>
 80136e2:	4603      	mov	r3, r0
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d005      	beq.n	80136f4 <USB_SetCurrentMode+0x84>
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2b31      	cmp	r3, #49	; 0x31
 80136ec:	d9f0      	bls.n	80136d0 <USB_SetCurrentMode+0x60>
 80136ee:	e001      	b.n	80136f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80136f0:	2301      	movs	r3, #1
 80136f2:	e005      	b.n	8013700 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	2b32      	cmp	r3, #50	; 0x32
 80136f8:	d101      	bne.n	80136fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80136fa:	2301      	movs	r3, #1
 80136fc:	e000      	b.n	8013700 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80136fe:	2300      	movs	r3, #0
}
 8013700:	4618      	mov	r0, r3
 8013702:	3710      	adds	r7, #16
 8013704:	46bd      	mov	sp, r7
 8013706:	bd80      	pop	{r7, pc}

08013708 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013708:	b084      	sub	sp, #16
 801370a:	b580      	push	{r7, lr}
 801370c:	b086      	sub	sp, #24
 801370e:	af00      	add	r7, sp, #0
 8013710:	6078      	str	r0, [r7, #4]
 8013712:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801371a:	2300      	movs	r3, #0
 801371c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013722:	2300      	movs	r3, #0
 8013724:	613b      	str	r3, [r7, #16]
 8013726:	e009      	b.n	801373c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013728:	687a      	ldr	r2, [r7, #4]
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	3340      	adds	r3, #64	; 0x40
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	4413      	add	r3, r2
 8013732:	2200      	movs	r2, #0
 8013734:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	3301      	adds	r3, #1
 801373a:	613b      	str	r3, [r7, #16]
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	2b0e      	cmp	r3, #14
 8013740:	d9f2      	bls.n	8013728 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013744:	2b00      	cmp	r3, #0
 8013746:	d11c      	bne.n	8013782 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	68fa      	ldr	r2, [r7, #12]
 8013752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013756:	f043 0302 	orr.w	r3, r3, #2
 801375a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013760:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	601a      	str	r2, [r3, #0]
 8013780:	e005      	b.n	801378e <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013786:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013794:	461a      	mov	r2, r3
 8013796:	2300      	movs	r3, #0
 8013798:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137a0:	4619      	mov	r1, r3
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137a8:	461a      	mov	r2, r3
 80137aa:	680b      	ldr	r3, [r1, #0]
 80137ac:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80137ae:	2103      	movs	r1, #3
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f000 f95b 	bl	8013a6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80137b6:	2110      	movs	r1, #16
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f000 f8f3 	bl	80139a4 <USB_FlushTxFifo>
 80137be:	4603      	mov	r3, r0
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d001      	beq.n	80137c8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80137c4:	2301      	movs	r3, #1
 80137c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f000 f91f 	bl	8013a0c <USB_FlushRxFifo>
 80137ce:	4603      	mov	r3, r0
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d001      	beq.n	80137d8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80137d4:	2301      	movs	r3, #1
 80137d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137de:	461a      	mov	r2, r3
 80137e0:	2300      	movs	r3, #0
 80137e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137ea:	461a      	mov	r2, r3
 80137ec:	2300      	movs	r3, #0
 80137ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137f6:	461a      	mov	r2, r3
 80137f8:	2300      	movs	r3, #0
 80137fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80137fc:	2300      	movs	r3, #0
 80137fe:	613b      	str	r3, [r7, #16]
 8013800:	e043      	b.n	801388a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	015a      	lsls	r2, r3, #5
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	4413      	add	r3, r2
 801380a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013818:	d118      	bne.n	801384c <USB_DevInit+0x144>
    {
      if (i == 0U)
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d10a      	bne.n	8013836 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013820:	693b      	ldr	r3, [r7, #16]
 8013822:	015a      	lsls	r2, r3, #5
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	4413      	add	r3, r2
 8013828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801382c:	461a      	mov	r2, r3
 801382e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013832:	6013      	str	r3, [r2, #0]
 8013834:	e013      	b.n	801385e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013836:	693b      	ldr	r3, [r7, #16]
 8013838:	015a      	lsls	r2, r3, #5
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	4413      	add	r3, r2
 801383e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013842:	461a      	mov	r2, r3
 8013844:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013848:	6013      	str	r3, [r2, #0]
 801384a:	e008      	b.n	801385e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	015a      	lsls	r2, r3, #5
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	4413      	add	r3, r2
 8013854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013858:	461a      	mov	r2, r3
 801385a:	2300      	movs	r3, #0
 801385c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	015a      	lsls	r2, r3, #5
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	4413      	add	r3, r2
 8013866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801386a:	461a      	mov	r2, r3
 801386c:	2300      	movs	r3, #0
 801386e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	015a      	lsls	r2, r3, #5
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	4413      	add	r3, r2
 8013878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801387c:	461a      	mov	r2, r3
 801387e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013882:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	3301      	adds	r3, #1
 8013888:	613b      	str	r3, [r7, #16]
 801388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388c:	693a      	ldr	r2, [r7, #16]
 801388e:	429a      	cmp	r2, r3
 8013890:	d3b7      	bcc.n	8013802 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013892:	2300      	movs	r3, #0
 8013894:	613b      	str	r3, [r7, #16]
 8013896:	e043      	b.n	8013920 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	015a      	lsls	r2, r3, #5
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	4413      	add	r3, r2
 80138a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138ae:	d118      	bne.n	80138e2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80138b0:	693b      	ldr	r3, [r7, #16]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d10a      	bne.n	80138cc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	015a      	lsls	r2, r3, #5
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	4413      	add	r3, r2
 80138be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138c2:	461a      	mov	r2, r3
 80138c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80138c8:	6013      	str	r3, [r2, #0]
 80138ca:	e013      	b.n	80138f4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	015a      	lsls	r2, r3, #5
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	4413      	add	r3, r2
 80138d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138d8:	461a      	mov	r2, r3
 80138da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80138de:	6013      	str	r3, [r2, #0]
 80138e0:	e008      	b.n	80138f4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	015a      	lsls	r2, r3, #5
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	4413      	add	r3, r2
 80138ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138ee:	461a      	mov	r2, r3
 80138f0:	2300      	movs	r3, #0
 80138f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80138f4:	693b      	ldr	r3, [r7, #16]
 80138f6:	015a      	lsls	r2, r3, #5
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	4413      	add	r3, r2
 80138fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013900:	461a      	mov	r2, r3
 8013902:	2300      	movs	r3, #0
 8013904:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	015a      	lsls	r2, r3, #5
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	4413      	add	r3, r2
 801390e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013912:	461a      	mov	r2, r3
 8013914:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013918:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	3301      	adds	r3, #1
 801391e:	613b      	str	r3, [r7, #16]
 8013920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013922:	693a      	ldr	r2, [r7, #16]
 8013924:	429a      	cmp	r2, r3
 8013926:	d3b7      	bcc.n	8013898 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801392e:	691b      	ldr	r3, [r3, #16]
 8013930:	68fa      	ldr	r2, [r7, #12]
 8013932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801393a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2200      	movs	r2, #0
 8013940:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013948:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394c:	2b00      	cmp	r3, #0
 801394e:	d105      	bne.n	801395c <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	699b      	ldr	r3, [r3, #24]
 8013954:	f043 0210 	orr.w	r2, r3, #16
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	699a      	ldr	r2, [r3, #24]
 8013960:	4b0f      	ldr	r3, [pc, #60]	; (80139a0 <USB_DevInit+0x298>)
 8013962:	4313      	orrs	r3, r2
 8013964:	687a      	ldr	r2, [r7, #4]
 8013966:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801396a:	2b00      	cmp	r3, #0
 801396c:	d005      	beq.n	801397a <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	699b      	ldr	r3, [r3, #24]
 8013972:	f043 0208 	orr.w	r2, r3, #8
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801397a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801397c:	2b01      	cmp	r3, #1
 801397e:	d107      	bne.n	8013990 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	699b      	ldr	r3, [r3, #24]
 8013984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013988:	f043 0304 	orr.w	r3, r3, #4
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013990:	7dfb      	ldrb	r3, [r7, #23]
}
 8013992:	4618      	mov	r0, r3
 8013994:	3718      	adds	r7, #24
 8013996:	46bd      	mov	sp, r7
 8013998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801399c:	b004      	add	sp, #16
 801399e:	4770      	bx	lr
 80139a0:	803c3800 	.word	0x803c3800

080139a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80139a4:	b480      	push	{r7}
 80139a6:	b085      	sub	sp, #20
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80139ae:	2300      	movs	r3, #0
 80139b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	3301      	adds	r3, #1
 80139b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	4a13      	ldr	r2, [pc, #76]	; (8013a08 <USB_FlushTxFifo+0x64>)
 80139bc:	4293      	cmp	r3, r2
 80139be:	d901      	bls.n	80139c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80139c0:	2303      	movs	r3, #3
 80139c2:	e01b      	b.n	80139fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	691b      	ldr	r3, [r3, #16]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	daf2      	bge.n	80139b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80139cc:	2300      	movs	r3, #0
 80139ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	019b      	lsls	r3, r3, #6
 80139d4:	f043 0220 	orr.w	r2, r3, #32
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	3301      	adds	r3, #1
 80139e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	4a08      	ldr	r2, [pc, #32]	; (8013a08 <USB_FlushTxFifo+0x64>)
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d901      	bls.n	80139ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80139ea:	2303      	movs	r3, #3
 80139ec:	e006      	b.n	80139fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	691b      	ldr	r3, [r3, #16]
 80139f2:	f003 0320 	and.w	r3, r3, #32
 80139f6:	2b20      	cmp	r3, #32
 80139f8:	d0f0      	beq.n	80139dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80139fa:	2300      	movs	r3, #0
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3714      	adds	r7, #20
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr
 8013a08:	00030d40 	.word	0x00030d40

08013a0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	b085      	sub	sp, #20
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013a14:	2300      	movs	r3, #0
 8013a16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	4a11      	ldr	r2, [pc, #68]	; (8013a68 <USB_FlushRxFifo+0x5c>)
 8013a22:	4293      	cmp	r3, r2
 8013a24:	d901      	bls.n	8013a2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013a26:	2303      	movs	r3, #3
 8013a28:	e018      	b.n	8013a5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	691b      	ldr	r3, [r3, #16]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	daf2      	bge.n	8013a18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013a32:	2300      	movs	r3, #0
 8013a34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2210      	movs	r2, #16
 8013a3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	3301      	adds	r3, #1
 8013a40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	4a08      	ldr	r2, [pc, #32]	; (8013a68 <USB_FlushRxFifo+0x5c>)
 8013a46:	4293      	cmp	r3, r2
 8013a48:	d901      	bls.n	8013a4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013a4a:	2303      	movs	r3, #3
 8013a4c:	e006      	b.n	8013a5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	691b      	ldr	r3, [r3, #16]
 8013a52:	f003 0310 	and.w	r3, r3, #16
 8013a56:	2b10      	cmp	r3, #16
 8013a58:	d0f0      	beq.n	8013a3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013a5a:	2300      	movs	r3, #0
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	3714      	adds	r7, #20
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr
 8013a68:	00030d40 	.word	0x00030d40

08013a6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013a6c:	b480      	push	{r7}
 8013a6e:	b085      	sub	sp, #20
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	460b      	mov	r3, r1
 8013a76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a82:	681a      	ldr	r2, [r3, #0]
 8013a84:	78fb      	ldrb	r3, [r7, #3]
 8013a86:	68f9      	ldr	r1, [r7, #12]
 8013a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a8c:	4313      	orrs	r3, r2
 8013a8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013a90:	2300      	movs	r3, #0
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3714      	adds	r7, #20
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr

08013a9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013a9e:	b480      	push	{r7}
 8013aa0:	b087      	sub	sp, #28
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013aaa:	693b      	ldr	r3, [r7, #16]
 8013aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ab0:	689b      	ldr	r3, [r3, #8]
 8013ab2:	f003 0306 	and.w	r3, r3, #6
 8013ab6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d102      	bne.n	8013ac4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	75fb      	strb	r3, [r7, #23]
 8013ac2:	e00a      	b.n	8013ada <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	2b02      	cmp	r3, #2
 8013ac8:	d002      	beq.n	8013ad0 <USB_GetDevSpeed+0x32>
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2b06      	cmp	r3, #6
 8013ace:	d102      	bne.n	8013ad6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013ad0:	2302      	movs	r3, #2
 8013ad2:	75fb      	strb	r3, [r7, #23]
 8013ad4:	e001      	b.n	8013ada <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013ad6:	230f      	movs	r3, #15
 8013ad8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	371c      	adds	r7, #28
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae6:	4770      	bx	lr

08013ae8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013ae8:	b480      	push	{r7}
 8013aea:	b085      	sub	sp, #20
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	785b      	ldrb	r3, [r3, #1]
 8013b00:	2b01      	cmp	r3, #1
 8013b02:	d13a      	bne.n	8013b7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b0a:	69da      	ldr	r2, [r3, #28]
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	f003 030f 	and.w	r3, r3, #15
 8013b14:	2101      	movs	r1, #1
 8013b16:	fa01 f303 	lsl.w	r3, r1, r3
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	68f9      	ldr	r1, [r7, #12]
 8013b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b22:	4313      	orrs	r3, r2
 8013b24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	015a      	lsls	r2, r3, #5
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d155      	bne.n	8013be8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	015a      	lsls	r2, r3, #5
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	4413      	add	r3, r2
 8013b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	68db      	ldr	r3, [r3, #12]
 8013b4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	791b      	ldrb	r3, [r3, #4]
 8013b56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013b58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	059b      	lsls	r3, r3, #22
 8013b5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013b60:	4313      	orrs	r3, r2
 8013b62:	68ba      	ldr	r2, [r7, #8]
 8013b64:	0151      	lsls	r1, r2, #5
 8013b66:	68fa      	ldr	r2, [r7, #12]
 8013b68:	440a      	add	r2, r1
 8013b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013b76:	6013      	str	r3, [r2, #0]
 8013b78:	e036      	b.n	8013be8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b80:	69da      	ldr	r2, [r3, #28]
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	f003 030f 	and.w	r3, r3, #15
 8013b8a:	2101      	movs	r1, #1
 8013b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8013b90:	041b      	lsls	r3, r3, #16
 8013b92:	68f9      	ldr	r1, [r7, #12]
 8013b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b98:	4313      	orrs	r3, r2
 8013b9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	015a      	lsls	r2, r3, #5
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	4413      	add	r3, r2
 8013ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d11a      	bne.n	8013be8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	015a      	lsls	r2, r3, #5
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	4413      	add	r3, r2
 8013bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bbe:	681a      	ldr	r2, [r3, #0]
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	68db      	ldr	r3, [r3, #12]
 8013bc4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	791b      	ldrb	r3, [r3, #4]
 8013bcc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013bce:	430b      	orrs	r3, r1
 8013bd0:	4313      	orrs	r3, r2
 8013bd2:	68ba      	ldr	r2, [r7, #8]
 8013bd4:	0151      	lsls	r1, r2, #5
 8013bd6:	68fa      	ldr	r2, [r7, #12]
 8013bd8:	440a      	add	r2, r1
 8013bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013be6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013be8:	2300      	movs	r3, #0
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3714      	adds	r7, #20
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf4:	4770      	bx	lr
	...

08013bf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b085      	sub	sp, #20
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	781b      	ldrb	r3, [r3, #0]
 8013c0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	785b      	ldrb	r3, [r3, #1]
 8013c10:	2b01      	cmp	r3, #1
 8013c12:	d161      	bne.n	8013cd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	015a      	lsls	r2, r3, #5
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	4413      	add	r3, r2
 8013c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013c2a:	d11f      	bne.n	8013c6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	015a      	lsls	r2, r3, #5
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	4413      	add	r3, r2
 8013c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	68ba      	ldr	r2, [r7, #8]
 8013c3c:	0151      	lsls	r1, r2, #5
 8013c3e:	68fa      	ldr	r2, [r7, #12]
 8013c40:	440a      	add	r2, r1
 8013c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013c4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	015a      	lsls	r2, r3, #5
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	4413      	add	r3, r2
 8013c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	68ba      	ldr	r2, [r7, #8]
 8013c5c:	0151      	lsls	r1, r2, #5
 8013c5e:	68fa      	ldr	r2, [r7, #12]
 8013c60:	440a      	add	r2, r1
 8013c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	f003 030f 	and.w	r3, r3, #15
 8013c7c:	2101      	movs	r1, #1
 8013c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	43db      	mvns	r3, r3
 8013c86:	68f9      	ldr	r1, [r7, #12]
 8013c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c8c:	4013      	ands	r3, r2
 8013c8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c96:	69da      	ldr	r2, [r3, #28]
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	781b      	ldrb	r3, [r3, #0]
 8013c9c:	f003 030f 	and.w	r3, r3, #15
 8013ca0:	2101      	movs	r1, #1
 8013ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8013ca6:	b29b      	uxth	r3, r3
 8013ca8:	43db      	mvns	r3, r3
 8013caa:	68f9      	ldr	r1, [r7, #12]
 8013cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013cb0:	4013      	ands	r3, r2
 8013cb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	015a      	lsls	r2, r3, #5
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	4413      	add	r3, r2
 8013cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cc0:	681a      	ldr	r2, [r3, #0]
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	0159      	lsls	r1, r3, #5
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	440b      	add	r3, r1
 8013cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cce:	4619      	mov	r1, r3
 8013cd0:	4b35      	ldr	r3, [pc, #212]	; (8013da8 <USB_DeactivateEndpoint+0x1b0>)
 8013cd2:	4013      	ands	r3, r2
 8013cd4:	600b      	str	r3, [r1, #0]
 8013cd6:	e060      	b.n	8013d9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	015a      	lsls	r2, r3, #5
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	4413      	add	r3, r2
 8013ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013cee:	d11f      	bne.n	8013d30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	015a      	lsls	r2, r3, #5
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	4413      	add	r3, r2
 8013cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	68ba      	ldr	r2, [r7, #8]
 8013d00:	0151      	lsls	r1, r2, #5
 8013d02:	68fa      	ldr	r2, [r7, #12]
 8013d04:	440a      	add	r2, r1
 8013d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013d0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	015a      	lsls	r2, r3, #5
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	4413      	add	r3, r2
 8013d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	68ba      	ldr	r2, [r7, #8]
 8013d20:	0151      	lsls	r1, r2, #5
 8013d22:	68fa      	ldr	r2, [r7, #12]
 8013d24:	440a      	add	r2, r1
 8013d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013d2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	f003 030f 	and.w	r3, r3, #15
 8013d40:	2101      	movs	r1, #1
 8013d42:	fa01 f303 	lsl.w	r3, r1, r3
 8013d46:	041b      	lsls	r3, r3, #16
 8013d48:	43db      	mvns	r3, r3
 8013d4a:	68f9      	ldr	r1, [r7, #12]
 8013d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d50:	4013      	ands	r3, r2
 8013d52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d5a:	69da      	ldr	r2, [r3, #28]
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	f003 030f 	and.w	r3, r3, #15
 8013d64:	2101      	movs	r1, #1
 8013d66:	fa01 f303 	lsl.w	r3, r1, r3
 8013d6a:	041b      	lsls	r3, r3, #16
 8013d6c:	43db      	mvns	r3, r3
 8013d6e:	68f9      	ldr	r1, [r7, #12]
 8013d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d74:	4013      	ands	r3, r2
 8013d76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	015a      	lsls	r2, r3, #5
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	4413      	add	r3, r2
 8013d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d84:	681a      	ldr	r2, [r3, #0]
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	0159      	lsls	r1, r3, #5
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	440b      	add	r3, r1
 8013d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d92:	4619      	mov	r1, r3
 8013d94:	4b05      	ldr	r3, [pc, #20]	; (8013dac <USB_DeactivateEndpoint+0x1b4>)
 8013d96:	4013      	ands	r3, r2
 8013d98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013d9a:	2300      	movs	r3, #0
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3714      	adds	r7, #20
 8013da0:	46bd      	mov	sp, r7
 8013da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da6:	4770      	bx	lr
 8013da8:	ec337800 	.word	0xec337800
 8013dac:	eff37800 	.word	0xeff37800

08013db0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b08a      	sub	sp, #40	; 0x28
 8013db4:	af02      	add	r7, sp, #8
 8013db6:	60f8      	str	r0, [r7, #12]
 8013db8:	60b9      	str	r1, [r7, #8]
 8013dba:	4613      	mov	r3, r2
 8013dbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	785b      	ldrb	r3, [r3, #1]
 8013dcc:	2b01      	cmp	r3, #1
 8013dce:	f040 815c 	bne.w	801408a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	699b      	ldr	r3, [r3, #24]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d132      	bne.n	8013e40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013dda:	69bb      	ldr	r3, [r7, #24]
 8013ddc:	015a      	lsls	r2, r3, #5
 8013dde:	69fb      	ldr	r3, [r7, #28]
 8013de0:	4413      	add	r3, r2
 8013de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013de6:	691b      	ldr	r3, [r3, #16]
 8013de8:	69ba      	ldr	r2, [r7, #24]
 8013dea:	0151      	lsls	r1, r2, #5
 8013dec:	69fa      	ldr	r2, [r7, #28]
 8013dee:	440a      	add	r2, r1
 8013df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013df4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013df8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013dfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	015a      	lsls	r2, r3, #5
 8013e02:	69fb      	ldr	r3, [r7, #28]
 8013e04:	4413      	add	r3, r2
 8013e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e0a:	691b      	ldr	r3, [r3, #16]
 8013e0c:	69ba      	ldr	r2, [r7, #24]
 8013e0e:	0151      	lsls	r1, r2, #5
 8013e10:	69fa      	ldr	r2, [r7, #28]
 8013e12:	440a      	add	r2, r1
 8013e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013e1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013e1e:	69bb      	ldr	r3, [r7, #24]
 8013e20:	015a      	lsls	r2, r3, #5
 8013e22:	69fb      	ldr	r3, [r7, #28]
 8013e24:	4413      	add	r3, r2
 8013e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e2a:	691b      	ldr	r3, [r3, #16]
 8013e2c:	69ba      	ldr	r2, [r7, #24]
 8013e2e:	0151      	lsls	r1, r2, #5
 8013e30:	69fa      	ldr	r2, [r7, #28]
 8013e32:	440a      	add	r2, r1
 8013e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e38:	0cdb      	lsrs	r3, r3, #19
 8013e3a:	04db      	lsls	r3, r3, #19
 8013e3c:	6113      	str	r3, [r2, #16]
 8013e3e:	e074      	b.n	8013f2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013e40:	69bb      	ldr	r3, [r7, #24]
 8013e42:	015a      	lsls	r2, r3, #5
 8013e44:	69fb      	ldr	r3, [r7, #28]
 8013e46:	4413      	add	r3, r2
 8013e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e4c:	691b      	ldr	r3, [r3, #16]
 8013e4e:	69ba      	ldr	r2, [r7, #24]
 8013e50:	0151      	lsls	r1, r2, #5
 8013e52:	69fa      	ldr	r2, [r7, #28]
 8013e54:	440a      	add	r2, r1
 8013e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e5a:	0cdb      	lsrs	r3, r3, #19
 8013e5c:	04db      	lsls	r3, r3, #19
 8013e5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013e60:	69bb      	ldr	r3, [r7, #24]
 8013e62:	015a      	lsls	r2, r3, #5
 8013e64:	69fb      	ldr	r3, [r7, #28]
 8013e66:	4413      	add	r3, r2
 8013e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e6c:	691b      	ldr	r3, [r3, #16]
 8013e6e:	69ba      	ldr	r2, [r7, #24]
 8013e70:	0151      	lsls	r1, r2, #5
 8013e72:	69fa      	ldr	r2, [r7, #28]
 8013e74:	440a      	add	r2, r1
 8013e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013e7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013e82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013e84:	69bb      	ldr	r3, [r7, #24]
 8013e86:	015a      	lsls	r2, r3, #5
 8013e88:	69fb      	ldr	r3, [r7, #28]
 8013e8a:	4413      	add	r3, r2
 8013e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e90:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	6999      	ldr	r1, [r3, #24]
 8013e96:	68bb      	ldr	r3, [r7, #8]
 8013e98:	68db      	ldr	r3, [r3, #12]
 8013e9a:	440b      	add	r3, r1
 8013e9c:	1e59      	subs	r1, r3, #1
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	68db      	ldr	r3, [r3, #12]
 8013ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8013ea6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013ea8:	4b9d      	ldr	r3, [pc, #628]	; (8014120 <USB_EPStartXfer+0x370>)
 8013eaa:	400b      	ands	r3, r1
 8013eac:	69b9      	ldr	r1, [r7, #24]
 8013eae:	0148      	lsls	r0, r1, #5
 8013eb0:	69f9      	ldr	r1, [r7, #28]
 8013eb2:	4401      	add	r1, r0
 8013eb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013eb8:	4313      	orrs	r3, r2
 8013eba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013ebc:	69bb      	ldr	r3, [r7, #24]
 8013ebe:	015a      	lsls	r2, r3, #5
 8013ec0:	69fb      	ldr	r3, [r7, #28]
 8013ec2:	4413      	add	r3, r2
 8013ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ec8:	691a      	ldr	r2, [r3, #16]
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	699b      	ldr	r3, [r3, #24]
 8013ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013ed2:	69b9      	ldr	r1, [r7, #24]
 8013ed4:	0148      	lsls	r0, r1, #5
 8013ed6:	69f9      	ldr	r1, [r7, #28]
 8013ed8:	4401      	add	r1, r0
 8013eda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013ede:	4313      	orrs	r3, r2
 8013ee0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	791b      	ldrb	r3, [r3, #4]
 8013ee6:	2b01      	cmp	r3, #1
 8013ee8:	d11f      	bne.n	8013f2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013eea:	69bb      	ldr	r3, [r7, #24]
 8013eec:	015a      	lsls	r2, r3, #5
 8013eee:	69fb      	ldr	r3, [r7, #28]
 8013ef0:	4413      	add	r3, r2
 8013ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ef6:	691b      	ldr	r3, [r3, #16]
 8013ef8:	69ba      	ldr	r2, [r7, #24]
 8013efa:	0151      	lsls	r1, r2, #5
 8013efc:	69fa      	ldr	r2, [r7, #28]
 8013efe:	440a      	add	r2, r1
 8013f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013f08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013f0a:	69bb      	ldr	r3, [r7, #24]
 8013f0c:	015a      	lsls	r2, r3, #5
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	4413      	add	r3, r2
 8013f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f16:	691b      	ldr	r3, [r3, #16]
 8013f18:	69ba      	ldr	r2, [r7, #24]
 8013f1a:	0151      	lsls	r1, r2, #5
 8013f1c:	69fa      	ldr	r2, [r7, #28]
 8013f1e:	440a      	add	r2, r1
 8013f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013f28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013f2a:	79fb      	ldrb	r3, [r7, #7]
 8013f2c:	2b01      	cmp	r3, #1
 8013f2e:	d14b      	bne.n	8013fc8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	695b      	ldr	r3, [r3, #20]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d009      	beq.n	8013f4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013f38:	69bb      	ldr	r3, [r7, #24]
 8013f3a:	015a      	lsls	r2, r3, #5
 8013f3c:	69fb      	ldr	r3, [r7, #28]
 8013f3e:	4413      	add	r3, r2
 8013f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f44:	461a      	mov	r2, r3
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	695b      	ldr	r3, [r3, #20]
 8013f4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	791b      	ldrb	r3, [r3, #4]
 8013f50:	2b01      	cmp	r3, #1
 8013f52:	d128      	bne.n	8013fa6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013f54:	69fb      	ldr	r3, [r7, #28]
 8013f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f5a:	689b      	ldr	r3, [r3, #8]
 8013f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d110      	bne.n	8013f86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	015a      	lsls	r2, r3, #5
 8013f68:	69fb      	ldr	r3, [r7, #28]
 8013f6a:	4413      	add	r3, r2
 8013f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	69ba      	ldr	r2, [r7, #24]
 8013f74:	0151      	lsls	r1, r2, #5
 8013f76:	69fa      	ldr	r2, [r7, #28]
 8013f78:	440a      	add	r2, r1
 8013f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013f82:	6013      	str	r3, [r2, #0]
 8013f84:	e00f      	b.n	8013fa6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013f86:	69bb      	ldr	r3, [r7, #24]
 8013f88:	015a      	lsls	r2, r3, #5
 8013f8a:	69fb      	ldr	r3, [r7, #28]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	69ba      	ldr	r2, [r7, #24]
 8013f96:	0151      	lsls	r1, r2, #5
 8013f98:	69fa      	ldr	r2, [r7, #28]
 8013f9a:	440a      	add	r2, r1
 8013f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013fa4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013fa6:	69bb      	ldr	r3, [r7, #24]
 8013fa8:	015a      	lsls	r2, r3, #5
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	4413      	add	r3, r2
 8013fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	69ba      	ldr	r2, [r7, #24]
 8013fb6:	0151      	lsls	r1, r2, #5
 8013fb8:	69fa      	ldr	r2, [r7, #28]
 8013fba:	440a      	add	r2, r1
 8013fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013fc4:	6013      	str	r3, [r2, #0]
 8013fc6:	e133      	b.n	8014230 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013fc8:	69bb      	ldr	r3, [r7, #24]
 8013fca:	015a      	lsls	r2, r3, #5
 8013fcc:	69fb      	ldr	r3, [r7, #28]
 8013fce:	4413      	add	r3, r2
 8013fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	69ba      	ldr	r2, [r7, #24]
 8013fd8:	0151      	lsls	r1, r2, #5
 8013fda:	69fa      	ldr	r2, [r7, #28]
 8013fdc:	440a      	add	r2, r1
 8013fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fe2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013fe6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	791b      	ldrb	r3, [r3, #4]
 8013fec:	2b01      	cmp	r3, #1
 8013fee:	d015      	beq.n	801401c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	699b      	ldr	r3, [r3, #24]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	f000 811b 	beq.w	8014230 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013ffa:	69fb      	ldr	r3, [r7, #28]
 8013ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	f003 030f 	and.w	r3, r3, #15
 801400a:	2101      	movs	r1, #1
 801400c:	fa01 f303 	lsl.w	r3, r1, r3
 8014010:	69f9      	ldr	r1, [r7, #28]
 8014012:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014016:	4313      	orrs	r3, r2
 8014018:	634b      	str	r3, [r1, #52]	; 0x34
 801401a:	e109      	b.n	8014230 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801401c:	69fb      	ldr	r3, [r7, #28]
 801401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014022:	689b      	ldr	r3, [r3, #8]
 8014024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014028:	2b00      	cmp	r3, #0
 801402a:	d110      	bne.n	801404e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801402c:	69bb      	ldr	r3, [r7, #24]
 801402e:	015a      	lsls	r2, r3, #5
 8014030:	69fb      	ldr	r3, [r7, #28]
 8014032:	4413      	add	r3, r2
 8014034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	69ba      	ldr	r2, [r7, #24]
 801403c:	0151      	lsls	r1, r2, #5
 801403e:	69fa      	ldr	r2, [r7, #28]
 8014040:	440a      	add	r2, r1
 8014042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014046:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801404a:	6013      	str	r3, [r2, #0]
 801404c:	e00f      	b.n	801406e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801404e:	69bb      	ldr	r3, [r7, #24]
 8014050:	015a      	lsls	r2, r3, #5
 8014052:	69fb      	ldr	r3, [r7, #28]
 8014054:	4413      	add	r3, r2
 8014056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	69ba      	ldr	r2, [r7, #24]
 801405e:	0151      	lsls	r1, r2, #5
 8014060:	69fa      	ldr	r2, [r7, #28]
 8014062:	440a      	add	r2, r1
 8014064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801406c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	6919      	ldr	r1, [r3, #16]
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	781a      	ldrb	r2, [r3, #0]
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	699b      	ldr	r3, [r3, #24]
 801407a:	b298      	uxth	r0, r3
 801407c:	79fb      	ldrb	r3, [r7, #7]
 801407e:	9300      	str	r3, [sp, #0]
 8014080:	4603      	mov	r3, r0
 8014082:	68f8      	ldr	r0, [r7, #12]
 8014084:	f000 fade 	bl	8014644 <USB_WritePacket>
 8014088:	e0d2      	b.n	8014230 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801408a:	69bb      	ldr	r3, [r7, #24]
 801408c:	015a      	lsls	r2, r3, #5
 801408e:	69fb      	ldr	r3, [r7, #28]
 8014090:	4413      	add	r3, r2
 8014092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014096:	691b      	ldr	r3, [r3, #16]
 8014098:	69ba      	ldr	r2, [r7, #24]
 801409a:	0151      	lsls	r1, r2, #5
 801409c:	69fa      	ldr	r2, [r7, #28]
 801409e:	440a      	add	r2, r1
 80140a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140a4:	0cdb      	lsrs	r3, r3, #19
 80140a6:	04db      	lsls	r3, r3, #19
 80140a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80140aa:	69bb      	ldr	r3, [r7, #24]
 80140ac:	015a      	lsls	r2, r3, #5
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	4413      	add	r3, r2
 80140b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140b6:	691b      	ldr	r3, [r3, #16]
 80140b8:	69ba      	ldr	r2, [r7, #24]
 80140ba:	0151      	lsls	r1, r2, #5
 80140bc:	69fa      	ldr	r2, [r7, #28]
 80140be:	440a      	add	r2, r1
 80140c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80140c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80140cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80140ce:	68bb      	ldr	r3, [r7, #8]
 80140d0:	699b      	ldr	r3, [r3, #24]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d126      	bne.n	8014124 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80140d6:	69bb      	ldr	r3, [r7, #24]
 80140d8:	015a      	lsls	r2, r3, #5
 80140da:	69fb      	ldr	r3, [r7, #28]
 80140dc:	4413      	add	r3, r2
 80140de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140e2:	691a      	ldr	r2, [r3, #16]
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80140ec:	69b9      	ldr	r1, [r7, #24]
 80140ee:	0148      	lsls	r0, r1, #5
 80140f0:	69f9      	ldr	r1, [r7, #28]
 80140f2:	4401      	add	r1, r0
 80140f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80140f8:	4313      	orrs	r3, r2
 80140fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80140fc:	69bb      	ldr	r3, [r7, #24]
 80140fe:	015a      	lsls	r2, r3, #5
 8014100:	69fb      	ldr	r3, [r7, #28]
 8014102:	4413      	add	r3, r2
 8014104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014108:	691b      	ldr	r3, [r3, #16]
 801410a:	69ba      	ldr	r2, [r7, #24]
 801410c:	0151      	lsls	r1, r2, #5
 801410e:	69fa      	ldr	r2, [r7, #28]
 8014110:	440a      	add	r2, r1
 8014112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014116:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801411a:	6113      	str	r3, [r2, #16]
 801411c:	e03a      	b.n	8014194 <USB_EPStartXfer+0x3e4>
 801411e:	bf00      	nop
 8014120:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	699a      	ldr	r2, [r3, #24]
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	68db      	ldr	r3, [r3, #12]
 801412c:	4413      	add	r3, r2
 801412e:	1e5a      	subs	r2, r3, #1
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	68db      	ldr	r3, [r3, #12]
 8014134:	fbb2 f3f3 	udiv	r3, r2, r3
 8014138:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	68db      	ldr	r3, [r3, #12]
 801413e:	8afa      	ldrh	r2, [r7, #22]
 8014140:	fb03 f202 	mul.w	r2, r3, r2
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014148:	69bb      	ldr	r3, [r7, #24]
 801414a:	015a      	lsls	r2, r3, #5
 801414c:	69fb      	ldr	r3, [r7, #28]
 801414e:	4413      	add	r3, r2
 8014150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014154:	691a      	ldr	r2, [r3, #16]
 8014156:	8afb      	ldrh	r3, [r7, #22]
 8014158:	04d9      	lsls	r1, r3, #19
 801415a:	4b38      	ldr	r3, [pc, #224]	; (801423c <USB_EPStartXfer+0x48c>)
 801415c:	400b      	ands	r3, r1
 801415e:	69b9      	ldr	r1, [r7, #24]
 8014160:	0148      	lsls	r0, r1, #5
 8014162:	69f9      	ldr	r1, [r7, #28]
 8014164:	4401      	add	r1, r0
 8014166:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801416a:	4313      	orrs	r3, r2
 801416c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801416e:	69bb      	ldr	r3, [r7, #24]
 8014170:	015a      	lsls	r2, r3, #5
 8014172:	69fb      	ldr	r3, [r7, #28]
 8014174:	4413      	add	r3, r2
 8014176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801417a:	691a      	ldr	r2, [r3, #16]
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	69db      	ldr	r3, [r3, #28]
 8014180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014184:	69b9      	ldr	r1, [r7, #24]
 8014186:	0148      	lsls	r0, r1, #5
 8014188:	69f9      	ldr	r1, [r7, #28]
 801418a:	4401      	add	r1, r0
 801418c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014190:	4313      	orrs	r3, r2
 8014192:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014194:	79fb      	ldrb	r3, [r7, #7]
 8014196:	2b01      	cmp	r3, #1
 8014198:	d10d      	bne.n	80141b6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	691b      	ldr	r3, [r3, #16]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d009      	beq.n	80141b6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	6919      	ldr	r1, [r3, #16]
 80141a6:	69bb      	ldr	r3, [r7, #24]
 80141a8:	015a      	lsls	r2, r3, #5
 80141aa:	69fb      	ldr	r3, [r7, #28]
 80141ac:	4413      	add	r3, r2
 80141ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141b2:	460a      	mov	r2, r1
 80141b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	791b      	ldrb	r3, [r3, #4]
 80141ba:	2b01      	cmp	r3, #1
 80141bc:	d128      	bne.n	8014210 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80141be:	69fb      	ldr	r3, [r7, #28]
 80141c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141c4:	689b      	ldr	r3, [r3, #8]
 80141c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d110      	bne.n	80141f0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80141ce:	69bb      	ldr	r3, [r7, #24]
 80141d0:	015a      	lsls	r2, r3, #5
 80141d2:	69fb      	ldr	r3, [r7, #28]
 80141d4:	4413      	add	r3, r2
 80141d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	69ba      	ldr	r2, [r7, #24]
 80141de:	0151      	lsls	r1, r2, #5
 80141e0:	69fa      	ldr	r2, [r7, #28]
 80141e2:	440a      	add	r2, r1
 80141e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80141ec:	6013      	str	r3, [r2, #0]
 80141ee:	e00f      	b.n	8014210 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80141f0:	69bb      	ldr	r3, [r7, #24]
 80141f2:	015a      	lsls	r2, r3, #5
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	4413      	add	r3, r2
 80141f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	69ba      	ldr	r2, [r7, #24]
 8014200:	0151      	lsls	r1, r2, #5
 8014202:	69fa      	ldr	r2, [r7, #28]
 8014204:	440a      	add	r2, r1
 8014206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801420e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014210:	69bb      	ldr	r3, [r7, #24]
 8014212:	015a      	lsls	r2, r3, #5
 8014214:	69fb      	ldr	r3, [r7, #28]
 8014216:	4413      	add	r3, r2
 8014218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	69ba      	ldr	r2, [r7, #24]
 8014220:	0151      	lsls	r1, r2, #5
 8014222:	69fa      	ldr	r2, [r7, #28]
 8014224:	440a      	add	r2, r1
 8014226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801422a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801422e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014230:	2300      	movs	r3, #0
}
 8014232:	4618      	mov	r0, r3
 8014234:	3720      	adds	r7, #32
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
 801423a:	bf00      	nop
 801423c:	1ff80000 	.word	0x1ff80000

08014240 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014240:	b480      	push	{r7}
 8014242:	b087      	sub	sp, #28
 8014244:	af00      	add	r7, sp, #0
 8014246:	60f8      	str	r0, [r7, #12]
 8014248:	60b9      	str	r1, [r7, #8]
 801424a:	4613      	mov	r3, r2
 801424c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	781b      	ldrb	r3, [r3, #0]
 8014256:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	785b      	ldrb	r3, [r3, #1]
 801425c:	2b01      	cmp	r3, #1
 801425e:	f040 80ce 	bne.w	80143fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	699b      	ldr	r3, [r3, #24]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d132      	bne.n	80142d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	015a      	lsls	r2, r3, #5
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	4413      	add	r3, r2
 8014272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014276:	691b      	ldr	r3, [r3, #16]
 8014278:	693a      	ldr	r2, [r7, #16]
 801427a:	0151      	lsls	r1, r2, #5
 801427c:	697a      	ldr	r2, [r7, #20]
 801427e:	440a      	add	r2, r1
 8014280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014284:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014288:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801428c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	015a      	lsls	r2, r3, #5
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	4413      	add	r3, r2
 8014296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801429a:	691b      	ldr	r3, [r3, #16]
 801429c:	693a      	ldr	r2, [r7, #16]
 801429e:	0151      	lsls	r1, r2, #5
 80142a0:	697a      	ldr	r2, [r7, #20]
 80142a2:	440a      	add	r2, r1
 80142a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80142ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80142ae:	693b      	ldr	r3, [r7, #16]
 80142b0:	015a      	lsls	r2, r3, #5
 80142b2:	697b      	ldr	r3, [r7, #20]
 80142b4:	4413      	add	r3, r2
 80142b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142ba:	691b      	ldr	r3, [r3, #16]
 80142bc:	693a      	ldr	r2, [r7, #16]
 80142be:	0151      	lsls	r1, r2, #5
 80142c0:	697a      	ldr	r2, [r7, #20]
 80142c2:	440a      	add	r2, r1
 80142c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142c8:	0cdb      	lsrs	r3, r3, #19
 80142ca:	04db      	lsls	r3, r3, #19
 80142cc:	6113      	str	r3, [r2, #16]
 80142ce:	e04e      	b.n	801436e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	015a      	lsls	r2, r3, #5
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	4413      	add	r3, r2
 80142d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142dc:	691b      	ldr	r3, [r3, #16]
 80142de:	693a      	ldr	r2, [r7, #16]
 80142e0:	0151      	lsls	r1, r2, #5
 80142e2:	697a      	ldr	r2, [r7, #20]
 80142e4:	440a      	add	r2, r1
 80142e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142ea:	0cdb      	lsrs	r3, r3, #19
 80142ec:	04db      	lsls	r3, r3, #19
 80142ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	015a      	lsls	r2, r3, #5
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	4413      	add	r3, r2
 80142f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142fc:	691b      	ldr	r3, [r3, #16]
 80142fe:	693a      	ldr	r2, [r7, #16]
 8014300:	0151      	lsls	r1, r2, #5
 8014302:	697a      	ldr	r2, [r7, #20]
 8014304:	440a      	add	r2, r1
 8014306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801430a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801430e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014312:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	699a      	ldr	r2, [r3, #24]
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	68db      	ldr	r3, [r3, #12]
 801431c:	429a      	cmp	r2, r3
 801431e:	d903      	bls.n	8014328 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	68da      	ldr	r2, [r3, #12]
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	015a      	lsls	r2, r3, #5
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	4413      	add	r3, r2
 8014330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014334:	691b      	ldr	r3, [r3, #16]
 8014336:	693a      	ldr	r2, [r7, #16]
 8014338:	0151      	lsls	r1, r2, #5
 801433a:	697a      	ldr	r2, [r7, #20]
 801433c:	440a      	add	r2, r1
 801433e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014346:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014348:	693b      	ldr	r3, [r7, #16]
 801434a:	015a      	lsls	r2, r3, #5
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	4413      	add	r3, r2
 8014350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014354:	691a      	ldr	r2, [r3, #16]
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	699b      	ldr	r3, [r3, #24]
 801435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801435e:	6939      	ldr	r1, [r7, #16]
 8014360:	0148      	lsls	r0, r1, #5
 8014362:	6979      	ldr	r1, [r7, #20]
 8014364:	4401      	add	r1, r0
 8014366:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801436a:	4313      	orrs	r3, r2
 801436c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801436e:	79fb      	ldrb	r3, [r7, #7]
 8014370:	2b01      	cmp	r3, #1
 8014372:	d11e      	bne.n	80143b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	695b      	ldr	r3, [r3, #20]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d009      	beq.n	8014390 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	015a      	lsls	r2, r3, #5
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	4413      	add	r3, r2
 8014384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014388:	461a      	mov	r2, r3
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	695b      	ldr	r3, [r3, #20]
 801438e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014390:	693b      	ldr	r3, [r7, #16]
 8014392:	015a      	lsls	r2, r3, #5
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	4413      	add	r3, r2
 8014398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	693a      	ldr	r2, [r7, #16]
 80143a0:	0151      	lsls	r1, r2, #5
 80143a2:	697a      	ldr	r2, [r7, #20]
 80143a4:	440a      	add	r2, r1
 80143a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80143ae:	6013      	str	r3, [r2, #0]
 80143b0:	e097      	b.n	80144e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80143b2:	693b      	ldr	r3, [r7, #16]
 80143b4:	015a      	lsls	r2, r3, #5
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	4413      	add	r3, r2
 80143ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	693a      	ldr	r2, [r7, #16]
 80143c2:	0151      	lsls	r1, r2, #5
 80143c4:	697a      	ldr	r2, [r7, #20]
 80143c6:	440a      	add	r2, r1
 80143c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80143d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	699b      	ldr	r3, [r3, #24]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	f000 8083 	beq.w	80144e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	f003 030f 	and.w	r3, r3, #15
 80143ec:	2101      	movs	r1, #1
 80143ee:	fa01 f303 	lsl.w	r3, r1, r3
 80143f2:	6979      	ldr	r1, [r7, #20]
 80143f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80143f8:	4313      	orrs	r3, r2
 80143fa:	634b      	str	r3, [r1, #52]	; 0x34
 80143fc:	e071      	b.n	80144e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80143fe:	693b      	ldr	r3, [r7, #16]
 8014400:	015a      	lsls	r2, r3, #5
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	4413      	add	r3, r2
 8014406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801440a:	691b      	ldr	r3, [r3, #16]
 801440c:	693a      	ldr	r2, [r7, #16]
 801440e:	0151      	lsls	r1, r2, #5
 8014410:	697a      	ldr	r2, [r7, #20]
 8014412:	440a      	add	r2, r1
 8014414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014418:	0cdb      	lsrs	r3, r3, #19
 801441a:	04db      	lsls	r3, r3, #19
 801441c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	015a      	lsls	r2, r3, #5
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	4413      	add	r3, r2
 8014426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801442a:	691b      	ldr	r3, [r3, #16]
 801442c:	693a      	ldr	r2, [r7, #16]
 801442e:	0151      	lsls	r1, r2, #5
 8014430:	697a      	ldr	r2, [r7, #20]
 8014432:	440a      	add	r2, r1
 8014434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014438:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801443c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014440:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	699b      	ldr	r3, [r3, #24]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d003      	beq.n	8014452 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	68da      	ldr	r2, [r3, #12]
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8014452:	68bb      	ldr	r3, [r7, #8]
 8014454:	68da      	ldr	r2, [r3, #12]
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801445a:	693b      	ldr	r3, [r7, #16]
 801445c:	015a      	lsls	r2, r3, #5
 801445e:	697b      	ldr	r3, [r7, #20]
 8014460:	4413      	add	r3, r2
 8014462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014466:	691b      	ldr	r3, [r3, #16]
 8014468:	693a      	ldr	r2, [r7, #16]
 801446a:	0151      	lsls	r1, r2, #5
 801446c:	697a      	ldr	r2, [r7, #20]
 801446e:	440a      	add	r2, r1
 8014470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014478:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	015a      	lsls	r2, r3, #5
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	4413      	add	r3, r2
 8014482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014486:	691a      	ldr	r2, [r3, #16]
 8014488:	68bb      	ldr	r3, [r7, #8]
 801448a:	69db      	ldr	r3, [r3, #28]
 801448c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014490:	6939      	ldr	r1, [r7, #16]
 8014492:	0148      	lsls	r0, r1, #5
 8014494:	6979      	ldr	r1, [r7, #20]
 8014496:	4401      	add	r1, r0
 8014498:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801449c:	4313      	orrs	r3, r2
 801449e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80144a0:	79fb      	ldrb	r3, [r7, #7]
 80144a2:	2b01      	cmp	r3, #1
 80144a4:	d10d      	bne.n	80144c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	691b      	ldr	r3, [r3, #16]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d009      	beq.n	80144c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	6919      	ldr	r1, [r3, #16]
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	015a      	lsls	r2, r3, #5
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	4413      	add	r3, r2
 80144ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144be:	460a      	mov	r2, r1
 80144c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	015a      	lsls	r2, r3, #5
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	4413      	add	r3, r2
 80144ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	693a      	ldr	r2, [r7, #16]
 80144d2:	0151      	lsls	r1, r2, #5
 80144d4:	697a      	ldr	r2, [r7, #20]
 80144d6:	440a      	add	r2, r1
 80144d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80144dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80144e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80144e2:	2300      	movs	r3, #0
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	371c      	adds	r7, #28
 80144e8:	46bd      	mov	sp, r7
 80144ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ee:	4770      	bx	lr

080144f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80144f0:	b480      	push	{r7}
 80144f2:	b087      	sub	sp, #28
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
 80144f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80144fa:	2300      	movs	r3, #0
 80144fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80144fe:	2300      	movs	r3, #0
 8014500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	785b      	ldrb	r3, [r3, #1]
 801450a:	2b01      	cmp	r3, #1
 801450c:	d14a      	bne.n	80145a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	781b      	ldrb	r3, [r3, #0]
 8014512:	015a      	lsls	r2, r3, #5
 8014514:	693b      	ldr	r3, [r7, #16]
 8014516:	4413      	add	r3, r2
 8014518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014526:	f040 8086 	bne.w	8014636 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	015a      	lsls	r2, r3, #5
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	4413      	add	r3, r2
 8014534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	683a      	ldr	r2, [r7, #0]
 801453c:	7812      	ldrb	r2, [r2, #0]
 801453e:	0151      	lsls	r1, r2, #5
 8014540:	693a      	ldr	r2, [r7, #16]
 8014542:	440a      	add	r2, r1
 8014544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014548:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801454c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	015a      	lsls	r2, r3, #5
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	4413      	add	r3, r2
 8014558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	683a      	ldr	r2, [r7, #0]
 8014560:	7812      	ldrb	r2, [r2, #0]
 8014562:	0151      	lsls	r1, r2, #5
 8014564:	693a      	ldr	r2, [r7, #16]
 8014566:	440a      	add	r2, r1
 8014568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801456c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014570:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	3301      	adds	r3, #1
 8014576:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	f242 7210 	movw	r2, #10000	; 0x2710
 801457e:	4293      	cmp	r3, r2
 8014580:	d902      	bls.n	8014588 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014582:	2301      	movs	r3, #1
 8014584:	75fb      	strb	r3, [r7, #23]
          break;
 8014586:	e056      	b.n	8014636 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	781b      	ldrb	r3, [r3, #0]
 801458c:	015a      	lsls	r2, r3, #5
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	4413      	add	r3, r2
 8014592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801459c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80145a0:	d0e7      	beq.n	8014572 <USB_EPStopXfer+0x82>
 80145a2:	e048      	b.n	8014636 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	015a      	lsls	r2, r3, #5
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	4413      	add	r3, r2
 80145ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80145b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80145bc:	d13b      	bne.n	8014636 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	015a      	lsls	r2, r3, #5
 80145c4:	693b      	ldr	r3, [r7, #16]
 80145c6:	4413      	add	r3, r2
 80145c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	683a      	ldr	r2, [r7, #0]
 80145d0:	7812      	ldrb	r2, [r2, #0]
 80145d2:	0151      	lsls	r1, r2, #5
 80145d4:	693a      	ldr	r2, [r7, #16]
 80145d6:	440a      	add	r2, r1
 80145d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80145dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80145e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	781b      	ldrb	r3, [r3, #0]
 80145e6:	015a      	lsls	r2, r3, #5
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	4413      	add	r3, r2
 80145ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	683a      	ldr	r2, [r7, #0]
 80145f4:	7812      	ldrb	r2, [r2, #0]
 80145f6:	0151      	lsls	r1, r2, #5
 80145f8:	693a      	ldr	r2, [r7, #16]
 80145fa:	440a      	add	r2, r1
 80145fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014600:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014604:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	3301      	adds	r3, #1
 801460a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	f242 7210 	movw	r2, #10000	; 0x2710
 8014612:	4293      	cmp	r3, r2
 8014614:	d902      	bls.n	801461c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014616:	2301      	movs	r3, #1
 8014618:	75fb      	strb	r3, [r7, #23]
          break;
 801461a:	e00c      	b.n	8014636 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	015a      	lsls	r2, r3, #5
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	4413      	add	r3, r2
 8014626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014634:	d0e7      	beq.n	8014606 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014636:	7dfb      	ldrb	r3, [r7, #23]
}
 8014638:	4618      	mov	r0, r3
 801463a:	371c      	adds	r7, #28
 801463c:	46bd      	mov	sp, r7
 801463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014642:	4770      	bx	lr

08014644 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014644:	b480      	push	{r7}
 8014646:	b089      	sub	sp, #36	; 0x24
 8014648:	af00      	add	r7, sp, #0
 801464a:	60f8      	str	r0, [r7, #12]
 801464c:	60b9      	str	r1, [r7, #8]
 801464e:	4611      	mov	r1, r2
 8014650:	461a      	mov	r2, r3
 8014652:	460b      	mov	r3, r1
 8014654:	71fb      	strb	r3, [r7, #7]
 8014656:	4613      	mov	r3, r2
 8014658:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014662:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014666:	2b00      	cmp	r3, #0
 8014668:	d123      	bne.n	80146b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801466a:	88bb      	ldrh	r3, [r7, #4]
 801466c:	3303      	adds	r3, #3
 801466e:	089b      	lsrs	r3, r3, #2
 8014670:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014672:	2300      	movs	r3, #0
 8014674:	61bb      	str	r3, [r7, #24]
 8014676:	e018      	b.n	80146aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014678:	79fb      	ldrb	r3, [r7, #7]
 801467a:	031a      	lsls	r2, r3, #12
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	4413      	add	r3, r2
 8014680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014684:	461a      	mov	r2, r3
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	3301      	adds	r3, #1
 8014690:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014692:	69fb      	ldr	r3, [r7, #28]
 8014694:	3301      	adds	r3, #1
 8014696:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014698:	69fb      	ldr	r3, [r7, #28]
 801469a:	3301      	adds	r3, #1
 801469c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801469e:	69fb      	ldr	r3, [r7, #28]
 80146a0:	3301      	adds	r3, #1
 80146a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80146a4:	69bb      	ldr	r3, [r7, #24]
 80146a6:	3301      	adds	r3, #1
 80146a8:	61bb      	str	r3, [r7, #24]
 80146aa:	69ba      	ldr	r2, [r7, #24]
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d3e2      	bcc.n	8014678 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80146b2:	2300      	movs	r3, #0
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	3724      	adds	r7, #36	; 0x24
 80146b8:	46bd      	mov	sp, r7
 80146ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146be:	4770      	bx	lr

080146c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80146c0:	b480      	push	{r7}
 80146c2:	b08b      	sub	sp, #44	; 0x2c
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	60f8      	str	r0, [r7, #12]
 80146c8:	60b9      	str	r1, [r7, #8]
 80146ca:	4613      	mov	r3, r2
 80146cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80146d6:	88fb      	ldrh	r3, [r7, #6]
 80146d8:	089b      	lsrs	r3, r3, #2
 80146da:	b29b      	uxth	r3, r3
 80146dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80146de:	88fb      	ldrh	r3, [r7, #6]
 80146e0:	f003 0303 	and.w	r3, r3, #3
 80146e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80146e6:	2300      	movs	r3, #0
 80146e8:	623b      	str	r3, [r7, #32]
 80146ea:	e014      	b.n	8014716 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80146ec:	69bb      	ldr	r3, [r7, #24]
 80146ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80146f2:	681a      	ldr	r2, [r3, #0]
 80146f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80146f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146fa:	3301      	adds	r3, #1
 80146fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80146fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014700:	3301      	adds	r3, #1
 8014702:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014706:	3301      	adds	r3, #1
 8014708:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470c:	3301      	adds	r3, #1
 801470e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014710:	6a3b      	ldr	r3, [r7, #32]
 8014712:	3301      	adds	r3, #1
 8014714:	623b      	str	r3, [r7, #32]
 8014716:	6a3a      	ldr	r2, [r7, #32]
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	429a      	cmp	r2, r3
 801471c:	d3e6      	bcc.n	80146ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801471e:	8bfb      	ldrh	r3, [r7, #30]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d01e      	beq.n	8014762 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014724:	2300      	movs	r3, #0
 8014726:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014728:	69bb      	ldr	r3, [r7, #24]
 801472a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801472e:	461a      	mov	r2, r3
 8014730:	f107 0310 	add.w	r3, r7, #16
 8014734:	6812      	ldr	r2, [r2, #0]
 8014736:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014738:	693a      	ldr	r2, [r7, #16]
 801473a:	6a3b      	ldr	r3, [r7, #32]
 801473c:	b2db      	uxtb	r3, r3
 801473e:	00db      	lsls	r3, r3, #3
 8014740:	fa22 f303 	lsr.w	r3, r2, r3
 8014744:	b2da      	uxtb	r2, r3
 8014746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014748:	701a      	strb	r2, [r3, #0]
      i++;
 801474a:	6a3b      	ldr	r3, [r7, #32]
 801474c:	3301      	adds	r3, #1
 801474e:	623b      	str	r3, [r7, #32]
      pDest++;
 8014750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014752:	3301      	adds	r3, #1
 8014754:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014756:	8bfb      	ldrh	r3, [r7, #30]
 8014758:	3b01      	subs	r3, #1
 801475a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801475c:	8bfb      	ldrh	r3, [r7, #30]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d1ea      	bne.n	8014738 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014764:	4618      	mov	r0, r3
 8014766:	372c      	adds	r7, #44	; 0x2c
 8014768:	46bd      	mov	sp, r7
 801476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476e:	4770      	bx	lr

08014770 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014770:	b480      	push	{r7}
 8014772:	b085      	sub	sp, #20
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
 8014778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	785b      	ldrb	r3, [r3, #1]
 8014788:	2b01      	cmp	r3, #1
 801478a:	d12c      	bne.n	80147e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	015a      	lsls	r2, r3, #5
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	4413      	add	r3, r2
 8014794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	2b00      	cmp	r3, #0
 801479c:	db12      	blt.n	80147c4 <USB_EPSetStall+0x54>
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d00f      	beq.n	80147c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	015a      	lsls	r2, r3, #5
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	4413      	add	r3, r2
 80147ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	68ba      	ldr	r2, [r7, #8]
 80147b4:	0151      	lsls	r1, r2, #5
 80147b6:	68fa      	ldr	r2, [r7, #12]
 80147b8:	440a      	add	r2, r1
 80147ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80147c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	015a      	lsls	r2, r3, #5
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	4413      	add	r3, r2
 80147cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	68ba      	ldr	r2, [r7, #8]
 80147d4:	0151      	lsls	r1, r2, #5
 80147d6:	68fa      	ldr	r2, [r7, #12]
 80147d8:	440a      	add	r2, r1
 80147da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80147e2:	6013      	str	r3, [r2, #0]
 80147e4:	e02b      	b.n	801483e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	015a      	lsls	r2, r3, #5
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	4413      	add	r3, r2
 80147ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	db12      	blt.n	801481e <USB_EPSetStall+0xae>
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d00f      	beq.n	801481e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	015a      	lsls	r2, r3, #5
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	4413      	add	r3, r2
 8014806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	68ba      	ldr	r2, [r7, #8]
 801480e:	0151      	lsls	r1, r2, #5
 8014810:	68fa      	ldr	r2, [r7, #12]
 8014812:	440a      	add	r2, r1
 8014814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014818:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801481c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	015a      	lsls	r2, r3, #5
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	4413      	add	r3, r2
 8014826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	68ba      	ldr	r2, [r7, #8]
 801482e:	0151      	lsls	r1, r2, #5
 8014830:	68fa      	ldr	r2, [r7, #12]
 8014832:	440a      	add	r2, r1
 8014834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801483c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801483e:	2300      	movs	r3, #0
}
 8014840:	4618      	mov	r0, r3
 8014842:	3714      	adds	r7, #20
 8014844:	46bd      	mov	sp, r7
 8014846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484a:	4770      	bx	lr

0801484c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801484c:	b480      	push	{r7}
 801484e:	b085      	sub	sp, #20
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801485a:	683b      	ldr	r3, [r7, #0]
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	785b      	ldrb	r3, [r3, #1]
 8014864:	2b01      	cmp	r3, #1
 8014866:	d128      	bne.n	80148ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	015a      	lsls	r2, r3, #5
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	4413      	add	r3, r2
 8014870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	68ba      	ldr	r2, [r7, #8]
 8014878:	0151      	lsls	r1, r2, #5
 801487a:	68fa      	ldr	r2, [r7, #12]
 801487c:	440a      	add	r2, r1
 801487e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014886:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	791b      	ldrb	r3, [r3, #4]
 801488c:	2b03      	cmp	r3, #3
 801488e:	d003      	beq.n	8014898 <USB_EPClearStall+0x4c>
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	791b      	ldrb	r3, [r3, #4]
 8014894:	2b02      	cmp	r3, #2
 8014896:	d138      	bne.n	801490a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	015a      	lsls	r2, r3, #5
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	4413      	add	r3, r2
 80148a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	68ba      	ldr	r2, [r7, #8]
 80148a8:	0151      	lsls	r1, r2, #5
 80148aa:	68fa      	ldr	r2, [r7, #12]
 80148ac:	440a      	add	r2, r1
 80148ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80148b6:	6013      	str	r3, [r2, #0]
 80148b8:	e027      	b.n	801490a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	015a      	lsls	r2, r3, #5
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	4413      	add	r3, r2
 80148c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	68ba      	ldr	r2, [r7, #8]
 80148ca:	0151      	lsls	r1, r2, #5
 80148cc:	68fa      	ldr	r2, [r7, #12]
 80148ce:	440a      	add	r2, r1
 80148d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80148d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	791b      	ldrb	r3, [r3, #4]
 80148de:	2b03      	cmp	r3, #3
 80148e0:	d003      	beq.n	80148ea <USB_EPClearStall+0x9e>
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	791b      	ldrb	r3, [r3, #4]
 80148e6:	2b02      	cmp	r3, #2
 80148e8:	d10f      	bne.n	801490a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	015a      	lsls	r2, r3, #5
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	4413      	add	r3, r2
 80148f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	68ba      	ldr	r2, [r7, #8]
 80148fa:	0151      	lsls	r1, r2, #5
 80148fc:	68fa      	ldr	r2, [r7, #12]
 80148fe:	440a      	add	r2, r1
 8014900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014908:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801490a:	2300      	movs	r3, #0
}
 801490c:	4618      	mov	r0, r3
 801490e:	3714      	adds	r7, #20
 8014910:	46bd      	mov	sp, r7
 8014912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014916:	4770      	bx	lr

08014918 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014918:	b480      	push	{r7}
 801491a:	b085      	sub	sp, #20
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	460b      	mov	r3, r1
 8014922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	68fa      	ldr	r2, [r7, #12]
 8014932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014936:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801493a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	78fb      	ldrb	r3, [r7, #3]
 8014946:	011b      	lsls	r3, r3, #4
 8014948:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801494c:	68f9      	ldr	r1, [r7, #12]
 801494e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014952:	4313      	orrs	r3, r2
 8014954:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014956:	2300      	movs	r3, #0
}
 8014958:	4618      	mov	r0, r3
 801495a:	3714      	adds	r7, #20
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr

08014964 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014964:	b480      	push	{r7}
 8014966:	b085      	sub	sp, #20
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	68fa      	ldr	r2, [r7, #12]
 801497a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801497e:	f023 0303 	bic.w	r3, r3, #3
 8014982:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801498a:	685b      	ldr	r3, [r3, #4]
 801498c:	68fa      	ldr	r2, [r7, #12]
 801498e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014992:	f023 0302 	bic.w	r3, r3, #2
 8014996:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014998:	2300      	movs	r3, #0
}
 801499a:	4618      	mov	r0, r3
 801499c:	3714      	adds	r7, #20
 801499e:	46bd      	mov	sp, r7
 80149a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a4:	4770      	bx	lr

080149a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80149a6:	b480      	push	{r7}
 80149a8:	b085      	sub	sp, #20
 80149aa:	af00      	add	r7, sp, #0
 80149ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	68fa      	ldr	r2, [r7, #12]
 80149bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80149c0:	f023 0303 	bic.w	r3, r3, #3
 80149c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149cc:	685b      	ldr	r3, [r3, #4]
 80149ce:	68fa      	ldr	r2, [r7, #12]
 80149d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80149d4:	f043 0302 	orr.w	r3, r3, #2
 80149d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80149da:	2300      	movs	r3, #0
}
 80149dc:	4618      	mov	r0, r3
 80149de:	3714      	adds	r7, #20
 80149e0:	46bd      	mov	sp, r7
 80149e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e6:	4770      	bx	lr

080149e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80149e8:	b480      	push	{r7}
 80149ea:	b085      	sub	sp, #20
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	695b      	ldr	r3, [r3, #20]
 80149f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	699b      	ldr	r3, [r3, #24]
 80149fa:	68fa      	ldr	r2, [r7, #12]
 80149fc:	4013      	ands	r3, r2
 80149fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014a00:	68fb      	ldr	r3, [r7, #12]
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	3714      	adds	r7, #20
 8014a06:	46bd      	mov	sp, r7
 8014a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0c:	4770      	bx	lr

08014a0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014a0e:	b480      	push	{r7}
 8014a10:	b085      	sub	sp, #20
 8014a12:	af00      	add	r7, sp, #0
 8014a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a20:	699b      	ldr	r3, [r3, #24]
 8014a22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a2a:	69db      	ldr	r3, [r3, #28]
 8014a2c:	68ba      	ldr	r2, [r7, #8]
 8014a2e:	4013      	ands	r3, r2
 8014a30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	0c1b      	lsrs	r3, r3, #16
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3714      	adds	r7, #20
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a40:	4770      	bx	lr

08014a42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014a42:	b480      	push	{r7}
 8014a44:	b085      	sub	sp, #20
 8014a46:	af00      	add	r7, sp, #0
 8014a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a54:	699b      	ldr	r3, [r3, #24]
 8014a56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a5e:	69db      	ldr	r3, [r3, #28]
 8014a60:	68ba      	ldr	r2, [r7, #8]
 8014a62:	4013      	ands	r3, r2
 8014a64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	b29b      	uxth	r3, r3
}
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	3714      	adds	r7, #20
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a74:	4770      	bx	lr

08014a76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014a76:	b480      	push	{r7}
 8014a78:	b085      	sub	sp, #20
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	6078      	str	r0, [r7, #4]
 8014a7e:	460b      	mov	r3, r1
 8014a80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014a86:	78fb      	ldrb	r3, [r7, #3]
 8014a88:	015a      	lsls	r2, r3, #5
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	4413      	add	r3, r2
 8014a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a92:	689b      	ldr	r3, [r3, #8]
 8014a94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a9c:	695b      	ldr	r3, [r3, #20]
 8014a9e:	68ba      	ldr	r2, [r7, #8]
 8014aa0:	4013      	ands	r3, r2
 8014aa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014aa4:	68bb      	ldr	r3, [r7, #8]
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3714      	adds	r7, #20
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab0:	4770      	bx	lr

08014ab2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014ab2:	b480      	push	{r7}
 8014ab4:	b087      	sub	sp, #28
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	6078      	str	r0, [r7, #4]
 8014aba:	460b      	mov	r3, r1
 8014abc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014ac2:	697b      	ldr	r3, [r7, #20]
 8014ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ac8:	691b      	ldr	r3, [r3, #16]
 8014aca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ad4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014ad6:	78fb      	ldrb	r3, [r7, #3]
 8014ad8:	f003 030f 	and.w	r3, r3, #15
 8014adc:	68fa      	ldr	r2, [r7, #12]
 8014ade:	fa22 f303 	lsr.w	r3, r2, r3
 8014ae2:	01db      	lsls	r3, r3, #7
 8014ae4:	b2db      	uxtb	r3, r3
 8014ae6:	693a      	ldr	r2, [r7, #16]
 8014ae8:	4313      	orrs	r3, r2
 8014aea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014aec:	78fb      	ldrb	r3, [r7, #3]
 8014aee:	015a      	lsls	r2, r3, #5
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	4413      	add	r3, r2
 8014af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014af8:	689b      	ldr	r3, [r3, #8]
 8014afa:	693a      	ldr	r2, [r7, #16]
 8014afc:	4013      	ands	r3, r2
 8014afe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014b00:	68bb      	ldr	r3, [r7, #8]
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	371c      	adds	r7, #28
 8014b06:	46bd      	mov	sp, r7
 8014b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0c:	4770      	bx	lr

08014b0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014b0e:	b480      	push	{r7}
 8014b10:	b083      	sub	sp, #12
 8014b12:	af00      	add	r7, sp, #0
 8014b14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	695b      	ldr	r3, [r3, #20]
 8014b1a:	f003 0301 	and.w	r3, r3, #1
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	370c      	adds	r7, #12
 8014b22:	46bd      	mov	sp, r7
 8014b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b28:	4770      	bx	lr

08014b2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014b2a:	b480      	push	{r7}
 8014b2c:	b085      	sub	sp, #20
 8014b2e:	af00      	add	r7, sp, #0
 8014b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	68fa      	ldr	r2, [r7, #12]
 8014b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014b48:	f023 0307 	bic.w	r3, r3, #7
 8014b4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b54:	685b      	ldr	r3, [r3, #4]
 8014b56:	68fa      	ldr	r2, [r7, #12]
 8014b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014b60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014b62:	2300      	movs	r3, #0
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	3714      	adds	r7, #20
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6e:	4770      	bx	lr

08014b70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014b70:	b480      	push	{r7}
 8014b72:	b087      	sub	sp, #28
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	60f8      	str	r0, [r7, #12]
 8014b78:	460b      	mov	r3, r1
 8014b7a:	607a      	str	r2, [r7, #4]
 8014b7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	333c      	adds	r3, #60	; 0x3c
 8014b86:	3304      	adds	r3, #4
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014b8c:	693b      	ldr	r3, [r7, #16]
 8014b8e:	4a26      	ldr	r2, [pc, #152]	; (8014c28 <USB_EP0_OutStart+0xb8>)
 8014b90:	4293      	cmp	r3, r2
 8014b92:	d90a      	bls.n	8014baa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ba4:	d101      	bne.n	8014baa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	e037      	b.n	8014c1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bb0:	461a      	mov	r2, r3
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bbc:	691b      	ldr	r3, [r3, #16]
 8014bbe:	697a      	ldr	r2, [r7, #20]
 8014bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014bc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bd0:	691b      	ldr	r3, [r3, #16]
 8014bd2:	697a      	ldr	r2, [r7, #20]
 8014bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bd8:	f043 0318 	orr.w	r3, r3, #24
 8014bdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014be4:	691b      	ldr	r3, [r3, #16]
 8014be6:	697a      	ldr	r2, [r7, #20]
 8014be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014bf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014bf2:	7afb      	ldrb	r3, [r7, #11]
 8014bf4:	2b01      	cmp	r3, #1
 8014bf6:	d10f      	bne.n	8014c18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bfe:	461a      	mov	r2, r3
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	697a      	ldr	r2, [r7, #20]
 8014c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014c18:	2300      	movs	r3, #0
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	371c      	adds	r7, #28
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c24:	4770      	bx	lr
 8014c26:	bf00      	nop
 8014c28:	4f54300a 	.word	0x4f54300a

08014c2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014c2c:	b480      	push	{r7}
 8014c2e:	b085      	sub	sp, #20
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014c34:	2300      	movs	r3, #0
 8014c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	3301      	adds	r3, #1
 8014c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	4a13      	ldr	r2, [pc, #76]	; (8014c90 <USB_CoreReset+0x64>)
 8014c42:	4293      	cmp	r3, r2
 8014c44:	d901      	bls.n	8014c4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014c46:	2303      	movs	r3, #3
 8014c48:	e01b      	b.n	8014c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	691b      	ldr	r3, [r3, #16]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	daf2      	bge.n	8014c38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014c52:	2300      	movs	r3, #0
 8014c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	691b      	ldr	r3, [r3, #16]
 8014c5a:	f043 0201 	orr.w	r2, r3, #1
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	3301      	adds	r3, #1
 8014c66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	4a09      	ldr	r2, [pc, #36]	; (8014c90 <USB_CoreReset+0x64>)
 8014c6c:	4293      	cmp	r3, r2
 8014c6e:	d901      	bls.n	8014c74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014c70:	2303      	movs	r3, #3
 8014c72:	e006      	b.n	8014c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	691b      	ldr	r3, [r3, #16]
 8014c78:	f003 0301 	and.w	r3, r3, #1
 8014c7c:	2b01      	cmp	r3, #1
 8014c7e:	d0f0      	beq.n	8014c62 <USB_CoreReset+0x36>

  return HAL_OK;
 8014c80:	2300      	movs	r3, #0
}
 8014c82:	4618      	mov	r0, r3
 8014c84:	3714      	adds	r7, #20
 8014c86:	46bd      	mov	sp, r7
 8014c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8c:	4770      	bx	lr
 8014c8e:	bf00      	nop
 8014c90:	00030d40 	.word	0x00030d40

08014c94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b084      	sub	sp, #16
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
 8014c9c:	460b      	mov	r3, r1
 8014c9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014ca0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014ca4:	f002 f9c6 	bl	8017034 <USBD_static_malloc>
 8014ca8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d105      	bne.n	8014cbc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014cb8:	2302      	movs	r3, #2
 8014cba:	e066      	b.n	8014d8a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	68fa      	ldr	r2, [r7, #12]
 8014cc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	7c1b      	ldrb	r3, [r3, #16]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d119      	bne.n	8014d00 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014cd0:	2202      	movs	r2, #2
 8014cd2:	2181      	movs	r1, #129	; 0x81
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f002 f870 	bl	8016dba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2201      	movs	r2, #1
 8014cde:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ce4:	2202      	movs	r2, #2
 8014ce6:	2101      	movs	r1, #1
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f002 f866 	bl	8016dba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2201      	movs	r2, #1
 8014cf2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2210      	movs	r2, #16
 8014cfa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8014cfe:	e016      	b.n	8014d2e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014d00:	2340      	movs	r3, #64	; 0x40
 8014d02:	2202      	movs	r2, #2
 8014d04:	2181      	movs	r1, #129	; 0x81
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f002 f857 	bl	8016dba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2201      	movs	r2, #1
 8014d10:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014d12:	2340      	movs	r3, #64	; 0x40
 8014d14:	2202      	movs	r2, #2
 8014d16:	2101      	movs	r1, #1
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f002 f84e 	bl	8016dba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2201      	movs	r2, #1
 8014d22:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	2210      	movs	r2, #16
 8014d2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014d2e:	2308      	movs	r3, #8
 8014d30:	2203      	movs	r2, #3
 8014d32:	2182      	movs	r1, #130	; 0x82
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f002 f840 	bl	8016dba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2201      	movs	r2, #1
 8014d3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	2200      	movs	r2, #0
 8014d58:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	7c1b      	ldrb	r3, [r3, #16]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d109      	bne.n	8014d78 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d6e:	2101      	movs	r1, #1
 8014d70:	6878      	ldr	r0, [r7, #4]
 8014d72:	f002 f911 	bl	8016f98 <USBD_LL_PrepareReceive>
 8014d76:	e007      	b.n	8014d88 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014d7e:	2340      	movs	r3, #64	; 0x40
 8014d80:	2101      	movs	r1, #1
 8014d82:	6878      	ldr	r0, [r7, #4]
 8014d84:	f002 f908 	bl	8016f98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014d88:	2300      	movs	r3, #0
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3710      	adds	r7, #16
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}

08014d92 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b082      	sub	sp, #8
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	6078      	str	r0, [r7, #4]
 8014d9a:	460b      	mov	r3, r1
 8014d9c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014d9e:	2181      	movs	r1, #129	; 0x81
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f002 f830 	bl	8016e06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	2200      	movs	r2, #0
 8014daa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014dac:	2101      	movs	r1, #1
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f002 f829 	bl	8016e06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	2200      	movs	r2, #0
 8014db8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014dbc:	2182      	movs	r1, #130	; 0x82
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f002 f821 	bl	8016e06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00e      	beq.n	8014dfc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014de4:	685b      	ldr	r3, [r3, #4]
 8014de6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014dee:	4618      	mov	r0, r3
 8014df0:	f002 f92e 	bl	8017050 <USBD_static_free>
    pdev->pClassData = NULL;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2200      	movs	r2, #0
 8014df8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014dfc:	2300      	movs	r3, #0
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3708      	adds	r7, #8
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
	...

08014e08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b086      	sub	sp, #24
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
 8014e10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e22:	2300      	movs	r3, #0
 8014e24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014e26:	693b      	ldr	r3, [r7, #16]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d101      	bne.n	8014e30 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8014e2c:	2303      	movs	r3, #3
 8014e2e:	e0af      	b.n	8014f90 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014e30:	683b      	ldr	r3, [r7, #0]
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d03f      	beq.n	8014ebc <USBD_CDC_Setup+0xb4>
 8014e3c:	2b20      	cmp	r3, #32
 8014e3e:	f040 809f 	bne.w	8014f80 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	88db      	ldrh	r3, [r3, #6]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d02e      	beq.n	8014ea8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	b25b      	sxtb	r3, r3
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	da16      	bge.n	8014e82 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e5a:	689b      	ldr	r3, [r3, #8]
 8014e5c:	683a      	ldr	r2, [r7, #0]
 8014e5e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8014e60:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014e62:	683a      	ldr	r2, [r7, #0]
 8014e64:	88d2      	ldrh	r2, [r2, #6]
 8014e66:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	88db      	ldrh	r3, [r3, #6]
 8014e6c:	2b07      	cmp	r3, #7
 8014e6e:	bf28      	it	cs
 8014e70:	2307      	movcs	r3, #7
 8014e72:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	89fa      	ldrh	r2, [r7, #14]
 8014e78:	4619      	mov	r1, r3
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f001 fb19 	bl	80164b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8014e80:	e085      	b.n	8014f8e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	785a      	ldrb	r2, [r3, #1]
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	88db      	ldrh	r3, [r3, #6]
 8014e90:	b2da      	uxtb	r2, r3
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8014e98:	6939      	ldr	r1, [r7, #16]
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	88db      	ldrh	r3, [r3, #6]
 8014e9e:	461a      	mov	r2, r3
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f001 fb32 	bl	801650a <USBD_CtlPrepareRx>
      break;
 8014ea6:	e072      	b.n	8014f8e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014eae:	689b      	ldr	r3, [r3, #8]
 8014eb0:	683a      	ldr	r2, [r7, #0]
 8014eb2:	7850      	ldrb	r0, [r2, #1]
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	6839      	ldr	r1, [r7, #0]
 8014eb8:	4798      	blx	r3
      break;
 8014eba:	e068      	b.n	8014f8e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	785b      	ldrb	r3, [r3, #1]
 8014ec0:	2b0b      	cmp	r3, #11
 8014ec2:	d852      	bhi.n	8014f6a <USBD_CDC_Setup+0x162>
 8014ec4:	a201      	add	r2, pc, #4	; (adr r2, 8014ecc <USBD_CDC_Setup+0xc4>)
 8014ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014eca:	bf00      	nop
 8014ecc:	08014efd 	.word	0x08014efd
 8014ed0:	08014f79 	.word	0x08014f79
 8014ed4:	08014f6b 	.word	0x08014f6b
 8014ed8:	08014f6b 	.word	0x08014f6b
 8014edc:	08014f6b 	.word	0x08014f6b
 8014ee0:	08014f6b 	.word	0x08014f6b
 8014ee4:	08014f6b 	.word	0x08014f6b
 8014ee8:	08014f6b 	.word	0x08014f6b
 8014eec:	08014f6b 	.word	0x08014f6b
 8014ef0:	08014f6b 	.word	0x08014f6b
 8014ef4:	08014f27 	.word	0x08014f27
 8014ef8:	08014f51 	.word	0x08014f51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f02:	b2db      	uxtb	r3, r3
 8014f04:	2b03      	cmp	r3, #3
 8014f06:	d107      	bne.n	8014f18 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014f08:	f107 030a 	add.w	r3, r7, #10
 8014f0c:	2202      	movs	r2, #2
 8014f0e:	4619      	mov	r1, r3
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f001 face 	bl	80164b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f16:	e032      	b.n	8014f7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014f18:	6839      	ldr	r1, [r7, #0]
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f001 fa58 	bl	80163d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f20:	2303      	movs	r3, #3
 8014f22:	75fb      	strb	r3, [r7, #23]
          break;
 8014f24:	e02b      	b.n	8014f7e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f2c:	b2db      	uxtb	r3, r3
 8014f2e:	2b03      	cmp	r3, #3
 8014f30:	d107      	bne.n	8014f42 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014f32:	f107 030d 	add.w	r3, r7, #13
 8014f36:	2201      	movs	r2, #1
 8014f38:	4619      	mov	r1, r3
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f001 fab9 	bl	80164b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f40:	e01d      	b.n	8014f7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014f42:	6839      	ldr	r1, [r7, #0]
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f001 fa43 	bl	80163d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f4a:	2303      	movs	r3, #3
 8014f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8014f4e:	e016      	b.n	8014f7e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	2b03      	cmp	r3, #3
 8014f5a:	d00f      	beq.n	8014f7c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8014f5c:	6839      	ldr	r1, [r7, #0]
 8014f5e:	6878      	ldr	r0, [r7, #4]
 8014f60:	f001 fa36 	bl	80163d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f64:	2303      	movs	r3, #3
 8014f66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014f68:	e008      	b.n	8014f7c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014f6a:	6839      	ldr	r1, [r7, #0]
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f001 fa2f 	bl	80163d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8014f72:	2303      	movs	r3, #3
 8014f74:	75fb      	strb	r3, [r7, #23]
          break;
 8014f76:	e002      	b.n	8014f7e <USBD_CDC_Setup+0x176>
          break;
 8014f78:	bf00      	nop
 8014f7a:	e008      	b.n	8014f8e <USBD_CDC_Setup+0x186>
          break;
 8014f7c:	bf00      	nop
      }
      break;
 8014f7e:	e006      	b.n	8014f8e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8014f80:	6839      	ldr	r1, [r7, #0]
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f001 fa24 	bl	80163d0 <USBD_CtlError>
      ret = USBD_FAIL;
 8014f88:	2303      	movs	r3, #3
 8014f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8014f8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8014f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3718      	adds	r7, #24
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}

08014f98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b084      	sub	sp, #16
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	460b      	mov	r3, r1
 8014fa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014faa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d101      	bne.n	8014fba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014fb6:	2303      	movs	r3, #3
 8014fb8:	e04f      	b.n	801505a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014fc2:	78fa      	ldrb	r2, [r7, #3]
 8014fc4:	6879      	ldr	r1, [r7, #4]
 8014fc6:	4613      	mov	r3, r2
 8014fc8:	009b      	lsls	r3, r3, #2
 8014fca:	4413      	add	r3, r2
 8014fcc:	009b      	lsls	r3, r3, #2
 8014fce:	440b      	add	r3, r1
 8014fd0:	3318      	adds	r3, #24
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d029      	beq.n	801502c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014fd8:	78fa      	ldrb	r2, [r7, #3]
 8014fda:	6879      	ldr	r1, [r7, #4]
 8014fdc:	4613      	mov	r3, r2
 8014fde:	009b      	lsls	r3, r3, #2
 8014fe0:	4413      	add	r3, r2
 8014fe2:	009b      	lsls	r3, r3, #2
 8014fe4:	440b      	add	r3, r1
 8014fe6:	3318      	adds	r3, #24
 8014fe8:	681a      	ldr	r2, [r3, #0]
 8014fea:	78f9      	ldrb	r1, [r7, #3]
 8014fec:	68f8      	ldr	r0, [r7, #12]
 8014fee:	460b      	mov	r3, r1
 8014ff0:	00db      	lsls	r3, r3, #3
 8014ff2:	440b      	add	r3, r1
 8014ff4:	009b      	lsls	r3, r3, #2
 8014ff6:	4403      	add	r3, r0
 8014ff8:	3348      	adds	r3, #72	; 0x48
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	fbb2 f1f3 	udiv	r1, r2, r3
 8015000:	fb01 f303 	mul.w	r3, r1, r3
 8015004:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8015006:	2b00      	cmp	r3, #0
 8015008:	d110      	bne.n	801502c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801500a:	78fa      	ldrb	r2, [r7, #3]
 801500c:	6879      	ldr	r1, [r7, #4]
 801500e:	4613      	mov	r3, r2
 8015010:	009b      	lsls	r3, r3, #2
 8015012:	4413      	add	r3, r2
 8015014:	009b      	lsls	r3, r3, #2
 8015016:	440b      	add	r3, r1
 8015018:	3318      	adds	r3, #24
 801501a:	2200      	movs	r2, #0
 801501c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801501e:	78f9      	ldrb	r1, [r7, #3]
 8015020:	2300      	movs	r3, #0
 8015022:	2200      	movs	r2, #0
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f001 ff96 	bl	8016f56 <USBD_LL_Transmit>
 801502a:	e015      	b.n	8015058 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801502c:	68bb      	ldr	r3, [r7, #8]
 801502e:	2200      	movs	r2, #0
 8015030:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801503a:	691b      	ldr	r3, [r3, #16]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d00b      	beq.n	8015058 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015046:	691b      	ldr	r3, [r3, #16]
 8015048:	68ba      	ldr	r2, [r7, #8]
 801504a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801504e:	68ba      	ldr	r2, [r7, #8]
 8015050:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015054:	78fa      	ldrb	r2, [r7, #3]
 8015056:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015058:	2300      	movs	r3, #0
}
 801505a:	4618      	mov	r0, r3
 801505c:	3710      	adds	r7, #16
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}

08015062 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015062:	b580      	push	{r7, lr}
 8015064:	b084      	sub	sp, #16
 8015066:	af00      	add	r7, sp, #0
 8015068:	6078      	str	r0, [r7, #4]
 801506a:	460b      	mov	r3, r1
 801506c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015074:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801507c:	2b00      	cmp	r3, #0
 801507e:	d101      	bne.n	8015084 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015080:	2303      	movs	r3, #3
 8015082:	e015      	b.n	80150b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015084:	78fb      	ldrb	r3, [r7, #3]
 8015086:	4619      	mov	r1, r3
 8015088:	6878      	ldr	r0, [r7, #4]
 801508a:	f001 ffa6 	bl	8016fda <USBD_LL_GetRxDataSize>
 801508e:	4602      	mov	r2, r0
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801509c:	68db      	ldr	r3, [r3, #12]
 801509e:	68fa      	ldr	r2, [r7, #12]
 80150a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80150a4:	68fa      	ldr	r2, [r7, #12]
 80150a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80150aa:	4611      	mov	r1, r2
 80150ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80150ae:	2300      	movs	r3, #0
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3710      	adds	r7, #16
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b084      	sub	sp, #16
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80150c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d101      	bne.n	80150d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80150ce:	2303      	movs	r3, #3
 80150d0:	e01b      	b.n	801510a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d015      	beq.n	8015108 <USBD_CDC_EP0_RxReady+0x50>
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80150e2:	2bff      	cmp	r3, #255	; 0xff
 80150e4:	d010      	beq.n	8015108 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80150ec:	689b      	ldr	r3, [r3, #8]
 80150ee:	68fa      	ldr	r2, [r7, #12]
 80150f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80150f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80150f6:	68fa      	ldr	r2, [r7, #12]
 80150f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80150fc:	b292      	uxth	r2, r2
 80150fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	22ff      	movs	r2, #255	; 0xff
 8015104:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015108:	2300      	movs	r3, #0
}
 801510a:	4618      	mov	r0, r3
 801510c:	3710      	adds	r7, #16
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}
	...

08015114 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015114:	b480      	push	{r7}
 8015116:	b083      	sub	sp, #12
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2243      	movs	r2, #67	; 0x43
 8015120:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8015122:	4b03      	ldr	r3, [pc, #12]	; (8015130 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8015124:	4618      	mov	r0, r3
 8015126:	370c      	adds	r7, #12
 8015128:	46bd      	mov	sp, r7
 801512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512e:	4770      	bx	lr
 8015130:	20000134 	.word	0x20000134

08015134 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015134:	b480      	push	{r7}
 8015136:	b083      	sub	sp, #12
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2243      	movs	r2, #67	; 0x43
 8015140:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8015142:	4b03      	ldr	r3, [pc, #12]	; (8015150 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8015144:	4618      	mov	r0, r3
 8015146:	370c      	adds	r7, #12
 8015148:	46bd      	mov	sp, r7
 801514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514e:	4770      	bx	lr
 8015150:	200000f0 	.word	0x200000f0

08015154 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015154:	b480      	push	{r7}
 8015156:	b083      	sub	sp, #12
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2243      	movs	r2, #67	; 0x43
 8015160:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8015162:	4b03      	ldr	r3, [pc, #12]	; (8015170 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8015164:	4618      	mov	r0, r3
 8015166:	370c      	adds	r7, #12
 8015168:	46bd      	mov	sp, r7
 801516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516e:	4770      	bx	lr
 8015170:	20000178 	.word	0x20000178

08015174 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015174:	b480      	push	{r7}
 8015176:	b083      	sub	sp, #12
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	220a      	movs	r2, #10
 8015180:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015182:	4b03      	ldr	r3, [pc, #12]	; (8015190 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015184:	4618      	mov	r0, r3
 8015186:	370c      	adds	r7, #12
 8015188:	46bd      	mov	sp, r7
 801518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518e:	4770      	bx	lr
 8015190:	200000ac 	.word	0x200000ac

08015194 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015194:	b480      	push	{r7}
 8015196:	b083      	sub	sp, #12
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d101      	bne.n	80151a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80151a4:	2303      	movs	r3, #3
 80151a6:	e004      	b.n	80151b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	683a      	ldr	r2, [r7, #0]
 80151ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80151b0:	2300      	movs	r3, #0
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	370c      	adds	r7, #12
 80151b6:	46bd      	mov	sp, r7
 80151b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151bc:	4770      	bx	lr

080151be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80151be:	b480      	push	{r7}
 80151c0:	b087      	sub	sp, #28
 80151c2:	af00      	add	r7, sp, #0
 80151c4:	60f8      	str	r0, [r7, #12]
 80151c6:	60b9      	str	r1, [r7, #8]
 80151c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80151d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80151d2:	697b      	ldr	r3, [r7, #20]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d101      	bne.n	80151dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80151d8:	2303      	movs	r3, #3
 80151da:	e008      	b.n	80151ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	68ba      	ldr	r2, [r7, #8]
 80151e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80151e4:	697b      	ldr	r3, [r7, #20]
 80151e6:	687a      	ldr	r2, [r7, #4]
 80151e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80151ec:	2300      	movs	r3, #0
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	371c      	adds	r7, #28
 80151f2:	46bd      	mov	sp, r7
 80151f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f8:	4770      	bx	lr

080151fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80151fa:	b480      	push	{r7}
 80151fc:	b085      	sub	sp, #20
 80151fe:	af00      	add	r7, sp, #0
 8015200:	6078      	str	r0, [r7, #4]
 8015202:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801520a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d101      	bne.n	8015216 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8015212:	2303      	movs	r3, #3
 8015214:	e004      	b.n	8015220 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	683a      	ldr	r2, [r7, #0]
 801521a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801521e:	2300      	movs	r3, #0
}
 8015220:	4618      	mov	r0, r3
 8015222:	3714      	adds	r7, #20
 8015224:	46bd      	mov	sp, r7
 8015226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522a:	4770      	bx	lr

0801522c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b084      	sub	sp, #16
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801523a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801523c:	2301      	movs	r3, #1
 801523e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015246:	2b00      	cmp	r3, #0
 8015248:	d101      	bne.n	801524e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801524a:	2303      	movs	r3, #3
 801524c:	e01a      	b.n	8015284 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015254:	2b00      	cmp	r3, #0
 8015256:	d114      	bne.n	8015282 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	2201      	movs	r2, #1
 801525c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015276:	2181      	movs	r1, #129	; 0x81
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f001 fe6c 	bl	8016f56 <USBD_LL_Transmit>

    ret = USBD_OK;
 801527e:	2300      	movs	r3, #0
 8015280:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015282:	7bfb      	ldrb	r3, [r7, #15]
}
 8015284:	4618      	mov	r0, r3
 8015286:	3710      	adds	r7, #16
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}

0801528c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b084      	sub	sp, #16
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801529a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d101      	bne.n	80152aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80152a6:	2303      	movs	r3, #3
 80152a8:	e016      	b.n	80152d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	7c1b      	ldrb	r3, [r3, #16]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d109      	bne.n	80152c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80152b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80152bc:	2101      	movs	r1, #1
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f001 fe6a 	bl	8016f98 <USBD_LL_PrepareReceive>
 80152c4:	e007      	b.n	80152d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80152cc:	2340      	movs	r3, #64	; 0x40
 80152ce:	2101      	movs	r1, #1
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	f001 fe61 	bl	8016f98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80152d6:	2300      	movs	r3, #0
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3710      	adds	r7, #16
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}

080152e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b086      	sub	sp, #24
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	60f8      	str	r0, [r7, #12]
 80152e8:	60b9      	str	r1, [r7, #8]
 80152ea:	4613      	mov	r3, r2
 80152ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d101      	bne.n	80152f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80152f4:	2303      	movs	r3, #3
 80152f6:	e01f      	b.n	8015338 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	2200      	movs	r2, #0
 80152fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2200      	movs	r2, #0
 8015304:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	2200      	movs	r2, #0
 801530c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d003      	beq.n	801531e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	68ba      	ldr	r2, [r7, #8]
 801531a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	2201      	movs	r2, #1
 8015322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	79fa      	ldrb	r2, [r7, #7]
 801532a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801532c:	68f8      	ldr	r0, [r7, #12]
 801532e:	f001 fcc1 	bl	8016cb4 <USBD_LL_Init>
 8015332:	4603      	mov	r3, r0
 8015334:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015336:	7dfb      	ldrb	r3, [r7, #23]
}
 8015338:	4618      	mov	r0, r3
 801533a:	3718      	adds	r7, #24
 801533c:	46bd      	mov	sp, r7
 801533e:	bd80      	pop	{r7, pc}

08015340 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
 8015348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801534a:	2300      	movs	r3, #0
 801534c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d101      	bne.n	8015358 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8015354:	2303      	movs	r3, #3
 8015356:	e016      	b.n	8015386 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	683a      	ldr	r2, [r7, #0]
 801535c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015368:	2b00      	cmp	r3, #0
 801536a:	d00b      	beq.n	8015384 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015374:	f107 020e 	add.w	r2, r7, #14
 8015378:	4610      	mov	r0, r2
 801537a:	4798      	blx	r3
 801537c:	4602      	mov	r2, r0
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8015384:	2300      	movs	r3, #0
}
 8015386:	4618      	mov	r0, r3
 8015388:	3710      	adds	r7, #16
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}

0801538e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801538e:	b580      	push	{r7, lr}
 8015390:	b082      	sub	sp, #8
 8015392:	af00      	add	r7, sp, #0
 8015394:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015396:	6878      	ldr	r0, [r7, #4]
 8015398:	f001 fcf4 	bl	8016d84 <USBD_LL_Start>
 801539c:	4603      	mov	r3, r0
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3708      	adds	r7, #8
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}

080153a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80153a6:	b480      	push	{r7}
 80153a8:	b083      	sub	sp, #12
 80153aa:	af00      	add	r7, sp, #0
 80153ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80153ae:	2300      	movs	r3, #0
}
 80153b0:	4618      	mov	r0, r3
 80153b2:	370c      	adds	r7, #12
 80153b4:	46bd      	mov	sp, r7
 80153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ba:	4770      	bx	lr

080153bc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b084      	sub	sp, #16
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	460b      	mov	r3, r1
 80153c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80153c8:	2303      	movs	r3, #3
 80153ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d009      	beq.n	80153ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	78fa      	ldrb	r2, [r7, #3]
 80153e0:	4611      	mov	r1, r2
 80153e2:	6878      	ldr	r0, [r7, #4]
 80153e4:	4798      	blx	r3
 80153e6:	4603      	mov	r3, r0
 80153e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80153ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	3710      	adds	r7, #16
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}

080153f4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b082      	sub	sp, #8
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
 80153fc:	460b      	mov	r3, r1
 80153fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015406:	2b00      	cmp	r3, #0
 8015408:	d007      	beq.n	801541a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015410:	685b      	ldr	r3, [r3, #4]
 8015412:	78fa      	ldrb	r2, [r7, #3]
 8015414:	4611      	mov	r1, r2
 8015416:	6878      	ldr	r0, [r7, #4]
 8015418:	4798      	blx	r3
  }

  return USBD_OK;
 801541a:	2300      	movs	r3, #0
}
 801541c:	4618      	mov	r0, r3
 801541e:	3708      	adds	r7, #8
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}

08015424 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015434:	6839      	ldr	r1, [r7, #0]
 8015436:	4618      	mov	r0, r3
 8015438:	f000 ff90 	bl	801635c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2201      	movs	r2, #1
 8015440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801544a:	461a      	mov	r2, r3
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015458:	f003 031f 	and.w	r3, r3, #31
 801545c:	2b02      	cmp	r3, #2
 801545e:	d01a      	beq.n	8015496 <USBD_LL_SetupStage+0x72>
 8015460:	2b02      	cmp	r3, #2
 8015462:	d822      	bhi.n	80154aa <USBD_LL_SetupStage+0x86>
 8015464:	2b00      	cmp	r3, #0
 8015466:	d002      	beq.n	801546e <USBD_LL_SetupStage+0x4a>
 8015468:	2b01      	cmp	r3, #1
 801546a:	d00a      	beq.n	8015482 <USBD_LL_SetupStage+0x5e>
 801546c:	e01d      	b.n	80154aa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015474:	4619      	mov	r1, r3
 8015476:	6878      	ldr	r0, [r7, #4]
 8015478:	f000 fa62 	bl	8015940 <USBD_StdDevReq>
 801547c:	4603      	mov	r3, r0
 801547e:	73fb      	strb	r3, [r7, #15]
      break;
 8015480:	e020      	b.n	80154c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015488:	4619      	mov	r1, r3
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	f000 fac6 	bl	8015a1c <USBD_StdItfReq>
 8015490:	4603      	mov	r3, r0
 8015492:	73fb      	strb	r3, [r7, #15]
      break;
 8015494:	e016      	b.n	80154c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801549c:	4619      	mov	r1, r3
 801549e:	6878      	ldr	r0, [r7, #4]
 80154a0:	f000 fb05 	bl	8015aae <USBD_StdEPReq>
 80154a4:	4603      	mov	r3, r0
 80154a6:	73fb      	strb	r3, [r7, #15]
      break;
 80154a8:	e00c      	b.n	80154c4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80154b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80154b4:	b2db      	uxtb	r3, r3
 80154b6:	4619      	mov	r1, r3
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	f001 fcc3 	bl	8016e44 <USBD_LL_StallEP>
 80154be:	4603      	mov	r3, r0
 80154c0:	73fb      	strb	r3, [r7, #15]
      break;
 80154c2:	bf00      	nop
  }

  return ret;
 80154c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	3710      	adds	r7, #16
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}

080154ce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80154ce:	b580      	push	{r7, lr}
 80154d0:	b086      	sub	sp, #24
 80154d2:	af00      	add	r7, sp, #0
 80154d4:	60f8      	str	r0, [r7, #12]
 80154d6:	460b      	mov	r3, r1
 80154d8:	607a      	str	r2, [r7, #4]
 80154da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80154dc:	7afb      	ldrb	r3, [r7, #11]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d138      	bne.n	8015554 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80154e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80154f0:	2b03      	cmp	r3, #3
 80154f2:	d14a      	bne.n	801558a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	689a      	ldr	r2, [r3, #8]
 80154f8:	693b      	ldr	r3, [r7, #16]
 80154fa:	68db      	ldr	r3, [r3, #12]
 80154fc:	429a      	cmp	r2, r3
 80154fe:	d913      	bls.n	8015528 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015500:	693b      	ldr	r3, [r7, #16]
 8015502:	689a      	ldr	r2, [r3, #8]
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	68db      	ldr	r3, [r3, #12]
 8015508:	1ad2      	subs	r2, r2, r3
 801550a:	693b      	ldr	r3, [r7, #16]
 801550c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801550e:	693b      	ldr	r3, [r7, #16]
 8015510:	68da      	ldr	r2, [r3, #12]
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	689b      	ldr	r3, [r3, #8]
 8015516:	4293      	cmp	r3, r2
 8015518:	bf28      	it	cs
 801551a:	4613      	movcs	r3, r2
 801551c:	461a      	mov	r2, r3
 801551e:	6879      	ldr	r1, [r7, #4]
 8015520:	68f8      	ldr	r0, [r7, #12]
 8015522:	f001 f80f 	bl	8016544 <USBD_CtlContinueRx>
 8015526:	e030      	b.n	801558a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801552e:	b2db      	uxtb	r3, r3
 8015530:	2b03      	cmp	r3, #3
 8015532:	d10b      	bne.n	801554c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801553a:	691b      	ldr	r3, [r3, #16]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d005      	beq.n	801554c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015546:	691b      	ldr	r3, [r3, #16]
 8015548:	68f8      	ldr	r0, [r7, #12]
 801554a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	f001 f80a 	bl	8016566 <USBD_CtlSendStatus>
 8015552:	e01a      	b.n	801558a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801555a:	b2db      	uxtb	r3, r3
 801555c:	2b03      	cmp	r3, #3
 801555e:	d114      	bne.n	801558a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015566:	699b      	ldr	r3, [r3, #24]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d00e      	beq.n	801558a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015572:	699b      	ldr	r3, [r3, #24]
 8015574:	7afa      	ldrb	r2, [r7, #11]
 8015576:	4611      	mov	r1, r2
 8015578:	68f8      	ldr	r0, [r7, #12]
 801557a:	4798      	blx	r3
 801557c:	4603      	mov	r3, r0
 801557e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8015580:	7dfb      	ldrb	r3, [r7, #23]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d001      	beq.n	801558a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8015586:	7dfb      	ldrb	r3, [r7, #23]
 8015588:	e000      	b.n	801558c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801558a:	2300      	movs	r3, #0
}
 801558c:	4618      	mov	r0, r3
 801558e:	3718      	adds	r7, #24
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}

08015594 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b086      	sub	sp, #24
 8015598:	af00      	add	r7, sp, #0
 801559a:	60f8      	str	r0, [r7, #12]
 801559c:	460b      	mov	r3, r1
 801559e:	607a      	str	r2, [r7, #4]
 80155a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80155a2:	7afb      	ldrb	r3, [r7, #11]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d16b      	bne.n	8015680 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	3314      	adds	r3, #20
 80155ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80155b4:	2b02      	cmp	r3, #2
 80155b6:	d156      	bne.n	8015666 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80155b8:	693b      	ldr	r3, [r7, #16]
 80155ba:	689a      	ldr	r2, [r3, #8]
 80155bc:	693b      	ldr	r3, [r7, #16]
 80155be:	68db      	ldr	r3, [r3, #12]
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d914      	bls.n	80155ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	689a      	ldr	r2, [r3, #8]
 80155c8:	693b      	ldr	r3, [r7, #16]
 80155ca:	68db      	ldr	r3, [r3, #12]
 80155cc:	1ad2      	subs	r2, r2, r3
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80155d2:	693b      	ldr	r3, [r7, #16]
 80155d4:	689b      	ldr	r3, [r3, #8]
 80155d6:	461a      	mov	r2, r3
 80155d8:	6879      	ldr	r1, [r7, #4]
 80155da:	68f8      	ldr	r0, [r7, #12]
 80155dc:	f000 ff84 	bl	80164e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155e0:	2300      	movs	r3, #0
 80155e2:	2200      	movs	r2, #0
 80155e4:	2100      	movs	r1, #0
 80155e6:	68f8      	ldr	r0, [r7, #12]
 80155e8:	f001 fcd6 	bl	8016f98 <USBD_LL_PrepareReceive>
 80155ec:	e03b      	b.n	8015666 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80155ee:	693b      	ldr	r3, [r7, #16]
 80155f0:	68da      	ldr	r2, [r3, #12]
 80155f2:	693b      	ldr	r3, [r7, #16]
 80155f4:	689b      	ldr	r3, [r3, #8]
 80155f6:	429a      	cmp	r2, r3
 80155f8:	d11c      	bne.n	8015634 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80155fa:	693b      	ldr	r3, [r7, #16]
 80155fc:	685a      	ldr	r2, [r3, #4]
 80155fe:	693b      	ldr	r3, [r7, #16]
 8015600:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015602:	429a      	cmp	r2, r3
 8015604:	d316      	bcc.n	8015634 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015606:	693b      	ldr	r3, [r7, #16]
 8015608:	685a      	ldr	r2, [r3, #4]
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015610:	429a      	cmp	r2, r3
 8015612:	d20f      	bcs.n	8015634 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015614:	2200      	movs	r2, #0
 8015616:	2100      	movs	r1, #0
 8015618:	68f8      	ldr	r0, [r7, #12]
 801561a:	f000 ff65 	bl	80164e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	2200      	movs	r2, #0
 8015622:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015626:	2300      	movs	r3, #0
 8015628:	2200      	movs	r2, #0
 801562a:	2100      	movs	r1, #0
 801562c:	68f8      	ldr	r0, [r7, #12]
 801562e:	f001 fcb3 	bl	8016f98 <USBD_LL_PrepareReceive>
 8015632:	e018      	b.n	8015666 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801563a:	b2db      	uxtb	r3, r3
 801563c:	2b03      	cmp	r3, #3
 801563e:	d10b      	bne.n	8015658 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015646:	68db      	ldr	r3, [r3, #12]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d005      	beq.n	8015658 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015652:	68db      	ldr	r3, [r3, #12]
 8015654:	68f8      	ldr	r0, [r7, #12]
 8015656:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015658:	2180      	movs	r1, #128	; 0x80
 801565a:	68f8      	ldr	r0, [r7, #12]
 801565c:	f001 fbf2 	bl	8016e44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015660:	68f8      	ldr	r0, [r7, #12]
 8015662:	f000 ff93 	bl	801658c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801566c:	2b01      	cmp	r3, #1
 801566e:	d122      	bne.n	80156b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015670:	68f8      	ldr	r0, [r7, #12]
 8015672:	f7ff fe98 	bl	80153a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	2200      	movs	r2, #0
 801567a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801567e:	e01a      	b.n	80156b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015686:	b2db      	uxtb	r3, r3
 8015688:	2b03      	cmp	r3, #3
 801568a:	d114      	bne.n	80156b6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015692:	695b      	ldr	r3, [r3, #20]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d00e      	beq.n	80156b6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801569e:	695b      	ldr	r3, [r3, #20]
 80156a0:	7afa      	ldrb	r2, [r7, #11]
 80156a2:	4611      	mov	r1, r2
 80156a4:	68f8      	ldr	r0, [r7, #12]
 80156a6:	4798      	blx	r3
 80156a8:	4603      	mov	r3, r0
 80156aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80156ac:	7dfb      	ldrb	r3, [r7, #23]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d001      	beq.n	80156b6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80156b2:	7dfb      	ldrb	r3, [r7, #23]
 80156b4:	e000      	b.n	80156b8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80156b6:	2300      	movs	r3, #0
}
 80156b8:	4618      	mov	r0, r3
 80156ba:	3718      	adds	r7, #24
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}

080156c0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b082      	sub	sp, #8
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2201      	movs	r2, #1
 80156cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	2200      	movs	r2, #0
 80156d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2200      	movs	r2, #0
 80156dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2200      	movs	r2, #0
 80156e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d101      	bne.n	80156f4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80156f0:	2303      	movs	r3, #3
 80156f2:	e02f      	b.n	8015754 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d00f      	beq.n	801571e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d009      	beq.n	801571e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015710:	685b      	ldr	r3, [r3, #4]
 8015712:	687a      	ldr	r2, [r7, #4]
 8015714:	6852      	ldr	r2, [r2, #4]
 8015716:	b2d2      	uxtb	r2, r2
 8015718:	4611      	mov	r1, r2
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801571e:	2340      	movs	r3, #64	; 0x40
 8015720:	2200      	movs	r2, #0
 8015722:	2100      	movs	r1, #0
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f001 fb48 	bl	8016dba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	2201      	movs	r2, #1
 801572e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2240      	movs	r2, #64	; 0x40
 8015736:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801573a:	2340      	movs	r3, #64	; 0x40
 801573c:	2200      	movs	r2, #0
 801573e:	2180      	movs	r1, #128	; 0x80
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f001 fb3a 	bl	8016dba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	2201      	movs	r2, #1
 801574a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2240      	movs	r2, #64	; 0x40
 8015750:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8015752:	2300      	movs	r3, #0
}
 8015754:	4618      	mov	r0, r3
 8015756:	3708      	adds	r7, #8
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}

0801575c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801575c:	b480      	push	{r7}
 801575e:	b083      	sub	sp, #12
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
 8015764:	460b      	mov	r3, r1
 8015766:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	78fa      	ldrb	r2, [r7, #3]
 801576c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801576e:	2300      	movs	r3, #0
}
 8015770:	4618      	mov	r0, r3
 8015772:	370c      	adds	r7, #12
 8015774:	46bd      	mov	sp, r7
 8015776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577a:	4770      	bx	lr

0801577c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801577c:	b480      	push	{r7}
 801577e:	b083      	sub	sp, #12
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801578a:	b2da      	uxtb	r2, r3
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2204      	movs	r2, #4
 8015796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801579a:	2300      	movs	r3, #0
}
 801579c:	4618      	mov	r0, r3
 801579e:	370c      	adds	r7, #12
 80157a0:	46bd      	mov	sp, r7
 80157a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a6:	4770      	bx	lr

080157a8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80157a8:	b480      	push	{r7}
 80157aa:	b083      	sub	sp, #12
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157b6:	b2db      	uxtb	r3, r3
 80157b8:	2b04      	cmp	r3, #4
 80157ba:	d106      	bne.n	80157ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80157c2:	b2da      	uxtb	r2, r3
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80157ca:	2300      	movs	r3, #0
}
 80157cc:	4618      	mov	r0, r3
 80157ce:	370c      	adds	r7, #12
 80157d0:	46bd      	mov	sp, r7
 80157d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d6:	4770      	bx	lr

080157d8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b082      	sub	sp, #8
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d101      	bne.n	80157ee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80157ea:	2303      	movs	r3, #3
 80157ec:	e012      	b.n	8015814 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157f4:	b2db      	uxtb	r3, r3
 80157f6:	2b03      	cmp	r3, #3
 80157f8:	d10b      	bne.n	8015812 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015800:	69db      	ldr	r3, [r3, #28]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d005      	beq.n	8015812 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801580c:	69db      	ldr	r3, [r3, #28]
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015812:	2300      	movs	r3, #0
}
 8015814:	4618      	mov	r0, r3
 8015816:	3708      	adds	r7, #8
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}

0801581c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b082      	sub	sp, #8
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
 8015824:	460b      	mov	r3, r1
 8015826:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801582e:	2b00      	cmp	r3, #0
 8015830:	d101      	bne.n	8015836 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8015832:	2303      	movs	r3, #3
 8015834:	e014      	b.n	8015860 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801583c:	b2db      	uxtb	r3, r3
 801583e:	2b03      	cmp	r3, #3
 8015840:	d10d      	bne.n	801585e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015848:	6a1b      	ldr	r3, [r3, #32]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d007      	beq.n	801585e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015854:	6a1b      	ldr	r3, [r3, #32]
 8015856:	78fa      	ldrb	r2, [r7, #3]
 8015858:	4611      	mov	r1, r2
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801585e:	2300      	movs	r3, #0
}
 8015860:	4618      	mov	r0, r3
 8015862:	3708      	adds	r7, #8
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}

08015868 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b082      	sub	sp, #8
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	460b      	mov	r3, r1
 8015872:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801587a:	2b00      	cmp	r3, #0
 801587c:	d101      	bne.n	8015882 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801587e:	2303      	movs	r3, #3
 8015880:	e014      	b.n	80158ac <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015888:	b2db      	uxtb	r3, r3
 801588a:	2b03      	cmp	r3, #3
 801588c:	d10d      	bne.n	80158aa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015896:	2b00      	cmp	r3, #0
 8015898:	d007      	beq.n	80158aa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158a2:	78fa      	ldrb	r2, [r7, #3]
 80158a4:	4611      	mov	r1, r2
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80158aa:	2300      	movs	r3, #0
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3708      	adds	r7, #8
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}

080158b4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80158b4:	b480      	push	{r7}
 80158b6:	b083      	sub	sp, #12
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80158bc:	2300      	movs	r3, #0
}
 80158be:	4618      	mov	r0, r3
 80158c0:	370c      	adds	r7, #12
 80158c2:	46bd      	mov	sp, r7
 80158c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c8:	4770      	bx	lr

080158ca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80158ca:	b580      	push	{r7, lr}
 80158cc:	b082      	sub	sp, #8
 80158ce:	af00      	add	r7, sp, #0
 80158d0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2201      	movs	r2, #1
 80158d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d009      	beq.n	80158f8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158ea:	685b      	ldr	r3, [r3, #4]
 80158ec:	687a      	ldr	r2, [r7, #4]
 80158ee:	6852      	ldr	r2, [r2, #4]
 80158f0:	b2d2      	uxtb	r2, r2
 80158f2:	4611      	mov	r1, r2
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	4798      	blx	r3
  }

  return USBD_OK;
 80158f8:	2300      	movs	r3, #0
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3708      	adds	r7, #8
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}

08015902 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015902:	b480      	push	{r7}
 8015904:	b087      	sub	sp, #28
 8015906:	af00      	add	r7, sp, #0
 8015908:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801590e:	697b      	ldr	r3, [r7, #20]
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	3301      	adds	r3, #1
 8015918:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015920:	8a3b      	ldrh	r3, [r7, #16]
 8015922:	021b      	lsls	r3, r3, #8
 8015924:	b21a      	sxth	r2, r3
 8015926:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801592a:	4313      	orrs	r3, r2
 801592c:	b21b      	sxth	r3, r3
 801592e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015930:	89fb      	ldrh	r3, [r7, #14]
}
 8015932:	4618      	mov	r0, r3
 8015934:	371c      	adds	r7, #28
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr
	...

08015940 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b084      	sub	sp, #16
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
 8015948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801594a:	2300      	movs	r3, #0
 801594c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	781b      	ldrb	r3, [r3, #0]
 8015952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015956:	2b40      	cmp	r3, #64	; 0x40
 8015958:	d005      	beq.n	8015966 <USBD_StdDevReq+0x26>
 801595a:	2b40      	cmp	r3, #64	; 0x40
 801595c:	d853      	bhi.n	8015a06 <USBD_StdDevReq+0xc6>
 801595e:	2b00      	cmp	r3, #0
 8015960:	d00b      	beq.n	801597a <USBD_StdDevReq+0x3a>
 8015962:	2b20      	cmp	r3, #32
 8015964:	d14f      	bne.n	8015a06 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801596c:	689b      	ldr	r3, [r3, #8]
 801596e:	6839      	ldr	r1, [r7, #0]
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	4798      	blx	r3
 8015974:	4603      	mov	r3, r0
 8015976:	73fb      	strb	r3, [r7, #15]
      break;
 8015978:	e04a      	b.n	8015a10 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	785b      	ldrb	r3, [r3, #1]
 801597e:	2b09      	cmp	r3, #9
 8015980:	d83b      	bhi.n	80159fa <USBD_StdDevReq+0xba>
 8015982:	a201      	add	r2, pc, #4	; (adr r2, 8015988 <USBD_StdDevReq+0x48>)
 8015984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015988:	080159dd 	.word	0x080159dd
 801598c:	080159f1 	.word	0x080159f1
 8015990:	080159fb 	.word	0x080159fb
 8015994:	080159e7 	.word	0x080159e7
 8015998:	080159fb 	.word	0x080159fb
 801599c:	080159bb 	.word	0x080159bb
 80159a0:	080159b1 	.word	0x080159b1
 80159a4:	080159fb 	.word	0x080159fb
 80159a8:	080159d3 	.word	0x080159d3
 80159ac:	080159c5 	.word	0x080159c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80159b0:	6839      	ldr	r1, [r7, #0]
 80159b2:	6878      	ldr	r0, [r7, #4]
 80159b4:	f000 f9de 	bl	8015d74 <USBD_GetDescriptor>
          break;
 80159b8:	e024      	b.n	8015a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80159ba:	6839      	ldr	r1, [r7, #0]
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f000 fb43 	bl	8016048 <USBD_SetAddress>
          break;
 80159c2:	e01f      	b.n	8015a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80159c4:	6839      	ldr	r1, [r7, #0]
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f000 fb82 	bl	80160d0 <USBD_SetConfig>
 80159cc:	4603      	mov	r3, r0
 80159ce:	73fb      	strb	r3, [r7, #15]
          break;
 80159d0:	e018      	b.n	8015a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80159d2:	6839      	ldr	r1, [r7, #0]
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f000 fc21 	bl	801621c <USBD_GetConfig>
          break;
 80159da:	e013      	b.n	8015a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80159dc:	6839      	ldr	r1, [r7, #0]
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	f000 fc52 	bl	8016288 <USBD_GetStatus>
          break;
 80159e4:	e00e      	b.n	8015a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80159e6:	6839      	ldr	r1, [r7, #0]
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f000 fc81 	bl	80162f0 <USBD_SetFeature>
          break;
 80159ee:	e009      	b.n	8015a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80159f0:	6839      	ldr	r1, [r7, #0]
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f000 fc90 	bl	8016318 <USBD_ClrFeature>
          break;
 80159f8:	e004      	b.n	8015a04 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80159fa:	6839      	ldr	r1, [r7, #0]
 80159fc:	6878      	ldr	r0, [r7, #4]
 80159fe:	f000 fce7 	bl	80163d0 <USBD_CtlError>
          break;
 8015a02:	bf00      	nop
      }
      break;
 8015a04:	e004      	b.n	8015a10 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8015a06:	6839      	ldr	r1, [r7, #0]
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f000 fce1 	bl	80163d0 <USBD_CtlError>
      break;
 8015a0e:	bf00      	nop
  }

  return ret;
 8015a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a12:	4618      	mov	r0, r3
 8015a14:	3710      	adds	r7, #16
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bd80      	pop	{r7, pc}
 8015a1a:	bf00      	nop

08015a1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b084      	sub	sp, #16
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
 8015a24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a26:	2300      	movs	r3, #0
 8015a28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	781b      	ldrb	r3, [r3, #0]
 8015a2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a32:	2b40      	cmp	r3, #64	; 0x40
 8015a34:	d005      	beq.n	8015a42 <USBD_StdItfReq+0x26>
 8015a36:	2b40      	cmp	r3, #64	; 0x40
 8015a38:	d82f      	bhi.n	8015a9a <USBD_StdItfReq+0x7e>
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d001      	beq.n	8015a42 <USBD_StdItfReq+0x26>
 8015a3e:	2b20      	cmp	r3, #32
 8015a40:	d12b      	bne.n	8015a9a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a48:	b2db      	uxtb	r3, r3
 8015a4a:	3b01      	subs	r3, #1
 8015a4c:	2b02      	cmp	r3, #2
 8015a4e:	d81d      	bhi.n	8015a8c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	889b      	ldrh	r3, [r3, #4]
 8015a54:	b2db      	uxtb	r3, r3
 8015a56:	2b01      	cmp	r3, #1
 8015a58:	d813      	bhi.n	8015a82 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a60:	689b      	ldr	r3, [r3, #8]
 8015a62:	6839      	ldr	r1, [r7, #0]
 8015a64:	6878      	ldr	r0, [r7, #4]
 8015a66:	4798      	blx	r3
 8015a68:	4603      	mov	r3, r0
 8015a6a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015a6c:	683b      	ldr	r3, [r7, #0]
 8015a6e:	88db      	ldrh	r3, [r3, #6]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d110      	bne.n	8015a96 <USBD_StdItfReq+0x7a>
 8015a74:	7bfb      	ldrb	r3, [r7, #15]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d10d      	bne.n	8015a96 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f000 fd73 	bl	8016566 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015a80:	e009      	b.n	8015a96 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8015a82:	6839      	ldr	r1, [r7, #0]
 8015a84:	6878      	ldr	r0, [r7, #4]
 8015a86:	f000 fca3 	bl	80163d0 <USBD_CtlError>
          break;
 8015a8a:	e004      	b.n	8015a96 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8015a8c:	6839      	ldr	r1, [r7, #0]
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f000 fc9e 	bl	80163d0 <USBD_CtlError>
          break;
 8015a94:	e000      	b.n	8015a98 <USBD_StdItfReq+0x7c>
          break;
 8015a96:	bf00      	nop
      }
      break;
 8015a98:	e004      	b.n	8015aa4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8015a9a:	6839      	ldr	r1, [r7, #0]
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f000 fc97 	bl	80163d0 <USBD_CtlError>
      break;
 8015aa2:	bf00      	nop
  }

  return ret;
 8015aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	3710      	adds	r7, #16
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}

08015aae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015aae:	b580      	push	{r7, lr}
 8015ab0:	b084      	sub	sp, #16
 8015ab2:	af00      	add	r7, sp, #0
 8015ab4:	6078      	str	r0, [r7, #4]
 8015ab6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015ab8:	2300      	movs	r3, #0
 8015aba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	889b      	ldrh	r3, [r3, #4]
 8015ac0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015aca:	2b40      	cmp	r3, #64	; 0x40
 8015acc:	d007      	beq.n	8015ade <USBD_StdEPReq+0x30>
 8015ace:	2b40      	cmp	r3, #64	; 0x40
 8015ad0:	f200 8145 	bhi.w	8015d5e <USBD_StdEPReq+0x2b0>
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d00c      	beq.n	8015af2 <USBD_StdEPReq+0x44>
 8015ad8:	2b20      	cmp	r3, #32
 8015ada:	f040 8140 	bne.w	8015d5e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ae4:	689b      	ldr	r3, [r3, #8]
 8015ae6:	6839      	ldr	r1, [r7, #0]
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	4798      	blx	r3
 8015aec:	4603      	mov	r3, r0
 8015aee:	73fb      	strb	r3, [r7, #15]
      break;
 8015af0:	e13a      	b.n	8015d68 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	785b      	ldrb	r3, [r3, #1]
 8015af6:	2b03      	cmp	r3, #3
 8015af8:	d007      	beq.n	8015b0a <USBD_StdEPReq+0x5c>
 8015afa:	2b03      	cmp	r3, #3
 8015afc:	f300 8129 	bgt.w	8015d52 <USBD_StdEPReq+0x2a4>
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d07f      	beq.n	8015c04 <USBD_StdEPReq+0x156>
 8015b04:	2b01      	cmp	r3, #1
 8015b06:	d03c      	beq.n	8015b82 <USBD_StdEPReq+0xd4>
 8015b08:	e123      	b.n	8015d52 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b10:	b2db      	uxtb	r3, r3
 8015b12:	2b02      	cmp	r3, #2
 8015b14:	d002      	beq.n	8015b1c <USBD_StdEPReq+0x6e>
 8015b16:	2b03      	cmp	r3, #3
 8015b18:	d016      	beq.n	8015b48 <USBD_StdEPReq+0x9a>
 8015b1a:	e02c      	b.n	8015b76 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b1c:	7bbb      	ldrb	r3, [r7, #14]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d00d      	beq.n	8015b3e <USBD_StdEPReq+0x90>
 8015b22:	7bbb      	ldrb	r3, [r7, #14]
 8015b24:	2b80      	cmp	r3, #128	; 0x80
 8015b26:	d00a      	beq.n	8015b3e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b28:	7bbb      	ldrb	r3, [r7, #14]
 8015b2a:	4619      	mov	r1, r3
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f001 f989 	bl	8016e44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b32:	2180      	movs	r1, #128	; 0x80
 8015b34:	6878      	ldr	r0, [r7, #4]
 8015b36:	f001 f985 	bl	8016e44 <USBD_LL_StallEP>
 8015b3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b3c:	e020      	b.n	8015b80 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8015b3e:	6839      	ldr	r1, [r7, #0]
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f000 fc45 	bl	80163d0 <USBD_CtlError>
              break;
 8015b46:	e01b      	b.n	8015b80 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	885b      	ldrh	r3, [r3, #2]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d10e      	bne.n	8015b6e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015b50:	7bbb      	ldrb	r3, [r7, #14]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d00b      	beq.n	8015b6e <USBD_StdEPReq+0xc0>
 8015b56:	7bbb      	ldrb	r3, [r7, #14]
 8015b58:	2b80      	cmp	r3, #128	; 0x80
 8015b5a:	d008      	beq.n	8015b6e <USBD_StdEPReq+0xc0>
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	88db      	ldrh	r3, [r3, #6]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d104      	bne.n	8015b6e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b64:	7bbb      	ldrb	r3, [r7, #14]
 8015b66:	4619      	mov	r1, r3
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f001 f96b 	bl	8016e44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f000 fcf9 	bl	8016566 <USBD_CtlSendStatus>

              break;
 8015b74:	e004      	b.n	8015b80 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8015b76:	6839      	ldr	r1, [r7, #0]
 8015b78:	6878      	ldr	r0, [r7, #4]
 8015b7a:	f000 fc29 	bl	80163d0 <USBD_CtlError>
              break;
 8015b7e:	bf00      	nop
          }
          break;
 8015b80:	e0ec      	b.n	8015d5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b88:	b2db      	uxtb	r3, r3
 8015b8a:	2b02      	cmp	r3, #2
 8015b8c:	d002      	beq.n	8015b94 <USBD_StdEPReq+0xe6>
 8015b8e:	2b03      	cmp	r3, #3
 8015b90:	d016      	beq.n	8015bc0 <USBD_StdEPReq+0x112>
 8015b92:	e030      	b.n	8015bf6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b94:	7bbb      	ldrb	r3, [r7, #14]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d00d      	beq.n	8015bb6 <USBD_StdEPReq+0x108>
 8015b9a:	7bbb      	ldrb	r3, [r7, #14]
 8015b9c:	2b80      	cmp	r3, #128	; 0x80
 8015b9e:	d00a      	beq.n	8015bb6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ba0:	7bbb      	ldrb	r3, [r7, #14]
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f001 f94d 	bl	8016e44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015baa:	2180      	movs	r1, #128	; 0x80
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f001 f949 	bl	8016e44 <USBD_LL_StallEP>
 8015bb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015bb4:	e025      	b.n	8015c02 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8015bb6:	6839      	ldr	r1, [r7, #0]
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	f000 fc09 	bl	80163d0 <USBD_CtlError>
              break;
 8015bbe:	e020      	b.n	8015c02 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	885b      	ldrh	r3, [r3, #2]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d11b      	bne.n	8015c00 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015bc8:	7bbb      	ldrb	r3, [r7, #14]
 8015bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d004      	beq.n	8015bdc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015bd2:	7bbb      	ldrb	r3, [r7, #14]
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f001 f953 	bl	8016e82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	f000 fcc2 	bl	8016566 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015be8:	689b      	ldr	r3, [r3, #8]
 8015bea:	6839      	ldr	r1, [r7, #0]
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	4798      	blx	r3
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8015bf4:	e004      	b.n	8015c00 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8015bf6:	6839      	ldr	r1, [r7, #0]
 8015bf8:	6878      	ldr	r0, [r7, #4]
 8015bfa:	f000 fbe9 	bl	80163d0 <USBD_CtlError>
              break;
 8015bfe:	e000      	b.n	8015c02 <USBD_StdEPReq+0x154>
              break;
 8015c00:	bf00      	nop
          }
          break;
 8015c02:	e0ab      	b.n	8015d5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c0a:	b2db      	uxtb	r3, r3
 8015c0c:	2b02      	cmp	r3, #2
 8015c0e:	d002      	beq.n	8015c16 <USBD_StdEPReq+0x168>
 8015c10:	2b03      	cmp	r3, #3
 8015c12:	d032      	beq.n	8015c7a <USBD_StdEPReq+0x1cc>
 8015c14:	e097      	b.n	8015d46 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015c16:	7bbb      	ldrb	r3, [r7, #14]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d007      	beq.n	8015c2c <USBD_StdEPReq+0x17e>
 8015c1c:	7bbb      	ldrb	r3, [r7, #14]
 8015c1e:	2b80      	cmp	r3, #128	; 0x80
 8015c20:	d004      	beq.n	8015c2c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8015c22:	6839      	ldr	r1, [r7, #0]
 8015c24:	6878      	ldr	r0, [r7, #4]
 8015c26:	f000 fbd3 	bl	80163d0 <USBD_CtlError>
                break;
 8015c2a:	e091      	b.n	8015d50 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	da0b      	bge.n	8015c4c <USBD_StdEPReq+0x19e>
 8015c34:	7bbb      	ldrb	r3, [r7, #14]
 8015c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c3a:	4613      	mov	r3, r2
 8015c3c:	009b      	lsls	r3, r3, #2
 8015c3e:	4413      	add	r3, r2
 8015c40:	009b      	lsls	r3, r3, #2
 8015c42:	3310      	adds	r3, #16
 8015c44:	687a      	ldr	r2, [r7, #4]
 8015c46:	4413      	add	r3, r2
 8015c48:	3304      	adds	r3, #4
 8015c4a:	e00b      	b.n	8015c64 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c4c:	7bbb      	ldrb	r3, [r7, #14]
 8015c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c52:	4613      	mov	r3, r2
 8015c54:	009b      	lsls	r3, r3, #2
 8015c56:	4413      	add	r3, r2
 8015c58:	009b      	lsls	r3, r3, #2
 8015c5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c5e:	687a      	ldr	r2, [r7, #4]
 8015c60:	4413      	add	r3, r2
 8015c62:	3304      	adds	r3, #4
 8015c64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015c66:	68bb      	ldr	r3, [r7, #8]
 8015c68:	2200      	movs	r2, #0
 8015c6a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c6c:	68bb      	ldr	r3, [r7, #8]
 8015c6e:	2202      	movs	r2, #2
 8015c70:	4619      	mov	r1, r3
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f000 fc1d 	bl	80164b2 <USBD_CtlSendData>
              break;
 8015c78:	e06a      	b.n	8015d50 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015c7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	da11      	bge.n	8015ca6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015c82:	7bbb      	ldrb	r3, [r7, #14]
 8015c84:	f003 020f 	and.w	r2, r3, #15
 8015c88:	6879      	ldr	r1, [r7, #4]
 8015c8a:	4613      	mov	r3, r2
 8015c8c:	009b      	lsls	r3, r3, #2
 8015c8e:	4413      	add	r3, r2
 8015c90:	009b      	lsls	r3, r3, #2
 8015c92:	440b      	add	r3, r1
 8015c94:	3324      	adds	r3, #36	; 0x24
 8015c96:	881b      	ldrh	r3, [r3, #0]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d117      	bne.n	8015ccc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015c9c:	6839      	ldr	r1, [r7, #0]
 8015c9e:	6878      	ldr	r0, [r7, #4]
 8015ca0:	f000 fb96 	bl	80163d0 <USBD_CtlError>
                  break;
 8015ca4:	e054      	b.n	8015d50 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015ca6:	7bbb      	ldrb	r3, [r7, #14]
 8015ca8:	f003 020f 	and.w	r2, r3, #15
 8015cac:	6879      	ldr	r1, [r7, #4]
 8015cae:	4613      	mov	r3, r2
 8015cb0:	009b      	lsls	r3, r3, #2
 8015cb2:	4413      	add	r3, r2
 8015cb4:	009b      	lsls	r3, r3, #2
 8015cb6:	440b      	add	r3, r1
 8015cb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015cbc:	881b      	ldrh	r3, [r3, #0]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d104      	bne.n	8015ccc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015cc2:	6839      	ldr	r1, [r7, #0]
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f000 fb83 	bl	80163d0 <USBD_CtlError>
                  break;
 8015cca:	e041      	b.n	8015d50 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	da0b      	bge.n	8015cec <USBD_StdEPReq+0x23e>
 8015cd4:	7bbb      	ldrb	r3, [r7, #14]
 8015cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015cda:	4613      	mov	r3, r2
 8015cdc:	009b      	lsls	r3, r3, #2
 8015cde:	4413      	add	r3, r2
 8015ce0:	009b      	lsls	r3, r3, #2
 8015ce2:	3310      	adds	r3, #16
 8015ce4:	687a      	ldr	r2, [r7, #4]
 8015ce6:	4413      	add	r3, r2
 8015ce8:	3304      	adds	r3, #4
 8015cea:	e00b      	b.n	8015d04 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015cec:	7bbb      	ldrb	r3, [r7, #14]
 8015cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015cf2:	4613      	mov	r3, r2
 8015cf4:	009b      	lsls	r3, r3, #2
 8015cf6:	4413      	add	r3, r2
 8015cf8:	009b      	lsls	r3, r3, #2
 8015cfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015cfe:	687a      	ldr	r2, [r7, #4]
 8015d00:	4413      	add	r3, r2
 8015d02:	3304      	adds	r3, #4
 8015d04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015d06:	7bbb      	ldrb	r3, [r7, #14]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d002      	beq.n	8015d12 <USBD_StdEPReq+0x264>
 8015d0c:	7bbb      	ldrb	r3, [r7, #14]
 8015d0e:	2b80      	cmp	r3, #128	; 0x80
 8015d10:	d103      	bne.n	8015d1a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	2200      	movs	r2, #0
 8015d16:	601a      	str	r2, [r3, #0]
 8015d18:	e00e      	b.n	8015d38 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015d1a:	7bbb      	ldrb	r3, [r7, #14]
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	f001 f8ce 	bl	8016ec0 <USBD_LL_IsStallEP>
 8015d24:	4603      	mov	r3, r0
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d003      	beq.n	8015d32 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	2201      	movs	r2, #1
 8015d2e:	601a      	str	r2, [r3, #0]
 8015d30:	e002      	b.n	8015d38 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8015d32:	68bb      	ldr	r3, [r7, #8]
 8015d34:	2200      	movs	r2, #0
 8015d36:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	2202      	movs	r2, #2
 8015d3c:	4619      	mov	r1, r3
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f000 fbb7 	bl	80164b2 <USBD_CtlSendData>
              break;
 8015d44:	e004      	b.n	8015d50 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8015d46:	6839      	ldr	r1, [r7, #0]
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	f000 fb41 	bl	80163d0 <USBD_CtlError>
              break;
 8015d4e:	bf00      	nop
          }
          break;
 8015d50:	e004      	b.n	8015d5c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8015d52:	6839      	ldr	r1, [r7, #0]
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f000 fb3b 	bl	80163d0 <USBD_CtlError>
          break;
 8015d5a:	bf00      	nop
      }
      break;
 8015d5c:	e004      	b.n	8015d68 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8015d5e:	6839      	ldr	r1, [r7, #0]
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f000 fb35 	bl	80163d0 <USBD_CtlError>
      break;
 8015d66:	bf00      	nop
  }

  return ret;
 8015d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3710      	adds	r7, #16
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
	...

08015d74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b084      	sub	sp, #16
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
 8015d7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015d82:	2300      	movs	r3, #0
 8015d84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015d86:	2300      	movs	r3, #0
 8015d88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	885b      	ldrh	r3, [r3, #2]
 8015d8e:	0a1b      	lsrs	r3, r3, #8
 8015d90:	b29b      	uxth	r3, r3
 8015d92:	3b01      	subs	r3, #1
 8015d94:	2b06      	cmp	r3, #6
 8015d96:	f200 8128 	bhi.w	8015fea <USBD_GetDescriptor+0x276>
 8015d9a:	a201      	add	r2, pc, #4	; (adr r2, 8015da0 <USBD_GetDescriptor+0x2c>)
 8015d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015da0:	08015dbd 	.word	0x08015dbd
 8015da4:	08015dd5 	.word	0x08015dd5
 8015da8:	08015e15 	.word	0x08015e15
 8015dac:	08015feb 	.word	0x08015feb
 8015db0:	08015feb 	.word	0x08015feb
 8015db4:	08015f8b 	.word	0x08015f8b
 8015db8:	08015fb7 	.word	0x08015fb7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	7c12      	ldrb	r2, [r2, #16]
 8015dc8:	f107 0108 	add.w	r1, r7, #8
 8015dcc:	4610      	mov	r0, r2
 8015dce:	4798      	blx	r3
 8015dd0:	60f8      	str	r0, [r7, #12]
      break;
 8015dd2:	e112      	b.n	8015ffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	7c1b      	ldrb	r3, [r3, #16]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d10d      	bne.n	8015df8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015de4:	f107 0208 	add.w	r2, r7, #8
 8015de8:	4610      	mov	r0, r2
 8015dea:	4798      	blx	r3
 8015dec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	3301      	adds	r3, #1
 8015df2:	2202      	movs	r2, #2
 8015df4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015df6:	e100      	b.n	8015ffa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e00:	f107 0208 	add.w	r2, r7, #8
 8015e04:	4610      	mov	r0, r2
 8015e06:	4798      	blx	r3
 8015e08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	2202      	movs	r2, #2
 8015e10:	701a      	strb	r2, [r3, #0]
      break;
 8015e12:	e0f2      	b.n	8015ffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	885b      	ldrh	r3, [r3, #2]
 8015e18:	b2db      	uxtb	r3, r3
 8015e1a:	2b05      	cmp	r3, #5
 8015e1c:	f200 80ac 	bhi.w	8015f78 <USBD_GetDescriptor+0x204>
 8015e20:	a201      	add	r2, pc, #4	; (adr r2, 8015e28 <USBD_GetDescriptor+0xb4>)
 8015e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e26:	bf00      	nop
 8015e28:	08015e41 	.word	0x08015e41
 8015e2c:	08015e75 	.word	0x08015e75
 8015e30:	08015ea9 	.word	0x08015ea9
 8015e34:	08015edd 	.word	0x08015edd
 8015e38:	08015f11 	.word	0x08015f11
 8015e3c:	08015f45 	.word	0x08015f45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e46:	685b      	ldr	r3, [r3, #4]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d00b      	beq.n	8015e64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e52:	685b      	ldr	r3, [r3, #4]
 8015e54:	687a      	ldr	r2, [r7, #4]
 8015e56:	7c12      	ldrb	r2, [r2, #16]
 8015e58:	f107 0108 	add.w	r1, r7, #8
 8015e5c:	4610      	mov	r0, r2
 8015e5e:	4798      	blx	r3
 8015e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e62:	e091      	b.n	8015f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e64:	6839      	ldr	r1, [r7, #0]
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f000 fab2 	bl	80163d0 <USBD_CtlError>
            err++;
 8015e6c:	7afb      	ldrb	r3, [r7, #11]
 8015e6e:	3301      	adds	r3, #1
 8015e70:	72fb      	strb	r3, [r7, #11]
          break;
 8015e72:	e089      	b.n	8015f88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e7a:	689b      	ldr	r3, [r3, #8]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d00b      	beq.n	8015e98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e86:	689b      	ldr	r3, [r3, #8]
 8015e88:	687a      	ldr	r2, [r7, #4]
 8015e8a:	7c12      	ldrb	r2, [r2, #16]
 8015e8c:	f107 0108 	add.w	r1, r7, #8
 8015e90:	4610      	mov	r0, r2
 8015e92:	4798      	blx	r3
 8015e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e96:	e077      	b.n	8015f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e98:	6839      	ldr	r1, [r7, #0]
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f000 fa98 	bl	80163d0 <USBD_CtlError>
            err++;
 8015ea0:	7afb      	ldrb	r3, [r7, #11]
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8015ea6:	e06f      	b.n	8015f88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eae:	68db      	ldr	r3, [r3, #12]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d00b      	beq.n	8015ecc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eba:	68db      	ldr	r3, [r3, #12]
 8015ebc:	687a      	ldr	r2, [r7, #4]
 8015ebe:	7c12      	ldrb	r2, [r2, #16]
 8015ec0:	f107 0108 	add.w	r1, r7, #8
 8015ec4:	4610      	mov	r0, r2
 8015ec6:	4798      	blx	r3
 8015ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015eca:	e05d      	b.n	8015f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ecc:	6839      	ldr	r1, [r7, #0]
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f000 fa7e 	bl	80163d0 <USBD_CtlError>
            err++;
 8015ed4:	7afb      	ldrb	r3, [r7, #11]
 8015ed6:	3301      	adds	r3, #1
 8015ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8015eda:	e055      	b.n	8015f88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ee2:	691b      	ldr	r3, [r3, #16]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d00b      	beq.n	8015f00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eee:	691b      	ldr	r3, [r3, #16]
 8015ef0:	687a      	ldr	r2, [r7, #4]
 8015ef2:	7c12      	ldrb	r2, [r2, #16]
 8015ef4:	f107 0108 	add.w	r1, r7, #8
 8015ef8:	4610      	mov	r0, r2
 8015efa:	4798      	blx	r3
 8015efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015efe:	e043      	b.n	8015f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f00:	6839      	ldr	r1, [r7, #0]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f000 fa64 	bl	80163d0 <USBD_CtlError>
            err++;
 8015f08:	7afb      	ldrb	r3, [r7, #11]
 8015f0a:	3301      	adds	r3, #1
 8015f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8015f0e:	e03b      	b.n	8015f88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f16:	695b      	ldr	r3, [r3, #20]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d00b      	beq.n	8015f34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f22:	695b      	ldr	r3, [r3, #20]
 8015f24:	687a      	ldr	r2, [r7, #4]
 8015f26:	7c12      	ldrb	r2, [r2, #16]
 8015f28:	f107 0108 	add.w	r1, r7, #8
 8015f2c:	4610      	mov	r0, r2
 8015f2e:	4798      	blx	r3
 8015f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f32:	e029      	b.n	8015f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f34:	6839      	ldr	r1, [r7, #0]
 8015f36:	6878      	ldr	r0, [r7, #4]
 8015f38:	f000 fa4a 	bl	80163d0 <USBD_CtlError>
            err++;
 8015f3c:	7afb      	ldrb	r3, [r7, #11]
 8015f3e:	3301      	adds	r3, #1
 8015f40:	72fb      	strb	r3, [r7, #11]
          break;
 8015f42:	e021      	b.n	8015f88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f4a:	699b      	ldr	r3, [r3, #24]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d00b      	beq.n	8015f68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f56:	699b      	ldr	r3, [r3, #24]
 8015f58:	687a      	ldr	r2, [r7, #4]
 8015f5a:	7c12      	ldrb	r2, [r2, #16]
 8015f5c:	f107 0108 	add.w	r1, r7, #8
 8015f60:	4610      	mov	r0, r2
 8015f62:	4798      	blx	r3
 8015f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f66:	e00f      	b.n	8015f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f68:	6839      	ldr	r1, [r7, #0]
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f000 fa30 	bl	80163d0 <USBD_CtlError>
            err++;
 8015f70:	7afb      	ldrb	r3, [r7, #11]
 8015f72:	3301      	adds	r3, #1
 8015f74:	72fb      	strb	r3, [r7, #11]
          break;
 8015f76:	e007      	b.n	8015f88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015f78:	6839      	ldr	r1, [r7, #0]
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f000 fa28 	bl	80163d0 <USBD_CtlError>
          err++;
 8015f80:	7afb      	ldrb	r3, [r7, #11]
 8015f82:	3301      	adds	r3, #1
 8015f84:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8015f86:	bf00      	nop
      }
      break;
 8015f88:	e037      	b.n	8015ffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	7c1b      	ldrb	r3, [r3, #16]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d109      	bne.n	8015fa6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f9a:	f107 0208 	add.w	r2, r7, #8
 8015f9e:	4610      	mov	r0, r2
 8015fa0:	4798      	blx	r3
 8015fa2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015fa4:	e029      	b.n	8015ffa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015fa6:	6839      	ldr	r1, [r7, #0]
 8015fa8:	6878      	ldr	r0, [r7, #4]
 8015faa:	f000 fa11 	bl	80163d0 <USBD_CtlError>
        err++;
 8015fae:	7afb      	ldrb	r3, [r7, #11]
 8015fb0:	3301      	adds	r3, #1
 8015fb2:	72fb      	strb	r3, [r7, #11]
      break;
 8015fb4:	e021      	b.n	8015ffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	7c1b      	ldrb	r3, [r3, #16]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d10d      	bne.n	8015fda <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fc6:	f107 0208 	add.w	r2, r7, #8
 8015fca:	4610      	mov	r0, r2
 8015fcc:	4798      	blx	r3
 8015fce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	3301      	adds	r3, #1
 8015fd4:	2207      	movs	r2, #7
 8015fd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015fd8:	e00f      	b.n	8015ffa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015fda:	6839      	ldr	r1, [r7, #0]
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f000 f9f7 	bl	80163d0 <USBD_CtlError>
        err++;
 8015fe2:	7afb      	ldrb	r3, [r7, #11]
 8015fe4:	3301      	adds	r3, #1
 8015fe6:	72fb      	strb	r3, [r7, #11]
      break;
 8015fe8:	e007      	b.n	8015ffa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015fea:	6839      	ldr	r1, [r7, #0]
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f000 f9ef 	bl	80163d0 <USBD_CtlError>
      err++;
 8015ff2:	7afb      	ldrb	r3, [r7, #11]
 8015ff4:	3301      	adds	r3, #1
 8015ff6:	72fb      	strb	r3, [r7, #11]
      break;
 8015ff8:	bf00      	nop
  }

  if (err != 0U)
 8015ffa:	7afb      	ldrb	r3, [r7, #11]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d11e      	bne.n	801603e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	88db      	ldrh	r3, [r3, #6]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d016      	beq.n	8016036 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016008:	893b      	ldrh	r3, [r7, #8]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d00e      	beq.n	801602c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801600e:	683b      	ldr	r3, [r7, #0]
 8016010:	88da      	ldrh	r2, [r3, #6]
 8016012:	893b      	ldrh	r3, [r7, #8]
 8016014:	4293      	cmp	r3, r2
 8016016:	bf28      	it	cs
 8016018:	4613      	movcs	r3, r2
 801601a:	b29b      	uxth	r3, r3
 801601c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801601e:	893b      	ldrh	r3, [r7, #8]
 8016020:	461a      	mov	r2, r3
 8016022:	68f9      	ldr	r1, [r7, #12]
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f000 fa44 	bl	80164b2 <USBD_CtlSendData>
 801602a:	e009      	b.n	8016040 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801602c:	6839      	ldr	r1, [r7, #0]
 801602e:	6878      	ldr	r0, [r7, #4]
 8016030:	f000 f9ce 	bl	80163d0 <USBD_CtlError>
 8016034:	e004      	b.n	8016040 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f000 fa95 	bl	8016566 <USBD_CtlSendStatus>
 801603c:	e000      	b.n	8016040 <USBD_GetDescriptor+0x2cc>
    return;
 801603e:	bf00      	nop
  }
}
 8016040:	3710      	adds	r7, #16
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}
 8016046:	bf00      	nop

08016048 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b084      	sub	sp, #16
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
 8016050:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016052:	683b      	ldr	r3, [r7, #0]
 8016054:	889b      	ldrh	r3, [r3, #4]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d131      	bne.n	80160be <USBD_SetAddress+0x76>
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	88db      	ldrh	r3, [r3, #6]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d12d      	bne.n	80160be <USBD_SetAddress+0x76>
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	885b      	ldrh	r3, [r3, #2]
 8016066:	2b7f      	cmp	r3, #127	; 0x7f
 8016068:	d829      	bhi.n	80160be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	885b      	ldrh	r3, [r3, #2]
 801606e:	b2db      	uxtb	r3, r3
 8016070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016074:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801607c:	b2db      	uxtb	r3, r3
 801607e:	2b03      	cmp	r3, #3
 8016080:	d104      	bne.n	801608c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016082:	6839      	ldr	r1, [r7, #0]
 8016084:	6878      	ldr	r0, [r7, #4]
 8016086:	f000 f9a3 	bl	80163d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801608a:	e01d      	b.n	80160c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	7bfa      	ldrb	r2, [r7, #15]
 8016090:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016094:	7bfb      	ldrb	r3, [r7, #15]
 8016096:	4619      	mov	r1, r3
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f000 ff3d 	bl	8016f18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f000 fa61 	bl	8016566 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80160a4:	7bfb      	ldrb	r3, [r7, #15]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d004      	beq.n	80160b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2202      	movs	r2, #2
 80160ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160b2:	e009      	b.n	80160c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2201      	movs	r2, #1
 80160b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160bc:	e004      	b.n	80160c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80160be:	6839      	ldr	r1, [r7, #0]
 80160c0:	6878      	ldr	r0, [r7, #4]
 80160c2:	f000 f985 	bl	80163d0 <USBD_CtlError>
  }
}
 80160c6:	bf00      	nop
 80160c8:	bf00      	nop
 80160ca:	3710      	adds	r7, #16
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd80      	pop	{r7, pc}

080160d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b084      	sub	sp, #16
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
 80160d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80160da:	2300      	movs	r3, #0
 80160dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80160de:	683b      	ldr	r3, [r7, #0]
 80160e0:	885b      	ldrh	r3, [r3, #2]
 80160e2:	b2da      	uxtb	r2, r3
 80160e4:	4b4c      	ldr	r3, [pc, #304]	; (8016218 <USBD_SetConfig+0x148>)
 80160e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80160e8:	4b4b      	ldr	r3, [pc, #300]	; (8016218 <USBD_SetConfig+0x148>)
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	2b01      	cmp	r3, #1
 80160ee:	d905      	bls.n	80160fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80160f0:	6839      	ldr	r1, [r7, #0]
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f000 f96c 	bl	80163d0 <USBD_CtlError>
    return USBD_FAIL;
 80160f8:	2303      	movs	r3, #3
 80160fa:	e088      	b.n	801620e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016102:	b2db      	uxtb	r3, r3
 8016104:	2b02      	cmp	r3, #2
 8016106:	d002      	beq.n	801610e <USBD_SetConfig+0x3e>
 8016108:	2b03      	cmp	r3, #3
 801610a:	d025      	beq.n	8016158 <USBD_SetConfig+0x88>
 801610c:	e071      	b.n	80161f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801610e:	4b42      	ldr	r3, [pc, #264]	; (8016218 <USBD_SetConfig+0x148>)
 8016110:	781b      	ldrb	r3, [r3, #0]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d01c      	beq.n	8016150 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8016116:	4b40      	ldr	r3, [pc, #256]	; (8016218 <USBD_SetConfig+0x148>)
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	461a      	mov	r2, r3
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016120:	4b3d      	ldr	r3, [pc, #244]	; (8016218 <USBD_SetConfig+0x148>)
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	4619      	mov	r1, r3
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f7ff f948 	bl	80153bc <USBD_SetClassConfig>
 801612c:	4603      	mov	r3, r0
 801612e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016130:	7bfb      	ldrb	r3, [r7, #15]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d004      	beq.n	8016140 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8016136:	6839      	ldr	r1, [r7, #0]
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f000 f949 	bl	80163d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801613e:	e065      	b.n	801620c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8016140:	6878      	ldr	r0, [r7, #4]
 8016142:	f000 fa10 	bl	8016566 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	2203      	movs	r2, #3
 801614a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801614e:	e05d      	b.n	801620c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f000 fa08 	bl	8016566 <USBD_CtlSendStatus>
      break;
 8016156:	e059      	b.n	801620c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016158:	4b2f      	ldr	r3, [pc, #188]	; (8016218 <USBD_SetConfig+0x148>)
 801615a:	781b      	ldrb	r3, [r3, #0]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d112      	bne.n	8016186 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2202      	movs	r2, #2
 8016164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016168:	4b2b      	ldr	r3, [pc, #172]	; (8016218 <USBD_SetConfig+0x148>)
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	461a      	mov	r2, r3
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016172:	4b29      	ldr	r3, [pc, #164]	; (8016218 <USBD_SetConfig+0x148>)
 8016174:	781b      	ldrb	r3, [r3, #0]
 8016176:	4619      	mov	r1, r3
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f7ff f93b 	bl	80153f4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f000 f9f1 	bl	8016566 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016184:	e042      	b.n	801620c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8016186:	4b24      	ldr	r3, [pc, #144]	; (8016218 <USBD_SetConfig+0x148>)
 8016188:	781b      	ldrb	r3, [r3, #0]
 801618a:	461a      	mov	r2, r3
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	685b      	ldr	r3, [r3, #4]
 8016190:	429a      	cmp	r2, r3
 8016192:	d02a      	beq.n	80161ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	b2db      	uxtb	r3, r3
 801619a:	4619      	mov	r1, r3
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	f7ff f929 	bl	80153f4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80161a2:	4b1d      	ldr	r3, [pc, #116]	; (8016218 <USBD_SetConfig+0x148>)
 80161a4:	781b      	ldrb	r3, [r3, #0]
 80161a6:	461a      	mov	r2, r3
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80161ac:	4b1a      	ldr	r3, [pc, #104]	; (8016218 <USBD_SetConfig+0x148>)
 80161ae:	781b      	ldrb	r3, [r3, #0]
 80161b0:	4619      	mov	r1, r3
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f7ff f902 	bl	80153bc <USBD_SetClassConfig>
 80161b8:	4603      	mov	r3, r0
 80161ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80161bc:	7bfb      	ldrb	r3, [r7, #15]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d00f      	beq.n	80161e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80161c2:	6839      	ldr	r1, [r7, #0]
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f000 f903 	bl	80163d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	685b      	ldr	r3, [r3, #4]
 80161ce:	b2db      	uxtb	r3, r3
 80161d0:	4619      	mov	r1, r3
 80161d2:	6878      	ldr	r0, [r7, #4]
 80161d4:	f7ff f90e 	bl	80153f4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2202      	movs	r2, #2
 80161dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80161e0:	e014      	b.n	801620c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 f9bf 	bl	8016566 <USBD_CtlSendStatus>
      break;
 80161e8:	e010      	b.n	801620c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f000 f9bb 	bl	8016566 <USBD_CtlSendStatus>
      break;
 80161f0:	e00c      	b.n	801620c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80161f2:	6839      	ldr	r1, [r7, #0]
 80161f4:	6878      	ldr	r0, [r7, #4]
 80161f6:	f000 f8eb 	bl	80163d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80161fa:	4b07      	ldr	r3, [pc, #28]	; (8016218 <USBD_SetConfig+0x148>)
 80161fc:	781b      	ldrb	r3, [r3, #0]
 80161fe:	4619      	mov	r1, r3
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f7ff f8f7 	bl	80153f4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016206:	2303      	movs	r3, #3
 8016208:	73fb      	strb	r3, [r7, #15]
      break;
 801620a:	bf00      	nop
  }

  return ret;
 801620c:	7bfb      	ldrb	r3, [r7, #15]
}
 801620e:	4618      	mov	r0, r3
 8016210:	3710      	adds	r7, #16
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}
 8016216:	bf00      	nop
 8016218:	20002cfc 	.word	0x20002cfc

0801621c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b082      	sub	sp, #8
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
 8016224:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	88db      	ldrh	r3, [r3, #6]
 801622a:	2b01      	cmp	r3, #1
 801622c:	d004      	beq.n	8016238 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801622e:	6839      	ldr	r1, [r7, #0]
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f000 f8cd 	bl	80163d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016236:	e023      	b.n	8016280 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801623e:	b2db      	uxtb	r3, r3
 8016240:	2b02      	cmp	r3, #2
 8016242:	dc02      	bgt.n	801624a <USBD_GetConfig+0x2e>
 8016244:	2b00      	cmp	r3, #0
 8016246:	dc03      	bgt.n	8016250 <USBD_GetConfig+0x34>
 8016248:	e015      	b.n	8016276 <USBD_GetConfig+0x5a>
 801624a:	2b03      	cmp	r3, #3
 801624c:	d00b      	beq.n	8016266 <USBD_GetConfig+0x4a>
 801624e:	e012      	b.n	8016276 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	2200      	movs	r2, #0
 8016254:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	3308      	adds	r3, #8
 801625a:	2201      	movs	r2, #1
 801625c:	4619      	mov	r1, r3
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f000 f927 	bl	80164b2 <USBD_CtlSendData>
        break;
 8016264:	e00c      	b.n	8016280 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	3304      	adds	r3, #4
 801626a:	2201      	movs	r2, #1
 801626c:	4619      	mov	r1, r3
 801626e:	6878      	ldr	r0, [r7, #4]
 8016270:	f000 f91f 	bl	80164b2 <USBD_CtlSendData>
        break;
 8016274:	e004      	b.n	8016280 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016276:	6839      	ldr	r1, [r7, #0]
 8016278:	6878      	ldr	r0, [r7, #4]
 801627a:	f000 f8a9 	bl	80163d0 <USBD_CtlError>
        break;
 801627e:	bf00      	nop
}
 8016280:	bf00      	nop
 8016282:	3708      	adds	r7, #8
 8016284:	46bd      	mov	sp, r7
 8016286:	bd80      	pop	{r7, pc}

08016288 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b082      	sub	sp, #8
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016298:	b2db      	uxtb	r3, r3
 801629a:	3b01      	subs	r3, #1
 801629c:	2b02      	cmp	r3, #2
 801629e:	d81e      	bhi.n	80162de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80162a0:	683b      	ldr	r3, [r7, #0]
 80162a2:	88db      	ldrh	r3, [r3, #6]
 80162a4:	2b02      	cmp	r3, #2
 80162a6:	d004      	beq.n	80162b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80162a8:	6839      	ldr	r1, [r7, #0]
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	f000 f890 	bl	80163d0 <USBD_CtlError>
        break;
 80162b0:	e01a      	b.n	80162e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	2201      	movs	r2, #1
 80162b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d005      	beq.n	80162ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	68db      	ldr	r3, [r3, #12]
 80162c6:	f043 0202 	orr.w	r2, r3, #2
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	330c      	adds	r3, #12
 80162d2:	2202      	movs	r2, #2
 80162d4:	4619      	mov	r1, r3
 80162d6:	6878      	ldr	r0, [r7, #4]
 80162d8:	f000 f8eb 	bl	80164b2 <USBD_CtlSendData>
      break;
 80162dc:	e004      	b.n	80162e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80162de:	6839      	ldr	r1, [r7, #0]
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f000 f875 	bl	80163d0 <USBD_CtlError>
      break;
 80162e6:	bf00      	nop
  }
}
 80162e8:	bf00      	nop
 80162ea:	3708      	adds	r7, #8
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}

080162f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b082      	sub	sp, #8
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
 80162f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162fa:	683b      	ldr	r3, [r7, #0]
 80162fc:	885b      	ldrh	r3, [r3, #2]
 80162fe:	2b01      	cmp	r3, #1
 8016300:	d106      	bne.n	8016310 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	2201      	movs	r2, #1
 8016306:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801630a:	6878      	ldr	r0, [r7, #4]
 801630c:	f000 f92b 	bl	8016566 <USBD_CtlSendStatus>
  }
}
 8016310:	bf00      	nop
 8016312:	3708      	adds	r7, #8
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}

08016318 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b082      	sub	sp, #8
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
 8016320:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016328:	b2db      	uxtb	r3, r3
 801632a:	3b01      	subs	r3, #1
 801632c:	2b02      	cmp	r3, #2
 801632e:	d80b      	bhi.n	8016348 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016330:	683b      	ldr	r3, [r7, #0]
 8016332:	885b      	ldrh	r3, [r3, #2]
 8016334:	2b01      	cmp	r3, #1
 8016336:	d10c      	bne.n	8016352 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	2200      	movs	r2, #0
 801633c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016340:	6878      	ldr	r0, [r7, #4]
 8016342:	f000 f910 	bl	8016566 <USBD_CtlSendStatus>
      }
      break;
 8016346:	e004      	b.n	8016352 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016348:	6839      	ldr	r1, [r7, #0]
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f000 f840 	bl	80163d0 <USBD_CtlError>
      break;
 8016350:	e000      	b.n	8016354 <USBD_ClrFeature+0x3c>
      break;
 8016352:	bf00      	nop
  }
}
 8016354:	bf00      	nop
 8016356:	3708      	adds	r7, #8
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}

0801635c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b084      	sub	sp, #16
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016366:	683b      	ldr	r3, [r7, #0]
 8016368:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	781a      	ldrb	r2, [r3, #0]
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	3301      	adds	r3, #1
 8016376:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	781a      	ldrb	r2, [r3, #0]
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	3301      	adds	r3, #1
 8016384:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016386:	68f8      	ldr	r0, [r7, #12]
 8016388:	f7ff fabb 	bl	8015902 <SWAPBYTE>
 801638c:	4603      	mov	r3, r0
 801638e:	461a      	mov	r2, r3
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	3301      	adds	r3, #1
 8016398:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	3301      	adds	r3, #1
 801639e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80163a0:	68f8      	ldr	r0, [r7, #12]
 80163a2:	f7ff faae 	bl	8015902 <SWAPBYTE>
 80163a6:	4603      	mov	r3, r0
 80163a8:	461a      	mov	r2, r3
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	3301      	adds	r3, #1
 80163b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	3301      	adds	r3, #1
 80163b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80163ba:	68f8      	ldr	r0, [r7, #12]
 80163bc:	f7ff faa1 	bl	8015902 <SWAPBYTE>
 80163c0:	4603      	mov	r3, r0
 80163c2:	461a      	mov	r2, r3
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	80da      	strh	r2, [r3, #6]
}
 80163c8:	bf00      	nop
 80163ca:	3710      	adds	r7, #16
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}

080163d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b082      	sub	sp, #8
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80163da:	2180      	movs	r1, #128	; 0x80
 80163dc:	6878      	ldr	r0, [r7, #4]
 80163de:	f000 fd31 	bl	8016e44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80163e2:	2100      	movs	r1, #0
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f000 fd2d 	bl	8016e44 <USBD_LL_StallEP>
}
 80163ea:	bf00      	nop
 80163ec:	3708      	adds	r7, #8
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}

080163f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80163f2:	b580      	push	{r7, lr}
 80163f4:	b086      	sub	sp, #24
 80163f6:	af00      	add	r7, sp, #0
 80163f8:	60f8      	str	r0, [r7, #12]
 80163fa:	60b9      	str	r1, [r7, #8]
 80163fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80163fe:	2300      	movs	r3, #0
 8016400:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d036      	beq.n	8016476 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801640c:	6938      	ldr	r0, [r7, #16]
 801640e:	f000 f836 	bl	801647e <USBD_GetLen>
 8016412:	4603      	mov	r3, r0
 8016414:	3301      	adds	r3, #1
 8016416:	b29b      	uxth	r3, r3
 8016418:	005b      	lsls	r3, r3, #1
 801641a:	b29a      	uxth	r2, r3
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016420:	7dfb      	ldrb	r3, [r7, #23]
 8016422:	68ba      	ldr	r2, [r7, #8]
 8016424:	4413      	add	r3, r2
 8016426:	687a      	ldr	r2, [r7, #4]
 8016428:	7812      	ldrb	r2, [r2, #0]
 801642a:	701a      	strb	r2, [r3, #0]
  idx++;
 801642c:	7dfb      	ldrb	r3, [r7, #23]
 801642e:	3301      	adds	r3, #1
 8016430:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016432:	7dfb      	ldrb	r3, [r7, #23]
 8016434:	68ba      	ldr	r2, [r7, #8]
 8016436:	4413      	add	r3, r2
 8016438:	2203      	movs	r2, #3
 801643a:	701a      	strb	r2, [r3, #0]
  idx++;
 801643c:	7dfb      	ldrb	r3, [r7, #23]
 801643e:	3301      	adds	r3, #1
 8016440:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016442:	e013      	b.n	801646c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016444:	7dfb      	ldrb	r3, [r7, #23]
 8016446:	68ba      	ldr	r2, [r7, #8]
 8016448:	4413      	add	r3, r2
 801644a:	693a      	ldr	r2, [r7, #16]
 801644c:	7812      	ldrb	r2, [r2, #0]
 801644e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	3301      	adds	r3, #1
 8016454:	613b      	str	r3, [r7, #16]
    idx++;
 8016456:	7dfb      	ldrb	r3, [r7, #23]
 8016458:	3301      	adds	r3, #1
 801645a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801645c:	7dfb      	ldrb	r3, [r7, #23]
 801645e:	68ba      	ldr	r2, [r7, #8]
 8016460:	4413      	add	r3, r2
 8016462:	2200      	movs	r2, #0
 8016464:	701a      	strb	r2, [r3, #0]
    idx++;
 8016466:	7dfb      	ldrb	r3, [r7, #23]
 8016468:	3301      	adds	r3, #1
 801646a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801646c:	693b      	ldr	r3, [r7, #16]
 801646e:	781b      	ldrb	r3, [r3, #0]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d1e7      	bne.n	8016444 <USBD_GetString+0x52>
 8016474:	e000      	b.n	8016478 <USBD_GetString+0x86>
    return;
 8016476:	bf00      	nop
  }
}
 8016478:	3718      	adds	r7, #24
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}

0801647e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801647e:	b480      	push	{r7}
 8016480:	b085      	sub	sp, #20
 8016482:	af00      	add	r7, sp, #0
 8016484:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016486:	2300      	movs	r3, #0
 8016488:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801648e:	e005      	b.n	801649c <USBD_GetLen+0x1e>
  {
    len++;
 8016490:	7bfb      	ldrb	r3, [r7, #15]
 8016492:	3301      	adds	r3, #1
 8016494:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016496:	68bb      	ldr	r3, [r7, #8]
 8016498:	3301      	adds	r3, #1
 801649a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801649c:	68bb      	ldr	r3, [r7, #8]
 801649e:	781b      	ldrb	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d1f5      	bne.n	8016490 <USBD_GetLen+0x12>
  }

  return len;
 80164a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	3714      	adds	r7, #20
 80164aa:	46bd      	mov	sp, r7
 80164ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b0:	4770      	bx	lr

080164b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80164b2:	b580      	push	{r7, lr}
 80164b4:	b084      	sub	sp, #16
 80164b6:	af00      	add	r7, sp, #0
 80164b8:	60f8      	str	r0, [r7, #12]
 80164ba:	60b9      	str	r1, [r7, #8]
 80164bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	2202      	movs	r2, #2
 80164c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	687a      	ldr	r2, [r7, #4]
 80164ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	68ba      	ldr	r2, [r7, #8]
 80164d6:	2100      	movs	r1, #0
 80164d8:	68f8      	ldr	r0, [r7, #12]
 80164da:	f000 fd3c 	bl	8016f56 <USBD_LL_Transmit>

  return USBD_OK;
 80164de:	2300      	movs	r3, #0
}
 80164e0:	4618      	mov	r0, r3
 80164e2:	3710      	adds	r7, #16
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}

080164e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b084      	sub	sp, #16
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	60f8      	str	r0, [r7, #12]
 80164f0:	60b9      	str	r1, [r7, #8]
 80164f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	68ba      	ldr	r2, [r7, #8]
 80164f8:	2100      	movs	r1, #0
 80164fa:	68f8      	ldr	r0, [r7, #12]
 80164fc:	f000 fd2b 	bl	8016f56 <USBD_LL_Transmit>

  return USBD_OK;
 8016500:	2300      	movs	r3, #0
}
 8016502:	4618      	mov	r0, r3
 8016504:	3710      	adds	r7, #16
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}

0801650a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801650a:	b580      	push	{r7, lr}
 801650c:	b084      	sub	sp, #16
 801650e:	af00      	add	r7, sp, #0
 8016510:	60f8      	str	r0, [r7, #12]
 8016512:	60b9      	str	r1, [r7, #8]
 8016514:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	2203      	movs	r2, #3
 801651a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	687a      	ldr	r2, [r7, #4]
 8016522:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	687a      	ldr	r2, [r7, #4]
 801652a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	68ba      	ldr	r2, [r7, #8]
 8016532:	2100      	movs	r1, #0
 8016534:	68f8      	ldr	r0, [r7, #12]
 8016536:	f000 fd2f 	bl	8016f98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801653a:	2300      	movs	r3, #0
}
 801653c:	4618      	mov	r0, r3
 801653e:	3710      	adds	r7, #16
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}

08016544 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b084      	sub	sp, #16
 8016548:	af00      	add	r7, sp, #0
 801654a:	60f8      	str	r0, [r7, #12]
 801654c:	60b9      	str	r1, [r7, #8]
 801654e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	68ba      	ldr	r2, [r7, #8]
 8016554:	2100      	movs	r1, #0
 8016556:	68f8      	ldr	r0, [r7, #12]
 8016558:	f000 fd1e 	bl	8016f98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801655c:	2300      	movs	r3, #0
}
 801655e:	4618      	mov	r0, r3
 8016560:	3710      	adds	r7, #16
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}

08016566 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016566:	b580      	push	{r7, lr}
 8016568:	b082      	sub	sp, #8
 801656a:	af00      	add	r7, sp, #0
 801656c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2204      	movs	r2, #4
 8016572:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016576:	2300      	movs	r3, #0
 8016578:	2200      	movs	r2, #0
 801657a:	2100      	movs	r1, #0
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f000 fcea 	bl	8016f56 <USBD_LL_Transmit>

  return USBD_OK;
 8016582:	2300      	movs	r3, #0
}
 8016584:	4618      	mov	r0, r3
 8016586:	3708      	adds	r7, #8
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}

0801658c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b082      	sub	sp, #8
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2205      	movs	r2, #5
 8016598:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801659c:	2300      	movs	r3, #0
 801659e:	2200      	movs	r2, #0
 80165a0:	2100      	movs	r1, #0
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f000 fcf8 	bl	8016f98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80165a8:	2300      	movs	r3, #0
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	3708      	adds	r7, #8
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}
	...

080165b4 <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b0d2      	sub	sp, #328	; 0x148
 80165b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80165ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80165be:	22c8      	movs	r2, #200	; 0xc8
 80165c0:	2100      	movs	r1, #0
 80165c2:	4618      	mov	r0, r3
 80165c4:	f004 fadf 	bl	801ab86 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80165c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80165cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80165d0:	4618      	mov	r0, r3
 80165d2:	2360      	movs	r3, #96	; 0x60
 80165d4:	461a      	mov	r2, r3
 80165d6:	2100      	movs	r1, #0
 80165d8:	f004 fad5 	bl	801ab86 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 80165dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80165e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80165e4:	461a      	mov	r2, r3
 80165e6:	2300      	movs	r3, #0
 80165e8:	6013      	str	r3, [r2, #0]
 80165ea:	6053      	str	r3, [r2, #4]
 80165ec:	6093      	str	r3, [r2, #8]
 80165ee:	60d3      	str	r3, [r2, #12]
 80165f0:	6113      	str	r3, [r2, #16]
 80165f2:	6153      	str	r3, [r2, #20]

  __HAL_RCC_PWR_CLK_ENABLE();
 80165f4:	4b44      	ldr	r3, [pc, #272]	; (8016708 <USBD_Clock_Config+0x154>)
 80165f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80165fa:	4a43      	ldr	r2, [pc, #268]	; (8016708 <USBD_Clock_Config+0x154>)
 80165fc:	f043 0304 	orr.w	r3, r3, #4
 8016600:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8016604:	4b40      	ldr	r3, [pc, #256]	; (8016708 <USBD_Clock_Config+0x154>)
 8016606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801660a:	f003 0204 	and.w	r2, r3, #4
 801660e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8016612:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8016616:	601a      	str	r2, [r3, #0]
 8016618:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801661c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8016620:	681b      	ldr	r3, [r3, #0]
  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8016622:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8016626:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801662a:	2220      	movs	r2, #32
 801662c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 801662e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8016632:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016636:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801663a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 801663c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8016640:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016644:	2200      	movs	r2, #0
 8016646:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8016648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801664c:	f04f 0300 	mov.w	r3, #0
 8016650:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.IclkClockSelection  = RCC_CLK48CLKSOURCE_HSI48;
 8016654:	2300      	movs	r3, #0
 8016656:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801665a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801665e:	4618      	mov	r0, r3
 8016660:	f7f7 fad4 	bl	800dc0c <HAL_RCCEx_PeriphCLKConfig>
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8016664:	f107 0320 	add.w	r3, r7, #32
 8016668:	4618      	mov	r0, r3
 801666a:	f7f6 f823 	bl	800c6b4 <HAL_RCC_OscConfig>
 801666e:	4603      	mov	r3, r0
 8016670:	2b00      	cmp	r3, #0
 8016672:	d001      	beq.n	8016678 <USBD_Clock_Config+0xc4>
  {
    Error_Handler();
 8016674:	f7eb feba 	bl	80023ec <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/
  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 8016678:	4b23      	ldr	r3, [pc, #140]	; (8016708 <USBD_Clock_Config+0x154>)
 801667a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801667e:	4a22      	ldr	r2, [pc, #136]	; (8016708 <USBD_Clock_Config+0x154>)
 8016680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016684:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8016688:	4b1f      	ldr	r3, [pc, #124]	; (8016708 <USBD_Clock_Config+0x154>)
 801668a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801668e:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8016692:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8016696:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801669a:	601a      	str	r2, [r3, #0]
 801669c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80166a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80166a4:	681b      	ldr	r3, [r3, #0]

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80166a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80166aa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80166ae:	2200      	movs	r2, #0
 80166b0:	601a      	str	r2, [r3, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 80166b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80166b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80166ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80166be:	605a      	str	r2, [r3, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  RCC_CRS_RELOADVALUE_DEFAULT;
 80166c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80166c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80166c8:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80166cc:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 80166ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80166d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80166d6:	2222      	movs	r2, #34	; 0x22
 80166d8:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80166da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80166de:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80166e2:	2200      	movs	r2, #0
 80166e4:	609a      	str	r2, [r3, #8]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 80166e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80166ea:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80166ee:	2220      	movs	r2, #32
 80166f0:	615a      	str	r2, [r3, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 80166f2:	f107 0308 	add.w	r3, r7, #8
 80166f6:	4618      	mov	r0, r3
 80166f8:	f7f9 fda2 	bl	8010240 <HAL_RCCEx_CRSConfig>
}
 80166fc:	bf00      	nop
 80166fe:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}
 8016706:	bf00      	nop
 8016708:	46020c00 	.word	0x46020c00

0801670c <HAL_GPIO_EXTI_Rising_Callback>:
  *         Handle remote-wakeup through key button
  * @param  GPIO_Pin
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 801670c:	b480      	push	{r7}
 801670e:	b083      	sub	sp, #12
 8016710:	af00      	add	r7, sp, #0
 8016712:	4603      	mov	r3, r0
 8016714:	80fb      	strh	r3, [r7, #6]
//    {
//      GetPointerData(HID_Buffer);
//      USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 4);
//    }
//  }
}
 8016716:	bf00      	nop
 8016718:	370c      	adds	r7, #12
 801671a:	46bd      	mov	sp, r7
 801671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016720:	4770      	bx	lr
	...

08016724 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
   USBD_Clock_Config();
 8016728:	f7ff ff44 	bl	80165b4 <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
//  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 801672c:	2200      	movs	r2, #0
 801672e:	4912      	ldr	r1, [pc, #72]	; (8016778 <MX_USB_Device_Init+0x54>)
 8016730:	4812      	ldr	r0, [pc, #72]	; (801677c <MX_USB_Device_Init+0x58>)
 8016732:	f7fe fdd5 	bl	80152e0 <USBD_Init>
 8016736:	4603      	mov	r3, r0
 8016738:	2b00      	cmp	r3, #0
 801673a:	d001      	beq.n	8016740 <MX_USB_Device_Init+0x1c>
    Error_Handler();
 801673c:	f7eb fe56 	bl	80023ec <Error_Handler>
  }
//  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8016740:	490f      	ldr	r1, [pc, #60]	; (8016780 <MX_USB_Device_Init+0x5c>)
 8016742:	480e      	ldr	r0, [pc, #56]	; (801677c <MX_USB_Device_Init+0x58>)
 8016744:	f7fe fdfc 	bl	8015340 <USBD_RegisterClass>
 8016748:	4603      	mov	r3, r0
 801674a:	2b00      	cmp	r3, #0
 801674c:	d001      	beq.n	8016752 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 801674e:	f7eb fe4d 	bl	80023ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8016752:	490c      	ldr	r1, [pc, #48]	; (8016784 <MX_USB_Device_Init+0x60>)
 8016754:	4809      	ldr	r0, [pc, #36]	; (801677c <MX_USB_Device_Init+0x58>)
 8016756:	f7fe fd1d 	bl	8015194 <USBD_CDC_RegisterInterface>
 801675a:	4603      	mov	r3, r0
 801675c:	2b00      	cmp	r3, #0
 801675e:	d001      	beq.n	8016764 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8016760:	f7eb fe44 	bl	80023ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8016764:	4805      	ldr	r0, [pc, #20]	; (801677c <MX_USB_Device_Init+0x58>)
 8016766:	f7fe fe12 	bl	801538e <USBD_Start>
 801676a:	4603      	mov	r3, r0
 801676c:	2b00      	cmp	r3, #0
 801676e:	d001      	beq.n	8016774 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8016770:	f7eb fe3c 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8016774:	bf00      	nop
 8016776:	bd80      	pop	{r7, pc}
 8016778:	200001d0 	.word	0x200001d0
 801677c:	20002d00 	.word	0x20002d00
 8016780:	200000b8 	.word	0x200000b8
 8016784:	200001bc 	.word	0x200001bc

08016788 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801678c:	2200      	movs	r2, #0
 801678e:	4905      	ldr	r1, [pc, #20]	; (80167a4 <CDC_Init_FS+0x1c>)
 8016790:	4805      	ldr	r0, [pc, #20]	; (80167a8 <CDC_Init_FS+0x20>)
 8016792:	f7fe fd14 	bl	80151be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016796:	4905      	ldr	r1, [pc, #20]	; (80167ac <CDC_Init_FS+0x24>)
 8016798:	4803      	ldr	r0, [pc, #12]	; (80167a8 <CDC_Init_FS+0x20>)
 801679a:	f7fe fd2e 	bl	80151fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801679e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80167a0:	4618      	mov	r0, r3
 80167a2:	bd80      	pop	{r7, pc}
 80167a4:	200037d0 	.word	0x200037d0
 80167a8:	20002d00 	.word	0x20002d00
 80167ac:	20002fd0 	.word	0x20002fd0

080167b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80167b0:	b480      	push	{r7}
 80167b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80167b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	46bd      	mov	sp, r7
 80167ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167be:	4770      	bx	lr

080167c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80167c0:	b480      	push	{r7}
 80167c2:	b083      	sub	sp, #12
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	4603      	mov	r3, r0
 80167c8:	6039      	str	r1, [r7, #0]
 80167ca:	71fb      	strb	r3, [r7, #7]
 80167cc:	4613      	mov	r3, r2
 80167ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80167d0:	79fb      	ldrb	r3, [r7, #7]
 80167d2:	2b23      	cmp	r3, #35	; 0x23
 80167d4:	d84a      	bhi.n	801686c <CDC_Control_FS+0xac>
 80167d6:	a201      	add	r2, pc, #4	; (adr r2, 80167dc <CDC_Control_FS+0x1c>)
 80167d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167dc:	0801686d 	.word	0x0801686d
 80167e0:	0801686d 	.word	0x0801686d
 80167e4:	0801686d 	.word	0x0801686d
 80167e8:	0801686d 	.word	0x0801686d
 80167ec:	0801686d 	.word	0x0801686d
 80167f0:	0801686d 	.word	0x0801686d
 80167f4:	0801686d 	.word	0x0801686d
 80167f8:	0801686d 	.word	0x0801686d
 80167fc:	0801686d 	.word	0x0801686d
 8016800:	0801686d 	.word	0x0801686d
 8016804:	0801686d 	.word	0x0801686d
 8016808:	0801686d 	.word	0x0801686d
 801680c:	0801686d 	.word	0x0801686d
 8016810:	0801686d 	.word	0x0801686d
 8016814:	0801686d 	.word	0x0801686d
 8016818:	0801686d 	.word	0x0801686d
 801681c:	0801686d 	.word	0x0801686d
 8016820:	0801686d 	.word	0x0801686d
 8016824:	0801686d 	.word	0x0801686d
 8016828:	0801686d 	.word	0x0801686d
 801682c:	0801686d 	.word	0x0801686d
 8016830:	0801686d 	.word	0x0801686d
 8016834:	0801686d 	.word	0x0801686d
 8016838:	0801686d 	.word	0x0801686d
 801683c:	0801686d 	.word	0x0801686d
 8016840:	0801686d 	.word	0x0801686d
 8016844:	0801686d 	.word	0x0801686d
 8016848:	0801686d 	.word	0x0801686d
 801684c:	0801686d 	.word	0x0801686d
 8016850:	0801686d 	.word	0x0801686d
 8016854:	0801686d 	.word	0x0801686d
 8016858:	0801686d 	.word	0x0801686d
 801685c:	0801686d 	.word	0x0801686d
 8016860:	0801686d 	.word	0x0801686d
 8016864:	0801686d 	.word	0x0801686d
 8016868:	0801686d 	.word	0x0801686d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801686c:	bf00      	nop
  }

  return (USBD_OK);
 801686e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016870:	4618      	mov	r0, r3
 8016872:	370c      	adds	r7, #12
 8016874:	46bd      	mov	sp, r7
 8016876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687a:	4770      	bx	lr

0801687c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b082      	sub	sp, #8
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
 8016884:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016886:	6879      	ldr	r1, [r7, #4]
 8016888:	4805      	ldr	r0, [pc, #20]	; (80168a0 <CDC_Receive_FS+0x24>)
 801688a:	f7fe fcb6 	bl	80151fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801688e:	4804      	ldr	r0, [pc, #16]	; (80168a0 <CDC_Receive_FS+0x24>)
 8016890:	f7fe fcfc 	bl	801528c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016894:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016896:	4618      	mov	r0, r3
 8016898:	3708      	adds	r7, #8
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}
 801689e:	bf00      	nop
 80168a0:	20002d00 	.word	0x20002d00

080168a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b084      	sub	sp, #16
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
 80168ac:	460b      	mov	r3, r1
 80168ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80168b0:	2300      	movs	r3, #0
 80168b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80168b4:	4b0d      	ldr	r3, [pc, #52]	; (80168ec <CDC_Transmit_FS+0x48>)
 80168b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80168bc:	68bb      	ldr	r3, [r7, #8]
 80168be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d001      	beq.n	80168ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80168c6:	2301      	movs	r3, #1
 80168c8:	e00b      	b.n	80168e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80168ca:	887b      	ldrh	r3, [r7, #2]
 80168cc:	461a      	mov	r2, r3
 80168ce:	6879      	ldr	r1, [r7, #4]
 80168d0:	4806      	ldr	r0, [pc, #24]	; (80168ec <CDC_Transmit_FS+0x48>)
 80168d2:	f7fe fc74 	bl	80151be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80168d6:	4805      	ldr	r0, [pc, #20]	; (80168ec <CDC_Transmit_FS+0x48>)
 80168d8:	f7fe fca8 	bl	801522c <USBD_CDC_TransmitPacket>
 80168dc:	4603      	mov	r3, r0
 80168de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80168e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3710      	adds	r7, #16
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}
 80168ea:	bf00      	nop
 80168ec:	20002d00 	.word	0x20002d00

080168f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80168f0:	b480      	push	{r7}
 80168f2:	b087      	sub	sp, #28
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	60f8      	str	r0, [r7, #12]
 80168f8:	60b9      	str	r1, [r7, #8]
 80168fa:	4613      	mov	r3, r2
 80168fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80168fe:	2300      	movs	r3, #0
 8016900:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016902:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016906:	4618      	mov	r0, r3
 8016908:	371c      	adds	r7, #28
 801690a:	46bd      	mov	sp, r7
 801690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016910:	4770      	bx	lr
	...

08016914 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016914:	b480      	push	{r7}
 8016916:	b083      	sub	sp, #12
 8016918:	af00      	add	r7, sp, #0
 801691a:	4603      	mov	r3, r0
 801691c:	6039      	str	r1, [r7, #0]
 801691e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8016920:	683b      	ldr	r3, [r7, #0]
 8016922:	2212      	movs	r2, #18
 8016924:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016926:	4b03      	ldr	r3, [pc, #12]	; (8016934 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016928:	4618      	mov	r0, r3
 801692a:	370c      	adds	r7, #12
 801692c:	46bd      	mov	sp, r7
 801692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016932:	4770      	bx	lr
 8016934:	200001ec 	.word	0x200001ec

08016938 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016938:	b480      	push	{r7}
 801693a:	b083      	sub	sp, #12
 801693c:	af00      	add	r7, sp, #0
 801693e:	4603      	mov	r3, r0
 8016940:	6039      	str	r1, [r7, #0]
 8016942:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	2204      	movs	r2, #4
 8016948:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801694a:	4b03      	ldr	r3, [pc, #12]	; (8016958 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801694c:	4618      	mov	r0, r3
 801694e:	370c      	adds	r7, #12
 8016950:	46bd      	mov	sp, r7
 8016952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016956:	4770      	bx	lr
 8016958:	20000200 	.word	0x20000200

0801695c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	4603      	mov	r3, r0
 8016964:	6039      	str	r1, [r7, #0]
 8016966:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016968:	79fb      	ldrb	r3, [r7, #7]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d105      	bne.n	801697a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801696e:	683a      	ldr	r2, [r7, #0]
 8016970:	4907      	ldr	r1, [pc, #28]	; (8016990 <USBD_FS_ProductStrDescriptor+0x34>)
 8016972:	4808      	ldr	r0, [pc, #32]	; (8016994 <USBD_FS_ProductStrDescriptor+0x38>)
 8016974:	f7ff fd3d 	bl	80163f2 <USBD_GetString>
 8016978:	e004      	b.n	8016984 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801697a:	683a      	ldr	r2, [r7, #0]
 801697c:	4904      	ldr	r1, [pc, #16]	; (8016990 <USBD_FS_ProductStrDescriptor+0x34>)
 801697e:	4805      	ldr	r0, [pc, #20]	; (8016994 <USBD_FS_ProductStrDescriptor+0x38>)
 8016980:	f7ff fd37 	bl	80163f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016984:	4b02      	ldr	r3, [pc, #8]	; (8016990 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016986:	4618      	mov	r0, r3
 8016988:	3708      	adds	r7, #8
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
 801698e:	bf00      	nop
 8016990:	20003fd0 	.word	0x20003fd0
 8016994:	0801f7c0 	.word	0x0801f7c0

08016998 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b082      	sub	sp, #8
 801699c:	af00      	add	r7, sp, #0
 801699e:	4603      	mov	r3, r0
 80169a0:	6039      	str	r1, [r7, #0]
 80169a2:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80169a4:	683a      	ldr	r2, [r7, #0]
 80169a6:	4904      	ldr	r1, [pc, #16]	; (80169b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80169a8:	4804      	ldr	r0, [pc, #16]	; (80169bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80169aa:	f7ff fd22 	bl	80163f2 <USBD_GetString>
  return USBD_StrDesc;
 80169ae:	4b02      	ldr	r3, [pc, #8]	; (80169b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80169b0:	4618      	mov	r0, r3
 80169b2:	3708      	adds	r7, #8
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}
 80169b8:	20003fd0 	.word	0x20003fd0
 80169bc:	0801f7d8 	.word	0x0801f7d8

080169c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	4603      	mov	r3, r0
 80169c8:	6039      	str	r1, [r7, #0]
 80169ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80169cc:	79fb      	ldrb	r3, [r7, #7]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d105      	bne.n	80169de <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80169d2:	683a      	ldr	r2, [r7, #0]
 80169d4:	4907      	ldr	r1, [pc, #28]	; (80169f4 <USBD_FS_SerialStrDescriptor+0x34>)
 80169d6:	4808      	ldr	r0, [pc, #32]	; (80169f8 <USBD_FS_SerialStrDescriptor+0x38>)
 80169d8:	f7ff fd0b 	bl	80163f2 <USBD_GetString>
 80169dc:	e004      	b.n	80169e8 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80169de:	683a      	ldr	r2, [r7, #0]
 80169e0:	4904      	ldr	r1, [pc, #16]	; (80169f4 <USBD_FS_SerialStrDescriptor+0x34>)
 80169e2:	4805      	ldr	r0, [pc, #20]	; (80169f8 <USBD_FS_SerialStrDescriptor+0x38>)
 80169e4:	f7ff fd05 	bl	80163f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80169e8:	4b02      	ldr	r3, [pc, #8]	; (80169f4 <USBD_FS_SerialStrDescriptor+0x34>)
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3708      	adds	r7, #8
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}
 80169f2:	bf00      	nop
 80169f4:	20003fd0 	.word	0x20003fd0
 80169f8:	0801f7ec 	.word	0x0801f7ec

080169fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b082      	sub	sp, #8
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	4603      	mov	r3, r0
 8016a04:	6039      	str	r1, [r7, #0]
 8016a06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016a08:	79fb      	ldrb	r3, [r7, #7]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d105      	bne.n	8016a1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016a0e:	683a      	ldr	r2, [r7, #0]
 8016a10:	4907      	ldr	r1, [pc, #28]	; (8016a30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016a12:	4808      	ldr	r0, [pc, #32]	; (8016a34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016a14:	f7ff fced 	bl	80163f2 <USBD_GetString>
 8016a18:	e004      	b.n	8016a24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016a1a:	683a      	ldr	r2, [r7, #0]
 8016a1c:	4904      	ldr	r1, [pc, #16]	; (8016a30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016a1e:	4805      	ldr	r0, [pc, #20]	; (8016a34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016a20:	f7ff fce7 	bl	80163f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016a24:	4b02      	ldr	r3, [pc, #8]	; (8016a30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	3708      	adds	r7, #8
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd80      	pop	{r7, pc}
 8016a2e:	bf00      	nop
 8016a30:	20003fd0 	.word	0x20003fd0
 8016a34:	0801f7fc 	.word	0x0801f7fc

08016a38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b082      	sub	sp, #8
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	4603      	mov	r3, r0
 8016a40:	6039      	str	r1, [r7, #0]
 8016a42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016a44:	79fb      	ldrb	r3, [r7, #7]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d105      	bne.n	8016a56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016a4a:	683a      	ldr	r2, [r7, #0]
 8016a4c:	4907      	ldr	r1, [pc, #28]	; (8016a6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016a4e:	4808      	ldr	r0, [pc, #32]	; (8016a70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016a50:	f7ff fccf 	bl	80163f2 <USBD_GetString>
 8016a54:	e004      	b.n	8016a60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016a56:	683a      	ldr	r2, [r7, #0]
 8016a58:	4904      	ldr	r1, [pc, #16]	; (8016a6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016a5a:	4805      	ldr	r0, [pc, #20]	; (8016a70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016a5c:	f7ff fcc9 	bl	80163f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016a60:	4b02      	ldr	r3, [pc, #8]	; (8016a6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3708      	adds	r7, #8
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
 8016a6a:	bf00      	nop
 8016a6c:	20003fd0 	.word	0x20003fd0
 8016a70:	0801f808 	.word	0x0801f808

08016a74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b082      	sub	sp, #8
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016a88:	4619      	mov	r1, r3
 8016a8a:	4610      	mov	r0, r2
 8016a8c:	f7fe fcca 	bl	8015424 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8016a90:	bf00      	nop
 8016a92:	3708      	adds	r7, #8
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}

08016a98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b082      	sub	sp, #8
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	460b      	mov	r3, r1
 8016aa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016aaa:	78fa      	ldrb	r2, [r7, #3]
 8016aac:	6879      	ldr	r1, [r7, #4]
 8016aae:	4613      	mov	r3, r2
 8016ab0:	00db      	lsls	r3, r3, #3
 8016ab2:	4413      	add	r3, r2
 8016ab4:	009b      	lsls	r3, r3, #2
 8016ab6:	440b      	add	r3, r1
 8016ab8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8016abc:	681a      	ldr	r2, [r3, #0]
 8016abe:	78fb      	ldrb	r3, [r7, #3]
 8016ac0:	4619      	mov	r1, r3
 8016ac2:	f7fe fd04 	bl	80154ce <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8016ac6:	bf00      	nop
 8016ac8:	3708      	adds	r7, #8
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bd80      	pop	{r7, pc}

08016ace <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ace:	b580      	push	{r7, lr}
 8016ad0:	b082      	sub	sp, #8
 8016ad2:	af00      	add	r7, sp, #0
 8016ad4:	6078      	str	r0, [r7, #4]
 8016ad6:	460b      	mov	r3, r1
 8016ad8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016ae0:	78fa      	ldrb	r2, [r7, #3]
 8016ae2:	6879      	ldr	r1, [r7, #4]
 8016ae4:	4613      	mov	r3, r2
 8016ae6:	00db      	lsls	r3, r3, #3
 8016ae8:	4413      	add	r3, r2
 8016aea:	009b      	lsls	r3, r3, #2
 8016aec:	440b      	add	r3, r1
 8016aee:	334c      	adds	r3, #76	; 0x4c
 8016af0:	681a      	ldr	r2, [r3, #0]
 8016af2:	78fb      	ldrb	r3, [r7, #3]
 8016af4:	4619      	mov	r1, r3
 8016af6:	f7fe fd4d 	bl	8015594 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8016afa:	bf00      	nop
 8016afc:	3708      	adds	r7, #8
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}

08016b02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b02:	b580      	push	{r7, lr}
 8016b04:	b082      	sub	sp, #8
 8016b06:	af00      	add	r7, sp, #0
 8016b08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7fe fe61 	bl	80157d8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8016b16:	bf00      	nop
 8016b18:	3708      	adds	r7, #8
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}

08016b1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b1e:	b580      	push	{r7, lr}
 8016b20:	b084      	sub	sp, #16
 8016b22:	af00      	add	r7, sp, #0
 8016b24:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b26:	2301      	movs	r3, #1
 8016b28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	68db      	ldr	r3, [r3, #12]
 8016b2e:	2b02      	cmp	r3, #2
 8016b30:	d001      	beq.n	8016b36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016b32:	f7eb fc5b 	bl	80023ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b3c:	7bfa      	ldrb	r2, [r7, #15]
 8016b3e:	4611      	mov	r1, r2
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7fe fe0b 	bl	801575c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	f7fe fdb7 	bl	80156c0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8016b52:	bf00      	nop
 8016b54:	3710      	adds	r7, #16
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}
	...

08016b5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b082      	sub	sp, #8
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f7fe fe06 	bl	801577c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if ((hpcd->Init.low_power_enable) && (((USBD_HandleTypeDef*)hpcd->pData)->dev_old_state == USBD_STATE_CONFIGURED))
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	6a1b      	ldr	r3, [r3, #32]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d02b      	beq.n	8016bd0 <HAL_PCD_SuspendCallback+0x74>
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b7e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016b82:	b2db      	uxtb	r3, r3
 8016b84:	2b03      	cmp	r3, #3
 8016b86:	d123      	bne.n	8016bd0 <HAL_PCD_SuspendCallback+0x74>
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, 0U);
    /* Set SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)(SCB_SCR_SLEEPDEEP_Msk);
    HAL_PWR_EnableSleepOnExit();
#else
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	687a      	ldr	r2, [r7, #4]
 8016b94:	6812      	ldr	r2, [r2, #0]
 8016b96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b9a:	f043 0301 	orr.w	r3, r3, #1
 8016b9e:	6013      	str	r3, [r2, #0]
    __HAL_RCC_USB_CLK_SLEEP_ENABLE();
 8016ba0:	4b0d      	ldr	r3, [pc, #52]	; (8016bd8 <HAL_PCD_SuspendCallback+0x7c>)
 8016ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016ba6:	4a0c      	ldr	r2, [pc, #48]	; (8016bd8 <HAL_PCD_SuspendCallback+0x7c>)
 8016ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016bac:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    /* Stop 1 mode */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_0);
 8016bb0:	4b0a      	ldr	r3, [pc, #40]	; (8016bdc <HAL_PCD_SuspendCallback+0x80>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	f023 0307 	bic.w	r3, r3, #7
 8016bb8:	4a08      	ldr	r2, [pc, #32]	; (8016bdc <HAL_PCD_SuspendCallback+0x80>)
 8016bba:	f043 0301 	orr.w	r3, r3, #1
 8016bbe:	6013      	str	r3, [r2, #0]
    /* Set SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)(SCB_SCR_SLEEPDEEP_Msk);
 8016bc0:	4b07      	ldr	r3, [pc, #28]	; (8016be0 <HAL_PCD_SuspendCallback+0x84>)
 8016bc2:	691b      	ldr	r3, [r3, #16]
 8016bc4:	4a06      	ldr	r2, [pc, #24]	; (8016be0 <HAL_PCD_SuspendCallback+0x84>)
 8016bc6:	f043 0304 	orr.w	r3, r3, #4
 8016bca:	6113      	str	r3, [r2, #16]
    HAL_PWR_EnableSleepOnExit();
 8016bcc:	f7f5 fcb0 	bl	800c530 <HAL_PWR_EnableSleepOnExit>
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8016bd0:	bf00      	nop
 8016bd2:	3708      	adds	r7, #8
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}
 8016bd8:	46020c00 	.word	0x46020c00
 8016bdc:	46020800 	.word	0x46020800
 8016be0:	e000ed00 	.word	0xe000ed00

08016be4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b082      	sub	sp, #8
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	6a1b      	ldr	r3, [r3, #32]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d013      	beq.n	8016c1c <HAL_PCD_ResumeCallback+0x38>
  {
#ifdef USBD_LPM_SLEEP_CONFIG
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
#else
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016bf4:	4b0e      	ldr	r3, [pc, #56]	; (8016c30 <HAL_PCD_ResumeCallback+0x4c>)
 8016bf6:	691b      	ldr	r3, [r3, #16]
 8016bf8:	4a0d      	ldr	r2, [pc, #52]	; (8016c30 <HAL_PCD_ResumeCallback+0x4c>)
 8016bfa:	f023 0306 	bic.w	r3, r3, #6
 8016bfe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8016c00:	f000 fa30 	bl	8017064 <SystemClockConfig_Resume>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	687a      	ldr	r2, [r7, #4]
 8016c10:	6812      	ldr	r2, [r2, #0]
 8016c12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016c16:	f023 0301 	bic.w	r3, r3, #1
 8016c1a:	6013      	str	r3, [r2, #0]
#endif
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c22:	4618      	mov	r0, r3
 8016c24:	f7fe fdc0 	bl	80157a8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8016c28:	bf00      	nop
 8016c2a:	3708      	adds	r7, #8
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bd80      	pop	{r7, pc}
 8016c30:	e000ed00 	.word	0xe000ed00

08016c34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b082      	sub	sp, #8
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
 8016c3c:	460b      	mov	r3, r1
 8016c3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c46:	78fa      	ldrb	r2, [r7, #3]
 8016c48:	4611      	mov	r1, r2
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7fe fe0c 	bl	8015868 <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 8016c50:	bf00      	nop
 8016c52:	3708      	adds	r7, #8
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}

08016c58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
 8016c60:	460b      	mov	r3, r1
 8016c62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c6a:	78fa      	ldrb	r2, [r7, #3]
 8016c6c:	4611      	mov	r1, r2
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7fe fdd4 	bl	801581c <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 8016c74:	bf00      	nop
 8016c76:	3708      	adds	r7, #8
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}

08016c7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b082      	sub	sp, #8
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7fe fe12 	bl	80158b4 <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 8016c90:	bf00      	nop
 8016c92:	3708      	adds	r7, #8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}

08016c98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b082      	sub	sp, #8
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7fe fe0f 	bl	80158ca <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 8016cac:	bf00      	nop
 8016cae:	3708      	adds	r7, #8
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	bd80      	pop	{r7, pc}

08016cb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b084      	sub	sp, #16
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
  /* Enable USB power on Pwrctrl CR2 register. */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016cbc:	4b2e      	ldr	r3, [pc, #184]	; (8016d78 <USBD_LL_Init+0xc4>)
 8016cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016cc2:	f003 0304 	and.w	r3, r3, #4
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d119      	bne.n	8016cfe <USBD_LL_Init+0x4a>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8016cca:	4b2b      	ldr	r3, [pc, #172]	; (8016d78 <USBD_LL_Init+0xc4>)
 8016ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016cd0:	4a29      	ldr	r2, [pc, #164]	; (8016d78 <USBD_LL_Init+0xc4>)
 8016cd2:	f043 0304 	orr.w	r3, r3, #4
 8016cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8016cda:	4b27      	ldr	r3, [pc, #156]	; (8016d78 <USBD_LL_Init+0xc4>)
 8016cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016ce0:	f003 0304 	and.w	r3, r3, #4
 8016ce4:	60fb      	str	r3, [r7, #12]
 8016ce6:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddUSB();
 8016ce8:	f7f5 fcb4 	bl	800c654 <HAL_PWREx_EnableVddUSB>
    __HAL_RCC_PWR_CLK_DISABLE();
 8016cec:	4b22      	ldr	r3, [pc, #136]	; (8016d78 <USBD_LL_Init+0xc4>)
 8016cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016cf2:	4a21      	ldr	r2, [pc, #132]	; (8016d78 <USBD_LL_Init+0xc4>)
 8016cf4:	f023 0304 	bic.w	r3, r3, #4
 8016cf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8016cfc:	e001      	b.n	8016d02 <USBD_LL_Init+0x4e>
  }
  else
  {
    HAL_PWREx_EnableVddUSB();
 8016cfe:	f7f5 fca9 	bl	800c654 <HAL_PWREx_EnableVddUSB>
  }
  hpcd_USB_OTG_FS.pData = pdev;
 8016d02:	4a1e      	ldr	r2, [pc, #120]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	4a1b      	ldr	r2, [pc, #108]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d0e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016d12:	4b1a      	ldr	r3, [pc, #104]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d14:	4a1a      	ldr	r2, [pc, #104]	; (8016d80 <USBD_LL_Init+0xcc>)
 8016d16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8016d18:	4b18      	ldr	r3, [pc, #96]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d1a:	2206      	movs	r2, #6
 8016d1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016d1e:	4b17      	ldr	r3, [pc, #92]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d20:	2202      	movs	r2, #2
 8016d22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016d24:	4b15      	ldr	r3, [pc, #84]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d26:	2202      	movs	r2, #2
 8016d28:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016d2a:	4b14      	ldr	r3, [pc, #80]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016d30:	4b12      	ldr	r3, [pc, #72]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d32:	2200      	movs	r2, #0
 8016d34:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016d36:	4b11      	ldr	r3, [pc, #68]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d38:	2200      	movs	r2, #0
 8016d3a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016d3c:	4b0f      	ldr	r3, [pc, #60]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d3e:	2200      	movs	r2, #0
 8016d40:	629a      	str	r2, [r3, #40]	; 0x28
  /* Initialize LL Driver */
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016d42:	480e      	ldr	r0, [pc, #56]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d44:	f7f4 f922 	bl	800af8c <HAL_PCD_Init>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d001      	beq.n	8016d52 <USBD_LL_Init+0x9e>
  {
    Error_Handler( );
 8016d4e:	f7eb fb4d 	bl	80023ec <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN FiFo_Configuration */
  
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016d52:	2180      	movs	r1, #128	; 0x80
 8016d54:	4809      	ldr	r0, [pc, #36]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d56:	f7f5 fbaa 	bl	800c4ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016d5a:	2240      	movs	r2, #64	; 0x40
 8016d5c:	2100      	movs	r1, #0
 8016d5e:	4807      	ldr	r0, [pc, #28]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d60:	f7f5 fb5e 	bl	800c420 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016d64:	2280      	movs	r2, #128	; 0x80
 8016d66:	2101      	movs	r1, #1
 8016d68:	4804      	ldr	r0, [pc, #16]	; (8016d7c <USBD_LL_Init+0xc8>)
 8016d6a:	f7f5 fb59 	bl	800c420 <HAL_PCDEx_SetTxFiFo>
//  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x10);
//  /* USER CODE END FiFo_Configuration */
//  /* USER CODE BEGIN FiFo_Configuration_HID */
//  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x10);
  /* USER CODE END FiFo_Configuration_HID */
  return USBD_OK;
 8016d6e:	2300      	movs	r3, #0
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3710      	adds	r7, #16
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	46020c00 	.word	0x46020c00
 8016d7c:	20001604 	.word	0x20001604
 8016d80:	42040000 	.word	0x42040000

08016d84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016d84:	b580      	push	{r7, lr}
 8016d86:	b084      	sub	sp, #16
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d90:	2300      	movs	r3, #0
 8016d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7f4 fa1a 	bl	800b1d4 <HAL_PCD_Start>
 8016da0:	4603      	mov	r3, r0
 8016da2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016da4:	7bfb      	ldrb	r3, [r7, #15]
 8016da6:	4618      	mov	r0, r3
 8016da8:	f000 f964 	bl	8017074 <USBD_Get_USB_Status>
 8016dac:	4603      	mov	r3, r0
 8016dae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3710      	adds	r7, #16
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}

08016dba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016dba:	b580      	push	{r7, lr}
 8016dbc:	b084      	sub	sp, #16
 8016dbe:	af00      	add	r7, sp, #0
 8016dc0:	6078      	str	r0, [r7, #4]
 8016dc2:	4608      	mov	r0, r1
 8016dc4:	4611      	mov	r1, r2
 8016dc6:	461a      	mov	r2, r3
 8016dc8:	4603      	mov	r3, r0
 8016dca:	70fb      	strb	r3, [r7, #3]
 8016dcc:	460b      	mov	r3, r1
 8016dce:	70bb      	strb	r3, [r7, #2]
 8016dd0:	4613      	mov	r3, r2
 8016dd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016de2:	78bb      	ldrb	r3, [r7, #2]
 8016de4:	883a      	ldrh	r2, [r7, #0]
 8016de6:	78f9      	ldrb	r1, [r7, #3]
 8016de8:	f7f4 ff14 	bl	800bc14 <HAL_PCD_EP_Open>
 8016dec:	4603      	mov	r3, r0
 8016dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016df0:	7bfb      	ldrb	r3, [r7, #15]
 8016df2:	4618      	mov	r0, r3
 8016df4:	f000 f93e 	bl	8017074 <USBD_Get_USB_Status>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3710      	adds	r7, #16
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}

08016e06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e06:	b580      	push	{r7, lr}
 8016e08:	b084      	sub	sp, #16
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	6078      	str	r0, [r7, #4]
 8016e0e:	460b      	mov	r3, r1
 8016e10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e12:	2300      	movs	r3, #0
 8016e14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e16:	2300      	movs	r3, #0
 8016e18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016e20:	78fa      	ldrb	r2, [r7, #3]
 8016e22:	4611      	mov	r1, r2
 8016e24:	4618      	mov	r0, r3
 8016e26:	f7f4 ff5d 	bl	800bce4 <HAL_PCD_EP_Close>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e2e:	7bfb      	ldrb	r3, [r7, #15]
 8016e30:	4618      	mov	r0, r3
 8016e32:	f000 f91f 	bl	8017074 <USBD_Get_USB_Status>
 8016e36:	4603      	mov	r3, r0
 8016e38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3710      	adds	r7, #16
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}

08016e44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b084      	sub	sp, #16
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
 8016e4c:	460b      	mov	r3, r1
 8016e4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e50:	2300      	movs	r3, #0
 8016e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e54:	2300      	movs	r3, #0
 8016e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016e5e:	78fa      	ldrb	r2, [r7, #3]
 8016e60:	4611      	mov	r1, r2
 8016e62:	4618      	mov	r0, r3
 8016e64:	f7f5 f835 	bl	800bed2 <HAL_PCD_EP_SetStall>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e6c:	7bfb      	ldrb	r3, [r7, #15]
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f000 f900 	bl	8017074 <USBD_Get_USB_Status>
 8016e74:	4603      	mov	r3, r0
 8016e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	3710      	adds	r7, #16
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bd80      	pop	{r7, pc}

08016e82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e82:	b580      	push	{r7, lr}
 8016e84:	b084      	sub	sp, #16
 8016e86:	af00      	add	r7, sp, #0
 8016e88:	6078      	str	r0, [r7, #4]
 8016e8a:	460b      	mov	r3, r1
 8016e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e92:	2300      	movs	r3, #0
 8016e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016e9c:	78fa      	ldrb	r2, [r7, #3]
 8016e9e:	4611      	mov	r1, r2
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f7f5 f87a 	bl	800bf9a <HAL_PCD_EP_ClrStall>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016eaa:	7bfb      	ldrb	r3, [r7, #15]
 8016eac:	4618      	mov	r0, r3
 8016eae:	f000 f8e1 	bl	8017074 <USBD_Get_USB_Status>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016eb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016eb8:	4618      	mov	r0, r3
 8016eba:	3710      	adds	r7, #16
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	bd80      	pop	{r7, pc}

08016ec0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ec0:	b480      	push	{r7}
 8016ec2:	b085      	sub	sp, #20
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	6078      	str	r0, [r7, #4]
 8016ec8:	460b      	mov	r3, r1
 8016eca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016ed2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	da0b      	bge.n	8016ef4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016edc:	78fb      	ldrb	r3, [r7, #3]
 8016ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ee2:	68f9      	ldr	r1, [r7, #12]
 8016ee4:	4613      	mov	r3, r2
 8016ee6:	00db      	lsls	r3, r3, #3
 8016ee8:	4413      	add	r3, r2
 8016eea:	009b      	lsls	r3, r3, #2
 8016eec:	440b      	add	r3, r1
 8016eee:	333e      	adds	r3, #62	; 0x3e
 8016ef0:	781b      	ldrb	r3, [r3, #0]
 8016ef2:	e00b      	b.n	8016f0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016ef4:	78fb      	ldrb	r3, [r7, #3]
 8016ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016efa:	68f9      	ldr	r1, [r7, #12]
 8016efc:	4613      	mov	r3, r2
 8016efe:	00db      	lsls	r3, r3, #3
 8016f00:	4413      	add	r3, r2
 8016f02:	009b      	lsls	r3, r3, #2
 8016f04:	440b      	add	r3, r1
 8016f06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016f0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	3714      	adds	r7, #20
 8016f10:	46bd      	mov	sp, r7
 8016f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f16:	4770      	bx	lr

08016f18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b084      	sub	sp, #16
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	460b      	mov	r3, r1
 8016f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f24:	2300      	movs	r3, #0
 8016f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f28:	2300      	movs	r3, #0
 8016f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016f32:	78fa      	ldrb	r2, [r7, #3]
 8016f34:	4611      	mov	r1, r2
 8016f36:	4618      	mov	r0, r3
 8016f38:	f7f4 fe47 	bl	800bbca <HAL_PCD_SetAddress>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f40:	7bfb      	ldrb	r3, [r7, #15]
 8016f42:	4618      	mov	r0, r3
 8016f44:	f000 f896 	bl	8017074 <USBD_Get_USB_Status>
 8016f48:	4603      	mov	r3, r0
 8016f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	3710      	adds	r7, #16
 8016f52:	46bd      	mov	sp, r7
 8016f54:	bd80      	pop	{r7, pc}

08016f56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f56:	b580      	push	{r7, lr}
 8016f58:	b086      	sub	sp, #24
 8016f5a:	af00      	add	r7, sp, #0
 8016f5c:	60f8      	str	r0, [r7, #12]
 8016f5e:	607a      	str	r2, [r7, #4]
 8016f60:	603b      	str	r3, [r7, #0]
 8016f62:	460b      	mov	r3, r1
 8016f64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f66:	2300      	movs	r3, #0
 8016f68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016f74:	7af9      	ldrb	r1, [r7, #11]
 8016f76:	683b      	ldr	r3, [r7, #0]
 8016f78:	687a      	ldr	r2, [r7, #4]
 8016f7a:	f7f4 ff60 	bl	800be3e <HAL_PCD_EP_Transmit>
 8016f7e:	4603      	mov	r3, r0
 8016f80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f82:	7dfb      	ldrb	r3, [r7, #23]
 8016f84:	4618      	mov	r0, r3
 8016f86:	f000 f875 	bl	8017074 <USBD_Get_USB_Status>
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	3718      	adds	r7, #24
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd80      	pop	{r7, pc}

08016f98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b086      	sub	sp, #24
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	60f8      	str	r0, [r7, #12]
 8016fa0:	607a      	str	r2, [r7, #4]
 8016fa2:	603b      	str	r3, [r7, #0]
 8016fa4:	460b      	mov	r3, r1
 8016fa6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fac:	2300      	movs	r3, #0
 8016fae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016fb6:	7af9      	ldrb	r1, [r7, #11]
 8016fb8:	683b      	ldr	r3, [r7, #0]
 8016fba:	687a      	ldr	r2, [r7, #4]
 8016fbc:	f7f4 fedc 	bl	800bd78 <HAL_PCD_EP_Receive>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fc4:	7dfb      	ldrb	r3, [r7, #23]
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f000 f854 	bl	8017074 <USBD_Get_USB_Status>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016fd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	3718      	adds	r7, #24
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	bd80      	pop	{r7, pc}

08016fda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016fda:	b580      	push	{r7, lr}
 8016fdc:	b082      	sub	sp, #8
 8016fde:	af00      	add	r7, sp, #0
 8016fe0:	6078      	str	r0, [r7, #4]
 8016fe2:	460b      	mov	r3, r1
 8016fe4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016fec:	78fa      	ldrb	r2, [r7, #3]
 8016fee:	4611      	mov	r1, r2
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f7f4 ff0c 	bl	800be0e <HAL_PCD_EP_GetRxCount>
 8016ff6:	4603      	mov	r3, r0
}
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	3708      	adds	r7, #8
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bd80      	pop	{r7, pc}

08017000 <HAL_Delay>:
  * implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8017000:	b480      	push	{r7}
 8017002:	b083      	sub	sp, #12
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
  while (Delay)
 8017008:	e008      	b.n	801701c <HAL_Delay+0x1c>
  {
    if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 801700a:	4b09      	ldr	r3, [pc, #36]	; (8017030 <HAL_Delay+0x30>)
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017012:	2b00      	cmp	r3, #0
 8017014:	d002      	beq.n	801701c <HAL_Delay+0x1c>
    {
      Delay--;
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	3b01      	subs	r3, #1
 801701a:	607b      	str	r3, [r7, #4]
  while (Delay)
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d1f3      	bne.n	801700a <HAL_Delay+0xa>
    }
  }
}
 8017022:	bf00      	nop
 8017024:	bf00      	nop
 8017026:	370c      	adds	r7, #12
 8017028:	46bd      	mov	sp, r7
 801702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702e:	4770      	bx	lr
 8017030:	e000e010 	.word	0xe000e010

08017034 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017034:	b480      	push	{r7}
 8017036:	b083      	sub	sp, #12
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801703c:	4b03      	ldr	r3, [pc, #12]	; (801704c <USBD_static_malloc+0x18>)
}
 801703e:	4618      	mov	r0, r3
 8017040:	370c      	adds	r7, #12
 8017042:	46bd      	mov	sp, r7
 8017044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017048:	4770      	bx	lr
 801704a:	bf00      	nop
 801704c:	20004010 	.word	0x20004010

08017050 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017050:	b480      	push	{r7}
 8017052:	b083      	sub	sp, #12
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]

}
 8017058:	bf00      	nop
 801705a:	370c      	adds	r7, #12
 801705c:	46bd      	mov	sp, r7
 801705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017062:	4770      	bx	lr

08017064 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
 void SystemClockConfig_Resume(void)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017068:	f7ea f86e 	bl	8001148 <SystemClock_Config>
  USBD_Clock_Config();
 801706c:	f7ff faa2 	bl	80165b4 <USBD_Clock_Config>
}
 8017070:	bf00      	nop
 8017072:	bd80      	pop	{r7, pc}

08017074 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017074:	b480      	push	{r7}
 8017076:	b085      	sub	sp, #20
 8017078:	af00      	add	r7, sp, #0
 801707a:	4603      	mov	r3, r0
 801707c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801707e:	2300      	movs	r3, #0
 8017080:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017082:	79fb      	ldrb	r3, [r7, #7]
 8017084:	2b03      	cmp	r3, #3
 8017086:	d817      	bhi.n	80170b8 <USBD_Get_USB_Status+0x44>
 8017088:	a201      	add	r2, pc, #4	; (adr r2, 8017090 <USBD_Get_USB_Status+0x1c>)
 801708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801708e:	bf00      	nop
 8017090:	080170a1 	.word	0x080170a1
 8017094:	080170a7 	.word	0x080170a7
 8017098:	080170ad 	.word	0x080170ad
 801709c:	080170b3 	.word	0x080170b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80170a0:	2300      	movs	r3, #0
 80170a2:	73fb      	strb	r3, [r7, #15]
    break;
 80170a4:	e00b      	b.n	80170be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80170a6:	2303      	movs	r3, #3
 80170a8:	73fb      	strb	r3, [r7, #15]
    break;
 80170aa:	e008      	b.n	80170be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80170ac:	2301      	movs	r3, #1
 80170ae:	73fb      	strb	r3, [r7, #15]
    break;
 80170b0:	e005      	b.n	80170be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80170b2:	2303      	movs	r3, #3
 80170b4:	73fb      	strb	r3, [r7, #15]
    break;
 80170b6:	e002      	b.n	80170be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80170b8:	2303      	movs	r3, #3
 80170ba:	73fb      	strb	r3, [r7, #15]
    break;
 80170bc:	bf00      	nop
  }
  return usb_status;
 80170be:	7bfb      	ldrb	r3, [r7, #15]
}
 80170c0:	4618      	mov	r0, r3
 80170c2:	3714      	adds	r7, #20
 80170c4:	46bd      	mov	sp, r7
 80170c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ca:	4770      	bx	lr

080170cc <aiInit>:
float32_t *p_out1;



int aiInit(void)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b082      	sub	sp, #8
 80170d0:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 80170d2:	4b10      	ldr	r3, [pc, #64]	; (8017114 <aiInit+0x48>)
 80170d4:	603b      	str	r3, [r7, #0]
  err = ai_network_create_and_init(&network, acts, NULL);
 80170d6:	463b      	mov	r3, r7
 80170d8:	2200      	movs	r2, #0
 80170da:	4619      	mov	r1, r3
 80170dc:	480e      	ldr	r0, [pc, #56]	; (8017118 <aiInit+0x4c>)
 80170de:	f000 f973 	bl	80173c8 <ai_network_create_and_init>
 80170e2:	4603      	mov	r3, r0
 80170e4:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {

  };

  /* Retrieve pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network , NULL);
 80170e6:	4b0c      	ldr	r3, [pc, #48]	; (8017118 <aiInit+0x4c>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	2100      	movs	r1, #0
 80170ec:	4618      	mov	r0, r3
 80170ee:	f000 f9df 	bl	80174b0 <ai_network_inputs_get>
 80170f2:	4603      	mov	r3, r0
 80170f4:	4a09      	ldr	r2, [pc, #36]	; (801711c <aiInit+0x50>)
 80170f6:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80170f8:	4b07      	ldr	r3, [pc, #28]	; (8017118 <aiInit+0x4c>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	2100      	movs	r1, #0
 80170fe:	4618      	mov	r0, r3
 8017100:	f000 f9f0 	bl	80174e4 <ai_network_outputs_get>
 8017104:	4603      	mov	r3, r0
 8017106:	4a06      	ldr	r2, [pc, #24]	; (8017120 <aiInit+0x54>)
 8017108:	6013      	str	r3, [r2, #0]

  return 0;
 801710a:	2300      	movs	r3, #0
}
 801710c:	4618      	mov	r0, r3
 801710e:	3708      	adds	r7, #8
 8017110:	46bd      	mov	sp, r7
 8017112:	bd80      	pop	{r7, pc}
 8017114:	20004240 	.word	0x20004240
 8017118:	2000423c 	.word	0x2000423c
 801711c:	200043d0 	.word	0x200043d0
 8017120:	200043d4 	.word	0x200043d4

08017124 <aiProcess>:



int aiProcess(float *p_inData, float p_out_data[2])
{
 8017124:	b580      	push	{r7, lr}
 8017126:	b086      	sub	sp, #24
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
 801712c:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(p_inData);
 801712e:	4b23      	ldr	r3, [pc, #140]	; (80171bc <aiProcess+0x98>)
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	687a      	ldr	r2, [r7, #4]
 8017134:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data[0]);
 8017136:	4b22      	ldr	r3, [pc, #136]	; (80171c0 <aiProcess+0x9c>)
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	4a22      	ldr	r2, [pc, #136]	; (80171c4 <aiProcess+0xa0>)
 801713c:	6812      	ldr	r2, [r2, #0]
 801713e:	605a      	str	r2, [r3, #4]
	  ai_output[1].data = AI_HANDLE_PTR(out_data[1]);
  }

  if (AI_NETWORK_OUT_NUM == 1){
	  /* 2 - Perform the inference */
	  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8017140:	4b21      	ldr	r3, [pc, #132]	; (80171c8 <aiProcess+0xa4>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	4a1d      	ldr	r2, [pc, #116]	; (80171bc <aiProcess+0x98>)
 8017146:	6811      	ldr	r1, [r2, #0]
 8017148:	4a1d      	ldr	r2, [pc, #116]	; (80171c0 <aiProcess+0x9c>)
 801714a:	6812      	ldr	r2, [r2, #0]
 801714c:	4618      	mov	r0, r3
 801714e:	f000 fa1f 	bl	8017590 <ai_network_run>
 8017152:	6178      	str	r0, [r7, #20]
	  p_out0 = (float32_t*) ai_output[0].data;
 8017154:	4b1a      	ldr	r3, [pc, #104]	; (80171c0 <aiProcess+0x9c>)
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	685b      	ldr	r3, [r3, #4]
 801715a:	4a1c      	ldr	r2, [pc, #112]	; (80171cc <aiProcess+0xa8>)
 801715c:	6013      	str	r3, [r2, #0]
	  float32_t max_out = *p_out0;
 801715e:	4b1b      	ldr	r3, [pc, #108]	; (80171cc <aiProcess+0xa8>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	613b      	str	r3, [r7, #16]
	  uint32_t max_idx = 0;
 8017166:	2300      	movs	r3, #0
 8017168:	60fb      	str	r3, [r7, #12]

	  arm_max_f32(p_out0,AI_NETWORK_OUT_1_SIZE, &max_out, &max_idx);
 801716a:	4b18      	ldr	r3, [pc, #96]	; (80171cc <aiProcess+0xa8>)
 801716c:	6818      	ldr	r0, [r3, #0]
 801716e:	f107 030c 	add.w	r3, r7, #12
 8017172:	f107 0210 	add.w	r2, r7, #16
 8017176:	2103      	movs	r1, #3
 8017178:	f002 fac2 	bl	8019700 <arm_max_f32>
	  p_out_data[0] = (float32_t)max_idx;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	ee07 3a90 	vmov	s15, r3
 8017182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[1] = max_out * 100.0;
 801718c:	edd7 7a04 	vldr	s15, [r7, #16]
 8017190:	683b      	ldr	r3, [r7, #0]
 8017192:	3304      	adds	r3, #4
 8017194:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80171d0 <aiProcess+0xac>
 8017198:	ee67 7a87 	vmul.f32	s15, s15, s14
 801719c:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[0] = (float32_t)p_out0[0];
	  p_out_data[1] = (float32_t)p_out1[(int) p_out0[0]];

  }

  if (n_batch != 1) {
 80171a0:	697b      	ldr	r3, [r7, #20]
 80171a2:	2b01      	cmp	r3, #1
 80171a4:	d004      	beq.n	80171b0 <aiProcess+0x8c>
	  ai_network_get_error(network);
 80171a6:	4b08      	ldr	r3, [pc, #32]	; (80171c8 <aiProcess+0xa4>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	4618      	mov	r0, r3
 80171ac:	f000 f8ea 	bl	8017384 <ai_network_get_error>
  };


  return 0;
 80171b0:	2300      	movs	r3, #0
}
 80171b2:	4618      	mov	r0, r3
 80171b4:	3718      	adds	r7, #24
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}
 80171ba:	bf00      	nop
 80171bc:	200043d0 	.word	0x200043d0
 80171c0:	200043d4 	.word	0x200043d4
 80171c4:	20000204 	.word	0x20000204
 80171c8:	2000423c 	.word	0x2000423c
 80171cc:	200043d8 	.word	0x200043d8
 80171d0:	42c80000 	.word	0x42c80000

080171d4 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b084      	sub	sp, #16
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
 80171dc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80171de:	2300      	movs	r3, #0
 80171e0:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80171e2:	f107 030c 	add.w	r3, r7, #12
 80171e6:	683a      	ldr	r2, [r7, #0]
 80171e8:	2101      	movs	r1, #1
 80171ea:	4618      	mov	r0, r3
 80171ec:	f000 faa8 	bl	8017740 <ai_platform_get_activations_map>
 80171f0:	4603      	mov	r3, r0
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d023      	beq.n	801723e <network_configure_activations+0x6a>
    /* Updating activations (byte) offsets */
    dense_3_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	4a16      	ldr	r2, [pc, #88]	; (8017254 <network_configure_activations+0x80>)
 80171fa:	6093      	str	r3, [r2, #8]
    dense_3_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	4a15      	ldr	r2, [pc, #84]	; (8017254 <network_configure_activations+0x80>)
 8017200:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations_map[0] + 0);
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	4a14      	ldr	r2, [pc, #80]	; (8017258 <network_configure_activations+0x84>)
 8017206:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	4a13      	ldr	r2, [pc, #76]	; (8017258 <network_configure_activations+0x84>)
 801720c:	60d3      	str	r3, [r2, #12]
    dense_4_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	33c8      	adds	r3, #200	; 0xc8
 8017212:	4a12      	ldr	r2, [pc, #72]	; (801725c <network_configure_activations+0x88>)
 8017214:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	33c8      	adds	r3, #200	; 0xc8
 801721a:	4a10      	ldr	r2, [pc, #64]	; (801725c <network_configure_activations+0x88>)
 801721c:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 0);
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	4a0f      	ldr	r2, [pc, #60]	; (8017260 <network_configure_activations+0x8c>)
 8017222:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	4a0e      	ldr	r2, [pc, #56]	; (8017260 <network_configure_activations+0x8c>)
 8017228:	60d3      	str	r3, [r2, #12]
    dense_5_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	33c8      	adds	r3, #200	; 0xc8
 801722e:	4a0d      	ldr	r2, [pc, #52]	; (8017264 <network_configure_activations+0x90>)
 8017230:	6093      	str	r3, [r2, #8]
    dense_5_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	33c8      	adds	r3, #200	; 0xc8
 8017236:	4a0b      	ldr	r2, [pc, #44]	; (8017264 <network_configure_activations+0x90>)
 8017238:	60d3      	str	r3, [r2, #12]
    
    return true;
 801723a:	2301      	movs	r3, #1
 801723c:	e005      	b.n	801724a <network_configure_activations+0x76>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801723e:	2213      	movs	r2, #19
 8017240:	2130      	movs	r1, #48	; 0x30
 8017242:	6878      	ldr	r0, [r7, #4]
 8017244:	f000 fb8c 	bl	8017960 <ai_platform_network_set_error>
  return false;
 8017248:	2300      	movs	r3, #0
}
 801724a:	4618      	mov	r0, r3
 801724c:	3710      	adds	r7, #16
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
 8017252:	bf00      	nop
 8017254:	20000218 	.word	0x20000218
 8017258:	20000228 	.word	0x20000228
 801725c:	20000238 	.word	0x20000238
 8017260:	20000248 	.word	0x20000248
 8017264:	20000258 	.word	0x20000258

08017268 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b084      	sub	sp, #16
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
 8017270:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8017272:	2300      	movs	r3, #0
 8017274:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8017276:	f107 030c 	add.w	r3, r7, #12
 801727a:	683a      	ldr	r2, [r7, #0]
 801727c:	2101      	movs	r1, #1
 801727e:	4618      	mov	r0, r3
 8017280:	f000 fa0e 	bl	80176a0 <ai_platform_get_weights_map>
 8017284:	4603      	mov	r3, r0
 8017286:	2b00      	cmp	r3, #0
 8017288:	d065      	beq.n	8017356 <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801728a:	4b38      	ldr	r3, [pc, #224]	; (801736c <network_configure_weights+0x104>)
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017292:	4a36      	ldr	r2, [pc, #216]	; (801736c <network_configure_weights+0x104>)
 8017294:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(weights_map[0] + 0);
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	4a34      	ldr	r2, [pc, #208]	; (801736c <network_configure_weights+0x104>)
 801729a:	6093      	str	r3, [r2, #8]
    dense_3_dense_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	4a33      	ldr	r2, [pc, #204]	; (801736c <network_configure_weights+0x104>)
 80172a0:	60d3      	str	r3, [r2, #12]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80172a2:	4b33      	ldr	r3, [pc, #204]	; (8017370 <network_configure_weights+0x108>)
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80172aa:	4a31      	ldr	r2, [pc, #196]	; (8017370 <network_configure_weights+0x108>)
 80172ac:	6013      	str	r3, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(weights_map[0] + 25600);
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 80172b4:	4a2e      	ldr	r2, [pc, #184]	; (8017370 <network_configure_weights+0x108>)
 80172b6:	6093      	str	r3, [r2, #8]
    dense_3_dense_bias_array.data_start = AI_PTR(weights_map[0] + 25600);
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 80172be:	4a2c      	ldr	r2, [pc, #176]	; (8017370 <network_configure_weights+0x108>)
 80172c0:	60d3      	str	r3, [r2, #12]
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80172c2:	4b2c      	ldr	r3, [pc, #176]	; (8017374 <network_configure_weights+0x10c>)
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80172ca:	4a2a      	ldr	r2, [pc, #168]	; (8017374 <network_configure_weights+0x10c>)
 80172cc:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(weights_map[0] + 25800);
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80172d4:	3348      	adds	r3, #72	; 0x48
 80172d6:	4a27      	ldr	r2, [pc, #156]	; (8017374 <network_configure_weights+0x10c>)
 80172d8:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(weights_map[0] + 25800);
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80172e0:	3348      	adds	r3, #72	; 0x48
 80172e2:	4a24      	ldr	r2, [pc, #144]	; (8017374 <network_configure_weights+0x10c>)
 80172e4:	60d3      	str	r3, [r2, #12]
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80172e6:	4b24      	ldr	r3, [pc, #144]	; (8017378 <network_configure_weights+0x110>)
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80172ee:	4a22      	ldr	r2, [pc, #136]	; (8017378 <network_configure_weights+0x110>)
 80172f0:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(weights_map[0] + 35800);
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 80172f8:	33d8      	adds	r3, #216	; 0xd8
 80172fa:	4a1f      	ldr	r2, [pc, #124]	; (8017378 <network_configure_weights+0x110>)
 80172fc:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(weights_map[0] + 35800);
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 8017304:	33d8      	adds	r3, #216	; 0xd8
 8017306:	4a1c      	ldr	r2, [pc, #112]	; (8017378 <network_configure_weights+0x110>)
 8017308:	60d3      	str	r3, [r2, #12]
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801730a:	4b1c      	ldr	r3, [pc, #112]	; (801737c <network_configure_weights+0x114>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017312:	4a1a      	ldr	r2, [pc, #104]	; (801737c <network_configure_weights+0x114>)
 8017314:	6013      	str	r3, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(weights_map[0] + 36000);
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 801731c:	33a0      	adds	r3, #160	; 0xa0
 801731e:	4a17      	ldr	r2, [pc, #92]	; (801737c <network_configure_weights+0x114>)
 8017320:	6093      	str	r3, [r2, #8]
    dense_5_dense_weights_array.data_start = AI_PTR(weights_map[0] + 36000);
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8017328:	33a0      	adds	r3, #160	; 0xa0
 801732a:	4a14      	ldr	r2, [pc, #80]	; (801737c <network_configure_weights+0x114>)
 801732c:	60d3      	str	r3, [r2, #12]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 801732e:	4b14      	ldr	r3, [pc, #80]	; (8017380 <network_configure_weights+0x118>)
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017336:	4a12      	ldr	r2, [pc, #72]	; (8017380 <network_configure_weights+0x118>)
 8017338:	6013      	str	r3, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 36600);
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 8017340:	33f8      	adds	r3, #248	; 0xf8
 8017342:	4a0f      	ldr	r2, [pc, #60]	; (8017380 <network_configure_weights+0x118>)
 8017344:	6093      	str	r3, [r2, #8]
    dense_5_dense_bias_array.data_start = AI_PTR(weights_map[0] + 36600);
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 801734c:	33f8      	adds	r3, #248	; 0xf8
 801734e:	4a0c      	ldr	r2, [pc, #48]	; (8017380 <network_configure_weights+0x118>)
 8017350:	60d3      	str	r3, [r2, #12]
    return true;
 8017352:	2301      	movs	r3, #1
 8017354:	e005      	b.n	8017362 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8017356:	2212      	movs	r2, #18
 8017358:	2130      	movs	r1, #48	; 0x30
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f000 fb00 	bl	8017960 <ai_platform_network_set_error>
  return false;
 8017360:	2300      	movs	r3, #0
}
 8017362:	4618      	mov	r0, r3
 8017364:	3710      	adds	r7, #16
 8017366:	46bd      	mov	sp, r7
 8017368:	bd80      	pop	{r7, pc}
 801736a:	bf00      	nop
 801736c:	20000278 	.word	0x20000278
 8017370:	20000288 	.word	0x20000288
 8017374:	20000298 	.word	0x20000298
 8017378:	200002a8 	.word	0x200002a8
 801737c:	200002b8 	.word	0x200002b8
 8017380:	200002c8 	.word	0x200002c8

08017384 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b082      	sub	sp, #8
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 801738c:	6878      	ldr	r0, [r7, #4]
 801738e:	f000 fa49 	bl	8017824 <ai_platform_network_get_error>
 8017392:	4603      	mov	r3, r0
}
 8017394:	4618      	mov	r0, r3
 8017396:	3708      	adds	r7, #8
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}

0801739c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b084      	sub	sp, #16
 80173a0:	af02      	add	r7, sp, #8
 80173a2:	6078      	str	r0, [r7, #4]
 80173a4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80173a6:	2300      	movs	r3, #0
 80173a8:	9301      	str	r3, [sp, #4]
 80173aa:	2305      	movs	r3, #5
 80173ac:	9300      	str	r3, [sp, #0]
 80173ae:	2301      	movs	r3, #1
 80173b0:	4a04      	ldr	r2, [pc, #16]	; (80173c4 <ai_network_create+0x28>)
 80173b2:	6839      	ldr	r1, [r7, #0]
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f000 fd11 	bl	8017ddc <ai_platform_network_create>
 80173ba:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80173bc:	4618      	mov	r0, r3
 80173be:	3708      	adds	r7, #8
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}
 80173c4:	20000890 	.word	0x20000890

080173c8 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b096      	sub	sp, #88	; 0x58
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	60f8      	str	r0, [r7, #12]
 80173d0:	60b9      	str	r1, [r7, #8]
 80173d2:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80173d4:	2100      	movs	r1, #0
 80173d6:	68f8      	ldr	r0, [r7, #12]
 80173d8:	f7ff ffe0 	bl	801739c <ai_network_create>
 80173dc:	4603      	mov	r3, r0
 80173de:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80173e0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d001      	beq.n	80173ec <ai_network_create_and_init+0x24>
        return err;
 80173e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173ea:	e05d      	b.n	80174a8 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 80173ec:	f107 0314 	add.w	r3, r7, #20
 80173f0:	4618      	mov	r0, r3
 80173f2:	f000 f8dd 	bl	80175b0 <ai_network_data_params_get>
 80173f6:	4603      	mov	r3, r0
 80173f8:	f083 0301 	eor.w	r3, r3, #1
 80173fc:	b2db      	uxtb	r3, r3
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d008      	beq.n	8017414 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	4618      	mov	r0, r3
 8017408:	f7ff ffbc 	bl	8017384 <ai_network_get_error>
 801740c:	4603      	mov	r3, r0
 801740e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8017410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017412:	e049      	b.n	80174a8 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d016      	beq.n	8017448 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 801741a:	2300      	movs	r3, #0
 801741c:	657b      	str	r3, [r7, #84]	; 0x54
 801741e:	e00e      	b.n	801743e <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8017420:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017424:	009b      	lsls	r3, r3, #2
 8017426:	68ba      	ldr	r2, [r7, #8]
 8017428:	4413      	add	r3, r2
 801742a:	681a      	ldr	r2, [r3, #0]
 801742c:	f107 0314 	add.w	r3, r7, #20
 8017430:	330c      	adds	r3, #12
 8017432:	4618      	mov	r0, r3
 8017434:	f000 f91e 	bl	8017674 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8017438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801743a:	3301      	adds	r3, #1
 801743c:	657b      	str	r3, [r7, #84]	; 0x54
 801743e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017440:	461a      	mov	r2, r3
 8017442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017444:	4293      	cmp	r3, r2
 8017446:	dbeb      	blt.n	8017420 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d016      	beq.n	801747c <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 801744e:	2300      	movs	r3, #0
 8017450:	653b      	str	r3, [r7, #80]	; 0x50
 8017452:	e00e      	b.n	8017472 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8017454:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017458:	009b      	lsls	r3, r3, #2
 801745a:	687a      	ldr	r2, [r7, #4]
 801745c:	4413      	add	r3, r2
 801745e:	681a      	ldr	r2, [r3, #0]
 8017460:	f107 0314 	add.w	r3, r7, #20
 8017464:	3304      	adds	r3, #4
 8017466:	4618      	mov	r0, r3
 8017468:	f000 f904 	bl	8017674 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 801746c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801746e:	3301      	adds	r3, #1
 8017470:	653b      	str	r3, [r7, #80]	; 0x50
 8017472:	8b7b      	ldrh	r3, [r7, #26]
 8017474:	461a      	mov	r2, r3
 8017476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017478:	4293      	cmp	r3, r2
 801747a:	dbeb      	blt.n	8017454 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	f107 0214 	add.w	r2, r7, #20
 8017484:	4611      	mov	r1, r2
 8017486:	4618      	mov	r0, r3
 8017488:	f000 f846 	bl	8017518 <ai_network_init>
 801748c:	4603      	mov	r3, r0
 801748e:	f083 0301 	eor.w	r3, r3, #1
 8017492:	b2db      	uxtb	r3, r3
 8017494:	2b00      	cmp	r3, #0
 8017496:	d006      	beq.n	80174a6 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	4618      	mov	r0, r3
 801749e:	f7ff ff71 	bl	8017384 <ai_network_get_error>
 80174a2:	4603      	mov	r3, r0
 80174a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80174a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	3758      	adds	r7, #88	; 0x58
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}

080174b0 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b082      	sub	sp, #8
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
 80174b8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d104      	bne.n	80174ca <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80174c0:	4b06      	ldr	r3, [pc, #24]	; (80174dc <ai_network_inputs_get+0x2c>)
 80174c2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	4a06      	ldr	r2, [pc, #24]	; (80174e0 <ai_network_inputs_get+0x30>)
 80174c8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80174ca:	6839      	ldr	r1, [r7, #0]
 80174cc:	6878      	ldr	r0, [r7, #4]
 80174ce:	f000 fa4d 	bl	801796c <ai_platform_inputs_get>
 80174d2:	4603      	mov	r3, r0
}
 80174d4:	4618      	mov	r0, r3
 80174d6:	3708      	adds	r7, #8
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}
 80174dc:	20000890 	.word	0x20000890
 80174e0:	a1c00100 	.word	0xa1c00100

080174e4 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b082      	sub	sp, #8
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
 80174ec:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d104      	bne.n	80174fe <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80174f4:	4b06      	ldr	r3, [pc, #24]	; (8017510 <ai_network_outputs_get+0x2c>)
 80174f6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	4a06      	ldr	r2, [pc, #24]	; (8017514 <ai_network_outputs_get+0x30>)
 80174fc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80174fe:	6839      	ldr	r1, [r7, #0]
 8017500:	6878      	ldr	r0, [r7, #4]
 8017502:	f000 fb4d 	bl	8017ba0 <ai_platform_outputs_get>
 8017506:	4603      	mov	r3, r0
}
 8017508:	4618      	mov	r0, r3
 801750a:	3708      	adds	r7, #8
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}
 8017510:	20000890 	.word	0x20000890
 8017514:	a1c00100 	.word	0xa1c00100

08017518 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b084      	sub	sp, #16
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
 8017520:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8017522:	6839      	ldr	r1, [r7, #0]
 8017524:	6878      	ldr	r0, [r7, #4]
 8017526:	f000 fd5b 	bl	8017fe0 <ai_platform_network_init>
 801752a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d101      	bne.n	8017536 <ai_network_init+0x1e>
 8017532:	2300      	movs	r3, #0
 8017534:	e028      	b.n	8017588 <ai_network_init+0x70>

  ai_bool ok = true;
 8017536:	2301      	movs	r3, #1
 8017538:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 801753a:	6839      	ldr	r1, [r7, #0]
 801753c:	68f8      	ldr	r0, [r7, #12]
 801753e:	f7ff fe93 	bl	8017268 <network_configure_weights>
 8017542:	4603      	mov	r3, r0
 8017544:	461a      	mov	r2, r3
 8017546:	7afb      	ldrb	r3, [r7, #11]
 8017548:	4013      	ands	r3, r2
 801754a:	2b00      	cmp	r3, #0
 801754c:	bf14      	ite	ne
 801754e:	2301      	movne	r3, #1
 8017550:	2300      	moveq	r3, #0
 8017552:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8017554:	6839      	ldr	r1, [r7, #0]
 8017556:	68f8      	ldr	r0, [r7, #12]
 8017558:	f7ff fe3c 	bl	80171d4 <network_configure_activations>
 801755c:	4603      	mov	r3, r0
 801755e:	461a      	mov	r2, r3
 8017560:	7afb      	ldrb	r3, [r7, #11]
 8017562:	4013      	ands	r3, r2
 8017564:	2b00      	cmp	r3, #0
 8017566:	bf14      	ite	ne
 8017568:	2301      	movne	r3, #1
 801756a:	2300      	moveq	r3, #0
 801756c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801756e:	6878      	ldr	r0, [r7, #4]
 8017570:	f000 fe6c 	bl	801824c <ai_platform_network_post_init>
 8017574:	4603      	mov	r3, r0
 8017576:	461a      	mov	r2, r3
 8017578:	7afb      	ldrb	r3, [r7, #11]
 801757a:	4013      	ands	r3, r2
 801757c:	2b00      	cmp	r3, #0
 801757e:	bf14      	ite	ne
 8017580:	2301      	movne	r3, #1
 8017582:	2300      	moveq	r3, #0
 8017584:	72fb      	strb	r3, [r7, #11]

  return ok;
 8017586:	7afb      	ldrb	r3, [r7, #11]
}
 8017588:	4618      	mov	r0, r3
 801758a:	3710      	adds	r7, #16
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b084      	sub	sp, #16
 8017594:	af00      	add	r7, sp, #0
 8017596:	60f8      	str	r0, [r7, #12]
 8017598:	60b9      	str	r1, [r7, #8]
 801759a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	68b9      	ldr	r1, [r7, #8]
 80175a0:	68f8      	ldr	r0, [r7, #12]
 80175a2:	f000 ff0b 	bl	80183bc <ai_platform_network_process>
 80175a6:	4603      	mov	r3, r0
}
 80175a8:	4618      	mov	r0, r3
 80175aa:	3710      	adds	r7, #16
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}

080175b0 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b086      	sub	sp, #24
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d101      	bne.n	80175c2 <ai_network_data_params_get+0x12>
 80175be:	2300      	movs	r3, #0
 80175c0:	e016      	b.n	80175f0 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80175c2:	4a0d      	ldr	r2, [pc, #52]	; (80175f8 <ai_network_data_params_get+0x48>)
 80175c4:	f107 0310 	add.w	r3, r7, #16
 80175c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80175cc:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80175d0:	4a0a      	ldr	r2, [pc, #40]	; (80175fc <ai_network_data_params_get+0x4c>)
 80175d2:	f107 0308 	add.w	r3, r7, #8
 80175d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80175da:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80175de:	f107 0210 	add.w	r2, r7, #16
 80175e2:	f107 0308 	add.w	r3, r7, #8
 80175e6:	4619      	mov	r1, r3
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	f000 f8f9 	bl	80177e0 <ai_platform_bind_network_params>
 80175ee:	4603      	mov	r3, r0
}
 80175f0:	4618      	mov	r0, r3
 80175f2:	3718      	adds	r7, #24
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bd80      	pop	{r7, pc}
 80175f8:	0801f838 	.word	0x0801f838
 80175fc:	0801f840 	.word	0x0801f840

08017600 <ai_buffer_get_size>:
 8017600:	b358      	cbz	r0, 801765a <ai_buffer_get_size+0x5a>
 8017602:	b430      	push	{r4, r5}
 8017604:	6803      	ldr	r3, [r0, #0]
 8017606:	4d15      	ldr	r5, [pc, #84]	; (801765c <ai_buffer_get_size+0x5c>)
 8017608:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 801760c:	6984      	ldr	r4, [r0, #24]
 801760e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8017612:	42ab      	cmp	r3, r5
 8017614:	6862      	ldr	r2, [r4, #4]
 8017616:	d01a      	beq.n	801764e <ai_buffer_get_size+0x4e>
 8017618:	7d03      	ldrb	r3, [r0, #20]
 801761a:	6941      	ldr	r1, [r0, #20]
 801761c:	f1a3 0301 	sub.w	r3, r3, #1
 8017620:	fab3 f383 	clz	r3, r3
 8017624:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8017628:	095b      	lsrs	r3, r3, #5
 801762a:	428b      	cmp	r3, r1
 801762c:	da0b      	bge.n	8017646 <ai_buffer_get_size+0x46>
 801762e:	2b01      	cmp	r3, #1
 8017630:	d102      	bne.n	8017638 <ai_buffer_get_size+0x38>
 8017632:	2902      	cmp	r1, #2
 8017634:	d007      	beq.n	8017646 <ai_buffer_get_size+0x46>
 8017636:	2302      	movs	r3, #2
 8017638:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801763c:	3301      	adds	r3, #1
 801763e:	428b      	cmp	r3, r1
 8017640:	fb00 f202 	mul.w	r2, r0, r2
 8017644:	d1f3      	bne.n	801762e <ai_buffer_get_size+0x2e>
 8017646:	bc30      	pop	{r4, r5}
 8017648:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801764c:	4770      	bx	lr
 801764e:	2900      	cmp	r1, #0
 8017650:	d0e2      	beq.n	8017618 <ai_buffer_get_size+0x18>
 8017652:	321f      	adds	r2, #31
 8017654:	f022 021f 	bic.w	r2, r2, #31
 8017658:	e7de      	b.n	8017618 <ai_buffer_get_size+0x18>
 801765a:	4770      	bx	lr
 801765c:	000400c0 	.word	0x000400c0

08017660 <ai_buffer_array_sane>:
 8017660:	b138      	cbz	r0, 8017672 <ai_buffer_array_sane+0x12>
 8017662:	6843      	ldr	r3, [r0, #4]
 8017664:	b123      	cbz	r3, 8017670 <ai_buffer_array_sane+0x10>
 8017666:	8840      	ldrh	r0, [r0, #2]
 8017668:	3000      	adds	r0, #0
 801766a:	bf18      	it	ne
 801766c:	2001      	movne	r0, #1
 801766e:	4770      	bx	lr
 8017670:	4618      	mov	r0, r3
 8017672:	4770      	bx	lr

08017674 <ai_buffer_array_item_set_address>:
 8017674:	b120      	cbz	r0, 8017680 <ai_buffer_array_item_set_address+0xc>
 8017676:	6843      	ldr	r3, [r0, #4]
 8017678:	b11b      	cbz	r3, 8017682 <ai_buffer_array_item_set_address+0xe>
 801767a:	8840      	ldrh	r0, [r0, #2]
 801767c:	b918      	cbnz	r0, 8017686 <ai_buffer_array_item_set_address+0x12>
 801767e:	4770      	bx	lr
 8017680:	4770      	bx	lr
 8017682:	4618      	mov	r0, r3
 8017684:	4770      	bx	lr
 8017686:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801768a:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 801768e:	d0f7      	beq.n	8017680 <ai_buffer_array_item_set_address+0xc>
 8017690:	6042      	str	r2, [r0, #4]
 8017692:	2001      	movs	r0, #1
 8017694:	4770      	bx	lr
 8017696:	bf00      	nop

08017698 <_ai_platform_acquire_crc>:
 8017698:	2001      	movs	r0, #1
 801769a:	4770      	bx	lr

0801769c <_ai_platform_release_crc>:
 801769c:	4770      	bx	lr
 801769e:	bf00      	nop

080176a0 <ai_platform_get_weights_map>:
 80176a0:	b192      	cbz	r2, 80176c8 <ai_platform_get_weights_map+0x28>
 80176a2:	b188      	cbz	r0, 80176c8 <ai_platform_get_weights_map+0x28>
 80176a4:	b181      	cbz	r1, 80176c8 <ai_platform_get_weights_map+0x28>
 80176a6:	b570      	push	{r4, r5, r6, lr}
 80176a8:	4b24      	ldr	r3, [pc, #144]	; (801773c <ai_platform_get_weights_map+0x9c>)
 80176aa:	6814      	ldr	r4, [r2, #0]
 80176ac:	429c      	cmp	r4, r3
 80176ae:	d00d      	beq.n	80176cc <ai_platform_get_weights_map+0x2c>
 80176b0:	6854      	ldr	r4, [r2, #4]
 80176b2:	b194      	cbz	r4, 80176da <ai_platform_get_weights_map+0x3a>
 80176b4:	6825      	ldr	r5, [r4, #0]
 80176b6:	429d      	cmp	r5, r3
 80176b8:	d027      	beq.n	801770a <ai_platform_get_weights_map+0x6a>
 80176ba:	6004      	str	r4, [r0, #0]
 80176bc:	f1a1 0001 	sub.w	r0, r1, #1
 80176c0:	fab0 f080 	clz	r0, r0
 80176c4:	0940      	lsrs	r0, r0, #5
 80176c6:	bd70      	pop	{r4, r5, r6, pc}
 80176c8:	2000      	movs	r0, #0
 80176ca:	4770      	bx	lr
 80176cc:	4605      	mov	r5, r0
 80176ce:	1d10      	adds	r0, r2, #4
 80176d0:	4616      	mov	r6, r2
 80176d2:	460c      	mov	r4, r1
 80176d4:	f7ff ffc4 	bl	8017660 <ai_buffer_array_sane>
 80176d8:	b908      	cbnz	r0, 80176de <ai_platform_get_weights_map+0x3e>
 80176da:	2000      	movs	r0, #0
 80176dc:	bd70      	pop	{r4, r5, r6, pc}
 80176de:	88f3      	ldrh	r3, [r6, #6]
 80176e0:	429c      	cmp	r4, r3
 80176e2:	d1fa      	bne.n	80176da <ai_platform_get_weights_map+0x3a>
 80176e4:	2100      	movs	r1, #0
 80176e6:	4608      	mov	r0, r1
 80176e8:	1f2b      	subs	r3, r5, #4
 80176ea:	68b2      	ldr	r2, [r6, #8]
 80176ec:	440a      	add	r2, r1
 80176ee:	6852      	ldr	r2, [r2, #4]
 80176f0:	311c      	adds	r1, #28
 80176f2:	b12a      	cbz	r2, 8017700 <ai_platform_get_weights_map+0x60>
 80176f4:	3001      	adds	r0, #1
 80176f6:	4284      	cmp	r4, r0
 80176f8:	f843 2f04 	str.w	r2, [r3, #4]!
 80176fc:	d1f5      	bne.n	80176ea <ai_platform_get_weights_map+0x4a>
 80176fe:	4620      	mov	r0, r4
 8017700:	1a20      	subs	r0, r4, r0
 8017702:	fab0 f080 	clz	r0, r0
 8017706:	0940      	lsrs	r0, r0, #5
 8017708:	bd70      	pop	{r4, r5, r6, pc}
 801770a:	6863      	ldr	r3, [r4, #4]
 801770c:	3404      	adds	r4, #4
 801770e:	42ab      	cmp	r3, r5
 8017710:	d0e3      	beq.n	80176da <ai_platform_get_weights_map+0x3a>
 8017712:	3804      	subs	r0, #4
 8017714:	4626      	mov	r6, r4
 8017716:	2200      	movs	r2, #0
 8017718:	e003      	b.n	8017722 <ai_platform_get_weights_map+0x82>
 801771a:	f856 3f04 	ldr.w	r3, [r6, #4]!
 801771e:	42ab      	cmp	r3, r5
 8017720:	d0db      	beq.n	80176da <ai_platform_get_weights_map+0x3a>
 8017722:	3201      	adds	r2, #1
 8017724:	4291      	cmp	r1, r2
 8017726:	f840 3f04 	str.w	r3, [r0, #4]!
 801772a:	d1f6      	bne.n	801771a <ai_platform_get_weights_map+0x7a>
 801772c:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8017730:	4b02      	ldr	r3, [pc, #8]	; (801773c <ai_platform_get_weights_map+0x9c>)
 8017732:	429a      	cmp	r2, r3
 8017734:	d1d1      	bne.n	80176da <ai_platform_get_weights_map+0x3a>
 8017736:	2001      	movs	r0, #1
 8017738:	bd70      	pop	{r4, r5, r6, pc}
 801773a:	bf00      	nop
 801773c:	a1facade 	.word	0xa1facade

08017740 <ai_platform_get_activations_map>:
 8017740:	b192      	cbz	r2, 8017768 <ai_platform_get_activations_map+0x28>
 8017742:	b188      	cbz	r0, 8017768 <ai_platform_get_activations_map+0x28>
 8017744:	b181      	cbz	r1, 8017768 <ai_platform_get_activations_map+0x28>
 8017746:	b570      	push	{r4, r5, r6, lr}
 8017748:	4b24      	ldr	r3, [pc, #144]	; (80177dc <ai_platform_get_activations_map+0x9c>)
 801774a:	6814      	ldr	r4, [r2, #0]
 801774c:	429c      	cmp	r4, r3
 801774e:	d00d      	beq.n	801776c <ai_platform_get_activations_map+0x2c>
 8017750:	6a14      	ldr	r4, [r2, #32]
 8017752:	b19c      	cbz	r4, 801777c <ai_platform_get_activations_map+0x3c>
 8017754:	6825      	ldr	r5, [r4, #0]
 8017756:	429d      	cmp	r5, r3
 8017758:	d028      	beq.n	80177ac <ai_platform_get_activations_map+0x6c>
 801775a:	6004      	str	r4, [r0, #0]
 801775c:	f1a1 0001 	sub.w	r0, r1, #1
 8017760:	fab0 f080 	clz	r0, r0
 8017764:	0940      	lsrs	r0, r0, #5
 8017766:	bd70      	pop	{r4, r5, r6, pc}
 8017768:	2000      	movs	r0, #0
 801776a:	4770      	bx	lr
 801776c:	4605      	mov	r5, r0
 801776e:	f102 000c 	add.w	r0, r2, #12
 8017772:	4616      	mov	r6, r2
 8017774:	460c      	mov	r4, r1
 8017776:	f7ff ff73 	bl	8017660 <ai_buffer_array_sane>
 801777a:	b908      	cbnz	r0, 8017780 <ai_platform_get_activations_map+0x40>
 801777c:	2000      	movs	r0, #0
 801777e:	bd70      	pop	{r4, r5, r6, pc}
 8017780:	89f3      	ldrh	r3, [r6, #14]
 8017782:	429c      	cmp	r4, r3
 8017784:	d1fa      	bne.n	801777c <ai_platform_get_activations_map+0x3c>
 8017786:	2100      	movs	r1, #0
 8017788:	4608      	mov	r0, r1
 801778a:	1f2b      	subs	r3, r5, #4
 801778c:	6932      	ldr	r2, [r6, #16]
 801778e:	440a      	add	r2, r1
 8017790:	6852      	ldr	r2, [r2, #4]
 8017792:	311c      	adds	r1, #28
 8017794:	b12a      	cbz	r2, 80177a2 <ai_platform_get_activations_map+0x62>
 8017796:	3001      	adds	r0, #1
 8017798:	4284      	cmp	r4, r0
 801779a:	f843 2f04 	str.w	r2, [r3, #4]!
 801779e:	d1f5      	bne.n	801778c <ai_platform_get_activations_map+0x4c>
 80177a0:	4620      	mov	r0, r4
 80177a2:	1a20      	subs	r0, r4, r0
 80177a4:	fab0 f080 	clz	r0, r0
 80177a8:	0940      	lsrs	r0, r0, #5
 80177aa:	bd70      	pop	{r4, r5, r6, pc}
 80177ac:	6863      	ldr	r3, [r4, #4]
 80177ae:	3404      	adds	r4, #4
 80177b0:	42ab      	cmp	r3, r5
 80177b2:	d0e3      	beq.n	801777c <ai_platform_get_activations_map+0x3c>
 80177b4:	3804      	subs	r0, #4
 80177b6:	4626      	mov	r6, r4
 80177b8:	2200      	movs	r2, #0
 80177ba:	e003      	b.n	80177c4 <ai_platform_get_activations_map+0x84>
 80177bc:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80177c0:	42ab      	cmp	r3, r5
 80177c2:	d0db      	beq.n	801777c <ai_platform_get_activations_map+0x3c>
 80177c4:	3201      	adds	r2, #1
 80177c6:	4291      	cmp	r1, r2
 80177c8:	f840 3f04 	str.w	r3, [r0, #4]!
 80177cc:	d1f6      	bne.n	80177bc <ai_platform_get_activations_map+0x7c>
 80177ce:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80177d2:	4b02      	ldr	r3, [pc, #8]	; (80177dc <ai_platform_get_activations_map+0x9c>)
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d1d1      	bne.n	801777c <ai_platform_get_activations_map+0x3c>
 80177d8:	2001      	movs	r0, #1
 80177da:	bd70      	pop	{r4, r5, r6, pc}
 80177dc:	a1facade 	.word	0xa1facade

080177e0 <ai_platform_bind_network_params>:
 80177e0:	b1a0      	cbz	r0, 801780c <ai_platform_bind_network_params+0x2c>
 80177e2:	b1c9      	cbz	r1, 8017818 <ai_platform_bind_network_params+0x38>
 80177e4:	b1aa      	cbz	r2, 8017812 <ai_platform_bind_network_params+0x32>
 80177e6:	4603      	mov	r3, r0
 80177e8:	b410      	push	{r4}
 80177ea:	480d      	ldr	r0, [pc, #52]	; (8017820 <ai_platform_bind_network_params+0x40>)
 80177ec:	f103 040c 	add.w	r4, r3, #12
 80177f0:	f843 0b04 	str.w	r0, [r3], #4
 80177f4:	c903      	ldmia	r1, {r0, r1}
 80177f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80177fa:	2301      	movs	r3, #1
 80177fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017800:	e884 0003 	stmia.w	r4, {r0, r1}
 8017804:	4618      	mov	r0, r3
 8017806:	f85d 4b04 	ldr.w	r4, [sp], #4
 801780a:	4770      	bx	lr
 801780c:	4603      	mov	r3, r0
 801780e:	4618      	mov	r0, r3
 8017810:	4770      	bx	lr
 8017812:	4613      	mov	r3, r2
 8017814:	4618      	mov	r0, r3
 8017816:	4770      	bx	lr
 8017818:	460b      	mov	r3, r1
 801781a:	4618      	mov	r0, r3
 801781c:	4770      	bx	lr
 801781e:	bf00      	nop
 8017820:	a1facade 	.word	0xa1facade

08017824 <ai_platform_network_get_error>:
 8017824:	b510      	push	{r4, lr}
 8017826:	b120      	cbz	r0, 8017832 <ai_platform_network_get_error+0xe>
 8017828:	4b45      	ldr	r3, [pc, #276]	; (8017940 <ai_platform_network_get_error+0x11c>)
 801782a:	6802      	ldr	r2, [r0, #0]
 801782c:	4604      	mov	r4, r0
 801782e:	429a      	cmp	r2, r3
 8017830:	d033      	beq.n	801789a <ai_platform_network_get_error+0x76>
 8017832:	4a44      	ldr	r2, [pc, #272]	; (8017944 <ai_platform_network_get_error+0x120>)
 8017834:	6813      	ldr	r3, [r2, #0]
 8017836:	f023 0301 	bic.w	r3, r3, #1
 801783a:	6013      	str	r3, [r2, #0]
 801783c:	f7ff ff2c 	bl	8017698 <_ai_platform_acquire_crc>
 8017840:	4b41      	ldr	r3, [pc, #260]	; (8017948 <ai_platform_network_get_error+0x124>)
 8017842:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017846:	429a      	cmp	r2, r3
 8017848:	d014      	beq.n	8017874 <ai_platform_network_get_error+0x50>
 801784a:	2218      	movs	r2, #24
 801784c:	4b3f      	ldr	r3, [pc, #252]	; (801794c <ai_platform_network_get_error+0x128>)
 801784e:	601a      	str	r2, [r3, #0]
 8017850:	681a      	ldr	r2, [r3, #0]
 8017852:	2a18      	cmp	r2, #24
 8017854:	d042      	beq.n	80178dc <ai_platform_network_get_error+0xb8>
 8017856:	4b3e      	ldr	r3, [pc, #248]	; (8017950 <ai_platform_network_get_error+0x12c>)
 8017858:	2201      	movs	r2, #1
 801785a:	4619      	mov	r1, r3
 801785c:	601a      	str	r2, [r3, #0]
 801785e:	680b      	ldr	r3, [r1, #0]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d1fc      	bne.n	801785e <ai_platform_network_get_error+0x3a>
 8017864:	4b3b      	ldr	r3, [pc, #236]	; (8017954 <ai_platform_network_get_error+0x130>)
 8017866:	493c      	ldr	r1, [pc, #240]	; (8017958 <ai_platform_network_get_error+0x134>)
 8017868:	4a3c      	ldr	r2, [pc, #240]	; (801795c <ai_platform_network_get_error+0x138>)
 801786a:	6019      	str	r1, [r3, #0]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	4293      	cmp	r3, r2
 8017870:	d00d      	beq.n	801788e <ai_platform_network_get_error+0x6a>
 8017872:	e7fe      	b.n	8017872 <ai_platform_network_get_error+0x4e>
 8017874:	2301      	movs	r3, #1
 8017876:	f100 0208 	add.w	r2, r0, #8
 801787a:	6083      	str	r3, [r0, #8]
 801787c:	6813      	ldr	r3, [r2, #0]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d1fc      	bne.n	801787c <ai_platform_network_get_error+0x58>
 8017882:	4a35      	ldr	r2, [pc, #212]	; (8017958 <ai_platform_network_get_error+0x134>)
 8017884:	4b35      	ldr	r3, [pc, #212]	; (801795c <ai_platform_network_get_error+0x138>)
 8017886:	6002      	str	r2, [r0, #0]
 8017888:	6802      	ldr	r2, [r0, #0]
 801788a:	429a      	cmp	r2, r3
 801788c:	d104      	bne.n	8017898 <ai_platform_network_get_error+0x74>
 801788e:	f7ff ff05 	bl	801769c <_ai_platform_release_crc>
 8017892:	f241 0010 	movw	r0, #4112	; 0x1010
 8017896:	bd10      	pop	{r4, pc}
 8017898:	e7fe      	b.n	8017898 <ai_platform_network_get_error+0x74>
 801789a:	4a2a      	ldr	r2, [pc, #168]	; (8017944 <ai_platform_network_get_error+0x120>)
 801789c:	6813      	ldr	r3, [r2, #0]
 801789e:	f023 0301 	bic.w	r3, r3, #1
 80178a2:	6013      	str	r3, [r2, #0]
 80178a4:	f7ff fef8 	bl	8017698 <_ai_platform_acquire_crc>
 80178a8:	4b27      	ldr	r3, [pc, #156]	; (8017948 <ai_platform_network_get_error+0x124>)
 80178aa:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80178ae:	429a      	cmp	r2, r3
 80178b0:	d022      	beq.n	80178f8 <ai_platform_network_get_error+0xd4>
 80178b2:	2218      	movs	r2, #24
 80178b4:	4b25      	ldr	r3, [pc, #148]	; (801794c <ai_platform_network_get_error+0x128>)
 80178b6:	601a      	str	r2, [r3, #0]
 80178b8:	681a      	ldr	r2, [r3, #0]
 80178ba:	2a18      	cmp	r2, #24
 80178bc:	d031      	beq.n	8017922 <ai_platform_network_get_error+0xfe>
 80178be:	4b24      	ldr	r3, [pc, #144]	; (8017950 <ai_platform_network_get_error+0x12c>)
 80178c0:	2201      	movs	r2, #1
 80178c2:	4619      	mov	r1, r3
 80178c4:	601a      	str	r2, [r3, #0]
 80178c6:	680b      	ldr	r3, [r1, #0]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d1fc      	bne.n	80178c6 <ai_platform_network_get_error+0xa2>
 80178cc:	4b21      	ldr	r3, [pc, #132]	; (8017954 <ai_platform_network_get_error+0x130>)
 80178ce:	4922      	ldr	r1, [pc, #136]	; (8017958 <ai_platform_network_get_error+0x134>)
 80178d0:	4a22      	ldr	r2, [pc, #136]	; (801795c <ai_platform_network_get_error+0x138>)
 80178d2:	6019      	str	r1, [r3, #0]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	4293      	cmp	r3, r2
 80178d8:	d01b      	beq.n	8017912 <ai_platform_network_get_error+0xee>
 80178da:	e7fe      	b.n	80178da <ai_platform_network_get_error+0xb6>
 80178dc:	2201      	movs	r2, #1
 80178de:	4619      	mov	r1, r3
 80178e0:	601a      	str	r2, [r3, #0]
 80178e2:	680b      	ldr	r3, [r1, #0]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d1fc      	bne.n	80178e2 <ai_platform_network_get_error+0xbe>
 80178e8:	4b17      	ldr	r3, [pc, #92]	; (8017948 <ai_platform_network_get_error+0x124>)
 80178ea:	491b      	ldr	r1, [pc, #108]	; (8017958 <ai_platform_network_get_error+0x134>)
 80178ec:	4a1b      	ldr	r2, [pc, #108]	; (801795c <ai_platform_network_get_error+0x138>)
 80178ee:	6019      	str	r1, [r3, #0]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	4293      	cmp	r3, r2
 80178f4:	d0cb      	beq.n	801788e <ai_platform_network_get_error+0x6a>
 80178f6:	e7fe      	b.n	80178f6 <ai_platform_network_get_error+0xd2>
 80178f8:	2301      	movs	r3, #1
 80178fa:	f100 0208 	add.w	r2, r0, #8
 80178fe:	6083      	str	r3, [r0, #8]
 8017900:	6813      	ldr	r3, [r2, #0]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d1fc      	bne.n	8017900 <ai_platform_network_get_error+0xdc>
 8017906:	4a14      	ldr	r2, [pc, #80]	; (8017958 <ai_platform_network_get_error+0x134>)
 8017908:	4b14      	ldr	r3, [pc, #80]	; (801795c <ai_platform_network_get_error+0x138>)
 801790a:	6002      	str	r2, [r0, #0]
 801790c:	6802      	ldr	r2, [r0, #0]
 801790e:	429a      	cmp	r2, r3
 8017910:	d115      	bne.n	801793e <ai_platform_network_get_error+0x11a>
 8017912:	f7ff fec3 	bl	801769c <_ai_platform_release_crc>
 8017916:	f104 0010 	add.w	r0, r4, #16
 801791a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801791e:	f000 bfe1 	b.w	80188e4 <core_get_error>
 8017922:	2201      	movs	r2, #1
 8017924:	4619      	mov	r1, r3
 8017926:	601a      	str	r2, [r3, #0]
 8017928:	680b      	ldr	r3, [r1, #0]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d1fc      	bne.n	8017928 <ai_platform_network_get_error+0x104>
 801792e:	4b06      	ldr	r3, [pc, #24]	; (8017948 <ai_platform_network_get_error+0x124>)
 8017930:	4909      	ldr	r1, [pc, #36]	; (8017958 <ai_platform_network_get_error+0x134>)
 8017932:	4a0a      	ldr	r2, [pc, #40]	; (801795c <ai_platform_network_get_error+0x138>)
 8017934:	6019      	str	r1, [r3, #0]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	4293      	cmp	r3, r2
 801793a:	d0ea      	beq.n	8017912 <ai_platform_network_get_error+0xee>
 801793c:	e7fe      	b.n	801793c <ai_platform_network_get_error+0x118>
 801793e:	e7fe      	b.n	801793e <ai_platform_network_get_error+0x11a>
 8017940:	a1c00100 	.word	0xa1c00100
 8017944:	e0002000 	.word	0xe0002000
 8017948:	40023000 	.word	0x40023000
 801794c:	40023008 	.word	0x40023008
 8017950:	50023008 	.word	0x50023008
 8017954:	50023000 	.word	0x50023000
 8017958:	f407a5c2 	.word	0xf407a5c2
 801795c:	b5e8b5cd 	.word	0xb5e8b5cd

08017960 <ai_platform_network_set_error>:
 8017960:	b110      	cbz	r0, 8017968 <ai_platform_network_set_error+0x8>
 8017962:	3010      	adds	r0, #16
 8017964:	f000 bfc4 	b.w	80188f0 <core_set_error>
 8017968:	4770      	bx	lr
 801796a:	bf00      	nop

0801796c <ai_platform_inputs_get>:
 801796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017970:	b085      	sub	sp, #20
 8017972:	2800      	cmp	r0, #0
 8017974:	d034      	beq.n	80179e0 <ai_platform_inputs_get+0x74>
 8017976:	4b82      	ldr	r3, [pc, #520]	; (8017b80 <ai_platform_inputs_get+0x214>)
 8017978:	6802      	ldr	r2, [r0, #0]
 801797a:	4607      	mov	r7, r0
 801797c:	429a      	cmp	r2, r3
 801797e:	d12f      	bne.n	80179e0 <ai_platform_inputs_get+0x74>
 8017980:	4a80      	ldr	r2, [pc, #512]	; (8017b84 <ai_platform_inputs_get+0x218>)
 8017982:	468b      	mov	fp, r1
 8017984:	6813      	ldr	r3, [r2, #0]
 8017986:	f023 0301 	bic.w	r3, r3, #1
 801798a:	6013      	str	r3, [r2, #0]
 801798c:	f7ff fe84 	bl	8017698 <_ai_platform_acquire_crc>
 8017990:	4b7d      	ldr	r3, [pc, #500]	; (8017b88 <ai_platform_inputs_get+0x21c>)
 8017992:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017996:	429a      	cmp	r2, r3
 8017998:	d014      	beq.n	80179c4 <ai_platform_inputs_get+0x58>
 801799a:	2218      	movs	r2, #24
 801799c:	4b7b      	ldr	r3, [pc, #492]	; (8017b8c <ai_platform_inputs_get+0x220>)
 801799e:	601a      	str	r2, [r3, #0]
 80179a0:	681a      	ldr	r2, [r3, #0]
 80179a2:	2a18      	cmp	r2, #24
 80179a4:	d040      	beq.n	8017a28 <ai_platform_inputs_get+0xbc>
 80179a6:	4b7a      	ldr	r3, [pc, #488]	; (8017b90 <ai_platform_inputs_get+0x224>)
 80179a8:	2201      	movs	r2, #1
 80179aa:	4619      	mov	r1, r3
 80179ac:	601a      	str	r2, [r3, #0]
 80179ae:	680b      	ldr	r3, [r1, #0]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d1fc      	bne.n	80179ae <ai_platform_inputs_get+0x42>
 80179b4:	4b77      	ldr	r3, [pc, #476]	; (8017b94 <ai_platform_inputs_get+0x228>)
 80179b6:	4978      	ldr	r1, [pc, #480]	; (8017b98 <ai_platform_inputs_get+0x22c>)
 80179b8:	4a78      	ldr	r2, [pc, #480]	; (8017b9c <ai_platform_inputs_get+0x230>)
 80179ba:	6019      	str	r1, [r3, #0]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	4293      	cmp	r3, r2
 80179c0:	d040      	beq.n	8017a44 <ai_platform_inputs_get+0xd8>
 80179c2:	e7fe      	b.n	80179c2 <ai_platform_inputs_get+0x56>
 80179c4:	2301      	movs	r3, #1
 80179c6:	f100 0208 	add.w	r2, r0, #8
 80179ca:	6083      	str	r3, [r0, #8]
 80179cc:	6813      	ldr	r3, [r2, #0]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d1fc      	bne.n	80179cc <ai_platform_inputs_get+0x60>
 80179d2:	4a71      	ldr	r2, [pc, #452]	; (8017b98 <ai_platform_inputs_get+0x22c>)
 80179d4:	4b71      	ldr	r3, [pc, #452]	; (8017b9c <ai_platform_inputs_get+0x230>)
 80179d6:	6002      	str	r2, [r0, #0]
 80179d8:	6802      	ldr	r2, [r0, #0]
 80179da:	429a      	cmp	r2, r3
 80179dc:	d032      	beq.n	8017a44 <ai_platform_inputs_get+0xd8>
 80179de:	e7fe      	b.n	80179de <ai_platform_inputs_get+0x72>
 80179e0:	4a68      	ldr	r2, [pc, #416]	; (8017b84 <ai_platform_inputs_get+0x218>)
 80179e2:	6813      	ldr	r3, [r2, #0]
 80179e4:	f023 0301 	bic.w	r3, r3, #1
 80179e8:	6013      	str	r3, [r2, #0]
 80179ea:	f7ff fe55 	bl	8017698 <_ai_platform_acquire_crc>
 80179ee:	4b66      	ldr	r3, [pc, #408]	; (8017b88 <ai_platform_inputs_get+0x21c>)
 80179f0:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80179f4:	429a      	cmp	r2, r3
 80179f6:	f000 80a2 	beq.w	8017b3e <ai_platform_inputs_get+0x1d2>
 80179fa:	2218      	movs	r2, #24
 80179fc:	4b63      	ldr	r3, [pc, #396]	; (8017b8c <ai_platform_inputs_get+0x220>)
 80179fe:	601a      	str	r2, [r3, #0]
 8017a00:	681a      	ldr	r2, [r3, #0]
 8017a02:	2a18      	cmp	r2, #24
 8017a04:	f000 80a9 	beq.w	8017b5a <ai_platform_inputs_get+0x1ee>
 8017a08:	4b61      	ldr	r3, [pc, #388]	; (8017b90 <ai_platform_inputs_get+0x224>)
 8017a0a:	2201      	movs	r2, #1
 8017a0c:	4619      	mov	r1, r3
 8017a0e:	601a      	str	r2, [r3, #0]
 8017a10:	680b      	ldr	r3, [r1, #0]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d1fc      	bne.n	8017a10 <ai_platform_inputs_get+0xa4>
 8017a16:	4b5f      	ldr	r3, [pc, #380]	; (8017b94 <ai_platform_inputs_get+0x228>)
 8017a18:	495f      	ldr	r1, [pc, #380]	; (8017b98 <ai_platform_inputs_get+0x22c>)
 8017a1a:	4a60      	ldr	r2, [pc, #384]	; (8017b9c <ai_platform_inputs_get+0x230>)
 8017a1c:	6019      	str	r1, [r3, #0]
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	4293      	cmp	r3, r2
 8017a22:	f000 80a7 	beq.w	8017b74 <ai_platform_inputs_get+0x208>
 8017a26:	e7fe      	b.n	8017a26 <ai_platform_inputs_get+0xba>
 8017a28:	2201      	movs	r2, #1
 8017a2a:	4619      	mov	r1, r3
 8017a2c:	601a      	str	r2, [r3, #0]
 8017a2e:	680b      	ldr	r3, [r1, #0]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d1fc      	bne.n	8017a2e <ai_platform_inputs_get+0xc2>
 8017a34:	4b54      	ldr	r3, [pc, #336]	; (8017b88 <ai_platform_inputs_get+0x21c>)
 8017a36:	4958      	ldr	r1, [pc, #352]	; (8017b98 <ai_platform_inputs_get+0x22c>)
 8017a38:	4a58      	ldr	r2, [pc, #352]	; (8017b9c <ai_platform_inputs_get+0x230>)
 8017a3a:	6019      	str	r1, [r3, #0]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	4293      	cmp	r3, r2
 8017a40:	f040 809d 	bne.w	8017b7e <ai_platform_inputs_get+0x212>
 8017a44:	f7ff fe2a 	bl	801769c <_ai_platform_release_crc>
 8017a48:	f1bb 0f00 	cmp.w	fp, #0
 8017a4c:	d002      	beq.n	8017a54 <ai_platform_inputs_get+0xe8>
 8017a4e:	2300      	movs	r3, #0
 8017a50:	f8ab 3000 	strh.w	r3, [fp]
 8017a54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d067      	beq.n	8017b2a <ai_platform_inputs_get+0x1be>
 8017a5a:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8017a5c:	2e00      	cmp	r6, #0
 8017a5e:	d064      	beq.n	8017b2a <ai_platform_inputs_get+0x1be>
 8017a60:	8833      	ldrh	r3, [r6, #0]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d061      	beq.n	8017b2a <ai_platform_inputs_get+0x1be>
 8017a66:	6873      	ldr	r3, [r6, #4]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d05e      	beq.n	8017b2a <ai_platform_inputs_get+0x1be>
 8017a6c:	681d      	ldr	r5, [r3, #0]
 8017a6e:	2d00      	cmp	r5, #0
 8017a70:	d05b      	beq.n	8017b2a <ai_platform_inputs_get+0x1be>
 8017a72:	f04f 0800 	mov.w	r8, #0
 8017a76:	f8cd b00c 	str.w	fp, [sp, #12]
 8017a7a:	46c1      	mov	r9, r8
 8017a7c:	46bb      	mov	fp, r7
 8017a7e:	68ab      	ldr	r3, [r5, #8]
 8017a80:	68b0      	ldr	r0, [r6, #8]
 8017a82:	69a9      	ldr	r1, [r5, #24]
 8017a84:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8017a88:	9301      	str	r3, [sp, #4]
 8017a8a:	68eb      	ldr	r3, [r5, #12]
 8017a8c:	6844      	ldr	r4, [r0, #4]
 8017a8e:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8017a92:	6808      	ldr	r0, [r1, #0]
 8017a94:	9302      	str	r3, [sp, #8]
 8017a96:	f001 fd69 	bl	801956c <ai_array_to_buffer_fmt>
 8017a9a:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8017a9e:	4602      	mov	r2, r0
 8017aa0:	69a8      	ldr	r0, [r5, #24]
 8017aa2:	eb0a 0307 	add.w	r3, sl, r7
 8017aa6:	4444      	add	r4, r8
 8017aa8:	6881      	ldr	r1, [r0, #8]
 8017aaa:	b16b      	cbz	r3, 8017ac8 <ai_platform_inputs_get+0x15c>
 8017aac:	2000      	movs	r0, #0
 8017aae:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8017ab2:	6828      	ldr	r0, [r5, #0]
 8017ab4:	6058      	str	r0, [r3, #4]
 8017ab6:	2800      	cmp	r0, #0
 8017ab8:	d034      	beq.n	8017b24 <ai_platform_inputs_get+0x1b8>
 8017aba:	8840      	ldrh	r0, [r0, #2]
 8017abc:	2800      	cmp	r0, #0
 8017abe:	d031      	beq.n	8017b24 <ai_platform_inputs_get+0x1b8>
 8017ac0:	2001      	movs	r0, #1
 8017ac2:	f84a 0007 	str.w	r0, [sl, r7]
 8017ac6:	69a8      	ldr	r0, [r5, #24]
 8017ac8:	f04f 0701 	mov.w	r7, #1
 8017acc:	6840      	ldr	r0, [r0, #4]
 8017ace:	60a3      	str	r3, [r4, #8]
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	7527      	strb	r7, [r4, #20]
 8017ad4:	6967      	ldr	r7, [r4, #20]
 8017ad6:	6120      	str	r0, [r4, #16]
 8017ad8:	9801      	ldr	r0, [sp, #4]
 8017ada:	60e3      	str	r3, [r4, #12]
 8017adc:	9b02      	ldr	r3, [sp, #8]
 8017ade:	f360 271f 	bfi	r7, r0, #8, #24
 8017ae2:	e9c4 7305 	strd	r7, r3, [r4, #20]
 8017ae6:	e9c4 2100 	strd	r2, r1, [r4]
 8017aea:	8831      	ldrh	r1, [r6, #0]
 8017aec:	f109 0501 	add.w	r5, r9, #1
 8017af0:	428d      	cmp	r5, r1
 8017af2:	46a9      	mov	r9, r5
 8017af4:	b2ab      	uxth	r3, r5
 8017af6:	d207      	bcs.n	8017b08 <ai_platform_inputs_get+0x19c>
 8017af8:	6871      	ldr	r1, [r6, #4]
 8017afa:	b129      	cbz	r1, 8017b08 <ai_platform_inputs_get+0x19c>
 8017afc:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8017b00:	f108 081c 	add.w	r8, r8, #28
 8017b04:	2d00      	cmp	r5, #0
 8017b06:	d1ba      	bne.n	8017a7e <ai_platform_inputs_get+0x112>
 8017b08:	465f      	mov	r7, fp
 8017b0a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8017b0e:	b163      	cbz	r3, 8017b2a <ai_platform_inputs_get+0x1be>
 8017b10:	68b2      	ldr	r2, [r6, #8]
 8017b12:	6850      	ldr	r0, [r2, #4]
 8017b14:	f1bb 0f00 	cmp.w	fp, #0
 8017b18:	d00e      	beq.n	8017b38 <ai_platform_inputs_get+0x1cc>
 8017b1a:	f8ab 3000 	strh.w	r3, [fp]
 8017b1e:	b005      	add	sp, #20
 8017b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b24:	69a8      	ldr	r0, [r5, #24]
 8017b26:	2300      	movs	r3, #0
 8017b28:	e7ce      	b.n	8017ac8 <ai_platform_inputs_get+0x15c>
 8017b2a:	f107 0010 	add.w	r0, r7, #16
 8017b2e:	2218      	movs	r2, #24
 8017b30:	2111      	movs	r1, #17
 8017b32:	f000 fedd 	bl	80188f0 <core_set_error>
 8017b36:	2000      	movs	r0, #0
 8017b38:	b005      	add	sp, #20
 8017b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b3e:	2301      	movs	r3, #1
 8017b40:	f100 0208 	add.w	r2, r0, #8
 8017b44:	6083      	str	r3, [r0, #8]
 8017b46:	6813      	ldr	r3, [r2, #0]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d1fc      	bne.n	8017b46 <ai_platform_inputs_get+0x1da>
 8017b4c:	4a12      	ldr	r2, [pc, #72]	; (8017b98 <ai_platform_inputs_get+0x22c>)
 8017b4e:	4b13      	ldr	r3, [pc, #76]	; (8017b9c <ai_platform_inputs_get+0x230>)
 8017b50:	6002      	str	r2, [r0, #0]
 8017b52:	6802      	ldr	r2, [r0, #0]
 8017b54:	429a      	cmp	r2, r3
 8017b56:	d00d      	beq.n	8017b74 <ai_platform_inputs_get+0x208>
 8017b58:	e7fe      	b.n	8017b58 <ai_platform_inputs_get+0x1ec>
 8017b5a:	2201      	movs	r2, #1
 8017b5c:	4619      	mov	r1, r3
 8017b5e:	601a      	str	r2, [r3, #0]
 8017b60:	680b      	ldr	r3, [r1, #0]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d1fc      	bne.n	8017b60 <ai_platform_inputs_get+0x1f4>
 8017b66:	4b08      	ldr	r3, [pc, #32]	; (8017b88 <ai_platform_inputs_get+0x21c>)
 8017b68:	490b      	ldr	r1, [pc, #44]	; (8017b98 <ai_platform_inputs_get+0x22c>)
 8017b6a:	4a0c      	ldr	r2, [pc, #48]	; (8017b9c <ai_platform_inputs_get+0x230>)
 8017b6c:	6019      	str	r1, [r3, #0]
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	4293      	cmp	r3, r2
 8017b72:	d103      	bne.n	8017b7c <ai_platform_inputs_get+0x210>
 8017b74:	f7ff fd92 	bl	801769c <_ai_platform_release_crc>
 8017b78:	2000      	movs	r0, #0
 8017b7a:	e7dd      	b.n	8017b38 <ai_platform_inputs_get+0x1cc>
 8017b7c:	e7fe      	b.n	8017b7c <ai_platform_inputs_get+0x210>
 8017b7e:	e7fe      	b.n	8017b7e <ai_platform_inputs_get+0x212>
 8017b80:	a1c00100 	.word	0xa1c00100
 8017b84:	e0002000 	.word	0xe0002000
 8017b88:	40023000 	.word	0x40023000
 8017b8c:	40023008 	.word	0x40023008
 8017b90:	50023008 	.word	0x50023008
 8017b94:	50023000 	.word	0x50023000
 8017b98:	f407a5c2 	.word	0xf407a5c2
 8017b9c:	b5e8b5cd 	.word	0xb5e8b5cd

08017ba0 <ai_platform_outputs_get>:
 8017ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ba4:	b085      	sub	sp, #20
 8017ba6:	2800      	cmp	r0, #0
 8017ba8:	d034      	beq.n	8017c14 <ai_platform_outputs_get+0x74>
 8017baa:	4b84      	ldr	r3, [pc, #528]	; (8017dbc <ai_platform_outputs_get+0x21c>)
 8017bac:	6802      	ldr	r2, [r0, #0]
 8017bae:	4607      	mov	r7, r0
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	d12f      	bne.n	8017c14 <ai_platform_outputs_get+0x74>
 8017bb4:	4a82      	ldr	r2, [pc, #520]	; (8017dc0 <ai_platform_outputs_get+0x220>)
 8017bb6:	468b      	mov	fp, r1
 8017bb8:	6813      	ldr	r3, [r2, #0]
 8017bba:	f023 0301 	bic.w	r3, r3, #1
 8017bbe:	6013      	str	r3, [r2, #0]
 8017bc0:	f7ff fd6a 	bl	8017698 <_ai_platform_acquire_crc>
 8017bc4:	4b7f      	ldr	r3, [pc, #508]	; (8017dc4 <ai_platform_outputs_get+0x224>)
 8017bc6:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	d014      	beq.n	8017bf8 <ai_platform_outputs_get+0x58>
 8017bce:	2218      	movs	r2, #24
 8017bd0:	4b7d      	ldr	r3, [pc, #500]	; (8017dc8 <ai_platform_outputs_get+0x228>)
 8017bd2:	601a      	str	r2, [r3, #0]
 8017bd4:	681a      	ldr	r2, [r3, #0]
 8017bd6:	2a18      	cmp	r2, #24
 8017bd8:	d040      	beq.n	8017c5c <ai_platform_outputs_get+0xbc>
 8017bda:	4b7c      	ldr	r3, [pc, #496]	; (8017dcc <ai_platform_outputs_get+0x22c>)
 8017bdc:	2201      	movs	r2, #1
 8017bde:	4619      	mov	r1, r3
 8017be0:	601a      	str	r2, [r3, #0]
 8017be2:	680b      	ldr	r3, [r1, #0]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d1fc      	bne.n	8017be2 <ai_platform_outputs_get+0x42>
 8017be8:	4b79      	ldr	r3, [pc, #484]	; (8017dd0 <ai_platform_outputs_get+0x230>)
 8017bea:	497a      	ldr	r1, [pc, #488]	; (8017dd4 <ai_platform_outputs_get+0x234>)
 8017bec:	4a7a      	ldr	r2, [pc, #488]	; (8017dd8 <ai_platform_outputs_get+0x238>)
 8017bee:	6019      	str	r1, [r3, #0]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	4293      	cmp	r3, r2
 8017bf4:	d040      	beq.n	8017c78 <ai_platform_outputs_get+0xd8>
 8017bf6:	e7fe      	b.n	8017bf6 <ai_platform_outputs_get+0x56>
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	f100 0208 	add.w	r2, r0, #8
 8017bfe:	6083      	str	r3, [r0, #8]
 8017c00:	6813      	ldr	r3, [r2, #0]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d1fc      	bne.n	8017c00 <ai_platform_outputs_get+0x60>
 8017c06:	4a73      	ldr	r2, [pc, #460]	; (8017dd4 <ai_platform_outputs_get+0x234>)
 8017c08:	4b73      	ldr	r3, [pc, #460]	; (8017dd8 <ai_platform_outputs_get+0x238>)
 8017c0a:	6002      	str	r2, [r0, #0]
 8017c0c:	6802      	ldr	r2, [r0, #0]
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d032      	beq.n	8017c78 <ai_platform_outputs_get+0xd8>
 8017c12:	e7fe      	b.n	8017c12 <ai_platform_outputs_get+0x72>
 8017c14:	4a6a      	ldr	r2, [pc, #424]	; (8017dc0 <ai_platform_outputs_get+0x220>)
 8017c16:	6813      	ldr	r3, [r2, #0]
 8017c18:	f023 0301 	bic.w	r3, r3, #1
 8017c1c:	6013      	str	r3, [r2, #0]
 8017c1e:	f7ff fd3b 	bl	8017698 <_ai_platform_acquire_crc>
 8017c22:	4b68      	ldr	r3, [pc, #416]	; (8017dc4 <ai_platform_outputs_get+0x224>)
 8017c24:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017c28:	429a      	cmp	r2, r3
 8017c2a:	f000 809d 	beq.w	8017d68 <ai_platform_outputs_get+0x1c8>
 8017c2e:	2218      	movs	r2, #24
 8017c30:	4b65      	ldr	r3, [pc, #404]	; (8017dc8 <ai_platform_outputs_get+0x228>)
 8017c32:	601a      	str	r2, [r3, #0]
 8017c34:	681a      	ldr	r2, [r3, #0]
 8017c36:	2a18      	cmp	r2, #24
 8017c38:	f000 80a4 	beq.w	8017d84 <ai_platform_outputs_get+0x1e4>
 8017c3c:	4b63      	ldr	r3, [pc, #396]	; (8017dcc <ai_platform_outputs_get+0x22c>)
 8017c3e:	2201      	movs	r2, #1
 8017c40:	4619      	mov	r1, r3
 8017c42:	601a      	str	r2, [r3, #0]
 8017c44:	680b      	ldr	r3, [r1, #0]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d1fc      	bne.n	8017c44 <ai_platform_outputs_get+0xa4>
 8017c4a:	4b61      	ldr	r3, [pc, #388]	; (8017dd0 <ai_platform_outputs_get+0x230>)
 8017c4c:	4961      	ldr	r1, [pc, #388]	; (8017dd4 <ai_platform_outputs_get+0x234>)
 8017c4e:	4a62      	ldr	r2, [pc, #392]	; (8017dd8 <ai_platform_outputs_get+0x238>)
 8017c50:	6019      	str	r1, [r3, #0]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4293      	cmp	r3, r2
 8017c56:	f000 80a2 	beq.w	8017d9e <ai_platform_outputs_get+0x1fe>
 8017c5a:	e7fe      	b.n	8017c5a <ai_platform_outputs_get+0xba>
 8017c5c:	2201      	movs	r2, #1
 8017c5e:	4619      	mov	r1, r3
 8017c60:	601a      	str	r2, [r3, #0]
 8017c62:	680b      	ldr	r3, [r1, #0]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d1fc      	bne.n	8017c62 <ai_platform_outputs_get+0xc2>
 8017c68:	4b56      	ldr	r3, [pc, #344]	; (8017dc4 <ai_platform_outputs_get+0x224>)
 8017c6a:	495a      	ldr	r1, [pc, #360]	; (8017dd4 <ai_platform_outputs_get+0x234>)
 8017c6c:	4a5a      	ldr	r2, [pc, #360]	; (8017dd8 <ai_platform_outputs_get+0x238>)
 8017c6e:	6019      	str	r1, [r3, #0]
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	4293      	cmp	r3, r2
 8017c74:	f040 80a0 	bne.w	8017db8 <ai_platform_outputs_get+0x218>
 8017c78:	f7ff fd10 	bl	801769c <_ai_platform_release_crc>
 8017c7c:	f1bb 0f00 	cmp.w	fp, #0
 8017c80:	d002      	beq.n	8017c88 <ai_platform_outputs_get+0xe8>
 8017c82:	2300      	movs	r3, #0
 8017c84:	f8ab 3000 	strh.w	r3, [fp]
 8017c88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017c8a:	2b01      	cmp	r3, #1
 8017c8c:	f240 808b 	bls.w	8017da6 <ai_platform_outputs_get+0x206>
 8017c90:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8017c92:	f116 0f0c 	cmn.w	r6, #12
 8017c96:	f000 8086 	beq.w	8017da6 <ai_platform_outputs_get+0x206>
 8017c9a:	89b3      	ldrh	r3, [r6, #12]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	f000 8082 	beq.w	8017da6 <ai_platform_outputs_get+0x206>
 8017ca2:	6933      	ldr	r3, [r6, #16]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d07e      	beq.n	8017da6 <ai_platform_outputs_get+0x206>
 8017ca8:	681d      	ldr	r5, [r3, #0]
 8017caa:	2d00      	cmp	r5, #0
 8017cac:	d07b      	beq.n	8017da6 <ai_platform_outputs_get+0x206>
 8017cae:	f04f 0800 	mov.w	r8, #0
 8017cb2:	f8cd b00c 	str.w	fp, [sp, #12]
 8017cb6:	46c1      	mov	r9, r8
 8017cb8:	46bb      	mov	fp, r7
 8017cba:	68ab      	ldr	r3, [r5, #8]
 8017cbc:	6970      	ldr	r0, [r6, #20]
 8017cbe:	69a9      	ldr	r1, [r5, #24]
 8017cc0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8017cc4:	9301      	str	r3, [sp, #4]
 8017cc6:	68eb      	ldr	r3, [r5, #12]
 8017cc8:	6844      	ldr	r4, [r0, #4]
 8017cca:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8017cce:	6808      	ldr	r0, [r1, #0]
 8017cd0:	9302      	str	r3, [sp, #8]
 8017cd2:	f001 fc4b 	bl	801956c <ai_array_to_buffer_fmt>
 8017cd6:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8017cda:	4602      	mov	r2, r0
 8017cdc:	69a8      	ldr	r0, [r5, #24]
 8017cde:	eb0a 0307 	add.w	r3, sl, r7
 8017ce2:	4444      	add	r4, r8
 8017ce4:	6881      	ldr	r1, [r0, #8]
 8017ce6:	b16b      	cbz	r3, 8017d04 <ai_platform_outputs_get+0x164>
 8017ce8:	2000      	movs	r0, #0
 8017cea:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8017cee:	6828      	ldr	r0, [r5, #0]
 8017cf0:	6058      	str	r0, [r3, #4]
 8017cf2:	2800      	cmp	r0, #0
 8017cf4:	d035      	beq.n	8017d62 <ai_platform_outputs_get+0x1c2>
 8017cf6:	8840      	ldrh	r0, [r0, #2]
 8017cf8:	2800      	cmp	r0, #0
 8017cfa:	d032      	beq.n	8017d62 <ai_platform_outputs_get+0x1c2>
 8017cfc:	2001      	movs	r0, #1
 8017cfe:	f84a 0007 	str.w	r0, [sl, r7]
 8017d02:	69a8      	ldr	r0, [r5, #24]
 8017d04:	f04f 0701 	mov.w	r7, #1
 8017d08:	6840      	ldr	r0, [r0, #4]
 8017d0a:	60a3      	str	r3, [r4, #8]
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	7527      	strb	r7, [r4, #20]
 8017d10:	6967      	ldr	r7, [r4, #20]
 8017d12:	6120      	str	r0, [r4, #16]
 8017d14:	9801      	ldr	r0, [sp, #4]
 8017d16:	60e3      	str	r3, [r4, #12]
 8017d18:	9b02      	ldr	r3, [sp, #8]
 8017d1a:	f360 271f 	bfi	r7, r0, #8, #24
 8017d1e:	e9c4 7305 	strd	r7, r3, [r4, #20]
 8017d22:	e9c4 2100 	strd	r2, r1, [r4]
 8017d26:	89b1      	ldrh	r1, [r6, #12]
 8017d28:	f109 0501 	add.w	r5, r9, #1
 8017d2c:	428d      	cmp	r5, r1
 8017d2e:	46a9      	mov	r9, r5
 8017d30:	b2ab      	uxth	r3, r5
 8017d32:	d207      	bcs.n	8017d44 <ai_platform_outputs_get+0x1a4>
 8017d34:	6931      	ldr	r1, [r6, #16]
 8017d36:	b129      	cbz	r1, 8017d44 <ai_platform_outputs_get+0x1a4>
 8017d38:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8017d3c:	f108 081c 	add.w	r8, r8, #28
 8017d40:	2d00      	cmp	r5, #0
 8017d42:	d1ba      	bne.n	8017cba <ai_platform_outputs_get+0x11a>
 8017d44:	465f      	mov	r7, fp
 8017d46:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d02b      	beq.n	8017da6 <ai_platform_outputs_get+0x206>
 8017d4e:	6972      	ldr	r2, [r6, #20]
 8017d50:	6850      	ldr	r0, [r2, #4]
 8017d52:	f1bb 0f00 	cmp.w	fp, #0
 8017d56:	d001      	beq.n	8017d5c <ai_platform_outputs_get+0x1bc>
 8017d58:	f8ab 3000 	strh.w	r3, [fp]
 8017d5c:	b005      	add	sp, #20
 8017d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d62:	69a8      	ldr	r0, [r5, #24]
 8017d64:	2300      	movs	r3, #0
 8017d66:	e7cd      	b.n	8017d04 <ai_platform_outputs_get+0x164>
 8017d68:	2301      	movs	r3, #1
 8017d6a:	f100 0208 	add.w	r2, r0, #8
 8017d6e:	6083      	str	r3, [r0, #8]
 8017d70:	6813      	ldr	r3, [r2, #0]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d1fc      	bne.n	8017d70 <ai_platform_outputs_get+0x1d0>
 8017d76:	4a17      	ldr	r2, [pc, #92]	; (8017dd4 <ai_platform_outputs_get+0x234>)
 8017d78:	4b17      	ldr	r3, [pc, #92]	; (8017dd8 <ai_platform_outputs_get+0x238>)
 8017d7a:	6002      	str	r2, [r0, #0]
 8017d7c:	6802      	ldr	r2, [r0, #0]
 8017d7e:	429a      	cmp	r2, r3
 8017d80:	d00d      	beq.n	8017d9e <ai_platform_outputs_get+0x1fe>
 8017d82:	e7fe      	b.n	8017d82 <ai_platform_outputs_get+0x1e2>
 8017d84:	2201      	movs	r2, #1
 8017d86:	4619      	mov	r1, r3
 8017d88:	601a      	str	r2, [r3, #0]
 8017d8a:	680b      	ldr	r3, [r1, #0]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d1fc      	bne.n	8017d8a <ai_platform_outputs_get+0x1ea>
 8017d90:	4b0c      	ldr	r3, [pc, #48]	; (8017dc4 <ai_platform_outputs_get+0x224>)
 8017d92:	4910      	ldr	r1, [pc, #64]	; (8017dd4 <ai_platform_outputs_get+0x234>)
 8017d94:	4a10      	ldr	r2, [pc, #64]	; (8017dd8 <ai_platform_outputs_get+0x238>)
 8017d96:	6019      	str	r1, [r3, #0]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	4293      	cmp	r3, r2
 8017d9c:	d10b      	bne.n	8017db6 <ai_platform_outputs_get+0x216>
 8017d9e:	f7ff fc7d 	bl	801769c <_ai_platform_release_crc>
 8017da2:	2000      	movs	r0, #0
 8017da4:	e7da      	b.n	8017d5c <ai_platform_outputs_get+0x1bc>
 8017da6:	f107 0010 	add.w	r0, r7, #16
 8017daa:	2218      	movs	r2, #24
 8017dac:	2111      	movs	r1, #17
 8017dae:	f000 fd9f 	bl	80188f0 <core_set_error>
 8017db2:	2000      	movs	r0, #0
 8017db4:	e7d2      	b.n	8017d5c <ai_platform_outputs_get+0x1bc>
 8017db6:	e7fe      	b.n	8017db6 <ai_platform_outputs_get+0x216>
 8017db8:	e7fe      	b.n	8017db8 <ai_platform_outputs_get+0x218>
 8017dba:	bf00      	nop
 8017dbc:	a1c00100 	.word	0xa1c00100
 8017dc0:	e0002000 	.word	0xe0002000
 8017dc4:	40023000 	.word	0x40023000
 8017dc8:	40023008 	.word	0x40023008
 8017dcc:	50023008 	.word	0x50023008
 8017dd0:	50023000 	.word	0x50023000
 8017dd4:	f407a5c2 	.word	0xf407a5c2
 8017dd8:	b5e8b5cd 	.word	0xb5e8b5cd

08017ddc <ai_platform_network_create>:
 8017ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017de0:	b082      	sub	sp, #8
 8017de2:	4605      	mov	r5, r0
 8017de4:	4614      	mov	r4, r2
 8017de6:	461e      	mov	r6, r3
 8017de8:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8017dec:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8017df0:	f7ff fc52 	bl	8017698 <_ai_platform_acquire_crc>
 8017df4:	2800      	cmp	r0, #0
 8017df6:	d043      	beq.n	8017e80 <ai_platform_network_create+0xa4>
 8017df8:	4b70      	ldr	r3, [pc, #448]	; (8017fbc <ai_platform_network_create+0x1e0>)
 8017dfa:	4298      	cmp	r0, r3
 8017dfc:	d00a      	beq.n	8017e14 <ai_platform_network_create+0x38>
 8017dfe:	4b70      	ldr	r3, [pc, #448]	; (8017fc0 <ai_platform_network_create+0x1e4>)
 8017e00:	4298      	cmp	r0, r3
 8017e02:	d035      	beq.n	8017e70 <ai_platform_network_create+0x94>
 8017e04:	2218      	movs	r2, #24
 8017e06:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8017e0a:	3308      	adds	r3, #8
 8017e0c:	601a      	str	r2, [r3, #0]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	4293      	cmp	r3, r2
 8017e12:	d12d      	bne.n	8017e70 <ai_platform_network_create+0x94>
 8017e14:	2218      	movs	r2, #24
 8017e16:	4b6b      	ldr	r3, [pc, #428]	; (8017fc4 <ai_platform_network_create+0x1e8>)
 8017e18:	601a      	str	r2, [r3, #0]
 8017e1a:	681a      	ldr	r2, [r3, #0]
 8017e1c:	2a18      	cmp	r2, #24
 8017e1e:	d12d      	bne.n	8017e7c <ai_platform_network_create+0xa0>
 8017e20:	2201      	movs	r2, #1
 8017e22:	601a      	str	r2, [r3, #0]
 8017e24:	681a      	ldr	r2, [r3, #0]
 8017e26:	2a00      	cmp	r2, #0
 8017e28:	d1fc      	bne.n	8017e24 <ai_platform_network_create+0x48>
 8017e2a:	f7ff fc37 	bl	801769c <_ai_platform_release_crc>
 8017e2e:	4a66      	ldr	r2, [pc, #408]	; (8017fc8 <ai_platform_network_create+0x1ec>)
 8017e30:	6813      	ldr	r3, [r2, #0]
 8017e32:	f023 0301 	bic.w	r3, r3, #1
 8017e36:	6013      	str	r3, [r2, #0]
 8017e38:	f7ff fc2e 	bl	8017698 <_ai_platform_acquire_crc>
 8017e3c:	4b5f      	ldr	r3, [pc, #380]	; (8017fbc <ai_platform_network_create+0x1e0>)
 8017e3e:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017e42:	429a      	cmp	r2, r3
 8017e44:	d022      	beq.n	8017e8c <ai_platform_network_create+0xb0>
 8017e46:	2218      	movs	r2, #24
 8017e48:	4b5e      	ldr	r3, [pc, #376]	; (8017fc4 <ai_platform_network_create+0x1e8>)
 8017e4a:	601a      	str	r2, [r3, #0]
 8017e4c:	681a      	ldr	r2, [r3, #0]
 8017e4e:	2a18      	cmp	r2, #24
 8017e50:	d02a      	beq.n	8017ea8 <ai_platform_network_create+0xcc>
 8017e52:	4b5e      	ldr	r3, [pc, #376]	; (8017fcc <ai_platform_network_create+0x1f0>)
 8017e54:	2201      	movs	r2, #1
 8017e56:	4619      	mov	r1, r3
 8017e58:	601a      	str	r2, [r3, #0]
 8017e5a:	680b      	ldr	r3, [r1, #0]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d1fc      	bne.n	8017e5a <ai_platform_network_create+0x7e>
 8017e60:	4b57      	ldr	r3, [pc, #348]	; (8017fc0 <ai_platform_network_create+0x1e4>)
 8017e62:	495b      	ldr	r1, [pc, #364]	; (8017fd0 <ai_platform_network_create+0x1f4>)
 8017e64:	4a5b      	ldr	r2, [pc, #364]	; (8017fd4 <ai_platform_network_create+0x1f8>)
 8017e66:	6019      	str	r1, [r3, #0]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	4293      	cmp	r3, r2
 8017e6c:	d029      	beq.n	8017ec2 <ai_platform_network_create+0xe6>
 8017e6e:	e7fe      	b.n	8017e6e <ai_platform_network_create+0x92>
 8017e70:	2218      	movs	r2, #24
 8017e72:	4b56      	ldr	r3, [pc, #344]	; (8017fcc <ai_platform_network_create+0x1f0>)
 8017e74:	601a      	str	r2, [r3, #0]
 8017e76:	681a      	ldr	r2, [r3, #0]
 8017e78:	2a18      	cmp	r2, #24
 8017e7a:	d0d1      	beq.n	8017e20 <ai_platform_network_create+0x44>
 8017e7c:	f7ff fc0e 	bl	801769c <_ai_platform_release_crc>
 8017e80:	f244 1333 	movw	r3, #16691	; 0x4133
 8017e84:	4618      	mov	r0, r3
 8017e86:	b002      	add	sp, #8
 8017e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e8c:	2301      	movs	r3, #1
 8017e8e:	6083      	str	r3, [r0, #8]
 8017e90:	f100 0308 	add.w	r3, r0, #8
 8017e94:	681a      	ldr	r2, [r3, #0]
 8017e96:	2a00      	cmp	r2, #0
 8017e98:	d1fc      	bne.n	8017e94 <ai_platform_network_create+0xb8>
 8017e9a:	4a4d      	ldr	r2, [pc, #308]	; (8017fd0 <ai_platform_network_create+0x1f4>)
 8017e9c:	4b4d      	ldr	r3, [pc, #308]	; (8017fd4 <ai_platform_network_create+0x1f8>)
 8017e9e:	6002      	str	r2, [r0, #0]
 8017ea0:	6802      	ldr	r2, [r0, #0]
 8017ea2:	429a      	cmp	r2, r3
 8017ea4:	d00d      	beq.n	8017ec2 <ai_platform_network_create+0xe6>
 8017ea6:	e7fe      	b.n	8017ea6 <ai_platform_network_create+0xca>
 8017ea8:	2201      	movs	r2, #1
 8017eaa:	4619      	mov	r1, r3
 8017eac:	601a      	str	r2, [r3, #0]
 8017eae:	680b      	ldr	r3, [r1, #0]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d1fc      	bne.n	8017eae <ai_platform_network_create+0xd2>
 8017eb4:	4b41      	ldr	r3, [pc, #260]	; (8017fbc <ai_platform_network_create+0x1e0>)
 8017eb6:	4946      	ldr	r1, [pc, #280]	; (8017fd0 <ai_platform_network_create+0x1f4>)
 8017eb8:	4a46      	ldr	r2, [pc, #280]	; (8017fd4 <ai_platform_network_create+0x1f8>)
 8017eba:	6019      	str	r1, [r3, #0]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	4293      	cmp	r3, r2
 8017ec0:	d12d      	bne.n	8017f1e <ai_platform_network_create+0x142>
 8017ec2:	f7ff fbeb 	bl	801769c <_ai_platform_release_crc>
 8017ec6:	2d00      	cmp	r5, #0
 8017ec8:	d075      	beq.n	8017fb6 <ai_platform_network_create+0x1da>
 8017eca:	4b43      	ldr	r3, [pc, #268]	; (8017fd8 <ai_platform_network_create+0x1fc>)
 8017ecc:	6023      	str	r3, [r4, #0]
 8017ece:	602c      	str	r4, [r5, #0]
 8017ed0:	f000 fd06 	bl	80188e0 <core_init>
 8017ed4:	b910      	cbnz	r0, 8017edc <ai_platform_network_create+0x100>
 8017ed6:	f04f 0930 	mov.w	r9, #48	; 0x30
 8017eda:	e03f      	b.n	8017f5c <ai_platform_network_create+0x180>
 8017edc:	4a3a      	ldr	r2, [pc, #232]	; (8017fc8 <ai_platform_network_create+0x1ec>)
 8017ede:	6813      	ldr	r3, [r2, #0]
 8017ee0:	f023 0301 	bic.w	r3, r3, #1
 8017ee4:	6013      	str	r3, [r2, #0]
 8017ee6:	f7ff fbd7 	bl	8017698 <_ai_platform_acquire_crc>
 8017eea:	4b34      	ldr	r3, [pc, #208]	; (8017fbc <ai_platform_network_create+0x1e0>)
 8017eec:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017ef0:	429a      	cmp	r2, r3
 8017ef2:	d015      	beq.n	8017f20 <ai_platform_network_create+0x144>
 8017ef4:	2218      	movs	r2, #24
 8017ef6:	4b33      	ldr	r3, [pc, #204]	; (8017fc4 <ai_platform_network_create+0x1e8>)
 8017ef8:	601a      	str	r2, [r3, #0]
 8017efa:	681a      	ldr	r2, [r3, #0]
 8017efc:	2a18      	cmp	r2, #24
 8017efe:	d03d      	beq.n	8017f7c <ai_platform_network_create+0x1a0>
 8017f00:	4b32      	ldr	r3, [pc, #200]	; (8017fcc <ai_platform_network_create+0x1f0>)
 8017f02:	2201      	movs	r2, #1
 8017f04:	4619      	mov	r1, r3
 8017f06:	601a      	str	r2, [r3, #0]
 8017f08:	680b      	ldr	r3, [r1, #0]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d1fc      	bne.n	8017f08 <ai_platform_network_create+0x12c>
 8017f0e:	4b2c      	ldr	r3, [pc, #176]	; (8017fc0 <ai_platform_network_create+0x1e4>)
 8017f10:	492f      	ldr	r1, [pc, #188]	; (8017fd0 <ai_platform_network_create+0x1f4>)
 8017f12:	4a30      	ldr	r2, [pc, #192]	; (8017fd4 <ai_platform_network_create+0x1f8>)
 8017f14:	6019      	str	r1, [r3, #0]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	4293      	cmp	r3, r2
 8017f1a:	d00e      	beq.n	8017f3a <ai_platform_network_create+0x15e>
 8017f1c:	e7fe      	b.n	8017f1c <ai_platform_network_create+0x140>
 8017f1e:	e7fe      	b.n	8017f1e <ai_platform_network_create+0x142>
 8017f20:	2301      	movs	r3, #1
 8017f22:	6083      	str	r3, [r0, #8]
 8017f24:	f100 0308 	add.w	r3, r0, #8
 8017f28:	681a      	ldr	r2, [r3, #0]
 8017f2a:	2a00      	cmp	r2, #0
 8017f2c:	d1fc      	bne.n	8017f28 <ai_platform_network_create+0x14c>
 8017f2e:	4a28      	ldr	r2, [pc, #160]	; (8017fd0 <ai_platform_network_create+0x1f4>)
 8017f30:	4b28      	ldr	r3, [pc, #160]	; (8017fd4 <ai_platform_network_create+0x1f8>)
 8017f32:	6002      	str	r2, [r0, #0]
 8017f34:	6802      	ldr	r2, [r0, #0]
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d139      	bne.n	8017fae <ai_platform_network_create+0x1d2>
 8017f3a:	f7ff fbaf 	bl	801769c <_ai_platform_release_crc>
 8017f3e:	2200      	movs	r2, #0
 8017f40:	4639      	mov	r1, r7
 8017f42:	4630      	mov	r0, r6
 8017f44:	f001 faf8 	bl	8019538 <ai_version_get>
 8017f48:	2200      	movs	r2, #0
 8017f4a:	4681      	mov	r9, r0
 8017f4c:	2105      	movs	r1, #5
 8017f4e:	2001      	movs	r0, #1
 8017f50:	f001 faf2 	bl	8019538 <ai_version_get>
 8017f54:	4581      	cmp	r9, r0
 8017f56:	d01f      	beq.n	8017f98 <ai_platform_network_create+0x1bc>
 8017f58:	f04f 0901 	mov.w	r9, #1
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	f04f 0a10 	mov.w	sl, #16
 8017f62:	602b      	str	r3, [r5, #0]
 8017f64:	4642      	mov	r2, r8
 8017f66:	4639      	mov	r1, r7
 8017f68:	4630      	mov	r0, r6
 8017f6a:	f001 fae5 	bl	8019538 <ai_version_get>
 8017f6e:	2300      	movs	r3, #0
 8017f70:	f369 0307 	bfi	r3, r9, #0, #8
 8017f74:	6460      	str	r0, [r4, #68]	; 0x44
 8017f76:	f36a 231f 	bfi	r3, sl, #8, #24
 8017f7a:	e783      	b.n	8017e84 <ai_platform_network_create+0xa8>
 8017f7c:	2201      	movs	r2, #1
 8017f7e:	4619      	mov	r1, r3
 8017f80:	601a      	str	r2, [r3, #0]
 8017f82:	680b      	ldr	r3, [r1, #0]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d1fc      	bne.n	8017f82 <ai_platform_network_create+0x1a6>
 8017f88:	4b0c      	ldr	r3, [pc, #48]	; (8017fbc <ai_platform_network_create+0x1e0>)
 8017f8a:	4911      	ldr	r1, [pc, #68]	; (8017fd0 <ai_platform_network_create+0x1f4>)
 8017f8c:	4a11      	ldr	r2, [pc, #68]	; (8017fd4 <ai_platform_network_create+0x1f8>)
 8017f8e:	6019      	str	r1, [r3, #0]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	4293      	cmp	r3, r2
 8017f94:	d0d1      	beq.n	8017f3a <ai_platform_network_create+0x15e>
 8017f96:	e7fe      	b.n	8017f96 <ai_platform_network_create+0x1ba>
 8017f98:	4b10      	ldr	r3, [pc, #64]	; (8017fdc <ai_platform_network_create+0x200>)
 8017f9a:	a802      	add	r0, sp, #8
 8017f9c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8017fa0:	f001 fa36 	bl	8019410 <ai_check_custom_types>
 8017fa4:	b120      	cbz	r0, 8017fb0 <ai_platform_network_create+0x1d4>
 8017fa6:	f04f 0a00 	mov.w	sl, #0
 8017faa:	46d1      	mov	r9, sl
 8017fac:	e7da      	b.n	8017f64 <ai_platform_network_create+0x188>
 8017fae:	e7fe      	b.n	8017fae <ai_platform_network_create+0x1d2>
 8017fb0:	f04f 0902 	mov.w	r9, #2
 8017fb4:	e7d2      	b.n	8017f5c <ai_platform_network_create+0x180>
 8017fb6:	f241 0310 	movw	r3, #4112	; 0x1010
 8017fba:	e763      	b.n	8017e84 <ai_platform_network_create+0xa8>
 8017fbc:	40023000 	.word	0x40023000
 8017fc0:	50023000 	.word	0x50023000
 8017fc4:	40023008 	.word	0x40023008
 8017fc8:	e0002000 	.word	0xe0002000
 8017fcc:	50023008 	.word	0x50023008
 8017fd0:	f407a5c2 	.word	0xf407a5c2
 8017fd4:	b5e8b5cd 	.word	0xb5e8b5cd
 8017fd8:	a1c00100 	.word	0xa1c00100
 8017fdc:	84048403 	.word	0x84048403

08017fe0 <ai_platform_network_init>:
 8017fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017fe4:	2800      	cmp	r0, #0
 8017fe6:	d034      	beq.n	8018052 <ai_platform_network_init+0x72>
 8017fe8:	4b8f      	ldr	r3, [pc, #572]	; (8018228 <ai_platform_network_init+0x248>)
 8017fea:	6802      	ldr	r2, [r0, #0]
 8017fec:	4604      	mov	r4, r0
 8017fee:	429a      	cmp	r2, r3
 8017ff0:	d12f      	bne.n	8018052 <ai_platform_network_init+0x72>
 8017ff2:	4a8e      	ldr	r2, [pc, #568]	; (801822c <ai_platform_network_init+0x24c>)
 8017ff4:	460e      	mov	r6, r1
 8017ff6:	6813      	ldr	r3, [r2, #0]
 8017ff8:	f023 0301 	bic.w	r3, r3, #1
 8017ffc:	6013      	str	r3, [r2, #0]
 8017ffe:	f7ff fb4b 	bl	8017698 <_ai_platform_acquire_crc>
 8018002:	4b8b      	ldr	r3, [pc, #556]	; (8018230 <ai_platform_network_init+0x250>)
 8018004:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8018008:	429a      	cmp	r2, r3
 801800a:	d014      	beq.n	8018036 <ai_platform_network_init+0x56>
 801800c:	2218      	movs	r2, #24
 801800e:	4b89      	ldr	r3, [pc, #548]	; (8018234 <ai_platform_network_init+0x254>)
 8018010:	601a      	str	r2, [r3, #0]
 8018012:	681a      	ldr	r2, [r3, #0]
 8018014:	2a18      	cmp	r2, #24
 8018016:	d03f      	beq.n	8018098 <ai_platform_network_init+0xb8>
 8018018:	4b87      	ldr	r3, [pc, #540]	; (8018238 <ai_platform_network_init+0x258>)
 801801a:	2201      	movs	r2, #1
 801801c:	4619      	mov	r1, r3
 801801e:	601a      	str	r2, [r3, #0]
 8018020:	680b      	ldr	r3, [r1, #0]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d1fc      	bne.n	8018020 <ai_platform_network_init+0x40>
 8018026:	4b85      	ldr	r3, [pc, #532]	; (801823c <ai_platform_network_init+0x25c>)
 8018028:	4985      	ldr	r1, [pc, #532]	; (8018240 <ai_platform_network_init+0x260>)
 801802a:	4a86      	ldr	r2, [pc, #536]	; (8018244 <ai_platform_network_init+0x264>)
 801802c:	6019      	str	r1, [r3, #0]
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	4293      	cmp	r3, r2
 8018032:	d03f      	beq.n	80180b4 <ai_platform_network_init+0xd4>
 8018034:	e7fe      	b.n	8018034 <ai_platform_network_init+0x54>
 8018036:	2301      	movs	r3, #1
 8018038:	f100 0208 	add.w	r2, r0, #8
 801803c:	6083      	str	r3, [r0, #8]
 801803e:	6813      	ldr	r3, [r2, #0]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d1fc      	bne.n	801803e <ai_platform_network_init+0x5e>
 8018044:	4a7e      	ldr	r2, [pc, #504]	; (8018240 <ai_platform_network_init+0x260>)
 8018046:	4b7f      	ldr	r3, [pc, #508]	; (8018244 <ai_platform_network_init+0x264>)
 8018048:	6002      	str	r2, [r0, #0]
 801804a:	6802      	ldr	r2, [r0, #0]
 801804c:	429a      	cmp	r2, r3
 801804e:	d031      	beq.n	80180b4 <ai_platform_network_init+0xd4>
 8018050:	e7fe      	b.n	8018050 <ai_platform_network_init+0x70>
 8018052:	4a76      	ldr	r2, [pc, #472]	; (801822c <ai_platform_network_init+0x24c>)
 8018054:	6813      	ldr	r3, [r2, #0]
 8018056:	f023 0301 	bic.w	r3, r3, #1
 801805a:	6013      	str	r3, [r2, #0]
 801805c:	f7ff fb1c 	bl	8017698 <_ai_platform_acquire_crc>
 8018060:	4b73      	ldr	r3, [pc, #460]	; (8018230 <ai_platform_network_init+0x250>)
 8018062:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8018066:	429a      	cmp	r2, r3
 8018068:	d056      	beq.n	8018118 <ai_platform_network_init+0x138>
 801806a:	2218      	movs	r2, #24
 801806c:	4b71      	ldr	r3, [pc, #452]	; (8018234 <ai_platform_network_init+0x254>)
 801806e:	601a      	str	r2, [r3, #0]
 8018070:	681a      	ldr	r2, [r3, #0]
 8018072:	2a18      	cmp	r2, #24
 8018074:	f000 80c4 	beq.w	8018200 <ai_platform_network_init+0x220>
 8018078:	4b6f      	ldr	r3, [pc, #444]	; (8018238 <ai_platform_network_init+0x258>)
 801807a:	2201      	movs	r2, #1
 801807c:	4619      	mov	r1, r3
 801807e:	601a      	str	r2, [r3, #0]
 8018080:	680b      	ldr	r3, [r1, #0]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d1fc      	bne.n	8018080 <ai_platform_network_init+0xa0>
 8018086:	4b6d      	ldr	r3, [pc, #436]	; (801823c <ai_platform_network_init+0x25c>)
 8018088:	496d      	ldr	r1, [pc, #436]	; (8018240 <ai_platform_network_init+0x260>)
 801808a:	4a6e      	ldr	r2, [pc, #440]	; (8018244 <ai_platform_network_init+0x264>)
 801808c:	6019      	str	r1, [r3, #0]
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	4293      	cmp	r3, r2
 8018092:	f000 80c2 	beq.w	801821a <ai_platform_network_init+0x23a>
 8018096:	e7fe      	b.n	8018096 <ai_platform_network_init+0xb6>
 8018098:	2201      	movs	r2, #1
 801809a:	4619      	mov	r1, r3
 801809c:	601a      	str	r2, [r3, #0]
 801809e:	680b      	ldr	r3, [r1, #0]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d1fc      	bne.n	801809e <ai_platform_network_init+0xbe>
 80180a4:	4b62      	ldr	r3, [pc, #392]	; (8018230 <ai_platform_network_init+0x250>)
 80180a6:	4966      	ldr	r1, [pc, #408]	; (8018240 <ai_platform_network_init+0x260>)
 80180a8:	4a66      	ldr	r2, [pc, #408]	; (8018244 <ai_platform_network_init+0x264>)
 80180aa:	6019      	str	r1, [r3, #0]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	4293      	cmp	r3, r2
 80180b0:	f040 80b8 	bne.w	8018224 <ai_platform_network_init+0x244>
 80180b4:	f7ff faf2 	bl	801769c <_ai_platform_release_crc>
 80180b8:	2e00      	cmp	r6, #0
 80180ba:	d07f      	beq.n	80181bc <ai_platform_network_init+0x1dc>
 80180bc:	4b62      	ldr	r3, [pc, #392]	; (8018248 <ai_platform_network_init+0x268>)
 80180be:	6832      	ldr	r2, [r6, #0]
 80180c0:	429a      	cmp	r2, r3
 80180c2:	d050      	beq.n	8018166 <ai_platform_network_init+0x186>
 80180c4:	2101      	movs	r1, #1
 80180c6:	4630      	mov	r0, r6
 80180c8:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80180cc:	f7ff fa98 	bl	8017600 <ai_buffer_get_size>
 80180d0:	4635      	mov	r5, r6
 80180d2:	f106 071c 	add.w	r7, r6, #28
 80180d6:	2101      	movs	r1, #1
 80180d8:	4606      	mov	r6, r0
 80180da:	4638      	mov	r0, r7
 80180dc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80180e0:	f7ff fa8e 	bl	8017600 <ai_buffer_get_size>
 80180e4:	2e00      	cmp	r6, #0
 80180e6:	bf0a      	itet	eq
 80180e8:	46b6      	moveq	lr, r6
 80180ea:	f04f 0e01 	movne.w	lr, #1
 80180ee:	4635      	moveq	r5, r6
 80180f0:	2800      	cmp	r0, #0
 80180f2:	d177      	bne.n	80181e4 <ai_platform_network_init+0x204>
 80180f4:	4607      	mov	r7, r0
 80180f6:	4684      	mov	ip, r0
 80180f8:	f1b8 0f00 	cmp.w	r8, #0
 80180fc:	d068      	beq.n	80181d0 <ai_platform_network_init+0x1f0>
 80180fe:	8be3      	ldrh	r3, [r4, #30]
 8018100:	4573      	cmp	r3, lr
 8018102:	d217      	bcs.n	8018134 <ai_platform_network_init+0x154>
 8018104:	f104 0010 	add.w	r0, r4, #16
 8018108:	2212      	movs	r2, #18
 801810a:	2116      	movs	r1, #22
 801810c:	f000 fbf0 	bl	80188f0 <core_set_error>
 8018110:	2400      	movs	r4, #0
 8018112:	4620      	mov	r0, r4
 8018114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018118:	2301      	movs	r3, #1
 801811a:	f100 0208 	add.w	r2, r0, #8
 801811e:	6083      	str	r3, [r0, #8]
 8018120:	6813      	ldr	r3, [r2, #0]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d1fc      	bne.n	8018120 <ai_platform_network_init+0x140>
 8018126:	4a46      	ldr	r2, [pc, #280]	; (8018240 <ai_platform_network_init+0x260>)
 8018128:	4b46      	ldr	r3, [pc, #280]	; (8018244 <ai_platform_network_init+0x264>)
 801812a:	6002      	str	r2, [r0, #0]
 801812c:	6802      	ldr	r2, [r0, #0]
 801812e:	429a      	cmp	r2, r3
 8018130:	d073      	beq.n	801821a <ai_platform_network_init+0x23a>
 8018132:	e7fe      	b.n	8018132 <ai_platform_network_init+0x152>
 8018134:	f1be 0f00 	cmp.w	lr, #0
 8018138:	d006      	beq.n	8018148 <ai_platform_network_init+0x168>
 801813a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801813c:	6a26      	ldr	r6, [r4, #32]
 801813e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8018140:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018144:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8018148:	2600      	movs	r6, #0
 801814a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801814c:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8018150:	4563      	cmp	r3, ip
 8018152:	83a6      	strh	r6, [r4, #28]
 8018154:	d21b      	bcs.n	801818e <ai_platform_network_init+0x1ae>
 8018156:	f104 0010 	add.w	r0, r4, #16
 801815a:	2213      	movs	r2, #19
 801815c:	2116      	movs	r1, #22
 801815e:	4634      	mov	r4, r6
 8018160:	f000 fbc6 	bl	80188f0 <core_set_error>
 8018164:	e7d5      	b.n	8018112 <ai_platform_network_init+0x132>
 8018166:	6930      	ldr	r0, [r6, #16]
 8018168:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801816c:	89b3      	ldrh	r3, [r6, #12]
 801816e:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8018172:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8018176:	62a0      	str	r0, [r4, #40]	; 0x28
 8018178:	2203      	movs	r2, #3
 801817a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 801817e:	84a3      	strh	r3, [r4, #36]	; 0x24
 8018180:	60e2      	str	r2, [r4, #12]
 8018182:	4620      	mov	r0, r4
 8018184:	f001 f96e 	bl	8019464 <ai_layers_init_all>
 8018188:	4620      	mov	r0, r4
 801818a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801818e:	f1bc 0f00 	cmp.w	ip, #0
 8018192:	d01b      	beq.n	80181cc <ai_platform_network_init+0x1ec>
 8018194:	ebcc 08cc 	rsb	r8, ip, ip, lsl #3
 8018198:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801819c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801819e:	eb07 0e06 	add.w	lr, r7, r6
 80181a2:	4435      	add	r5, r6
 80181a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80181a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80181aa:	361c      	adds	r6, #28
 80181ac:	4546      	cmp	r6, r8
 80181ae:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80181b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80181b6:	d1f1      	bne.n	801819c <ai_platform_network_init+0x1bc>
 80181b8:	2300      	movs	r3, #0
 80181ba:	e7dd      	b.n	8018178 <ai_platform_network_init+0x198>
 80181bc:	f104 0010 	add.w	r0, r4, #16
 80181c0:	2211      	movs	r2, #17
 80181c2:	2110      	movs	r1, #16
 80181c4:	4634      	mov	r4, r6
 80181c6:	f000 fb93 	bl	80188f0 <core_set_error>
 80181ca:	e7a2      	b.n	8018112 <ai_platform_network_init+0x132>
 80181cc:	4663      	mov	r3, ip
 80181ce:	e7d3      	b.n	8018178 <ai_platform_network_init+0x198>
 80181d0:	2e00      	cmp	r6, #0
 80181d2:	d094      	beq.n	80180fe <ai_platform_network_init+0x11e>
 80181d4:	f104 0010 	add.w	r0, r4, #16
 80181d8:	2212      	movs	r2, #18
 80181da:	2110      	movs	r1, #16
 80181dc:	4644      	mov	r4, r8
 80181de:	f000 fb87 	bl	80188f0 <core_set_error>
 80181e2:	e796      	b.n	8018112 <ai_platform_network_init+0x132>
 80181e4:	f1b9 0f00 	cmp.w	r9, #0
 80181e8:	d002      	beq.n	80181f0 <ai_platform_network_init+0x210>
 80181ea:	f04f 0c01 	mov.w	ip, #1
 80181ee:	e783      	b.n	80180f8 <ai_platform_network_init+0x118>
 80181f0:	f104 0010 	add.w	r0, r4, #16
 80181f4:	2213      	movs	r2, #19
 80181f6:	2110      	movs	r1, #16
 80181f8:	464c      	mov	r4, r9
 80181fa:	f000 fb79 	bl	80188f0 <core_set_error>
 80181fe:	e788      	b.n	8018112 <ai_platform_network_init+0x132>
 8018200:	2201      	movs	r2, #1
 8018202:	4619      	mov	r1, r3
 8018204:	601a      	str	r2, [r3, #0]
 8018206:	680b      	ldr	r3, [r1, #0]
 8018208:	2b00      	cmp	r3, #0
 801820a:	d1fc      	bne.n	8018206 <ai_platform_network_init+0x226>
 801820c:	4b08      	ldr	r3, [pc, #32]	; (8018230 <ai_platform_network_init+0x250>)
 801820e:	490c      	ldr	r1, [pc, #48]	; (8018240 <ai_platform_network_init+0x260>)
 8018210:	4a0c      	ldr	r2, [pc, #48]	; (8018244 <ai_platform_network_init+0x264>)
 8018212:	6019      	str	r1, [r3, #0]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	4293      	cmp	r3, r2
 8018218:	d103      	bne.n	8018222 <ai_platform_network_init+0x242>
 801821a:	f7ff fa3f 	bl	801769c <_ai_platform_release_crc>
 801821e:	2400      	movs	r4, #0
 8018220:	e777      	b.n	8018112 <ai_platform_network_init+0x132>
 8018222:	e7fe      	b.n	8018222 <ai_platform_network_init+0x242>
 8018224:	e7fe      	b.n	8018224 <ai_platform_network_init+0x244>
 8018226:	bf00      	nop
 8018228:	a1c00100 	.word	0xa1c00100
 801822c:	e0002000 	.word	0xe0002000
 8018230:	40023000 	.word	0x40023000
 8018234:	40023008 	.word	0x40023008
 8018238:	50023008 	.word	0x50023008
 801823c:	50023000 	.word	0x50023000
 8018240:	f407a5c2 	.word	0xf407a5c2
 8018244:	b5e8b5cd 	.word	0xb5e8b5cd
 8018248:	a1facade 	.word	0xa1facade

0801824c <ai_platform_network_post_init>:
 801824c:	b538      	push	{r3, r4, r5, lr}
 801824e:	b120      	cbz	r0, 801825a <ai_platform_network_post_init+0xe>
 8018250:	4b52      	ldr	r3, [pc, #328]	; (801839c <ai_platform_network_post_init+0x150>)
 8018252:	6802      	ldr	r2, [r0, #0]
 8018254:	4604      	mov	r4, r0
 8018256:	429a      	cmp	r2, r3
 8018258:	d032      	beq.n	80182c0 <ai_platform_network_post_init+0x74>
 801825a:	4a51      	ldr	r2, [pc, #324]	; (80183a0 <ai_platform_network_post_init+0x154>)
 801825c:	6813      	ldr	r3, [r2, #0]
 801825e:	f023 0301 	bic.w	r3, r3, #1
 8018262:	6013      	str	r3, [r2, #0]
 8018264:	f7ff fa18 	bl	8017698 <_ai_platform_acquire_crc>
 8018268:	4b4e      	ldr	r3, [pc, #312]	; (80183a4 <ai_platform_network_post_init+0x158>)
 801826a:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 801826e:	429a      	cmp	r2, r3
 8018270:	d014      	beq.n	801829c <ai_platform_network_post_init+0x50>
 8018272:	2218      	movs	r2, #24
 8018274:	4b4c      	ldr	r3, [pc, #304]	; (80183a8 <ai_platform_network_post_init+0x15c>)
 8018276:	601a      	str	r2, [r3, #0]
 8018278:	681a      	ldr	r2, [r3, #0]
 801827a:	2a18      	cmp	r2, #24
 801827c:	d041      	beq.n	8018302 <ai_platform_network_post_init+0xb6>
 801827e:	4b4b      	ldr	r3, [pc, #300]	; (80183ac <ai_platform_network_post_init+0x160>)
 8018280:	2201      	movs	r2, #1
 8018282:	4619      	mov	r1, r3
 8018284:	601a      	str	r2, [r3, #0]
 8018286:	680b      	ldr	r3, [r1, #0]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d1fc      	bne.n	8018286 <ai_platform_network_post_init+0x3a>
 801828c:	4b48      	ldr	r3, [pc, #288]	; (80183b0 <ai_platform_network_post_init+0x164>)
 801828e:	4949      	ldr	r1, [pc, #292]	; (80183b4 <ai_platform_network_post_init+0x168>)
 8018290:	4a49      	ldr	r2, [pc, #292]	; (80183b8 <ai_platform_network_post_init+0x16c>)
 8018292:	6019      	str	r1, [r3, #0]
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	4293      	cmp	r3, r2
 8018298:	d00d      	beq.n	80182b6 <ai_platform_network_post_init+0x6a>
 801829a:	e7fe      	b.n	801829a <ai_platform_network_post_init+0x4e>
 801829c:	2301      	movs	r3, #1
 801829e:	f100 0208 	add.w	r2, r0, #8
 80182a2:	6083      	str	r3, [r0, #8]
 80182a4:	6813      	ldr	r3, [r2, #0]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d1fc      	bne.n	80182a4 <ai_platform_network_post_init+0x58>
 80182aa:	4a42      	ldr	r2, [pc, #264]	; (80183b4 <ai_platform_network_post_init+0x168>)
 80182ac:	4b42      	ldr	r3, [pc, #264]	; (80183b8 <ai_platform_network_post_init+0x16c>)
 80182ae:	6002      	str	r2, [r0, #0]
 80182b0:	6802      	ldr	r2, [r0, #0]
 80182b2:	429a      	cmp	r2, r3
 80182b4:	d103      	bne.n	80182be <ai_platform_network_post_init+0x72>
 80182b6:	f7ff f9f1 	bl	801769c <_ai_platform_release_crc>
 80182ba:	2000      	movs	r0, #0
 80182bc:	bd38      	pop	{r3, r4, r5, pc}
 80182be:	e7fe      	b.n	80182be <ai_platform_network_post_init+0x72>
 80182c0:	4a37      	ldr	r2, [pc, #220]	; (80183a0 <ai_platform_network_post_init+0x154>)
 80182c2:	6813      	ldr	r3, [r2, #0]
 80182c4:	f023 0301 	bic.w	r3, r3, #1
 80182c8:	6013      	str	r3, [r2, #0]
 80182ca:	f7ff f9e5 	bl	8017698 <_ai_platform_acquire_crc>
 80182ce:	4b35      	ldr	r3, [pc, #212]	; (80183a4 <ai_platform_network_post_init+0x158>)
 80182d0:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80182d4:	429a      	cmp	r2, r3
 80182d6:	d022      	beq.n	801831e <ai_platform_network_post_init+0xd2>
 80182d8:	2218      	movs	r2, #24
 80182da:	4b33      	ldr	r3, [pc, #204]	; (80183a8 <ai_platform_network_post_init+0x15c>)
 80182dc:	601a      	str	r2, [r3, #0]
 80182de:	681a      	ldr	r2, [r3, #0]
 80182e0:	2a18      	cmp	r2, #24
 80182e2:	d041      	beq.n	8018368 <ai_platform_network_post_init+0x11c>
 80182e4:	4b31      	ldr	r3, [pc, #196]	; (80183ac <ai_platform_network_post_init+0x160>)
 80182e6:	2201      	movs	r2, #1
 80182e8:	4619      	mov	r1, r3
 80182ea:	601a      	str	r2, [r3, #0]
 80182ec:	680b      	ldr	r3, [r1, #0]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d1fc      	bne.n	80182ec <ai_platform_network_post_init+0xa0>
 80182f2:	4b2f      	ldr	r3, [pc, #188]	; (80183b0 <ai_platform_network_post_init+0x164>)
 80182f4:	492f      	ldr	r1, [pc, #188]	; (80183b4 <ai_platform_network_post_init+0x168>)
 80182f6:	4a30      	ldr	r2, [pc, #192]	; (80183b8 <ai_platform_network_post_init+0x16c>)
 80182f8:	6019      	str	r1, [r3, #0]
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	4293      	cmp	r3, r2
 80182fe:	d01b      	beq.n	8018338 <ai_platform_network_post_init+0xec>
 8018300:	e7fe      	b.n	8018300 <ai_platform_network_post_init+0xb4>
 8018302:	2201      	movs	r2, #1
 8018304:	4619      	mov	r1, r3
 8018306:	601a      	str	r2, [r3, #0]
 8018308:	680b      	ldr	r3, [r1, #0]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d1fc      	bne.n	8018308 <ai_platform_network_post_init+0xbc>
 801830e:	4b25      	ldr	r3, [pc, #148]	; (80183a4 <ai_platform_network_post_init+0x158>)
 8018310:	4928      	ldr	r1, [pc, #160]	; (80183b4 <ai_platform_network_post_init+0x168>)
 8018312:	4a29      	ldr	r2, [pc, #164]	; (80183b8 <ai_platform_network_post_init+0x16c>)
 8018314:	6019      	str	r1, [r3, #0]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	4293      	cmp	r3, r2
 801831a:	d0cc      	beq.n	80182b6 <ai_platform_network_post_init+0x6a>
 801831c:	e7fe      	b.n	801831c <ai_platform_network_post_init+0xd0>
 801831e:	2301      	movs	r3, #1
 8018320:	f100 0208 	add.w	r2, r0, #8
 8018324:	6083      	str	r3, [r0, #8]
 8018326:	6813      	ldr	r3, [r2, #0]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d1fc      	bne.n	8018326 <ai_platform_network_post_init+0xda>
 801832c:	4a21      	ldr	r2, [pc, #132]	; (80183b4 <ai_platform_network_post_init+0x168>)
 801832e:	4b22      	ldr	r3, [pc, #136]	; (80183b8 <ai_platform_network_post_init+0x16c>)
 8018330:	6002      	str	r2, [r0, #0]
 8018332:	6802      	ldr	r2, [r0, #0]
 8018334:	429a      	cmp	r2, r3
 8018336:	d125      	bne.n	8018384 <ai_platform_network_post_init+0x138>
 8018338:	f7ff f9b0 	bl	801769c <_ai_platform_release_crc>
 801833c:	68e3      	ldr	r3, [r4, #12]
 801833e:	f013 0502 	ands.w	r5, r3, #2
 8018342:	d022      	beq.n	801838a <ai_platform_network_post_init+0x13e>
 8018344:	4620      	mov	r0, r4
 8018346:	f001 f8a1 	bl	801948c <ai_layers_post_init_all>
 801834a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801834c:	b1db      	cbz	r3, 8018386 <ai_platform_network_post_init+0x13a>
 801834e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8018350:	b1cd      	cbz	r5, 8018386 <ai_platform_network_post_init+0x13a>
 8018352:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8018354:	4629      	mov	r1, r5
 8018356:	2000      	movs	r0, #0
 8018358:	4798      	blx	r3
 801835a:	692b      	ldr	r3, [r5, #16]
 801835c:	42ab      	cmp	r3, r5
 801835e:	d012      	beq.n	8018386 <ai_platform_network_post_init+0x13a>
 8018360:	461d      	mov	r5, r3
 8018362:	b183      	cbz	r3, 8018386 <ai_platform_network_post_init+0x13a>
 8018364:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018366:	e7f4      	b.n	8018352 <ai_platform_network_post_init+0x106>
 8018368:	2201      	movs	r2, #1
 801836a:	4619      	mov	r1, r3
 801836c:	601a      	str	r2, [r3, #0]
 801836e:	680b      	ldr	r3, [r1, #0]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d1fc      	bne.n	801836e <ai_platform_network_post_init+0x122>
 8018374:	4b0b      	ldr	r3, [pc, #44]	; (80183a4 <ai_platform_network_post_init+0x158>)
 8018376:	490f      	ldr	r1, [pc, #60]	; (80183b4 <ai_platform_network_post_init+0x168>)
 8018378:	4a0f      	ldr	r2, [pc, #60]	; (80183b8 <ai_platform_network_post_init+0x16c>)
 801837a:	6019      	str	r1, [r3, #0]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	4293      	cmp	r3, r2
 8018380:	d0da      	beq.n	8018338 <ai_platform_network_post_init+0xec>
 8018382:	e7fe      	b.n	8018382 <ai_platform_network_post_init+0x136>
 8018384:	e7fe      	b.n	8018384 <ai_platform_network_post_init+0x138>
 8018386:	2001      	movs	r0, #1
 8018388:	bd38      	pop	{r3, r4, r5, pc}
 801838a:	f104 0010 	add.w	r0, r4, #16
 801838e:	2210      	movs	r2, #16
 8018390:	2111      	movs	r1, #17
 8018392:	f000 faad 	bl	80188f0 <core_set_error>
 8018396:	4628      	mov	r0, r5
 8018398:	bd38      	pop	{r3, r4, r5, pc}
 801839a:	bf00      	nop
 801839c:	a1c00100 	.word	0xa1c00100
 80183a0:	e0002000 	.word	0xe0002000
 80183a4:	40023000 	.word	0x40023000
 80183a8:	40023008 	.word	0x40023008
 80183ac:	50023008 	.word	0x50023008
 80183b0:	50023000 	.word	0x50023000
 80183b4:	f407a5c2 	.word	0xf407a5c2
 80183b8:	b5e8b5cd 	.word	0xb5e8b5cd

080183bc <ai_platform_network_process>:
 80183bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183c0:	b085      	sub	sp, #20
 80183c2:	460d      	mov	r5, r1
 80183c4:	9202      	str	r2, [sp, #8]
 80183c6:	4604      	mov	r4, r0
 80183c8:	b120      	cbz	r0, 80183d4 <ai_platform_network_process+0x18>
 80183ca:	4b83      	ldr	r3, [pc, #524]	; (80185d8 <ai_platform_network_process+0x21c>)
 80183cc:	6802      	ldr	r2, [r0, #0]
 80183ce:	429a      	cmp	r2, r3
 80183d0:	bf18      	it	ne
 80183d2:	2400      	movne	r4, #0
 80183d4:	4a81      	ldr	r2, [pc, #516]	; (80185dc <ai_platform_network_process+0x220>)
 80183d6:	6813      	ldr	r3, [r2, #0]
 80183d8:	f023 0301 	bic.w	r3, r3, #1
 80183dc:	6013      	str	r3, [r2, #0]
 80183de:	f7ff f95b 	bl	8017698 <_ai_platform_acquire_crc>
 80183e2:	4b7f      	ldr	r3, [pc, #508]	; (80185e0 <ai_platform_network_process+0x224>)
 80183e4:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80183e8:	429a      	cmp	r2, r3
 80183ea:	d014      	beq.n	8018416 <ai_platform_network_process+0x5a>
 80183ec:	2218      	movs	r2, #24
 80183ee:	4b7d      	ldr	r3, [pc, #500]	; (80185e4 <ai_platform_network_process+0x228>)
 80183f0:	601a      	str	r2, [r3, #0]
 80183f2:	681a      	ldr	r2, [r3, #0]
 80183f4:	2a18      	cmp	r2, #24
 80183f6:	d01c      	beq.n	8018432 <ai_platform_network_process+0x76>
 80183f8:	4b7b      	ldr	r3, [pc, #492]	; (80185e8 <ai_platform_network_process+0x22c>)
 80183fa:	2201      	movs	r2, #1
 80183fc:	4619      	mov	r1, r3
 80183fe:	601a      	str	r2, [r3, #0]
 8018400:	680b      	ldr	r3, [r1, #0]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d1fc      	bne.n	8018400 <ai_platform_network_process+0x44>
 8018406:	4b79      	ldr	r3, [pc, #484]	; (80185ec <ai_platform_network_process+0x230>)
 8018408:	4979      	ldr	r1, [pc, #484]	; (80185f0 <ai_platform_network_process+0x234>)
 801840a:	4a7a      	ldr	r2, [pc, #488]	; (80185f4 <ai_platform_network_process+0x238>)
 801840c:	6019      	str	r1, [r3, #0]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	4293      	cmp	r3, r2
 8018412:	d01c      	beq.n	801844e <ai_platform_network_process+0x92>
 8018414:	e7fe      	b.n	8018414 <ai_platform_network_process+0x58>
 8018416:	2301      	movs	r3, #1
 8018418:	6083      	str	r3, [r0, #8]
 801841a:	f100 0308 	add.w	r3, r0, #8
 801841e:	681a      	ldr	r2, [r3, #0]
 8018420:	2a00      	cmp	r2, #0
 8018422:	d1fc      	bne.n	801841e <ai_platform_network_process+0x62>
 8018424:	4a72      	ldr	r2, [pc, #456]	; (80185f0 <ai_platform_network_process+0x234>)
 8018426:	4b73      	ldr	r3, [pc, #460]	; (80185f4 <ai_platform_network_process+0x238>)
 8018428:	6002      	str	r2, [r0, #0]
 801842a:	6802      	ldr	r2, [r0, #0]
 801842c:	429a      	cmp	r2, r3
 801842e:	d00e      	beq.n	801844e <ai_platform_network_process+0x92>
 8018430:	e7fe      	b.n	8018430 <ai_platform_network_process+0x74>
 8018432:	2201      	movs	r2, #1
 8018434:	4619      	mov	r1, r3
 8018436:	601a      	str	r2, [r3, #0]
 8018438:	680b      	ldr	r3, [r1, #0]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d1fc      	bne.n	8018438 <ai_platform_network_process+0x7c>
 801843e:	4b68      	ldr	r3, [pc, #416]	; (80185e0 <ai_platform_network_process+0x224>)
 8018440:	496b      	ldr	r1, [pc, #428]	; (80185f0 <ai_platform_network_process+0x234>)
 8018442:	4a6c      	ldr	r2, [pc, #432]	; (80185f4 <ai_platform_network_process+0x238>)
 8018444:	6019      	str	r1, [r3, #0]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	4293      	cmp	r3, r2
 801844a:	f040 823e 	bne.w	80188ca <ai_platform_network_process+0x50e>
 801844e:	f7ff f925 	bl	801769c <_ai_platform_release_crc>
 8018452:	2c00      	cmp	r4, #0
 8018454:	f000 8242 	beq.w	80188dc <ai_platform_network_process+0x520>
 8018458:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801845a:	2a00      	cmp	r2, #0
 801845c:	f000 808c 	beq.w	8018578 <ai_platform_network_process+0x1bc>
 8018460:	2600      	movs	r6, #0
 8018462:	68e3      	ldr	r3, [r4, #12]
 8018464:	6166      	str	r6, [r4, #20]
 8018466:	f003 0303 	and.w	r3, r3, #3
 801846a:	2b03      	cmp	r3, #3
 801846c:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8018470:	f040 822c 	bne.w	80188cc <ai_platform_network_process+0x510>
 8018474:	2d00      	cmp	r5, #0
 8018476:	f000 8086 	beq.w	8018586 <ai_platform_network_process+0x1ca>
 801847a:	f1b9 0f00 	cmp.w	r9, #0
 801847e:	f000 8082 	beq.w	8018586 <ai_platform_network_process+0x1ca>
 8018482:	f8b9 3000 	ldrh.w	r3, [r9]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d07d      	beq.n	8018586 <ai_platform_network_process+0x1ca>
 801848a:	69aa      	ldr	r2, [r5, #24]
 801848c:	9401      	str	r4, [sp, #4]
 801848e:	6817      	ldr	r7, [r2, #0]
 8018490:	429e      	cmp	r6, r3
 8018492:	f080 80b1 	bcs.w	80185f8 <ai_platform_network_process+0x23c>
 8018496:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801849a:	2b00      	cmp	r3, #0
 801849c:	f000 80ac 	beq.w	80185f8 <ai_platform_network_process+0x23c>
 80184a0:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 80184a4:	2c00      	cmp	r4, #0
 80184a6:	f000 80a7 	beq.w	80185f8 <ai_platform_network_process+0x23c>
 80184aa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80184ae:	ea4f 1806 	mov.w	r8, r6, lsl #4
 80184b2:	f8d3 b000 	ldr.w	fp, [r3]
 80184b6:	eb1b 0a08 	adds.w	sl, fp, r8
 80184ba:	f000 808b 	beq.w	80185d4 <ai_platform_network_process+0x218>
 80184be:	69a3      	ldr	r3, [r4, #24]
 80184c0:	2101      	movs	r1, #1
 80184c2:	685b      	ldr	r3, [r3, #4]
 80184c4:	4628      	mov	r0, r5
 80184c6:	9303      	str	r3, [sp, #12]
 80184c8:	f7ff f89a 	bl	8017600 <ai_buffer_get_size>
 80184cc:	9b03      	ldr	r3, [sp, #12]
 80184ce:	4283      	cmp	r3, r0
 80184d0:	d377      	bcc.n	80185c2 <ai_platform_network_process+0x206>
 80184d2:	68e0      	ldr	r0, [r4, #12]
 80184d4:	69a9      	ldr	r1, [r5, #24]
 80184d6:	68c2      	ldr	r2, [r0, #12]
 80184d8:	68cb      	ldr	r3, [r1, #12]
 80184da:	429a      	cmp	r2, r3
 80184dc:	d171      	bne.n	80185c2 <ai_platform_network_process+0x206>
 80184de:	6882      	ldr	r2, [r0, #8]
 80184e0:	688b      	ldr	r3, [r1, #8]
 80184e2:	429a      	cmp	r2, r3
 80184e4:	d16d      	bne.n	80185c2 <ai_platform_network_process+0x206>
 80184e6:	6842      	ldr	r2, [r0, #4]
 80184e8:	684b      	ldr	r3, [r1, #4]
 80184ea:	429a      	cmp	r2, r3
 80184ec:	d169      	bne.n	80185c2 <ai_platform_network_process+0x206>
 80184ee:	69a3      	ldr	r3, [r4, #24]
 80184f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80184f4:	f001 f8b4 	bl	8019660 <ai_array_get_data_byte_size>
 80184f8:	9003      	str	r0, [sp, #12]
 80184fa:	4620      	mov	r0, r4
 80184fc:	f001 f822 	bl	8019544 <get_tensor_byte_size>
 8018500:	9b03      	ldr	r3, [sp, #12]
 8018502:	4283      	cmp	r3, r0
 8018504:	d35d      	bcc.n	80185c2 <ai_platform_network_process+0x206>
 8018506:	69a3      	ldr	r3, [r4, #24]
 8018508:	6818      	ldr	r0, [r3, #0]
 801850a:	f001 f82f 	bl	801956c <ai_array_to_buffer_fmt>
 801850e:	682b      	ldr	r3, [r5, #0]
 8018510:	4043      	eors	r3, r0
 8018512:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8018516:	d14b      	bne.n	80185b0 <ai_platform_network_process+0x1f4>
 8018518:	686b      	ldr	r3, [r5, #4]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d05a      	beq.n	80185d4 <ai_platform_network_process+0x218>
 801851e:	69ab      	ldr	r3, [r5, #24]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d03a      	beq.n	801859c <ai_platform_network_process+0x1e0>
 8018526:	4620      	mov	r0, r4
 8018528:	9303      	str	r3, [sp, #12]
 801852a:	f001 f80b 	bl	8019544 <get_tensor_byte_size>
 801852e:	f8ca 0008 	str.w	r0, [sl, #8]
 8018532:	69aa      	ldr	r2, [r5, #24]
 8018534:	9b03      	ldr	r3, [sp, #12]
 8018536:	6812      	ldr	r2, [r2, #0]
 8018538:	429f      	cmp	r7, r3
 801853a:	fb02 f200 	mul.w	r2, r2, r0
 801853e:	f8ca 200c 	str.w	r2, [sl, #12]
 8018542:	6868      	ldr	r0, [r5, #4]
 8018544:	bf38      	it	cc
 8018546:	461f      	movcc	r7, r3
 8018548:	f8ca 0004 	str.w	r0, [sl, #4]
 801854c:	686b      	ldr	r3, [r5, #4]
 801854e:	4413      	add	r3, r2
 8018550:	f84b 3008 	str.w	r3, [fp, r8]
 8018554:	69a1      	ldr	r1, [r4, #24]
 8018556:	680b      	ldr	r3, [r1, #0]
 8018558:	009b      	lsls	r3, r3, #2
 801855a:	d408      	bmi.n	801856e <ai_platform_network_process+0x1b2>
 801855c:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8018560:	1a9b      	subs	r3, r3, r2
 8018562:	4418      	add	r0, r3
 8018564:	6088      	str	r0, [r1, #8]
 8018566:	69a3      	ldr	r3, [r4, #24]
 8018568:	f8da 2004 	ldr.w	r2, [sl, #4]
 801856c:	60da      	str	r2, [r3, #12]
 801856e:	f8b9 3000 	ldrh.w	r3, [r9]
 8018572:	3601      	adds	r6, #1
 8018574:	351c      	adds	r5, #28
 8018576:	e78b      	b.n	8018490 <ai_platform_network_process+0xd4>
 8018578:	68e3      	ldr	r3, [r4, #12]
 801857a:	6162      	str	r2, [r4, #20]
 801857c:	f003 0303 	and.w	r3, r3, #3
 8018580:	2b03      	cmp	r3, #3
 8018582:	f040 81a3 	bne.w	80188cc <ai_platform_network_process+0x510>
 8018586:	f104 0010 	add.w	r0, r4, #16
 801858a:	2217      	movs	r2, #23
 801858c:	2112      	movs	r1, #18
 801858e:	f000 f9af 	bl	80188f0 <core_set_error>
 8018592:	2300      	movs	r3, #0
 8018594:	4618      	mov	r0, r3
 8018596:	b005      	add	sp, #20
 8018598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801859c:	469a      	mov	sl, r3
 801859e:	9c01      	ldr	r4, [sp, #4]
 80185a0:	2221      	movs	r2, #33	; 0x21
 80185a2:	f104 0010 	add.w	r0, r4, #16
 80185a6:	2112      	movs	r1, #18
 80185a8:	f000 f9a2 	bl	80188f0 <core_set_error>
 80185ac:	4653      	mov	r3, sl
 80185ae:	e7f1      	b.n	8018594 <ai_platform_network_process+0x1d8>
 80185b0:	9c01      	ldr	r4, [sp, #4]
 80185b2:	2219      	movs	r2, #25
 80185b4:	f104 0010 	add.w	r0, r4, #16
 80185b8:	2112      	movs	r1, #18
 80185ba:	f000 f999 	bl	80188f0 <core_set_error>
 80185be:	2300      	movs	r3, #0
 80185c0:	e7e8      	b.n	8018594 <ai_platform_network_process+0x1d8>
 80185c2:	9c01      	ldr	r4, [sp, #4]
 80185c4:	2218      	movs	r2, #24
 80185c6:	f104 0010 	add.w	r0, r4, #16
 80185ca:	2112      	movs	r1, #18
 80185cc:	f000 f990 	bl	80188f0 <core_set_error>
 80185d0:	2300      	movs	r3, #0
 80185d2:	e7df      	b.n	8018594 <ai_platform_network_process+0x1d8>
 80185d4:	9c01      	ldr	r4, [sp, #4]
 80185d6:	e7d6      	b.n	8018586 <ai_platform_network_process+0x1ca>
 80185d8:	a1c00100 	.word	0xa1c00100
 80185dc:	e0002000 	.word	0xe0002000
 80185e0:	40023000 	.word	0x40023000
 80185e4:	40023008 	.word	0x40023008
 80185e8:	50023008 	.word	0x50023008
 80185ec:	50023000 	.word	0x50023000
 80185f0:	f407a5c2 	.word	0xf407a5c2
 80185f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80185f8:	9c01      	ldr	r4, [sp, #4]
 80185fa:	9a02      	ldr	r2, [sp, #8]
 80185fc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80185fe:	2a00      	cmp	r2, #0
 8018600:	f000 80ae 	beq.w	8018760 <ai_platform_network_process+0x3a4>
 8018604:	2b01      	cmp	r3, #1
 8018606:	f240 80a1 	bls.w	801874c <ai_platform_network_process+0x390>
 801860a:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 801860e:	f119 0f0c 	cmn.w	r9, #12
 8018612:	f000 809b 	beq.w	801874c <ai_platform_network_process+0x390>
 8018616:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801861a:	2b00      	cmp	r3, #0
 801861c:	f000 8096 	beq.w	801874c <ai_platform_network_process+0x390>
 8018620:	f04f 0800 	mov.w	r8, #0
 8018624:	9d02      	ldr	r5, [sp, #8]
 8018626:	9401      	str	r4, [sp, #4]
 8018628:	4598      	cmp	r8, r3
 801862a:	f080 8097 	bcs.w	801875c <ai_platform_network_process+0x3a0>
 801862e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018632:	2b00      	cmp	r3, #0
 8018634:	f000 8092 	beq.w	801875c <ai_platform_network_process+0x3a0>
 8018638:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
 801863c:	2c00      	cmp	r4, #0
 801863e:	f000 808d 	beq.w	801875c <ai_platform_network_process+0x3a0>
 8018642:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018646:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801864a:	f8d3 b000 	ldr.w	fp, [r3]
 801864e:	eb1b 0a06 	adds.w	sl, fp, r6
 8018652:	f000 8131 	beq.w	80188b8 <ai_platform_network_process+0x4fc>
 8018656:	69a3      	ldr	r3, [r4, #24]
 8018658:	2101      	movs	r1, #1
 801865a:	685b      	ldr	r3, [r3, #4]
 801865c:	4628      	mov	r0, r5
 801865e:	9302      	str	r3, [sp, #8]
 8018660:	f7fe ffce 	bl	8017600 <ai_buffer_get_size>
 8018664:	9b02      	ldr	r3, [sp, #8]
 8018666:	4283      	cmp	r3, r0
 8018668:	d36f      	bcc.n	801874a <ai_platform_network_process+0x38e>
 801866a:	68e0      	ldr	r0, [r4, #12]
 801866c:	69a9      	ldr	r1, [r5, #24]
 801866e:	68c2      	ldr	r2, [r0, #12]
 8018670:	68cb      	ldr	r3, [r1, #12]
 8018672:	429a      	cmp	r2, r3
 8018674:	d169      	bne.n	801874a <ai_platform_network_process+0x38e>
 8018676:	6882      	ldr	r2, [r0, #8]
 8018678:	688b      	ldr	r3, [r1, #8]
 801867a:	429a      	cmp	r2, r3
 801867c:	d165      	bne.n	801874a <ai_platform_network_process+0x38e>
 801867e:	6842      	ldr	r2, [r0, #4]
 8018680:	684b      	ldr	r3, [r1, #4]
 8018682:	429a      	cmp	r2, r3
 8018684:	d161      	bne.n	801874a <ai_platform_network_process+0x38e>
 8018686:	69a3      	ldr	r3, [r4, #24]
 8018688:	e9d3 0100 	ldrd	r0, r1, [r3]
 801868c:	f000 ffe8 	bl	8019660 <ai_array_get_data_byte_size>
 8018690:	9002      	str	r0, [sp, #8]
 8018692:	4620      	mov	r0, r4
 8018694:	f000 ff56 	bl	8019544 <get_tensor_byte_size>
 8018698:	9b02      	ldr	r3, [sp, #8]
 801869a:	4283      	cmp	r3, r0
 801869c:	d355      	bcc.n	801874a <ai_platform_network_process+0x38e>
 801869e:	69a3      	ldr	r3, [r4, #24]
 80186a0:	6818      	ldr	r0, [r3, #0]
 80186a2:	f000 ff63 	bl	801956c <ai_array_to_buffer_fmt>
 80186a6:	682b      	ldr	r3, [r5, #0]
 80186a8:	4043      	eors	r3, r0
 80186aa:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80186ae:	d143      	bne.n	8018738 <ai_platform_network_process+0x37c>
 80186b0:	686b      	ldr	r3, [r5, #4]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d036      	beq.n	8018724 <ai_platform_network_process+0x368>
 80186b6:	69ab      	ldr	r3, [r5, #24]
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	b34b      	cbz	r3, 8018710 <ai_platform_network_process+0x354>
 80186bc:	4620      	mov	r0, r4
 80186be:	9302      	str	r3, [sp, #8]
 80186c0:	f000 ff40 	bl	8019544 <get_tensor_byte_size>
 80186c4:	f8ca 0008 	str.w	r0, [sl, #8]
 80186c8:	69aa      	ldr	r2, [r5, #24]
 80186ca:	9b02      	ldr	r3, [sp, #8]
 80186cc:	6812      	ldr	r2, [r2, #0]
 80186ce:	429f      	cmp	r7, r3
 80186d0:	fb02 f200 	mul.w	r2, r2, r0
 80186d4:	f8ca 200c 	str.w	r2, [sl, #12]
 80186d8:	6868      	ldr	r0, [r5, #4]
 80186da:	bf38      	it	cc
 80186dc:	461f      	movcc	r7, r3
 80186de:	f8ca 0004 	str.w	r0, [sl, #4]
 80186e2:	686b      	ldr	r3, [r5, #4]
 80186e4:	4413      	add	r3, r2
 80186e6:	f84b 3006 	str.w	r3, [fp, r6]
 80186ea:	69a1      	ldr	r1, [r4, #24]
 80186ec:	680b      	ldr	r3, [r1, #0]
 80186ee:	009e      	lsls	r6, r3, #2
 80186f0:	d408      	bmi.n	8018704 <ai_platform_network_process+0x348>
 80186f2:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 80186f6:	1a9b      	subs	r3, r3, r2
 80186f8:	4418      	add	r0, r3
 80186fa:	6088      	str	r0, [r1, #8]
 80186fc:	69a3      	ldr	r3, [r4, #24]
 80186fe:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018702:	60da      	str	r2, [r3, #12]
 8018704:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8018708:	f108 0801 	add.w	r8, r8, #1
 801870c:	351c      	adds	r5, #28
 801870e:	e78b      	b.n	8018628 <ai_platform_network_process+0x26c>
 8018710:	469a      	mov	sl, r3
 8018712:	9c01      	ldr	r4, [sp, #4]
 8018714:	2221      	movs	r2, #33	; 0x21
 8018716:	f104 0010 	add.w	r0, r4, #16
 801871a:	2113      	movs	r1, #19
 801871c:	f000 f8e8 	bl	80188f0 <core_set_error>
 8018720:	4653      	mov	r3, sl
 8018722:	e737      	b.n	8018594 <ai_platform_network_process+0x1d8>
 8018724:	469a      	mov	sl, r3
 8018726:	9c01      	ldr	r4, [sp, #4]
 8018728:	2217      	movs	r2, #23
 801872a:	f104 0010 	add.w	r0, r4, #16
 801872e:	2113      	movs	r1, #19
 8018730:	f000 f8de 	bl	80188f0 <core_set_error>
 8018734:	4653      	mov	r3, sl
 8018736:	e72d      	b.n	8018594 <ai_platform_network_process+0x1d8>
 8018738:	9c01      	ldr	r4, [sp, #4]
 801873a:	2219      	movs	r2, #25
 801873c:	f104 0010 	add.w	r0, r4, #16
 8018740:	2113      	movs	r1, #19
 8018742:	f000 f8d5 	bl	80188f0 <core_set_error>
 8018746:	2300      	movs	r3, #0
 8018748:	e724      	b.n	8018594 <ai_platform_network_process+0x1d8>
 801874a:	9c01      	ldr	r4, [sp, #4]
 801874c:	f104 0010 	add.w	r0, r4, #16
 8018750:	2218      	movs	r2, #24
 8018752:	2113      	movs	r1, #19
 8018754:	f000 f8cc 	bl	80188f0 <core_set_error>
 8018758:	2300      	movs	r3, #0
 801875a:	e71b      	b.n	8018594 <ai_platform_network_process+0x1d8>
 801875c:	9c01      	ldr	r4, [sp, #4]
 801875e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8018760:	82a7      	strh	r7, [r4, #20]
 8018762:	2b00      	cmp	r3, #0
 8018764:	f000 80a5 	beq.w	80188b2 <ai_platform_network_process+0x4f6>
 8018768:	2b01      	cmp	r3, #1
 801876a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801876c:	f240 809f 	bls.w	80188ae <ai_platform_network_process+0x4f2>
 8018770:	f105 070c 	add.w	r7, r5, #12
 8018774:	8ae3      	ldrh	r3, [r4, #22]
 8018776:	8aa2      	ldrh	r2, [r4, #20]
 8018778:	429a      	cmp	r2, r3
 801877a:	f67f af0b 	bls.w	8018594 <ai_platform_network_process+0x1d8>
 801877e:	2d00      	cmp	r5, #0
 8018780:	d035      	beq.n	80187ee <ai_platform_network_process+0x432>
 8018782:	882b      	ldrh	r3, [r5, #0]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d032      	beq.n	80187ee <ai_platform_network_process+0x432>
 8018788:	686b      	ldr	r3, [r5, #4]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d02f      	beq.n	80187ee <ai_platform_network_process+0x432>
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	f04f 0800 	mov.w	r8, #0
 8018794:	b35b      	cbz	r3, 80187ee <ai_platform_network_process+0x432>
 8018796:	68a9      	ldr	r1, [r5, #8]
 8018798:	699a      	ldr	r2, [r3, #24]
 801879a:	f8d1 a000 	ldr.w	sl, [r1]
 801879e:	6811      	ldr	r1, [r2, #0]
 80187a0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80187a4:	eb0a 0609 	add.w	r6, sl, r9
 80187a8:	0089      	lsls	r1, r1, #2
 80187aa:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80187ae:	6890      	ldr	r0, [r2, #8]
 80187b0:	d478      	bmi.n	80188a4 <ai_platform_network_process+0x4e8>
 80187b2:	68d1      	ldr	r1, [r2, #12]
 80187b4:	1a40      	subs	r0, r0, r1
 80187b6:	eb0c 0100 	add.w	r1, ip, r0
 80187ba:	6091      	str	r1, [r2, #8]
 80187bc:	699b      	ldr	r3, [r3, #24]
 80187be:	6872      	ldr	r2, [r6, #4]
 80187c0:	60da      	str	r2, [r3, #12]
 80187c2:	f85a 2009 	ldr.w	r2, [sl, r9]
 80187c6:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80187ca:	440b      	add	r3, r1
 80187cc:	4293      	cmp	r3, r2
 80187ce:	bf28      	it	cs
 80187d0:	68f3      	ldrcs	r3, [r6, #12]
 80187d2:	f108 0801 	add.w	r8, r8, #1
 80187d6:	bf28      	it	cs
 80187d8:	1ad3      	subcs	r3, r2, r3
 80187da:	6073      	str	r3, [r6, #4]
 80187dc:	882b      	ldrh	r3, [r5, #0]
 80187de:	4598      	cmp	r8, r3
 80187e0:	d205      	bcs.n	80187ee <ai_platform_network_process+0x432>
 80187e2:	686b      	ldr	r3, [r5, #4]
 80187e4:	b11b      	cbz	r3, 80187ee <ai_platform_network_process+0x432>
 80187e6:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d1d3      	bne.n	8018796 <ai_platform_network_process+0x3da>
 80187ee:	4620      	mov	r0, r4
 80187f0:	f000 fe62 	bl	80194b8 <ai_layers_forward_all>
 80187f4:	2f00      	cmp	r7, #0
 80187f6:	d04c      	beq.n	8018892 <ai_platform_network_process+0x4d6>
 80187f8:	883b      	ldrh	r3, [r7, #0]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d049      	beq.n	8018892 <ai_platform_network_process+0x4d6>
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d046      	beq.n	8018892 <ai_platform_network_process+0x4d6>
 8018804:	6818      	ldr	r0, [r3, #0]
 8018806:	2800      	cmp	r0, #0
 8018808:	d043      	beq.n	8018892 <ai_platform_network_process+0x4d6>
 801880a:	f04f 0800 	mov.w	r8, #0
 801880e:	e01c      	b.n	801884a <ai_platform_network_process+0x48e>
 8018810:	f85a 2009 	ldr.w	r2, [sl, r9]
 8018814:	f108 0801 	add.w	r8, r8, #1
 8018818:	4596      	cmp	lr, r2
 801881a:	bf24      	itt	cs
 801881c:	68f3      	ldrcs	r3, [r6, #12]
 801881e:	eba2 0e03 	subcs.w	lr, r2, r3
 8018822:	f8c6 e004 	str.w	lr, [r6, #4]
 8018826:	6981      	ldr	r1, [r0, #24]
 8018828:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801882c:	1ad2      	subs	r2, r2, r3
 801882e:	eb0e 0302 	add.w	r3, lr, r2
 8018832:	608b      	str	r3, [r1, #8]
 8018834:	6983      	ldr	r3, [r0, #24]
 8018836:	6872      	ldr	r2, [r6, #4]
 8018838:	60da      	str	r2, [r3, #12]
 801883a:	883b      	ldrh	r3, [r7, #0]
 801883c:	4598      	cmp	r8, r3
 801883e:	d228      	bcs.n	8018892 <ai_platform_network_process+0x4d6>
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	b333      	cbz	r3, 8018892 <ai_platform_network_process+0x4d6>
 8018844:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018848:	b318      	cbz	r0, 8018892 <ai_platform_network_process+0x4d6>
 801884a:	68bb      	ldr	r3, [r7, #8]
 801884c:	6981      	ldr	r1, [r0, #24]
 801884e:	f8d3 a000 	ldr.w	sl, [r3]
 8018852:	680b      	ldr	r3, [r1, #0]
 8018854:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8018858:	eb0a 0609 	add.w	r6, sl, r9
 801885c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8018860:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8018864:	eb0c 0e02 	add.w	lr, ip, r2
 8018868:	d0d2      	beq.n	8018810 <ai_platform_network_process+0x454>
 801886a:	6889      	ldr	r1, [r1, #8]
 801886c:	4660      	mov	r0, ip
 801886e:	f002 f97d 	bl	801ab6c <memcpy>
 8018872:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8018876:	f85a 2009 	ldr.w	r2, [sl, r9]
 801887a:	440b      	add	r3, r1
 801887c:	4293      	cmp	r3, r2
 801887e:	bf28      	it	cs
 8018880:	68f3      	ldrcs	r3, [r6, #12]
 8018882:	f108 0801 	add.w	r8, r8, #1
 8018886:	bf28      	it	cs
 8018888:	1ad3      	subcs	r3, r2, r3
 801888a:	6073      	str	r3, [r6, #4]
 801888c:	883b      	ldrh	r3, [r7, #0]
 801888e:	4598      	cmp	r8, r3
 8018890:	d3d6      	bcc.n	8018840 <ai_platform_network_process+0x484>
 8018892:	8ae3      	ldrh	r3, [r4, #22]
 8018894:	8aa2      	ldrh	r2, [r4, #20]
 8018896:	3301      	adds	r3, #1
 8018898:	b29b      	uxth	r3, r3
 801889a:	429a      	cmp	r2, r3
 801889c:	82e3      	strh	r3, [r4, #22]
 801889e:	f63f af6e 	bhi.w	801877e <ai_platform_network_process+0x3c2>
 80188a2:	e677      	b.n	8018594 <ai_platform_network_process+0x1d8>
 80188a4:	4661      	mov	r1, ip
 80188a6:	68b2      	ldr	r2, [r6, #8]
 80188a8:	f002 f960 	bl	801ab6c <memcpy>
 80188ac:	e789      	b.n	80187c2 <ai_platform_network_process+0x406>
 80188ae:	2700      	movs	r7, #0
 80188b0:	e760      	b.n	8018774 <ai_platform_network_process+0x3b8>
 80188b2:	461d      	mov	r5, r3
 80188b4:	461f      	mov	r7, r3
 80188b6:	e75d      	b.n	8018774 <ai_platform_network_process+0x3b8>
 80188b8:	9c01      	ldr	r4, [sp, #4]
 80188ba:	2217      	movs	r2, #23
 80188bc:	f104 0010 	add.w	r0, r4, #16
 80188c0:	2113      	movs	r1, #19
 80188c2:	f000 f815 	bl	80188f0 <core_set_error>
 80188c6:	4653      	mov	r3, sl
 80188c8:	e664      	b.n	8018594 <ai_platform_network_process+0x1d8>
 80188ca:	e7fe      	b.n	80188ca <ai_platform_network_process+0x50e>
 80188cc:	f104 0010 	add.w	r0, r4, #16
 80188d0:	2230      	movs	r2, #48	; 0x30
 80188d2:	2111      	movs	r1, #17
 80188d4:	f000 f80c 	bl	80188f0 <core_set_error>
 80188d8:	2300      	movs	r3, #0
 80188da:	e65b      	b.n	8018594 <ai_platform_network_process+0x1d8>
 80188dc:	4623      	mov	r3, r4
 80188de:	e659      	b.n	8018594 <ai_platform_network_process+0x1d8>

080188e0 <core_init>:
 80188e0:	2001      	movs	r0, #1
 80188e2:	4770      	bx	lr

080188e4 <core_get_error>:
 80188e4:	4603      	mov	r3, r0
 80188e6:	2200      	movs	r2, #0
 80188e8:	6800      	ldr	r0, [r0, #0]
 80188ea:	601a      	str	r2, [r3, #0]
 80188ec:	4770      	bx	lr
 80188ee:	bf00      	nop

080188f0 <core_set_error>:
 80188f0:	4603      	mov	r3, r0
 80188f2:	7800      	ldrb	r0, [r0, #0]
 80188f4:	b930      	cbnz	r0, 8018904 <core_set_error+0x14>
 80188f6:	7019      	strb	r1, [r3, #0]
 80188f8:	6819      	ldr	r1, [r3, #0]
 80188fa:	2001      	movs	r0, #1
 80188fc:	f362 211f 	bfi	r1, r2, #8, #24
 8018900:	6019      	str	r1, [r3, #0]
 8018902:	4770      	bx	lr
 8018904:	2000      	movs	r0, #0
 8018906:	4770      	bx	lr

08018908 <forward_dense>:
 8018908:	6983      	ldr	r3, [r0, #24]
 801890a:	8819      	ldrh	r1, [r3, #0]
 801890c:	2900      	cmp	r1, #0
 801890e:	f000 818d 	beq.w	8018c2c <forward_dense+0x324>
 8018912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018916:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801891a:	b099      	sub	sp, #100	; 0x64
 801891c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8018920:	b106      	cbz	r6, 8018924 <forward_dense+0x1c>
 8018922:	6836      	ldr	r6, [r6, #0]
 8018924:	2901      	cmp	r1, #1
 8018926:	f240 817e 	bls.w	8018c26 <forward_dense+0x31e>
 801892a:	f8dc 4010 	ldr.w	r4, [ip, #16]
 801892e:	b104      	cbz	r4, 8018932 <forward_dense+0x2a>
 8018930:	6824      	ldr	r4, [r4, #0]
 8018932:	2902      	cmp	r1, #2
 8018934:	f000 817c 	beq.w	8018c30 <forward_dense+0x328>
 8018938:	f8dc 301c 	ldr.w	r3, [ip, #28]
 801893c:	2b00      	cmp	r3, #0
 801893e:	f040 817a 	bne.w	8018c36 <forward_dense+0x32e>
 8018942:	f11c 0218 	adds.w	r2, ip, #24
 8018946:	930d      	str	r3, [sp, #52]	; 0x34
 8018948:	f000 817b 	beq.w	8018c42 <forward_dense+0x33a>
 801894c:	f8bc 2018 	ldrh.w	r2, [ip, #24]
 8018950:	2a01      	cmp	r2, #1
 8018952:	f240 83a4 	bls.w	801909e <forward_dense+0x796>
 8018956:	2b00      	cmp	r3, #0
 8018958:	f000 8175 	beq.w	8018c46 <forward_dense+0x33e>
 801895c:	685b      	ldr	r3, [r3, #4]
 801895e:	930e      	str	r3, [sp, #56]	; 0x38
 8018960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018962:	68e2      	ldr	r2, [r4, #12]
 8018964:	6998      	ldr	r0, [r3, #24]
 8018966:	e9d2 7501 	ldrd	r7, r5, [r2, #4]
 801896a:	6803      	ldr	r3, [r0, #0]
 801896c:	9501      	str	r5, [sp, #4]
 801896e:	f3c3 5841 	ubfx	r8, r3, #21, #2
 8018972:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8018976:	fa49 f508 	asr.w	r5, r9, r8
 801897a:	f8d2 800c 	ldr.w	r8, [r2, #12]
 801897e:	68f2      	ldr	r2, [r6, #12]
 8018980:	9512      	str	r5, [sp, #72]	; 0x48
 8018982:	6852      	ldr	r2, [r2, #4]
 8018984:	9d01      	ldr	r5, [sp, #4]
 8018986:	2903      	cmp	r1, #3
 8018988:	fb05 f507 	mul.w	r5, r5, r7
 801898c:	9215      	str	r2, [sp, #84]	; 0x54
 801898e:	f000 836a 	beq.w	8019066 <forward_dense+0x75e>
 8018992:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8018996:	2a00      	cmp	r2, #0
 8018998:	f000 8368 	beq.w	801906c <forward_dense+0x764>
 801899c:	6812      	ldr	r2, [r2, #0]
 801899e:	2a00      	cmp	r2, #0
 80189a0:	f000 8364 	beq.w	801906c <forward_dense+0x764>
 80189a4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80189a8:	2b04      	cmp	r3, #4
 80189aa:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80189ae:	f000 8363 	beq.w	8019078 <forward_dense+0x770>
 80189b2:	2b08      	cmp	r3, #8
 80189b4:	f000 8360 	beq.w	8019078 <forward_dense+0x770>
 80189b8:	f04f 0a00 	mov.w	sl, #0
 80189bc:	69a3      	ldr	r3, [r4, #24]
 80189be:	00ad      	lsls	r5, r5, #2
 80189c0:	6898      	ldr	r0, [r3, #8]
 80189c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80189c4:	fb08 0405 	mla	r4, r8, r5, r0
 80189c8:	695b      	ldr	r3, [r3, #20]
 80189ca:	69b2      	ldr	r2, [r6, #24]
 80189cc:	685b      	ldr	r3, [r3, #4]
 80189ce:	00bd      	lsls	r5, r7, #2
 80189d0:	42a0      	cmp	r0, r4
 80189d2:	9002      	str	r0, [sp, #8]
 80189d4:	9410      	str	r4, [sp, #64]	; 0x40
 80189d6:	950f      	str	r5, [sp, #60]	; 0x3c
 80189d8:	6891      	ldr	r1, [r2, #8]
 80189da:	eb00 0805 	add.w	r8, r0, r5
 80189de:	9304      	str	r3, [sp, #16]
 80189e0:	f080 811e 	bcs.w	8018c20 <forward_dense+0x318>
 80189e4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80189e6:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8018c60 <forward_dense+0x358>
 80189ea:	08e8      	lsrs	r0, r5, #3
 80189ec:	4606      	mov	r6, r0
 80189ee:	0142      	lsls	r2, r0, #5
 80189f0:	f025 0301 	bic.w	r3, r5, #1
 80189f4:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
 80189f8:	9001      	str	r0, [sp, #4]
 80189fa:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 80189fe:	00f7      	lsls	r7, r6, #3
 8018a00:	9316      	str	r3, [sp, #88]	; 0x58
 8018a02:	0143      	lsls	r3, r0, #5
 8018a04:	00b6      	lsls	r6, r6, #2
 8018a06:	9306      	str	r3, [sp, #24]
 8018a08:	f107 0308 	add.w	r3, r7, #8
 8018a0c:	9303      	str	r3, [sp, #12]
 8018a0e:	1d33      	adds	r3, r6, #4
 8018a10:	930c      	str	r3, [sp, #48]	; 0x30
 8018a12:	f005 0301 	and.w	r3, r5, #1
 8018a16:	9308      	str	r3, [sp, #32]
 8018a18:	00ab      	lsls	r3, r5, #2
 8018a1a:	9311      	str	r3, [sp, #68]	; 0x44
 8018a1c:	4653      	mov	r3, sl
 8018a1e:	f1a5 0410 	sub.w	r4, r5, #16
 8018a22:	0924      	lsrs	r4, r4, #4
 8018a24:	3401      	adds	r4, #1
 8018a26:	01a4      	lsls	r4, r4, #6
 8018a28:	f005 0907 	and.w	r9, r5, #7
 8018a2c:	9713      	str	r7, [sp, #76]	; 0x4c
 8018a2e:	960b      	str	r6, [sp, #44]	; 0x2c
 8018a30:	9417      	str	r4, [sp, #92]	; 0x5c
 8018a32:	eb01 0b02 	add.w	fp, r1, r2
 8018a36:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8018a3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018a3c:	9906      	ldr	r1, [sp, #24]
 8018a3e:	6992      	ldr	r2, [r2, #24]
 8018a40:	4459      	add	r1, fp
 8018a42:	6894      	ldr	r4, [r2, #8]
 8018a44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a46:	9105      	str	r1, [sp, #20]
 8018a48:	2a00      	cmp	r2, #0
 8018a4a:	f000 810b 	beq.w	8018c64 <forward_dense+0x35c>
 8018a4e:	6992      	ldr	r2, [r2, #24]
 8018a50:	6896      	ldr	r6, [r2, #8]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	f000 810a 	beq.w	8018c6c <forward_dense+0x364>
 8018a58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018a5a:	2a04      	cmp	r2, #4
 8018a5c:	f000 821a 	beq.w	8018e94 <forward_dense+0x58c>
 8018a60:	9a02      	ldr	r2, [sp, #8]
 8018a62:	4590      	cmp	r8, r2
 8018a64:	f240 80d3 	bls.w	8018c0e <forward_dense+0x306>
 8018a68:	4617      	mov	r7, r2
 8018a6a:	9a06      	ldr	r2, [sp, #24]
 8018a6c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8018a70:	f102 0c20 	add.w	ip, r2, #32
 8018a74:	44dc      	add	ip, fp
 8018a76:	46be      	mov	lr, r7
 8018a78:	4637      	mov	r7, r6
 8018a7a:	e9dd a613 	ldrd	sl, r6, [sp, #76]	; 0x4c
 8018a7e:	2f00      	cmp	r7, #0
 8018a80:	f000 80e3 	beq.w	8018c4a <forward_dense+0x342>
 8018a84:	9a01      	ldr	r2, [sp, #4]
 8018a86:	edd7 5a00 	vldr	s11, [r7]
 8018a8a:	3704      	adds	r7, #4
 8018a8c:	2a00      	cmp	r2, #0
 8018a8e:	f000 80e2 	beq.w	8018c56 <forward_dense+0x34e>
 8018a92:	4661      	mov	r1, ip
 8018a94:	ed9f 6a72 	vldr	s12, [pc, #456]	; 8018c60 <forward_dense+0x358>
 8018a98:	9803      	ldr	r0, [sp, #12]
 8018a9a:	f104 0208 	add.w	r2, r4, #8
 8018a9e:	1905      	adds	r5, r0, r4
 8018aa0:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8018aa4:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 8018aa8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018aac:	ed90 7a00 	vldr	s14, [r0]
 8018ab0:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 8018ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018ab8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018abc:	ed90 5a00 	vldr	s10, [r0]
 8018ac0:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 8018ac4:	f812 0c06 	ldrb.w	r0, [r2, #-6]
 8018ac8:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018acc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018ad0:	ed90 5a00 	vldr	s10, [r0]
 8018ad4:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
 8018ad8:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 8018adc:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018ae0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018ae4:	ed90 5a00 	vldr	s10, [r0]
 8018ae8:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 8018aec:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 8018af0:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018af4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018af8:	ed90 5a00 	vldr	s10, [r0]
 8018afc:	ed11 7a04 	vldr	s14, [r1, #-16]
 8018b00:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8018b04:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018b08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018b0c:	ed90 5a00 	vldr	s10, [r0]
 8018b10:	ed11 7a03 	vldr	s14, [r1, #-12]
 8018b14:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8018b18:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018b1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018b20:	ed90 5a00 	vldr	s10, [r0]
 8018b24:	ed11 7a02 	vldr	s14, [r1, #-8]
 8018b28:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8018b2c:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018b30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018b34:	ed11 7a01 	vldr	s14, [r1, #-4]
 8018b38:	ed90 5a00 	vldr	s10, [r0]
 8018b3c:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018b40:	3208      	adds	r2, #8
 8018b42:	4295      	cmp	r5, r2
 8018b44:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018b48:	f101 0120 	add.w	r1, r1, #32
 8018b4c:	d1a8      	bne.n	8018aa0 <forward_dense+0x198>
 8018b4e:	465a      	mov	r2, fp
 8018b50:	eb04 010a 	add.w	r1, r4, sl
 8018b54:	2e00      	cmp	r6, #0
 8018b56:	d04a      	beq.n	8018bee <forward_dense+0x2e6>
 8018b58:	7808      	ldrb	r0, [r1, #0]
 8018b5a:	ed92 7a00 	vldr	s14, [r2]
 8018b5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018b62:	edd0 7a00 	vldr	s15, [r0]
 8018b66:	2e01      	cmp	r6, #1
 8018b68:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b6c:	d03f      	beq.n	8018bee <forward_dense+0x2e6>
 8018b6e:	7848      	ldrb	r0, [r1, #1]
 8018b70:	edd2 7a01 	vldr	s15, [r2, #4]
 8018b74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018b78:	ed90 7a00 	vldr	s14, [r0]
 8018b7c:	2e02      	cmp	r6, #2
 8018b7e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b82:	d034      	beq.n	8018bee <forward_dense+0x2e6>
 8018b84:	7888      	ldrb	r0, [r1, #2]
 8018b86:	edd2 7a02 	vldr	s15, [r2, #8]
 8018b8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018b8e:	ed90 7a00 	vldr	s14, [r0]
 8018b92:	2e03      	cmp	r6, #3
 8018b94:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b98:	d029      	beq.n	8018bee <forward_dense+0x2e6>
 8018b9a:	78c8      	ldrb	r0, [r1, #3]
 8018b9c:	edd2 7a03 	vldr	s15, [r2, #12]
 8018ba0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018ba4:	ed90 7a00 	vldr	s14, [r0]
 8018ba8:	2e04      	cmp	r6, #4
 8018baa:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018bae:	d01e      	beq.n	8018bee <forward_dense+0x2e6>
 8018bb0:	7908      	ldrb	r0, [r1, #4]
 8018bb2:	edd2 7a04 	vldr	s15, [r2, #16]
 8018bb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018bba:	ed90 7a00 	vldr	s14, [r0]
 8018bbe:	2e05      	cmp	r6, #5
 8018bc0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018bc4:	d013      	beq.n	8018bee <forward_dense+0x2e6>
 8018bc6:	7948      	ldrb	r0, [r1, #5]
 8018bc8:	edd2 7a05 	vldr	s15, [r2, #20]
 8018bcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018bd0:	ed90 7a00 	vldr	s14, [r0]
 8018bd4:	2e06      	cmp	r6, #6
 8018bd6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018bda:	d008      	beq.n	8018bee <forward_dense+0x2e6>
 8018bdc:	7989      	ldrb	r1, [r1, #6]
 8018bde:	edd2 7a06 	vldr	s15, [r2, #24]
 8018be2:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8018be6:	ed92 7a00 	vldr	s14, [r2]
 8018bea:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018bee:	ee35 6a86 	vadd.f32	s12, s11, s12
 8018bf2:	ecae 6a01 	vstmia	lr!, {s12}
 8018bf6:	45c6      	cmp	lr, r8
 8018bf8:	444c      	add	r4, r9
 8018bfa:	f4ff af40 	bcc.w	8018a7e <forward_dense+0x176>
 8018bfe:	9902      	ldr	r1, [sp, #8]
 8018c00:	43ca      	mvns	r2, r1
 8018c02:	4442      	add	r2, r8
 8018c04:	f022 0203 	bic.w	r2, r2, #3
 8018c08:	3204      	adds	r2, #4
 8018c0a:	188a      	adds	r2, r1, r2
 8018c0c:	9202      	str	r2, [sp, #8]
 8018c0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018c10:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018c12:	4490      	add	r8, r2
 8018c14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018c16:	4493      	add	fp, r2
 8018c18:	9a02      	ldr	r2, [sp, #8]
 8018c1a:	428a      	cmp	r2, r1
 8018c1c:	f4ff af0d 	bcc.w	8018a3a <forward_dense+0x132>
 8018c20:	b019      	add	sp, #100	; 0x64
 8018c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c26:	2300      	movs	r3, #0
 8018c28:	685b      	ldr	r3, [r3, #4]
 8018c2a:	deff      	udf	#255	; 0xff
 8018c2c:	684b      	ldr	r3, [r1, #4]
 8018c2e:	deff      	udf	#255	; 0xff
 8018c30:	2300      	movs	r3, #0
 8018c32:	685b      	ldr	r3, [r3, #4]
 8018c34:	deff      	udf	#255	; 0xff
 8018c36:	681a      	ldr	r2, [r3, #0]
 8018c38:	920d      	str	r2, [sp, #52]	; 0x34
 8018c3a:	f11c 0218 	adds.w	r2, ip, #24
 8018c3e:	f47f ae85 	bne.w	801894c <forward_dense+0x44>
 8018c42:	920e      	str	r2, [sp, #56]	; 0x38
 8018c44:	e68c      	b.n	8018960 <forward_dense+0x58>
 8018c46:	930e      	str	r3, [sp, #56]	; 0x38
 8018c48:	e68a      	b.n	8018960 <forward_dense+0x58>
 8018c4a:	9a01      	ldr	r2, [sp, #4]
 8018c4c:	eef0 5a66 	vmov.f32	s11, s13
 8018c50:	2a00      	cmp	r2, #0
 8018c52:	f47f af1e 	bne.w	8018a92 <forward_dense+0x18a>
 8018c56:	9a05      	ldr	r2, [sp, #20]
 8018c58:	4621      	mov	r1, r4
 8018c5a:	ed9f 6a01 	vldr	s12, [pc, #4]	; 8018c60 <forward_dense+0x358>
 8018c5e:	e779      	b.n	8018b54 <forward_dense+0x24c>
 8018c60:	00000000 	.word	0x00000000
 8018c64:	4616      	mov	r6, r2
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	f47f aef6 	bne.w	8018a58 <forward_dense+0x150>
 8018c6c:	9a02      	ldr	r2, [sp, #8]
 8018c6e:	4590      	cmp	r8, r2
 8018c70:	d9cd      	bls.n	8018c0e <forward_dense+0x306>
 8018c72:	4615      	mov	r5, r2
 8018c74:	9a06      	ldr	r2, [sp, #24]
 8018c76:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018c78:	3240      	adds	r2, #64	; 0x40
 8018c7a:	eb02 070b 	add.w	r7, r2, fp
 8018c7e:	9a05      	ldr	r2, [sp, #20]
 8018c80:	468a      	mov	sl, r1
 8018c82:	4610      	mov	r0, r2
 8018c84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018c86:	9307      	str	r3, [sp, #28]
 8018c88:	4691      	mov	r9, r2
 8018c8a:	9b04      	ldr	r3, [sp, #16]
 8018c8c:	eb00 0c02 	add.w	ip, r0, r2
 8018c90:	f001 0e0f 	and.w	lr, r1, #15
 8018c94:	2e00      	cmp	r6, #0
 8018c96:	f000 81da 	beq.w	801904e <forward_dense+0x746>
 8018c9a:	f1ba 0f0f 	cmp.w	sl, #15
 8018c9e:	edd6 5a00 	vldr	s11, [r6]
 8018ca2:	f106 0604 	add.w	r6, r6, #4
 8018ca6:	f240 81d8 	bls.w	801905a <forward_dense+0x752>
 8018caa:	4639      	mov	r1, r7
 8018cac:	4650      	mov	r0, sl
 8018cae:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 8018c60 <forward_dense+0x358>
 8018cb2:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8018cb6:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 8018cba:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 8018cbe:	ed12 5a10 	vldr	s10, [r2, #-64]	; 0xffffffc0
 8018cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018cc6:	ed11 7a10 	vldr	s14, [r1, #-64]	; 0xffffffc0
 8018cca:	ed52 4a0e 	vldr	s9, [r2, #-56]	; 0xffffffc8
 8018cce:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018cd2:	ed11 7a0e 	vldr	s14, [r1, #-56]	; 0xffffffc8
 8018cd6:	ed12 5a0d 	vldr	s10, [r2, #-52]	; 0xffffffcc
 8018cda:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018cde:	ed11 7a0d 	vldr	s14, [r1, #-52]	; 0xffffffcc
 8018ce2:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 8018ce6:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018cea:	ed12 7a0c 	vldr	s14, [r2, #-48]	; 0xffffffd0
 8018cee:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 8018cf2:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018cf6:	ed12 7a0b 	vldr	s14, [r2, #-44]	; 0xffffffd4
 8018cfa:	ed51 4a0a 	vldr	s9, [r1, #-40]	; 0xffffffd8
 8018cfe:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018d02:	ed12 7a0a 	vldr	s14, [r2, #-40]	; 0xffffffd8
 8018d06:	ed12 5a09 	vldr	s10, [r2, #-36]	; 0xffffffdc
 8018d0a:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018d0e:	ed11 7a09 	vldr	s14, [r1, #-36]	; 0xffffffdc
 8018d12:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 8018d16:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018d1a:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 8018d1e:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 8018d22:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018d26:	ed11 7a07 	vldr	s14, [r1, #-28]	; 0xffffffe4
 8018d2a:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 8018d2e:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018d32:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
 8018d36:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 8018d3a:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018d3e:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 8018d42:	ed51 4a04 	vldr	s9, [r1, #-16]
 8018d46:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018d4a:	ed12 7a04 	vldr	s14, [r2, #-16]
 8018d4e:	ed11 5a03 	vldr	s10, [r1, #-12]
 8018d52:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018d56:	ed12 7a03 	vldr	s14, [r2, #-12]
 8018d5a:	ed51 4a02 	vldr	s9, [r1, #-8]
 8018d5e:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018d62:	ed12 7a02 	vldr	s14, [r2, #-8]
 8018d66:	ed12 5a01 	vldr	s10, [r2, #-4]
 8018d6a:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018d6e:	ed11 7a01 	vldr	s14, [r1, #-4]
 8018d72:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018d76:	3810      	subs	r0, #16
 8018d78:	280f      	cmp	r0, #15
 8018d7a:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8018d7e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018d82:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8018d86:	d896      	bhi.n	8018cb6 <forward_dense+0x3ae>
 8018d88:	4672      	mov	r2, lr
 8018d8a:	4661      	mov	r1, ip
 8018d8c:	eb04 0009 	add.w	r0, r4, r9
 8018d90:	2a00      	cmp	r2, #0
 8018d92:	d075      	beq.n	8018e80 <forward_dense+0x578>
 8018d94:	ed90 7a00 	vldr	s14, [r0]
 8018d98:	edd1 7a00 	vldr	s15, [r1]
 8018d9c:	2a01      	cmp	r2, #1
 8018d9e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018da2:	d06d      	beq.n	8018e80 <forward_dense+0x578>
 8018da4:	ed90 7a01 	vldr	s14, [r0, #4]
 8018da8:	edd1 7a01 	vldr	s15, [r1, #4]
 8018dac:	2a02      	cmp	r2, #2
 8018dae:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018db2:	d065      	beq.n	8018e80 <forward_dense+0x578>
 8018db4:	ed90 7a02 	vldr	s14, [r0, #8]
 8018db8:	edd1 7a02 	vldr	s15, [r1, #8]
 8018dbc:	2a03      	cmp	r2, #3
 8018dbe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018dc2:	d05d      	beq.n	8018e80 <forward_dense+0x578>
 8018dc4:	ed90 7a03 	vldr	s14, [r0, #12]
 8018dc8:	edd1 7a03 	vldr	s15, [r1, #12]
 8018dcc:	2a04      	cmp	r2, #4
 8018dce:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018dd2:	d055      	beq.n	8018e80 <forward_dense+0x578>
 8018dd4:	ed90 7a04 	vldr	s14, [r0, #16]
 8018dd8:	edd1 7a04 	vldr	s15, [r1, #16]
 8018ddc:	2a05      	cmp	r2, #5
 8018dde:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018de2:	d04d      	beq.n	8018e80 <forward_dense+0x578>
 8018de4:	ed90 7a05 	vldr	s14, [r0, #20]
 8018de8:	edd1 7a05 	vldr	s15, [r1, #20]
 8018dec:	2a06      	cmp	r2, #6
 8018dee:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018df2:	d045      	beq.n	8018e80 <forward_dense+0x578>
 8018df4:	ed90 7a06 	vldr	s14, [r0, #24]
 8018df8:	edd1 7a06 	vldr	s15, [r1, #24]
 8018dfc:	2a07      	cmp	r2, #7
 8018dfe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018e02:	d03d      	beq.n	8018e80 <forward_dense+0x578>
 8018e04:	ed90 7a07 	vldr	s14, [r0, #28]
 8018e08:	edd1 7a07 	vldr	s15, [r1, #28]
 8018e0c:	2a08      	cmp	r2, #8
 8018e0e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018e12:	d035      	beq.n	8018e80 <forward_dense+0x578>
 8018e14:	ed90 7a08 	vldr	s14, [r0, #32]
 8018e18:	edd1 7a08 	vldr	s15, [r1, #32]
 8018e1c:	2a09      	cmp	r2, #9
 8018e1e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018e22:	d02d      	beq.n	8018e80 <forward_dense+0x578>
 8018e24:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8018e28:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8018e2c:	2a0a      	cmp	r2, #10
 8018e2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018e32:	d025      	beq.n	8018e80 <forward_dense+0x578>
 8018e34:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8018e38:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8018e3c:	2a0b      	cmp	r2, #11
 8018e3e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018e42:	d01d      	beq.n	8018e80 <forward_dense+0x578>
 8018e44:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8018e48:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 8018e4c:	2a0c      	cmp	r2, #12
 8018e4e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018e52:	d015      	beq.n	8018e80 <forward_dense+0x578>
 8018e54:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8018e58:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 8018e5c:	2a0d      	cmp	r2, #13
 8018e5e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018e62:	d00d      	beq.n	8018e80 <forward_dense+0x578>
 8018e64:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8018e68:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8018e6c:	2a0e      	cmp	r2, #14
 8018e6e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018e72:	d005      	beq.n	8018e80 <forward_dense+0x578>
 8018e74:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8018e78:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018e7c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018e80:	ee35 6a86 	vadd.f32	s12, s11, s12
 8018e84:	eca5 6a01 	vstmia	r5!, {s12}
 8018e88:	4545      	cmp	r5, r8
 8018e8a:	441c      	add	r4, r3
 8018e8c:	f4ff af02 	bcc.w	8018c94 <forward_dense+0x38c>
 8018e90:	9b07      	ldr	r3, [sp, #28]
 8018e92:	e6b4      	b.n	8018bfe <forward_dense+0x2f6>
 8018e94:	9902      	ldr	r1, [sp, #8]
 8018e96:	4588      	cmp	r8, r1
 8018e98:	f67f aeb9 	bls.w	8018c0e <forward_dense+0x306>
 8018e9c:	4689      	mov	r9, r1
 8018e9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018ea0:	eb02 000b 	add.w	r0, r2, fp
 8018ea4:	9a06      	ldr	r2, [sp, #24]
 8018ea6:	9007      	str	r0, [sp, #28]
 8018ea8:	3220      	adds	r2, #32
 8018eaa:	3007      	adds	r0, #7
 8018eac:	445a      	add	r2, fp
 8018eae:	900a      	str	r0, [sp, #40]	; 0x28
 8018eb0:	9209      	str	r2, [sp, #36]	; 0x24
 8018eb2:	2e00      	cmp	r6, #0
 8018eb4:	f000 80b5 	beq.w	8019022 <forward_dense+0x71a>
 8018eb8:	9a01      	ldr	r2, [sp, #4]
 8018eba:	edd6 5a00 	vldr	s11, [r6]
 8018ebe:	3604      	adds	r6, #4
 8018ec0:	2a00      	cmp	r2, #0
 8018ec2:	f000 80b4 	beq.w	801902e <forward_dense+0x726>
 8018ec6:	ed1f 6a9a 	vldr	s12, [pc, #-616]	; 8018c60 <forward_dense+0x358>
 8018eca:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ece:	1d21      	adds	r1, r4, #4
 8018ed0:	1905      	adds	r5, r0, r4
 8018ed2:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8018ed6:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 8018eda:	f000 070f 	and.w	r7, r0, #15
 8018ede:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018ee2:	ed97 7a00 	vldr	s14, [r7]
 8018ee6:	0900      	lsrs	r0, r0, #4
 8018ee8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018eec:	ed90 5a00 	vldr	s10, [r0]
 8018ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018ef4:	ed12 7a08 	vldr	s14, [r2, #-32]	; 0xffffffe0
 8018ef8:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8018efc:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018f00:	0907      	lsrs	r7, r0, #4
 8018f02:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018f06:	ed97 5a00 	vldr	s10, [r7]
 8018f0a:	ed12 7a06 	vldr	s14, [r2, #-24]	; 0xffffffe8
 8018f0e:	f000 000f 	and.w	r0, r0, #15
 8018f12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018f16:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018f1a:	ed90 5a00 	vldr	s10, [r0]
 8018f1e:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8018f22:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8018f26:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018f2a:	0907      	lsrs	r7, r0, #4
 8018f2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018f30:	ed97 5a00 	vldr	s10, [r7]
 8018f34:	ed12 7a04 	vldr	s14, [r2, #-16]
 8018f38:	f000 000f 	and.w	r0, r0, #15
 8018f3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018f40:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018f44:	ed90 5a00 	vldr	s10, [r0]
 8018f48:	ed12 7a03 	vldr	s14, [r2, #-12]
 8018f4c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8018f50:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018f54:	0907      	lsrs	r7, r0, #4
 8018f56:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018f5a:	ed12 7a02 	vldr	s14, [r2, #-8]
 8018f5e:	ed97 5a00 	vldr	s10, [r7]
 8018f62:	f000 000f 	and.w	r0, r0, #15
 8018f66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018f6a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018f6e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8018f72:	ed90 5a00 	vldr	s10, [r0]
 8018f76:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018f7a:	3104      	adds	r1, #4
 8018f7c:	428d      	cmp	r5, r1
 8018f7e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018f82:	f102 0220 	add.w	r2, r2, #32
 8018f86:	d1a4      	bne.n	8018ed2 <forward_dense+0x5ca>
 8018f88:	46de      	mov	lr, fp
 8018f8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f8c:	eb04 0a02 	add.w	sl, r4, r2
 8018f90:	9a07      	ldr	r2, [sp, #28]
 8018f92:	4596      	cmp	lr, r2
 8018f94:	d22c      	bcs.n	8018ff0 <forward_dense+0x6e8>
 8018f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f98:	f10e 0108 	add.w	r1, lr, #8
 8018f9c:	eba2 0c01 	sub.w	ip, r2, r1
 8018fa0:	f02c 0207 	bic.w	r2, ip, #7
 8018fa4:	f10e 0710 	add.w	r7, lr, #16
 8018fa8:	4417      	add	r7, r2
 8018faa:	f10a 35ff 	add.w	r5, sl, #4294967295
 8018fae:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8018fb2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8018fb6:	f002 000f 	and.w	r0, r2, #15
 8018fba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018fbe:	ed90 7a00 	vldr	s14, [r0]
 8018fc2:	0912      	lsrs	r2, r2, #4
 8018fc4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8018fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018fcc:	ed92 5a00 	vldr	s10, [r2]
 8018fd0:	ed11 7a02 	vldr	s14, [r1, #-8]
 8018fd4:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018fd8:	3108      	adds	r1, #8
 8018fda:	428f      	cmp	r7, r1
 8018fdc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018fe0:	d1e5      	bne.n	8018fae <forward_dense+0x6a6>
 8018fe2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8018fe6:	f10c 0c01 	add.w	ip, ip, #1
 8018fea:	44e2      	add	sl, ip
 8018fec:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 8018ff0:	9a08      	ldr	r2, [sp, #32]
 8018ff2:	b312      	cbz	r2, 801903a <forward_dense+0x732>
 8018ff4:	f89a 2000 	ldrb.w	r2, [sl]
 8018ff8:	edde 7a00 	vldr	s15, [lr]
 8018ffc:	0912      	lsrs	r2, r2, #4
 8018ffe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8019002:	ed92 7a00 	vldr	s14, [r2]
 8019006:	eea7 6a27 	vfma.f32	s12, s14, s15
 801900a:	ee76 5a25 	vadd.f32	s11, s12, s11
 801900e:	ece9 5a01 	vstmia	r9!, {s11}
 8019012:	9a04      	ldr	r2, [sp, #16]
 8019014:	45c8      	cmp	r8, r9
 8019016:	4414      	add	r4, r2
 8019018:	f67f adf1 	bls.w	8018bfe <forward_dense+0x2f6>
 801901c:	2e00      	cmp	r6, #0
 801901e:	f47f af4b 	bne.w	8018eb8 <forward_dense+0x5b0>
 8019022:	9a01      	ldr	r2, [sp, #4]
 8019024:	eef0 5a66 	vmov.f32	s11, s13
 8019028:	2a00      	cmp	r2, #0
 801902a:	f47f af4c 	bne.w	8018ec6 <forward_dense+0x5be>
 801902e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8019032:	46a2      	mov	sl, r4
 8019034:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80190a4 <forward_dense+0x79c>
 8019038:	e7aa      	b.n	8018f90 <forward_dense+0x688>
 801903a:	ee35 6a86 	vadd.f32	s12, s11, s12
 801903e:	eca9 6a01 	vstmia	r9!, {s12}
 8019042:	9a04      	ldr	r2, [sp, #16]
 8019044:	45c1      	cmp	r9, r8
 8019046:	4414      	add	r4, r2
 8019048:	f4ff af33 	bcc.w	8018eb2 <forward_dense+0x5aa>
 801904c:	e5d7      	b.n	8018bfe <forward_dense+0x2f6>
 801904e:	f1ba 0f0f 	cmp.w	sl, #15
 8019052:	eef0 5a66 	vmov.f32	s11, s13
 8019056:	f63f ae28 	bhi.w	8018caa <forward_dense+0x3a2>
 801905a:	4652      	mov	r2, sl
 801905c:	4620      	mov	r0, r4
 801905e:	9905      	ldr	r1, [sp, #20]
 8019060:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80190a4 <forward_dense+0x79c>
 8019064:	e694      	b.n	8018d90 <forward_dense+0x488>
 8019066:	2300      	movs	r3, #0
 8019068:	685b      	ldr	r3, [r3, #4]
 801906a:	deff      	udf	#255	; 0xff
 801906c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8019070:	2b04      	cmp	r3, #4
 8019072:	4691      	mov	r9, r2
 8019074:	f47f ac9d 	bne.w	80189b2 <forward_dense+0xaa>
 8019078:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801907c:	f1b9 0f00 	cmp.w	r9, #0
 8019080:	f43f ac9c 	beq.w	80189bc <forward_dense+0xb4>
 8019084:	e9d9 0100 	ldrd	r0, r1, [r9]
 8019088:	f000 fac6 	bl	8019618 <ai_array_get_byte_size>
 801908c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019090:	4602      	mov	r2, r0
 8019092:	4651      	mov	r1, sl
 8019094:	4618      	mov	r0, r3
 8019096:	f001 fd69 	bl	801ab6c <memcpy>
 801909a:	4682      	mov	sl, r0
 801909c:	e48e      	b.n	80189bc <forward_dense+0xb4>
 801909e:	2300      	movs	r3, #0
 80190a0:	930e      	str	r3, [sp, #56]	; 0x38
 80190a2:	e45d      	b.n	8018960 <forward_dense+0x58>
 80190a4:	00000000 	.word	0x00000000

080190a8 <nl_func_sm_array_f32>:
 80190a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190ac:	ed2d 8b04 	vpush	{d8-d9}
 80190b0:	6984      	ldr	r4, [r0, #24]
 80190b2:	b089      	sub	sp, #36	; 0x24
 80190b4:	4626      	mov	r6, r4
 80190b6:	698f      	ldr	r7, [r1, #24]
 80190b8:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80190bc:	68bd      	ldr	r5, [r7, #8]
 80190be:	9402      	str	r4, [sp, #8]
 80190c0:	eba2 040e 	sub.w	r4, r2, lr
 80190c4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80190c8:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 80190cc:	68fc      	ldr	r4, [r7, #12]
 80190ce:	68b6      	ldr	r6, [r6, #8]
 80190d0:	eba2 020c 	sub.w	r2, r2, ip
 80190d4:	42a5      	cmp	r5, r4
 80190d6:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 80190da:	d351      	bcc.n	8019180 <nl_func_sm_array_f32+0xd8>
 80190dc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80190e0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80190e4:	f1ce 0200 	rsb	r2, lr, #0
 80190e8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80190ec:	e9cd 1006 	strd	r1, r0, [sp, #24]
 80190f0:	9303      	str	r3, [sp, #12]
 80190f2:	9204      	str	r2, [sp, #16]
 80190f4:	009b      	lsls	r3, r3, #2
 80190f6:	f1cc 0200 	rsb	r2, ip, #0
 80190fa:	9205      	str	r2, [sp, #20]
 80190fc:	9301      	str	r3, [sp, #4]
 80190fe:	9b02      	ldr	r3, [sp, #8]
 8019100:	9a07      	ldr	r2, [sp, #28]
 8019102:	60bd      	str	r5, [r7, #8]
 8019104:	609e      	str	r6, [r3, #8]
 8019106:	9b06      	ldr	r3, [sp, #24]
 8019108:	6992      	ldr	r2, [r2, #24]
 801910a:	699b      	ldr	r3, [r3, #24]
 801910c:	6894      	ldr	r4, [r2, #8]
 801910e:	9a03      	ldr	r2, [sp, #12]
 8019110:	689b      	ldr	r3, [r3, #8]
 8019112:	2a01      	cmp	r2, #1
 8019114:	ed93 8a00 	vldr	s16, [r3]
 8019118:	d93b      	bls.n	8019192 <nl_func_sm_array_f32+0xea>
 801911a:	9901      	ldr	r1, [sp, #4]
 801911c:	1d1a      	adds	r2, r3, #4
 801911e:	eb03 0b01 	add.w	fp, r3, r1
 8019122:	ecf2 7a01 	vldmia	r2!, {s15}
 8019126:	4593      	cmp	fp, r2
 8019128:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 801912c:	d1f9      	bne.n	8019122 <nl_func_sm_array_f32+0x7a>
 801912e:	469a      	mov	sl, r3
 8019130:	46a1      	mov	r9, r4
 8019132:	46a0      	mov	r8, r4
 8019134:	eddf 8a1a 	vldr	s17, [pc, #104]	; 80191a0 <nl_func_sm_array_f32+0xf8>
 8019138:	ecba 0a01 	vldmia	sl!, {s0}
 801913c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8019140:	f006 f9c8 	bl	801f4d4 <expf>
 8019144:	45d3      	cmp	fp, sl
 8019146:	eca8 0a01 	vstmia	r8!, {s0}
 801914a:	ee78 8a80 	vadd.f32	s17, s17, s0
 801914e:	d1f3      	bne.n	8019138 <nl_func_sm_array_f32+0x90>
 8019150:	eef5 8a40 	vcmp.f32	s17, #0.0
 8019154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019158:	d00b      	beq.n	8019172 <nl_func_sm_array_f32+0xca>
 801915a:	ee89 7a28 	vdiv.f32	s14, s18, s17
 801915e:	9b01      	ldr	r3, [sp, #4]
 8019160:	441c      	add	r4, r3
 8019162:	edd9 7a00 	vldr	s15, [r9]
 8019166:	ee67 7a87 	vmul.f32	s15, s15, s14
 801916a:	ece9 7a01 	vstmia	r9!, {s15}
 801916e:	454c      	cmp	r4, r9
 8019170:	d1f7      	bne.n	8019162 <nl_func_sm_array_f32+0xba>
 8019172:	9b04      	ldr	r3, [sp, #16]
 8019174:	68fc      	ldr	r4, [r7, #12]
 8019176:	441d      	add	r5, r3
 8019178:	9b05      	ldr	r3, [sp, #20]
 801917a:	42ac      	cmp	r4, r5
 801917c:	441e      	add	r6, r3
 801917e:	d9be      	bls.n	80190fe <nl_func_sm_array_f32+0x56>
 8019180:	9a02      	ldr	r2, [sp, #8]
 8019182:	60bc      	str	r4, [r7, #8]
 8019184:	68d3      	ldr	r3, [r2, #12]
 8019186:	6093      	str	r3, [r2, #8]
 8019188:	b009      	add	sp, #36	; 0x24
 801918a:	ecbd 8b04 	vpop	{d8-d9}
 801918e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019192:	2a00      	cmp	r2, #0
 8019194:	d0ed      	beq.n	8019172 <nl_func_sm_array_f32+0xca>
 8019196:	9a01      	ldr	r2, [sp, #4]
 8019198:	eb03 0b02 	add.w	fp, r3, r2
 801919c:	e7c7      	b.n	801912e <nl_func_sm_array_f32+0x86>
 801919e:	bf00      	nop
 80191a0:	00000000 	.word	0x00000000

080191a4 <nl_func_relu_generic_array_f32>:
 80191a4:	b430      	push	{r4, r5}
 80191a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80191aa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80191ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191b2:	6989      	ldr	r1, [r1, #24]
 80191b4:	6980      	ldr	r0, [r0, #24]
 80191b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80191ba:	f102 32ff 	add.w	r2, r2, #4294967295
 80191be:	6880      	ldr	r0, [r0, #8]
 80191c0:	688c      	ldr	r4, [r1, #8]
 80191c2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80191c6:	4410      	add	r0, r2
 80191c8:	edd3 6a00 	vldr	s13, [r3]
 80191cc:	4422      	add	r2, r4
 80191ce:	ed93 6a01 	vldr	s12, [r3, #4]
 80191d2:	d421      	bmi.n	8019218 <nl_func_relu_generic_array_f32+0x74>
 80191d4:	4294      	cmp	r4, r2
 80191d6:	d83d      	bhi.n	8019254 <nl_func_relu_generic_array_f32+0xb0>
 80191d8:	1d13      	adds	r3, r2, #4
 80191da:	1d02      	adds	r2, r0, #4
 80191dc:	e010      	b.n	8019200 <nl_func_relu_generic_array_f32+0x5c>
 80191de:	eef4 7ae6 	vcmpe.f32	s15, s13
 80191e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191e6:	d503      	bpl.n	80191f0 <nl_func_relu_generic_array_f32+0x4c>
 80191e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80191ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80191f0:	ed62 7a01 	vstmdb	r2!, {s15}
 80191f4:	6888      	ldr	r0, [r1, #8]
 80191f6:	f1a3 0408 	sub.w	r4, r3, #8
 80191fa:	4284      	cmp	r4, r0
 80191fc:	462b      	mov	r3, r5
 80191fe:	d329      	bcc.n	8019254 <nl_func_relu_generic_array_f32+0xb0>
 8019200:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801920c:	f1a3 0504 	sub.w	r5, r3, #4
 8019210:	d4e5      	bmi.n	80191de <nl_func_relu_generic_array_f32+0x3a>
 8019212:	eef0 7a47 	vmov.f32	s15, s14
 8019216:	e7eb      	b.n	80191f0 <nl_func_relu_generic_array_f32+0x4c>
 8019218:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801921c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019220:	d01a      	beq.n	8019258 <nl_func_relu_generic_array_f32+0xb4>
 8019222:	4294      	cmp	r4, r2
 8019224:	d816      	bhi.n	8019254 <nl_func_relu_generic_array_f32+0xb0>
 8019226:	1d13      	adds	r3, r2, #4
 8019228:	1d02      	adds	r2, r0, #4
 801922a:	ed53 7a01 	vldr	s15, [r3, #-4]
 801922e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019236:	f1a3 0408 	sub.w	r4, r3, #8
 801923a:	f1a3 0004 	sub.w	r0, r3, #4
 801923e:	4623      	mov	r3, r4
 8019240:	d522      	bpl.n	8019288 <nl_func_relu_generic_array_f32+0xe4>
 8019242:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019246:	ee67 7a86 	vmul.f32	s15, s15, s12
 801924a:	ed62 7a01 	vstmdb	r2!, {s15}
 801924e:	688b      	ldr	r3, [r1, #8]
 8019250:	42a3      	cmp	r3, r4
 8019252:	d91e      	bls.n	8019292 <nl_func_relu_generic_array_f32+0xee>
 8019254:	bc30      	pop	{r4, r5}
 8019256:	4770      	bx	lr
 8019258:	4294      	cmp	r4, r2
 801925a:	d8fb      	bhi.n	8019254 <nl_func_relu_generic_array_f32+0xb0>
 801925c:	2500      	movs	r5, #0
 801925e:	1d13      	adds	r3, r2, #4
 8019260:	1d02      	adds	r2, r0, #4
 8019262:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019266:	eef4 7ae6 	vcmpe.f32	s15, s13
 801926a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801926e:	f1a3 0408 	sub.w	r4, r3, #8
 8019272:	f1a3 0004 	sub.w	r0, r3, #4
 8019276:	4623      	mov	r3, r4
 8019278:	db0d      	blt.n	8019296 <nl_func_relu_generic_array_f32+0xf2>
 801927a:	ed62 7a01 	vstmdb	r2!, {s15}
 801927e:	688b      	ldr	r3, [r1, #8]
 8019280:	42a3      	cmp	r3, r4
 8019282:	d8e7      	bhi.n	8019254 <nl_func_relu_generic_array_f32+0xb0>
 8019284:	4603      	mov	r3, r0
 8019286:	e7ec      	b.n	8019262 <nl_func_relu_generic_array_f32+0xbe>
 8019288:	ed62 7a01 	vstmdb	r2!, {s15}
 801928c:	688c      	ldr	r4, [r1, #8]
 801928e:	429c      	cmp	r4, r3
 8019290:	d8e0      	bhi.n	8019254 <nl_func_relu_generic_array_f32+0xb0>
 8019292:	4603      	mov	r3, r0
 8019294:	e7c9      	b.n	801922a <nl_func_relu_generic_array_f32+0x86>
 8019296:	f842 5d04 	str.w	r5, [r2, #-4]!
 801929a:	688c      	ldr	r4, [r1, #8]
 801929c:	429c      	cmp	r4, r3
 801929e:	d8d9      	bhi.n	8019254 <nl_func_relu_generic_array_f32+0xb0>
 80192a0:	4603      	mov	r3, r0
 80192a2:	e7de      	b.n	8019262 <nl_func_relu_generic_array_f32+0xbe>

080192a4 <forward_relu>:
 80192a4:	6982      	ldr	r2, [r0, #24]
 80192a6:	8813      	ldrh	r3, [r2, #0]
 80192a8:	b32b      	cbz	r3, 80192f6 <forward_relu+0x52>
 80192aa:	6852      	ldr	r2, [r2, #4]
 80192ac:	6851      	ldr	r1, [r2, #4]
 80192ae:	b101      	cbz	r1, 80192b2 <forward_relu+0xe>
 80192b0:	6809      	ldr	r1, [r1, #0]
 80192b2:	2b01      	cmp	r3, #1
 80192b4:	d91c      	bls.n	80192f0 <forward_relu+0x4c>
 80192b6:	b4f0      	push	{r4, r5, r6, r7}
 80192b8:	6917      	ldr	r7, [r2, #16]
 80192ba:	b107      	cbz	r7, 80192be <forward_relu+0x1a>
 80192bc:	683f      	ldr	r7, [r7, #0]
 80192be:	688c      	ldr	r4, [r1, #8]
 80192c0:	69c3      	ldr	r3, [r0, #28]
 80192c2:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d043      	beq.n	8019352 <forward_relu+0xae>
 80192ca:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 80192ce:	2d01      	cmp	r5, #1
 80192d0:	d013      	beq.n	80192fa <forward_relu+0x56>
 80192d2:	2201      	movs	r2, #1
 80192d4:	b144      	cbz	r4, 80192e8 <forward_relu+0x44>
 80192d6:	68ce      	ldr	r6, [r1, #12]
 80192d8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80192dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80192e0:	42a6      	cmp	r6, r4
 80192e2:	fb05 f202 	mul.w	r2, r5, r2
 80192e6:	d1f9      	bne.n	80192dc <forward_relu+0x38>
 80192e8:	4638      	mov	r0, r7
 80192ea:	bcf0      	pop	{r4, r5, r6, r7}
 80192ec:	f7ff bf5a 	b.w	80191a4 <nl_func_relu_generic_array_f32>
 80192f0:	2300      	movs	r3, #0
 80192f2:	685b      	ldr	r3, [r3, #4]
 80192f4:	deff      	udf	#255	; 0xff
 80192f6:	685b      	ldr	r3, [r3, #4]
 80192f8:	deff      	udf	#255	; 0xff
 80192fa:	69ba      	ldr	r2, [r7, #24]
 80192fc:	6988      	ldr	r0, [r1, #24]
 80192fe:	6896      	ldr	r6, [r2, #8]
 8019300:	ed93 7a00 	vldr	s14, [r3]
 8019304:	6882      	ldr	r2, [r0, #8]
 8019306:	b184      	cbz	r4, 801932a <forward_relu+0x86>
 8019308:	462b      	mov	r3, r5
 801930a:	68cd      	ldr	r5, [r1, #12]
 801930c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8019310:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8019314:	42a5      	cmp	r5, r4
 8019316:	fb01 f303 	mul.w	r3, r1, r3
 801931a:	d1f9      	bne.n	8019310 <forward_relu+0x6c>
 801931c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019320:	3b01      	subs	r3, #1
 8019322:	009b      	lsls	r3, r3, #2
 8019324:	18d2      	adds	r2, r2, r3
 8019326:	441e      	add	r6, r3
 8019328:	d23a      	bcs.n	80193a0 <forward_relu+0xfc>
 801932a:	2500      	movs	r5, #0
 801932c:	1d13      	adds	r3, r2, #4
 801932e:	1d32      	adds	r2, r6, #4
 8019330:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801933c:	f1a3 0104 	sub.w	r1, r3, #4
 8019340:	d830      	bhi.n	80193a4 <forward_relu+0x100>
 8019342:	ed62 7a01 	vstmdb	r2!, {s15}
 8019346:	6884      	ldr	r4, [r0, #8]
 8019348:	3b08      	subs	r3, #8
 801934a:	429c      	cmp	r4, r3
 801934c:	d828      	bhi.n	80193a0 <forward_relu+0xfc>
 801934e:	460b      	mov	r3, r1
 8019350:	e7ee      	b.n	8019330 <forward_relu+0x8c>
 8019352:	69bb      	ldr	r3, [r7, #24]
 8019354:	698d      	ldr	r5, [r1, #24]
 8019356:	6898      	ldr	r0, [r3, #8]
 8019358:	68ab      	ldr	r3, [r5, #8]
 801935a:	b184      	cbz	r4, 801937e <forward_relu+0xda>
 801935c:	2201      	movs	r2, #1
 801935e:	68ce      	ldr	r6, [r1, #12]
 8019360:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8019364:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8019368:	42a6      	cmp	r6, r4
 801936a:	fb01 f202 	mul.w	r2, r1, r2
 801936e:	d1f9      	bne.n	8019364 <forward_relu+0xc0>
 8019370:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8019374:	3a01      	subs	r2, #1
 8019376:	0092      	lsls	r2, r2, #2
 8019378:	189b      	adds	r3, r3, r2
 801937a:	4410      	add	r0, r2
 801937c:	d210      	bcs.n	80193a0 <forward_relu+0xfc>
 801937e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80193b4 <forward_relu+0x110>
 8019382:	3304      	adds	r3, #4
 8019384:	1d01      	adds	r1, r0, #4
 8019386:	ed53 7a01 	vldr	s15, [r3, #-4]
 801938a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801938e:	ed61 7a01 	vstmdb	r1!, {s15}
 8019392:	68a8      	ldr	r0, [r5, #8]
 8019394:	f1a3 0208 	sub.w	r2, r3, #8
 8019398:	4290      	cmp	r0, r2
 801939a:	f1a3 0304 	sub.w	r3, r3, #4
 801939e:	d9f2      	bls.n	8019386 <forward_relu+0xe2>
 80193a0:	bcf0      	pop	{r4, r5, r6, r7}
 80193a2:	4770      	bx	lr
 80193a4:	f842 5d04 	str.w	r5, [r2, #-4]!
 80193a8:	6884      	ldr	r4, [r0, #8]
 80193aa:	3b08      	subs	r3, #8
 80193ac:	429c      	cmp	r4, r3
 80193ae:	d8f7      	bhi.n	80193a0 <forward_relu+0xfc>
 80193b0:	460b      	mov	r3, r1
 80193b2:	e7bd      	b.n	8019330 <forward_relu+0x8c>
 80193b4:	00000000 	.word	0x00000000

080193b8 <forward_sm>:
 80193b8:	6982      	ldr	r2, [r0, #24]
 80193ba:	8813      	ldrh	r3, [r2, #0]
 80193bc:	b333      	cbz	r3, 801940c <forward_sm+0x54>
 80193be:	6852      	ldr	r2, [r2, #4]
 80193c0:	6851      	ldr	r1, [r2, #4]
 80193c2:	b101      	cbz	r1, 80193c6 <forward_sm+0xe>
 80193c4:	6809      	ldr	r1, [r1, #0]
 80193c6:	2b01      	cmp	r3, #1
 80193c8:	d91d      	bls.n	8019406 <forward_sm+0x4e>
 80193ca:	6913      	ldr	r3, [r2, #16]
 80193cc:	b1cb      	cbz	r3, 8019402 <forward_sm+0x4a>
 80193ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193d0:	6818      	ldr	r0, [r3, #0]
 80193d2:	688c      	ldr	r4, [r1, #8]
 80193d4:	68c3      	ldr	r3, [r0, #12]
 80193d6:	68ce      	ldr	r6, [r1, #12]
 80193d8:	0a24      	lsrs	r4, r4, #8
 80193da:	685f      	ldr	r7, [r3, #4]
 80193dc:	b083      	sub	sp, #12
 80193de:	6873      	ldr	r3, [r6, #4]
 80193e0:	f04f 0201 	mov.w	r2, #1
 80193e4:	d007      	beq.n	80193f6 <forward_sm+0x3e>
 80193e6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80193ea:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80193ee:	42a6      	cmp	r6, r4
 80193f0:	fb05 f202 	mul.w	r2, r5, r2
 80193f4:	d1f9      	bne.n	80193ea <forward_sm+0x32>
 80193f6:	e9cd 3700 	strd	r3, r7, [sp]
 80193fa:	f7ff fe55 	bl	80190a8 <nl_func_sm_array_f32>
 80193fe:	b003      	add	sp, #12
 8019400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019402:	68db      	ldr	r3, [r3, #12]
 8019404:	deff      	udf	#255	; 0xff
 8019406:	2300      	movs	r3, #0
 8019408:	685b      	ldr	r3, [r3, #4]
 801940a:	deff      	udf	#255	; 0xff
 801940c:	685b      	ldr	r3, [r3, #4]
 801940e:	deff      	udf	#255	; 0xff

08019410 <ai_check_custom_types>:
 8019410:	4b13      	ldr	r3, [pc, #76]	; (8019460 <ai_check_custom_types+0x50>)
 8019412:	b082      	sub	sp, #8
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	9301      	str	r3, [sp, #4]
 8019418:	b118      	cbz	r0, 8019422 <ai_check_custom_types+0x12>
 801941a:	7803      	ldrb	r3, [r0, #0]
 801941c:	2b03      	cmp	r3, #3
 801941e:	d002      	beq.n	8019426 <ai_check_custom_types+0x16>
 8019420:	2000      	movs	r0, #0
 8019422:	b002      	add	sp, #8
 8019424:	4770      	bx	lr
 8019426:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801942a:	4293      	cmp	r3, r2
 801942c:	d004      	beq.n	8019438 <ai_check_custom_types+0x28>
 801942e:	2001      	movs	r0, #1
 8019430:	f080 0001 	eor.w	r0, r0, #1
 8019434:	b002      	add	sp, #8
 8019436:	4770      	bx	lr
 8019438:	7842      	ldrb	r2, [r0, #1]
 801943a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801943e:	3001      	adds	r0, #1
 8019440:	429a      	cmp	r2, r3
 8019442:	d1f4      	bne.n	801942e <ai_check_custom_types+0x1e>
 8019444:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8019448:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801944c:	429a      	cmp	r2, r3
 801944e:	d1ee      	bne.n	801942e <ai_check_custom_types+0x1e>
 8019450:	7842      	ldrb	r2, [r0, #1]
 8019452:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019456:	429a      	cmp	r2, r3
 8019458:	d1e9      	bne.n	801942e <ai_check_custom_types+0x1e>
 801945a:	2000      	movs	r0, #0
 801945c:	e7e8      	b.n	8019430 <ai_check_custom_types+0x20>
 801945e:	bf00      	nop
 8019460:	0801f848 	.word	0x0801f848

08019464 <ai_layers_init_all>:
 8019464:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8019466:	b17a      	cbz	r2, 8019488 <ai_layers_init_all+0x24>
 8019468:	6913      	ldr	r3, [r2, #16]
 801946a:	60d0      	str	r0, [r2, #12]
 801946c:	429a      	cmp	r2, r3
 801946e:	f04f 0201 	mov.w	r2, #1
 8019472:	d009      	beq.n	8019488 <ai_layers_init_all+0x24>
 8019474:	b143      	cbz	r3, 8019488 <ai_layers_init_all+0x24>
 8019476:	6919      	ldr	r1, [r3, #16]
 8019478:	60d8      	str	r0, [r3, #12]
 801947a:	4299      	cmp	r1, r3
 801947c:	f102 0201 	add.w	r2, r2, #1
 8019480:	d002      	beq.n	8019488 <ai_layers_init_all+0x24>
 8019482:	460b      	mov	r3, r1
 8019484:	2b00      	cmp	r3, #0
 8019486:	d1f6      	bne.n	8019476 <ai_layers_init_all+0x12>
 8019488:	4610      	mov	r0, r2
 801948a:	4770      	bx	lr

0801948c <ai_layers_post_init_all>:
 801948c:	b538      	push	{r3, r4, r5, lr}
 801948e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8019490:	b184      	cbz	r4, 80194b4 <ai_layers_post_init_all+0x28>
 8019492:	2500      	movs	r5, #0
 8019494:	6863      	ldr	r3, [r4, #4]
 8019496:	07db      	lsls	r3, r3, #31
 8019498:	d504      	bpl.n	80194a4 <ai_layers_post_init_all+0x18>
 801949a:	6a23      	ldr	r3, [r4, #32]
 801949c:	b113      	cbz	r3, 80194a4 <ai_layers_post_init_all+0x18>
 801949e:	4620      	mov	r0, r4
 80194a0:	4798      	blx	r3
 80194a2:	3501      	adds	r5, #1
 80194a4:	6923      	ldr	r3, [r4, #16]
 80194a6:	42a3      	cmp	r3, r4
 80194a8:	d002      	beq.n	80194b0 <ai_layers_post_init_all+0x24>
 80194aa:	461c      	mov	r4, r3
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d1f1      	bne.n	8019494 <ai_layers_post_init_all+0x8>
 80194b0:	4628      	mov	r0, r5
 80194b2:	bd38      	pop	{r3, r4, r5, pc}
 80194b4:	4625      	mov	r5, r4
 80194b6:	e7fb      	b.n	80194b0 <ai_layers_post_init_all+0x24>

080194b8 <ai_layers_forward_all>:
 80194b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194bc:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80194be:	4604      	mov	r4, r0
 80194c0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80194c2:	b31f      	cbz	r7, 801950c <ai_layers_forward_all+0x54>
 80194c4:	b1f5      	cbz	r5, 8019504 <ai_layers_forward_all+0x4c>
 80194c6:	2600      	movs	r6, #0
 80194c8:	6385      	str	r5, [r0, #56]	; 0x38
 80194ca:	4629      	mov	r1, r5
 80194cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80194ce:	2001      	movs	r0, #1
 80194d0:	47b8      	blx	r7
 80194d2:	46b0      	mov	r8, r6
 80194d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80194d6:	e006      	b.n	80194e6 <ai_layers_forward_all+0x2e>
 80194d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80194da:	63a1      	str	r1, [r4, #56]	; 0x38
 80194dc:	2003      	movs	r0, #3
 80194de:	47b8      	blx	r7
 80194e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80194e2:	3601      	adds	r6, #1
 80194e4:	b179      	cbz	r1, 8019506 <ai_layers_forward_all+0x4e>
 80194e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80194e8:	2002      	movs	r0, #2
 80194ea:	47b8      	blx	r7
 80194ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80194ee:	696b      	ldr	r3, [r5, #20]
 80194f0:	4628      	mov	r0, r5
 80194f2:	4798      	blx	r3
 80194f4:	6929      	ldr	r1, [r5, #16]
 80194f6:	428d      	cmp	r5, r1
 80194f8:	d1ee      	bne.n	80194d8 <ai_layers_forward_all+0x20>
 80194fa:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80194fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8019500:	2100      	movs	r1, #0
 8019502:	e7eb      	b.n	80194dc <ai_layers_forward_all+0x24>
 8019504:	462e      	mov	r6, r5
 8019506:	4630      	mov	r0, r6
 8019508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801950c:	2d00      	cmp	r5, #0
 801950e:	d0f9      	beq.n	8019504 <ai_layers_forward_all+0x4c>
 8019510:	463e      	mov	r6, r7
 8019512:	6385      	str	r5, [r0, #56]	; 0x38
 8019514:	696b      	ldr	r3, [r5, #20]
 8019516:	4628      	mov	r0, r5
 8019518:	4798      	blx	r3
 801951a:	692b      	ldr	r3, [r5, #16]
 801951c:	3601      	adds	r6, #1
 801951e:	42ab      	cmp	r3, r5
 8019520:	d004      	beq.n	801952c <ai_layers_forward_all+0x74>
 8019522:	63a3      	str	r3, [r4, #56]	; 0x38
 8019524:	461d      	mov	r5, r3
 8019526:	2b00      	cmp	r3, #0
 8019528:	d1f4      	bne.n	8019514 <ai_layers_forward_all+0x5c>
 801952a:	e7ec      	b.n	8019506 <ai_layers_forward_all+0x4e>
 801952c:	2300      	movs	r3, #0
 801952e:	63a3      	str	r3, [r4, #56]	; 0x38
 8019530:	4630      	mov	r0, r6
 8019532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019536:	bf00      	nop

08019538 <ai_version_get>:
 8019538:	0212      	lsls	r2, r2, #8
 801953a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801953e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8019542:	4770      	bx	lr

08019544 <get_tensor_byte_size>:
 8019544:	68c1      	ldr	r1, [r0, #12]
 8019546:	6942      	ldr	r2, [r0, #20]
 8019548:	6983      	ldr	r3, [r0, #24]
 801954a:	68c9      	ldr	r1, [r1, #12]
 801954c:	68d0      	ldr	r0, [r2, #12]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	fb00 f001 	mul.w	r0, r0, r1
 8019554:	4a04      	ldr	r2, [pc, #16]	; (8019568 <get_tensor_byte_size+0x24>)
 8019556:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 801955a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801955e:	4293      	cmp	r3, r2
 8019560:	bf04      	itt	eq
 8019562:	3007      	addeq	r0, #7
 8019564:	08c0      	lsreq	r0, r0, #3
 8019566:	4770      	bx	lr
 8019568:	000400c0 	.word	0x000400c0

0801956c <ai_array_to_buffer_fmt>:
 801956c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8019570:	2b02      	cmp	r3, #2
 8019572:	d036      	beq.n	80195e2 <ai_array_to_buffer_fmt+0x76>
 8019574:	4a21      	ldr	r2, [pc, #132]	; (80195fc <ai_array_to_buffer_fmt+0x90>)
 8019576:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 801957a:	4293      	cmp	r3, r2
 801957c:	d00f      	beq.n	801959e <ai_array_to_buffer_fmt+0x32>
 801957e:	dd12      	ble.n	80195a6 <ai_array_to_buffer_fmt+0x3a>
 8019580:	4a1f      	ldr	r2, [pc, #124]	; (8019600 <ai_array_to_buffer_fmt+0x94>)
 8019582:	4293      	cmp	r3, r2
 8019584:	d00b      	beq.n	801959e <ai_array_to_buffer_fmt+0x32>
 8019586:	dd1e      	ble.n	80195c6 <ai_array_to_buffer_fmt+0x5a>
 8019588:	4a1e      	ldr	r2, [pc, #120]	; (8019604 <ai_array_to_buffer_fmt+0x98>)
 801958a:	4293      	cmp	r3, r2
 801958c:	d007      	beq.n	801959e <ai_array_to_buffer_fmt+0x32>
 801958e:	dd30      	ble.n	80195f2 <ai_array_to_buffer_fmt+0x86>
 8019590:	4a1d      	ldr	r2, [pc, #116]	; (8019608 <ai_array_to_buffer_fmt+0x9c>)
 8019592:	4293      	cmp	r3, r2
 8019594:	d003      	beq.n	801959e <ai_array_to_buffer_fmt+0x32>
 8019596:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 801959a:	4293      	cmp	r3, r2
 801959c:	d11f      	bne.n	80195de <ai_array_to_buffer_fmt+0x72>
 801959e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80195a2:	4318      	orrs	r0, r3
 80195a4:	4770      	bx	lr
 80195a6:	4a19      	ldr	r2, [pc, #100]	; (801960c <ai_array_to_buffer_fmt+0xa0>)
 80195a8:	4293      	cmp	r3, r2
 80195aa:	d0f8      	beq.n	801959e <ai_array_to_buffer_fmt+0x32>
 80195ac:	dd0b      	ble.n	80195c6 <ai_array_to_buffer_fmt+0x5a>
 80195ae:	4a18      	ldr	r2, [pc, #96]	; (8019610 <ai_array_to_buffer_fmt+0xa4>)
 80195b0:	4293      	cmp	r3, r2
 80195b2:	d0f4      	beq.n	801959e <ai_array_to_buffer_fmt+0x32>
 80195b4:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 80195b8:	4293      	cmp	r3, r2
 80195ba:	d0f0      	beq.n	801959e <ai_array_to_buffer_fmt+0x32>
 80195bc:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80195c0:	4293      	cmp	r3, r2
 80195c2:	d10c      	bne.n	80195de <ai_array_to_buffer_fmt+0x72>
 80195c4:	e7eb      	b.n	801959e <ai_array_to_buffer_fmt+0x32>
 80195c6:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 80195ca:	4293      	cmp	r3, r2
 80195cc:	d0e7      	beq.n	801959e <ai_array_to_buffer_fmt+0x32>
 80195ce:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80195d2:	4293      	cmp	r3, r2
 80195d4:	d0e3      	beq.n	801959e <ai_array_to_buffer_fmt+0x32>
 80195d6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80195da:	4293      	cmp	r3, r2
 80195dc:	d0df      	beq.n	801959e <ai_array_to_buffer_fmt+0x32>
 80195de:	2340      	movs	r3, #64	; 0x40
 80195e0:	e7dd      	b.n	801959e <ai_array_to_buffer_fmt+0x32>
 80195e2:	4b0c      	ldr	r3, [pc, #48]	; (8019614 <ai_array_to_buffer_fmt+0xa8>)
 80195e4:	4003      	ands	r3, r0
 80195e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80195ea:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80195ee:	4318      	orrs	r0, r3
 80195f0:	4770      	bx	lr
 80195f2:	3a0f      	subs	r2, #15
 80195f4:	4293      	cmp	r3, r2
 80195f6:	d0d2      	beq.n	801959e <ai_array_to_buffer_fmt+0x32>
 80195f8:	e7f1      	b.n	80195de <ai_array_to_buffer_fmt+0x72>
 80195fa:	bf00      	nop
 80195fc:	00060440 	.word	0x00060440
 8019600:	00840447 	.word	0x00840447
 8019604:	0084084f 	.word	0x0084084f
 8019608:	00841040 	.word	0x00841040
 801960c:	00040447 	.word	0x00040447
 8019610:	0004084f 	.word	0x0004084f
 8019614:	00803fff 	.word	0x00803fff

08019618 <ai_array_get_byte_size>:
 8019618:	b1c1      	cbz	r1, 801964c <ai_array_get_byte_size+0x34>
 801961a:	11c3      	asrs	r3, r0, #7
 801961c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019620:	fb01 f102 	mul.w	r1, r1, r2
 8019624:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8019628:	3107      	adds	r1, #7
 801962a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 801962e:	f021 0107 	bic.w	r1, r1, #7
 8019632:	2804      	cmp	r0, #4
 8019634:	fa21 f102 	lsr.w	r1, r1, r2
 8019638:	d00a      	beq.n	8019650 <ai_array_get_byte_size+0x38>
 801963a:	2808      	cmp	r0, #8
 801963c:	d103      	bne.n	8019646 <ai_array_get_byte_size+0x2e>
 801963e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019642:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8019646:	3107      	adds	r1, #7
 8019648:	08c8      	lsrs	r0, r1, #3
 801964a:	4770      	bx	lr
 801964c:	4608      	mov	r0, r1
 801964e:	4770      	bx	lr
 8019650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019654:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8019658:	3107      	adds	r1, #7
 801965a:	08c8      	lsrs	r0, r1, #3
 801965c:	4770      	bx	lr
 801965e:	bf00      	nop

08019660 <ai_array_get_data_byte_size>:
 8019660:	b161      	cbz	r1, 801967c <ai_array_get_data_byte_size+0x1c>
 8019662:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8019666:	fb01 f103 	mul.w	r1, r1, r3
 801966a:	3107      	adds	r1, #7
 801966c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8019670:	f021 0107 	bic.w	r1, r1, #7
 8019674:	40c1      	lsrs	r1, r0
 8019676:	3107      	adds	r1, #7
 8019678:	08c8      	lsrs	r0, r1, #3
 801967a:	4770      	bx	lr
 801967c:	4608      	mov	r0, r1
 801967e:	4770      	bx	lr

08019680 <arm_mean_f32>:
 8019680:	b430      	push	{r4, r5}
 8019682:	088d      	lsrs	r5, r1, #2
 8019684:	d037      	beq.n	80196f6 <arm_mean_f32+0x76>
 8019686:	f100 0310 	add.w	r3, r0, #16
 801968a:	462c      	mov	r4, r5
 801968c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80196fc <arm_mean_f32+0x7c>
 8019690:	ed13 7a04 	vldr	s14, [r3, #-16]
 8019694:	3c01      	subs	r4, #1
 8019696:	ed13 6a03 	vldr	s12, [r3, #-12]
 801969a:	f103 0310 	add.w	r3, r3, #16
 801969e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80196a2:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 80196a6:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80196aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80196ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80196b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80196b6:	d1eb      	bne.n	8019690 <arm_mean_f32+0x10>
 80196b8:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80196bc:	f011 0303 	ands.w	r3, r1, #3
 80196c0:	d00f      	beq.n	80196e2 <arm_mean_f32+0x62>
 80196c2:	ed90 7a00 	vldr	s14, [r0]
 80196c6:	3b01      	subs	r3, #1
 80196c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80196cc:	d009      	beq.n	80196e2 <arm_mean_f32+0x62>
 80196ce:	ed90 7a01 	vldr	s14, [r0, #4]
 80196d2:	2b01      	cmp	r3, #1
 80196d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80196d8:	d003      	beq.n	80196e2 <arm_mean_f32+0x62>
 80196da:	ed90 7a02 	vldr	s14, [r0, #8]
 80196de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80196e2:	ee07 1a10 	vmov	s14, r1
 80196e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80196ea:	bc30      	pop	{r4, r5}
 80196ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80196f0:	edc2 6a00 	vstr	s13, [r2]
 80196f4:	4770      	bx	lr
 80196f6:	eddf 7a01 	vldr	s15, [pc, #4]	; 80196fc <arm_mean_f32+0x7c>
 80196fa:	e7df      	b.n	80196bc <arm_mean_f32+0x3c>
 80196fc:	00000000 	.word	0x00000000

08019700 <arm_max_f32>:
 8019700:	f101 3cff 	add.w	ip, r1, #4294967295
 8019704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019706:	4607      	mov	r7, r0
 8019708:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 801970c:	ecf7 7a01 	vldmia	r7!, {s15}
 8019710:	d05c      	beq.n	80197cc <arm_max_f32+0xcc>
 8019712:	2400      	movs	r4, #0
 8019714:	3014      	adds	r0, #20
 8019716:	ea4f 068e 	mov.w	r6, lr, lsl #2
 801971a:	4625      	mov	r5, r4
 801971c:	ed10 7a04 	vldr	s14, [r0, #-16]
 8019720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019728:	d502      	bpl.n	8019730 <arm_max_f32+0x30>
 801972a:	eef0 7a47 	vmov.f32	s15, s14
 801972e:	1c65      	adds	r5, r4, #1
 8019730:	ed10 7a03 	vldr	s14, [r0, #-12]
 8019734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801973c:	d502      	bpl.n	8019744 <arm_max_f32+0x44>
 801973e:	eef0 7a47 	vmov.f32	s15, s14
 8019742:	1ca5      	adds	r5, r4, #2
 8019744:	ed10 7a02 	vldr	s14, [r0, #-8]
 8019748:	eef4 7ac7 	vcmpe.f32	s15, s14
 801974c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019750:	d502      	bpl.n	8019758 <arm_max_f32+0x58>
 8019752:	eef0 7a47 	vmov.f32	s15, s14
 8019756:	1ce5      	adds	r5, r4, #3
 8019758:	ed10 7a01 	vldr	s14, [r0, #-4]
 801975c:	3404      	adds	r4, #4
 801975e:	3010      	adds	r0, #16
 8019760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019768:	d502      	bpl.n	8019770 <arm_max_f32+0x70>
 801976a:	eef0 7a47 	vmov.f32	s15, s14
 801976e:	4625      	mov	r5, r4
 8019770:	42a6      	cmp	r6, r4
 8019772:	d1d3      	bne.n	801971c <arm_max_f32+0x1c>
 8019774:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8019778:	f01c 0003 	ands.w	r0, ip, #3
 801977c:	d01e      	beq.n	80197bc <arm_max_f32+0xbc>
 801977e:	ed97 7a00 	vldr	s14, [r7]
 8019782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801978a:	dc1b      	bgt.n	80197c4 <arm_max_f32+0xc4>
 801978c:	3801      	subs	r0, #1
 801978e:	d015      	beq.n	80197bc <arm_max_f32+0xbc>
 8019790:	ed97 7a01 	vldr	s14, [r7, #4]
 8019794:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801979c:	d502      	bpl.n	80197a4 <arm_max_f32+0xa4>
 801979e:	eef0 7a47 	vmov.f32	s15, s14
 80197a2:	1a0d      	subs	r5, r1, r0
 80197a4:	2801      	cmp	r0, #1
 80197a6:	d009      	beq.n	80197bc <arm_max_f32+0xbc>
 80197a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80197ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80197b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197b4:	dd02      	ble.n	80197bc <arm_max_f32+0xbc>
 80197b6:	eef0 7a47 	vmov.f32	s15, s14
 80197ba:	4665      	mov	r5, ip
 80197bc:	edc2 7a00 	vstr	s15, [r2]
 80197c0:	601d      	str	r5, [r3, #0]
 80197c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197c4:	eef0 7a47 	vmov.f32	s15, s14
 80197c8:	1a0d      	subs	r5, r1, r0
 80197ca:	e7df      	b.n	801978c <arm_max_f32+0x8c>
 80197cc:	4675      	mov	r5, lr
 80197ce:	e7d3      	b.n	8019778 <arm_max_f32+0x78>

080197d0 <arm_rfft_32_fast_init_f32>:
 80197d0:	b180      	cbz	r0, 80197f4 <arm_rfft_32_fast_init_f32+0x24>
 80197d2:	4603      	mov	r3, r0
 80197d4:	2220      	movs	r2, #32
 80197d6:	2010      	movs	r0, #16
 80197d8:	4908      	ldr	r1, [pc, #32]	; (80197fc <arm_rfft_32_fast_init_f32+0x2c>)
 80197da:	b430      	push	{r4, r5}
 80197dc:	2514      	movs	r5, #20
 80197de:	4c08      	ldr	r4, [pc, #32]	; (8019800 <arm_rfft_32_fast_init_f32+0x30>)
 80197e0:	821a      	strh	r2, [r3, #16]
 80197e2:	4a08      	ldr	r2, [pc, #32]	; (8019804 <arm_rfft_32_fast_init_f32+0x34>)
 80197e4:	8018      	strh	r0, [r3, #0]
 80197e6:	2000      	movs	r0, #0
 80197e8:	819d      	strh	r5, [r3, #12]
 80197ea:	615a      	str	r2, [r3, #20]
 80197ec:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80197f0:	bc30      	pop	{r4, r5}
 80197f2:	4770      	bx	lr
 80197f4:	f04f 30ff 	mov.w	r0, #4294967295
 80197f8:	4770      	bx	lr
 80197fa:	bf00      	nop
 80197fc:	0805ef94 	.word	0x0805ef94
 8019800:	0803ec58 	.word	0x0803ec58
 8019804:	0806fd14 	.word	0x0806fd14

08019808 <arm_rfft_64_fast_init_f32>:
 8019808:	b180      	cbz	r0, 801982c <arm_rfft_64_fast_init_f32+0x24>
 801980a:	4603      	mov	r3, r0
 801980c:	2240      	movs	r2, #64	; 0x40
 801980e:	2020      	movs	r0, #32
 8019810:	4908      	ldr	r1, [pc, #32]	; (8019834 <arm_rfft_64_fast_init_f32+0x2c>)
 8019812:	b430      	push	{r4, r5}
 8019814:	2530      	movs	r5, #48	; 0x30
 8019816:	4c08      	ldr	r4, [pc, #32]	; (8019838 <arm_rfft_64_fast_init_f32+0x30>)
 8019818:	821a      	strh	r2, [r3, #16]
 801981a:	4a08      	ldr	r2, [pc, #32]	; (801983c <arm_rfft_64_fast_init_f32+0x34>)
 801981c:	8018      	strh	r0, [r3, #0]
 801981e:	2000      	movs	r0, #0
 8019820:	819d      	strh	r5, [r3, #12]
 8019822:	615a      	str	r2, [r3, #20]
 8019824:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8019828:	bc30      	pop	{r4, r5}
 801982a:	4770      	bx	lr
 801982c:	f04f 30ff 	mov.w	r0, #4294967295
 8019830:	4770      	bx	lr
 8019832:	bf00      	nop
 8019834:	08063814 	.word	0x08063814
 8019838:	08040db0 	.word	0x08040db0
 801983c:	08074594 	.word	0x08074594

08019840 <arm_rfft_256_fast_init_f32>:
 8019840:	b188      	cbz	r0, 8019866 <arm_rfft_256_fast_init_f32+0x26>
 8019842:	4603      	mov	r3, r0
 8019844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019848:	2080      	movs	r0, #128	; 0x80
 801984a:	4908      	ldr	r1, [pc, #32]	; (801986c <arm_rfft_256_fast_init_f32+0x2c>)
 801984c:	b430      	push	{r4, r5}
 801984e:	25d0      	movs	r5, #208	; 0xd0
 8019850:	4c07      	ldr	r4, [pc, #28]	; (8019870 <arm_rfft_256_fast_init_f32+0x30>)
 8019852:	821a      	strh	r2, [r3, #16]
 8019854:	4a07      	ldr	r2, [pc, #28]	; (8019874 <arm_rfft_256_fast_init_f32+0x34>)
 8019856:	8018      	strh	r0, [r3, #0]
 8019858:	2000      	movs	r0, #0
 801985a:	819d      	strh	r5, [r3, #12]
 801985c:	615a      	str	r2, [r3, #20]
 801985e:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8019862:	bc30      	pop	{r4, r5}
 8019864:	4770      	bx	lr
 8019866:	f04f 30ff 	mov.w	r0, #4294967295
 801986a:	4770      	bx	lr
 801986c:	0805eb94 	.word	0x0805eb94
 8019870:	0803eab8 	.word	0x0803eab8
 8019874:	0806f914 	.word	0x0806f914

08019878 <arm_rfft_512_fast_init_f32>:
 8019878:	b198      	cbz	r0, 80198a2 <arm_rfft_512_fast_init_f32+0x2a>
 801987a:	4603      	mov	r3, r0
 801987c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019880:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019884:	4908      	ldr	r1, [pc, #32]	; (80198a8 <arm_rfft_512_fast_init_f32+0x30>)
 8019886:	b430      	push	{r4, r5}
 8019888:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 801988c:	4c07      	ldr	r4, [pc, #28]	; (80198ac <arm_rfft_512_fast_init_f32+0x34>)
 801988e:	821a      	strh	r2, [r3, #16]
 8019890:	4a07      	ldr	r2, [pc, #28]	; (80198b0 <arm_rfft_512_fast_init_f32+0x38>)
 8019892:	8018      	strh	r0, [r3, #0]
 8019894:	2000      	movs	r0, #0
 8019896:	819d      	strh	r5, [r3, #12]
 8019898:	615a      	str	r2, [r3, #20]
 801989a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801989e:	bc30      	pop	{r4, r5}
 80198a0:	4770      	bx	lr
 80198a2:	f04f 30ff 	mov.w	r0, #4294967295
 80198a6:	4770      	bx	lr
 80198a8:	08063014 	.word	0x08063014
 80198ac:	08040a40 	.word	0x08040a40
 80198b0:	08073d94 	.word	0x08073d94

080198b4 <arm_rfft_1024_fast_init_f32>:
 80198b4:	b198      	cbz	r0, 80198de <arm_rfft_1024_fast_init_f32+0x2a>
 80198b6:	4603      	mov	r3, r0
 80198b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80198bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80198c0:	4908      	ldr	r1, [pc, #32]	; (80198e4 <arm_rfft_1024_fast_init_f32+0x30>)
 80198c2:	b430      	push	{r4, r5}
 80198c4:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 80198c8:	4c07      	ldr	r4, [pc, #28]	; (80198e8 <arm_rfft_1024_fast_init_f32+0x34>)
 80198ca:	821a      	strh	r2, [r3, #16]
 80198cc:	4a07      	ldr	r2, [pc, #28]	; (80198ec <arm_rfft_1024_fast_init_f32+0x38>)
 80198ce:	8018      	strh	r0, [r3, #0]
 80198d0:	2000      	movs	r0, #0
 80198d2:	819d      	strh	r5, [r3, #12]
 80198d4:	615a      	str	r2, [r3, #20]
 80198d6:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80198da:	bc30      	pop	{r4, r5}
 80198dc:	4770      	bx	lr
 80198de:	f04f 30ff 	mov.w	r0, #4294967295
 80198e2:	4770      	bx	lr
 80198e4:	0806b914 	.word	0x0806b914
 80198e8:	08040e10 	.word	0x08040e10
 80198ec:	0806c914 	.word	0x0806c914

080198f0 <arm_rfft_2048_fast_init_f32>:
 80198f0:	b198      	cbz	r0, 801991a <arm_rfft_2048_fast_init_f32+0x2a>
 80198f2:	4603      	mov	r3, r0
 80198f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80198f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80198fc:	4908      	ldr	r1, [pc, #32]	; (8019920 <arm_rfft_2048_fast_init_f32+0x30>)
 80198fe:	b430      	push	{r4, r5}
 8019900:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8019904:	4c07      	ldr	r4, [pc, #28]	; (8019924 <arm_rfft_2048_fast_init_f32+0x34>)
 8019906:	821a      	strh	r2, [r3, #16]
 8019908:	4a07      	ldr	r2, [pc, #28]	; (8019928 <arm_rfft_2048_fast_init_f32+0x38>)
 801990a:	8018      	strh	r0, [r3, #0]
 801990c:	2000      	movs	r0, #0
 801990e:	819d      	strh	r5, [r3, #12]
 8019910:	615a      	str	r2, [r3, #20]
 8019912:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8019916:	bc30      	pop	{r4, r5}
 8019918:	4770      	bx	lr
 801991a:	f04f 30ff 	mov.w	r0, #4294967295
 801991e:	4770      	bx	lr
 8019920:	0805cb94 	.word	0x0805cb94
 8019924:	0803dca8 	.word	0x0803dca8
 8019928:	0806d914 	.word	0x0806d914

0801992c <arm_rfft_4096_fast_init_f32>:
 801992c:	b198      	cbz	r0, 8019956 <arm_rfft_4096_fast_init_f32+0x2a>
 801992e:	4603      	mov	r3, r0
 8019930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019934:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8019938:	4908      	ldr	r1, [pc, #32]	; (801995c <arm_rfft_4096_fast_init_f32+0x30>)
 801993a:	b430      	push	{r4, r5}
 801993c:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8019940:	4c07      	ldr	r4, [pc, #28]	; (8019960 <arm_rfft_4096_fast_init_f32+0x34>)
 8019942:	821a      	strh	r2, [r3, #16]
 8019944:	4a07      	ldr	r2, [pc, #28]	; (8019964 <arm_rfft_4096_fast_init_f32+0x38>)
 8019946:	8018      	strh	r0, [r3, #0]
 8019948:	2000      	movs	r0, #0
 801994a:	819d      	strh	r5, [r3, #12]
 801994c:	615a      	str	r2, [r3, #20]
 801994e:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8019952:	bc30      	pop	{r4, r5}
 8019954:	4770      	bx	lr
 8019956:	f04f 30ff 	mov.w	r0, #4294967295
 801995a:	4770      	bx	lr
 801995c:	0805f014 	.word	0x0805f014
 8019960:	0803ec80 	.word	0x0803ec80
 8019964:	0806fd94 	.word	0x0806fd94

08019968 <arm_rfft_fast_init_f32>:
 8019968:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801996c:	d01f      	beq.n	80199ae <arm_rfft_fast_init_f32+0x46>
 801996e:	d90b      	bls.n	8019988 <arm_rfft_fast_init_f32+0x20>
 8019970:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8019974:	d019      	beq.n	80199aa <arm_rfft_fast_init_f32+0x42>
 8019976:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 801997a:	d012      	beq.n	80199a2 <arm_rfft_fast_init_f32+0x3a>
 801997c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8019980:	d00d      	beq.n	801999e <arm_rfft_fast_init_f32+0x36>
 8019982:	f04f 30ff 	mov.w	r0, #4294967295
 8019986:	4770      	bx	lr
 8019988:	2940      	cmp	r1, #64	; 0x40
 801998a:	d00c      	beq.n	80199a6 <arm_rfft_fast_init_f32+0x3e>
 801998c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8019990:	d003      	beq.n	801999a <arm_rfft_fast_init_f32+0x32>
 8019992:	2920      	cmp	r1, #32
 8019994:	d1f5      	bne.n	8019982 <arm_rfft_fast_init_f32+0x1a>
 8019996:	4b07      	ldr	r3, [pc, #28]	; (80199b4 <arm_rfft_fast_init_f32+0x4c>)
 8019998:	4718      	bx	r3
 801999a:	4b07      	ldr	r3, [pc, #28]	; (80199b8 <arm_rfft_fast_init_f32+0x50>)
 801999c:	4718      	bx	r3
 801999e:	4b07      	ldr	r3, [pc, #28]	; (80199bc <arm_rfft_fast_init_f32+0x54>)
 80199a0:	4718      	bx	r3
 80199a2:	4b07      	ldr	r3, [pc, #28]	; (80199c0 <arm_rfft_fast_init_f32+0x58>)
 80199a4:	4718      	bx	r3
 80199a6:	4b07      	ldr	r3, [pc, #28]	; (80199c4 <arm_rfft_fast_init_f32+0x5c>)
 80199a8:	e7f6      	b.n	8019998 <arm_rfft_fast_init_f32+0x30>
 80199aa:	4b07      	ldr	r3, [pc, #28]	; (80199c8 <arm_rfft_fast_init_f32+0x60>)
 80199ac:	e7f4      	b.n	8019998 <arm_rfft_fast_init_f32+0x30>
 80199ae:	4b07      	ldr	r3, [pc, #28]	; (80199cc <arm_rfft_fast_init_f32+0x64>)
 80199b0:	e7f2      	b.n	8019998 <arm_rfft_fast_init_f32+0x30>
 80199b2:	bf00      	nop
 80199b4:	080197d1 	.word	0x080197d1
 80199b8:	08019841 	.word	0x08019841
 80199bc:	080198b5 	.word	0x080198b5
 80199c0:	0801992d 	.word	0x0801992d
 80199c4:	08019809 	.word	0x08019809
 80199c8:	080198f1 	.word	0x080198f1
 80199cc:	08019879 	.word	0x08019879

080199d0 <stage_rfft_f32>:
 80199d0:	b470      	push	{r4, r5, r6}
 80199d2:	edd1 7a00 	vldr	s15, [r1]
 80199d6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80199da:	ed91 7a01 	vldr	s14, [r1, #4]
 80199de:	f101 0510 	add.w	r5, r1, #16
 80199e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80199e6:	8806      	ldrh	r6, [r0, #0]
 80199e8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80199ec:	6943      	ldr	r3, [r0, #20]
 80199ee:	1e70      	subs	r0, r6, #1
 80199f0:	eeb0 4a46 	vmov.f32	s8, s12
 80199f4:	f102 0410 	add.w	r4, r2, #16
 80199f8:	3310      	adds	r3, #16
 80199fa:	ee77 6a87 	vadd.f32	s13, s15, s14
 80199fe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019a02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a06:	3908      	subs	r1, #8
 8019a08:	ee26 7a86 	vmul.f32	s14, s13, s12
 8019a0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019a10:	ed82 7a00 	vstr	s14, [r2]
 8019a14:	edc2 7a01 	vstr	s15, [r2, #4]
 8019a18:	ed15 6a02 	vldr	s12, [r5, #-8]
 8019a1c:	3801      	subs	r0, #1
 8019a1e:	ed91 7a02 	vldr	s14, [r1, #8]
 8019a22:	f105 0508 	add.w	r5, r5, #8
 8019a26:	ed53 6a02 	vldr	s13, [r3, #-8]
 8019a2a:	f1a1 0108 	sub.w	r1, r1, #8
 8019a2e:	ee77 5a46 	vsub.f32	s11, s14, s12
 8019a32:	edd1 4a05 	vldr	s9, [r1, #20]
 8019a36:	ed55 7a03 	vldr	s15, [r5, #-12]
 8019a3a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019a3e:	ed13 6a01 	vldr	s12, [r3, #-4]
 8019a42:	f104 0408 	add.w	r4, r4, #8
 8019a46:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8019a4a:	f103 0308 	add.w	r3, r3, #8
 8019a4e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8019a52:	ee66 5a25 	vmul.f32	s11, s12, s11
 8019a56:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8019a5a:	ee37 7a23 	vadd.f32	s14, s14, s7
 8019a5e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8019a62:	ee26 6a05 	vmul.f32	s12, s12, s10
 8019a66:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8019a6a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019a6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019a72:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019a76:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019a7a:	ed04 7a04 	vstr	s14, [r4, #-16]
 8019a7e:	ed44 7a03 	vstr	s15, [r4, #-12]
 8019a82:	d1c9      	bne.n	8019a18 <stage_rfft_f32+0x48>
 8019a84:	bc70      	pop	{r4, r5, r6}
 8019a86:	4770      	bx	lr

08019a88 <merge_rfft_f32>:
 8019a88:	b410      	push	{r4}
 8019a8a:	edd1 7a00 	vldr	s15, [r1]
 8019a8e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8019a92:	edd1 6a01 	vldr	s13, [r1, #4]
 8019a96:	8804      	ldrh	r4, [r0, #0]
 8019a98:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019a9c:	6940      	ldr	r0, [r0, #20]
 8019a9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019aa2:	3c01      	subs	r4, #1
 8019aa4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019aa8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019aac:	ed82 7a00 	vstr	s14, [r2]
 8019ab0:	edc2 7a01 	vstr	s15, [r2, #4]
 8019ab4:	b3dc      	cbz	r4, 8019b2e <merge_rfft_f32+0xa6>
 8019ab6:	00e3      	lsls	r3, r4, #3
 8019ab8:	3010      	adds	r0, #16
 8019aba:	3210      	adds	r2, #16
 8019abc:	3b08      	subs	r3, #8
 8019abe:	440b      	add	r3, r1
 8019ac0:	3110      	adds	r1, #16
 8019ac2:	ed11 6a02 	vldr	s12, [r1, #-8]
 8019ac6:	3c01      	subs	r4, #1
 8019ac8:	ed93 7a02 	vldr	s14, [r3, #8]
 8019acc:	f101 0108 	add.w	r1, r1, #8
 8019ad0:	ed50 6a02 	vldr	s13, [r0, #-8]
 8019ad4:	f1a3 0308 	sub.w	r3, r3, #8
 8019ad8:	ee76 5a47 	vsub.f32	s11, s12, s14
 8019adc:	edd3 4a05 	vldr	s9, [r3, #20]
 8019ae0:	ed51 7a03 	vldr	s15, [r1, #-12]
 8019ae4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019ae8:	ed10 6a01 	vldr	s12, [r0, #-4]
 8019aec:	f102 0208 	add.w	r2, r2, #8
 8019af0:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8019af4:	f100 0008 	add.w	r0, r0, #8
 8019af8:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8019afc:	ee66 5a25 	vmul.f32	s11, s12, s11
 8019b00:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8019b04:	ee37 7a63 	vsub.f32	s14, s14, s7
 8019b08:	ee66 6a85 	vmul.f32	s13, s13, s10
 8019b0c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8019b10:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8019b14:	ee37 7a46 	vsub.f32	s14, s14, s12
 8019b18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019b1c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019b20:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019b24:	ed02 7a04 	vstr	s14, [r2, #-16]
 8019b28:	ed42 7a03 	vstr	s15, [r2, #-12]
 8019b2c:	d1c9      	bne.n	8019ac2 <merge_rfft_f32+0x3a>
 8019b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b32:	4770      	bx	lr

08019b34 <arm_rfft_fast_f32>:
 8019b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b38:	8a05      	ldrh	r5, [r0, #16]
 8019b3a:	4604      	mov	r4, r0
 8019b3c:	4617      	mov	r7, r2
 8019b3e:	461e      	mov	r6, r3
 8019b40:	086d      	lsrs	r5, r5, #1
 8019b42:	8005      	strh	r5, [r0, #0]
 8019b44:	b14b      	cbz	r3, 8019b5a <arm_rfft_fast_f32+0x26>
 8019b46:	f7ff ff9f 	bl	8019a88 <merge_rfft_f32>
 8019b4a:	4632      	mov	r2, r6
 8019b4c:	4639      	mov	r1, r7
 8019b4e:	4620      	mov	r0, r4
 8019b50:	2301      	movs	r3, #1
 8019b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b56:	f000 bb35 	b.w	801a1c4 <arm_cfft_f32>
 8019b5a:	4688      	mov	r8, r1
 8019b5c:	461a      	mov	r2, r3
 8019b5e:	2301      	movs	r3, #1
 8019b60:	f000 fb30 	bl	801a1c4 <arm_cfft_f32>
 8019b64:	463a      	mov	r2, r7
 8019b66:	4641      	mov	r1, r8
 8019b68:	4620      	mov	r0, r4
 8019b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b6e:	f7ff bf2f 	b.w	80199d0 <stage_rfft_f32>
 8019b72:	bf00      	nop

08019b74 <arm_cfft_radix8by2_f32>:
 8019b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b78:	4607      	mov	r7, r0
 8019b7a:	4608      	mov	r0, r1
 8019b7c:	ed2d 8b06 	vpush	{d8-d10}
 8019b80:	f8b7 c000 	ldrh.w	ip, [r7]
 8019b84:	687a      	ldr	r2, [r7, #4]
 8019b86:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8019b8a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8019b8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8019b92:	f000 80ac 	beq.w	8019cee <arm_cfft_radix8by2_f32+0x17a>
 8019b96:	008c      	lsls	r4, r1, #2
 8019b98:	f100 0310 	add.w	r3, r0, #16
 8019b9c:	3210      	adds	r2, #16
 8019b9e:	f108 0610 	add.w	r6, r8, #16
 8019ba2:	3410      	adds	r4, #16
 8019ba4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8019ba8:	1905      	adds	r5, r0, r4
 8019baa:	4444      	add	r4, r8
 8019bac:	ed16 7a04 	vldr	s14, [r6, #-16]
 8019bb0:	3310      	adds	r3, #16
 8019bb2:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 8019bb6:	3510      	adds	r5, #16
 8019bb8:	ed56 0a03 	vldr	s1, [r6, #-12]
 8019bbc:	3210      	adds	r2, #16
 8019bbe:	ee74 9a87 	vadd.f32	s19, s9, s14
 8019bc2:	ed56 7a02 	vldr	s15, [r6, #-8]
 8019bc6:	ed56 2a01 	vldr	s5, [r6, #-4]
 8019bca:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8019bce:	ed54 5a04 	vldr	s11, [r4, #-16]
 8019bd2:	3610      	adds	r6, #16
 8019bd4:	ed14 5a03 	vldr	s10, [r4, #-12]
 8019bd8:	3410      	adds	r4, #16
 8019bda:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 8019bde:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8019be2:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 8019be6:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 8019bea:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 8019bee:	ee36 9aa5 	vadd.f32	s18, s13, s11
 8019bf2:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 8019bf6:	ee33 8a83 	vadd.f32	s16, s7, s6
 8019bfa:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 8019bfe:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8019c02:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8019c06:	ee34 0a06 	vadd.f32	s0, s8, s12
 8019c0a:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 8019c0e:	ee77 aa20 	vadd.f32	s21, s14, s1
 8019c12:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 8019c16:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8019c1a:	ee72 9a22 	vadd.f32	s19, s4, s5
 8019c1e:	ee71 8a05 	vadd.f32	s17, s2, s10
 8019c22:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 8019c26:	ee37 7a60 	vsub.f32	s14, s14, s1
 8019c2a:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 8019c2e:	ee35 5a41 	vsub.f32	s10, s10, s2
 8019c32:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 8019c36:	ee36 6a44 	vsub.f32	s12, s12, s8
 8019c3a:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 8019c3e:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 8019c42:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8019c46:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 8019c4a:	ee72 7a62 	vsub.f32	s15, s4, s5
 8019c4e:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 8019c52:	ee73 2a63 	vsub.f32	s5, s6, s7
 8019c56:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8019c5a:	4563      	cmp	r3, ip
 8019c5c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8019c60:	ee24 3a84 	vmul.f32	s6, s9, s8
 8019c64:	ee27 2a26 	vmul.f32	s4, s14, s13
 8019c68:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8019c6c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8019c70:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019c74:	ee65 5a84 	vmul.f32	s11, s11, s8
 8019c78:	ee65 6a26 	vmul.f32	s13, s10, s13
 8019c7c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8019c80:	ee37 7a64 	vsub.f32	s14, s14, s9
 8019c84:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019c88:	ee33 4a02 	vadd.f32	s8, s6, s4
 8019c8c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8019c90:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 8019c94:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 8019c98:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 8019c9c:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 8019ca0:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8019ca4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8019ca8:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8019cac:	ee27 4a87 	vmul.f32	s8, s15, s14
 8019cb0:	ee61 5a87 	vmul.f32	s11, s3, s14
 8019cb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019cb8:	ee22 5a87 	vmul.f32	s10, s5, s14
 8019cbc:	ee26 7a07 	vmul.f32	s14, s12, s14
 8019cc0:	ee26 6a26 	vmul.f32	s12, s12, s13
 8019cc4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8019cc8:	ee74 4a84 	vadd.f32	s9, s9, s8
 8019ccc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019cd0:	ee35 6a46 	vsub.f32	s12, s10, s12
 8019cd4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019cd8:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 8019cdc:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 8019ce0:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 8019ce4:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 8019ce8:	f47f af60 	bne.w	8019bac <arm_cfft_radix8by2_f32+0x38>
 8019cec:	687a      	ldr	r2, [r7, #4]
 8019cee:	b28c      	uxth	r4, r1
 8019cf0:	2302      	movs	r3, #2
 8019cf2:	4621      	mov	r1, r4
 8019cf4:	f000 fb9a 	bl	801a42c <arm_radix8_butterfly_f32>
 8019cf8:	4621      	mov	r1, r4
 8019cfa:	687a      	ldr	r2, [r7, #4]
 8019cfc:	4640      	mov	r0, r8
 8019cfe:	2302      	movs	r3, #2
 8019d00:	ecbd 8b06 	vpop	{d8-d10}
 8019d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d08:	f000 bb90 	b.w	801a42c <arm_radix8_butterfly_f32>

08019d0c <arm_cfft_radix8by4_f32>:
 8019d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d10:	ed2d 8b04 	vpush	{d8-d9}
 8019d14:	8804      	ldrh	r4, [r0, #0]
 8019d16:	b08d      	sub	sp, #52	; 0x34
 8019d18:	6842      	ldr	r2, [r0, #4]
 8019d1a:	460d      	mov	r5, r1
 8019d1c:	0864      	lsrs	r4, r4, #1
 8019d1e:	edd1 7a00 	vldr	s15, [r1]
 8019d22:	edd1 5a01 	vldr	s11, [r1, #4]
 8019d26:	00a3      	lsls	r3, r4, #2
 8019d28:	18ce      	adds	r6, r1, r3
 8019d2a:	18f7      	adds	r7, r6, r3
 8019d2c:	ed96 7a00 	vldr	s14, [r6]
 8019d30:	ed96 4a01 	vldr	s8, [r6, #4]
 8019d34:	ed97 6a00 	vldr	s12, [r7]
 8019d38:	edd7 4a01 	vldr	s9, [r7, #4]
 8019d3c:	ee77 6a86 	vadd.f32	s13, s15, s12
 8019d40:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019d44:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8019d48:	ee77 2a26 	vadd.f32	s5, s14, s13
 8019d4c:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8019d50:	ee74 3a27 	vadd.f32	s7, s8, s15
 8019d54:	ee76 4a44 	vsub.f32	s9, s12, s8
 8019d58:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8019d5c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8019d60:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8019d64:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019d68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019d6c:	0860      	lsrs	r0, r4, #1
 8019d6e:	f102 0408 	add.w	r4, r2, #8
 8019d72:	9405      	str	r4, [sp, #20]
 8019d74:	f102 0410 	add.w	r4, r2, #16
 8019d78:	9009      	str	r0, [sp, #36]	; 0x24
 8019d7a:	f1a0 0902 	sub.w	r9, r0, #2
 8019d7e:	9403      	str	r4, [sp, #12]
 8019d80:	18fc      	adds	r4, r7, r3
 8019d82:	f102 0018 	add.w	r0, r2, #24
 8019d86:	ed94 5a00 	vldr	s10, [r4]
 8019d8a:	ed94 3a01 	vldr	s6, [r4, #4]
 8019d8e:	ee72 2a85 	vadd.f32	s5, s5, s10
 8019d92:	9004      	str	r0, [sp, #16]
 8019d94:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8019d98:	4620      	mov	r0, r4
 8019d9a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8019d9e:	9408      	str	r4, [sp, #32]
 8019da0:	ee12 ca90 	vmov	ip, s5
 8019da4:	ee74 5ac3 	vsub.f32	s11, s9, s6
 8019da8:	ee77 7a83 	vadd.f32	s15, s15, s6
 8019dac:	f845 cb08 	str.w	ip, [r5], #8
 8019db0:	ee13 ca90 	vmov	ip, s7
 8019db4:	ed96 2a01 	vldr	s4, [r6, #4]
 8019db8:	ee74 4a05 	vadd.f32	s9, s8, s10
 8019dbc:	edd4 2a01 	vldr	s5, [r4, #4]
 8019dc0:	ee37 7a45 	vsub.f32	s14, s14, s10
 8019dc4:	ee36 6a02 	vadd.f32	s12, s12, s4
 8019dc8:	9500      	str	r5, [sp, #0]
 8019dca:	460d      	mov	r5, r1
 8019dcc:	ee36 6a22 	vadd.f32	s12, s12, s5
 8019dd0:	ed81 6a01 	vstr	s12, [r1, #4]
 8019dd4:	4631      	mov	r1, r6
 8019dd6:	f841 cb08 	str.w	ip, [r1], #8
 8019dda:	ee16 ca90 	vmov	ip, s13
 8019dde:	9106      	str	r1, [sp, #24]
 8019de0:	4639      	mov	r1, r7
 8019de2:	edc6 4a01 	vstr	s9, [r6, #4]
 8019de6:	f841 cb08 	str.w	ip, [r1], #8
 8019dea:	9102      	str	r1, [sp, #8]
 8019dec:	ee17 1a90 	vmov	r1, s15
 8019df0:	edc7 5a01 	vstr	s11, [r7, #4]
 8019df4:	f840 1b08 	str.w	r1, [r0], #8
 8019df8:	ea5f 0159 	movs.w	r1, r9, lsr #1
 8019dfc:	9001      	str	r0, [sp, #4]
 8019dfe:	ed84 7a01 	vstr	s14, [r4, #4]
 8019e02:	9107      	str	r1, [sp, #28]
 8019e04:	f000 8135 	beq.w	801a072 <arm_cfft_radix8by4_f32+0x366>
 8019e08:	3b0c      	subs	r3, #12
 8019e0a:	f102 0920 	add.w	r9, r2, #32
 8019e0e:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8019e12:	4622      	mov	r2, r4
 8019e14:	468b      	mov	fp, r1
 8019e16:	f105 0e10 	add.w	lr, r5, #16
 8019e1a:	4423      	add	r3, r4
 8019e1c:	f1a6 0c0c 	sub.w	ip, r6, #12
 8019e20:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8019e24:	f106 0010 	add.w	r0, r6, #16
 8019e28:	f1a7 010c 	sub.w	r1, r7, #12
 8019e2c:	f107 0510 	add.w	r5, r7, #16
 8019e30:	3c0c      	subs	r4, #12
 8019e32:	3210      	adds	r2, #16
 8019e34:	ed15 7a02 	vldr	s14, [r5, #-8]
 8019e38:	f1bb 0b01 	subs.w	fp, fp, #1
 8019e3c:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8019e40:	f1ac 0c08 	sub.w	ip, ip, #8
 8019e44:	ed50 6a02 	vldr	s13, [r0, #-8]
 8019e48:	f10e 0e08 	add.w	lr, lr, #8
 8019e4c:	ee77 1a87 	vadd.f32	s3, s15, s14
 8019e50:	ed52 4a02 	vldr	s9, [r2, #-8]
 8019e54:	ed55 5a01 	vldr	s11, [r5, #-4]
 8019e58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e5c:	ed1e 7a03 	vldr	s14, [lr, #-12]
 8019e60:	f10a 0a08 	add.w	sl, sl, #8
 8019e64:	ee36 6aa1 	vadd.f32	s12, s13, s3
 8019e68:	ed10 3a01 	vldr	s6, [r0, #-4]
 8019e6c:	ee37 4a25 	vadd.f32	s8, s14, s11
 8019e70:	ed52 3a01 	vldr	s7, [r2, #-4]
 8019e74:	ee37 7a65 	vsub.f32	s14, s14, s11
 8019e78:	f100 0008 	add.w	r0, r0, #8
 8019e7c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8019e80:	f1a1 0108 	sub.w	r1, r1, #8
 8019e84:	ee73 2a27 	vadd.f32	s5, s6, s15
 8019e88:	f109 0910 	add.w	r9, r9, #16
 8019e8c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8019e90:	f105 0508 	add.w	r5, r5, #8
 8019e94:	ed0e 6a04 	vstr	s12, [lr, #-16]
 8019e98:	ee37 5a66 	vsub.f32	s10, s14, s13
 8019e9c:	ed50 5a03 	vldr	s11, [r0, #-12]
 8019ea0:	ee71 1ae6 	vsub.f32	s3, s3, s13
 8019ea4:	ed12 6a01 	vldr	s12, [r2, #-4]
 8019ea8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019eac:	ee74 5a25 	vadd.f32	s11, s8, s11
 8019eb0:	f1a4 0408 	sub.w	r4, r4, #8
 8019eb4:	ee34 4a43 	vsub.f32	s8, s8, s6
 8019eb8:	f108 0818 	add.w	r8, r8, #24
 8019ebc:	ee32 0ae3 	vsub.f32	s0, s5, s7
 8019ec0:	f102 0208 	add.w	r2, r2, #8
 8019ec4:	ee75 5a86 	vadd.f32	s11, s11, s12
 8019ec8:	f1a3 0308 	sub.w	r3, r3, #8
 8019ecc:	ee34 6a63 	vsub.f32	s12, s8, s7
 8019ed0:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8019ed4:	ed4e 5a03 	vstr	s11, [lr, #-12]
 8019ed8:	ee35 5a24 	vadd.f32	s10, s10, s9
 8019edc:	ed94 4a04 	vldr	s8, [r4, #16]
 8019ee0:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8019ee4:	ed9c 3a04 	vldr	s6, [ip, #16]
 8019ee8:	ee37 7a64 	vsub.f32	s14, s14, s9
 8019eec:	edd1 7a04 	vldr	s15, [r1, #16]
 8019ef0:	ee73 6a04 	vadd.f32	s13, s6, s8
 8019ef4:	ed93 8a04 	vldr	s16, [r3, #16]
 8019ef8:	edd4 5a03 	vldr	s11, [r4, #12]
 8019efc:	ee33 3a44 	vsub.f32	s6, s6, s8
 8019f00:	ed9c 2a03 	vldr	s4, [ip, #12]
 8019f04:	ee77 8ac8 	vsub.f32	s17, s15, s16
 8019f08:	ee77 0aa6 	vadd.f32	s1, s15, s13
 8019f0c:	ed91 1a03 	vldr	s2, [r1, #12]
 8019f10:	ee32 4a25 	vadd.f32	s8, s4, s11
 8019f14:	edd3 2a03 	vldr	s5, [r3, #12]
 8019f18:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8019f1c:	ee70 0a88 	vadd.f32	s1, s1, s16
 8019f20:	ee73 4a41 	vsub.f32	s9, s6, s2
 8019f24:	ee32 2a65 	vsub.f32	s4, s4, s11
 8019f28:	edcc 0a04 	vstr	s1, [ip, #16]
 8019f2c:	ee74 0a41 	vsub.f32	s1, s8, s2
 8019f30:	edd1 6a03 	vldr	s13, [r1, #12]
 8019f34:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8019f38:	ed93 9a03 	vldr	s18, [r3, #12]
 8019f3c:	ee78 5a82 	vadd.f32	s11, s17, s4
 8019f40:	ee34 4a26 	vadd.f32	s8, s8, s13
 8019f44:	ee70 0ae2 	vsub.f32	s1, s1, s5
 8019f48:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8019f4c:	ee34 4a09 	vadd.f32	s8, s8, s18
 8019f50:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8019f54:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8019f58:	ed8c 4a03 	vstr	s8, [ip, #12]
 8019f5c:	ee38 2ac2 	vsub.f32	s4, s17, s4
 8019f60:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8019f64:	ed1a 4a04 	vldr	s8, [sl, #-16]
 8019f68:	ee60 2a01 	vmul.f32	s5, s0, s2
 8019f6c:	ee64 6a81 	vmul.f32	s13, s9, s2
 8019f70:	ee20 8a04 	vmul.f32	s16, s0, s8
 8019f74:	ee64 4a84 	vmul.f32	s9, s9, s8
 8019f78:	ee25 0a01 	vmul.f32	s0, s10, s2
 8019f7c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8019f80:	ee25 4a84 	vmul.f32	s8, s11, s8
 8019f84:	ee65 5a81 	vmul.f32	s11, s11, s2
 8019f88:	ee35 5a62 	vsub.f32	s10, s10, s5
 8019f8c:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8019f90:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8019f94:	ee38 1a00 	vadd.f32	s2, s16, s0
 8019f98:	ed00 5a03 	vstr	s10, [r0, #-12]
 8019f9c:	ed00 1a04 	vstr	s2, [r0, #-16]
 8019fa0:	ed81 4a04 	vstr	s8, [r1, #16]
 8019fa4:	edc1 5a03 	vstr	s11, [r1, #12]
 8019fa8:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 8019fac:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 8019fb0:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 8019fb4:	ee66 2a25 	vmul.f32	s5, s12, s11
 8019fb8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8019fbc:	ee21 4a85 	vmul.f32	s8, s3, s10
 8019fc0:	ee60 7a85 	vmul.f32	s15, s1, s10
 8019fc4:	ee61 1aa5 	vmul.f32	s3, s3, s11
 8019fc8:	ee26 6a05 	vmul.f32	s12, s12, s10
 8019fcc:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8019fd0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8019fd4:	ee34 5a22 	vadd.f32	s10, s8, s5
 8019fd8:	ee36 6a61 	vsub.f32	s12, s12, s3
 8019fdc:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8019fe0:	ed05 5a04 	vstr	s10, [r5, #-16]
 8019fe4:	ed05 6a03 	vstr	s12, [r5, #-12]
 8019fe8:	edc4 5a04 	vstr	s11, [r4, #16]
 8019fec:	edc4 6a03 	vstr	s13, [r4, #12]
 8019ff0:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 8019ff4:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 8019ff8:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8019ffc:	ee67 5a27 	vmul.f32	s11, s14, s15
 801a000:	ee63 6a27 	vmul.f32	s13, s6, s15
 801a004:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801a008:	ee27 7a22 	vmul.f32	s14, s14, s5
 801a00c:	ee62 7a27 	vmul.f32	s15, s4, s15
 801a010:	ee23 3a22 	vmul.f32	s6, s6, s5
 801a014:	ee22 2a22 	vmul.f32	s4, s4, s5
 801a018:	ee36 6a25 	vadd.f32	s12, s12, s11
 801a01c:	ee37 7a63 	vsub.f32	s14, s14, s7
 801a020:	ee36 2ac2 	vsub.f32	s4, s13, s4
 801a024:	ee77 7a83 	vadd.f32	s15, s15, s6
 801a028:	ed02 6a04 	vstr	s12, [r2, #-16]
 801a02c:	ed02 7a03 	vstr	s14, [r2, #-12]
 801a030:	ed83 2a04 	vstr	s4, [r3, #16]
 801a034:	edc3 7a03 	vstr	s15, [r3, #12]
 801a038:	f47f aefc 	bne.w	8019e34 <arm_cfft_radix8by4_f32+0x128>
 801a03c:	9907      	ldr	r1, [sp, #28]
 801a03e:	9803      	ldr	r0, [sp, #12]
 801a040:	00cb      	lsls	r3, r1, #3
 801a042:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801a046:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 801a04a:	9103      	str	r1, [sp, #12]
 801a04c:	9900      	ldr	r1, [sp, #0]
 801a04e:	4419      	add	r1, r3
 801a050:	9100      	str	r1, [sp, #0]
 801a052:	9905      	ldr	r1, [sp, #20]
 801a054:	4419      	add	r1, r3
 801a056:	9105      	str	r1, [sp, #20]
 801a058:	9906      	ldr	r1, [sp, #24]
 801a05a:	4419      	add	r1, r3
 801a05c:	9106      	str	r1, [sp, #24]
 801a05e:	9902      	ldr	r1, [sp, #8]
 801a060:	4419      	add	r1, r3
 801a062:	9102      	str	r1, [sp, #8]
 801a064:	9901      	ldr	r1, [sp, #4]
 801a066:	4419      	add	r1, r3
 801a068:	9b04      	ldr	r3, [sp, #16]
 801a06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a06e:	9101      	str	r1, [sp, #4]
 801a070:	9304      	str	r3, [sp, #16]
 801a072:	9b00      	ldr	r3, [sp, #0]
 801a074:	9902      	ldr	r1, [sp, #8]
 801a076:	ed93 7a00 	vldr	s14, [r3]
 801a07a:	edd1 7a00 	vldr	s15, [r1]
 801a07e:	9a06      	ldr	r2, [sp, #24]
 801a080:	ee37 6a27 	vadd.f32	s12, s14, s15
 801a084:	9d01      	ldr	r5, [sp, #4]
 801a086:	edd2 6a00 	vldr	s13, [r2]
 801a08a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a08e:	9b02      	ldr	r3, [sp, #8]
 801a090:	ee76 3a86 	vadd.f32	s7, s13, s12
 801a094:	ed95 3a00 	vldr	s6, [r5]
 801a098:	ed93 5a01 	vldr	s10, [r3, #4]
 801a09c:	ee36 6a66 	vsub.f32	s12, s12, s13
 801a0a0:	9b00      	ldr	r3, [sp, #0]
 801a0a2:	ee73 3a83 	vadd.f32	s7, s7, s6
 801a0a6:	edd5 2a01 	vldr	s5, [r5, #4]
 801a0aa:	ed93 4a01 	vldr	s8, [r3, #4]
 801a0ae:	ee36 6a43 	vsub.f32	s12, s12, s6
 801a0b2:	9b00      	ldr	r3, [sp, #0]
 801a0b4:	ee74 5a05 	vadd.f32	s11, s8, s10
 801a0b8:	edd2 7a01 	vldr	s15, [r2, #4]
 801a0bc:	edc3 3a00 	vstr	s7, [r3]
 801a0c0:	ee34 4a45 	vsub.f32	s8, s8, s10
 801a0c4:	edd2 3a01 	vldr	s7, [r2, #4]
 801a0c8:	ee77 4a87 	vadd.f32	s9, s15, s14
 801a0cc:	ed95 2a01 	vldr	s4, [r5, #4]
 801a0d0:	ee75 3aa3 	vadd.f32	s7, s11, s7
 801a0d4:	9d05      	ldr	r5, [sp, #20]
 801a0d6:	ee34 5a66 	vsub.f32	s10, s8, s13
 801a0da:	9b00      	ldr	r3, [sp, #0]
 801a0dc:	ee74 4ae2 	vsub.f32	s9, s9, s5
 801a0e0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801a0e4:	ee73 3a82 	vadd.f32	s7, s7, s4
 801a0e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a0ea:	ee35 5a03 	vadd.f32	s10, s10, s6
 801a0ee:	4621      	mov	r1, r4
 801a0f0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801a0f4:	edc3 3a01 	vstr	s7, [r3, #4]
 801a0f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a0fc:	edd5 3a00 	vldr	s7, [r5]
 801a100:	ee76 6a84 	vadd.f32	s13, s13, s8
 801a104:	ed95 7a01 	vldr	s14, [r5, #4]
 801a108:	ee75 5ae2 	vsub.f32	s11, s11, s5
 801a10c:	ee24 4aa3 	vmul.f32	s8, s9, s7
 801a110:	2304      	movs	r3, #4
 801a112:	ee64 4a87 	vmul.f32	s9, s9, s14
 801a116:	ee25 7a07 	vmul.f32	s14, s10, s14
 801a11a:	ee25 5a23 	vmul.f32	s10, s10, s7
 801a11e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801a122:	ee34 7a07 	vadd.f32	s14, s8, s14
 801a126:	ee35 5a64 	vsub.f32	s10, s10, s9
 801a12a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801a12e:	ed82 7a00 	vstr	s14, [r2]
 801a132:	ed82 5a01 	vstr	s10, [r2, #4]
 801a136:	9a03      	ldr	r2, [sp, #12]
 801a138:	edd2 4a01 	vldr	s9, [r2, #4]
 801a13c:	ed92 7a00 	vldr	s14, [r2]
 801a140:	9a02      	ldr	r2, [sp, #8]
 801a142:	ee26 5a07 	vmul.f32	s10, s12, s14
 801a146:	ee26 6a24 	vmul.f32	s12, s12, s9
 801a14a:	ee25 7a87 	vmul.f32	s14, s11, s14
 801a14e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801a152:	ee37 6a46 	vsub.f32	s12, s14, s12
 801a156:	ee75 5a25 	vadd.f32	s11, s10, s11
 801a15a:	edc2 5a00 	vstr	s11, [r2]
 801a15e:	ed82 6a01 	vstr	s12, [r2, #4]
 801a162:	9a04      	ldr	r2, [sp, #16]
 801a164:	9d01      	ldr	r5, [sp, #4]
 801a166:	edd2 5a01 	vldr	s11, [r2, #4]
 801a16a:	ed92 7a00 	vldr	s14, [r2]
 801a16e:	ee27 6a87 	vmul.f32	s12, s15, s14
 801a172:	ee26 7a87 	vmul.f32	s14, s13, s14
 801a176:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801a17a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801a17e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a182:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a186:	edc5 7a01 	vstr	s15, [r5, #4]
 801a18a:	edc5 6a00 	vstr	s13, [r5]
 801a18e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a190:	686a      	ldr	r2, [r5, #4]
 801a192:	f000 f94b 	bl	801a42c <arm_radix8_butterfly_f32>
 801a196:	4630      	mov	r0, r6
 801a198:	4621      	mov	r1, r4
 801a19a:	686a      	ldr	r2, [r5, #4]
 801a19c:	2304      	movs	r3, #4
 801a19e:	f000 f945 	bl	801a42c <arm_radix8_butterfly_f32>
 801a1a2:	4638      	mov	r0, r7
 801a1a4:	4621      	mov	r1, r4
 801a1a6:	686a      	ldr	r2, [r5, #4]
 801a1a8:	2304      	movs	r3, #4
 801a1aa:	f000 f93f 	bl	801a42c <arm_radix8_butterfly_f32>
 801a1ae:	4621      	mov	r1, r4
 801a1b0:	686a      	ldr	r2, [r5, #4]
 801a1b2:	2304      	movs	r3, #4
 801a1b4:	9808      	ldr	r0, [sp, #32]
 801a1b6:	b00d      	add	sp, #52	; 0x34
 801a1b8:	ecbd 8b04 	vpop	{d8-d9}
 801a1bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1c0:	f000 b934 	b.w	801a42c <arm_radix8_butterfly_f32>

0801a1c4 <arm_cfft_f32>:
 801a1c4:	2a01      	cmp	r2, #1
 801a1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1ca:	4606      	mov	r6, r0
 801a1cc:	4617      	mov	r7, r2
 801a1ce:	460c      	mov	r4, r1
 801a1d0:	4698      	mov	r8, r3
 801a1d2:	8805      	ldrh	r5, [r0, #0]
 801a1d4:	d055      	beq.n	801a282 <arm_cfft_f32+0xbe>
 801a1d6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801a1da:	d061      	beq.n	801a2a0 <arm_cfft_f32+0xdc>
 801a1dc:	d916      	bls.n	801a20c <arm_cfft_f32+0x48>
 801a1de:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801a1e2:	d01a      	beq.n	801a21a <arm_cfft_f32+0x56>
 801a1e4:	d946      	bls.n	801a274 <arm_cfft_f32+0xb0>
 801a1e6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801a1ea:	d059      	beq.n	801a2a0 <arm_cfft_f32+0xdc>
 801a1ec:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 801a1f0:	d105      	bne.n	801a1fe <arm_cfft_f32+0x3a>
 801a1f2:	2301      	movs	r3, #1
 801a1f4:	6872      	ldr	r2, [r6, #4]
 801a1f6:	4629      	mov	r1, r5
 801a1f8:	4620      	mov	r0, r4
 801a1fa:	f000 f917 	bl	801a42c <arm_radix8_butterfly_f32>
 801a1fe:	f1b8 0f00 	cmp.w	r8, #0
 801a202:	d111      	bne.n	801a228 <arm_cfft_f32+0x64>
 801a204:	2f01      	cmp	r7, #1
 801a206:	d016      	beq.n	801a236 <arm_cfft_f32+0x72>
 801a208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a20c:	2d20      	cmp	r5, #32
 801a20e:	d047      	beq.n	801a2a0 <arm_cfft_f32+0xdc>
 801a210:	d934      	bls.n	801a27c <arm_cfft_f32+0xb8>
 801a212:	2d40      	cmp	r5, #64	; 0x40
 801a214:	d0ed      	beq.n	801a1f2 <arm_cfft_f32+0x2e>
 801a216:	2d80      	cmp	r5, #128	; 0x80
 801a218:	d1f1      	bne.n	801a1fe <arm_cfft_f32+0x3a>
 801a21a:	4621      	mov	r1, r4
 801a21c:	4630      	mov	r0, r6
 801a21e:	f7ff fca9 	bl	8019b74 <arm_cfft_radix8by2_f32>
 801a222:	f1b8 0f00 	cmp.w	r8, #0
 801a226:	d0ed      	beq.n	801a204 <arm_cfft_f32+0x40>
 801a228:	68b2      	ldr	r2, [r6, #8]
 801a22a:	4620      	mov	r0, r4
 801a22c:	89b1      	ldrh	r1, [r6, #12]
 801a22e:	f000 f88b 	bl	801a348 <arm_bitreversal_32>
 801a232:	2f01      	cmp	r7, #1
 801a234:	d1e8      	bne.n	801a208 <arm_cfft_f32+0x44>
 801a236:	ee07 5a90 	vmov	s15, r5
 801a23a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a242:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a246:	2d00      	cmp	r5, #0
 801a248:	d0de      	beq.n	801a208 <arm_cfft_f32+0x44>
 801a24a:	f104 0108 	add.w	r1, r4, #8
 801a24e:	2300      	movs	r3, #0
 801a250:	ed11 7a02 	vldr	s14, [r1, #-8]
 801a254:	3301      	adds	r3, #1
 801a256:	ed51 7a01 	vldr	s15, [r1, #-4]
 801a25a:	3108      	adds	r1, #8
 801a25c:	429d      	cmp	r5, r3
 801a25e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a262:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a266:	ed01 7a04 	vstr	s14, [r1, #-16]
 801a26a:	ed41 7a03 	vstr	s15, [r1, #-12]
 801a26e:	d1ef      	bne.n	801a250 <arm_cfft_f32+0x8c>
 801a270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a274:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 801a278:	d0bb      	beq.n	801a1f2 <arm_cfft_f32+0x2e>
 801a27a:	e7c0      	b.n	801a1fe <arm_cfft_f32+0x3a>
 801a27c:	2d10      	cmp	r5, #16
 801a27e:	d0cc      	beq.n	801a21a <arm_cfft_f32+0x56>
 801a280:	e7bd      	b.n	801a1fe <arm_cfft_f32+0x3a>
 801a282:	b195      	cbz	r5, 801a2aa <arm_cfft_f32+0xe6>
 801a284:	f101 030c 	add.w	r3, r1, #12
 801a288:	2200      	movs	r2, #0
 801a28a:	ed53 7a02 	vldr	s15, [r3, #-8]
 801a28e:	3201      	adds	r2, #1
 801a290:	3308      	adds	r3, #8
 801a292:	eef1 7a67 	vneg.f32	s15, s15
 801a296:	4295      	cmp	r5, r2
 801a298:	ed43 7a04 	vstr	s15, [r3, #-16]
 801a29c:	d1f5      	bne.n	801a28a <arm_cfft_f32+0xc6>
 801a29e:	e79a      	b.n	801a1d6 <arm_cfft_f32+0x12>
 801a2a0:	4621      	mov	r1, r4
 801a2a2:	4630      	mov	r0, r6
 801a2a4:	f7ff fd32 	bl	8019d0c <arm_cfft_radix8by4_f32>
 801a2a8:	e7a9      	b.n	801a1fe <arm_cfft_f32+0x3a>
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d0ac      	beq.n	801a208 <arm_cfft_f32+0x44>
 801a2ae:	e7bb      	b.n	801a228 <arm_cfft_f32+0x64>

0801a2b0 <arm_dct4_init_f32>:
 801a2b0:	b570      	push	{r4, r5, r6, lr}
 801a2b2:	b082      	sub	sp, #8
 801a2b4:	460c      	mov	r4, r1
 801a2b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a2ba:	4611      	mov	r1, r2
 801a2bc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801a2c0:	ed80 0a01 	vstr	s0, [r0, #4]
 801a2c4:	8003      	strh	r3, [r0, #0]
 801a2c6:	8042      	strh	r2, [r0, #2]
 801a2c8:	e9c0 4104 	strd	r4, r1, [r0, #16]
 801a2cc:	d020      	beq.n	801a310 <arm_dct4_init_f32+0x60>
 801a2ce:	d914      	bls.n	801a2fa <arm_dct4_init_f32+0x4a>
 801a2d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a2d4:	d022      	beq.n	801a31c <arm_dct4_init_f32+0x6c>
 801a2d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a2da:	d116      	bne.n	801a30a <arm_dct4_init_f32+0x5a>
 801a2dc:	4e12      	ldr	r6, [pc, #72]	; (801a328 <arm_dct4_init_f32+0x78>)
 801a2de:	2500      	movs	r5, #0
 801a2e0:	4a12      	ldr	r2, [pc, #72]	; (801a32c <arm_dct4_init_f32+0x7c>)
 801a2e2:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801a2e6:	2601      	movs	r6, #1
 801a2e8:	461a      	mov	r2, r3
 801a2ea:	4620      	mov	r0, r4
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	9600      	str	r6, [sp, #0]
 801a2f0:	f000 fb5e 	bl	801a9b0 <arm_rfft_init_f32>
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	b002      	add	sp, #8
 801a2f8:	bd70      	pop	{r4, r5, r6, pc}
 801a2fa:	2b80      	cmp	r3, #128	; 0x80
 801a2fc:	d105      	bne.n	801a30a <arm_dct4_init_f32+0x5a>
 801a2fe:	4e0c      	ldr	r6, [pc, #48]	; (801a330 <arm_dct4_init_f32+0x80>)
 801a300:	2500      	movs	r5, #0
 801a302:	4a0c      	ldr	r2, [pc, #48]	; (801a334 <arm_dct4_init_f32+0x84>)
 801a304:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801a308:	e7ed      	b.n	801a2e6 <arm_dct4_init_f32+0x36>
 801a30a:	f04f 35ff 	mov.w	r5, #4294967295
 801a30e:	e7ea      	b.n	801a2e6 <arm_dct4_init_f32+0x36>
 801a310:	4e09      	ldr	r6, [pc, #36]	; (801a338 <arm_dct4_init_f32+0x88>)
 801a312:	2500      	movs	r5, #0
 801a314:	4a09      	ldr	r2, [pc, #36]	; (801a33c <arm_dct4_init_f32+0x8c>)
 801a316:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801a31a:	e7e4      	b.n	801a2e6 <arm_dct4_init_f32+0x36>
 801a31c:	4e08      	ldr	r6, [pc, #32]	; (801a340 <arm_dct4_init_f32+0x90>)
 801a31e:	2500      	movs	r5, #0
 801a320:	4a08      	ldr	r2, [pc, #32]	; (801a344 <arm_dct4_init_f32+0x94>)
 801a322:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801a326:	e7de      	b.n	801a2e6 <arm_dct4_init_f32+0x36>
 801a328:	0802dca8 	.word	0x0802dca8
 801a32c:	08044390 	.word	0x08044390
 801a330:	080288a8 	.word	0x080288a8
 801a334:	08041990 	.word	0x08041990
 801a338:	0802cca8 	.word	0x0802cca8
 801a33c:	08043b90 	.word	0x08043b90
 801a340:	08028ca8 	.word	0x08028ca8
 801a344:	08041b90 	.word	0x08041b90

0801a348 <arm_bitreversal_32>:
 801a348:	b321      	cbz	r1, 801a394 <arm_bitreversal_32+0x4c>
 801a34a:	f102 0c02 	add.w	ip, r2, #2
 801a34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a352:	4690      	mov	r8, r2
 801a354:	2500      	movs	r5, #0
 801a356:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 801a35a:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 801a35e:	3502      	adds	r5, #2
 801a360:	08a4      	lsrs	r4, r4, #2
 801a362:	089b      	lsrs	r3, r3, #2
 801a364:	428d      	cmp	r5, r1
 801a366:	ea4f 0784 	mov.w	r7, r4, lsl #2
 801a36a:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 801a36e:	ea4f 0683 	mov.w	r6, r3, lsl #2
 801a372:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801a376:	f107 0704 	add.w	r7, r7, #4
 801a37a:	f106 0604 	add.w	r6, r6, #4
 801a37e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 801a382:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 801a386:	59c4      	ldr	r4, [r0, r7]
 801a388:	5983      	ldr	r3, [r0, r6]
 801a38a:	51c3      	str	r3, [r0, r7]
 801a38c:	5184      	str	r4, [r0, r6]
 801a38e:	d3e2      	bcc.n	801a356 <arm_bitreversal_32+0xe>
 801a390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a394:	4770      	bx	lr
 801a396:	bf00      	nop

0801a398 <arm_cos_f32>:
 801a398:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a420 <arm_cos_f32+0x88>
 801a39c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 801a3a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a3a4:	ee30 0a07 	vadd.f32	s0, s0, s14
 801a3a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a3ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3b4:	d504      	bpl.n	801a3c0 <arm_cos_f32+0x28>
 801a3b6:	ee17 3a90 	vmov	r3, s15
 801a3ba:	3b01      	subs	r3, #1
 801a3bc:	ee07 3a90 	vmov	s15, r3
 801a3c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a3c4:	eddf 6a17 	vldr	s13, [pc, #92]	; 801a424 <arm_cos_f32+0x8c>
 801a3c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a3cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a3d0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801a3d4:	ee17 3a10 	vmov	r3, s14
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a3de:	d21a      	bcs.n	801a416 <arm_cos_f32+0x7e>
 801a3e0:	ee07 3a10 	vmov	s14, r3
 801a3e4:	1c59      	adds	r1, r3, #1
 801a3e6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801a3ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a3ee:	4a0e      	ldr	r2, [pc, #56]	; (801a428 <arm_cos_f32+0x90>)
 801a3f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a3f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a3f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a3fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a400:	edd3 6a00 	vldr	s13, [r3]
 801a404:	ed92 7a00 	vldr	s14, [r2]
 801a408:	ee20 0a26 	vmul.f32	s0, s0, s13
 801a40c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a410:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a414:	4770      	bx	lr
 801a416:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a41a:	2101      	movs	r1, #1
 801a41c:	2300      	movs	r3, #0
 801a41e:	e7e6      	b.n	801a3ee <arm_cos_f32+0x56>
 801a420:	3e22f983 	.word	0x3e22f983
 801a424:	44000000 	.word	0x44000000
 801a428:	0805c390 	.word	0x0805c390

0801a42c <arm_radix8_butterfly_f32>:
 801a42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a430:	ed2d 8b10 	vpush	{d8-d15}
 801a434:	b095      	sub	sp, #84	; 0x54
 801a436:	468a      	mov	sl, r1
 801a438:	468b      	mov	fp, r1
 801a43a:	eddf 8abb 	vldr	s17, [pc, #748]	; 801a728 <arm_radix8_butterfly_f32+0x2fc>
 801a43e:	9012      	str	r0, [sp, #72]	; 0x48
 801a440:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801a444:	4603      	mov	r3, r0
 801a446:	3304      	adds	r3, #4
 801a448:	9313      	str	r3, [sp, #76]	; 0x4c
 801a44a:	ea4f 02db 	mov.w	r2, fp, lsr #3
 801a44e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801a454:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 801a458:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801a45c:	920f      	str	r2, [sp, #60]	; 0x3c
 801a45e:	9303      	str	r3, [sp, #12]
 801a460:	0153      	lsls	r3, r2, #5
 801a462:	0114      	lsls	r4, r2, #4
 801a464:	eba9 0002 	sub.w	r0, r9, r2
 801a468:	18ce      	adds	r6, r1, r3
 801a46a:	9302      	str	r3, [sp, #8]
 801a46c:	0097      	lsls	r7, r2, #2
 801a46e:	4613      	mov	r3, r2
 801a470:	eb06 0509 	add.w	r5, r6, r9
 801a474:	9004      	str	r0, [sp, #16]
 801a476:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 801a47a:	1bd2      	subs	r2, r2, r7
 801a47c:	eb05 0109 	add.w	r1, r5, r9
 801a480:	441f      	add	r7, r3
 801a482:	9405      	str	r4, [sp, #20]
 801a484:	f109 0004 	add.w	r0, r9, #4
 801a488:	9101      	str	r1, [sp, #4]
 801a48a:	1d21      	adds	r1, r4, #4
 801a48c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a48e:	f04f 0e00 	mov.w	lr, #0
 801a492:	9c01      	ldr	r4, [sp, #4]
 801a494:	4418      	add	r0, r3
 801a496:	4419      	add	r1, r3
 801a498:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801a49c:	9b02      	ldr	r3, [sp, #8]
 801a49e:	00fc      	lsls	r4, r7, #3
 801a4a0:	18d7      	adds	r7, r2, r3
 801a4a2:	9b04      	ldr	r3, [sp, #16]
 801a4a4:	9406      	str	r4, [sp, #24]
 801a4a6:	00db      	lsls	r3, r3, #3
 801a4a8:	9c01      	ldr	r4, [sp, #4]
 801a4aa:	9307      	str	r3, [sp, #28]
 801a4ac:	ea4f 1308 	mov.w	r3, r8, lsl #4
 801a4b0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a4b4:	9304      	str	r3, [sp, #16]
 801a4b6:	9b03      	ldr	r3, [sp, #12]
 801a4b8:	edd6 6a00 	vldr	s13, [r6]
 801a4bc:	44de      	add	lr, fp
 801a4be:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801a4c2:	ed94 7a00 	vldr	s14, [r4]
 801a4c6:	45f2      	cmp	sl, lr
 801a4c8:	ed10 6a01 	vldr	s12, [r0, #-4]
 801a4cc:	ee37 2aa6 	vadd.f32	s4, s15, s13
 801a4d0:	edd5 2a00 	vldr	s5, [r5]
 801a4d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a4d8:	edd7 3a00 	vldr	s7, [r7]
 801a4dc:	ed11 5a01 	vldr	s10, [r1, #-4]
 801a4e0:	ee36 3a22 	vadd.f32	s6, s12, s5
 801a4e4:	edd2 6a00 	vldr	s13, [r2]
 801a4e8:	ee75 5a07 	vadd.f32	s11, s10, s14
 801a4ec:	ee36 4aa3 	vadd.f32	s8, s13, s7
 801a4f0:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801a4f4:	ee72 4a25 	vadd.f32	s9, s4, s11
 801a4f8:	ee73 3a04 	vadd.f32	s7, s6, s8
 801a4fc:	ee35 5a47 	vsub.f32	s10, s10, s14
 801a500:	ee36 7a62 	vsub.f32	s14, s12, s5
 801a504:	ee32 2a65 	vsub.f32	s4, s4, s11
 801a508:	ee74 5aa3 	vadd.f32	s11, s9, s7
 801a50c:	ee74 4ae3 	vsub.f32	s9, s9, s7
 801a510:	ee37 6a66 	vsub.f32	s12, s14, s13
 801a514:	ed4c 5a01 	vstr	s11, [ip, #-4]
 801a518:	ee33 3a44 	vsub.f32	s6, s6, s8
 801a51c:	edc6 4a00 	vstr	s9, [r6]
 801a520:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a524:	ed97 4a01 	vldr	s8, [r7, #4]
 801a528:	ee66 6a28 	vmul.f32	s13, s12, s17
 801a52c:	edd0 5a00 	vldr	s11, [r0]
 801a530:	ed95 6a01 	vldr	s12, [r5, #4]
 801a534:	ee27 7a28 	vmul.f32	s14, s14, s17
 801a538:	edd2 3a01 	vldr	s7, [r2, #4]
 801a53c:	ee77 2aa6 	vadd.f32	s5, s15, s13
 801a540:	ee75 4ac6 	vsub.f32	s9, s11, s12
 801a544:	ed96 1a01 	vldr	s2, [r6, #4]
 801a548:	ee33 0ac4 	vsub.f32	s0, s7, s8
 801a54c:	edd4 0a01 	vldr	s1, [r4, #4]
 801a550:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a554:	eddc 6a00 	vldr	s13, [ip]
 801a558:	ee75 5a86 	vadd.f32	s11, s11, s12
 801a55c:	ed91 6a00 	vldr	s12, [r1]
 801a560:	ee73 3a84 	vadd.f32	s7, s7, s8
 801a564:	ee74 1a80 	vadd.f32	s3, s9, s0
 801a568:	ee36 4a81 	vadd.f32	s8, s13, s2
 801a56c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 801a570:	ee76 6ac1 	vsub.f32	s13, s13, s2
 801a574:	ee36 1a20 	vadd.f32	s2, s12, s1
 801a578:	ee61 1aa8 	vmul.f32	s3, s3, s17
 801a57c:	ee36 6a60 	vsub.f32	s12, s12, s1
 801a580:	ee64 4aa8 	vmul.f32	s9, s9, s17
 801a584:	ee75 0aa3 	vadd.f32	s1, s11, s7
 801a588:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801a58c:	ee74 3a01 	vadd.f32	s7, s8, s2
 801a590:	ee34 4a41 	vsub.f32	s8, s8, s2
 801a594:	ee36 1a21 	vadd.f32	s2, s12, s3
 801a598:	ee33 0aa0 	vadd.f32	s0, s7, s1
 801a59c:	ee36 6a61 	vsub.f32	s12, s12, s3
 801a5a0:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801a5a4:	ee76 1aa4 	vadd.f32	s3, s13, s9
 801a5a8:	ed8c 0a00 	vstr	s0, [ip]
 801a5ac:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a5b0:	449c      	add	ip, r3
 801a5b2:	ee75 4a07 	vadd.f32	s9, s10, s14
 801a5b6:	edc6 3a01 	vstr	s7, [r6, #4]
 801a5ba:	ee35 7a47 	vsub.f32	s14, s10, s14
 801a5be:	441e      	add	r6, r3
 801a5c0:	ee32 5a25 	vadd.f32	s10, s4, s11
 801a5c4:	ee72 5a65 	vsub.f32	s11, s4, s11
 801a5c8:	ee72 3a81 	vadd.f32	s7, s5, s2
 801a5cc:	ed01 5a01 	vstr	s10, [r1, #-4]
 801a5d0:	ee34 2a43 	vsub.f32	s4, s8, s6
 801a5d4:	edc4 5a00 	vstr	s11, [r4]
 801a5d8:	ee37 5a86 	vadd.f32	s10, s15, s12
 801a5dc:	ee71 5ae4 	vsub.f32	s11, s3, s9
 801a5e0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a5e4:	ed81 2a00 	vstr	s4, [r1]
 801a5e8:	ee36 6ac7 	vsub.f32	s12, s13, s14
 801a5ec:	4419      	add	r1, r3
 801a5ee:	ee33 4a04 	vadd.f32	s8, s6, s8
 801a5f2:	ee72 2ac1 	vsub.f32	s5, s5, s2
 801a5f6:	ee74 4aa1 	vadd.f32	s9, s9, s3
 801a5fa:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a5fe:	ed84 4a01 	vstr	s8, [r4, #4]
 801a602:	ed40 3a01 	vstr	s7, [r0, #-4]
 801a606:	441c      	add	r4, r3
 801a608:	edc7 2a00 	vstr	s5, [r7]
 801a60c:	ed85 5a00 	vstr	s10, [r5]
 801a610:	edc2 7a00 	vstr	s15, [r2]
 801a614:	edc0 5a00 	vstr	s11, [r0]
 801a618:	4418      	add	r0, r3
 801a61a:	edc7 4a01 	vstr	s9, [r7, #4]
 801a61e:	441f      	add	r7, r3
 801a620:	ed85 6a01 	vstr	s12, [r5, #4]
 801a624:	441d      	add	r5, r3
 801a626:	ed82 7a01 	vstr	s14, [r2, #4]
 801a62a:	441a      	add	r2, r3
 801a62c:	f63f af44 	bhi.w	801a4b8 <arm_radix8_butterfly_f32+0x8c>
 801a630:	469c      	mov	ip, r3
 801a632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a634:	2b07      	cmp	r3, #7
 801a636:	f240 81b6 	bls.w	801a9a6 <arm_radix8_butterfly_f32+0x57a>
 801a63a:	9a02      	ldr	r2, [sp, #8]
 801a63c:	f109 0608 	add.w	r6, r9, #8
 801a640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a642:	f108 0408 	add.w	r4, r8, #8
 801a646:	3208      	adds	r2, #8
 801a648:	9f06      	ldr	r7, [sp, #24]
 801a64a:	9d04      	ldr	r5, [sp, #16]
 801a64c:	189a      	adds	r2, r3, r2
 801a64e:	3708      	adds	r7, #8
 801a650:	3508      	adds	r5, #8
 801a652:	9807      	ldr	r0, [sp, #28]
 801a654:	920c      	str	r2, [sp, #48]	; 0x30
 801a656:	199a      	adds	r2, r3, r6
 801a658:	9905      	ldr	r1, [sp, #20]
 801a65a:	3008      	adds	r0, #8
 801a65c:	920b      	str	r2, [sp, #44]	; 0x2c
 801a65e:	19da      	adds	r2, r3, r7
 801a660:	310c      	adds	r1, #12
 801a662:	920a      	str	r2, [sp, #40]	; 0x28
 801a664:	195a      	adds	r2, r3, r5
 801a666:	9209      	str	r2, [sp, #36]	; 0x24
 801a668:	191a      	adds	r2, r3, r4
 801a66a:	9208      	str	r2, [sp, #32]
 801a66c:	181a      	adds	r2, r3, r0
 801a66e:	9207      	str	r2, [sp, #28]
 801a670:	185a      	adds	r2, r3, r1
 801a672:	330c      	adds	r3, #12
 801a674:	9205      	str	r2, [sp, #20]
 801a676:	9306      	str	r3, [sp, #24]
 801a678:	2301      	movs	r3, #1
 801a67a:	9304      	str	r3, [sp, #16]
 801a67c:	2300      	movs	r3, #0
 801a67e:	930d      	str	r3, [sp, #52]	; 0x34
 801a680:	4663      	mov	r3, ip
 801a682:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a684:	9910      	ldr	r1, [sp, #64]	; 0x40
 801a686:	f8dd c014 	ldr.w	ip, [sp, #20]
 801a68a:	440a      	add	r2, r1
 801a68c:	9f06      	ldr	r7, [sp, #24]
 801a68e:	9e07      	ldr	r6, [sp, #28]
 801a690:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 801a694:	920d      	str	r2, [sp, #52]	; 0x34
 801a696:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 801a69a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a69c:	9d08      	ldr	r5, [sp, #32]
 801a69e:	4442      	add	r2, r8
 801a6a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a6a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a6a4:	eb02 0108 	add.w	r1, r2, r8
 801a6a8:	ed92 ea00 	vldr	s28, [r2]
 801a6ac:	eb01 0208 	add.w	r2, r1, r8
 801a6b0:	edd1 da00 	vldr	s27, [r1]
 801a6b4:	eb02 0108 	add.w	r1, r2, r8
 801a6b8:	ed92 da00 	vldr	s26, [r2]
 801a6bc:	eb01 0208 	add.w	r2, r1, r8
 801a6c0:	edd1 ca00 	vldr	s25, [r1]
 801a6c4:	eb02 0108 	add.w	r1, r2, r8
 801a6c8:	ed92 ca00 	vldr	s24, [r2]
 801a6cc:	eb01 0208 	add.w	r2, r1, r8
 801a6d0:	edd1 ba00 	vldr	s23, [r1]
 801a6d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a6d6:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 801a6da:	ed92 ba00 	vldr	s22, [r2]
 801a6de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a6e0:	eb0e 0908 	add.w	r9, lr, r8
 801a6e4:	910e      	str	r1, [sp, #56]	; 0x38
 801a6e6:	9201      	str	r2, [sp, #4]
 801a6e8:	eb09 0208 	add.w	r2, r9, r8
 801a6ec:	ed99 aa01 	vldr	s20, [r9, #4]
 801a6f0:	edde aa01 	vldr	s21, [lr, #4]
 801a6f4:	eb02 0908 	add.w	r9, r2, r8
 801a6f8:	edd2 9a01 	vldr	s19, [r2, #4]
 801a6fc:	f8dd e010 	ldr.w	lr, [sp, #16]
 801a700:	eb09 0208 	add.w	r2, r9, r8
 801a704:	ed99 9a01 	vldr	s18, [r9, #4]
 801a708:	eb02 0908 	add.w	r9, r2, r8
 801a70c:	ed92 8a01 	vldr	s16, [r2, #4]
 801a710:	9a01      	ldr	r2, [sp, #4]
 801a712:	edd9 7a01 	vldr	s15, [r9, #4]
 801a716:	44c8      	add	r8, r9
 801a718:	edcd 7a02 	vstr	s15, [sp, #8]
 801a71c:	edd8 7a01 	vldr	s15, [r8, #4]
 801a720:	edcd 7a03 	vstr	s15, [sp, #12]
 801a724:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a726:	e001      	b.n	801a72c <arm_radix8_butterfly_f32+0x300>
 801a728:	3f3504f3 	.word	0x3f3504f3
 801a72c:	ed92 7a00 	vldr	s14, [r2]
 801a730:	44de      	add	lr, fp
 801a732:	ed17 1a01 	vldr	s2, [r7, #-4]
 801a736:	ed90 5a00 	vldr	s10, [r0]
 801a73a:	45f2      	cmp	sl, lr
 801a73c:	ed1c fa01 	vldr	s30, [ip, #-4]
 801a740:	ee31 3a07 	vadd.f32	s6, s2, s14
 801a744:	edd6 5a00 	vldr	s11, [r6]
 801a748:	ee31 1a47 	vsub.f32	s2, s2, s14
 801a74c:	edd4 7a00 	vldr	s15, [r4]
 801a750:	ed95 7a00 	vldr	s14, [r5]
 801a754:	ed91 4a00 	vldr	s8, [r1]
 801a758:	ee3f 6a27 	vadd.f32	s12, s30, s15
 801a75c:	ee77 6a25 	vadd.f32	s13, s14, s11
 801a760:	edd7 ea00 	vldr	s29, [r7]
 801a764:	ee74 fa05 	vadd.f32	s31, s8, s10
 801a768:	ee73 1a06 	vadd.f32	s3, s6, s12
 801a76c:	ee34 4a45 	vsub.f32	s8, s8, s10
 801a770:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 801a774:	ee37 7a65 	vsub.f32	s14, s14, s11
 801a778:	ee33 3a46 	vsub.f32	s6, s6, s12
 801a77c:	ee31 6a85 	vadd.f32	s12, s3, s10
 801a780:	ee7f 7a67 	vsub.f32	s15, s30, s15
 801a784:	ee34 fa07 	vadd.f32	s30, s8, s14
 801a788:	ed07 6a01 	vstr	s12, [r7, #-4]
 801a78c:	ee34 4a47 	vsub.f32	s8, s8, s14
 801a790:	edd5 3a01 	vldr	s7, [r5, #4]
 801a794:	ee7f fae6 	vsub.f32	s31, s31, s13
 801a798:	ed90 7a01 	vldr	s14, [r0, #4]
 801a79c:	ee2f fa28 	vmul.f32	s30, s30, s17
 801a7a0:	edd1 5a01 	vldr	s11, [r1, #4]
 801a7a4:	ee24 4a28 	vmul.f32	s8, s8, s17
 801a7a8:	ed96 6a01 	vldr	s12, [r6, #4]
 801a7ac:	ee31 5ac5 	vsub.f32	s10, s3, s10
 801a7b0:	ee75 0ac7 	vsub.f32	s1, s11, s14
 801a7b4:	edd2 6a01 	vldr	s13, [r2, #4]
 801a7b8:	ee73 2ac6 	vsub.f32	s5, s7, s12
 801a7bc:	edd4 4a01 	vldr	s9, [r4, #4]
 801a7c0:	ee75 5a87 	vadd.f32	s11, s11, s14
 801a7c4:	ed9c 7a00 	vldr	s14, [ip]
 801a7c8:	ee37 2a8f 	vadd.f32	s4, s15, s30
 801a7cc:	ee33 6a86 	vadd.f32	s12, s7, s12
 801a7d0:	ee37 facf 	vsub.f32	s30, s15, s30
 801a7d4:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 801a7d8:	ee70 7ae2 	vsub.f32	s15, s1, s5
 801a7dc:	ee7e eae6 	vsub.f32	s29, s29, s13
 801a7e0:	ee70 2aa2 	vadd.f32	s5, s1, s5
 801a7e4:	ee77 6a24 	vadd.f32	s13, s14, s9
 801a7e8:	ee75 0a86 	vadd.f32	s1, s11, s12
 801a7ec:	ee37 7a64 	vsub.f32	s14, s14, s9
 801a7f0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 801a7f4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801a7f8:	ee62 2aa8 	vmul.f32	s5, s5, s17
 801a7fc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801a800:	ee73 3ae6 	vsub.f32	s7, s7, s13
 801a804:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 801a808:	ee77 4a22 	vadd.f32	s9, s14, s5
 801a80c:	ee7e eae7 	vsub.f32	s29, s29, s15
 801a810:	ee77 7a62 	vsub.f32	s15, s14, s5
 801a814:	ee71 2a04 	vadd.f32	s5, s2, s8
 801a818:	ee31 7a44 	vsub.f32	s14, s2, s8
 801a81c:	ee30 1a60 	vsub.f32	s2, s0, s1
 801a820:	ee73 1a06 	vadd.f32	s3, s6, s12
 801a824:	ee33 6a46 	vsub.f32	s12, s6, s12
 801a828:	ee33 3aef 	vsub.f32	s6, s7, s31
 801a82c:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 801a830:	ee3e 4acf 	vsub.f32	s8, s29, s30
 801a834:	ee75 3ac2 	vsub.f32	s7, s11, s4
 801a838:	ee72 5a25 	vadd.f32	s11, s4, s11
 801a83c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 801a840:	ee72 4ae4 	vsub.f32	s9, s5, s9
 801a844:	ee77 2a27 	vadd.f32	s5, s14, s15
 801a848:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a84c:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 801a850:	ee2c fa85 	vmul.f32	s30, s25, s10
 801a854:	ee69 ea01 	vmul.f32	s29, s18, s2
 801a858:	ee29 5a05 	vmul.f32	s10, s18, s10
 801a85c:	ee2c 1a81 	vmul.f32	s2, s25, s2
 801a860:	ee6d faa1 	vmul.f32	s31, s27, s3
 801a864:	ee70 0a20 	vadd.f32	s1, s0, s1
 801a868:	ee6a 1a21 	vmul.f32	s3, s20, s3
 801a86c:	ee2a 0a03 	vmul.f32	s0, s20, s6
 801a870:	ee2d 3a83 	vmul.f32	s6, s27, s6
 801a874:	edc7 0a00 	vstr	s1, [r7]
 801a878:	ee7f ea2e 	vadd.f32	s29, s30, s29
 801a87c:	441f      	add	r7, r3
 801a87e:	ee2a faa3 	vmul.f32	s30, s21, s7
 801a882:	ee31 5a45 	vsub.f32	s10, s2, s10
 801a886:	ee6e 3a23 	vmul.f32	s7, s28, s7
 801a88a:	edc2 ea00 	vstr	s29, [r2]
 801a88e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 801a892:	ee33 3a61 	vsub.f32	s6, s6, s3
 801a896:	ed82 5a01 	vstr	s10, [r2, #4]
 801a89a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 801a89e:	edcd 3a01 	vstr	s7, [sp, #4]
 801a8a2:	ed9d 5a03 	vldr	s10, [sp, #12]
 801a8a6:	ee6b ea86 	vmul.f32	s29, s23, s12
 801a8aa:	eddd 3a02 	vldr	s7, [sp, #8]
 801a8ae:	ee6b fa24 	vmul.f32	s31, s22, s9
 801a8b2:	ed0c 0a01 	vstr	s0, [ip, #-4]
 801a8b6:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a8ba:	ed8c 3a00 	vstr	s6, [ip]
 801a8be:	ee23 1aa6 	vmul.f32	s2, s7, s13
 801a8c2:	ee23 6a86 	vmul.f32	s12, s7, s12
 801a8c6:	eddd 3a01 	vldr	s7, [sp, #4]
 801a8ca:	ee25 5a25 	vmul.f32	s10, s10, s11
 801a8ce:	441a      	add	r2, r3
 801a8d0:	ee2c 0a22 	vmul.f32	s0, s24, s5
 801a8d4:	449c      	add	ip, r3
 801a8d6:	ee68 1a04 	vmul.f32	s3, s16, s8
 801a8da:	ee70 0a8f 	vadd.f32	s1, s1, s30
 801a8de:	ee2d 3a07 	vmul.f32	s6, s26, s14
 801a8e2:	ee29 faa7 	vmul.f32	s30, s19, s15
 801a8e6:	ee2a 2a82 	vmul.f32	s4, s21, s4
 801a8ea:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 801a8ee:	ee6b 5a25 	vmul.f32	s11, s22, s11
 801a8f2:	ee68 2a22 	vmul.f32	s5, s16, s5
 801a8f6:	ee2c 4a04 	vmul.f32	s8, s24, s8
 801a8fa:	ee29 7a87 	vmul.f32	s14, s19, s14
 801a8fe:	ee6d 7a27 	vmul.f32	s15, s26, s15
 801a902:	ee73 3ac2 	vsub.f32	s7, s7, s4
 801a906:	ee7e ea81 	vadd.f32	s29, s29, s2
 801a90a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801a90e:	ee3f 5a85 	vadd.f32	s10, s31, s10
 801a912:	ee75 4ae4 	vsub.f32	s9, s11, s9
 801a916:	edc4 ea00 	vstr	s29, [r4]
 801a91a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801a91e:	ed84 6a01 	vstr	s12, [r4, #4]
 801a922:	ee74 2a62 	vsub.f32	s5, s8, s5
 801a926:	edc1 0a00 	vstr	s1, [r1]
 801a92a:	ee33 3a0f 	vadd.f32	s6, s6, s30
 801a92e:	edc1 3a01 	vstr	s7, [r1, #4]
 801a932:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801a936:	ed86 5a00 	vstr	s10, [r6]
 801a93a:	edc6 4a01 	vstr	s9, [r6, #4]
 801a93e:	4419      	add	r1, r3
 801a940:	ed80 0a00 	vstr	s0, [r0]
 801a944:	441c      	add	r4, r3
 801a946:	edc0 2a01 	vstr	s5, [r0, #4]
 801a94a:	441e      	add	r6, r3
 801a94c:	ed85 3a00 	vstr	s6, [r5]
 801a950:	4418      	add	r0, r3
 801a952:	ed85 7a01 	vstr	s14, [r5, #4]
 801a956:	441d      	add	r5, r3
 801a958:	f63f aee8 	bhi.w	801a72c <arm_radix8_butterfly_f32+0x300>
 801a95c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a95e:	9a04      	ldr	r2, [sp, #16]
 801a960:	3108      	adds	r1, #8
 801a962:	3201      	adds	r2, #1
 801a964:	910c      	str	r1, [sp, #48]	; 0x30
 801a966:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a968:	9204      	str	r2, [sp, #16]
 801a96a:	3108      	adds	r1, #8
 801a96c:	910b      	str	r1, [sp, #44]	; 0x2c
 801a96e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a970:	3108      	adds	r1, #8
 801a972:	910a      	str	r1, [sp, #40]	; 0x28
 801a974:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a976:	3108      	adds	r1, #8
 801a978:	9109      	str	r1, [sp, #36]	; 0x24
 801a97a:	9908      	ldr	r1, [sp, #32]
 801a97c:	3108      	adds	r1, #8
 801a97e:	9108      	str	r1, [sp, #32]
 801a980:	9907      	ldr	r1, [sp, #28]
 801a982:	3108      	adds	r1, #8
 801a984:	9107      	str	r1, [sp, #28]
 801a986:	9906      	ldr	r1, [sp, #24]
 801a988:	3108      	adds	r1, #8
 801a98a:	9106      	str	r1, [sp, #24]
 801a98c:	9905      	ldr	r1, [sp, #20]
 801a98e:	3108      	adds	r1, #8
 801a990:	9105      	str	r1, [sp, #20]
 801a992:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a994:	4291      	cmp	r1, r2
 801a996:	f47f ae74 	bne.w	801a682 <arm_radix8_butterfly_f32+0x256>
 801a99a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a99c:	468b      	mov	fp, r1
 801a99e:	00db      	lsls	r3, r3, #3
 801a9a0:	b29b      	uxth	r3, r3
 801a9a2:	9310      	str	r3, [sp, #64]	; 0x40
 801a9a4:	e551      	b.n	801a44a <arm_radix8_butterfly_f32+0x1e>
 801a9a6:	b015      	add	sp, #84	; 0x54
 801a9a8:	ecbd 8b10 	vpop	{d8-d15}
 801a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a9b0 <arm_rfft_init_f32>:
 801a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9b2:	b294      	uxth	r4, r2
 801a9b4:	4f23      	ldr	r7, [pc, #140]	; (801aa44 <arm_rfft_init_f32+0x94>)
 801a9b6:	b2db      	uxtb	r3, r3
 801a9b8:	4e23      	ldr	r6, [pc, #140]	; (801aa48 <arm_rfft_init_f32+0x98>)
 801a9ba:	f3c2 024e 	ubfx	r2, r2, #1, #15
 801a9be:	460d      	mov	r5, r1
 801a9c0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801a9c4:	9906      	ldr	r1, [sp, #24]
 801a9c6:	7183      	strb	r3, [r0, #6]
 801a9c8:	6004      	str	r4, [r0, #0]
 801a9ca:	71c1      	strb	r1, [r0, #7]
 801a9cc:	8082      	strh	r2, [r0, #4]
 801a9ce:	e9c0 7603 	strd	r7, r6, [r0, #12]
 801a9d2:	d033      	beq.n	801aa3c <arm_rfft_init_f32+0x8c>
 801a9d4:	d911      	bls.n	801a9fa <arm_rfft_init_f32+0x4a>
 801a9d6:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 801a9da:	d026      	beq.n	801aa2a <arm_rfft_init_f32+0x7a>
 801a9dc:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 801a9e0:	d116      	bne.n	801aa10 <arm_rfft_init_f32+0x60>
 801a9e2:	2101      	movs	r1, #1
 801a9e4:	2400      	movs	r4, #0
 801a9e6:	6081      	str	r1, [r0, #8]
 801a9e8:	6145      	str	r5, [r0, #20]
 801a9ea:	4611      	mov	r1, r2
 801a9ec:	4628      	mov	r0, r5
 801a9ee:	b9b3      	cbnz	r3, 801aa1e <arm_rfft_init_f32+0x6e>
 801a9f0:	461a      	mov	r2, r3
 801a9f2:	f000 f82b 	bl	801aa4c <arm_cfft_radix4_init_f32>
 801a9f6:	4620      	mov	r0, r4
 801a9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9fa:	2c80      	cmp	r4, #128	; 0x80
 801a9fc:	d108      	bne.n	801aa10 <arm_rfft_init_f32+0x60>
 801a9fe:	2140      	movs	r1, #64	; 0x40
 801aa00:	6145      	str	r5, [r0, #20]
 801aa02:	2400      	movs	r4, #0
 801aa04:	6081      	str	r1, [r0, #8]
 801aa06:	4611      	mov	r1, r2
 801aa08:	4628      	mov	r0, r5
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d0f0      	beq.n	801a9f0 <arm_rfft_init_f32+0x40>
 801aa0e:	e006      	b.n	801aa1e <arm_rfft_init_f32+0x6e>
 801aa10:	6145      	str	r5, [r0, #20]
 801aa12:	f04f 34ff 	mov.w	r4, #4294967295
 801aa16:	4611      	mov	r1, r2
 801aa18:	4628      	mov	r0, r5
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d0e8      	beq.n	801a9f0 <arm_rfft_init_f32+0x40>
 801aa1e:	2300      	movs	r3, #0
 801aa20:	2201      	movs	r2, #1
 801aa22:	f000 f813 	bl	801aa4c <arm_cfft_radix4_init_f32>
 801aa26:	4620      	mov	r0, r4
 801aa28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa2a:	2104      	movs	r1, #4
 801aa2c:	6145      	str	r5, [r0, #20]
 801aa2e:	2400      	movs	r4, #0
 801aa30:	6081      	str	r1, [r0, #8]
 801aa32:	4611      	mov	r1, r2
 801aa34:	4628      	mov	r0, r5
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d0da      	beq.n	801a9f0 <arm_rfft_init_f32+0x40>
 801aa3a:	e7f0      	b.n	801aa1e <arm_rfft_init_f32+0x6e>
 801aa3c:	2110      	movs	r1, #16
 801aa3e:	2400      	movs	r4, #0
 801aa40:	6081      	str	r1, [r0, #8]
 801aa42:	e7d1      	b.n	801a9e8 <arm_rfft_init_f32+0x38>
 801aa44:	0804c390 	.word	0x0804c390
 801aa48:	08054390 	.word	0x08054390

0801aa4c <arm_cfft_radix4_init_f32>:
 801aa4c:	b410      	push	{r4}
 801aa4e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 801aa52:	4604      	mov	r4, r0
 801aa54:	4826      	ldr	r0, [pc, #152]	; (801aaf0 <arm_cfft_radix4_init_f32+0xa4>)
 801aa56:	70a2      	strb	r2, [r4, #2]
 801aa58:	70e3      	strb	r3, [r4, #3]
 801aa5a:	8021      	strh	r1, [r4, #0]
 801aa5c:	6060      	str	r0, [r4, #4]
 801aa5e:	d027      	beq.n	801aab0 <arm_cfft_radix4_init_f32+0x64>
 801aa60:	d911      	bls.n	801aa86 <arm_cfft_radix4_init_f32+0x3a>
 801aa62:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801aa66:	d02f      	beq.n	801aac8 <arm_cfft_radix4_init_f32+0x7c>
 801aa68:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 801aa6c:	d11b      	bne.n	801aaa6 <arm_cfft_radix4_init_f32+0x5a>
 801aa6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801aa72:	4a20      	ldr	r2, [pc, #128]	; (801aaf4 <arm_cfft_radix4_init_f32+0xa8>)
 801aa74:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 801aa78:	2000      	movs	r0, #0
 801aa7a:	e9c4 2102 	strd	r2, r1, [r4, #8]
 801aa7e:	6123      	str	r3, [r4, #16]
 801aa80:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa84:	4770      	bx	lr
 801aa86:	2910      	cmp	r1, #16
 801aa88:	d028      	beq.n	801aadc <arm_cfft_radix4_init_f32+0x90>
 801aa8a:	2940      	cmp	r1, #64	; 0x40
 801aa8c:	d10b      	bne.n	801aaa6 <arm_cfft_radix4_init_f32+0x5a>
 801aa8e:	f04f 5372 	mov.w	r3, #1015021568	; 0x3c800000
 801aa92:	f04f 1140 	mov.w	r1, #4194368	; 0x400040
 801aa96:	4a18      	ldr	r2, [pc, #96]	; (801aaf8 <arm_cfft_radix4_init_f32+0xac>)
 801aa98:	2000      	movs	r0, #0
 801aa9a:	6123      	str	r3, [r4, #16]
 801aa9c:	e9c4 2102 	strd	r2, r1, [r4, #8]
 801aaa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aaa4:	4770      	bx	lr
 801aaa6:	f04f 30ff 	mov.w	r0, #4294967295
 801aaaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aaae:	4770      	bx	lr
 801aab0:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 801aab4:	f04f 1110 	mov.w	r1, #1048592	; 0x100010
 801aab8:	4a10      	ldr	r2, [pc, #64]	; (801aafc <arm_cfft_radix4_init_f32+0xb0>)
 801aaba:	2000      	movs	r0, #0
 801aabc:	6123      	str	r3, [r4, #16]
 801aabe:	e9c4 2102 	strd	r2, r1, [r4, #8]
 801aac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aac6:	4770      	bx	lr
 801aac8:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 801aacc:	4a0c      	ldr	r2, [pc, #48]	; (801ab00 <arm_cfft_radix4_init_f32+0xb4>)
 801aace:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 801aad2:	2000      	movs	r0, #0
 801aad4:	e9c4 2102 	strd	r2, r1, [r4, #8]
 801aad8:	6123      	str	r3, [r4, #16]
 801aada:	e7d1      	b.n	801aa80 <arm_cfft_radix4_init_f32+0x34>
 801aadc:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 801aae0:	4a08      	ldr	r2, [pc, #32]	; (801ab04 <arm_cfft_radix4_init_f32+0xb8>)
 801aae2:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 801aae6:	2000      	movs	r0, #0
 801aae8:	e9c4 2102 	strd	r2, r1, [r4, #8]
 801aaec:	6123      	str	r3, [r4, #16]
 801aaee:	e7c7      	b.n	801aa80 <arm_cfft_radix4_init_f32+0x34>
 801aaf0:	08063914 	.word	0x08063914
 801aaf4:	08041190 	.word	0x08041190
 801aaf8:	0804120e 	.word	0x0804120e
 801aafc:	080411ae 	.word	0x080411ae
 801ab00:	08041196 	.word	0x08041196
 801ab04:	0804138e 	.word	0x0804138e

0801ab08 <__errno>:
 801ab08:	4b01      	ldr	r3, [pc, #4]	; (801ab10 <__errno+0x8>)
 801ab0a:	6818      	ldr	r0, [r3, #0]
 801ab0c:	4770      	bx	lr
 801ab0e:	bf00      	nop
 801ab10:	20000930 	.word	0x20000930

0801ab14 <__libc_init_array>:
 801ab14:	b570      	push	{r4, r5, r6, lr}
 801ab16:	4d0d      	ldr	r5, [pc, #52]	; (801ab4c <__libc_init_array+0x38>)
 801ab18:	2600      	movs	r6, #0
 801ab1a:	4c0d      	ldr	r4, [pc, #52]	; (801ab50 <__libc_init_array+0x3c>)
 801ab1c:	1b64      	subs	r4, r4, r5
 801ab1e:	10a4      	asrs	r4, r4, #2
 801ab20:	42a6      	cmp	r6, r4
 801ab22:	d109      	bne.n	801ab38 <__libc_init_array+0x24>
 801ab24:	4d0b      	ldr	r5, [pc, #44]	; (801ab54 <__libc_init_array+0x40>)
 801ab26:	2600      	movs	r6, #0
 801ab28:	4c0b      	ldr	r4, [pc, #44]	; (801ab58 <__libc_init_array+0x44>)
 801ab2a:	f004 fe29 	bl	801f780 <_init>
 801ab2e:	1b64      	subs	r4, r4, r5
 801ab30:	10a4      	asrs	r4, r4, #2
 801ab32:	42a6      	cmp	r6, r4
 801ab34:	d105      	bne.n	801ab42 <__libc_init_array+0x2e>
 801ab36:	bd70      	pop	{r4, r5, r6, pc}
 801ab38:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab3c:	3601      	adds	r6, #1
 801ab3e:	4798      	blx	r3
 801ab40:	e7ee      	b.n	801ab20 <__libc_init_array+0xc>
 801ab42:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab46:	3601      	adds	r6, #1
 801ab48:	4798      	blx	r3
 801ab4a:	e7f2      	b.n	801ab32 <__libc_init_array+0x1e>
 801ab4c:	08074b5c 	.word	0x08074b5c
 801ab50:	08074b5c 	.word	0x08074b5c
 801ab54:	08074b5c 	.word	0x08074b5c
 801ab58:	08074b60 	.word	0x08074b60

0801ab5c <malloc>:
 801ab5c:	4b02      	ldr	r3, [pc, #8]	; (801ab68 <malloc+0xc>)
 801ab5e:	4601      	mov	r1, r0
 801ab60:	6818      	ldr	r0, [r3, #0]
 801ab62:	f000 b885 	b.w	801ac70 <_malloc_r>
 801ab66:	bf00      	nop
 801ab68:	20000930 	.word	0x20000930

0801ab6c <memcpy>:
 801ab6c:	440a      	add	r2, r1
 801ab6e:	1e43      	subs	r3, r0, #1
 801ab70:	4291      	cmp	r1, r2
 801ab72:	d100      	bne.n	801ab76 <memcpy+0xa>
 801ab74:	4770      	bx	lr
 801ab76:	b510      	push	{r4, lr}
 801ab78:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ab7c:	4291      	cmp	r1, r2
 801ab7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ab82:	d1f9      	bne.n	801ab78 <memcpy+0xc>
 801ab84:	bd10      	pop	{r4, pc}

0801ab86 <memset>:
 801ab86:	4402      	add	r2, r0
 801ab88:	4603      	mov	r3, r0
 801ab8a:	4293      	cmp	r3, r2
 801ab8c:	d100      	bne.n	801ab90 <memset+0xa>
 801ab8e:	4770      	bx	lr
 801ab90:	f803 1b01 	strb.w	r1, [r3], #1
 801ab94:	e7f9      	b.n	801ab8a <memset+0x4>
	...

0801ab98 <_free_r>:
 801ab98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ab9a:	2900      	cmp	r1, #0
 801ab9c:	d043      	beq.n	801ac26 <_free_r+0x8e>
 801ab9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aba2:	1f0c      	subs	r4, r1, #4
 801aba4:	9001      	str	r0, [sp, #4]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	bfb8      	it	lt
 801abaa:	18e4      	addlt	r4, r4, r3
 801abac:	f003 f876 	bl	801dc9c <__malloc_lock>
 801abb0:	4a1e      	ldr	r2, [pc, #120]	; (801ac2c <_free_r+0x94>)
 801abb2:	9801      	ldr	r0, [sp, #4]
 801abb4:	6813      	ldr	r3, [r2, #0]
 801abb6:	b933      	cbnz	r3, 801abc6 <_free_r+0x2e>
 801abb8:	6063      	str	r3, [r4, #4]
 801abba:	6014      	str	r4, [r2, #0]
 801abbc:	b003      	add	sp, #12
 801abbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801abc2:	f003 b871 	b.w	801dca8 <__malloc_unlock>
 801abc6:	42a3      	cmp	r3, r4
 801abc8:	d908      	bls.n	801abdc <_free_r+0x44>
 801abca:	6825      	ldr	r5, [r4, #0]
 801abcc:	1961      	adds	r1, r4, r5
 801abce:	428b      	cmp	r3, r1
 801abd0:	bf01      	itttt	eq
 801abd2:	6819      	ldreq	r1, [r3, #0]
 801abd4:	685b      	ldreq	r3, [r3, #4]
 801abd6:	1949      	addeq	r1, r1, r5
 801abd8:	6021      	streq	r1, [r4, #0]
 801abda:	e7ed      	b.n	801abb8 <_free_r+0x20>
 801abdc:	461a      	mov	r2, r3
 801abde:	685b      	ldr	r3, [r3, #4]
 801abe0:	b10b      	cbz	r3, 801abe6 <_free_r+0x4e>
 801abe2:	42a3      	cmp	r3, r4
 801abe4:	d9fa      	bls.n	801abdc <_free_r+0x44>
 801abe6:	6811      	ldr	r1, [r2, #0]
 801abe8:	1855      	adds	r5, r2, r1
 801abea:	42a5      	cmp	r5, r4
 801abec:	d10b      	bne.n	801ac06 <_free_r+0x6e>
 801abee:	6824      	ldr	r4, [r4, #0]
 801abf0:	4421      	add	r1, r4
 801abf2:	1854      	adds	r4, r2, r1
 801abf4:	6011      	str	r1, [r2, #0]
 801abf6:	42a3      	cmp	r3, r4
 801abf8:	d1e0      	bne.n	801abbc <_free_r+0x24>
 801abfa:	681c      	ldr	r4, [r3, #0]
 801abfc:	685b      	ldr	r3, [r3, #4]
 801abfe:	4421      	add	r1, r4
 801ac00:	6053      	str	r3, [r2, #4]
 801ac02:	6011      	str	r1, [r2, #0]
 801ac04:	e7da      	b.n	801abbc <_free_r+0x24>
 801ac06:	d902      	bls.n	801ac0e <_free_r+0x76>
 801ac08:	230c      	movs	r3, #12
 801ac0a:	6003      	str	r3, [r0, #0]
 801ac0c:	e7d6      	b.n	801abbc <_free_r+0x24>
 801ac0e:	6825      	ldr	r5, [r4, #0]
 801ac10:	1961      	adds	r1, r4, r5
 801ac12:	428b      	cmp	r3, r1
 801ac14:	bf02      	ittt	eq
 801ac16:	6819      	ldreq	r1, [r3, #0]
 801ac18:	685b      	ldreq	r3, [r3, #4]
 801ac1a:	1949      	addeq	r1, r1, r5
 801ac1c:	6063      	str	r3, [r4, #4]
 801ac1e:	bf08      	it	eq
 801ac20:	6021      	streq	r1, [r4, #0]
 801ac22:	6054      	str	r4, [r2, #4]
 801ac24:	e7ca      	b.n	801abbc <_free_r+0x24>
 801ac26:	b003      	add	sp, #12
 801ac28:	bd30      	pop	{r4, r5, pc}
 801ac2a:	bf00      	nop
 801ac2c:	20004468 	.word	0x20004468

0801ac30 <sbrk_aligned>:
 801ac30:	b570      	push	{r4, r5, r6, lr}
 801ac32:	4e0e      	ldr	r6, [pc, #56]	; (801ac6c <sbrk_aligned+0x3c>)
 801ac34:	460c      	mov	r4, r1
 801ac36:	4605      	mov	r5, r0
 801ac38:	6831      	ldr	r1, [r6, #0]
 801ac3a:	b911      	cbnz	r1, 801ac42 <sbrk_aligned+0x12>
 801ac3c:	f000 ff0a 	bl	801ba54 <_sbrk_r>
 801ac40:	6030      	str	r0, [r6, #0]
 801ac42:	4621      	mov	r1, r4
 801ac44:	4628      	mov	r0, r5
 801ac46:	f000 ff05 	bl	801ba54 <_sbrk_r>
 801ac4a:	1c43      	adds	r3, r0, #1
 801ac4c:	d00a      	beq.n	801ac64 <sbrk_aligned+0x34>
 801ac4e:	1cc4      	adds	r4, r0, #3
 801ac50:	f024 0403 	bic.w	r4, r4, #3
 801ac54:	42a0      	cmp	r0, r4
 801ac56:	d007      	beq.n	801ac68 <sbrk_aligned+0x38>
 801ac58:	1a21      	subs	r1, r4, r0
 801ac5a:	4628      	mov	r0, r5
 801ac5c:	f000 fefa 	bl	801ba54 <_sbrk_r>
 801ac60:	3001      	adds	r0, #1
 801ac62:	d101      	bne.n	801ac68 <sbrk_aligned+0x38>
 801ac64:	f04f 34ff 	mov.w	r4, #4294967295
 801ac68:	4620      	mov	r0, r4
 801ac6a:	bd70      	pop	{r4, r5, r6, pc}
 801ac6c:	2000446c 	.word	0x2000446c

0801ac70 <_malloc_r>:
 801ac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac74:	1ccd      	adds	r5, r1, #3
 801ac76:	4607      	mov	r7, r0
 801ac78:	f025 0503 	bic.w	r5, r5, #3
 801ac7c:	3508      	adds	r5, #8
 801ac7e:	2d0c      	cmp	r5, #12
 801ac80:	bf38      	it	cc
 801ac82:	250c      	movcc	r5, #12
 801ac84:	2d00      	cmp	r5, #0
 801ac86:	db01      	blt.n	801ac8c <_malloc_r+0x1c>
 801ac88:	42a9      	cmp	r1, r5
 801ac8a:	d905      	bls.n	801ac98 <_malloc_r+0x28>
 801ac8c:	230c      	movs	r3, #12
 801ac8e:	2600      	movs	r6, #0
 801ac90:	603b      	str	r3, [r7, #0]
 801ac92:	4630      	mov	r0, r6
 801ac94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac98:	4e2e      	ldr	r6, [pc, #184]	; (801ad54 <_malloc_r+0xe4>)
 801ac9a:	f002 ffff 	bl	801dc9c <__malloc_lock>
 801ac9e:	6833      	ldr	r3, [r6, #0]
 801aca0:	461c      	mov	r4, r3
 801aca2:	bb34      	cbnz	r4, 801acf2 <_malloc_r+0x82>
 801aca4:	4629      	mov	r1, r5
 801aca6:	4638      	mov	r0, r7
 801aca8:	f7ff ffc2 	bl	801ac30 <sbrk_aligned>
 801acac:	1c43      	adds	r3, r0, #1
 801acae:	4604      	mov	r4, r0
 801acb0:	d14d      	bne.n	801ad4e <_malloc_r+0xde>
 801acb2:	6834      	ldr	r4, [r6, #0]
 801acb4:	4626      	mov	r6, r4
 801acb6:	2e00      	cmp	r6, #0
 801acb8:	d140      	bne.n	801ad3c <_malloc_r+0xcc>
 801acba:	6823      	ldr	r3, [r4, #0]
 801acbc:	4631      	mov	r1, r6
 801acbe:	4638      	mov	r0, r7
 801acc0:	eb04 0803 	add.w	r8, r4, r3
 801acc4:	f000 fec6 	bl	801ba54 <_sbrk_r>
 801acc8:	4580      	cmp	r8, r0
 801acca:	d13a      	bne.n	801ad42 <_malloc_r+0xd2>
 801accc:	6821      	ldr	r1, [r4, #0]
 801acce:	3503      	adds	r5, #3
 801acd0:	4638      	mov	r0, r7
 801acd2:	1a6d      	subs	r5, r5, r1
 801acd4:	f025 0503 	bic.w	r5, r5, #3
 801acd8:	3508      	adds	r5, #8
 801acda:	2d0c      	cmp	r5, #12
 801acdc:	bf38      	it	cc
 801acde:	250c      	movcc	r5, #12
 801ace0:	4629      	mov	r1, r5
 801ace2:	f7ff ffa5 	bl	801ac30 <sbrk_aligned>
 801ace6:	3001      	adds	r0, #1
 801ace8:	d02b      	beq.n	801ad42 <_malloc_r+0xd2>
 801acea:	6823      	ldr	r3, [r4, #0]
 801acec:	442b      	add	r3, r5
 801acee:	6023      	str	r3, [r4, #0]
 801acf0:	e00e      	b.n	801ad10 <_malloc_r+0xa0>
 801acf2:	6822      	ldr	r2, [r4, #0]
 801acf4:	1b52      	subs	r2, r2, r5
 801acf6:	d41e      	bmi.n	801ad36 <_malloc_r+0xc6>
 801acf8:	2a0b      	cmp	r2, #11
 801acfa:	d916      	bls.n	801ad2a <_malloc_r+0xba>
 801acfc:	1961      	adds	r1, r4, r5
 801acfe:	42a3      	cmp	r3, r4
 801ad00:	6025      	str	r5, [r4, #0]
 801ad02:	bf18      	it	ne
 801ad04:	6059      	strne	r1, [r3, #4]
 801ad06:	6863      	ldr	r3, [r4, #4]
 801ad08:	bf08      	it	eq
 801ad0a:	6031      	streq	r1, [r6, #0]
 801ad0c:	5162      	str	r2, [r4, r5]
 801ad0e:	604b      	str	r3, [r1, #4]
 801ad10:	f104 060b 	add.w	r6, r4, #11
 801ad14:	4638      	mov	r0, r7
 801ad16:	f002 ffc7 	bl	801dca8 <__malloc_unlock>
 801ad1a:	1d23      	adds	r3, r4, #4
 801ad1c:	f026 0607 	bic.w	r6, r6, #7
 801ad20:	1af2      	subs	r2, r6, r3
 801ad22:	d0b6      	beq.n	801ac92 <_malloc_r+0x22>
 801ad24:	1b9b      	subs	r3, r3, r6
 801ad26:	50a3      	str	r3, [r4, r2]
 801ad28:	e7b3      	b.n	801ac92 <_malloc_r+0x22>
 801ad2a:	6862      	ldr	r2, [r4, #4]
 801ad2c:	42a3      	cmp	r3, r4
 801ad2e:	bf0c      	ite	eq
 801ad30:	6032      	streq	r2, [r6, #0]
 801ad32:	605a      	strne	r2, [r3, #4]
 801ad34:	e7ec      	b.n	801ad10 <_malloc_r+0xa0>
 801ad36:	4623      	mov	r3, r4
 801ad38:	6864      	ldr	r4, [r4, #4]
 801ad3a:	e7b2      	b.n	801aca2 <_malloc_r+0x32>
 801ad3c:	4634      	mov	r4, r6
 801ad3e:	6876      	ldr	r6, [r6, #4]
 801ad40:	e7b9      	b.n	801acb6 <_malloc_r+0x46>
 801ad42:	230c      	movs	r3, #12
 801ad44:	4638      	mov	r0, r7
 801ad46:	603b      	str	r3, [r7, #0]
 801ad48:	f002 ffae 	bl	801dca8 <__malloc_unlock>
 801ad4c:	e7a1      	b.n	801ac92 <_malloc_r+0x22>
 801ad4e:	6025      	str	r5, [r4, #0]
 801ad50:	e7de      	b.n	801ad10 <_malloc_r+0xa0>
 801ad52:	bf00      	nop
 801ad54:	20004468 	.word	0x20004468

0801ad58 <__cvt>:
 801ad58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ad5c:	ec55 4b10 	vmov	r4, r5, d0
 801ad60:	2d00      	cmp	r5, #0
 801ad62:	460e      	mov	r6, r1
 801ad64:	4619      	mov	r1, r3
 801ad66:	462b      	mov	r3, r5
 801ad68:	bfb4      	ite	lt
 801ad6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801ad6e:	2300      	movge	r3, #0
 801ad70:	4691      	mov	r9, r2
 801ad72:	bfbf      	itttt	lt
 801ad74:	4622      	movlt	r2, r4
 801ad76:	461d      	movlt	r5, r3
 801ad78:	232d      	movlt	r3, #45	; 0x2d
 801ad7a:	4614      	movlt	r4, r2
 801ad7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ad80:	700b      	strb	r3, [r1, #0]
 801ad82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad84:	f023 0820 	bic.w	r8, r3, #32
 801ad88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ad8c:	d005      	beq.n	801ad9a <__cvt+0x42>
 801ad8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801ad92:	d100      	bne.n	801ad96 <__cvt+0x3e>
 801ad94:	3601      	adds	r6, #1
 801ad96:	2102      	movs	r1, #2
 801ad98:	e000      	b.n	801ad9c <__cvt+0x44>
 801ad9a:	2103      	movs	r1, #3
 801ad9c:	ab03      	add	r3, sp, #12
 801ad9e:	4632      	mov	r2, r6
 801ada0:	9301      	str	r3, [sp, #4]
 801ada2:	ab02      	add	r3, sp, #8
 801ada4:	ec45 4b10 	vmov	d0, r4, r5
 801ada8:	9300      	str	r3, [sp, #0]
 801adaa:	4653      	mov	r3, sl
 801adac:	f001 fdf8 	bl	801c9a0 <_dtoa_r>
 801adb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801adb4:	4607      	mov	r7, r0
 801adb6:	d102      	bne.n	801adbe <__cvt+0x66>
 801adb8:	f019 0f01 	tst.w	r9, #1
 801adbc:	d022      	beq.n	801ae04 <__cvt+0xac>
 801adbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801adc2:	eb07 0906 	add.w	r9, r7, r6
 801adc6:	d110      	bne.n	801adea <__cvt+0x92>
 801adc8:	783b      	ldrb	r3, [r7, #0]
 801adca:	2b30      	cmp	r3, #48	; 0x30
 801adcc:	d10a      	bne.n	801ade4 <__cvt+0x8c>
 801adce:	2200      	movs	r2, #0
 801add0:	2300      	movs	r3, #0
 801add2:	4620      	mov	r0, r4
 801add4:	4629      	mov	r1, r5
 801add6:	f7e5 fe7b 	bl	8000ad0 <__aeabi_dcmpeq>
 801adda:	b918      	cbnz	r0, 801ade4 <__cvt+0x8c>
 801addc:	f1c6 0601 	rsb	r6, r6, #1
 801ade0:	f8ca 6000 	str.w	r6, [sl]
 801ade4:	f8da 3000 	ldr.w	r3, [sl]
 801ade8:	4499      	add	r9, r3
 801adea:	2200      	movs	r2, #0
 801adec:	2300      	movs	r3, #0
 801adee:	4620      	mov	r0, r4
 801adf0:	4629      	mov	r1, r5
 801adf2:	f7e5 fe6d 	bl	8000ad0 <__aeabi_dcmpeq>
 801adf6:	b108      	cbz	r0, 801adfc <__cvt+0xa4>
 801adf8:	f8cd 900c 	str.w	r9, [sp, #12]
 801adfc:	2230      	movs	r2, #48	; 0x30
 801adfe:	9b03      	ldr	r3, [sp, #12]
 801ae00:	454b      	cmp	r3, r9
 801ae02:	d307      	bcc.n	801ae14 <__cvt+0xbc>
 801ae04:	9b03      	ldr	r3, [sp, #12]
 801ae06:	4638      	mov	r0, r7
 801ae08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ae0a:	1bdb      	subs	r3, r3, r7
 801ae0c:	6013      	str	r3, [r2, #0]
 801ae0e:	b004      	add	sp, #16
 801ae10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae14:	1c59      	adds	r1, r3, #1
 801ae16:	9103      	str	r1, [sp, #12]
 801ae18:	701a      	strb	r2, [r3, #0]
 801ae1a:	e7f0      	b.n	801adfe <__cvt+0xa6>

0801ae1c <__exponent>:
 801ae1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ae1e:	2900      	cmp	r1, #0
 801ae20:	4603      	mov	r3, r0
 801ae22:	bfb8      	it	lt
 801ae24:	4249      	neglt	r1, r1
 801ae26:	f803 2b02 	strb.w	r2, [r3], #2
 801ae2a:	bfb4      	ite	lt
 801ae2c:	222d      	movlt	r2, #45	; 0x2d
 801ae2e:	222b      	movge	r2, #43	; 0x2b
 801ae30:	2909      	cmp	r1, #9
 801ae32:	7042      	strb	r2, [r0, #1]
 801ae34:	dd2a      	ble.n	801ae8c <__exponent+0x70>
 801ae36:	f10d 0407 	add.w	r4, sp, #7
 801ae3a:	270a      	movs	r7, #10
 801ae3c:	46a4      	mov	ip, r4
 801ae3e:	460a      	mov	r2, r1
 801ae40:	46a6      	mov	lr, r4
 801ae42:	3c01      	subs	r4, #1
 801ae44:	2a63      	cmp	r2, #99	; 0x63
 801ae46:	fb91 f6f7 	sdiv	r6, r1, r7
 801ae4a:	fb07 1516 	mls	r5, r7, r6, r1
 801ae4e:	4631      	mov	r1, r6
 801ae50:	f105 0530 	add.w	r5, r5, #48	; 0x30
 801ae54:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ae58:	dcf1      	bgt.n	801ae3e <__exponent+0x22>
 801ae5a:	3130      	adds	r1, #48	; 0x30
 801ae5c:	f1ae 0502 	sub.w	r5, lr, #2
 801ae60:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ae64:	1c44      	adds	r4, r0, #1
 801ae66:	4629      	mov	r1, r5
 801ae68:	4561      	cmp	r1, ip
 801ae6a:	d30a      	bcc.n	801ae82 <__exponent+0x66>
 801ae6c:	f10d 0209 	add.w	r2, sp, #9
 801ae70:	eba2 020e 	sub.w	r2, r2, lr
 801ae74:	4565      	cmp	r5, ip
 801ae76:	bf88      	it	hi
 801ae78:	2200      	movhi	r2, #0
 801ae7a:	4413      	add	r3, r2
 801ae7c:	1a18      	subs	r0, r3, r0
 801ae7e:	b003      	add	sp, #12
 801ae80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae82:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae86:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ae8a:	e7ed      	b.n	801ae68 <__exponent+0x4c>
 801ae8c:	2330      	movs	r3, #48	; 0x30
 801ae8e:	3130      	adds	r1, #48	; 0x30
 801ae90:	7083      	strb	r3, [r0, #2]
 801ae92:	1d03      	adds	r3, r0, #4
 801ae94:	70c1      	strb	r1, [r0, #3]
 801ae96:	e7f1      	b.n	801ae7c <__exponent+0x60>

0801ae98 <_printf_float>:
 801ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae9c:	ed2d 8b02 	vpush	{d8}
 801aea0:	b08d      	sub	sp, #52	; 0x34
 801aea2:	460c      	mov	r4, r1
 801aea4:	4616      	mov	r6, r2
 801aea6:	461f      	mov	r7, r3
 801aea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801aeac:	4605      	mov	r5, r0
 801aeae:	f002 fed1 	bl	801dc54 <_localeconv_r>
 801aeb2:	f8d0 a000 	ldr.w	sl, [r0]
 801aeb6:	4650      	mov	r0, sl
 801aeb8:	f7e5 f9de 	bl	8000278 <strlen>
 801aebc:	2300      	movs	r3, #0
 801aebe:	f894 b018 	ldrb.w	fp, [r4, #24]
 801aec2:	ee08 0a10 	vmov	s16, r0
 801aec6:	930a      	str	r3, [sp, #40]	; 0x28
 801aec8:	6823      	ldr	r3, [r4, #0]
 801aeca:	9305      	str	r3, [sp, #20]
 801aecc:	f8d8 3000 	ldr.w	r3, [r8]
 801aed0:	3307      	adds	r3, #7
 801aed2:	f023 0307 	bic.w	r3, r3, #7
 801aed6:	f103 0208 	add.w	r2, r3, #8
 801aeda:	f8c8 2000 	str.w	r2, [r8]
 801aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801aee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801aeea:	f04f 32ff 	mov.w	r2, #4294967295
 801aeee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801aef2:	f8cd 8018 	str.w	r8, [sp, #24]
 801aef6:	9307      	str	r3, [sp, #28]
 801aef8:	4b9e      	ldr	r3, [pc, #632]	; (801b174 <_printf_float+0x2dc>)
 801aefa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aefe:	f7e5 fe19 	bl	8000b34 <__aeabi_dcmpun>
 801af02:	bb88      	cbnz	r0, 801af68 <_printf_float+0xd0>
 801af04:	f04f 32ff 	mov.w	r2, #4294967295
 801af08:	4b9a      	ldr	r3, [pc, #616]	; (801b174 <_printf_float+0x2dc>)
 801af0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801af0e:	f7e5 fdf3 	bl	8000af8 <__aeabi_dcmple>
 801af12:	bb48      	cbnz	r0, 801af68 <_printf_float+0xd0>
 801af14:	2200      	movs	r2, #0
 801af16:	2300      	movs	r3, #0
 801af18:	4640      	mov	r0, r8
 801af1a:	4649      	mov	r1, r9
 801af1c:	f7e5 fde2 	bl	8000ae4 <__aeabi_dcmplt>
 801af20:	b110      	cbz	r0, 801af28 <_printf_float+0x90>
 801af22:	232d      	movs	r3, #45	; 0x2d
 801af24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af28:	4b93      	ldr	r3, [pc, #588]	; (801b178 <_printf_float+0x2e0>)
 801af2a:	4894      	ldr	r0, [pc, #592]	; (801b17c <_printf_float+0x2e4>)
 801af2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801af30:	bf94      	ite	ls
 801af32:	4698      	movls	r8, r3
 801af34:	4680      	movhi	r8, r0
 801af36:	2303      	movs	r3, #3
 801af38:	f04f 0900 	mov.w	r9, #0
 801af3c:	6123      	str	r3, [r4, #16]
 801af3e:	9b05      	ldr	r3, [sp, #20]
 801af40:	f023 0204 	bic.w	r2, r3, #4
 801af44:	6022      	str	r2, [r4, #0]
 801af46:	4633      	mov	r3, r6
 801af48:	aa0b      	add	r2, sp, #44	; 0x2c
 801af4a:	4621      	mov	r1, r4
 801af4c:	4628      	mov	r0, r5
 801af4e:	9700      	str	r7, [sp, #0]
 801af50:	f000 f9d8 	bl	801b304 <_printf_common>
 801af54:	3001      	adds	r0, #1
 801af56:	f040 8090 	bne.w	801b07a <_printf_float+0x1e2>
 801af5a:	f04f 30ff 	mov.w	r0, #4294967295
 801af5e:	b00d      	add	sp, #52	; 0x34
 801af60:	ecbd 8b02 	vpop	{d8}
 801af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af68:	4642      	mov	r2, r8
 801af6a:	464b      	mov	r3, r9
 801af6c:	4640      	mov	r0, r8
 801af6e:	4649      	mov	r1, r9
 801af70:	f7e5 fde0 	bl	8000b34 <__aeabi_dcmpun>
 801af74:	b140      	cbz	r0, 801af88 <_printf_float+0xf0>
 801af76:	464b      	mov	r3, r9
 801af78:	4881      	ldr	r0, [pc, #516]	; (801b180 <_printf_float+0x2e8>)
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	bfbc      	itt	lt
 801af7e:	232d      	movlt	r3, #45	; 0x2d
 801af80:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801af84:	4b7f      	ldr	r3, [pc, #508]	; (801b184 <_printf_float+0x2ec>)
 801af86:	e7d1      	b.n	801af2c <_printf_float+0x94>
 801af88:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801af8c:	6863      	ldr	r3, [r4, #4]
 801af8e:	9206      	str	r2, [sp, #24]
 801af90:	1c5a      	adds	r2, r3, #1
 801af92:	d13f      	bne.n	801b014 <_printf_float+0x17c>
 801af94:	2306      	movs	r3, #6
 801af96:	6063      	str	r3, [r4, #4]
 801af98:	9b05      	ldr	r3, [sp, #20]
 801af9a:	4628      	mov	r0, r5
 801af9c:	6861      	ldr	r1, [r4, #4]
 801af9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801afa2:	2300      	movs	r3, #0
 801afa4:	9303      	str	r3, [sp, #12]
 801afa6:	ab0a      	add	r3, sp, #40	; 0x28
 801afa8:	6022      	str	r2, [r4, #0]
 801afaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 801afae:	ab09      	add	r3, sp, #36	; 0x24
 801afb0:	ec49 8b10 	vmov	d0, r8, r9
 801afb4:	9300      	str	r3, [sp, #0]
 801afb6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801afba:	f7ff fecd 	bl	801ad58 <__cvt>
 801afbe:	9b06      	ldr	r3, [sp, #24]
 801afc0:	4680      	mov	r8, r0
 801afc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801afc4:	2b47      	cmp	r3, #71	; 0x47
 801afc6:	d108      	bne.n	801afda <_printf_float+0x142>
 801afc8:	1cc8      	adds	r0, r1, #3
 801afca:	db02      	blt.n	801afd2 <_printf_float+0x13a>
 801afcc:	6863      	ldr	r3, [r4, #4]
 801afce:	4299      	cmp	r1, r3
 801afd0:	dd41      	ble.n	801b056 <_printf_float+0x1be>
 801afd2:	f1ab 0b02 	sub.w	fp, fp, #2
 801afd6:	fa5f fb8b 	uxtb.w	fp, fp
 801afda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801afde:	d820      	bhi.n	801b022 <_printf_float+0x18a>
 801afe0:	3901      	subs	r1, #1
 801afe2:	465a      	mov	r2, fp
 801afe4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801afe8:	9109      	str	r1, [sp, #36]	; 0x24
 801afea:	f7ff ff17 	bl	801ae1c <__exponent>
 801afee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aff0:	4681      	mov	r9, r0
 801aff2:	1813      	adds	r3, r2, r0
 801aff4:	2a01      	cmp	r2, #1
 801aff6:	6123      	str	r3, [r4, #16]
 801aff8:	dc02      	bgt.n	801b000 <_printf_float+0x168>
 801affa:	6822      	ldr	r2, [r4, #0]
 801affc:	07d2      	lsls	r2, r2, #31
 801affe:	d501      	bpl.n	801b004 <_printf_float+0x16c>
 801b000:	3301      	adds	r3, #1
 801b002:	6123      	str	r3, [r4, #16]
 801b004:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d09c      	beq.n	801af46 <_printf_float+0xae>
 801b00c:	232d      	movs	r3, #45	; 0x2d
 801b00e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b012:	e798      	b.n	801af46 <_printf_float+0xae>
 801b014:	9a06      	ldr	r2, [sp, #24]
 801b016:	2a47      	cmp	r2, #71	; 0x47
 801b018:	d1be      	bne.n	801af98 <_printf_float+0x100>
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d1bc      	bne.n	801af98 <_printf_float+0x100>
 801b01e:	2301      	movs	r3, #1
 801b020:	e7b9      	b.n	801af96 <_printf_float+0xfe>
 801b022:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b026:	d118      	bne.n	801b05a <_printf_float+0x1c2>
 801b028:	2900      	cmp	r1, #0
 801b02a:	6863      	ldr	r3, [r4, #4]
 801b02c:	dd0b      	ble.n	801b046 <_printf_float+0x1ae>
 801b02e:	6121      	str	r1, [r4, #16]
 801b030:	b913      	cbnz	r3, 801b038 <_printf_float+0x1a0>
 801b032:	6822      	ldr	r2, [r4, #0]
 801b034:	07d0      	lsls	r0, r2, #31
 801b036:	d502      	bpl.n	801b03e <_printf_float+0x1a6>
 801b038:	3301      	adds	r3, #1
 801b03a:	440b      	add	r3, r1
 801b03c:	6123      	str	r3, [r4, #16]
 801b03e:	f04f 0900 	mov.w	r9, #0
 801b042:	65a1      	str	r1, [r4, #88]	; 0x58
 801b044:	e7de      	b.n	801b004 <_printf_float+0x16c>
 801b046:	b913      	cbnz	r3, 801b04e <_printf_float+0x1b6>
 801b048:	6822      	ldr	r2, [r4, #0]
 801b04a:	07d2      	lsls	r2, r2, #31
 801b04c:	d501      	bpl.n	801b052 <_printf_float+0x1ba>
 801b04e:	3302      	adds	r3, #2
 801b050:	e7f4      	b.n	801b03c <_printf_float+0x1a4>
 801b052:	2301      	movs	r3, #1
 801b054:	e7f2      	b.n	801b03c <_printf_float+0x1a4>
 801b056:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b05c:	4299      	cmp	r1, r3
 801b05e:	db05      	blt.n	801b06c <_printf_float+0x1d4>
 801b060:	6823      	ldr	r3, [r4, #0]
 801b062:	6121      	str	r1, [r4, #16]
 801b064:	07d8      	lsls	r0, r3, #31
 801b066:	d5ea      	bpl.n	801b03e <_printf_float+0x1a6>
 801b068:	1c4b      	adds	r3, r1, #1
 801b06a:	e7e7      	b.n	801b03c <_printf_float+0x1a4>
 801b06c:	2900      	cmp	r1, #0
 801b06e:	bfd4      	ite	le
 801b070:	f1c1 0202 	rsble	r2, r1, #2
 801b074:	2201      	movgt	r2, #1
 801b076:	4413      	add	r3, r2
 801b078:	e7e0      	b.n	801b03c <_printf_float+0x1a4>
 801b07a:	6823      	ldr	r3, [r4, #0]
 801b07c:	055a      	lsls	r2, r3, #21
 801b07e:	d407      	bmi.n	801b090 <_printf_float+0x1f8>
 801b080:	6923      	ldr	r3, [r4, #16]
 801b082:	4642      	mov	r2, r8
 801b084:	4631      	mov	r1, r6
 801b086:	4628      	mov	r0, r5
 801b088:	47b8      	blx	r7
 801b08a:	3001      	adds	r0, #1
 801b08c:	d12c      	bne.n	801b0e8 <_printf_float+0x250>
 801b08e:	e764      	b.n	801af5a <_printf_float+0xc2>
 801b090:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b094:	f240 80e0 	bls.w	801b258 <_printf_float+0x3c0>
 801b098:	2200      	movs	r2, #0
 801b09a:	2300      	movs	r3, #0
 801b09c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b0a0:	f7e5 fd16 	bl	8000ad0 <__aeabi_dcmpeq>
 801b0a4:	2800      	cmp	r0, #0
 801b0a6:	d034      	beq.n	801b112 <_printf_float+0x27a>
 801b0a8:	2301      	movs	r3, #1
 801b0aa:	4a37      	ldr	r2, [pc, #220]	; (801b188 <_printf_float+0x2f0>)
 801b0ac:	4631      	mov	r1, r6
 801b0ae:	4628      	mov	r0, r5
 801b0b0:	47b8      	blx	r7
 801b0b2:	3001      	adds	r0, #1
 801b0b4:	f43f af51 	beq.w	801af5a <_printf_float+0xc2>
 801b0b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b0bc:	429a      	cmp	r2, r3
 801b0be:	db02      	blt.n	801b0c6 <_printf_float+0x22e>
 801b0c0:	6823      	ldr	r3, [r4, #0]
 801b0c2:	07d8      	lsls	r0, r3, #31
 801b0c4:	d510      	bpl.n	801b0e8 <_printf_float+0x250>
 801b0c6:	ee18 3a10 	vmov	r3, s16
 801b0ca:	4652      	mov	r2, sl
 801b0cc:	4631      	mov	r1, r6
 801b0ce:	4628      	mov	r0, r5
 801b0d0:	47b8      	blx	r7
 801b0d2:	3001      	adds	r0, #1
 801b0d4:	f43f af41 	beq.w	801af5a <_printf_float+0xc2>
 801b0d8:	f04f 0800 	mov.w	r8, #0
 801b0dc:	f104 091a 	add.w	r9, r4, #26
 801b0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0e2:	3b01      	subs	r3, #1
 801b0e4:	4543      	cmp	r3, r8
 801b0e6:	dc09      	bgt.n	801b0fc <_printf_float+0x264>
 801b0e8:	6823      	ldr	r3, [r4, #0]
 801b0ea:	079b      	lsls	r3, r3, #30
 801b0ec:	f100 8105 	bmi.w	801b2fa <_printf_float+0x462>
 801b0f0:	68e0      	ldr	r0, [r4, #12]
 801b0f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b0f4:	4298      	cmp	r0, r3
 801b0f6:	bfb8      	it	lt
 801b0f8:	4618      	movlt	r0, r3
 801b0fa:	e730      	b.n	801af5e <_printf_float+0xc6>
 801b0fc:	2301      	movs	r3, #1
 801b0fe:	464a      	mov	r2, r9
 801b100:	4631      	mov	r1, r6
 801b102:	4628      	mov	r0, r5
 801b104:	47b8      	blx	r7
 801b106:	3001      	adds	r0, #1
 801b108:	f43f af27 	beq.w	801af5a <_printf_float+0xc2>
 801b10c:	f108 0801 	add.w	r8, r8, #1
 801b110:	e7e6      	b.n	801b0e0 <_printf_float+0x248>
 801b112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b114:	2b00      	cmp	r3, #0
 801b116:	dc39      	bgt.n	801b18c <_printf_float+0x2f4>
 801b118:	2301      	movs	r3, #1
 801b11a:	4a1b      	ldr	r2, [pc, #108]	; (801b188 <_printf_float+0x2f0>)
 801b11c:	4631      	mov	r1, r6
 801b11e:	4628      	mov	r0, r5
 801b120:	47b8      	blx	r7
 801b122:	3001      	adds	r0, #1
 801b124:	f43f af19 	beq.w	801af5a <_printf_float+0xc2>
 801b128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b12c:	4313      	orrs	r3, r2
 801b12e:	d102      	bne.n	801b136 <_printf_float+0x29e>
 801b130:	6823      	ldr	r3, [r4, #0]
 801b132:	07d9      	lsls	r1, r3, #31
 801b134:	d5d8      	bpl.n	801b0e8 <_printf_float+0x250>
 801b136:	ee18 3a10 	vmov	r3, s16
 801b13a:	4652      	mov	r2, sl
 801b13c:	4631      	mov	r1, r6
 801b13e:	4628      	mov	r0, r5
 801b140:	47b8      	blx	r7
 801b142:	3001      	adds	r0, #1
 801b144:	f43f af09 	beq.w	801af5a <_printf_float+0xc2>
 801b148:	f04f 0900 	mov.w	r9, #0
 801b14c:	f104 0a1a 	add.w	sl, r4, #26
 801b150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b152:	425b      	negs	r3, r3
 801b154:	454b      	cmp	r3, r9
 801b156:	dc01      	bgt.n	801b15c <_printf_float+0x2c4>
 801b158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b15a:	e792      	b.n	801b082 <_printf_float+0x1ea>
 801b15c:	2301      	movs	r3, #1
 801b15e:	4652      	mov	r2, sl
 801b160:	4631      	mov	r1, r6
 801b162:	4628      	mov	r0, r5
 801b164:	47b8      	blx	r7
 801b166:	3001      	adds	r0, #1
 801b168:	f43f aef7 	beq.w	801af5a <_printf_float+0xc2>
 801b16c:	f109 0901 	add.w	r9, r9, #1
 801b170:	e7ee      	b.n	801b150 <_printf_float+0x2b8>
 801b172:	bf00      	nop
 801b174:	7fefffff 	.word	0x7fefffff
 801b178:	08074698 	.word	0x08074698
 801b17c:	0807469c 	.word	0x0807469c
 801b180:	080746a4 	.word	0x080746a4
 801b184:	080746a0 	.word	0x080746a0
 801b188:	080746a8 	.word	0x080746a8
 801b18c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b18e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b190:	429a      	cmp	r2, r3
 801b192:	bfa8      	it	ge
 801b194:	461a      	movge	r2, r3
 801b196:	2a00      	cmp	r2, #0
 801b198:	4691      	mov	r9, r2
 801b19a:	dc37      	bgt.n	801b20c <_printf_float+0x374>
 801b19c:	f04f 0b00 	mov.w	fp, #0
 801b1a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b1a4:	f104 021a 	add.w	r2, r4, #26
 801b1a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b1aa:	9305      	str	r3, [sp, #20]
 801b1ac:	eba3 0309 	sub.w	r3, r3, r9
 801b1b0:	455b      	cmp	r3, fp
 801b1b2:	dc33      	bgt.n	801b21c <_printf_float+0x384>
 801b1b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b1b8:	429a      	cmp	r2, r3
 801b1ba:	db3b      	blt.n	801b234 <_printf_float+0x39c>
 801b1bc:	6823      	ldr	r3, [r4, #0]
 801b1be:	07da      	lsls	r2, r3, #31
 801b1c0:	d438      	bmi.n	801b234 <_printf_float+0x39c>
 801b1c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1c4:	9a05      	ldr	r2, [sp, #20]
 801b1c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b1c8:	1a9a      	subs	r2, r3, r2
 801b1ca:	eba3 0901 	sub.w	r9, r3, r1
 801b1ce:	4591      	cmp	r9, r2
 801b1d0:	bfa8      	it	ge
 801b1d2:	4691      	movge	r9, r2
 801b1d4:	f1b9 0f00 	cmp.w	r9, #0
 801b1d8:	dc35      	bgt.n	801b246 <_printf_float+0x3ae>
 801b1da:	f04f 0800 	mov.w	r8, #0
 801b1de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b1e2:	f104 0a1a 	add.w	sl, r4, #26
 801b1e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b1ea:	1a9b      	subs	r3, r3, r2
 801b1ec:	eba3 0309 	sub.w	r3, r3, r9
 801b1f0:	4543      	cmp	r3, r8
 801b1f2:	f77f af79 	ble.w	801b0e8 <_printf_float+0x250>
 801b1f6:	2301      	movs	r3, #1
 801b1f8:	4652      	mov	r2, sl
 801b1fa:	4631      	mov	r1, r6
 801b1fc:	4628      	mov	r0, r5
 801b1fe:	47b8      	blx	r7
 801b200:	3001      	adds	r0, #1
 801b202:	f43f aeaa 	beq.w	801af5a <_printf_float+0xc2>
 801b206:	f108 0801 	add.w	r8, r8, #1
 801b20a:	e7ec      	b.n	801b1e6 <_printf_float+0x34e>
 801b20c:	4613      	mov	r3, r2
 801b20e:	4631      	mov	r1, r6
 801b210:	4642      	mov	r2, r8
 801b212:	4628      	mov	r0, r5
 801b214:	47b8      	blx	r7
 801b216:	3001      	adds	r0, #1
 801b218:	d1c0      	bne.n	801b19c <_printf_float+0x304>
 801b21a:	e69e      	b.n	801af5a <_printf_float+0xc2>
 801b21c:	2301      	movs	r3, #1
 801b21e:	4631      	mov	r1, r6
 801b220:	4628      	mov	r0, r5
 801b222:	9205      	str	r2, [sp, #20]
 801b224:	47b8      	blx	r7
 801b226:	3001      	adds	r0, #1
 801b228:	f43f ae97 	beq.w	801af5a <_printf_float+0xc2>
 801b22c:	f10b 0b01 	add.w	fp, fp, #1
 801b230:	9a05      	ldr	r2, [sp, #20]
 801b232:	e7b9      	b.n	801b1a8 <_printf_float+0x310>
 801b234:	ee18 3a10 	vmov	r3, s16
 801b238:	4652      	mov	r2, sl
 801b23a:	4631      	mov	r1, r6
 801b23c:	4628      	mov	r0, r5
 801b23e:	47b8      	blx	r7
 801b240:	3001      	adds	r0, #1
 801b242:	d1be      	bne.n	801b1c2 <_printf_float+0x32a>
 801b244:	e689      	b.n	801af5a <_printf_float+0xc2>
 801b246:	9a05      	ldr	r2, [sp, #20]
 801b248:	464b      	mov	r3, r9
 801b24a:	4631      	mov	r1, r6
 801b24c:	4628      	mov	r0, r5
 801b24e:	4442      	add	r2, r8
 801b250:	47b8      	blx	r7
 801b252:	3001      	adds	r0, #1
 801b254:	d1c1      	bne.n	801b1da <_printf_float+0x342>
 801b256:	e680      	b.n	801af5a <_printf_float+0xc2>
 801b258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b25a:	2a01      	cmp	r2, #1
 801b25c:	dc01      	bgt.n	801b262 <_printf_float+0x3ca>
 801b25e:	07db      	lsls	r3, r3, #31
 801b260:	d538      	bpl.n	801b2d4 <_printf_float+0x43c>
 801b262:	2301      	movs	r3, #1
 801b264:	4642      	mov	r2, r8
 801b266:	4631      	mov	r1, r6
 801b268:	4628      	mov	r0, r5
 801b26a:	47b8      	blx	r7
 801b26c:	3001      	adds	r0, #1
 801b26e:	f43f ae74 	beq.w	801af5a <_printf_float+0xc2>
 801b272:	ee18 3a10 	vmov	r3, s16
 801b276:	4652      	mov	r2, sl
 801b278:	4631      	mov	r1, r6
 801b27a:	4628      	mov	r0, r5
 801b27c:	47b8      	blx	r7
 801b27e:	3001      	adds	r0, #1
 801b280:	f43f ae6b 	beq.w	801af5a <_printf_float+0xc2>
 801b284:	2200      	movs	r2, #0
 801b286:	2300      	movs	r3, #0
 801b288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b28c:	f7e5 fc20 	bl	8000ad0 <__aeabi_dcmpeq>
 801b290:	b9d8      	cbnz	r0, 801b2ca <_printf_float+0x432>
 801b292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b294:	f108 0201 	add.w	r2, r8, #1
 801b298:	3b01      	subs	r3, #1
 801b29a:	4631      	mov	r1, r6
 801b29c:	4628      	mov	r0, r5
 801b29e:	47b8      	blx	r7
 801b2a0:	3001      	adds	r0, #1
 801b2a2:	d10e      	bne.n	801b2c2 <_printf_float+0x42a>
 801b2a4:	e659      	b.n	801af5a <_printf_float+0xc2>
 801b2a6:	2301      	movs	r3, #1
 801b2a8:	4652      	mov	r2, sl
 801b2aa:	4631      	mov	r1, r6
 801b2ac:	4628      	mov	r0, r5
 801b2ae:	47b8      	blx	r7
 801b2b0:	3001      	adds	r0, #1
 801b2b2:	f43f ae52 	beq.w	801af5a <_printf_float+0xc2>
 801b2b6:	f108 0801 	add.w	r8, r8, #1
 801b2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2bc:	3b01      	subs	r3, #1
 801b2be:	4543      	cmp	r3, r8
 801b2c0:	dcf1      	bgt.n	801b2a6 <_printf_float+0x40e>
 801b2c2:	464b      	mov	r3, r9
 801b2c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b2c8:	e6dc      	b.n	801b084 <_printf_float+0x1ec>
 801b2ca:	f04f 0800 	mov.w	r8, #0
 801b2ce:	f104 0a1a 	add.w	sl, r4, #26
 801b2d2:	e7f2      	b.n	801b2ba <_printf_float+0x422>
 801b2d4:	2301      	movs	r3, #1
 801b2d6:	4642      	mov	r2, r8
 801b2d8:	e7df      	b.n	801b29a <_printf_float+0x402>
 801b2da:	2301      	movs	r3, #1
 801b2dc:	464a      	mov	r2, r9
 801b2de:	4631      	mov	r1, r6
 801b2e0:	4628      	mov	r0, r5
 801b2e2:	47b8      	blx	r7
 801b2e4:	3001      	adds	r0, #1
 801b2e6:	f43f ae38 	beq.w	801af5a <_printf_float+0xc2>
 801b2ea:	f108 0801 	add.w	r8, r8, #1
 801b2ee:	68e3      	ldr	r3, [r4, #12]
 801b2f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b2f2:	1a5b      	subs	r3, r3, r1
 801b2f4:	4543      	cmp	r3, r8
 801b2f6:	dcf0      	bgt.n	801b2da <_printf_float+0x442>
 801b2f8:	e6fa      	b.n	801b0f0 <_printf_float+0x258>
 801b2fa:	f04f 0800 	mov.w	r8, #0
 801b2fe:	f104 0919 	add.w	r9, r4, #25
 801b302:	e7f4      	b.n	801b2ee <_printf_float+0x456>

0801b304 <_printf_common>:
 801b304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b308:	4616      	mov	r6, r2
 801b30a:	4699      	mov	r9, r3
 801b30c:	688a      	ldr	r2, [r1, #8]
 801b30e:	4607      	mov	r7, r0
 801b310:	690b      	ldr	r3, [r1, #16]
 801b312:	460c      	mov	r4, r1
 801b314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b318:	4293      	cmp	r3, r2
 801b31a:	bfb8      	it	lt
 801b31c:	4613      	movlt	r3, r2
 801b31e:	6033      	str	r3, [r6, #0]
 801b320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b324:	b10a      	cbz	r2, 801b32a <_printf_common+0x26>
 801b326:	3301      	adds	r3, #1
 801b328:	6033      	str	r3, [r6, #0]
 801b32a:	6823      	ldr	r3, [r4, #0]
 801b32c:	0699      	lsls	r1, r3, #26
 801b32e:	bf42      	ittt	mi
 801b330:	6833      	ldrmi	r3, [r6, #0]
 801b332:	3302      	addmi	r3, #2
 801b334:	6033      	strmi	r3, [r6, #0]
 801b336:	6825      	ldr	r5, [r4, #0]
 801b338:	f015 0506 	ands.w	r5, r5, #6
 801b33c:	d106      	bne.n	801b34c <_printf_common+0x48>
 801b33e:	f104 0a19 	add.w	sl, r4, #25
 801b342:	68e3      	ldr	r3, [r4, #12]
 801b344:	6832      	ldr	r2, [r6, #0]
 801b346:	1a9b      	subs	r3, r3, r2
 801b348:	42ab      	cmp	r3, r5
 801b34a:	dc29      	bgt.n	801b3a0 <_printf_common+0x9c>
 801b34c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b350:	1e13      	subs	r3, r2, #0
 801b352:	6822      	ldr	r2, [r4, #0]
 801b354:	bf18      	it	ne
 801b356:	2301      	movne	r3, #1
 801b358:	0692      	lsls	r2, r2, #26
 801b35a:	d42e      	bmi.n	801b3ba <_printf_common+0xb6>
 801b35c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b360:	4649      	mov	r1, r9
 801b362:	4638      	mov	r0, r7
 801b364:	47c0      	blx	r8
 801b366:	3001      	adds	r0, #1
 801b368:	d021      	beq.n	801b3ae <_printf_common+0xaa>
 801b36a:	6823      	ldr	r3, [r4, #0]
 801b36c:	341a      	adds	r4, #26
 801b36e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 801b372:	f003 0306 	and.w	r3, r3, #6
 801b376:	6832      	ldr	r2, [r6, #0]
 801b378:	2600      	movs	r6, #0
 801b37a:	2b04      	cmp	r3, #4
 801b37c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801b380:	bf08      	it	eq
 801b382:	1aad      	subeq	r5, r5, r2
 801b384:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801b388:	bf14      	ite	ne
 801b38a:	2500      	movne	r5, #0
 801b38c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b390:	4293      	cmp	r3, r2
 801b392:	bfc4      	itt	gt
 801b394:	1a9b      	subgt	r3, r3, r2
 801b396:	18ed      	addgt	r5, r5, r3
 801b398:	42b5      	cmp	r5, r6
 801b39a:	d11a      	bne.n	801b3d2 <_printf_common+0xce>
 801b39c:	2000      	movs	r0, #0
 801b39e:	e008      	b.n	801b3b2 <_printf_common+0xae>
 801b3a0:	2301      	movs	r3, #1
 801b3a2:	4652      	mov	r2, sl
 801b3a4:	4649      	mov	r1, r9
 801b3a6:	4638      	mov	r0, r7
 801b3a8:	47c0      	blx	r8
 801b3aa:	3001      	adds	r0, #1
 801b3ac:	d103      	bne.n	801b3b6 <_printf_common+0xb2>
 801b3ae:	f04f 30ff 	mov.w	r0, #4294967295
 801b3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3b6:	3501      	adds	r5, #1
 801b3b8:	e7c3      	b.n	801b342 <_printf_common+0x3e>
 801b3ba:	18e1      	adds	r1, r4, r3
 801b3bc:	1c5a      	adds	r2, r3, #1
 801b3be:	2030      	movs	r0, #48	; 0x30
 801b3c0:	3302      	adds	r3, #2
 801b3c2:	4422      	add	r2, r4
 801b3c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b3c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b3cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b3d0:	e7c4      	b.n	801b35c <_printf_common+0x58>
 801b3d2:	2301      	movs	r3, #1
 801b3d4:	4622      	mov	r2, r4
 801b3d6:	4649      	mov	r1, r9
 801b3d8:	4638      	mov	r0, r7
 801b3da:	47c0      	blx	r8
 801b3dc:	3001      	adds	r0, #1
 801b3de:	d0e6      	beq.n	801b3ae <_printf_common+0xaa>
 801b3e0:	3601      	adds	r6, #1
 801b3e2:	e7d9      	b.n	801b398 <_printf_common+0x94>

0801b3e4 <_printf_i>:
 801b3e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b3e8:	7e0f      	ldrb	r7, [r1, #24]
 801b3ea:	4691      	mov	r9, r2
 801b3ec:	4680      	mov	r8, r0
 801b3ee:	460c      	mov	r4, r1
 801b3f0:	2f78      	cmp	r7, #120	; 0x78
 801b3f2:	469a      	mov	sl, r3
 801b3f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b3f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b3fa:	d807      	bhi.n	801b40c <_printf_i+0x28>
 801b3fc:	2f62      	cmp	r7, #98	; 0x62
 801b3fe:	d80a      	bhi.n	801b416 <_printf_i+0x32>
 801b400:	2f00      	cmp	r7, #0
 801b402:	f000 80d8 	beq.w	801b5b6 <_printf_i+0x1d2>
 801b406:	2f58      	cmp	r7, #88	; 0x58
 801b408:	f000 80a3 	beq.w	801b552 <_printf_i+0x16e>
 801b40c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b414:	e03a      	b.n	801b48c <_printf_i+0xa8>
 801b416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b41a:	2b15      	cmp	r3, #21
 801b41c:	d8f6      	bhi.n	801b40c <_printf_i+0x28>
 801b41e:	a101      	add	r1, pc, #4	; (adr r1, 801b424 <_printf_i+0x40>)
 801b420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b424:	0801b47d 	.word	0x0801b47d
 801b428:	0801b491 	.word	0x0801b491
 801b42c:	0801b40d 	.word	0x0801b40d
 801b430:	0801b40d 	.word	0x0801b40d
 801b434:	0801b40d 	.word	0x0801b40d
 801b438:	0801b40d 	.word	0x0801b40d
 801b43c:	0801b491 	.word	0x0801b491
 801b440:	0801b40d 	.word	0x0801b40d
 801b444:	0801b40d 	.word	0x0801b40d
 801b448:	0801b40d 	.word	0x0801b40d
 801b44c:	0801b40d 	.word	0x0801b40d
 801b450:	0801b59d 	.word	0x0801b59d
 801b454:	0801b4c1 	.word	0x0801b4c1
 801b458:	0801b57f 	.word	0x0801b57f
 801b45c:	0801b40d 	.word	0x0801b40d
 801b460:	0801b40d 	.word	0x0801b40d
 801b464:	0801b5bf 	.word	0x0801b5bf
 801b468:	0801b40d 	.word	0x0801b40d
 801b46c:	0801b4c1 	.word	0x0801b4c1
 801b470:	0801b40d 	.word	0x0801b40d
 801b474:	0801b40d 	.word	0x0801b40d
 801b478:	0801b587 	.word	0x0801b587
 801b47c:	682b      	ldr	r3, [r5, #0]
 801b47e:	1d1a      	adds	r2, r3, #4
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	602a      	str	r2, [r5, #0]
 801b484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b48c:	2301      	movs	r3, #1
 801b48e:	e0a3      	b.n	801b5d8 <_printf_i+0x1f4>
 801b490:	6820      	ldr	r0, [r4, #0]
 801b492:	6829      	ldr	r1, [r5, #0]
 801b494:	0606      	lsls	r6, r0, #24
 801b496:	f101 0304 	add.w	r3, r1, #4
 801b49a:	d50a      	bpl.n	801b4b2 <_printf_i+0xce>
 801b49c:	680e      	ldr	r6, [r1, #0]
 801b49e:	602b      	str	r3, [r5, #0]
 801b4a0:	2e00      	cmp	r6, #0
 801b4a2:	da03      	bge.n	801b4ac <_printf_i+0xc8>
 801b4a4:	232d      	movs	r3, #45	; 0x2d
 801b4a6:	4276      	negs	r6, r6
 801b4a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b4ac:	485e      	ldr	r0, [pc, #376]	; (801b628 <_printf_i+0x244>)
 801b4ae:	230a      	movs	r3, #10
 801b4b0:	e019      	b.n	801b4e6 <_printf_i+0x102>
 801b4b2:	680e      	ldr	r6, [r1, #0]
 801b4b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b4b8:	602b      	str	r3, [r5, #0]
 801b4ba:	bf18      	it	ne
 801b4bc:	b236      	sxthne	r6, r6
 801b4be:	e7ef      	b.n	801b4a0 <_printf_i+0xbc>
 801b4c0:	682b      	ldr	r3, [r5, #0]
 801b4c2:	6820      	ldr	r0, [r4, #0]
 801b4c4:	1d19      	adds	r1, r3, #4
 801b4c6:	6029      	str	r1, [r5, #0]
 801b4c8:	0601      	lsls	r1, r0, #24
 801b4ca:	d501      	bpl.n	801b4d0 <_printf_i+0xec>
 801b4cc:	681e      	ldr	r6, [r3, #0]
 801b4ce:	e002      	b.n	801b4d6 <_printf_i+0xf2>
 801b4d0:	0646      	lsls	r6, r0, #25
 801b4d2:	d5fb      	bpl.n	801b4cc <_printf_i+0xe8>
 801b4d4:	881e      	ldrh	r6, [r3, #0]
 801b4d6:	2f6f      	cmp	r7, #111	; 0x6f
 801b4d8:	4853      	ldr	r0, [pc, #332]	; (801b628 <_printf_i+0x244>)
 801b4da:	bf0c      	ite	eq
 801b4dc:	2308      	moveq	r3, #8
 801b4de:	230a      	movne	r3, #10
 801b4e0:	2100      	movs	r1, #0
 801b4e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b4e6:	6865      	ldr	r5, [r4, #4]
 801b4e8:	2d00      	cmp	r5, #0
 801b4ea:	60a5      	str	r5, [r4, #8]
 801b4ec:	bfa2      	ittt	ge
 801b4ee:	6821      	ldrge	r1, [r4, #0]
 801b4f0:	f021 0104 	bicge.w	r1, r1, #4
 801b4f4:	6021      	strge	r1, [r4, #0]
 801b4f6:	b90e      	cbnz	r6, 801b4fc <_printf_i+0x118>
 801b4f8:	2d00      	cmp	r5, #0
 801b4fa:	d04d      	beq.n	801b598 <_printf_i+0x1b4>
 801b4fc:	4615      	mov	r5, r2
 801b4fe:	fbb6 f1f3 	udiv	r1, r6, r3
 801b502:	fb03 6711 	mls	r7, r3, r1, r6
 801b506:	5dc7      	ldrb	r7, [r0, r7]
 801b508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b50c:	4637      	mov	r7, r6
 801b50e:	460e      	mov	r6, r1
 801b510:	42bb      	cmp	r3, r7
 801b512:	d9f4      	bls.n	801b4fe <_printf_i+0x11a>
 801b514:	2b08      	cmp	r3, #8
 801b516:	d10b      	bne.n	801b530 <_printf_i+0x14c>
 801b518:	6823      	ldr	r3, [r4, #0]
 801b51a:	07de      	lsls	r6, r3, #31
 801b51c:	d508      	bpl.n	801b530 <_printf_i+0x14c>
 801b51e:	6923      	ldr	r3, [r4, #16]
 801b520:	6861      	ldr	r1, [r4, #4]
 801b522:	4299      	cmp	r1, r3
 801b524:	bfde      	ittt	le
 801b526:	2330      	movle	r3, #48	; 0x30
 801b528:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b52c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b530:	1b52      	subs	r2, r2, r5
 801b532:	6122      	str	r2, [r4, #16]
 801b534:	464b      	mov	r3, r9
 801b536:	aa03      	add	r2, sp, #12
 801b538:	4621      	mov	r1, r4
 801b53a:	4640      	mov	r0, r8
 801b53c:	f8cd a000 	str.w	sl, [sp]
 801b540:	f7ff fee0 	bl	801b304 <_printf_common>
 801b544:	3001      	adds	r0, #1
 801b546:	d14c      	bne.n	801b5e2 <_printf_i+0x1fe>
 801b548:	f04f 30ff 	mov.w	r0, #4294967295
 801b54c:	b004      	add	sp, #16
 801b54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b552:	4835      	ldr	r0, [pc, #212]	; (801b628 <_printf_i+0x244>)
 801b554:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b558:	6829      	ldr	r1, [r5, #0]
 801b55a:	6823      	ldr	r3, [r4, #0]
 801b55c:	f851 6b04 	ldr.w	r6, [r1], #4
 801b560:	6029      	str	r1, [r5, #0]
 801b562:	061d      	lsls	r5, r3, #24
 801b564:	d514      	bpl.n	801b590 <_printf_i+0x1ac>
 801b566:	07df      	lsls	r7, r3, #31
 801b568:	bf44      	itt	mi
 801b56a:	f043 0320 	orrmi.w	r3, r3, #32
 801b56e:	6023      	strmi	r3, [r4, #0]
 801b570:	b91e      	cbnz	r6, 801b57a <_printf_i+0x196>
 801b572:	6823      	ldr	r3, [r4, #0]
 801b574:	f023 0320 	bic.w	r3, r3, #32
 801b578:	6023      	str	r3, [r4, #0]
 801b57a:	2310      	movs	r3, #16
 801b57c:	e7b0      	b.n	801b4e0 <_printf_i+0xfc>
 801b57e:	6823      	ldr	r3, [r4, #0]
 801b580:	f043 0320 	orr.w	r3, r3, #32
 801b584:	6023      	str	r3, [r4, #0]
 801b586:	2378      	movs	r3, #120	; 0x78
 801b588:	4828      	ldr	r0, [pc, #160]	; (801b62c <_printf_i+0x248>)
 801b58a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b58e:	e7e3      	b.n	801b558 <_printf_i+0x174>
 801b590:	0659      	lsls	r1, r3, #25
 801b592:	bf48      	it	mi
 801b594:	b2b6      	uxthmi	r6, r6
 801b596:	e7e6      	b.n	801b566 <_printf_i+0x182>
 801b598:	4615      	mov	r5, r2
 801b59a:	e7bb      	b.n	801b514 <_printf_i+0x130>
 801b59c:	682b      	ldr	r3, [r5, #0]
 801b59e:	6826      	ldr	r6, [r4, #0]
 801b5a0:	1d18      	adds	r0, r3, #4
 801b5a2:	6961      	ldr	r1, [r4, #20]
 801b5a4:	6028      	str	r0, [r5, #0]
 801b5a6:	0635      	lsls	r5, r6, #24
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	d501      	bpl.n	801b5b0 <_printf_i+0x1cc>
 801b5ac:	6019      	str	r1, [r3, #0]
 801b5ae:	e002      	b.n	801b5b6 <_printf_i+0x1d2>
 801b5b0:	0670      	lsls	r0, r6, #25
 801b5b2:	d5fb      	bpl.n	801b5ac <_printf_i+0x1c8>
 801b5b4:	8019      	strh	r1, [r3, #0]
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	4615      	mov	r5, r2
 801b5ba:	6123      	str	r3, [r4, #16]
 801b5bc:	e7ba      	b.n	801b534 <_printf_i+0x150>
 801b5be:	682b      	ldr	r3, [r5, #0]
 801b5c0:	2100      	movs	r1, #0
 801b5c2:	1d1a      	adds	r2, r3, #4
 801b5c4:	602a      	str	r2, [r5, #0]
 801b5c6:	681d      	ldr	r5, [r3, #0]
 801b5c8:	6862      	ldr	r2, [r4, #4]
 801b5ca:	4628      	mov	r0, r5
 801b5cc:	f002 fb58 	bl	801dc80 <memchr>
 801b5d0:	b108      	cbz	r0, 801b5d6 <_printf_i+0x1f2>
 801b5d2:	1b40      	subs	r0, r0, r5
 801b5d4:	6060      	str	r0, [r4, #4]
 801b5d6:	6863      	ldr	r3, [r4, #4]
 801b5d8:	6123      	str	r3, [r4, #16]
 801b5da:	2300      	movs	r3, #0
 801b5dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b5e0:	e7a8      	b.n	801b534 <_printf_i+0x150>
 801b5e2:	6923      	ldr	r3, [r4, #16]
 801b5e4:	462a      	mov	r2, r5
 801b5e6:	4649      	mov	r1, r9
 801b5e8:	4640      	mov	r0, r8
 801b5ea:	47d0      	blx	sl
 801b5ec:	3001      	adds	r0, #1
 801b5ee:	d0ab      	beq.n	801b548 <_printf_i+0x164>
 801b5f0:	6823      	ldr	r3, [r4, #0]
 801b5f2:	079b      	lsls	r3, r3, #30
 801b5f4:	d413      	bmi.n	801b61e <_printf_i+0x23a>
 801b5f6:	68e0      	ldr	r0, [r4, #12]
 801b5f8:	9b03      	ldr	r3, [sp, #12]
 801b5fa:	4298      	cmp	r0, r3
 801b5fc:	bfb8      	it	lt
 801b5fe:	4618      	movlt	r0, r3
 801b600:	e7a4      	b.n	801b54c <_printf_i+0x168>
 801b602:	2301      	movs	r3, #1
 801b604:	4632      	mov	r2, r6
 801b606:	4649      	mov	r1, r9
 801b608:	4640      	mov	r0, r8
 801b60a:	47d0      	blx	sl
 801b60c:	3001      	adds	r0, #1
 801b60e:	d09b      	beq.n	801b548 <_printf_i+0x164>
 801b610:	3501      	adds	r5, #1
 801b612:	68e3      	ldr	r3, [r4, #12]
 801b614:	9903      	ldr	r1, [sp, #12]
 801b616:	1a5b      	subs	r3, r3, r1
 801b618:	42ab      	cmp	r3, r5
 801b61a:	dcf2      	bgt.n	801b602 <_printf_i+0x21e>
 801b61c:	e7eb      	b.n	801b5f6 <_printf_i+0x212>
 801b61e:	2500      	movs	r5, #0
 801b620:	f104 0619 	add.w	r6, r4, #25
 801b624:	e7f5      	b.n	801b612 <_printf_i+0x22e>
 801b626:	bf00      	nop
 801b628:	080746aa 	.word	0x080746aa
 801b62c:	080746bb 	.word	0x080746bb

0801b630 <_scanf_float>:
 801b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b634:	b087      	sub	sp, #28
 801b636:	4617      	mov	r7, r2
 801b638:	468b      	mov	fp, r1
 801b63a:	4680      	mov	r8, r0
 801b63c:	9303      	str	r3, [sp, #12]
 801b63e:	460c      	mov	r4, r1
 801b640:	688b      	ldr	r3, [r1, #8]
 801b642:	1e5a      	subs	r2, r3, #1
 801b644:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b648:	bf8b      	itete	hi
 801b64a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b64e:	2300      	movls	r3, #0
 801b650:	195b      	addhi	r3, r3, r5
 801b652:	9302      	strls	r3, [sp, #8]
 801b654:	f04f 0500 	mov.w	r5, #0
 801b658:	bf84      	itt	hi
 801b65a:	9302      	strhi	r3, [sp, #8]
 801b65c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b660:	46aa      	mov	sl, r5
 801b662:	46a9      	mov	r9, r5
 801b664:	bf88      	it	hi
 801b666:	608b      	strhi	r3, [r1, #8]
 801b668:	680b      	ldr	r3, [r1, #0]
 801b66a:	9501      	str	r5, [sp, #4]
 801b66c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b670:	f84b 3b1c 	str.w	r3, [fp], #28
 801b674:	465e      	mov	r6, fp
 801b676:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b67a:	68a2      	ldr	r2, [r4, #8]
 801b67c:	b152      	cbz	r2, 801b694 <_scanf_float+0x64>
 801b67e:	683b      	ldr	r3, [r7, #0]
 801b680:	781b      	ldrb	r3, [r3, #0]
 801b682:	2b4e      	cmp	r3, #78	; 0x4e
 801b684:	d864      	bhi.n	801b750 <_scanf_float+0x120>
 801b686:	2b40      	cmp	r3, #64	; 0x40
 801b688:	d83c      	bhi.n	801b704 <_scanf_float+0xd4>
 801b68a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b68e:	b2c8      	uxtb	r0, r1
 801b690:	280e      	cmp	r0, #14
 801b692:	d93a      	bls.n	801b70a <_scanf_float+0xda>
 801b694:	f1b9 0f00 	cmp.w	r9, #0
 801b698:	d003      	beq.n	801b6a2 <_scanf_float+0x72>
 801b69a:	6823      	ldr	r3, [r4, #0]
 801b69c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b6a0:	6023      	str	r3, [r4, #0]
 801b6a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b6a6:	f1ba 0f01 	cmp.w	sl, #1
 801b6aa:	f200 8113 	bhi.w	801b8d4 <_scanf_float+0x2a4>
 801b6ae:	455e      	cmp	r6, fp
 801b6b0:	f200 8105 	bhi.w	801b8be <_scanf_float+0x28e>
 801b6b4:	2501      	movs	r5, #1
 801b6b6:	4628      	mov	r0, r5
 801b6b8:	b007      	add	sp, #28
 801b6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b6c2:	2a0d      	cmp	r2, #13
 801b6c4:	d8e6      	bhi.n	801b694 <_scanf_float+0x64>
 801b6c6:	a101      	add	r1, pc, #4	; (adr r1, 801b6cc <_scanf_float+0x9c>)
 801b6c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b6cc:	0801b80b 	.word	0x0801b80b
 801b6d0:	0801b695 	.word	0x0801b695
 801b6d4:	0801b695 	.word	0x0801b695
 801b6d8:	0801b695 	.word	0x0801b695
 801b6dc:	0801b86b 	.word	0x0801b86b
 801b6e0:	0801b843 	.word	0x0801b843
 801b6e4:	0801b695 	.word	0x0801b695
 801b6e8:	0801b695 	.word	0x0801b695
 801b6ec:	0801b819 	.word	0x0801b819
 801b6f0:	0801b695 	.word	0x0801b695
 801b6f4:	0801b695 	.word	0x0801b695
 801b6f8:	0801b695 	.word	0x0801b695
 801b6fc:	0801b695 	.word	0x0801b695
 801b700:	0801b7d1 	.word	0x0801b7d1
 801b704:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b708:	e7db      	b.n	801b6c2 <_scanf_float+0x92>
 801b70a:	290e      	cmp	r1, #14
 801b70c:	d8c2      	bhi.n	801b694 <_scanf_float+0x64>
 801b70e:	a001      	add	r0, pc, #4	; (adr r0, 801b714 <_scanf_float+0xe4>)
 801b710:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b714:	0801b7c3 	.word	0x0801b7c3
 801b718:	0801b695 	.word	0x0801b695
 801b71c:	0801b7c3 	.word	0x0801b7c3
 801b720:	0801b857 	.word	0x0801b857
 801b724:	0801b695 	.word	0x0801b695
 801b728:	0801b771 	.word	0x0801b771
 801b72c:	0801b7ad 	.word	0x0801b7ad
 801b730:	0801b7ad 	.word	0x0801b7ad
 801b734:	0801b7ad 	.word	0x0801b7ad
 801b738:	0801b7ad 	.word	0x0801b7ad
 801b73c:	0801b7ad 	.word	0x0801b7ad
 801b740:	0801b7ad 	.word	0x0801b7ad
 801b744:	0801b7ad 	.word	0x0801b7ad
 801b748:	0801b7ad 	.word	0x0801b7ad
 801b74c:	0801b7ad 	.word	0x0801b7ad
 801b750:	2b6e      	cmp	r3, #110	; 0x6e
 801b752:	d809      	bhi.n	801b768 <_scanf_float+0x138>
 801b754:	2b60      	cmp	r3, #96	; 0x60
 801b756:	d8b2      	bhi.n	801b6be <_scanf_float+0x8e>
 801b758:	2b54      	cmp	r3, #84	; 0x54
 801b75a:	d077      	beq.n	801b84c <_scanf_float+0x21c>
 801b75c:	2b59      	cmp	r3, #89	; 0x59
 801b75e:	d199      	bne.n	801b694 <_scanf_float+0x64>
 801b760:	2d07      	cmp	r5, #7
 801b762:	d197      	bne.n	801b694 <_scanf_float+0x64>
 801b764:	2508      	movs	r5, #8
 801b766:	e029      	b.n	801b7bc <_scanf_float+0x18c>
 801b768:	2b74      	cmp	r3, #116	; 0x74
 801b76a:	d06f      	beq.n	801b84c <_scanf_float+0x21c>
 801b76c:	2b79      	cmp	r3, #121	; 0x79
 801b76e:	e7f6      	b.n	801b75e <_scanf_float+0x12e>
 801b770:	6821      	ldr	r1, [r4, #0]
 801b772:	05c8      	lsls	r0, r1, #23
 801b774:	d51a      	bpl.n	801b7ac <_scanf_float+0x17c>
 801b776:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b77a:	9b02      	ldr	r3, [sp, #8]
 801b77c:	f109 0901 	add.w	r9, r9, #1
 801b780:	6021      	str	r1, [r4, #0]
 801b782:	b11b      	cbz	r3, 801b78c <_scanf_float+0x15c>
 801b784:	3b01      	subs	r3, #1
 801b786:	3201      	adds	r2, #1
 801b788:	9302      	str	r3, [sp, #8]
 801b78a:	60a2      	str	r2, [r4, #8]
 801b78c:	68a3      	ldr	r3, [r4, #8]
 801b78e:	3b01      	subs	r3, #1
 801b790:	60a3      	str	r3, [r4, #8]
 801b792:	6923      	ldr	r3, [r4, #16]
 801b794:	3301      	adds	r3, #1
 801b796:	6123      	str	r3, [r4, #16]
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	3b01      	subs	r3, #1
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	607b      	str	r3, [r7, #4]
 801b7a0:	f340 8084 	ble.w	801b8ac <_scanf_float+0x27c>
 801b7a4:	683b      	ldr	r3, [r7, #0]
 801b7a6:	3301      	adds	r3, #1
 801b7a8:	603b      	str	r3, [r7, #0]
 801b7aa:	e766      	b.n	801b67a <_scanf_float+0x4a>
 801b7ac:	eb1a 0f05 	cmn.w	sl, r5
 801b7b0:	f47f af70 	bne.w	801b694 <_scanf_float+0x64>
 801b7b4:	6822      	ldr	r2, [r4, #0]
 801b7b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b7ba:	6022      	str	r2, [r4, #0]
 801b7bc:	f806 3b01 	strb.w	r3, [r6], #1
 801b7c0:	e7e4      	b.n	801b78c <_scanf_float+0x15c>
 801b7c2:	6822      	ldr	r2, [r4, #0]
 801b7c4:	0610      	lsls	r0, r2, #24
 801b7c6:	f57f af65 	bpl.w	801b694 <_scanf_float+0x64>
 801b7ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b7ce:	e7f4      	b.n	801b7ba <_scanf_float+0x18a>
 801b7d0:	f1ba 0f00 	cmp.w	sl, #0
 801b7d4:	d10e      	bne.n	801b7f4 <_scanf_float+0x1c4>
 801b7d6:	f1b9 0f00 	cmp.w	r9, #0
 801b7da:	d10e      	bne.n	801b7fa <_scanf_float+0x1ca>
 801b7dc:	6822      	ldr	r2, [r4, #0]
 801b7de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b7e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b7e6:	d108      	bne.n	801b7fa <_scanf_float+0x1ca>
 801b7e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b7ec:	f04f 0a01 	mov.w	sl, #1
 801b7f0:	6022      	str	r2, [r4, #0]
 801b7f2:	e7e3      	b.n	801b7bc <_scanf_float+0x18c>
 801b7f4:	f1ba 0f02 	cmp.w	sl, #2
 801b7f8:	d055      	beq.n	801b8a6 <_scanf_float+0x276>
 801b7fa:	2d01      	cmp	r5, #1
 801b7fc:	d002      	beq.n	801b804 <_scanf_float+0x1d4>
 801b7fe:	2d04      	cmp	r5, #4
 801b800:	f47f af48 	bne.w	801b694 <_scanf_float+0x64>
 801b804:	3501      	adds	r5, #1
 801b806:	b2ed      	uxtb	r5, r5
 801b808:	e7d8      	b.n	801b7bc <_scanf_float+0x18c>
 801b80a:	f1ba 0f01 	cmp.w	sl, #1
 801b80e:	f47f af41 	bne.w	801b694 <_scanf_float+0x64>
 801b812:	f04f 0a02 	mov.w	sl, #2
 801b816:	e7d1      	b.n	801b7bc <_scanf_float+0x18c>
 801b818:	b97d      	cbnz	r5, 801b83a <_scanf_float+0x20a>
 801b81a:	f1b9 0f00 	cmp.w	r9, #0
 801b81e:	f47f af3c 	bne.w	801b69a <_scanf_float+0x6a>
 801b822:	6822      	ldr	r2, [r4, #0]
 801b824:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b828:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b82c:	f47f af39 	bne.w	801b6a2 <_scanf_float+0x72>
 801b830:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b834:	2501      	movs	r5, #1
 801b836:	6022      	str	r2, [r4, #0]
 801b838:	e7c0      	b.n	801b7bc <_scanf_float+0x18c>
 801b83a:	2d03      	cmp	r5, #3
 801b83c:	d0e2      	beq.n	801b804 <_scanf_float+0x1d4>
 801b83e:	2d05      	cmp	r5, #5
 801b840:	e7de      	b.n	801b800 <_scanf_float+0x1d0>
 801b842:	2d02      	cmp	r5, #2
 801b844:	f47f af26 	bne.w	801b694 <_scanf_float+0x64>
 801b848:	2503      	movs	r5, #3
 801b84a:	e7b7      	b.n	801b7bc <_scanf_float+0x18c>
 801b84c:	2d06      	cmp	r5, #6
 801b84e:	f47f af21 	bne.w	801b694 <_scanf_float+0x64>
 801b852:	2507      	movs	r5, #7
 801b854:	e7b2      	b.n	801b7bc <_scanf_float+0x18c>
 801b856:	6822      	ldr	r2, [r4, #0]
 801b858:	0591      	lsls	r1, r2, #22
 801b85a:	f57f af1b 	bpl.w	801b694 <_scanf_float+0x64>
 801b85e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b862:	f8cd 9004 	str.w	r9, [sp, #4]
 801b866:	6022      	str	r2, [r4, #0]
 801b868:	e7a8      	b.n	801b7bc <_scanf_float+0x18c>
 801b86a:	6822      	ldr	r2, [r4, #0]
 801b86c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b870:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b874:	d006      	beq.n	801b884 <_scanf_float+0x254>
 801b876:	0550      	lsls	r0, r2, #21
 801b878:	f57f af0c 	bpl.w	801b694 <_scanf_float+0x64>
 801b87c:	f1b9 0f00 	cmp.w	r9, #0
 801b880:	f43f af0f 	beq.w	801b6a2 <_scanf_float+0x72>
 801b884:	0591      	lsls	r1, r2, #22
 801b886:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b88a:	bf58      	it	pl
 801b88c:	9901      	ldrpl	r1, [sp, #4]
 801b88e:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b892:	bf58      	it	pl
 801b894:	eba9 0101 	subpl.w	r1, r9, r1
 801b898:	6022      	str	r2, [r4, #0]
 801b89a:	f04f 0900 	mov.w	r9, #0
 801b89e:	bf58      	it	pl
 801b8a0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b8a4:	e78a      	b.n	801b7bc <_scanf_float+0x18c>
 801b8a6:	f04f 0a03 	mov.w	sl, #3
 801b8aa:	e787      	b.n	801b7bc <_scanf_float+0x18c>
 801b8ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b8b0:	4639      	mov	r1, r7
 801b8b2:	4640      	mov	r0, r8
 801b8b4:	4798      	blx	r3
 801b8b6:	2800      	cmp	r0, #0
 801b8b8:	f43f aedf 	beq.w	801b67a <_scanf_float+0x4a>
 801b8bc:	e6ea      	b.n	801b694 <_scanf_float+0x64>
 801b8be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b8c2:	463a      	mov	r2, r7
 801b8c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b8c8:	4640      	mov	r0, r8
 801b8ca:	4798      	blx	r3
 801b8cc:	6923      	ldr	r3, [r4, #16]
 801b8ce:	3b01      	subs	r3, #1
 801b8d0:	6123      	str	r3, [r4, #16]
 801b8d2:	e6ec      	b.n	801b6ae <_scanf_float+0x7e>
 801b8d4:	1e6b      	subs	r3, r5, #1
 801b8d6:	2b06      	cmp	r3, #6
 801b8d8:	d825      	bhi.n	801b926 <_scanf_float+0x2f6>
 801b8da:	2d02      	cmp	r5, #2
 801b8dc:	d836      	bhi.n	801b94c <_scanf_float+0x31c>
 801b8de:	455e      	cmp	r6, fp
 801b8e0:	f67f aee8 	bls.w	801b6b4 <_scanf_float+0x84>
 801b8e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b8e8:	463a      	mov	r2, r7
 801b8ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b8ee:	4640      	mov	r0, r8
 801b8f0:	4798      	blx	r3
 801b8f2:	6923      	ldr	r3, [r4, #16]
 801b8f4:	3b01      	subs	r3, #1
 801b8f6:	6123      	str	r3, [r4, #16]
 801b8f8:	e7f1      	b.n	801b8de <_scanf_float+0x2ae>
 801b8fa:	9802      	ldr	r0, [sp, #8]
 801b8fc:	463a      	mov	r2, r7
 801b8fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b902:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b906:	9002      	str	r0, [sp, #8]
 801b908:	4640      	mov	r0, r8
 801b90a:	4798      	blx	r3
 801b90c:	6923      	ldr	r3, [r4, #16]
 801b90e:	3b01      	subs	r3, #1
 801b910:	6123      	str	r3, [r4, #16]
 801b912:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b916:	fa5f fa8a 	uxtb.w	sl, sl
 801b91a:	f1ba 0f02 	cmp.w	sl, #2
 801b91e:	d1ec      	bne.n	801b8fa <_scanf_float+0x2ca>
 801b920:	3d03      	subs	r5, #3
 801b922:	b2ed      	uxtb	r5, r5
 801b924:	1b76      	subs	r6, r6, r5
 801b926:	6823      	ldr	r3, [r4, #0]
 801b928:	05da      	lsls	r2, r3, #23
 801b92a:	d52e      	bpl.n	801b98a <_scanf_float+0x35a>
 801b92c:	055b      	lsls	r3, r3, #21
 801b92e:	d510      	bpl.n	801b952 <_scanf_float+0x322>
 801b930:	455e      	cmp	r6, fp
 801b932:	f67f aebf 	bls.w	801b6b4 <_scanf_float+0x84>
 801b936:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b93a:	463a      	mov	r2, r7
 801b93c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b940:	4640      	mov	r0, r8
 801b942:	4798      	blx	r3
 801b944:	6923      	ldr	r3, [r4, #16]
 801b946:	3b01      	subs	r3, #1
 801b948:	6123      	str	r3, [r4, #16]
 801b94a:	e7f1      	b.n	801b930 <_scanf_float+0x300>
 801b94c:	46aa      	mov	sl, r5
 801b94e:	9602      	str	r6, [sp, #8]
 801b950:	e7df      	b.n	801b912 <_scanf_float+0x2e2>
 801b952:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b956:	1e75      	subs	r5, r6, #1
 801b958:	6923      	ldr	r3, [r4, #16]
 801b95a:	2965      	cmp	r1, #101	; 0x65
 801b95c:	f103 33ff 	add.w	r3, r3, #4294967295
 801b960:	6123      	str	r3, [r4, #16]
 801b962:	d00c      	beq.n	801b97e <_scanf_float+0x34e>
 801b964:	2945      	cmp	r1, #69	; 0x45
 801b966:	d00a      	beq.n	801b97e <_scanf_float+0x34e>
 801b968:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b96c:	463a      	mov	r2, r7
 801b96e:	4640      	mov	r0, r8
 801b970:	1eb5      	subs	r5, r6, #2
 801b972:	4798      	blx	r3
 801b974:	6923      	ldr	r3, [r4, #16]
 801b976:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b97a:	3b01      	subs	r3, #1
 801b97c:	6123      	str	r3, [r4, #16]
 801b97e:	462e      	mov	r6, r5
 801b980:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b984:	463a      	mov	r2, r7
 801b986:	4640      	mov	r0, r8
 801b988:	4798      	blx	r3
 801b98a:	6825      	ldr	r5, [r4, #0]
 801b98c:	f015 0510 	ands.w	r5, r5, #16
 801b990:	d159      	bne.n	801ba46 <_scanf_float+0x416>
 801b992:	7035      	strb	r5, [r6, #0]
 801b994:	6823      	ldr	r3, [r4, #0]
 801b996:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b99a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b99e:	d11b      	bne.n	801b9d8 <_scanf_float+0x3a8>
 801b9a0:	9b01      	ldr	r3, [sp, #4]
 801b9a2:	454b      	cmp	r3, r9
 801b9a4:	eba3 0209 	sub.w	r2, r3, r9
 801b9a8:	d123      	bne.n	801b9f2 <_scanf_float+0x3c2>
 801b9aa:	2200      	movs	r2, #0
 801b9ac:	4659      	mov	r1, fp
 801b9ae:	4640      	mov	r0, r8
 801b9b0:	f000 fed8 	bl	801c764 <_strtod_r>
 801b9b4:	6822      	ldr	r2, [r4, #0]
 801b9b6:	9b03      	ldr	r3, [sp, #12]
 801b9b8:	f012 0f02 	tst.w	r2, #2
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	ec57 6b10 	vmov	r6, r7, d0
 801b9c2:	d021      	beq.n	801ba08 <_scanf_float+0x3d8>
 801b9c4:	1d1a      	adds	r2, r3, #4
 801b9c6:	9903      	ldr	r1, [sp, #12]
 801b9c8:	600a      	str	r2, [r1, #0]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	e9c3 6700 	strd	r6, r7, [r3]
 801b9d0:	68e3      	ldr	r3, [r4, #12]
 801b9d2:	3301      	adds	r3, #1
 801b9d4:	60e3      	str	r3, [r4, #12]
 801b9d6:	e66e      	b.n	801b6b6 <_scanf_float+0x86>
 801b9d8:	9b04      	ldr	r3, [sp, #16]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d0e5      	beq.n	801b9aa <_scanf_float+0x37a>
 801b9de:	9905      	ldr	r1, [sp, #20]
 801b9e0:	230a      	movs	r3, #10
 801b9e2:	462a      	mov	r2, r5
 801b9e4:	4640      	mov	r0, r8
 801b9e6:	3101      	adds	r1, #1
 801b9e8:	f000 ff44 	bl	801c874 <_strtol_r>
 801b9ec:	9b04      	ldr	r3, [sp, #16]
 801b9ee:	9e05      	ldr	r6, [sp, #20]
 801b9f0:	1ac2      	subs	r2, r0, r3
 801b9f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b9f6:	4915      	ldr	r1, [pc, #84]	; (801ba4c <_scanf_float+0x41c>)
 801b9f8:	429e      	cmp	r6, r3
 801b9fa:	bf28      	it	cs
 801b9fc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801ba00:	4630      	mov	r0, r6
 801ba02:	f000 f871 	bl	801bae8 <siprintf>
 801ba06:	e7d0      	b.n	801b9aa <_scanf_float+0x37a>
 801ba08:	9903      	ldr	r1, [sp, #12]
 801ba0a:	f012 0f04 	tst.w	r2, #4
 801ba0e:	f103 0204 	add.w	r2, r3, #4
 801ba12:	600a      	str	r2, [r1, #0]
 801ba14:	d1d9      	bne.n	801b9ca <_scanf_float+0x39a>
 801ba16:	f8d3 8000 	ldr.w	r8, [r3]
 801ba1a:	ee10 2a10 	vmov	r2, s0
 801ba1e:	463b      	mov	r3, r7
 801ba20:	ee10 0a10 	vmov	r0, s0
 801ba24:	4639      	mov	r1, r7
 801ba26:	f7e5 f885 	bl	8000b34 <__aeabi_dcmpun>
 801ba2a:	b128      	cbz	r0, 801ba38 <_scanf_float+0x408>
 801ba2c:	4808      	ldr	r0, [pc, #32]	; (801ba50 <_scanf_float+0x420>)
 801ba2e:	f000 f821 	bl	801ba74 <nanf>
 801ba32:	ed88 0a00 	vstr	s0, [r8]
 801ba36:	e7cb      	b.n	801b9d0 <_scanf_float+0x3a0>
 801ba38:	4630      	mov	r0, r6
 801ba3a:	4639      	mov	r1, r7
 801ba3c:	f7e5 f8d8 	bl	8000bf0 <__aeabi_d2f>
 801ba40:	f8c8 0000 	str.w	r0, [r8]
 801ba44:	e7c4      	b.n	801b9d0 <_scanf_float+0x3a0>
 801ba46:	2500      	movs	r5, #0
 801ba48:	e635      	b.n	801b6b6 <_scanf_float+0x86>
 801ba4a:	bf00      	nop
 801ba4c:	080746cc 	.word	0x080746cc
 801ba50:	08074ad8 	.word	0x08074ad8

0801ba54 <_sbrk_r>:
 801ba54:	b538      	push	{r3, r4, r5, lr}
 801ba56:	2300      	movs	r3, #0
 801ba58:	4d05      	ldr	r5, [pc, #20]	; (801ba70 <_sbrk_r+0x1c>)
 801ba5a:	4604      	mov	r4, r0
 801ba5c:	4608      	mov	r0, r1
 801ba5e:	602b      	str	r3, [r5, #0]
 801ba60:	f7e8 f95a 	bl	8003d18 <_sbrk>
 801ba64:	1c43      	adds	r3, r0, #1
 801ba66:	d102      	bne.n	801ba6e <_sbrk_r+0x1a>
 801ba68:	682b      	ldr	r3, [r5, #0]
 801ba6a:	b103      	cbz	r3, 801ba6e <_sbrk_r+0x1a>
 801ba6c:	6023      	str	r3, [r4, #0]
 801ba6e:	bd38      	pop	{r3, r4, r5, pc}
 801ba70:	20004470 	.word	0x20004470

0801ba74 <nanf>:
 801ba74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ba7c <nanf+0x8>
 801ba78:	4770      	bx	lr
 801ba7a:	bf00      	nop
 801ba7c:	7fc00000 	.word	0x7fc00000

0801ba80 <sniprintf>:
 801ba80:	b40c      	push	{r2, r3}
 801ba82:	4b18      	ldr	r3, [pc, #96]	; (801bae4 <sniprintf+0x64>)
 801ba84:	b530      	push	{r4, r5, lr}
 801ba86:	1e0c      	subs	r4, r1, #0
 801ba88:	b09d      	sub	sp, #116	; 0x74
 801ba8a:	681d      	ldr	r5, [r3, #0]
 801ba8c:	da08      	bge.n	801baa0 <sniprintf+0x20>
 801ba8e:	238b      	movs	r3, #139	; 0x8b
 801ba90:	f04f 30ff 	mov.w	r0, #4294967295
 801ba94:	602b      	str	r3, [r5, #0]
 801ba96:	b01d      	add	sp, #116	; 0x74
 801ba98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ba9c:	b002      	add	sp, #8
 801ba9e:	4770      	bx	lr
 801baa0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801baa4:	9002      	str	r0, [sp, #8]
 801baa6:	9006      	str	r0, [sp, #24]
 801baa8:	a902      	add	r1, sp, #8
 801baaa:	f8ad 3014 	strh.w	r3, [sp, #20]
 801baae:	bf14      	ite	ne
 801bab0:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bab4:	4623      	moveq	r3, r4
 801bab6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bab8:	4628      	mov	r0, r5
 801baba:	9304      	str	r3, [sp, #16]
 801babc:	9307      	str	r3, [sp, #28]
 801babe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bac2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bac6:	ab21      	add	r3, sp, #132	; 0x84
 801bac8:	9301      	str	r3, [sp, #4]
 801baca:	f002 fe59 	bl	801e780 <_svfiprintf_r>
 801bace:	1c43      	adds	r3, r0, #1
 801bad0:	bfbc      	itt	lt
 801bad2:	238b      	movlt	r3, #139	; 0x8b
 801bad4:	602b      	strlt	r3, [r5, #0]
 801bad6:	2c00      	cmp	r4, #0
 801bad8:	d0dd      	beq.n	801ba96 <sniprintf+0x16>
 801bada:	9b02      	ldr	r3, [sp, #8]
 801badc:	2200      	movs	r2, #0
 801bade:	701a      	strb	r2, [r3, #0]
 801bae0:	e7d9      	b.n	801ba96 <sniprintf+0x16>
 801bae2:	bf00      	nop
 801bae4:	20000930 	.word	0x20000930

0801bae8 <siprintf>:
 801bae8:	b40e      	push	{r1, r2, r3}
 801baea:	b500      	push	{lr}
 801baec:	b09c      	sub	sp, #112	; 0x70
 801baee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801baf2:	ab1d      	add	r3, sp, #116	; 0x74
 801baf4:	9002      	str	r0, [sp, #8]
 801baf6:	9006      	str	r0, [sp, #24]
 801baf8:	9107      	str	r1, [sp, #28]
 801bafa:	9104      	str	r1, [sp, #16]
 801bafc:	4808      	ldr	r0, [pc, #32]	; (801bb20 <siprintf+0x38>)
 801bafe:	4909      	ldr	r1, [pc, #36]	; (801bb24 <siprintf+0x3c>)
 801bb00:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb04:	9105      	str	r1, [sp, #20]
 801bb06:	a902      	add	r1, sp, #8
 801bb08:	6800      	ldr	r0, [r0, #0]
 801bb0a:	9301      	str	r3, [sp, #4]
 801bb0c:	f002 fe38 	bl	801e780 <_svfiprintf_r>
 801bb10:	9b02      	ldr	r3, [sp, #8]
 801bb12:	2200      	movs	r2, #0
 801bb14:	701a      	strb	r2, [r3, #0]
 801bb16:	b01c      	add	sp, #112	; 0x70
 801bb18:	f85d eb04 	ldr.w	lr, [sp], #4
 801bb1c:	b003      	add	sp, #12
 801bb1e:	4770      	bx	lr
 801bb20:	20000930 	.word	0x20000930
 801bb24:	ffff0208 	.word	0xffff0208

0801bb28 <sulp>:
 801bb28:	b570      	push	{r4, r5, r6, lr}
 801bb2a:	4604      	mov	r4, r0
 801bb2c:	460d      	mov	r5, r1
 801bb2e:	4616      	mov	r6, r2
 801bb30:	ec45 4b10 	vmov	d0, r4, r5
 801bb34:	f002 fc36 	bl	801e3a4 <__ulp>
 801bb38:	ec51 0b10 	vmov	r0, r1, d0
 801bb3c:	b17e      	cbz	r6, 801bb5e <sulp+0x36>
 801bb3e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bb42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	dd09      	ble.n	801bb5e <sulp+0x36>
 801bb4a:	051b      	lsls	r3, r3, #20
 801bb4c:	2400      	movs	r4, #0
 801bb4e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801bb52:	4622      	mov	r2, r4
 801bb54:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801bb58:	462b      	mov	r3, r5
 801bb5a:	f7e4 fd51 	bl	8000600 <__aeabi_dmul>
 801bb5e:	bd70      	pop	{r4, r5, r6, pc}

0801bb60 <_strtod_l>:
 801bb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb64:	461f      	mov	r7, r3
 801bb66:	2300      	movs	r3, #0
 801bb68:	4604      	mov	r4, r0
 801bb6a:	4688      	mov	r8, r1
 801bb6c:	f04f 0a00 	mov.w	sl, #0
 801bb70:	f04f 0b00 	mov.w	fp, #0
 801bb74:	ed2d 8b02 	vpush	{d8}
 801bb78:	b09d      	sub	sp, #116	; 0x74
 801bb7a:	9318      	str	r3, [sp, #96]	; 0x60
 801bb7c:	4b9f      	ldr	r3, [pc, #636]	; (801bdfc <_strtod_l+0x29c>)
 801bb7e:	9213      	str	r2, [sp, #76]	; 0x4c
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	4618      	mov	r0, r3
 801bb84:	9305      	str	r3, [sp, #20]
 801bb86:	f7e4 fb77 	bl	8000278 <strlen>
 801bb8a:	4605      	mov	r5, r0
 801bb8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801bb90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bb92:	781a      	ldrb	r2, [r3, #0]
 801bb94:	2a2b      	cmp	r2, #43	; 0x2b
 801bb96:	d04e      	beq.n	801bc36 <_strtod_l+0xd6>
 801bb98:	d83b      	bhi.n	801bc12 <_strtod_l+0xb2>
 801bb9a:	2a0d      	cmp	r2, #13
 801bb9c:	d834      	bhi.n	801bc08 <_strtod_l+0xa8>
 801bb9e:	2a08      	cmp	r2, #8
 801bba0:	d834      	bhi.n	801bc0c <_strtod_l+0xac>
 801bba2:	2a00      	cmp	r2, #0
 801bba4:	d03e      	beq.n	801bc24 <_strtod_l+0xc4>
 801bba6:	2300      	movs	r3, #0
 801bba8:	930a      	str	r3, [sp, #40]	; 0x28
 801bbaa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801bbac:	7833      	ldrb	r3, [r6, #0]
 801bbae:	2b30      	cmp	r3, #48	; 0x30
 801bbb0:	f040 80b0 	bne.w	801bd14 <_strtod_l+0x1b4>
 801bbb4:	7873      	ldrb	r3, [r6, #1]
 801bbb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bbba:	2b58      	cmp	r3, #88	; 0x58
 801bbbc:	d168      	bne.n	801bc90 <_strtod_l+0x130>
 801bbbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bbc0:	a917      	add	r1, sp, #92	; 0x5c
 801bbc2:	9702      	str	r7, [sp, #8]
 801bbc4:	4620      	mov	r0, r4
 801bbc6:	9301      	str	r3, [sp, #4]
 801bbc8:	ab18      	add	r3, sp, #96	; 0x60
 801bbca:	4a8d      	ldr	r2, [pc, #564]	; (801be00 <_strtod_l+0x2a0>)
 801bbcc:	9300      	str	r3, [sp, #0]
 801bbce:	ab19      	add	r3, sp, #100	; 0x64
 801bbd0:	f001 fd38 	bl	801d644 <__gethex>
 801bbd4:	f010 0707 	ands.w	r7, r0, #7
 801bbd8:	4605      	mov	r5, r0
 801bbda:	d005      	beq.n	801bbe8 <_strtod_l+0x88>
 801bbdc:	2f06      	cmp	r7, #6
 801bbde:	d12c      	bne.n	801bc3a <_strtod_l+0xda>
 801bbe0:	3601      	adds	r6, #1
 801bbe2:	2300      	movs	r3, #0
 801bbe4:	9617      	str	r6, [sp, #92]	; 0x5c
 801bbe6:	930a      	str	r3, [sp, #40]	; 0x28
 801bbe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	f040 858e 	bne.w	801c70c <_strtod_l+0xbac>
 801bbf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bbf2:	b1eb      	cbz	r3, 801bc30 <_strtod_l+0xd0>
 801bbf4:	4652      	mov	r2, sl
 801bbf6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801bbfa:	ec43 2b10 	vmov	d0, r2, r3
 801bbfe:	b01d      	add	sp, #116	; 0x74
 801bc00:	ecbd 8b02 	vpop	{d8}
 801bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc08:	2a20      	cmp	r2, #32
 801bc0a:	d1cc      	bne.n	801bba6 <_strtod_l+0x46>
 801bc0c:	3301      	adds	r3, #1
 801bc0e:	9317      	str	r3, [sp, #92]	; 0x5c
 801bc10:	e7be      	b.n	801bb90 <_strtod_l+0x30>
 801bc12:	2a2d      	cmp	r2, #45	; 0x2d
 801bc14:	d1c7      	bne.n	801bba6 <_strtod_l+0x46>
 801bc16:	2201      	movs	r2, #1
 801bc18:	920a      	str	r2, [sp, #40]	; 0x28
 801bc1a:	1c5a      	adds	r2, r3, #1
 801bc1c:	9217      	str	r2, [sp, #92]	; 0x5c
 801bc1e:	785b      	ldrb	r3, [r3, #1]
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	d1c2      	bne.n	801bbaa <_strtod_l+0x4a>
 801bc24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bc26:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	f040 856c 	bne.w	801c708 <_strtod_l+0xba8>
 801bc30:	4652      	mov	r2, sl
 801bc32:	465b      	mov	r3, fp
 801bc34:	e7e1      	b.n	801bbfa <_strtod_l+0x9a>
 801bc36:	2200      	movs	r2, #0
 801bc38:	e7ee      	b.n	801bc18 <_strtod_l+0xb8>
 801bc3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801bc3c:	b13a      	cbz	r2, 801bc4e <_strtod_l+0xee>
 801bc3e:	2135      	movs	r1, #53	; 0x35
 801bc40:	a81a      	add	r0, sp, #104	; 0x68
 801bc42:	f002 fcb8 	bl	801e5b6 <__copybits>
 801bc46:	9918      	ldr	r1, [sp, #96]	; 0x60
 801bc48:	4620      	mov	r0, r4
 801bc4a:	f002 f873 	bl	801dd34 <_Bfree>
 801bc4e:	3f01      	subs	r7, #1
 801bc50:	2f04      	cmp	r7, #4
 801bc52:	d806      	bhi.n	801bc62 <_strtod_l+0x102>
 801bc54:	e8df f007 	tbb	[pc, r7]
 801bc58:	1714030a 	.word	0x1714030a
 801bc5c:	0a          	.byte	0x0a
 801bc5d:	00          	.byte	0x00
 801bc5e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801bc62:	0728      	lsls	r0, r5, #28
 801bc64:	d5c0      	bpl.n	801bbe8 <_strtod_l+0x88>
 801bc66:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801bc6a:	e7bd      	b.n	801bbe8 <_strtod_l+0x88>
 801bc6c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801bc70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801bc72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801bc76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bc7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801bc7e:	e7f0      	b.n	801bc62 <_strtod_l+0x102>
 801bc80:	f8df b180 	ldr.w	fp, [pc, #384]	; 801be04 <_strtod_l+0x2a4>
 801bc84:	e7ed      	b.n	801bc62 <_strtod_l+0x102>
 801bc86:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801bc8a:	f04f 3aff 	mov.w	sl, #4294967295
 801bc8e:	e7e8      	b.n	801bc62 <_strtod_l+0x102>
 801bc90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bc92:	1c5a      	adds	r2, r3, #1
 801bc94:	9217      	str	r2, [sp, #92]	; 0x5c
 801bc96:	785b      	ldrb	r3, [r3, #1]
 801bc98:	2b30      	cmp	r3, #48	; 0x30
 801bc9a:	d0f9      	beq.n	801bc90 <_strtod_l+0x130>
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d0a3      	beq.n	801bbe8 <_strtod_l+0x88>
 801bca0:	2301      	movs	r3, #1
 801bca2:	f04f 0900 	mov.w	r9, #0
 801bca6:	9304      	str	r3, [sp, #16]
 801bca8:	220a      	movs	r2, #10
 801bcaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bcac:	464f      	mov	r7, r9
 801bcae:	f8cd 901c 	str.w	r9, [sp, #28]
 801bcb2:	9308      	str	r3, [sp, #32]
 801bcb4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801bcb6:	7806      	ldrb	r6, [r0, #0]
 801bcb8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801bcbc:	b2d9      	uxtb	r1, r3
 801bcbe:	2909      	cmp	r1, #9
 801bcc0:	d92a      	bls.n	801bd18 <_strtod_l+0x1b8>
 801bcc2:	462a      	mov	r2, r5
 801bcc4:	9905      	ldr	r1, [sp, #20]
 801bcc6:	f002 fe63 	bl	801e990 <strncmp>
 801bcca:	b3a0      	cbz	r0, 801bd36 <_strtod_l+0x1d6>
 801bccc:	2000      	movs	r0, #0
 801bcce:	4632      	mov	r2, r6
 801bcd0:	463d      	mov	r5, r7
 801bcd2:	4603      	mov	r3, r0
 801bcd4:	9005      	str	r0, [sp, #20]
 801bcd6:	2a65      	cmp	r2, #101	; 0x65
 801bcd8:	d001      	beq.n	801bcde <_strtod_l+0x17e>
 801bcda:	2a45      	cmp	r2, #69	; 0x45
 801bcdc:	d118      	bne.n	801bd10 <_strtod_l+0x1b0>
 801bcde:	b91d      	cbnz	r5, 801bce8 <_strtod_l+0x188>
 801bce0:	9a04      	ldr	r2, [sp, #16]
 801bce2:	4302      	orrs	r2, r0
 801bce4:	d09e      	beq.n	801bc24 <_strtod_l+0xc4>
 801bce6:	2500      	movs	r5, #0
 801bce8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801bcec:	f108 0201 	add.w	r2, r8, #1
 801bcf0:	9217      	str	r2, [sp, #92]	; 0x5c
 801bcf2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801bcf6:	2a2b      	cmp	r2, #43	; 0x2b
 801bcf8:	d075      	beq.n	801bde6 <_strtod_l+0x286>
 801bcfa:	2a2d      	cmp	r2, #45	; 0x2d
 801bcfc:	d07b      	beq.n	801bdf6 <_strtod_l+0x296>
 801bcfe:	f04f 0c00 	mov.w	ip, #0
 801bd02:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801bd06:	2909      	cmp	r1, #9
 801bd08:	f240 8082 	bls.w	801be10 <_strtod_l+0x2b0>
 801bd0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801bd10:	2600      	movs	r6, #0
 801bd12:	e09d      	b.n	801be50 <_strtod_l+0x2f0>
 801bd14:	2300      	movs	r3, #0
 801bd16:	e7c4      	b.n	801bca2 <_strtod_l+0x142>
 801bd18:	2f08      	cmp	r7, #8
 801bd1a:	f100 0001 	add.w	r0, r0, #1
 801bd1e:	f107 0701 	add.w	r7, r7, #1
 801bd22:	bfd4      	ite	le
 801bd24:	9907      	ldrle	r1, [sp, #28]
 801bd26:	fb02 3909 	mlagt	r9, r2, r9, r3
 801bd2a:	9017      	str	r0, [sp, #92]	; 0x5c
 801bd2c:	bfdc      	itt	le
 801bd2e:	fb02 3301 	mlale	r3, r2, r1, r3
 801bd32:	9307      	strle	r3, [sp, #28]
 801bd34:	e7be      	b.n	801bcb4 <_strtod_l+0x154>
 801bd36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bd38:	195a      	adds	r2, r3, r5
 801bd3a:	9217      	str	r2, [sp, #92]	; 0x5c
 801bd3c:	5d5a      	ldrb	r2, [r3, r5]
 801bd3e:	2f00      	cmp	r7, #0
 801bd40:	d036      	beq.n	801bdb0 <_strtod_l+0x250>
 801bd42:	463d      	mov	r5, r7
 801bd44:	9005      	str	r0, [sp, #20]
 801bd46:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801bd4a:	2b09      	cmp	r3, #9
 801bd4c:	d912      	bls.n	801bd74 <_strtod_l+0x214>
 801bd4e:	2301      	movs	r3, #1
 801bd50:	e7c1      	b.n	801bcd6 <_strtod_l+0x176>
 801bd52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bd54:	3001      	adds	r0, #1
 801bd56:	1c5a      	adds	r2, r3, #1
 801bd58:	9217      	str	r2, [sp, #92]	; 0x5c
 801bd5a:	785a      	ldrb	r2, [r3, #1]
 801bd5c:	2a30      	cmp	r2, #48	; 0x30
 801bd5e:	d0f8      	beq.n	801bd52 <_strtod_l+0x1f2>
 801bd60:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801bd64:	2b08      	cmp	r3, #8
 801bd66:	f200 84d6 	bhi.w	801c716 <_strtod_l+0xbb6>
 801bd6a:	9005      	str	r0, [sp, #20]
 801bd6c:	2000      	movs	r0, #0
 801bd6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bd70:	4605      	mov	r5, r0
 801bd72:	9308      	str	r3, [sp, #32]
 801bd74:	3a30      	subs	r2, #48	; 0x30
 801bd76:	f100 0301 	add.w	r3, r0, #1
 801bd7a:	d013      	beq.n	801bda4 <_strtod_l+0x244>
 801bd7c:	9905      	ldr	r1, [sp, #20]
 801bd7e:	eb00 0e05 	add.w	lr, r0, r5
 801bd82:	4419      	add	r1, r3
 801bd84:	462b      	mov	r3, r5
 801bd86:	9105      	str	r1, [sp, #20]
 801bd88:	210a      	movs	r1, #10
 801bd8a:	4573      	cmp	r3, lr
 801bd8c:	d112      	bne.n	801bdb4 <_strtod_l+0x254>
 801bd8e:	182b      	adds	r3, r5, r0
 801bd90:	3501      	adds	r5, #1
 801bd92:	2b08      	cmp	r3, #8
 801bd94:	4405      	add	r5, r0
 801bd96:	dc1c      	bgt.n	801bdd2 <_strtod_l+0x272>
 801bd98:	9907      	ldr	r1, [sp, #28]
 801bd9a:	230a      	movs	r3, #10
 801bd9c:	fb03 2301 	mla	r3, r3, r1, r2
 801bda0:	9307      	str	r3, [sp, #28]
 801bda2:	2300      	movs	r3, #0
 801bda4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801bda6:	4618      	mov	r0, r3
 801bda8:	1c51      	adds	r1, r2, #1
 801bdaa:	9117      	str	r1, [sp, #92]	; 0x5c
 801bdac:	7852      	ldrb	r2, [r2, #1]
 801bdae:	e7ca      	b.n	801bd46 <_strtod_l+0x1e6>
 801bdb0:	4638      	mov	r0, r7
 801bdb2:	e7d3      	b.n	801bd5c <_strtod_l+0x1fc>
 801bdb4:	2b08      	cmp	r3, #8
 801bdb6:	dc04      	bgt.n	801bdc2 <_strtod_l+0x262>
 801bdb8:	9e07      	ldr	r6, [sp, #28]
 801bdba:	434e      	muls	r6, r1
 801bdbc:	9607      	str	r6, [sp, #28]
 801bdbe:	3301      	adds	r3, #1
 801bdc0:	e7e3      	b.n	801bd8a <_strtod_l+0x22a>
 801bdc2:	f103 0c01 	add.w	ip, r3, #1
 801bdc6:	f1bc 0f10 	cmp.w	ip, #16
 801bdca:	bfd8      	it	le
 801bdcc:	fb01 f909 	mulle.w	r9, r1, r9
 801bdd0:	e7f5      	b.n	801bdbe <_strtod_l+0x25e>
 801bdd2:	2d10      	cmp	r5, #16
 801bdd4:	bfdc      	itt	le
 801bdd6:	230a      	movle	r3, #10
 801bdd8:	fb03 2909 	mlale	r9, r3, r9, r2
 801bddc:	e7e1      	b.n	801bda2 <_strtod_l+0x242>
 801bdde:	2300      	movs	r3, #0
 801bde0:	9305      	str	r3, [sp, #20]
 801bde2:	2301      	movs	r3, #1
 801bde4:	e77c      	b.n	801bce0 <_strtod_l+0x180>
 801bde6:	f04f 0c00 	mov.w	ip, #0
 801bdea:	f108 0202 	add.w	r2, r8, #2
 801bdee:	9217      	str	r2, [sp, #92]	; 0x5c
 801bdf0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801bdf4:	e785      	b.n	801bd02 <_strtod_l+0x1a2>
 801bdf6:	f04f 0c01 	mov.w	ip, #1
 801bdfa:	e7f6      	b.n	801bdea <_strtod_l+0x28a>
 801bdfc:	08074920 	.word	0x08074920
 801be00:	080746d4 	.word	0x080746d4
 801be04:	7ff00000 	.word	0x7ff00000
 801be08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801be0a:	1c51      	adds	r1, r2, #1
 801be0c:	9117      	str	r1, [sp, #92]	; 0x5c
 801be0e:	7852      	ldrb	r2, [r2, #1]
 801be10:	2a30      	cmp	r2, #48	; 0x30
 801be12:	d0f9      	beq.n	801be08 <_strtod_l+0x2a8>
 801be14:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801be18:	2908      	cmp	r1, #8
 801be1a:	f63f af79 	bhi.w	801bd10 <_strtod_l+0x1b0>
 801be1e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801be22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801be24:	9206      	str	r2, [sp, #24]
 801be26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801be28:	1c51      	adds	r1, r2, #1
 801be2a:	9117      	str	r1, [sp, #92]	; 0x5c
 801be2c:	7852      	ldrb	r2, [r2, #1]
 801be2e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801be32:	2e09      	cmp	r6, #9
 801be34:	d937      	bls.n	801bea6 <_strtod_l+0x346>
 801be36:	9e06      	ldr	r6, [sp, #24]
 801be38:	1b89      	subs	r1, r1, r6
 801be3a:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801be3e:	2908      	cmp	r1, #8
 801be40:	dc02      	bgt.n	801be48 <_strtod_l+0x2e8>
 801be42:	4576      	cmp	r6, lr
 801be44:	bfa8      	it	ge
 801be46:	4676      	movge	r6, lr
 801be48:	f1bc 0f00 	cmp.w	ip, #0
 801be4c:	d000      	beq.n	801be50 <_strtod_l+0x2f0>
 801be4e:	4276      	negs	r6, r6
 801be50:	2d00      	cmp	r5, #0
 801be52:	d14d      	bne.n	801bef0 <_strtod_l+0x390>
 801be54:	9904      	ldr	r1, [sp, #16]
 801be56:	4301      	orrs	r1, r0
 801be58:	f47f aec6 	bne.w	801bbe8 <_strtod_l+0x88>
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	f47f aee1 	bne.w	801bc24 <_strtod_l+0xc4>
 801be62:	2a69      	cmp	r2, #105	; 0x69
 801be64:	d027      	beq.n	801beb6 <_strtod_l+0x356>
 801be66:	dc24      	bgt.n	801beb2 <_strtod_l+0x352>
 801be68:	2a49      	cmp	r2, #73	; 0x49
 801be6a:	d024      	beq.n	801beb6 <_strtod_l+0x356>
 801be6c:	2a4e      	cmp	r2, #78	; 0x4e
 801be6e:	f47f aed9 	bne.w	801bc24 <_strtod_l+0xc4>
 801be72:	499f      	ldr	r1, [pc, #636]	; (801c0f0 <_strtod_l+0x590>)
 801be74:	a817      	add	r0, sp, #92	; 0x5c
 801be76:	f001 fe3d 	bl	801daf4 <__match>
 801be7a:	2800      	cmp	r0, #0
 801be7c:	f43f aed2 	beq.w	801bc24 <_strtod_l+0xc4>
 801be80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801be82:	781b      	ldrb	r3, [r3, #0]
 801be84:	2b28      	cmp	r3, #40	; 0x28
 801be86:	d12d      	bne.n	801bee4 <_strtod_l+0x384>
 801be88:	aa1a      	add	r2, sp, #104	; 0x68
 801be8a:	499a      	ldr	r1, [pc, #616]	; (801c0f4 <_strtod_l+0x594>)
 801be8c:	a817      	add	r0, sp, #92	; 0x5c
 801be8e:	f001 fe45 	bl	801db1c <__hexnan>
 801be92:	2805      	cmp	r0, #5
 801be94:	d126      	bne.n	801bee4 <_strtod_l+0x384>
 801be96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801be98:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801be9c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801bea0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801bea4:	e6a0      	b.n	801bbe8 <_strtod_l+0x88>
 801bea6:	210a      	movs	r1, #10
 801bea8:	fb01 2e0e 	mla	lr, r1, lr, r2
 801beac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801beb0:	e7b9      	b.n	801be26 <_strtod_l+0x2c6>
 801beb2:	2a6e      	cmp	r2, #110	; 0x6e
 801beb4:	e7db      	b.n	801be6e <_strtod_l+0x30e>
 801beb6:	4990      	ldr	r1, [pc, #576]	; (801c0f8 <_strtod_l+0x598>)
 801beb8:	a817      	add	r0, sp, #92	; 0x5c
 801beba:	f001 fe1b 	bl	801daf4 <__match>
 801bebe:	2800      	cmp	r0, #0
 801bec0:	f43f aeb0 	beq.w	801bc24 <_strtod_l+0xc4>
 801bec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bec6:	a817      	add	r0, sp, #92	; 0x5c
 801bec8:	498c      	ldr	r1, [pc, #560]	; (801c0fc <_strtod_l+0x59c>)
 801beca:	3b01      	subs	r3, #1
 801becc:	9317      	str	r3, [sp, #92]	; 0x5c
 801bece:	f001 fe11 	bl	801daf4 <__match>
 801bed2:	b910      	cbnz	r0, 801beda <_strtod_l+0x37a>
 801bed4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bed6:	3301      	adds	r3, #1
 801bed8:	9317      	str	r3, [sp, #92]	; 0x5c
 801beda:	f8df b230 	ldr.w	fp, [pc, #560]	; 801c10c <_strtod_l+0x5ac>
 801bede:	f04f 0a00 	mov.w	sl, #0
 801bee2:	e681      	b.n	801bbe8 <_strtod_l+0x88>
 801bee4:	4886      	ldr	r0, [pc, #536]	; (801c100 <_strtod_l+0x5a0>)
 801bee6:	f002 fd4b 	bl	801e980 <nan>
 801beea:	ec5b ab10 	vmov	sl, fp, d0
 801beee:	e67b      	b.n	801bbe8 <_strtod_l+0x88>
 801bef0:	9b05      	ldr	r3, [sp, #20]
 801bef2:	2f00      	cmp	r7, #0
 801bef4:	bf08      	it	eq
 801bef6:	462f      	moveq	r7, r5
 801bef8:	2d10      	cmp	r5, #16
 801befa:	9807      	ldr	r0, [sp, #28]
 801befc:	eba6 0303 	sub.w	r3, r6, r3
 801bf00:	46a8      	mov	r8, r5
 801bf02:	bfa8      	it	ge
 801bf04:	f04f 0810 	movge.w	r8, #16
 801bf08:	9306      	str	r3, [sp, #24]
 801bf0a:	f7e4 faff 	bl	800050c <__aeabi_ui2d>
 801bf0e:	2d09      	cmp	r5, #9
 801bf10:	4682      	mov	sl, r0
 801bf12:	468b      	mov	fp, r1
 801bf14:	dd13      	ble.n	801bf3e <_strtod_l+0x3de>
 801bf16:	4b7b      	ldr	r3, [pc, #492]	; (801c104 <_strtod_l+0x5a4>)
 801bf18:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801bf1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801bf20:	f7e4 fb6e 	bl	8000600 <__aeabi_dmul>
 801bf24:	4682      	mov	sl, r0
 801bf26:	468b      	mov	fp, r1
 801bf28:	4648      	mov	r0, r9
 801bf2a:	f7e4 faef 	bl	800050c <__aeabi_ui2d>
 801bf2e:	4602      	mov	r2, r0
 801bf30:	460b      	mov	r3, r1
 801bf32:	4650      	mov	r0, sl
 801bf34:	4659      	mov	r1, fp
 801bf36:	f7e4 f9ad 	bl	8000294 <__adddf3>
 801bf3a:	4682      	mov	sl, r0
 801bf3c:	468b      	mov	fp, r1
 801bf3e:	2d0f      	cmp	r5, #15
 801bf40:	dc38      	bgt.n	801bfb4 <_strtod_l+0x454>
 801bf42:	9b06      	ldr	r3, [sp, #24]
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	f43f ae4f 	beq.w	801bbe8 <_strtod_l+0x88>
 801bf4a:	dd24      	ble.n	801bf96 <_strtod_l+0x436>
 801bf4c:	2b16      	cmp	r3, #22
 801bf4e:	dc0b      	bgt.n	801bf68 <_strtod_l+0x408>
 801bf50:	496c      	ldr	r1, [pc, #432]	; (801c104 <_strtod_l+0x5a4>)
 801bf52:	4652      	mov	r2, sl
 801bf54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bf58:	465b      	mov	r3, fp
 801bf5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf5e:	f7e4 fb4f 	bl	8000600 <__aeabi_dmul>
 801bf62:	4682      	mov	sl, r0
 801bf64:	468b      	mov	fp, r1
 801bf66:	e63f      	b.n	801bbe8 <_strtod_l+0x88>
 801bf68:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801bf6c:	9a06      	ldr	r2, [sp, #24]
 801bf6e:	4293      	cmp	r3, r2
 801bf70:	db20      	blt.n	801bfb4 <_strtod_l+0x454>
 801bf72:	f1c5 050f 	rsb	r5, r5, #15
 801bf76:	4c63      	ldr	r4, [pc, #396]	; (801c104 <_strtod_l+0x5a4>)
 801bf78:	4652      	mov	r2, sl
 801bf7a:	465b      	mov	r3, fp
 801bf7c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801bf80:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf84:	f7e4 fb3c 	bl	8000600 <__aeabi_dmul>
 801bf88:	9b06      	ldr	r3, [sp, #24]
 801bf8a:	1b5d      	subs	r5, r3, r5
 801bf8c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801bf90:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bf94:	e7e3      	b.n	801bf5e <_strtod_l+0x3fe>
 801bf96:	9b06      	ldr	r3, [sp, #24]
 801bf98:	3316      	adds	r3, #22
 801bf9a:	db0b      	blt.n	801bfb4 <_strtod_l+0x454>
 801bf9c:	9b05      	ldr	r3, [sp, #20]
 801bf9e:	4650      	mov	r0, sl
 801bfa0:	4659      	mov	r1, fp
 801bfa2:	1b9e      	subs	r6, r3, r6
 801bfa4:	4b57      	ldr	r3, [pc, #348]	; (801c104 <_strtod_l+0x5a4>)
 801bfa6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801bfaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bfae:	f7e4 fc51 	bl	8000854 <__aeabi_ddiv>
 801bfb2:	e7d6      	b.n	801bf62 <_strtod_l+0x402>
 801bfb4:	eba5 0808 	sub.w	r8, r5, r8
 801bfb8:	9b06      	ldr	r3, [sp, #24]
 801bfba:	4498      	add	r8, r3
 801bfbc:	f1b8 0f00 	cmp.w	r8, #0
 801bfc0:	dd74      	ble.n	801c0ac <_strtod_l+0x54c>
 801bfc2:	f018 030f 	ands.w	r3, r8, #15
 801bfc6:	d00a      	beq.n	801bfde <_strtod_l+0x47e>
 801bfc8:	494e      	ldr	r1, [pc, #312]	; (801c104 <_strtod_l+0x5a4>)
 801bfca:	4652      	mov	r2, sl
 801bfcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bfd0:	465b      	mov	r3, fp
 801bfd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bfd6:	f7e4 fb13 	bl	8000600 <__aeabi_dmul>
 801bfda:	4682      	mov	sl, r0
 801bfdc:	468b      	mov	fp, r1
 801bfde:	f038 080f 	bics.w	r8, r8, #15
 801bfe2:	d04f      	beq.n	801c084 <_strtod_l+0x524>
 801bfe4:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801bfe8:	dd22      	ble.n	801c030 <_strtod_l+0x4d0>
 801bfea:	2500      	movs	r5, #0
 801bfec:	462e      	mov	r6, r5
 801bfee:	9507      	str	r5, [sp, #28]
 801bff0:	9505      	str	r5, [sp, #20]
 801bff2:	2322      	movs	r3, #34	; 0x22
 801bff4:	f8df b114 	ldr.w	fp, [pc, #276]	; 801c10c <_strtod_l+0x5ac>
 801bff8:	f04f 0a00 	mov.w	sl, #0
 801bffc:	6023      	str	r3, [r4, #0]
 801bffe:	9b07      	ldr	r3, [sp, #28]
 801c000:	2b00      	cmp	r3, #0
 801c002:	f43f adf1 	beq.w	801bbe8 <_strtod_l+0x88>
 801c006:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c008:	4620      	mov	r0, r4
 801c00a:	f001 fe93 	bl	801dd34 <_Bfree>
 801c00e:	9905      	ldr	r1, [sp, #20]
 801c010:	4620      	mov	r0, r4
 801c012:	f001 fe8f 	bl	801dd34 <_Bfree>
 801c016:	4631      	mov	r1, r6
 801c018:	4620      	mov	r0, r4
 801c01a:	f001 fe8b 	bl	801dd34 <_Bfree>
 801c01e:	9907      	ldr	r1, [sp, #28]
 801c020:	4620      	mov	r0, r4
 801c022:	f001 fe87 	bl	801dd34 <_Bfree>
 801c026:	4629      	mov	r1, r5
 801c028:	4620      	mov	r0, r4
 801c02a:	f001 fe83 	bl	801dd34 <_Bfree>
 801c02e:	e5db      	b.n	801bbe8 <_strtod_l+0x88>
 801c030:	4b35      	ldr	r3, [pc, #212]	; (801c108 <_strtod_l+0x5a8>)
 801c032:	ea4f 1828 	mov.w	r8, r8, asr #4
 801c036:	4650      	mov	r0, sl
 801c038:	4659      	mov	r1, fp
 801c03a:	9304      	str	r3, [sp, #16]
 801c03c:	2300      	movs	r3, #0
 801c03e:	4699      	mov	r9, r3
 801c040:	f1b8 0f01 	cmp.w	r8, #1
 801c044:	dc21      	bgt.n	801c08a <_strtod_l+0x52a>
 801c046:	b10b      	cbz	r3, 801c04c <_strtod_l+0x4ec>
 801c048:	4682      	mov	sl, r0
 801c04a:	468b      	mov	fp, r1
 801c04c:	4b2e      	ldr	r3, [pc, #184]	; (801c108 <_strtod_l+0x5a8>)
 801c04e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801c052:	4652      	mov	r2, sl
 801c054:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801c058:	465b      	mov	r3, fp
 801c05a:	e9d9 0100 	ldrd	r0, r1, [r9]
 801c05e:	f7e4 facf 	bl	8000600 <__aeabi_dmul>
 801c062:	4b2a      	ldr	r3, [pc, #168]	; (801c10c <_strtod_l+0x5ac>)
 801c064:	460a      	mov	r2, r1
 801c066:	4682      	mov	sl, r0
 801c068:	400b      	ands	r3, r1
 801c06a:	4929      	ldr	r1, [pc, #164]	; (801c110 <_strtod_l+0x5b0>)
 801c06c:	428b      	cmp	r3, r1
 801c06e:	d8bc      	bhi.n	801bfea <_strtod_l+0x48a>
 801c070:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c074:	428b      	cmp	r3, r1
 801c076:	bf86      	itte	hi
 801c078:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801c114 <_strtod_l+0x5b4>
 801c07c:	f04f 3aff 	movhi.w	sl, #4294967295
 801c080:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801c084:	2300      	movs	r3, #0
 801c086:	9304      	str	r3, [sp, #16]
 801c088:	e083      	b.n	801c192 <_strtod_l+0x632>
 801c08a:	f018 0f01 	tst.w	r8, #1
 801c08e:	d005      	beq.n	801c09c <_strtod_l+0x53c>
 801c090:	9b04      	ldr	r3, [sp, #16]
 801c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c096:	f7e4 fab3 	bl	8000600 <__aeabi_dmul>
 801c09a:	2301      	movs	r3, #1
 801c09c:	9a04      	ldr	r2, [sp, #16]
 801c09e:	f109 0901 	add.w	r9, r9, #1
 801c0a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c0a6:	3208      	adds	r2, #8
 801c0a8:	9204      	str	r2, [sp, #16]
 801c0aa:	e7c9      	b.n	801c040 <_strtod_l+0x4e0>
 801c0ac:	d0ea      	beq.n	801c084 <_strtod_l+0x524>
 801c0ae:	f1c8 0800 	rsb	r8, r8, #0
 801c0b2:	f018 020f 	ands.w	r2, r8, #15
 801c0b6:	d00a      	beq.n	801c0ce <_strtod_l+0x56e>
 801c0b8:	4b12      	ldr	r3, [pc, #72]	; (801c104 <_strtod_l+0x5a4>)
 801c0ba:	4650      	mov	r0, sl
 801c0bc:	4659      	mov	r1, fp
 801c0be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0c6:	f7e4 fbc5 	bl	8000854 <__aeabi_ddiv>
 801c0ca:	4682      	mov	sl, r0
 801c0cc:	468b      	mov	fp, r1
 801c0ce:	ea5f 1828 	movs.w	r8, r8, asr #4
 801c0d2:	d0d7      	beq.n	801c084 <_strtod_l+0x524>
 801c0d4:	f1b8 0f1f 	cmp.w	r8, #31
 801c0d8:	dd1e      	ble.n	801c118 <_strtod_l+0x5b8>
 801c0da:	2500      	movs	r5, #0
 801c0dc:	462e      	mov	r6, r5
 801c0de:	9507      	str	r5, [sp, #28]
 801c0e0:	9505      	str	r5, [sp, #20]
 801c0e2:	2322      	movs	r3, #34	; 0x22
 801c0e4:	f04f 0a00 	mov.w	sl, #0
 801c0e8:	f04f 0b00 	mov.w	fp, #0
 801c0ec:	6023      	str	r3, [r4, #0]
 801c0ee:	e786      	b.n	801bffe <_strtod_l+0x49e>
 801c0f0:	080746a5 	.word	0x080746a5
 801c0f4:	080746e8 	.word	0x080746e8
 801c0f8:	0807469d 	.word	0x0807469d
 801c0fc:	0807482c 	.word	0x0807482c
 801c100:	08074ad8 	.word	0x08074ad8
 801c104:	080749b8 	.word	0x080749b8
 801c108:	08074990 	.word	0x08074990
 801c10c:	7ff00000 	.word	0x7ff00000
 801c110:	7ca00000 	.word	0x7ca00000
 801c114:	7fefffff 	.word	0x7fefffff
 801c118:	f018 0310 	ands.w	r3, r8, #16
 801c11c:	4650      	mov	r0, sl
 801c11e:	4659      	mov	r1, fp
 801c120:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 801c4cc <_strtod_l+0x96c>
 801c124:	bf18      	it	ne
 801c126:	236a      	movne	r3, #106	; 0x6a
 801c128:	9304      	str	r3, [sp, #16]
 801c12a:	2300      	movs	r3, #0
 801c12c:	f018 0f01 	tst.w	r8, #1
 801c130:	d004      	beq.n	801c13c <_strtod_l+0x5dc>
 801c132:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c136:	f7e4 fa63 	bl	8000600 <__aeabi_dmul>
 801c13a:	2301      	movs	r3, #1
 801c13c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801c140:	f109 0908 	add.w	r9, r9, #8
 801c144:	d1f2      	bne.n	801c12c <_strtod_l+0x5cc>
 801c146:	b10b      	cbz	r3, 801c14c <_strtod_l+0x5ec>
 801c148:	4682      	mov	sl, r0
 801c14a:	468b      	mov	fp, r1
 801c14c:	9b04      	ldr	r3, [sp, #16]
 801c14e:	b1c3      	cbz	r3, 801c182 <_strtod_l+0x622>
 801c150:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c154:	4659      	mov	r1, fp
 801c156:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	dd11      	ble.n	801c182 <_strtod_l+0x622>
 801c15e:	2b1f      	cmp	r3, #31
 801c160:	f340 8121 	ble.w	801c3a6 <_strtod_l+0x846>
 801c164:	2b34      	cmp	r3, #52	; 0x34
 801c166:	f04f 0a00 	mov.w	sl, #0
 801c16a:	bfdb      	ittet	le
 801c16c:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801c170:	f04f 33ff 	movle.w	r3, #4294967295
 801c174:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c178:	fa03 f202 	lslle.w	r2, r3, r2
 801c17c:	bfd8      	it	le
 801c17e:	ea02 0b01 	andle.w	fp, r2, r1
 801c182:	2200      	movs	r2, #0
 801c184:	2300      	movs	r3, #0
 801c186:	4650      	mov	r0, sl
 801c188:	4659      	mov	r1, fp
 801c18a:	f7e4 fca1 	bl	8000ad0 <__aeabi_dcmpeq>
 801c18e:	2800      	cmp	r0, #0
 801c190:	d1a3      	bne.n	801c0da <_strtod_l+0x57a>
 801c192:	9b07      	ldr	r3, [sp, #28]
 801c194:	463a      	mov	r2, r7
 801c196:	9908      	ldr	r1, [sp, #32]
 801c198:	4620      	mov	r0, r4
 801c19a:	9300      	str	r3, [sp, #0]
 801c19c:	462b      	mov	r3, r5
 801c19e:	f001 fe33 	bl	801de08 <__s2b>
 801c1a2:	9007      	str	r0, [sp, #28]
 801c1a4:	2800      	cmp	r0, #0
 801c1a6:	f43f af20 	beq.w	801bfea <_strtod_l+0x48a>
 801c1aa:	9b05      	ldr	r3, [sp, #20]
 801c1ac:	2500      	movs	r5, #0
 801c1ae:	1b9e      	subs	r6, r3, r6
 801c1b0:	9b06      	ldr	r3, [sp, #24]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	bfb4      	ite	lt
 801c1b6:	4633      	movlt	r3, r6
 801c1b8:	2300      	movge	r3, #0
 801c1ba:	462e      	mov	r6, r5
 801c1bc:	930c      	str	r3, [sp, #48]	; 0x30
 801c1be:	9b06      	ldr	r3, [sp, #24]
 801c1c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1c4:	9312      	str	r3, [sp, #72]	; 0x48
 801c1c6:	9b07      	ldr	r3, [sp, #28]
 801c1c8:	4620      	mov	r0, r4
 801c1ca:	6859      	ldr	r1, [r3, #4]
 801c1cc:	f001 fd72 	bl	801dcb4 <_Balloc>
 801c1d0:	9005      	str	r0, [sp, #20]
 801c1d2:	2800      	cmp	r0, #0
 801c1d4:	f43f af0d 	beq.w	801bff2 <_strtod_l+0x492>
 801c1d8:	9b07      	ldr	r3, [sp, #28]
 801c1da:	300c      	adds	r0, #12
 801c1dc:	691a      	ldr	r2, [r3, #16]
 801c1de:	f103 010c 	add.w	r1, r3, #12
 801c1e2:	3202      	adds	r2, #2
 801c1e4:	0092      	lsls	r2, r2, #2
 801c1e6:	f7fe fcc1 	bl	801ab6c <memcpy>
 801c1ea:	aa1a      	add	r2, sp, #104	; 0x68
 801c1ec:	a919      	add	r1, sp, #100	; 0x64
 801c1ee:	4620      	mov	r0, r4
 801c1f0:	ec4b ab10 	vmov	d0, sl, fp
 801c1f4:	f002 f950 	bl	801e498 <__d2b>
 801c1f8:	9018      	str	r0, [sp, #96]	; 0x60
 801c1fa:	ec4b ab18 	vmov	d8, sl, fp
 801c1fe:	2800      	cmp	r0, #0
 801c200:	f43f aef7 	beq.w	801bff2 <_strtod_l+0x492>
 801c204:	2101      	movs	r1, #1
 801c206:	4620      	mov	r0, r4
 801c208:	f001 fe98 	bl	801df3c <__i2b>
 801c20c:	4606      	mov	r6, r0
 801c20e:	2800      	cmp	r0, #0
 801c210:	f43f aeef 	beq.w	801bff2 <_strtod_l+0x492>
 801c214:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c216:	9904      	ldr	r1, [sp, #16]
 801c218:	2b00      	cmp	r3, #0
 801c21a:	eba3 0801 	sub.w	r8, r3, r1
 801c21e:	bfa9      	itett	ge
 801c220:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801c222:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801c224:	eb03 0902 	addge.w	r9, r3, r2
 801c228:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801c22a:	bfb8      	it	lt
 801c22c:	1ad7      	sublt	r7, r2, r3
 801c22e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c230:	4ba1      	ldr	r3, [pc, #644]	; (801c4b8 <_strtod_l+0x958>)
 801c232:	4490      	add	r8, r2
 801c234:	bfb8      	it	lt
 801c236:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801c23a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c23e:	f108 38ff 	add.w	r8, r8, #4294967295
 801c242:	4598      	cmp	r8, r3
 801c244:	f280 80c3 	bge.w	801c3ce <_strtod_l+0x86e>
 801c248:	eba3 0308 	sub.w	r3, r3, r8
 801c24c:	2101      	movs	r1, #1
 801c24e:	2b1f      	cmp	r3, #31
 801c250:	eba2 0203 	sub.w	r2, r2, r3
 801c254:	f300 80ae 	bgt.w	801c3b4 <_strtod_l+0x854>
 801c258:	fa01 f303 	lsl.w	r3, r1, r3
 801c25c:	930d      	str	r3, [sp, #52]	; 0x34
 801c25e:	2300      	movs	r3, #0
 801c260:	9308      	str	r3, [sp, #32]
 801c262:	eb09 0802 	add.w	r8, r9, r2
 801c266:	9b04      	ldr	r3, [sp, #16]
 801c268:	4417      	add	r7, r2
 801c26a:	45c1      	cmp	r9, r8
 801c26c:	441f      	add	r7, r3
 801c26e:	464b      	mov	r3, r9
 801c270:	bfa8      	it	ge
 801c272:	4643      	movge	r3, r8
 801c274:	42bb      	cmp	r3, r7
 801c276:	bfa8      	it	ge
 801c278:	463b      	movge	r3, r7
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	bfc2      	ittt	gt
 801c27e:	eba8 0803 	subgt.w	r8, r8, r3
 801c282:	1aff      	subgt	r7, r7, r3
 801c284:	eba9 0903 	subgt.w	r9, r9, r3
 801c288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	dd17      	ble.n	801c2be <_strtod_l+0x75e>
 801c28e:	4631      	mov	r1, r6
 801c290:	461a      	mov	r2, r3
 801c292:	4620      	mov	r0, r4
 801c294:	f001 ff10 	bl	801e0b8 <__pow5mult>
 801c298:	4606      	mov	r6, r0
 801c29a:	2800      	cmp	r0, #0
 801c29c:	f43f aea9 	beq.w	801bff2 <_strtod_l+0x492>
 801c2a0:	4601      	mov	r1, r0
 801c2a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c2a4:	4620      	mov	r0, r4
 801c2a6:	f001 fe5f 	bl	801df68 <__multiply>
 801c2aa:	900b      	str	r0, [sp, #44]	; 0x2c
 801c2ac:	2800      	cmp	r0, #0
 801c2ae:	f43f aea0 	beq.w	801bff2 <_strtod_l+0x492>
 801c2b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c2b4:	4620      	mov	r0, r4
 801c2b6:	f001 fd3d 	bl	801dd34 <_Bfree>
 801c2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c2bc:	9318      	str	r3, [sp, #96]	; 0x60
 801c2be:	f1b8 0f00 	cmp.w	r8, #0
 801c2c2:	f300 8089 	bgt.w	801c3d8 <_strtod_l+0x878>
 801c2c6:	9b06      	ldr	r3, [sp, #24]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	dd08      	ble.n	801c2de <_strtod_l+0x77e>
 801c2cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c2ce:	4620      	mov	r0, r4
 801c2d0:	9905      	ldr	r1, [sp, #20]
 801c2d2:	f001 fef1 	bl	801e0b8 <__pow5mult>
 801c2d6:	9005      	str	r0, [sp, #20]
 801c2d8:	2800      	cmp	r0, #0
 801c2da:	f43f ae8a 	beq.w	801bff2 <_strtod_l+0x492>
 801c2de:	2f00      	cmp	r7, #0
 801c2e0:	dd08      	ble.n	801c2f4 <_strtod_l+0x794>
 801c2e2:	463a      	mov	r2, r7
 801c2e4:	9905      	ldr	r1, [sp, #20]
 801c2e6:	4620      	mov	r0, r4
 801c2e8:	f001 ff40 	bl	801e16c <__lshift>
 801c2ec:	9005      	str	r0, [sp, #20]
 801c2ee:	2800      	cmp	r0, #0
 801c2f0:	f43f ae7f 	beq.w	801bff2 <_strtod_l+0x492>
 801c2f4:	f1b9 0f00 	cmp.w	r9, #0
 801c2f8:	dd08      	ble.n	801c30c <_strtod_l+0x7ac>
 801c2fa:	4631      	mov	r1, r6
 801c2fc:	464a      	mov	r2, r9
 801c2fe:	4620      	mov	r0, r4
 801c300:	f001 ff34 	bl	801e16c <__lshift>
 801c304:	4606      	mov	r6, r0
 801c306:	2800      	cmp	r0, #0
 801c308:	f43f ae73 	beq.w	801bff2 <_strtod_l+0x492>
 801c30c:	9a05      	ldr	r2, [sp, #20]
 801c30e:	4620      	mov	r0, r4
 801c310:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c312:	f001 ffb7 	bl	801e284 <__mdiff>
 801c316:	4605      	mov	r5, r0
 801c318:	2800      	cmp	r0, #0
 801c31a:	f43f ae6a 	beq.w	801bff2 <_strtod_l+0x492>
 801c31e:	68c3      	ldr	r3, [r0, #12]
 801c320:	4631      	mov	r1, r6
 801c322:	930b      	str	r3, [sp, #44]	; 0x2c
 801c324:	2300      	movs	r3, #0
 801c326:	60c3      	str	r3, [r0, #12]
 801c328:	f001 ff90 	bl	801e24c <__mcmp>
 801c32c:	2800      	cmp	r0, #0
 801c32e:	da5d      	bge.n	801c3ec <_strtod_l+0x88c>
 801c330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c332:	ea53 030a 	orrs.w	r3, r3, sl
 801c336:	d17f      	bne.n	801c438 <_strtod_l+0x8d8>
 801c338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d17b      	bne.n	801c438 <_strtod_l+0x8d8>
 801c340:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c344:	0d1b      	lsrs	r3, r3, #20
 801c346:	051b      	lsls	r3, r3, #20
 801c348:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c34c:	d974      	bls.n	801c438 <_strtod_l+0x8d8>
 801c34e:	696b      	ldr	r3, [r5, #20]
 801c350:	b913      	cbnz	r3, 801c358 <_strtod_l+0x7f8>
 801c352:	692b      	ldr	r3, [r5, #16]
 801c354:	2b01      	cmp	r3, #1
 801c356:	dd6f      	ble.n	801c438 <_strtod_l+0x8d8>
 801c358:	4629      	mov	r1, r5
 801c35a:	2201      	movs	r2, #1
 801c35c:	4620      	mov	r0, r4
 801c35e:	f001 ff05 	bl	801e16c <__lshift>
 801c362:	4631      	mov	r1, r6
 801c364:	4605      	mov	r5, r0
 801c366:	f001 ff71 	bl	801e24c <__mcmp>
 801c36a:	2800      	cmp	r0, #0
 801c36c:	dd64      	ble.n	801c438 <_strtod_l+0x8d8>
 801c36e:	9904      	ldr	r1, [sp, #16]
 801c370:	465b      	mov	r3, fp
 801c372:	4a52      	ldr	r2, [pc, #328]	; (801c4bc <_strtod_l+0x95c>)
 801c374:	2900      	cmp	r1, #0
 801c376:	d07f      	beq.n	801c478 <_strtod_l+0x918>
 801c378:	ea02 010b 	and.w	r1, r2, fp
 801c37c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c380:	dc7a      	bgt.n	801c478 <_strtod_l+0x918>
 801c382:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c386:	f77f aeac 	ble.w	801c0e2 <_strtod_l+0x582>
 801c38a:	4b4d      	ldr	r3, [pc, #308]	; (801c4c0 <_strtod_l+0x960>)
 801c38c:	4650      	mov	r0, sl
 801c38e:	4659      	mov	r1, fp
 801c390:	2200      	movs	r2, #0
 801c392:	f7e4 f935 	bl	8000600 <__aeabi_dmul>
 801c396:	460b      	mov	r3, r1
 801c398:	4682      	mov	sl, r0
 801c39a:	468b      	mov	fp, r1
 801c39c:	4303      	orrs	r3, r0
 801c39e:	bf04      	itt	eq
 801c3a0:	2322      	moveq	r3, #34	; 0x22
 801c3a2:	6023      	streq	r3, [r4, #0]
 801c3a4:	e62f      	b.n	801c006 <_strtod_l+0x4a6>
 801c3a6:	f04f 32ff 	mov.w	r2, #4294967295
 801c3aa:	fa02 f303 	lsl.w	r3, r2, r3
 801c3ae:	ea03 0a0a 	and.w	sl, r3, sl
 801c3b2:	e6e6      	b.n	801c182 <_strtod_l+0x622>
 801c3b4:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801c3b8:	910d      	str	r1, [sp, #52]	; 0x34
 801c3ba:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801c3be:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801c3c2:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801c3c6:	fa01 f308 	lsl.w	r3, r1, r8
 801c3ca:	9308      	str	r3, [sp, #32]
 801c3cc:	e749      	b.n	801c262 <_strtod_l+0x702>
 801c3ce:	2300      	movs	r3, #0
 801c3d0:	9308      	str	r3, [sp, #32]
 801c3d2:	2301      	movs	r3, #1
 801c3d4:	930d      	str	r3, [sp, #52]	; 0x34
 801c3d6:	e744      	b.n	801c262 <_strtod_l+0x702>
 801c3d8:	4642      	mov	r2, r8
 801c3da:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c3dc:	4620      	mov	r0, r4
 801c3de:	f001 fec5 	bl	801e16c <__lshift>
 801c3e2:	9018      	str	r0, [sp, #96]	; 0x60
 801c3e4:	2800      	cmp	r0, #0
 801c3e6:	f47f af6e 	bne.w	801c2c6 <_strtod_l+0x766>
 801c3ea:	e602      	b.n	801bff2 <_strtod_l+0x492>
 801c3ec:	465f      	mov	r7, fp
 801c3ee:	d16f      	bne.n	801c4d0 <_strtod_l+0x970>
 801c3f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c3f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c3f6:	b342      	cbz	r2, 801c44a <_strtod_l+0x8ea>
 801c3f8:	4a32      	ldr	r2, [pc, #200]	; (801c4c4 <_strtod_l+0x964>)
 801c3fa:	4293      	cmp	r3, r2
 801c3fc:	d128      	bne.n	801c450 <_strtod_l+0x8f0>
 801c3fe:	9b04      	ldr	r3, [sp, #16]
 801c400:	4651      	mov	r1, sl
 801c402:	b1eb      	cbz	r3, 801c440 <_strtod_l+0x8e0>
 801c404:	4b2d      	ldr	r3, [pc, #180]	; (801c4bc <_strtod_l+0x95c>)
 801c406:	f04f 32ff 	mov.w	r2, #4294967295
 801c40a:	403b      	ands	r3, r7
 801c40c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c410:	d819      	bhi.n	801c446 <_strtod_l+0x8e6>
 801c412:	0d1b      	lsrs	r3, r3, #20
 801c414:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c418:	fa02 f303 	lsl.w	r3, r2, r3
 801c41c:	4299      	cmp	r1, r3
 801c41e:	d117      	bne.n	801c450 <_strtod_l+0x8f0>
 801c420:	4b29      	ldr	r3, [pc, #164]	; (801c4c8 <_strtod_l+0x968>)
 801c422:	429f      	cmp	r7, r3
 801c424:	d102      	bne.n	801c42c <_strtod_l+0x8cc>
 801c426:	3101      	adds	r1, #1
 801c428:	f43f ade3 	beq.w	801bff2 <_strtod_l+0x492>
 801c42c:	4b23      	ldr	r3, [pc, #140]	; (801c4bc <_strtod_l+0x95c>)
 801c42e:	f04f 0a00 	mov.w	sl, #0
 801c432:	403b      	ands	r3, r7
 801c434:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801c438:	9b04      	ldr	r3, [sp, #16]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d1a5      	bne.n	801c38a <_strtod_l+0x82a>
 801c43e:	e5e2      	b.n	801c006 <_strtod_l+0x4a6>
 801c440:	f04f 33ff 	mov.w	r3, #4294967295
 801c444:	e7ea      	b.n	801c41c <_strtod_l+0x8bc>
 801c446:	4613      	mov	r3, r2
 801c448:	e7e8      	b.n	801c41c <_strtod_l+0x8bc>
 801c44a:	ea53 030a 	orrs.w	r3, r3, sl
 801c44e:	d08e      	beq.n	801c36e <_strtod_l+0x80e>
 801c450:	9b08      	ldr	r3, [sp, #32]
 801c452:	b1db      	cbz	r3, 801c48c <_strtod_l+0x92c>
 801c454:	423b      	tst	r3, r7
 801c456:	d0ef      	beq.n	801c438 <_strtod_l+0x8d8>
 801c458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c45a:	4650      	mov	r0, sl
 801c45c:	9a04      	ldr	r2, [sp, #16]
 801c45e:	4659      	mov	r1, fp
 801c460:	b1c3      	cbz	r3, 801c494 <_strtod_l+0x934>
 801c462:	f7ff fb61 	bl	801bb28 <sulp>
 801c466:	4602      	mov	r2, r0
 801c468:	460b      	mov	r3, r1
 801c46a:	ec51 0b18 	vmov	r0, r1, d8
 801c46e:	f7e3 ff11 	bl	8000294 <__adddf3>
 801c472:	4682      	mov	sl, r0
 801c474:	468b      	mov	fp, r1
 801c476:	e7df      	b.n	801c438 <_strtod_l+0x8d8>
 801c478:	4013      	ands	r3, r2
 801c47a:	f04f 3aff 	mov.w	sl, #4294967295
 801c47e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c482:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c486:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c48a:	e7d5      	b.n	801c438 <_strtod_l+0x8d8>
 801c48c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c48e:	ea13 0f0a 	tst.w	r3, sl
 801c492:	e7e0      	b.n	801c456 <_strtod_l+0x8f6>
 801c494:	f7ff fb48 	bl	801bb28 <sulp>
 801c498:	4602      	mov	r2, r0
 801c49a:	460b      	mov	r3, r1
 801c49c:	ec51 0b18 	vmov	r0, r1, d8
 801c4a0:	f7e3 fef6 	bl	8000290 <__aeabi_dsub>
 801c4a4:	2200      	movs	r2, #0
 801c4a6:	2300      	movs	r3, #0
 801c4a8:	4682      	mov	sl, r0
 801c4aa:	468b      	mov	fp, r1
 801c4ac:	f7e4 fb10 	bl	8000ad0 <__aeabi_dcmpeq>
 801c4b0:	2800      	cmp	r0, #0
 801c4b2:	d0c1      	beq.n	801c438 <_strtod_l+0x8d8>
 801c4b4:	e615      	b.n	801c0e2 <_strtod_l+0x582>
 801c4b6:	bf00      	nop
 801c4b8:	fffffc02 	.word	0xfffffc02
 801c4bc:	7ff00000 	.word	0x7ff00000
 801c4c0:	39500000 	.word	0x39500000
 801c4c4:	000fffff 	.word	0x000fffff
 801c4c8:	7fefffff 	.word	0x7fefffff
 801c4cc:	08074700 	.word	0x08074700
 801c4d0:	4631      	mov	r1, r6
 801c4d2:	4628      	mov	r0, r5
 801c4d4:	f002 f83c 	bl	801e550 <__ratio>
 801c4d8:	2200      	movs	r2, #0
 801c4da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c4de:	ee10 0a10 	vmov	r0, s0
 801c4e2:	ec59 8b10 	vmov	r8, r9, d0
 801c4e6:	4649      	mov	r1, r9
 801c4e8:	f7e4 fb06 	bl	8000af8 <__aeabi_dcmple>
 801c4ec:	2800      	cmp	r0, #0
 801c4ee:	d07a      	beq.n	801c5e6 <_strtod_l+0xa86>
 801c4f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d04a      	beq.n	801c58c <_strtod_l+0xa2c>
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	4b93      	ldr	r3, [pc, #588]	; (801c748 <_strtod_l+0xbe8>)
 801c4fa:	f04f 0800 	mov.w	r8, #0
 801c4fe:	f8df 9248 	ldr.w	r9, [pc, #584]	; 801c748 <_strtod_l+0xbe8>
 801c502:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c506:	4b91      	ldr	r3, [pc, #580]	; (801c74c <_strtod_l+0xbec>)
 801c508:	403b      	ands	r3, r7
 801c50a:	930d      	str	r3, [sp, #52]	; 0x34
 801c50c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c50e:	4b90      	ldr	r3, [pc, #576]	; (801c750 <_strtod_l+0xbf0>)
 801c510:	429a      	cmp	r2, r3
 801c512:	f040 80b0 	bne.w	801c676 <_strtod_l+0xb16>
 801c516:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801c51a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c51e:	ec4b ab10 	vmov	d0, sl, fp
 801c522:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c526:	f001 ff3d 	bl	801e3a4 <__ulp>
 801c52a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c52e:	ec53 2b10 	vmov	r2, r3, d0
 801c532:	f7e4 f865 	bl	8000600 <__aeabi_dmul>
 801c536:	4652      	mov	r2, sl
 801c538:	465b      	mov	r3, fp
 801c53a:	f7e3 feab 	bl	8000294 <__adddf3>
 801c53e:	460b      	mov	r3, r1
 801c540:	4982      	ldr	r1, [pc, #520]	; (801c74c <_strtod_l+0xbec>)
 801c542:	4682      	mov	sl, r0
 801c544:	4a83      	ldr	r2, [pc, #524]	; (801c754 <_strtod_l+0xbf4>)
 801c546:	4019      	ands	r1, r3
 801c548:	4291      	cmp	r1, r2
 801c54a:	d960      	bls.n	801c60e <_strtod_l+0xaae>
 801c54c:	ee18 3a90 	vmov	r3, s17
 801c550:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c554:	4293      	cmp	r3, r2
 801c556:	d104      	bne.n	801c562 <_strtod_l+0xa02>
 801c558:	ee18 3a10 	vmov	r3, s16
 801c55c:	3301      	adds	r3, #1
 801c55e:	f43f ad48 	beq.w	801bff2 <_strtod_l+0x492>
 801c562:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c760 <_strtod_l+0xc00>
 801c566:	f04f 3aff 	mov.w	sl, #4294967295
 801c56a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c56c:	4620      	mov	r0, r4
 801c56e:	f001 fbe1 	bl	801dd34 <_Bfree>
 801c572:	9905      	ldr	r1, [sp, #20]
 801c574:	4620      	mov	r0, r4
 801c576:	f001 fbdd 	bl	801dd34 <_Bfree>
 801c57a:	4631      	mov	r1, r6
 801c57c:	4620      	mov	r0, r4
 801c57e:	f001 fbd9 	bl	801dd34 <_Bfree>
 801c582:	4629      	mov	r1, r5
 801c584:	4620      	mov	r0, r4
 801c586:	f001 fbd5 	bl	801dd34 <_Bfree>
 801c58a:	e61c      	b.n	801c1c6 <_strtod_l+0x666>
 801c58c:	f1ba 0f00 	cmp.w	sl, #0
 801c590:	d11b      	bne.n	801c5ca <_strtod_l+0xa6a>
 801c592:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c596:	b9f3      	cbnz	r3, 801c5d6 <_strtod_l+0xa76>
 801c598:	2200      	movs	r2, #0
 801c59a:	4b6b      	ldr	r3, [pc, #428]	; (801c748 <_strtod_l+0xbe8>)
 801c59c:	4640      	mov	r0, r8
 801c59e:	4649      	mov	r1, r9
 801c5a0:	f7e4 faa0 	bl	8000ae4 <__aeabi_dcmplt>
 801c5a4:	b9d0      	cbnz	r0, 801c5dc <_strtod_l+0xa7c>
 801c5a6:	4640      	mov	r0, r8
 801c5a8:	4649      	mov	r1, r9
 801c5aa:	2200      	movs	r2, #0
 801c5ac:	4b6a      	ldr	r3, [pc, #424]	; (801c758 <_strtod_l+0xbf8>)
 801c5ae:	f7e4 f827 	bl	8000600 <__aeabi_dmul>
 801c5b2:	4680      	mov	r8, r0
 801c5b4:	4689      	mov	r9, r1
 801c5b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c5ba:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801c5be:	9315      	str	r3, [sp, #84]	; 0x54
 801c5c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801c5c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c5c8:	e79d      	b.n	801c506 <_strtod_l+0x9a6>
 801c5ca:	f1ba 0f01 	cmp.w	sl, #1
 801c5ce:	d102      	bne.n	801c5d6 <_strtod_l+0xa76>
 801c5d0:	2f00      	cmp	r7, #0
 801c5d2:	f43f ad86 	beq.w	801c0e2 <_strtod_l+0x582>
 801c5d6:	2200      	movs	r2, #0
 801c5d8:	4b60      	ldr	r3, [pc, #384]	; (801c75c <_strtod_l+0xbfc>)
 801c5da:	e78e      	b.n	801c4fa <_strtod_l+0x99a>
 801c5dc:	f04f 0800 	mov.w	r8, #0
 801c5e0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801c758 <_strtod_l+0xbf8>
 801c5e4:	e7e7      	b.n	801c5b6 <_strtod_l+0xa56>
 801c5e6:	4b5c      	ldr	r3, [pc, #368]	; (801c758 <_strtod_l+0xbf8>)
 801c5e8:	4640      	mov	r0, r8
 801c5ea:	4649      	mov	r1, r9
 801c5ec:	2200      	movs	r2, #0
 801c5ee:	f7e4 f807 	bl	8000600 <__aeabi_dmul>
 801c5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c5f4:	4680      	mov	r8, r0
 801c5f6:	4689      	mov	r9, r1
 801c5f8:	b933      	cbnz	r3, 801c608 <_strtod_l+0xaa8>
 801c5fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c5fe:	900e      	str	r0, [sp, #56]	; 0x38
 801c600:	930f      	str	r3, [sp, #60]	; 0x3c
 801c602:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801c606:	e7dd      	b.n	801c5c4 <_strtod_l+0xa64>
 801c608:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801c60c:	e7f9      	b.n	801c602 <_strtod_l+0xaa2>
 801c60e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801c612:	9b04      	ldr	r3, [sp, #16]
 801c614:	2b00      	cmp	r3, #0
 801c616:	d1a8      	bne.n	801c56a <_strtod_l+0xa0a>
 801c618:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c61c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c61e:	0d1b      	lsrs	r3, r3, #20
 801c620:	051b      	lsls	r3, r3, #20
 801c622:	429a      	cmp	r2, r3
 801c624:	d1a1      	bne.n	801c56a <_strtod_l+0xa0a>
 801c626:	4640      	mov	r0, r8
 801c628:	4649      	mov	r1, r9
 801c62a:	f7e4 fb49 	bl	8000cc0 <__aeabi_d2lz>
 801c62e:	f7e3 ffb9 	bl	80005a4 <__aeabi_l2d>
 801c632:	4602      	mov	r2, r0
 801c634:	460b      	mov	r3, r1
 801c636:	4640      	mov	r0, r8
 801c638:	4649      	mov	r1, r9
 801c63a:	f7e3 fe29 	bl	8000290 <__aeabi_dsub>
 801c63e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c642:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c644:	4680      	mov	r8, r0
 801c646:	ea43 030a 	orr.w	r3, r3, sl
 801c64a:	4689      	mov	r9, r1
 801c64c:	4313      	orrs	r3, r2
 801c64e:	d055      	beq.n	801c6fc <_strtod_l+0xb9c>
 801c650:	a335      	add	r3, pc, #212	; (adr r3, 801c728 <_strtod_l+0xbc8>)
 801c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c656:	f7e4 fa45 	bl	8000ae4 <__aeabi_dcmplt>
 801c65a:	2800      	cmp	r0, #0
 801c65c:	f47f acd3 	bne.w	801c006 <_strtod_l+0x4a6>
 801c660:	4640      	mov	r0, r8
 801c662:	4649      	mov	r1, r9
 801c664:	a332      	add	r3, pc, #200	; (adr r3, 801c730 <_strtod_l+0xbd0>)
 801c666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c66a:	f7e4 fa59 	bl	8000b20 <__aeabi_dcmpgt>
 801c66e:	2800      	cmp	r0, #0
 801c670:	f43f af7b 	beq.w	801c56a <_strtod_l+0xa0a>
 801c674:	e4c7      	b.n	801c006 <_strtod_l+0x4a6>
 801c676:	9b04      	ldr	r3, [sp, #16]
 801c678:	b333      	cbz	r3, 801c6c8 <_strtod_l+0xb68>
 801c67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c67c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c680:	d822      	bhi.n	801c6c8 <_strtod_l+0xb68>
 801c682:	4640      	mov	r0, r8
 801c684:	4649      	mov	r1, r9
 801c686:	a32c      	add	r3, pc, #176	; (adr r3, 801c738 <_strtod_l+0xbd8>)
 801c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c68c:	f7e4 fa34 	bl	8000af8 <__aeabi_dcmple>
 801c690:	b1a0      	cbz	r0, 801c6bc <_strtod_l+0xb5c>
 801c692:	4649      	mov	r1, r9
 801c694:	4640      	mov	r0, r8
 801c696:	f7e4 fa8b 	bl	8000bb0 <__aeabi_d2uiz>
 801c69a:	2801      	cmp	r0, #1
 801c69c:	bf38      	it	cc
 801c69e:	2001      	movcc	r0, #1
 801c6a0:	f7e3 ff34 	bl	800050c <__aeabi_ui2d>
 801c6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c6a6:	4680      	mov	r8, r0
 801c6a8:	4689      	mov	r9, r1
 801c6aa:	bb23      	cbnz	r3, 801c6f6 <_strtod_l+0xb96>
 801c6ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c6b0:	9010      	str	r0, [sp, #64]	; 0x40
 801c6b2:	9311      	str	r3, [sp, #68]	; 0x44
 801c6b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801c6b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c6c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c6c4:	1a9b      	subs	r3, r3, r2
 801c6c6:	9309      	str	r3, [sp, #36]	; 0x24
 801c6c8:	eeb0 0a48 	vmov.f32	s0, s16
 801c6cc:	eef0 0a68 	vmov.f32	s1, s17
 801c6d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c6d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c6d8:	f001 fe64 	bl	801e3a4 <__ulp>
 801c6dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c6e0:	ec53 2b10 	vmov	r2, r3, d0
 801c6e4:	f7e3 ff8c 	bl	8000600 <__aeabi_dmul>
 801c6e8:	ec53 2b18 	vmov	r2, r3, d8
 801c6ec:	f7e3 fdd2 	bl	8000294 <__adddf3>
 801c6f0:	4682      	mov	sl, r0
 801c6f2:	468b      	mov	fp, r1
 801c6f4:	e78d      	b.n	801c612 <_strtod_l+0xab2>
 801c6f6:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801c6fa:	e7db      	b.n	801c6b4 <_strtod_l+0xb54>
 801c6fc:	a310      	add	r3, pc, #64	; (adr r3, 801c740 <_strtod_l+0xbe0>)
 801c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c702:	f7e4 f9ef 	bl	8000ae4 <__aeabi_dcmplt>
 801c706:	e7b2      	b.n	801c66e <_strtod_l+0xb0e>
 801c708:	2300      	movs	r3, #0
 801c70a:	930a      	str	r3, [sp, #40]	; 0x28
 801c70c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c70e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c710:	6013      	str	r3, [r2, #0]
 801c712:	f7ff ba6d 	b.w	801bbf0 <_strtod_l+0x90>
 801c716:	2a65      	cmp	r2, #101	; 0x65
 801c718:	f43f ab61 	beq.w	801bdde <_strtod_l+0x27e>
 801c71c:	2a45      	cmp	r2, #69	; 0x45
 801c71e:	f43f ab5e 	beq.w	801bdde <_strtod_l+0x27e>
 801c722:	2301      	movs	r3, #1
 801c724:	f7ff bb96 	b.w	801be54 <_strtod_l+0x2f4>
 801c728:	94a03595 	.word	0x94a03595
 801c72c:	3fdfffff 	.word	0x3fdfffff
 801c730:	35afe535 	.word	0x35afe535
 801c734:	3fe00000 	.word	0x3fe00000
 801c738:	ffc00000 	.word	0xffc00000
 801c73c:	41dfffff 	.word	0x41dfffff
 801c740:	94a03595 	.word	0x94a03595
 801c744:	3fcfffff 	.word	0x3fcfffff
 801c748:	3ff00000 	.word	0x3ff00000
 801c74c:	7ff00000 	.word	0x7ff00000
 801c750:	7fe00000 	.word	0x7fe00000
 801c754:	7c9fffff 	.word	0x7c9fffff
 801c758:	3fe00000 	.word	0x3fe00000
 801c75c:	bff00000 	.word	0xbff00000
 801c760:	7fefffff 	.word	0x7fefffff

0801c764 <_strtod_r>:
 801c764:	4b01      	ldr	r3, [pc, #4]	; (801c76c <_strtod_r+0x8>)
 801c766:	f7ff b9fb 	b.w	801bb60 <_strtod_l>
 801c76a:	bf00      	nop
 801c76c:	20000998 	.word	0x20000998

0801c770 <_strtol_l.constprop.0>:
 801c770:	2b01      	cmp	r3, #1
 801c772:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c776:	d001      	beq.n	801c77c <_strtol_l.constprop.0+0xc>
 801c778:	2b24      	cmp	r3, #36	; 0x24
 801c77a:	d906      	bls.n	801c78a <_strtol_l.constprop.0+0x1a>
 801c77c:	f7fe f9c4 	bl	801ab08 <__errno>
 801c780:	2316      	movs	r3, #22
 801c782:	6003      	str	r3, [r0, #0]
 801c784:	2000      	movs	r0, #0
 801c786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c78a:	460d      	mov	r5, r1
 801c78c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 801c870 <_strtol_l.constprop.0+0x100>
 801c790:	462e      	mov	r6, r5
 801c792:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c796:	f814 700c 	ldrb.w	r7, [r4, ip]
 801c79a:	f017 0708 	ands.w	r7, r7, #8
 801c79e:	d1f7      	bne.n	801c790 <_strtol_l.constprop.0+0x20>
 801c7a0:	2c2d      	cmp	r4, #45	; 0x2d
 801c7a2:	d132      	bne.n	801c80a <_strtol_l.constprop.0+0x9a>
 801c7a4:	782c      	ldrb	r4, [r5, #0]
 801c7a6:	2701      	movs	r7, #1
 801c7a8:	1cb5      	adds	r5, r6, #2
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	d05b      	beq.n	801c866 <_strtol_l.constprop.0+0xf6>
 801c7ae:	2b10      	cmp	r3, #16
 801c7b0:	d109      	bne.n	801c7c6 <_strtol_l.constprop.0+0x56>
 801c7b2:	2c30      	cmp	r4, #48	; 0x30
 801c7b4:	d107      	bne.n	801c7c6 <_strtol_l.constprop.0+0x56>
 801c7b6:	782c      	ldrb	r4, [r5, #0]
 801c7b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c7bc:	2c58      	cmp	r4, #88	; 0x58
 801c7be:	d14d      	bne.n	801c85c <_strtol_l.constprop.0+0xec>
 801c7c0:	786c      	ldrb	r4, [r5, #1]
 801c7c2:	2310      	movs	r3, #16
 801c7c4:	3502      	adds	r5, #2
 801c7c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801c7ca:	f04f 0c00 	mov.w	ip, #0
 801c7ce:	f108 38ff 	add.w	r8, r8, #4294967295
 801c7d2:	4666      	mov	r6, ip
 801c7d4:	fbb8 f9f3 	udiv	r9, r8, r3
 801c7d8:	fb03 8a19 	mls	sl, r3, r9, r8
 801c7dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801c7e0:	f1be 0f09 	cmp.w	lr, #9
 801c7e4:	d816      	bhi.n	801c814 <_strtol_l.constprop.0+0xa4>
 801c7e6:	4674      	mov	r4, lr
 801c7e8:	42a3      	cmp	r3, r4
 801c7ea:	dd24      	ble.n	801c836 <_strtol_l.constprop.0+0xc6>
 801c7ec:	f1bc 0f00 	cmp.w	ip, #0
 801c7f0:	db1e      	blt.n	801c830 <_strtol_l.constprop.0+0xc0>
 801c7f2:	45b1      	cmp	r9, r6
 801c7f4:	d31c      	bcc.n	801c830 <_strtol_l.constprop.0+0xc0>
 801c7f6:	d101      	bne.n	801c7fc <_strtol_l.constprop.0+0x8c>
 801c7f8:	45a2      	cmp	sl, r4
 801c7fa:	db19      	blt.n	801c830 <_strtol_l.constprop.0+0xc0>
 801c7fc:	fb06 4603 	mla	r6, r6, r3, r4
 801c800:	f04f 0c01 	mov.w	ip, #1
 801c804:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c808:	e7e8      	b.n	801c7dc <_strtol_l.constprop.0+0x6c>
 801c80a:	2c2b      	cmp	r4, #43	; 0x2b
 801c80c:	bf04      	itt	eq
 801c80e:	782c      	ldrbeq	r4, [r5, #0]
 801c810:	1cb5      	addeq	r5, r6, #2
 801c812:	e7ca      	b.n	801c7aa <_strtol_l.constprop.0+0x3a>
 801c814:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801c818:	f1be 0f19 	cmp.w	lr, #25
 801c81c:	d801      	bhi.n	801c822 <_strtol_l.constprop.0+0xb2>
 801c81e:	3c37      	subs	r4, #55	; 0x37
 801c820:	e7e2      	b.n	801c7e8 <_strtol_l.constprop.0+0x78>
 801c822:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801c826:	f1be 0f19 	cmp.w	lr, #25
 801c82a:	d804      	bhi.n	801c836 <_strtol_l.constprop.0+0xc6>
 801c82c:	3c57      	subs	r4, #87	; 0x57
 801c82e:	e7db      	b.n	801c7e8 <_strtol_l.constprop.0+0x78>
 801c830:	f04f 3cff 	mov.w	ip, #4294967295
 801c834:	e7e6      	b.n	801c804 <_strtol_l.constprop.0+0x94>
 801c836:	f1bc 0f00 	cmp.w	ip, #0
 801c83a:	da05      	bge.n	801c848 <_strtol_l.constprop.0+0xd8>
 801c83c:	2322      	movs	r3, #34	; 0x22
 801c83e:	4646      	mov	r6, r8
 801c840:	6003      	str	r3, [r0, #0]
 801c842:	b942      	cbnz	r2, 801c856 <_strtol_l.constprop.0+0xe6>
 801c844:	4630      	mov	r0, r6
 801c846:	e79e      	b.n	801c786 <_strtol_l.constprop.0+0x16>
 801c848:	b107      	cbz	r7, 801c84c <_strtol_l.constprop.0+0xdc>
 801c84a:	4276      	negs	r6, r6
 801c84c:	2a00      	cmp	r2, #0
 801c84e:	d0f9      	beq.n	801c844 <_strtol_l.constprop.0+0xd4>
 801c850:	f1bc 0f00 	cmp.w	ip, #0
 801c854:	d000      	beq.n	801c858 <_strtol_l.constprop.0+0xe8>
 801c856:	1e69      	subs	r1, r5, #1
 801c858:	6011      	str	r1, [r2, #0]
 801c85a:	e7f3      	b.n	801c844 <_strtol_l.constprop.0+0xd4>
 801c85c:	2430      	movs	r4, #48	; 0x30
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d1b1      	bne.n	801c7c6 <_strtol_l.constprop.0+0x56>
 801c862:	2308      	movs	r3, #8
 801c864:	e7af      	b.n	801c7c6 <_strtol_l.constprop.0+0x56>
 801c866:	2c30      	cmp	r4, #48	; 0x30
 801c868:	d0a5      	beq.n	801c7b6 <_strtol_l.constprop.0+0x46>
 801c86a:	230a      	movs	r3, #10
 801c86c:	e7ab      	b.n	801c7c6 <_strtol_l.constprop.0+0x56>
 801c86e:	bf00      	nop
 801c870:	08074729 	.word	0x08074729

0801c874 <_strtol_r>:
 801c874:	f7ff bf7c 	b.w	801c770 <_strtol_l.constprop.0>

0801c878 <quorem>:
 801c878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c87c:	6903      	ldr	r3, [r0, #16]
 801c87e:	4607      	mov	r7, r0
 801c880:	690c      	ldr	r4, [r1, #16]
 801c882:	42a3      	cmp	r3, r4
 801c884:	f2c0 8087 	blt.w	801c996 <quorem+0x11e>
 801c888:	3c01      	subs	r4, #1
 801c88a:	f100 0514 	add.w	r5, r0, #20
 801c88e:	f101 0814 	add.w	r8, r1, #20
 801c892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c896:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c89a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c89e:	9301      	str	r3, [sp, #4]
 801c8a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c8a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c8a8:	3301      	adds	r3, #1
 801c8aa:	429a      	cmp	r2, r3
 801c8ac:	fbb2 f6f3 	udiv	r6, r2, r3
 801c8b0:	d335      	bcc.n	801c91e <quorem+0xa6>
 801c8b2:	f04f 0e00 	mov.w	lr, #0
 801c8b6:	4640      	mov	r0, r8
 801c8b8:	46ac      	mov	ip, r5
 801c8ba:	46f2      	mov	sl, lr
 801c8bc:	f850 2b04 	ldr.w	r2, [r0], #4
 801c8c0:	b293      	uxth	r3, r2
 801c8c2:	4581      	cmp	r9, r0
 801c8c4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801c8c8:	fb06 e303 	mla	r3, r6, r3, lr
 801c8cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c8d0:	b29b      	uxth	r3, r3
 801c8d2:	fb06 e202 	mla	r2, r6, r2, lr
 801c8d6:	ebaa 0303 	sub.w	r3, sl, r3
 801c8da:	f8dc a000 	ldr.w	sl, [ip]
 801c8de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c8e2:	fa1f fa8a 	uxth.w	sl, sl
 801c8e6:	b292      	uxth	r2, r2
 801c8e8:	4453      	add	r3, sl
 801c8ea:	9300      	str	r3, [sp, #0]
 801c8ec:	f8dc 3000 	ldr.w	r3, [ip]
 801c8f0:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 801c8f4:	9b00      	ldr	r3, [sp, #0]
 801c8f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c8fa:	f8bd 3000 	ldrh.w	r3, [sp]
 801c8fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c902:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c906:	f84c 3b04 	str.w	r3, [ip], #4
 801c90a:	d2d7      	bcs.n	801c8bc <quorem+0x44>
 801c90c:	f855 300b 	ldr.w	r3, [r5, fp]
 801c910:	b92b      	cbnz	r3, 801c91e <quorem+0xa6>
 801c912:	9b01      	ldr	r3, [sp, #4]
 801c914:	3b04      	subs	r3, #4
 801c916:	429d      	cmp	r5, r3
 801c918:	461a      	mov	r2, r3
 801c91a:	d330      	bcc.n	801c97e <quorem+0x106>
 801c91c:	613c      	str	r4, [r7, #16]
 801c91e:	4638      	mov	r0, r7
 801c920:	f001 fc94 	bl	801e24c <__mcmp>
 801c924:	2800      	cmp	r0, #0
 801c926:	db26      	blt.n	801c976 <quorem+0xfe>
 801c928:	3601      	adds	r6, #1
 801c92a:	4628      	mov	r0, r5
 801c92c:	f04f 0c00 	mov.w	ip, #0
 801c930:	f858 1b04 	ldr.w	r1, [r8], #4
 801c934:	f8d0 e000 	ldr.w	lr, [r0]
 801c938:	b28b      	uxth	r3, r1
 801c93a:	45c1      	cmp	r9, r8
 801c93c:	fa1f f28e 	uxth.w	r2, lr
 801c940:	ebac 0303 	sub.w	r3, ip, r3
 801c944:	4413      	add	r3, r2
 801c946:	ea4f 4211 	mov.w	r2, r1, lsr #16
 801c94a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c94e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c952:	b29b      	uxth	r3, r3
 801c954:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c95c:	f840 3b04 	str.w	r3, [r0], #4
 801c960:	d2e6      	bcs.n	801c930 <quorem+0xb8>
 801c962:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c966:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c96a:	b922      	cbnz	r2, 801c976 <quorem+0xfe>
 801c96c:	3b04      	subs	r3, #4
 801c96e:	429d      	cmp	r5, r3
 801c970:	461a      	mov	r2, r3
 801c972:	d30a      	bcc.n	801c98a <quorem+0x112>
 801c974:	613c      	str	r4, [r7, #16]
 801c976:	4630      	mov	r0, r6
 801c978:	b003      	add	sp, #12
 801c97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c97e:	6812      	ldr	r2, [r2, #0]
 801c980:	3b04      	subs	r3, #4
 801c982:	2a00      	cmp	r2, #0
 801c984:	d1ca      	bne.n	801c91c <quorem+0xa4>
 801c986:	3c01      	subs	r4, #1
 801c988:	e7c5      	b.n	801c916 <quorem+0x9e>
 801c98a:	6812      	ldr	r2, [r2, #0]
 801c98c:	3b04      	subs	r3, #4
 801c98e:	2a00      	cmp	r2, #0
 801c990:	d1f0      	bne.n	801c974 <quorem+0xfc>
 801c992:	3c01      	subs	r4, #1
 801c994:	e7eb      	b.n	801c96e <quorem+0xf6>
 801c996:	2000      	movs	r0, #0
 801c998:	e7ee      	b.n	801c978 <quorem+0x100>
 801c99a:	0000      	movs	r0, r0
 801c99c:	0000      	movs	r0, r0
	...

0801c9a0 <_dtoa_r>:
 801c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c9a6:	4604      	mov	r4, r0
 801c9a8:	ee10 aa10 	vmov	sl, s0
 801c9ac:	ed2d 8b04 	vpush	{d8-d9}
 801c9b0:	b093      	sub	sp, #76	; 0x4c
 801c9b2:	ec57 6b10 	vmov	r6, r7, d0
 801c9b6:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c9ba:	46bb      	mov	fp, r7
 801c9bc:	9106      	str	r1, [sp, #24]
 801c9be:	9209      	str	r2, [sp, #36]	; 0x24
 801c9c0:	930c      	str	r3, [sp, #48]	; 0x30
 801c9c2:	b975      	cbnz	r5, 801c9e2 <_dtoa_r+0x42>
 801c9c4:	2010      	movs	r0, #16
 801c9c6:	f7fe f8c9 	bl	801ab5c <malloc>
 801c9ca:	4602      	mov	r2, r0
 801c9cc:	6260      	str	r0, [r4, #36]	; 0x24
 801c9ce:	b920      	cbnz	r0, 801c9da <_dtoa_r+0x3a>
 801c9d0:	4ba7      	ldr	r3, [pc, #668]	; (801cc70 <_dtoa_r+0x2d0>)
 801c9d2:	21ea      	movs	r1, #234	; 0xea
 801c9d4:	48a7      	ldr	r0, [pc, #668]	; (801cc74 <_dtoa_r+0x2d4>)
 801c9d6:	f001 fffd 	bl	801e9d4 <__assert_func>
 801c9da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c9de:	6005      	str	r5, [r0, #0]
 801c9e0:	60c5      	str	r5, [r0, #12]
 801c9e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c9e4:	6819      	ldr	r1, [r3, #0]
 801c9e6:	b151      	cbz	r1, 801c9fe <_dtoa_r+0x5e>
 801c9e8:	685a      	ldr	r2, [r3, #4]
 801c9ea:	2301      	movs	r3, #1
 801c9ec:	4620      	mov	r0, r4
 801c9ee:	4093      	lsls	r3, r2
 801c9f0:	604a      	str	r2, [r1, #4]
 801c9f2:	608b      	str	r3, [r1, #8]
 801c9f4:	f001 f99e 	bl	801dd34 <_Bfree>
 801c9f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c9fa:	2200      	movs	r2, #0
 801c9fc:	601a      	str	r2, [r3, #0]
 801c9fe:	1e3b      	subs	r3, r7, #0
 801ca00:	bfad      	iteet	ge
 801ca02:	2300      	movge	r3, #0
 801ca04:	2201      	movlt	r2, #1
 801ca06:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801ca0a:	f8c8 3000 	strge.w	r3, [r8]
 801ca0e:	4b9a      	ldr	r3, [pc, #616]	; (801cc78 <_dtoa_r+0x2d8>)
 801ca10:	bfb8      	it	lt
 801ca12:	f8c8 2000 	strlt.w	r2, [r8]
 801ca16:	ea33 030b 	bics.w	r3, r3, fp
 801ca1a:	d11b      	bne.n	801ca54 <_dtoa_r+0xb4>
 801ca1c:	f242 730f 	movw	r3, #9999	; 0x270f
 801ca20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ca22:	6013      	str	r3, [r2, #0]
 801ca24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ca28:	4333      	orrs	r3, r6
 801ca2a:	f000 858f 	beq.w	801d54c <_dtoa_r+0xbac>
 801ca2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ca30:	b963      	cbnz	r3, 801ca4c <_dtoa_r+0xac>
 801ca32:	4b92      	ldr	r3, [pc, #584]	; (801cc7c <_dtoa_r+0x2dc>)
 801ca34:	e022      	b.n	801ca7c <_dtoa_r+0xdc>
 801ca36:	4b92      	ldr	r3, [pc, #584]	; (801cc80 <_dtoa_r+0x2e0>)
 801ca38:	9301      	str	r3, [sp, #4]
 801ca3a:	3308      	adds	r3, #8
 801ca3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ca3e:	6013      	str	r3, [r2, #0]
 801ca40:	9801      	ldr	r0, [sp, #4]
 801ca42:	b013      	add	sp, #76	; 0x4c
 801ca44:	ecbd 8b04 	vpop	{d8-d9}
 801ca48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca4c:	4b8b      	ldr	r3, [pc, #556]	; (801cc7c <_dtoa_r+0x2dc>)
 801ca4e:	9301      	str	r3, [sp, #4]
 801ca50:	3303      	adds	r3, #3
 801ca52:	e7f3      	b.n	801ca3c <_dtoa_r+0x9c>
 801ca54:	2200      	movs	r2, #0
 801ca56:	2300      	movs	r3, #0
 801ca58:	4650      	mov	r0, sl
 801ca5a:	4659      	mov	r1, fp
 801ca5c:	f7e4 f838 	bl	8000ad0 <__aeabi_dcmpeq>
 801ca60:	4680      	mov	r8, r0
 801ca62:	ec4b ab19 	vmov	d9, sl, fp
 801ca66:	b158      	cbz	r0, 801ca80 <_dtoa_r+0xe0>
 801ca68:	2301      	movs	r3, #1
 801ca6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ca6c:	6013      	str	r3, [r2, #0]
 801ca6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	f000 8568 	beq.w	801d546 <_dtoa_r+0xba6>
 801ca76:	4883      	ldr	r0, [pc, #524]	; (801cc84 <_dtoa_r+0x2e4>)
 801ca78:	6018      	str	r0, [r3, #0]
 801ca7a:	1e43      	subs	r3, r0, #1
 801ca7c:	9301      	str	r3, [sp, #4]
 801ca7e:	e7df      	b.n	801ca40 <_dtoa_r+0xa0>
 801ca80:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801ca84:	aa10      	add	r2, sp, #64	; 0x40
 801ca86:	a911      	add	r1, sp, #68	; 0x44
 801ca88:	4620      	mov	r0, r4
 801ca8a:	ec4b ab10 	vmov	d0, sl, fp
 801ca8e:	f001 fd03 	bl	801e498 <__d2b>
 801ca92:	ee08 0a10 	vmov	s16, r0
 801ca96:	2d00      	cmp	r5, #0
 801ca98:	f000 8082 	beq.w	801cba0 <_dtoa_r+0x200>
 801ca9c:	ee19 3a90 	vmov	r3, s19
 801caa0:	4656      	mov	r6, sl
 801caa2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801caa6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801caaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801caae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801cab2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801cab6:	2200      	movs	r2, #0
 801cab8:	4b73      	ldr	r3, [pc, #460]	; (801cc88 <_dtoa_r+0x2e8>)
 801caba:	4630      	mov	r0, r6
 801cabc:	4639      	mov	r1, r7
 801cabe:	f7e3 fbe7 	bl	8000290 <__aeabi_dsub>
 801cac2:	a365      	add	r3, pc, #404	; (adr r3, 801cc58 <_dtoa_r+0x2b8>)
 801cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cac8:	f7e3 fd9a 	bl	8000600 <__aeabi_dmul>
 801cacc:	a364      	add	r3, pc, #400	; (adr r3, 801cc60 <_dtoa_r+0x2c0>)
 801cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad2:	f7e3 fbdf 	bl	8000294 <__adddf3>
 801cad6:	4606      	mov	r6, r0
 801cad8:	460f      	mov	r7, r1
 801cada:	4628      	mov	r0, r5
 801cadc:	f7e3 fd26 	bl	800052c <__aeabi_i2d>
 801cae0:	a361      	add	r3, pc, #388	; (adr r3, 801cc68 <_dtoa_r+0x2c8>)
 801cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cae6:	f7e3 fd8b 	bl	8000600 <__aeabi_dmul>
 801caea:	4602      	mov	r2, r0
 801caec:	460b      	mov	r3, r1
 801caee:	4630      	mov	r0, r6
 801caf0:	4639      	mov	r1, r7
 801caf2:	f7e3 fbcf 	bl	8000294 <__adddf3>
 801caf6:	4606      	mov	r6, r0
 801caf8:	460f      	mov	r7, r1
 801cafa:	f7e4 f831 	bl	8000b60 <__aeabi_d2iz>
 801cafe:	2200      	movs	r2, #0
 801cb00:	9000      	str	r0, [sp, #0]
 801cb02:	2300      	movs	r3, #0
 801cb04:	4630      	mov	r0, r6
 801cb06:	4639      	mov	r1, r7
 801cb08:	f7e3 ffec 	bl	8000ae4 <__aeabi_dcmplt>
 801cb0c:	b150      	cbz	r0, 801cb24 <_dtoa_r+0x184>
 801cb0e:	9800      	ldr	r0, [sp, #0]
 801cb10:	f7e3 fd0c 	bl	800052c <__aeabi_i2d>
 801cb14:	4632      	mov	r2, r6
 801cb16:	463b      	mov	r3, r7
 801cb18:	f7e3 ffda 	bl	8000ad0 <__aeabi_dcmpeq>
 801cb1c:	b910      	cbnz	r0, 801cb24 <_dtoa_r+0x184>
 801cb1e:	9b00      	ldr	r3, [sp, #0]
 801cb20:	3b01      	subs	r3, #1
 801cb22:	9300      	str	r3, [sp, #0]
 801cb24:	9b00      	ldr	r3, [sp, #0]
 801cb26:	2b16      	cmp	r3, #22
 801cb28:	d859      	bhi.n	801cbde <_dtoa_r+0x23e>
 801cb2a:	9a00      	ldr	r2, [sp, #0]
 801cb2c:	4b57      	ldr	r3, [pc, #348]	; (801cc8c <_dtoa_r+0x2ec>)
 801cb2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cb32:	ec51 0b19 	vmov	r0, r1, d9
 801cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb3a:	f7e3 ffd3 	bl	8000ae4 <__aeabi_dcmplt>
 801cb3e:	2800      	cmp	r0, #0
 801cb40:	d04f      	beq.n	801cbe2 <_dtoa_r+0x242>
 801cb42:	9b00      	ldr	r3, [sp, #0]
 801cb44:	3b01      	subs	r3, #1
 801cb46:	9300      	str	r3, [sp, #0]
 801cb48:	2300      	movs	r3, #0
 801cb4a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cb4e:	1b5d      	subs	r5, r3, r5
 801cb50:	1e6b      	subs	r3, r5, #1
 801cb52:	9305      	str	r3, [sp, #20]
 801cb54:	bf49      	itett	mi
 801cb56:	f1c5 0301 	rsbmi	r3, r5, #1
 801cb5a:	2300      	movpl	r3, #0
 801cb5c:	9304      	strmi	r3, [sp, #16]
 801cb5e:	2300      	movmi	r3, #0
 801cb60:	bf54      	ite	pl
 801cb62:	9304      	strpl	r3, [sp, #16]
 801cb64:	9305      	strmi	r3, [sp, #20]
 801cb66:	9b00      	ldr	r3, [sp, #0]
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	db3c      	blt.n	801cbe6 <_dtoa_r+0x246>
 801cb6c:	9b05      	ldr	r3, [sp, #20]
 801cb6e:	9a00      	ldr	r2, [sp, #0]
 801cb70:	4413      	add	r3, r2
 801cb72:	920a      	str	r2, [sp, #40]	; 0x28
 801cb74:	9305      	str	r3, [sp, #20]
 801cb76:	2300      	movs	r3, #0
 801cb78:	9307      	str	r3, [sp, #28]
 801cb7a:	9b06      	ldr	r3, [sp, #24]
 801cb7c:	2b09      	cmp	r3, #9
 801cb7e:	f200 8089 	bhi.w	801cc94 <_dtoa_r+0x2f4>
 801cb82:	2b05      	cmp	r3, #5
 801cb84:	bfc5      	ittet	gt
 801cb86:	3b04      	subgt	r3, #4
 801cb88:	2500      	movgt	r5, #0
 801cb8a:	2501      	movle	r5, #1
 801cb8c:	9306      	strgt	r3, [sp, #24]
 801cb8e:	9b06      	ldr	r3, [sp, #24]
 801cb90:	3b02      	subs	r3, #2
 801cb92:	2b03      	cmp	r3, #3
 801cb94:	f200 8089 	bhi.w	801ccaa <_dtoa_r+0x30a>
 801cb98:	e8df f003 	tbb	[pc, r3]
 801cb9c:	5a393b2e 	.word	0x5a393b2e
 801cba0:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801cba4:	441d      	add	r5, r3
 801cba6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801cbaa:	2b20      	cmp	r3, #32
 801cbac:	bfc6      	itte	gt
 801cbae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801cbb2:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801cbb6:	f1c3 0320 	rsble	r3, r3, #32
 801cbba:	f105 35ff 	add.w	r5, r5, #4294967295
 801cbbe:	bfc5      	ittet	gt
 801cbc0:	fa0b f303 	lslgt.w	r3, fp, r3
 801cbc4:	fa26 f000 	lsrgt.w	r0, r6, r0
 801cbc8:	fa06 f003 	lslle.w	r0, r6, r3
 801cbcc:	4318      	orrgt	r0, r3
 801cbce:	f7e3 fc9d 	bl	800050c <__aeabi_ui2d>
 801cbd2:	2301      	movs	r3, #1
 801cbd4:	4606      	mov	r6, r0
 801cbd6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801cbda:	930e      	str	r3, [sp, #56]	; 0x38
 801cbdc:	e76b      	b.n	801cab6 <_dtoa_r+0x116>
 801cbde:	2301      	movs	r3, #1
 801cbe0:	e7b3      	b.n	801cb4a <_dtoa_r+0x1aa>
 801cbe2:	900b      	str	r0, [sp, #44]	; 0x2c
 801cbe4:	e7b2      	b.n	801cb4c <_dtoa_r+0x1ac>
 801cbe6:	9b04      	ldr	r3, [sp, #16]
 801cbe8:	9a00      	ldr	r2, [sp, #0]
 801cbea:	1a9b      	subs	r3, r3, r2
 801cbec:	9304      	str	r3, [sp, #16]
 801cbee:	4253      	negs	r3, r2
 801cbf0:	9307      	str	r3, [sp, #28]
 801cbf2:	2300      	movs	r3, #0
 801cbf4:	930a      	str	r3, [sp, #40]	; 0x28
 801cbf6:	e7c0      	b.n	801cb7a <_dtoa_r+0x1da>
 801cbf8:	2300      	movs	r3, #0
 801cbfa:	9308      	str	r3, [sp, #32]
 801cbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	dc56      	bgt.n	801ccb0 <_dtoa_r+0x310>
 801cc02:	2301      	movs	r3, #1
 801cc04:	461a      	mov	r2, r3
 801cc06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801cc0a:	9209      	str	r2, [sp, #36]	; 0x24
 801cc0c:	e00c      	b.n	801cc28 <_dtoa_r+0x288>
 801cc0e:	2301      	movs	r3, #1
 801cc10:	e7f3      	b.n	801cbfa <_dtoa_r+0x25a>
 801cc12:	2300      	movs	r3, #0
 801cc14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cc16:	9308      	str	r3, [sp, #32]
 801cc18:	9b00      	ldr	r3, [sp, #0]
 801cc1a:	4413      	add	r3, r2
 801cc1c:	9302      	str	r3, [sp, #8]
 801cc1e:	3301      	adds	r3, #1
 801cc20:	2b01      	cmp	r3, #1
 801cc22:	9303      	str	r3, [sp, #12]
 801cc24:	bfb8      	it	lt
 801cc26:	2301      	movlt	r3, #1
 801cc28:	2200      	movs	r2, #0
 801cc2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cc2c:	6042      	str	r2, [r0, #4]
 801cc2e:	2204      	movs	r2, #4
 801cc30:	f102 0614 	add.w	r6, r2, #20
 801cc34:	6841      	ldr	r1, [r0, #4]
 801cc36:	429e      	cmp	r6, r3
 801cc38:	d93e      	bls.n	801ccb8 <_dtoa_r+0x318>
 801cc3a:	4620      	mov	r0, r4
 801cc3c:	f001 f83a 	bl	801dcb4 <_Balloc>
 801cc40:	9001      	str	r0, [sp, #4]
 801cc42:	2800      	cmp	r0, #0
 801cc44:	d13c      	bne.n	801ccc0 <_dtoa_r+0x320>
 801cc46:	4b12      	ldr	r3, [pc, #72]	; (801cc90 <_dtoa_r+0x2f0>)
 801cc48:	4602      	mov	r2, r0
 801cc4a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801cc4e:	e6c1      	b.n	801c9d4 <_dtoa_r+0x34>
 801cc50:	2301      	movs	r3, #1
 801cc52:	e7df      	b.n	801cc14 <_dtoa_r+0x274>
 801cc54:	f3af 8000 	nop.w
 801cc58:	636f4361 	.word	0x636f4361
 801cc5c:	3fd287a7 	.word	0x3fd287a7
 801cc60:	8b60c8b3 	.word	0x8b60c8b3
 801cc64:	3fc68a28 	.word	0x3fc68a28
 801cc68:	509f79fb 	.word	0x509f79fb
 801cc6c:	3fd34413 	.word	0x3fd34413
 801cc70:	08074836 	.word	0x08074836
 801cc74:	0807484d 	.word	0x0807484d
 801cc78:	7ff00000 	.word	0x7ff00000
 801cc7c:	08074832 	.word	0x08074832
 801cc80:	08074829 	.word	0x08074829
 801cc84:	080746a9 	.word	0x080746a9
 801cc88:	3ff80000 	.word	0x3ff80000
 801cc8c:	080749b8 	.word	0x080749b8
 801cc90:	080748a8 	.word	0x080748a8
 801cc94:	2501      	movs	r5, #1
 801cc96:	2300      	movs	r3, #0
 801cc98:	9508      	str	r5, [sp, #32]
 801cc9a:	9306      	str	r3, [sp, #24]
 801cc9c:	f04f 33ff 	mov.w	r3, #4294967295
 801cca0:	2200      	movs	r2, #0
 801cca2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801cca6:	2312      	movs	r3, #18
 801cca8:	e7af      	b.n	801cc0a <_dtoa_r+0x26a>
 801ccaa:	2301      	movs	r3, #1
 801ccac:	9308      	str	r3, [sp, #32]
 801ccae:	e7f5      	b.n	801cc9c <_dtoa_r+0x2fc>
 801ccb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ccb6:	e7b7      	b.n	801cc28 <_dtoa_r+0x288>
 801ccb8:	3101      	adds	r1, #1
 801ccba:	0052      	lsls	r2, r2, #1
 801ccbc:	6041      	str	r1, [r0, #4]
 801ccbe:	e7b7      	b.n	801cc30 <_dtoa_r+0x290>
 801ccc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ccc2:	9a01      	ldr	r2, [sp, #4]
 801ccc4:	601a      	str	r2, [r3, #0]
 801ccc6:	9b03      	ldr	r3, [sp, #12]
 801ccc8:	2b0e      	cmp	r3, #14
 801ccca:	f200 809d 	bhi.w	801ce08 <_dtoa_r+0x468>
 801ccce:	2d00      	cmp	r5, #0
 801ccd0:	f000 809a 	beq.w	801ce08 <_dtoa_r+0x468>
 801ccd4:	9b00      	ldr	r3, [sp, #0]
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	dd32      	ble.n	801cd40 <_dtoa_r+0x3a0>
 801ccda:	f003 030f 	and.w	r3, r3, #15
 801ccde:	4ab6      	ldr	r2, [pc, #728]	; (801cfb8 <_dtoa_r+0x618>)
 801cce0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801cce4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cce8:	9b00      	ldr	r3, [sp, #0]
 801ccea:	05d8      	lsls	r0, r3, #23
 801ccec:	ea4f 1723 	mov.w	r7, r3, asr #4
 801ccf0:	d516      	bpl.n	801cd20 <_dtoa_r+0x380>
 801ccf2:	4bb2      	ldr	r3, [pc, #712]	; (801cfbc <_dtoa_r+0x61c>)
 801ccf4:	f007 070f 	and.w	r7, r7, #15
 801ccf8:	2503      	movs	r5, #3
 801ccfa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ccfe:	ec51 0b19 	vmov	r0, r1, d9
 801cd02:	f7e3 fda7 	bl	8000854 <__aeabi_ddiv>
 801cd06:	4682      	mov	sl, r0
 801cd08:	468b      	mov	fp, r1
 801cd0a:	4eac      	ldr	r6, [pc, #688]	; (801cfbc <_dtoa_r+0x61c>)
 801cd0c:	b957      	cbnz	r7, 801cd24 <_dtoa_r+0x384>
 801cd0e:	4642      	mov	r2, r8
 801cd10:	464b      	mov	r3, r9
 801cd12:	4650      	mov	r0, sl
 801cd14:	4659      	mov	r1, fp
 801cd16:	f7e3 fd9d 	bl	8000854 <__aeabi_ddiv>
 801cd1a:	4682      	mov	sl, r0
 801cd1c:	468b      	mov	fp, r1
 801cd1e:	e028      	b.n	801cd72 <_dtoa_r+0x3d2>
 801cd20:	2502      	movs	r5, #2
 801cd22:	e7f2      	b.n	801cd0a <_dtoa_r+0x36a>
 801cd24:	07f9      	lsls	r1, r7, #31
 801cd26:	d508      	bpl.n	801cd3a <_dtoa_r+0x39a>
 801cd28:	4640      	mov	r0, r8
 801cd2a:	4649      	mov	r1, r9
 801cd2c:	3501      	adds	r5, #1
 801cd2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 801cd32:	f7e3 fc65 	bl	8000600 <__aeabi_dmul>
 801cd36:	4680      	mov	r8, r0
 801cd38:	4689      	mov	r9, r1
 801cd3a:	107f      	asrs	r7, r7, #1
 801cd3c:	3608      	adds	r6, #8
 801cd3e:	e7e5      	b.n	801cd0c <_dtoa_r+0x36c>
 801cd40:	f000 809b 	beq.w	801ce7a <_dtoa_r+0x4da>
 801cd44:	9b00      	ldr	r3, [sp, #0]
 801cd46:	2502      	movs	r5, #2
 801cd48:	4f9c      	ldr	r7, [pc, #624]	; (801cfbc <_dtoa_r+0x61c>)
 801cd4a:	425e      	negs	r6, r3
 801cd4c:	4b9a      	ldr	r3, [pc, #616]	; (801cfb8 <_dtoa_r+0x618>)
 801cd4e:	f006 020f 	and.w	r2, r6, #15
 801cd52:	1136      	asrs	r6, r6, #4
 801cd54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cd58:	ec51 0b19 	vmov	r0, r1, d9
 801cd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd60:	f7e3 fc4e 	bl	8000600 <__aeabi_dmul>
 801cd64:	2300      	movs	r3, #0
 801cd66:	4682      	mov	sl, r0
 801cd68:	468b      	mov	fp, r1
 801cd6a:	2e00      	cmp	r6, #0
 801cd6c:	d17a      	bne.n	801ce64 <_dtoa_r+0x4c4>
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d1d3      	bne.n	801cd1a <_dtoa_r+0x37a>
 801cd72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	f000 8082 	beq.w	801ce7e <_dtoa_r+0x4de>
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	4b90      	ldr	r3, [pc, #576]	; (801cfc0 <_dtoa_r+0x620>)
 801cd7e:	4650      	mov	r0, sl
 801cd80:	4659      	mov	r1, fp
 801cd82:	f7e3 feaf 	bl	8000ae4 <__aeabi_dcmplt>
 801cd86:	2800      	cmp	r0, #0
 801cd88:	d079      	beq.n	801ce7e <_dtoa_r+0x4de>
 801cd8a:	9b03      	ldr	r3, [sp, #12]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d076      	beq.n	801ce7e <_dtoa_r+0x4de>
 801cd90:	9b02      	ldr	r3, [sp, #8]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	dd36      	ble.n	801ce04 <_dtoa_r+0x464>
 801cd96:	9b00      	ldr	r3, [sp, #0]
 801cd98:	4650      	mov	r0, sl
 801cd9a:	4659      	mov	r1, fp
 801cd9c:	2200      	movs	r2, #0
 801cd9e:	1e5f      	subs	r7, r3, #1
 801cda0:	4b88      	ldr	r3, [pc, #544]	; (801cfc4 <_dtoa_r+0x624>)
 801cda2:	f7e3 fc2d 	bl	8000600 <__aeabi_dmul>
 801cda6:	3501      	adds	r5, #1
 801cda8:	4682      	mov	sl, r0
 801cdaa:	468b      	mov	fp, r1
 801cdac:	9e02      	ldr	r6, [sp, #8]
 801cdae:	4628      	mov	r0, r5
 801cdb0:	46d0      	mov	r8, sl
 801cdb2:	f7e3 fbbb 	bl	800052c <__aeabi_i2d>
 801cdb6:	4652      	mov	r2, sl
 801cdb8:	465b      	mov	r3, fp
 801cdba:	46d9      	mov	r9, fp
 801cdbc:	f7e3 fc20 	bl	8000600 <__aeabi_dmul>
 801cdc0:	2200      	movs	r2, #0
 801cdc2:	4b81      	ldr	r3, [pc, #516]	; (801cfc8 <_dtoa_r+0x628>)
 801cdc4:	f7e3 fa66 	bl	8000294 <__adddf3>
 801cdc8:	4682      	mov	sl, r0
 801cdca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801cdce:	2e00      	cmp	r6, #0
 801cdd0:	d158      	bne.n	801ce84 <_dtoa_r+0x4e4>
 801cdd2:	2200      	movs	r2, #0
 801cdd4:	4b7d      	ldr	r3, [pc, #500]	; (801cfcc <_dtoa_r+0x62c>)
 801cdd6:	4640      	mov	r0, r8
 801cdd8:	4649      	mov	r1, r9
 801cdda:	f7e3 fa59 	bl	8000290 <__aeabi_dsub>
 801cdde:	4652      	mov	r2, sl
 801cde0:	465b      	mov	r3, fp
 801cde2:	4680      	mov	r8, r0
 801cde4:	4689      	mov	r9, r1
 801cde6:	f7e3 fe9b 	bl	8000b20 <__aeabi_dcmpgt>
 801cdea:	2800      	cmp	r0, #0
 801cdec:	f040 8293 	bne.w	801d316 <_dtoa_r+0x976>
 801cdf0:	4652      	mov	r2, sl
 801cdf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801cdf6:	4640      	mov	r0, r8
 801cdf8:	4649      	mov	r1, r9
 801cdfa:	f7e3 fe73 	bl	8000ae4 <__aeabi_dcmplt>
 801cdfe:	2800      	cmp	r0, #0
 801ce00:	f040 8287 	bne.w	801d312 <_dtoa_r+0x972>
 801ce04:	ec5b ab19 	vmov	sl, fp, d9
 801ce08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	f2c0 8148 	blt.w	801d0a0 <_dtoa_r+0x700>
 801ce10:	9a00      	ldr	r2, [sp, #0]
 801ce12:	2a0e      	cmp	r2, #14
 801ce14:	f300 8144 	bgt.w	801d0a0 <_dtoa_r+0x700>
 801ce18:	4b67      	ldr	r3, [pc, #412]	; (801cfb8 <_dtoa_r+0x618>)
 801ce1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ce1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ce22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	f280 80d5 	bge.w	801cfd4 <_dtoa_r+0x634>
 801ce2a:	9b03      	ldr	r3, [sp, #12]
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	f300 80d1 	bgt.w	801cfd4 <_dtoa_r+0x634>
 801ce32:	f040 826d 	bne.w	801d310 <_dtoa_r+0x970>
 801ce36:	2200      	movs	r2, #0
 801ce38:	4b64      	ldr	r3, [pc, #400]	; (801cfcc <_dtoa_r+0x62c>)
 801ce3a:	4640      	mov	r0, r8
 801ce3c:	4649      	mov	r1, r9
 801ce3e:	f7e3 fbdf 	bl	8000600 <__aeabi_dmul>
 801ce42:	4652      	mov	r2, sl
 801ce44:	465b      	mov	r3, fp
 801ce46:	f7e3 fe61 	bl	8000b0c <__aeabi_dcmpge>
 801ce4a:	9e03      	ldr	r6, [sp, #12]
 801ce4c:	4637      	mov	r7, r6
 801ce4e:	2800      	cmp	r0, #0
 801ce50:	f040 8243 	bne.w	801d2da <_dtoa_r+0x93a>
 801ce54:	2331      	movs	r3, #49	; 0x31
 801ce56:	9d01      	ldr	r5, [sp, #4]
 801ce58:	f805 3b01 	strb.w	r3, [r5], #1
 801ce5c:	9b00      	ldr	r3, [sp, #0]
 801ce5e:	3301      	adds	r3, #1
 801ce60:	9300      	str	r3, [sp, #0]
 801ce62:	e23e      	b.n	801d2e2 <_dtoa_r+0x942>
 801ce64:	07f2      	lsls	r2, r6, #31
 801ce66:	d505      	bpl.n	801ce74 <_dtoa_r+0x4d4>
 801ce68:	3501      	adds	r5, #1
 801ce6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ce6e:	f7e3 fbc7 	bl	8000600 <__aeabi_dmul>
 801ce72:	2301      	movs	r3, #1
 801ce74:	1076      	asrs	r6, r6, #1
 801ce76:	3708      	adds	r7, #8
 801ce78:	e777      	b.n	801cd6a <_dtoa_r+0x3ca>
 801ce7a:	2502      	movs	r5, #2
 801ce7c:	e779      	b.n	801cd72 <_dtoa_r+0x3d2>
 801ce7e:	9f00      	ldr	r7, [sp, #0]
 801ce80:	9e03      	ldr	r6, [sp, #12]
 801ce82:	e794      	b.n	801cdae <_dtoa_r+0x40e>
 801ce84:	9901      	ldr	r1, [sp, #4]
 801ce86:	4b4c      	ldr	r3, [pc, #304]	; (801cfb8 <_dtoa_r+0x618>)
 801ce88:	4431      	add	r1, r6
 801ce8a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801ce8e:	910d      	str	r1, [sp, #52]	; 0x34
 801ce90:	9908      	ldr	r1, [sp, #32]
 801ce92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ce96:	2900      	cmp	r1, #0
 801ce98:	d043      	beq.n	801cf22 <_dtoa_r+0x582>
 801ce9a:	2000      	movs	r0, #0
 801ce9c:	494c      	ldr	r1, [pc, #304]	; (801cfd0 <_dtoa_r+0x630>)
 801ce9e:	f7e3 fcd9 	bl	8000854 <__aeabi_ddiv>
 801cea2:	4652      	mov	r2, sl
 801cea4:	465b      	mov	r3, fp
 801cea6:	f7e3 f9f3 	bl	8000290 <__aeabi_dsub>
 801ceaa:	9d01      	ldr	r5, [sp, #4]
 801ceac:	4682      	mov	sl, r0
 801ceae:	468b      	mov	fp, r1
 801ceb0:	4649      	mov	r1, r9
 801ceb2:	4640      	mov	r0, r8
 801ceb4:	f7e3 fe54 	bl	8000b60 <__aeabi_d2iz>
 801ceb8:	4606      	mov	r6, r0
 801ceba:	f7e3 fb37 	bl	800052c <__aeabi_i2d>
 801cebe:	4602      	mov	r2, r0
 801cec0:	3630      	adds	r6, #48	; 0x30
 801cec2:	460b      	mov	r3, r1
 801cec4:	4640      	mov	r0, r8
 801cec6:	4649      	mov	r1, r9
 801cec8:	f7e3 f9e2 	bl	8000290 <__aeabi_dsub>
 801cecc:	4652      	mov	r2, sl
 801cece:	465b      	mov	r3, fp
 801ced0:	f805 6b01 	strb.w	r6, [r5], #1
 801ced4:	4680      	mov	r8, r0
 801ced6:	4689      	mov	r9, r1
 801ced8:	f7e3 fe04 	bl	8000ae4 <__aeabi_dcmplt>
 801cedc:	2800      	cmp	r0, #0
 801cede:	d163      	bne.n	801cfa8 <_dtoa_r+0x608>
 801cee0:	4642      	mov	r2, r8
 801cee2:	464b      	mov	r3, r9
 801cee4:	2000      	movs	r0, #0
 801cee6:	4936      	ldr	r1, [pc, #216]	; (801cfc0 <_dtoa_r+0x620>)
 801cee8:	f7e3 f9d2 	bl	8000290 <__aeabi_dsub>
 801ceec:	4652      	mov	r2, sl
 801ceee:	465b      	mov	r3, fp
 801cef0:	f7e3 fdf8 	bl	8000ae4 <__aeabi_dcmplt>
 801cef4:	2800      	cmp	r0, #0
 801cef6:	f040 80b5 	bne.w	801d064 <_dtoa_r+0x6c4>
 801cefa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cefc:	429d      	cmp	r5, r3
 801cefe:	d081      	beq.n	801ce04 <_dtoa_r+0x464>
 801cf00:	2200      	movs	r2, #0
 801cf02:	4b30      	ldr	r3, [pc, #192]	; (801cfc4 <_dtoa_r+0x624>)
 801cf04:	4650      	mov	r0, sl
 801cf06:	4659      	mov	r1, fp
 801cf08:	f7e3 fb7a 	bl	8000600 <__aeabi_dmul>
 801cf0c:	2200      	movs	r2, #0
 801cf0e:	4682      	mov	sl, r0
 801cf10:	468b      	mov	fp, r1
 801cf12:	4640      	mov	r0, r8
 801cf14:	4649      	mov	r1, r9
 801cf16:	4b2b      	ldr	r3, [pc, #172]	; (801cfc4 <_dtoa_r+0x624>)
 801cf18:	f7e3 fb72 	bl	8000600 <__aeabi_dmul>
 801cf1c:	4680      	mov	r8, r0
 801cf1e:	4689      	mov	r9, r1
 801cf20:	e7c6      	b.n	801ceb0 <_dtoa_r+0x510>
 801cf22:	4650      	mov	r0, sl
 801cf24:	4659      	mov	r1, fp
 801cf26:	f7e3 fb6b 	bl	8000600 <__aeabi_dmul>
 801cf2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf2c:	4682      	mov	sl, r0
 801cf2e:	468b      	mov	fp, r1
 801cf30:	9d01      	ldr	r5, [sp, #4]
 801cf32:	930f      	str	r3, [sp, #60]	; 0x3c
 801cf34:	4649      	mov	r1, r9
 801cf36:	4640      	mov	r0, r8
 801cf38:	f7e3 fe12 	bl	8000b60 <__aeabi_d2iz>
 801cf3c:	4606      	mov	r6, r0
 801cf3e:	f7e3 faf5 	bl	800052c <__aeabi_i2d>
 801cf42:	4602      	mov	r2, r0
 801cf44:	460b      	mov	r3, r1
 801cf46:	4640      	mov	r0, r8
 801cf48:	4649      	mov	r1, r9
 801cf4a:	3630      	adds	r6, #48	; 0x30
 801cf4c:	f7e3 f9a0 	bl	8000290 <__aeabi_dsub>
 801cf50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf52:	f805 6b01 	strb.w	r6, [r5], #1
 801cf56:	4680      	mov	r8, r0
 801cf58:	429d      	cmp	r5, r3
 801cf5a:	4689      	mov	r9, r1
 801cf5c:	f04f 0200 	mov.w	r2, #0
 801cf60:	d124      	bne.n	801cfac <_dtoa_r+0x60c>
 801cf62:	4b1b      	ldr	r3, [pc, #108]	; (801cfd0 <_dtoa_r+0x630>)
 801cf64:	4650      	mov	r0, sl
 801cf66:	4659      	mov	r1, fp
 801cf68:	f7e3 f994 	bl	8000294 <__adddf3>
 801cf6c:	4602      	mov	r2, r0
 801cf6e:	460b      	mov	r3, r1
 801cf70:	4640      	mov	r0, r8
 801cf72:	4649      	mov	r1, r9
 801cf74:	f7e3 fdd4 	bl	8000b20 <__aeabi_dcmpgt>
 801cf78:	2800      	cmp	r0, #0
 801cf7a:	d173      	bne.n	801d064 <_dtoa_r+0x6c4>
 801cf7c:	4652      	mov	r2, sl
 801cf7e:	465b      	mov	r3, fp
 801cf80:	2000      	movs	r0, #0
 801cf82:	4913      	ldr	r1, [pc, #76]	; (801cfd0 <_dtoa_r+0x630>)
 801cf84:	f7e3 f984 	bl	8000290 <__aeabi_dsub>
 801cf88:	4602      	mov	r2, r0
 801cf8a:	460b      	mov	r3, r1
 801cf8c:	4640      	mov	r0, r8
 801cf8e:	4649      	mov	r1, r9
 801cf90:	f7e3 fda8 	bl	8000ae4 <__aeabi_dcmplt>
 801cf94:	2800      	cmp	r0, #0
 801cf96:	f43f af35 	beq.w	801ce04 <_dtoa_r+0x464>
 801cf9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801cf9c:	1e6b      	subs	r3, r5, #1
 801cf9e:	930f      	str	r3, [sp, #60]	; 0x3c
 801cfa0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cfa4:	2b30      	cmp	r3, #48	; 0x30
 801cfa6:	d0f8      	beq.n	801cf9a <_dtoa_r+0x5fa>
 801cfa8:	9700      	str	r7, [sp, #0]
 801cfaa:	e049      	b.n	801d040 <_dtoa_r+0x6a0>
 801cfac:	4b05      	ldr	r3, [pc, #20]	; (801cfc4 <_dtoa_r+0x624>)
 801cfae:	f7e3 fb27 	bl	8000600 <__aeabi_dmul>
 801cfb2:	4680      	mov	r8, r0
 801cfb4:	4689      	mov	r9, r1
 801cfb6:	e7bd      	b.n	801cf34 <_dtoa_r+0x594>
 801cfb8:	080749b8 	.word	0x080749b8
 801cfbc:	08074990 	.word	0x08074990
 801cfc0:	3ff00000 	.word	0x3ff00000
 801cfc4:	40240000 	.word	0x40240000
 801cfc8:	401c0000 	.word	0x401c0000
 801cfcc:	40140000 	.word	0x40140000
 801cfd0:	3fe00000 	.word	0x3fe00000
 801cfd4:	4656      	mov	r6, sl
 801cfd6:	465f      	mov	r7, fp
 801cfd8:	9d01      	ldr	r5, [sp, #4]
 801cfda:	4642      	mov	r2, r8
 801cfdc:	464b      	mov	r3, r9
 801cfde:	4630      	mov	r0, r6
 801cfe0:	4639      	mov	r1, r7
 801cfe2:	f7e3 fc37 	bl	8000854 <__aeabi_ddiv>
 801cfe6:	f7e3 fdbb 	bl	8000b60 <__aeabi_d2iz>
 801cfea:	4682      	mov	sl, r0
 801cfec:	f7e3 fa9e 	bl	800052c <__aeabi_i2d>
 801cff0:	4642      	mov	r2, r8
 801cff2:	464b      	mov	r3, r9
 801cff4:	f7e3 fb04 	bl	8000600 <__aeabi_dmul>
 801cff8:	4602      	mov	r2, r0
 801cffa:	4630      	mov	r0, r6
 801cffc:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801d000:	460b      	mov	r3, r1
 801d002:	4639      	mov	r1, r7
 801d004:	f7e3 f944 	bl	8000290 <__aeabi_dsub>
 801d008:	f805 6b01 	strb.w	r6, [r5], #1
 801d00c:	9e01      	ldr	r6, [sp, #4]
 801d00e:	4602      	mov	r2, r0
 801d010:	9f03      	ldr	r7, [sp, #12]
 801d012:	460b      	mov	r3, r1
 801d014:	1bae      	subs	r6, r5, r6
 801d016:	42b7      	cmp	r7, r6
 801d018:	d135      	bne.n	801d086 <_dtoa_r+0x6e6>
 801d01a:	f7e3 f93b 	bl	8000294 <__adddf3>
 801d01e:	4642      	mov	r2, r8
 801d020:	464b      	mov	r3, r9
 801d022:	4606      	mov	r6, r0
 801d024:	460f      	mov	r7, r1
 801d026:	f7e3 fd7b 	bl	8000b20 <__aeabi_dcmpgt>
 801d02a:	b9d0      	cbnz	r0, 801d062 <_dtoa_r+0x6c2>
 801d02c:	4642      	mov	r2, r8
 801d02e:	464b      	mov	r3, r9
 801d030:	4630      	mov	r0, r6
 801d032:	4639      	mov	r1, r7
 801d034:	f7e3 fd4c 	bl	8000ad0 <__aeabi_dcmpeq>
 801d038:	b110      	cbz	r0, 801d040 <_dtoa_r+0x6a0>
 801d03a:	f01a 0f01 	tst.w	sl, #1
 801d03e:	d110      	bne.n	801d062 <_dtoa_r+0x6c2>
 801d040:	4620      	mov	r0, r4
 801d042:	ee18 1a10 	vmov	r1, s16
 801d046:	f000 fe75 	bl	801dd34 <_Bfree>
 801d04a:	2300      	movs	r3, #0
 801d04c:	9800      	ldr	r0, [sp, #0]
 801d04e:	702b      	strb	r3, [r5, #0]
 801d050:	3001      	adds	r0, #1
 801d052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d054:	6018      	str	r0, [r3, #0]
 801d056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d058:	2b00      	cmp	r3, #0
 801d05a:	f43f acf1 	beq.w	801ca40 <_dtoa_r+0xa0>
 801d05e:	601d      	str	r5, [r3, #0]
 801d060:	e4ee      	b.n	801ca40 <_dtoa_r+0xa0>
 801d062:	9f00      	ldr	r7, [sp, #0]
 801d064:	462b      	mov	r3, r5
 801d066:	461d      	mov	r5, r3
 801d068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d06c:	2a39      	cmp	r2, #57	; 0x39
 801d06e:	d106      	bne.n	801d07e <_dtoa_r+0x6de>
 801d070:	9a01      	ldr	r2, [sp, #4]
 801d072:	429a      	cmp	r2, r3
 801d074:	d1f7      	bne.n	801d066 <_dtoa_r+0x6c6>
 801d076:	2230      	movs	r2, #48	; 0x30
 801d078:	9901      	ldr	r1, [sp, #4]
 801d07a:	3701      	adds	r7, #1
 801d07c:	700a      	strb	r2, [r1, #0]
 801d07e:	781a      	ldrb	r2, [r3, #0]
 801d080:	3201      	adds	r2, #1
 801d082:	701a      	strb	r2, [r3, #0]
 801d084:	e790      	b.n	801cfa8 <_dtoa_r+0x608>
 801d086:	2200      	movs	r2, #0
 801d088:	4ba4      	ldr	r3, [pc, #656]	; (801d31c <_dtoa_r+0x97c>)
 801d08a:	f7e3 fab9 	bl	8000600 <__aeabi_dmul>
 801d08e:	2200      	movs	r2, #0
 801d090:	2300      	movs	r3, #0
 801d092:	4606      	mov	r6, r0
 801d094:	460f      	mov	r7, r1
 801d096:	f7e3 fd1b 	bl	8000ad0 <__aeabi_dcmpeq>
 801d09a:	2800      	cmp	r0, #0
 801d09c:	d09d      	beq.n	801cfda <_dtoa_r+0x63a>
 801d09e:	e7cf      	b.n	801d040 <_dtoa_r+0x6a0>
 801d0a0:	9a08      	ldr	r2, [sp, #32]
 801d0a2:	2a00      	cmp	r2, #0
 801d0a4:	f000 80d5 	beq.w	801d252 <_dtoa_r+0x8b2>
 801d0a8:	9a06      	ldr	r2, [sp, #24]
 801d0aa:	2a01      	cmp	r2, #1
 801d0ac:	f300 80b9 	bgt.w	801d222 <_dtoa_r+0x882>
 801d0b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d0b2:	2a00      	cmp	r2, #0
 801d0b4:	f000 80b1 	beq.w	801d21a <_dtoa_r+0x87a>
 801d0b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d0bc:	9e07      	ldr	r6, [sp, #28]
 801d0be:	9d04      	ldr	r5, [sp, #16]
 801d0c0:	9a04      	ldr	r2, [sp, #16]
 801d0c2:	2101      	movs	r1, #1
 801d0c4:	4620      	mov	r0, r4
 801d0c6:	441a      	add	r2, r3
 801d0c8:	9204      	str	r2, [sp, #16]
 801d0ca:	9a05      	ldr	r2, [sp, #20]
 801d0cc:	441a      	add	r2, r3
 801d0ce:	9205      	str	r2, [sp, #20]
 801d0d0:	f000 ff34 	bl	801df3c <__i2b>
 801d0d4:	4607      	mov	r7, r0
 801d0d6:	2d00      	cmp	r5, #0
 801d0d8:	dd0c      	ble.n	801d0f4 <_dtoa_r+0x754>
 801d0da:	9b05      	ldr	r3, [sp, #20]
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	dd09      	ble.n	801d0f4 <_dtoa_r+0x754>
 801d0e0:	42ab      	cmp	r3, r5
 801d0e2:	9a04      	ldr	r2, [sp, #16]
 801d0e4:	bfa8      	it	ge
 801d0e6:	462b      	movge	r3, r5
 801d0e8:	1ad2      	subs	r2, r2, r3
 801d0ea:	1aed      	subs	r5, r5, r3
 801d0ec:	9204      	str	r2, [sp, #16]
 801d0ee:	9a05      	ldr	r2, [sp, #20]
 801d0f0:	1ad3      	subs	r3, r2, r3
 801d0f2:	9305      	str	r3, [sp, #20]
 801d0f4:	9b07      	ldr	r3, [sp, #28]
 801d0f6:	b31b      	cbz	r3, 801d140 <_dtoa_r+0x7a0>
 801d0f8:	9b08      	ldr	r3, [sp, #32]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	f000 80ad 	beq.w	801d25a <_dtoa_r+0x8ba>
 801d100:	2e00      	cmp	r6, #0
 801d102:	dd13      	ble.n	801d12c <_dtoa_r+0x78c>
 801d104:	4639      	mov	r1, r7
 801d106:	4632      	mov	r2, r6
 801d108:	4620      	mov	r0, r4
 801d10a:	f000 ffd5 	bl	801e0b8 <__pow5mult>
 801d10e:	ee18 2a10 	vmov	r2, s16
 801d112:	4601      	mov	r1, r0
 801d114:	4607      	mov	r7, r0
 801d116:	4620      	mov	r0, r4
 801d118:	f000 ff26 	bl	801df68 <__multiply>
 801d11c:	4680      	mov	r8, r0
 801d11e:	ee18 1a10 	vmov	r1, s16
 801d122:	4620      	mov	r0, r4
 801d124:	ee08 8a10 	vmov	s16, r8
 801d128:	f000 fe04 	bl	801dd34 <_Bfree>
 801d12c:	9b07      	ldr	r3, [sp, #28]
 801d12e:	1b9a      	subs	r2, r3, r6
 801d130:	d006      	beq.n	801d140 <_dtoa_r+0x7a0>
 801d132:	ee18 1a10 	vmov	r1, s16
 801d136:	4620      	mov	r0, r4
 801d138:	f000 ffbe 	bl	801e0b8 <__pow5mult>
 801d13c:	ee08 0a10 	vmov	s16, r0
 801d140:	2101      	movs	r1, #1
 801d142:	4620      	mov	r0, r4
 801d144:	f000 fefa 	bl	801df3c <__i2b>
 801d148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d14a:	4606      	mov	r6, r0
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	f340 8086 	ble.w	801d25e <_dtoa_r+0x8be>
 801d152:	461a      	mov	r2, r3
 801d154:	4601      	mov	r1, r0
 801d156:	4620      	mov	r0, r4
 801d158:	f000 ffae 	bl	801e0b8 <__pow5mult>
 801d15c:	9b06      	ldr	r3, [sp, #24]
 801d15e:	4606      	mov	r6, r0
 801d160:	2b01      	cmp	r3, #1
 801d162:	dd7f      	ble.n	801d264 <_dtoa_r+0x8c4>
 801d164:	f04f 0800 	mov.w	r8, #0
 801d168:	6933      	ldr	r3, [r6, #16]
 801d16a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d16e:	6918      	ldr	r0, [r3, #16]
 801d170:	f000 fe94 	bl	801de9c <__hi0bits>
 801d174:	f1c0 0020 	rsb	r0, r0, #32
 801d178:	9b05      	ldr	r3, [sp, #20]
 801d17a:	4418      	add	r0, r3
 801d17c:	f010 001f 	ands.w	r0, r0, #31
 801d180:	f000 8091 	beq.w	801d2a6 <_dtoa_r+0x906>
 801d184:	f1c0 0320 	rsb	r3, r0, #32
 801d188:	2b04      	cmp	r3, #4
 801d18a:	f340 8089 	ble.w	801d2a0 <_dtoa_r+0x900>
 801d18e:	f1c0 001c 	rsb	r0, r0, #28
 801d192:	9b04      	ldr	r3, [sp, #16]
 801d194:	4405      	add	r5, r0
 801d196:	4403      	add	r3, r0
 801d198:	9304      	str	r3, [sp, #16]
 801d19a:	9b05      	ldr	r3, [sp, #20]
 801d19c:	4403      	add	r3, r0
 801d19e:	9305      	str	r3, [sp, #20]
 801d1a0:	9b04      	ldr	r3, [sp, #16]
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	dd07      	ble.n	801d1b6 <_dtoa_r+0x816>
 801d1a6:	ee18 1a10 	vmov	r1, s16
 801d1aa:	461a      	mov	r2, r3
 801d1ac:	4620      	mov	r0, r4
 801d1ae:	f000 ffdd 	bl	801e16c <__lshift>
 801d1b2:	ee08 0a10 	vmov	s16, r0
 801d1b6:	9b05      	ldr	r3, [sp, #20]
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	dd05      	ble.n	801d1c8 <_dtoa_r+0x828>
 801d1bc:	4631      	mov	r1, r6
 801d1be:	461a      	mov	r2, r3
 801d1c0:	4620      	mov	r0, r4
 801d1c2:	f000 ffd3 	bl	801e16c <__lshift>
 801d1c6:	4606      	mov	r6, r0
 801d1c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d06d      	beq.n	801d2aa <_dtoa_r+0x90a>
 801d1ce:	4631      	mov	r1, r6
 801d1d0:	ee18 0a10 	vmov	r0, s16
 801d1d4:	f001 f83a 	bl	801e24c <__mcmp>
 801d1d8:	2800      	cmp	r0, #0
 801d1da:	da66      	bge.n	801d2aa <_dtoa_r+0x90a>
 801d1dc:	9b00      	ldr	r3, [sp, #0]
 801d1de:	ee18 1a10 	vmov	r1, s16
 801d1e2:	220a      	movs	r2, #10
 801d1e4:	4620      	mov	r0, r4
 801d1e6:	3b01      	subs	r3, #1
 801d1e8:	9300      	str	r3, [sp, #0]
 801d1ea:	2300      	movs	r3, #0
 801d1ec:	f000 fdc4 	bl	801dd78 <__multadd>
 801d1f0:	9b08      	ldr	r3, [sp, #32]
 801d1f2:	ee08 0a10 	vmov	s16, r0
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	f000 81af 	beq.w	801d55a <_dtoa_r+0xbba>
 801d1fc:	2300      	movs	r3, #0
 801d1fe:	4639      	mov	r1, r7
 801d200:	220a      	movs	r2, #10
 801d202:	4620      	mov	r0, r4
 801d204:	f000 fdb8 	bl	801dd78 <__multadd>
 801d208:	9b02      	ldr	r3, [sp, #8]
 801d20a:	4607      	mov	r7, r0
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	f300 808d 	bgt.w	801d32c <_dtoa_r+0x98c>
 801d212:	9b06      	ldr	r3, [sp, #24]
 801d214:	2b02      	cmp	r3, #2
 801d216:	dc50      	bgt.n	801d2ba <_dtoa_r+0x91a>
 801d218:	e088      	b.n	801d32c <_dtoa_r+0x98c>
 801d21a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d21c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d220:	e74c      	b.n	801d0bc <_dtoa_r+0x71c>
 801d222:	9b03      	ldr	r3, [sp, #12]
 801d224:	1e5e      	subs	r6, r3, #1
 801d226:	9b07      	ldr	r3, [sp, #28]
 801d228:	42b3      	cmp	r3, r6
 801d22a:	bfb7      	itett	lt
 801d22c:	9b07      	ldrlt	r3, [sp, #28]
 801d22e:	1b9e      	subge	r6, r3, r6
 801d230:	9607      	strlt	r6, [sp, #28]
 801d232:	1af2      	sublt	r2, r6, r3
 801d234:	bfbf      	itttt	lt
 801d236:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801d238:	2600      	movlt	r6, #0
 801d23a:	189b      	addlt	r3, r3, r2
 801d23c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801d23e:	9b03      	ldr	r3, [sp, #12]
 801d240:	2b00      	cmp	r3, #0
 801d242:	bfb7      	itett	lt
 801d244:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801d248:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801d24c:	1a9d      	sublt	r5, r3, r2
 801d24e:	2300      	movlt	r3, #0
 801d250:	e736      	b.n	801d0c0 <_dtoa_r+0x720>
 801d252:	9e07      	ldr	r6, [sp, #28]
 801d254:	9d04      	ldr	r5, [sp, #16]
 801d256:	9f08      	ldr	r7, [sp, #32]
 801d258:	e73d      	b.n	801d0d6 <_dtoa_r+0x736>
 801d25a:	9a07      	ldr	r2, [sp, #28]
 801d25c:	e769      	b.n	801d132 <_dtoa_r+0x792>
 801d25e:	9b06      	ldr	r3, [sp, #24]
 801d260:	2b01      	cmp	r3, #1
 801d262:	dc18      	bgt.n	801d296 <_dtoa_r+0x8f6>
 801d264:	f1ba 0f00 	cmp.w	sl, #0
 801d268:	d115      	bne.n	801d296 <_dtoa_r+0x8f6>
 801d26a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d26e:	b993      	cbnz	r3, 801d296 <_dtoa_r+0x8f6>
 801d270:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d274:	0d1b      	lsrs	r3, r3, #20
 801d276:	051b      	lsls	r3, r3, #20
 801d278:	b183      	cbz	r3, 801d29c <_dtoa_r+0x8fc>
 801d27a:	9b04      	ldr	r3, [sp, #16]
 801d27c:	f04f 0801 	mov.w	r8, #1
 801d280:	3301      	adds	r3, #1
 801d282:	9304      	str	r3, [sp, #16]
 801d284:	9b05      	ldr	r3, [sp, #20]
 801d286:	3301      	adds	r3, #1
 801d288:	9305      	str	r3, [sp, #20]
 801d28a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	f47f af6b 	bne.w	801d168 <_dtoa_r+0x7c8>
 801d292:	2001      	movs	r0, #1
 801d294:	e770      	b.n	801d178 <_dtoa_r+0x7d8>
 801d296:	f04f 0800 	mov.w	r8, #0
 801d29a:	e7f6      	b.n	801d28a <_dtoa_r+0x8ea>
 801d29c:	4698      	mov	r8, r3
 801d29e:	e7f4      	b.n	801d28a <_dtoa_r+0x8ea>
 801d2a0:	f43f af7e 	beq.w	801d1a0 <_dtoa_r+0x800>
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	301c      	adds	r0, #28
 801d2a8:	e773      	b.n	801d192 <_dtoa_r+0x7f2>
 801d2aa:	9b03      	ldr	r3, [sp, #12]
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	dc37      	bgt.n	801d320 <_dtoa_r+0x980>
 801d2b0:	9b06      	ldr	r3, [sp, #24]
 801d2b2:	2b02      	cmp	r3, #2
 801d2b4:	dd34      	ble.n	801d320 <_dtoa_r+0x980>
 801d2b6:	9b03      	ldr	r3, [sp, #12]
 801d2b8:	9302      	str	r3, [sp, #8]
 801d2ba:	9b02      	ldr	r3, [sp, #8]
 801d2bc:	b96b      	cbnz	r3, 801d2da <_dtoa_r+0x93a>
 801d2be:	4631      	mov	r1, r6
 801d2c0:	2205      	movs	r2, #5
 801d2c2:	4620      	mov	r0, r4
 801d2c4:	f000 fd58 	bl	801dd78 <__multadd>
 801d2c8:	4601      	mov	r1, r0
 801d2ca:	4606      	mov	r6, r0
 801d2cc:	ee18 0a10 	vmov	r0, s16
 801d2d0:	f000 ffbc 	bl	801e24c <__mcmp>
 801d2d4:	2800      	cmp	r0, #0
 801d2d6:	f73f adbd 	bgt.w	801ce54 <_dtoa_r+0x4b4>
 801d2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2dc:	9d01      	ldr	r5, [sp, #4]
 801d2de:	43db      	mvns	r3, r3
 801d2e0:	9300      	str	r3, [sp, #0]
 801d2e2:	f04f 0800 	mov.w	r8, #0
 801d2e6:	4631      	mov	r1, r6
 801d2e8:	4620      	mov	r0, r4
 801d2ea:	f000 fd23 	bl	801dd34 <_Bfree>
 801d2ee:	2f00      	cmp	r7, #0
 801d2f0:	f43f aea6 	beq.w	801d040 <_dtoa_r+0x6a0>
 801d2f4:	f1b8 0f00 	cmp.w	r8, #0
 801d2f8:	d005      	beq.n	801d306 <_dtoa_r+0x966>
 801d2fa:	45b8      	cmp	r8, r7
 801d2fc:	d003      	beq.n	801d306 <_dtoa_r+0x966>
 801d2fe:	4641      	mov	r1, r8
 801d300:	4620      	mov	r0, r4
 801d302:	f000 fd17 	bl	801dd34 <_Bfree>
 801d306:	4639      	mov	r1, r7
 801d308:	4620      	mov	r0, r4
 801d30a:	f000 fd13 	bl	801dd34 <_Bfree>
 801d30e:	e697      	b.n	801d040 <_dtoa_r+0x6a0>
 801d310:	2600      	movs	r6, #0
 801d312:	4637      	mov	r7, r6
 801d314:	e7e1      	b.n	801d2da <_dtoa_r+0x93a>
 801d316:	9700      	str	r7, [sp, #0]
 801d318:	4637      	mov	r7, r6
 801d31a:	e59b      	b.n	801ce54 <_dtoa_r+0x4b4>
 801d31c:	40240000 	.word	0x40240000
 801d320:	9b08      	ldr	r3, [sp, #32]
 801d322:	2b00      	cmp	r3, #0
 801d324:	f000 80ca 	beq.w	801d4bc <_dtoa_r+0xb1c>
 801d328:	9b03      	ldr	r3, [sp, #12]
 801d32a:	9302      	str	r3, [sp, #8]
 801d32c:	2d00      	cmp	r5, #0
 801d32e:	dd05      	ble.n	801d33c <_dtoa_r+0x99c>
 801d330:	4639      	mov	r1, r7
 801d332:	462a      	mov	r2, r5
 801d334:	4620      	mov	r0, r4
 801d336:	f000 ff19 	bl	801e16c <__lshift>
 801d33a:	4607      	mov	r7, r0
 801d33c:	f1b8 0f00 	cmp.w	r8, #0
 801d340:	d05b      	beq.n	801d3fa <_dtoa_r+0xa5a>
 801d342:	6879      	ldr	r1, [r7, #4]
 801d344:	4620      	mov	r0, r4
 801d346:	f000 fcb5 	bl	801dcb4 <_Balloc>
 801d34a:	4605      	mov	r5, r0
 801d34c:	b928      	cbnz	r0, 801d35a <_dtoa_r+0x9ba>
 801d34e:	4b87      	ldr	r3, [pc, #540]	; (801d56c <_dtoa_r+0xbcc>)
 801d350:	4602      	mov	r2, r0
 801d352:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d356:	f7ff bb3d 	b.w	801c9d4 <_dtoa_r+0x34>
 801d35a:	693a      	ldr	r2, [r7, #16]
 801d35c:	f107 010c 	add.w	r1, r7, #12
 801d360:	300c      	adds	r0, #12
 801d362:	3202      	adds	r2, #2
 801d364:	0092      	lsls	r2, r2, #2
 801d366:	f7fd fc01 	bl	801ab6c <memcpy>
 801d36a:	2201      	movs	r2, #1
 801d36c:	4629      	mov	r1, r5
 801d36e:	4620      	mov	r0, r4
 801d370:	f000 fefc 	bl	801e16c <__lshift>
 801d374:	9b01      	ldr	r3, [sp, #4]
 801d376:	46b8      	mov	r8, r7
 801d378:	4607      	mov	r7, r0
 801d37a:	f103 0901 	add.w	r9, r3, #1
 801d37e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d382:	4413      	add	r3, r2
 801d384:	9305      	str	r3, [sp, #20]
 801d386:	f00a 0301 	and.w	r3, sl, #1
 801d38a:	9304      	str	r3, [sp, #16]
 801d38c:	4631      	mov	r1, r6
 801d38e:	ee18 0a10 	vmov	r0, s16
 801d392:	f7ff fa71 	bl	801c878 <quorem>
 801d396:	4641      	mov	r1, r8
 801d398:	9002      	str	r0, [sp, #8]
 801d39a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801d39e:	ee18 0a10 	vmov	r0, s16
 801d3a2:	f109 3bff 	add.w	fp, r9, #4294967295
 801d3a6:	f000 ff51 	bl	801e24c <__mcmp>
 801d3aa:	463a      	mov	r2, r7
 801d3ac:	9003      	str	r0, [sp, #12]
 801d3ae:	4631      	mov	r1, r6
 801d3b0:	4620      	mov	r0, r4
 801d3b2:	f000 ff67 	bl	801e284 <__mdiff>
 801d3b6:	68c2      	ldr	r2, [r0, #12]
 801d3b8:	4605      	mov	r5, r0
 801d3ba:	bb02      	cbnz	r2, 801d3fe <_dtoa_r+0xa5e>
 801d3bc:	4601      	mov	r1, r0
 801d3be:	ee18 0a10 	vmov	r0, s16
 801d3c2:	f000 ff43 	bl	801e24c <__mcmp>
 801d3c6:	4602      	mov	r2, r0
 801d3c8:	4629      	mov	r1, r5
 801d3ca:	4620      	mov	r0, r4
 801d3cc:	9207      	str	r2, [sp, #28]
 801d3ce:	f000 fcb1 	bl	801dd34 <_Bfree>
 801d3d2:	464d      	mov	r5, r9
 801d3d4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801d3d8:	ea43 0102 	orr.w	r1, r3, r2
 801d3dc:	9b04      	ldr	r3, [sp, #16]
 801d3de:	430b      	orrs	r3, r1
 801d3e0:	d10f      	bne.n	801d402 <_dtoa_r+0xa62>
 801d3e2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d3e6:	d02a      	beq.n	801d43e <_dtoa_r+0xa9e>
 801d3e8:	9b03      	ldr	r3, [sp, #12]
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	dd02      	ble.n	801d3f4 <_dtoa_r+0xa54>
 801d3ee:	9b02      	ldr	r3, [sp, #8]
 801d3f0:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801d3f4:	f88b a000 	strb.w	sl, [fp]
 801d3f8:	e775      	b.n	801d2e6 <_dtoa_r+0x946>
 801d3fa:	4638      	mov	r0, r7
 801d3fc:	e7ba      	b.n	801d374 <_dtoa_r+0x9d4>
 801d3fe:	2201      	movs	r2, #1
 801d400:	e7e2      	b.n	801d3c8 <_dtoa_r+0xa28>
 801d402:	9b03      	ldr	r3, [sp, #12]
 801d404:	2b00      	cmp	r3, #0
 801d406:	db04      	blt.n	801d412 <_dtoa_r+0xa72>
 801d408:	9906      	ldr	r1, [sp, #24]
 801d40a:	430b      	orrs	r3, r1
 801d40c:	9904      	ldr	r1, [sp, #16]
 801d40e:	430b      	orrs	r3, r1
 801d410:	d122      	bne.n	801d458 <_dtoa_r+0xab8>
 801d412:	2a00      	cmp	r2, #0
 801d414:	ddee      	ble.n	801d3f4 <_dtoa_r+0xa54>
 801d416:	ee18 1a10 	vmov	r1, s16
 801d41a:	2201      	movs	r2, #1
 801d41c:	4620      	mov	r0, r4
 801d41e:	f000 fea5 	bl	801e16c <__lshift>
 801d422:	4631      	mov	r1, r6
 801d424:	ee08 0a10 	vmov	s16, r0
 801d428:	f000 ff10 	bl	801e24c <__mcmp>
 801d42c:	2800      	cmp	r0, #0
 801d42e:	dc03      	bgt.n	801d438 <_dtoa_r+0xa98>
 801d430:	d1e0      	bne.n	801d3f4 <_dtoa_r+0xa54>
 801d432:	f01a 0f01 	tst.w	sl, #1
 801d436:	d0dd      	beq.n	801d3f4 <_dtoa_r+0xa54>
 801d438:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d43c:	d1d7      	bne.n	801d3ee <_dtoa_r+0xa4e>
 801d43e:	2339      	movs	r3, #57	; 0x39
 801d440:	f88b 3000 	strb.w	r3, [fp]
 801d444:	462b      	mov	r3, r5
 801d446:	461d      	mov	r5, r3
 801d448:	3b01      	subs	r3, #1
 801d44a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801d44e:	2a39      	cmp	r2, #57	; 0x39
 801d450:	d070      	beq.n	801d534 <_dtoa_r+0xb94>
 801d452:	3201      	adds	r2, #1
 801d454:	701a      	strb	r2, [r3, #0]
 801d456:	e746      	b.n	801d2e6 <_dtoa_r+0x946>
 801d458:	2a00      	cmp	r2, #0
 801d45a:	dd07      	ble.n	801d46c <_dtoa_r+0xacc>
 801d45c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d460:	d0ed      	beq.n	801d43e <_dtoa_r+0xa9e>
 801d462:	f10a 0301 	add.w	r3, sl, #1
 801d466:	f88b 3000 	strb.w	r3, [fp]
 801d46a:	e73c      	b.n	801d2e6 <_dtoa_r+0x946>
 801d46c:	9b05      	ldr	r3, [sp, #20]
 801d46e:	f809 ac01 	strb.w	sl, [r9, #-1]
 801d472:	4599      	cmp	r9, r3
 801d474:	d046      	beq.n	801d504 <_dtoa_r+0xb64>
 801d476:	ee18 1a10 	vmov	r1, s16
 801d47a:	2300      	movs	r3, #0
 801d47c:	220a      	movs	r2, #10
 801d47e:	4620      	mov	r0, r4
 801d480:	f000 fc7a 	bl	801dd78 <__multadd>
 801d484:	45b8      	cmp	r8, r7
 801d486:	ee08 0a10 	vmov	s16, r0
 801d48a:	f04f 0300 	mov.w	r3, #0
 801d48e:	f04f 020a 	mov.w	r2, #10
 801d492:	4641      	mov	r1, r8
 801d494:	4620      	mov	r0, r4
 801d496:	d106      	bne.n	801d4a6 <_dtoa_r+0xb06>
 801d498:	f000 fc6e 	bl	801dd78 <__multadd>
 801d49c:	4680      	mov	r8, r0
 801d49e:	4607      	mov	r7, r0
 801d4a0:	f109 0901 	add.w	r9, r9, #1
 801d4a4:	e772      	b.n	801d38c <_dtoa_r+0x9ec>
 801d4a6:	f000 fc67 	bl	801dd78 <__multadd>
 801d4aa:	4639      	mov	r1, r7
 801d4ac:	4680      	mov	r8, r0
 801d4ae:	2300      	movs	r3, #0
 801d4b0:	220a      	movs	r2, #10
 801d4b2:	4620      	mov	r0, r4
 801d4b4:	f000 fc60 	bl	801dd78 <__multadd>
 801d4b8:	4607      	mov	r7, r0
 801d4ba:	e7f1      	b.n	801d4a0 <_dtoa_r+0xb00>
 801d4bc:	9b03      	ldr	r3, [sp, #12]
 801d4be:	9302      	str	r3, [sp, #8]
 801d4c0:	9d01      	ldr	r5, [sp, #4]
 801d4c2:	4631      	mov	r1, r6
 801d4c4:	ee18 0a10 	vmov	r0, s16
 801d4c8:	f7ff f9d6 	bl	801c878 <quorem>
 801d4cc:	9b01      	ldr	r3, [sp, #4]
 801d4ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801d4d2:	f805 ab01 	strb.w	sl, [r5], #1
 801d4d6:	1aea      	subs	r2, r5, r3
 801d4d8:	9b02      	ldr	r3, [sp, #8]
 801d4da:	4293      	cmp	r3, r2
 801d4dc:	dd09      	ble.n	801d4f2 <_dtoa_r+0xb52>
 801d4de:	ee18 1a10 	vmov	r1, s16
 801d4e2:	2300      	movs	r3, #0
 801d4e4:	220a      	movs	r2, #10
 801d4e6:	4620      	mov	r0, r4
 801d4e8:	f000 fc46 	bl	801dd78 <__multadd>
 801d4ec:	ee08 0a10 	vmov	s16, r0
 801d4f0:	e7e7      	b.n	801d4c2 <_dtoa_r+0xb22>
 801d4f2:	9b02      	ldr	r3, [sp, #8]
 801d4f4:	f04f 0800 	mov.w	r8, #0
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	bfcc      	ite	gt
 801d4fc:	461d      	movgt	r5, r3
 801d4fe:	2501      	movle	r5, #1
 801d500:	9b01      	ldr	r3, [sp, #4]
 801d502:	441d      	add	r5, r3
 801d504:	ee18 1a10 	vmov	r1, s16
 801d508:	2201      	movs	r2, #1
 801d50a:	4620      	mov	r0, r4
 801d50c:	f000 fe2e 	bl	801e16c <__lshift>
 801d510:	4631      	mov	r1, r6
 801d512:	ee08 0a10 	vmov	s16, r0
 801d516:	f000 fe99 	bl	801e24c <__mcmp>
 801d51a:	2800      	cmp	r0, #0
 801d51c:	dc92      	bgt.n	801d444 <_dtoa_r+0xaa4>
 801d51e:	d102      	bne.n	801d526 <_dtoa_r+0xb86>
 801d520:	f01a 0f01 	tst.w	sl, #1
 801d524:	d18e      	bne.n	801d444 <_dtoa_r+0xaa4>
 801d526:	462b      	mov	r3, r5
 801d528:	461d      	mov	r5, r3
 801d52a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d52e:	2a30      	cmp	r2, #48	; 0x30
 801d530:	d0fa      	beq.n	801d528 <_dtoa_r+0xb88>
 801d532:	e6d8      	b.n	801d2e6 <_dtoa_r+0x946>
 801d534:	9a01      	ldr	r2, [sp, #4]
 801d536:	429a      	cmp	r2, r3
 801d538:	d185      	bne.n	801d446 <_dtoa_r+0xaa6>
 801d53a:	9b00      	ldr	r3, [sp, #0]
 801d53c:	3301      	adds	r3, #1
 801d53e:	9300      	str	r3, [sp, #0]
 801d540:	2331      	movs	r3, #49	; 0x31
 801d542:	7013      	strb	r3, [r2, #0]
 801d544:	e6cf      	b.n	801d2e6 <_dtoa_r+0x946>
 801d546:	4b0a      	ldr	r3, [pc, #40]	; (801d570 <_dtoa_r+0xbd0>)
 801d548:	f7ff ba98 	b.w	801ca7c <_dtoa_r+0xdc>
 801d54c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d54e:	2b00      	cmp	r3, #0
 801d550:	f47f aa71 	bne.w	801ca36 <_dtoa_r+0x96>
 801d554:	4b07      	ldr	r3, [pc, #28]	; (801d574 <_dtoa_r+0xbd4>)
 801d556:	f7ff ba91 	b.w	801ca7c <_dtoa_r+0xdc>
 801d55a:	9b02      	ldr	r3, [sp, #8]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	dcaf      	bgt.n	801d4c0 <_dtoa_r+0xb20>
 801d560:	9b06      	ldr	r3, [sp, #24]
 801d562:	2b02      	cmp	r3, #2
 801d564:	f73f aea9 	bgt.w	801d2ba <_dtoa_r+0x91a>
 801d568:	e7aa      	b.n	801d4c0 <_dtoa_r+0xb20>
 801d56a:	bf00      	nop
 801d56c:	080748a8 	.word	0x080748a8
 801d570:	080746a8 	.word	0x080746a8
 801d574:	08074829 	.word	0x08074829

0801d578 <rshift>:
 801d578:	6903      	ldr	r3, [r0, #16]
 801d57a:	114a      	asrs	r2, r1, #5
 801d57c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d584:	f100 0414 	add.w	r4, r0, #20
 801d588:	dd45      	ble.n	801d616 <rshift+0x9e>
 801d58a:	f011 011f 	ands.w	r1, r1, #31
 801d58e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d592:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d596:	d10c      	bne.n	801d5b2 <rshift+0x3a>
 801d598:	f100 0710 	add.w	r7, r0, #16
 801d59c:	4629      	mov	r1, r5
 801d59e:	42b1      	cmp	r1, r6
 801d5a0:	d334      	bcc.n	801d60c <rshift+0x94>
 801d5a2:	1a9b      	subs	r3, r3, r2
 801d5a4:	1eea      	subs	r2, r5, #3
 801d5a6:	009b      	lsls	r3, r3, #2
 801d5a8:	4296      	cmp	r6, r2
 801d5aa:	bf38      	it	cc
 801d5ac:	2300      	movcc	r3, #0
 801d5ae:	4423      	add	r3, r4
 801d5b0:	e015      	b.n	801d5de <rshift+0x66>
 801d5b2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d5b6:	f1c1 0820 	rsb	r8, r1, #32
 801d5ba:	f105 0e04 	add.w	lr, r5, #4
 801d5be:	46a1      	mov	r9, r4
 801d5c0:	40cf      	lsrs	r7, r1
 801d5c2:	4576      	cmp	r6, lr
 801d5c4:	46f4      	mov	ip, lr
 801d5c6:	d815      	bhi.n	801d5f4 <rshift+0x7c>
 801d5c8:	1a9a      	subs	r2, r3, r2
 801d5ca:	3501      	adds	r5, #1
 801d5cc:	0092      	lsls	r2, r2, #2
 801d5ce:	3a04      	subs	r2, #4
 801d5d0:	42ae      	cmp	r6, r5
 801d5d2:	bf38      	it	cc
 801d5d4:	2200      	movcc	r2, #0
 801d5d6:	18a3      	adds	r3, r4, r2
 801d5d8:	50a7      	str	r7, [r4, r2]
 801d5da:	b107      	cbz	r7, 801d5de <rshift+0x66>
 801d5dc:	3304      	adds	r3, #4
 801d5de:	1b1a      	subs	r2, r3, r4
 801d5e0:	42a3      	cmp	r3, r4
 801d5e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d5e6:	bf08      	it	eq
 801d5e8:	2300      	moveq	r3, #0
 801d5ea:	6102      	str	r2, [r0, #16]
 801d5ec:	bf08      	it	eq
 801d5ee:	6143      	streq	r3, [r0, #20]
 801d5f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d5f4:	f8dc c000 	ldr.w	ip, [ip]
 801d5f8:	fa0c fc08 	lsl.w	ip, ip, r8
 801d5fc:	ea4c 0707 	orr.w	r7, ip, r7
 801d600:	f849 7b04 	str.w	r7, [r9], #4
 801d604:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d608:	40cf      	lsrs	r7, r1
 801d60a:	e7da      	b.n	801d5c2 <rshift+0x4a>
 801d60c:	f851 cb04 	ldr.w	ip, [r1], #4
 801d610:	f847 cf04 	str.w	ip, [r7, #4]!
 801d614:	e7c3      	b.n	801d59e <rshift+0x26>
 801d616:	4623      	mov	r3, r4
 801d618:	e7e1      	b.n	801d5de <rshift+0x66>

0801d61a <__hexdig_fun>:
 801d61a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d61e:	2b09      	cmp	r3, #9
 801d620:	d802      	bhi.n	801d628 <__hexdig_fun+0xe>
 801d622:	3820      	subs	r0, #32
 801d624:	b2c0      	uxtb	r0, r0
 801d626:	4770      	bx	lr
 801d628:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d62c:	2b05      	cmp	r3, #5
 801d62e:	d801      	bhi.n	801d634 <__hexdig_fun+0x1a>
 801d630:	3847      	subs	r0, #71	; 0x47
 801d632:	e7f7      	b.n	801d624 <__hexdig_fun+0xa>
 801d634:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d638:	2b05      	cmp	r3, #5
 801d63a:	d801      	bhi.n	801d640 <__hexdig_fun+0x26>
 801d63c:	3827      	subs	r0, #39	; 0x27
 801d63e:	e7f1      	b.n	801d624 <__hexdig_fun+0xa>
 801d640:	2000      	movs	r0, #0
 801d642:	4770      	bx	lr

0801d644 <__gethex>:
 801d644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d648:	ed2d 8b02 	vpush	{d8}
 801d64c:	b089      	sub	sp, #36	; 0x24
 801d64e:	ee08 0a10 	vmov	s16, r0
 801d652:	468b      	mov	fp, r1
 801d654:	4690      	mov	r8, r2
 801d656:	9304      	str	r3, [sp, #16]
 801d658:	4bb2      	ldr	r3, [pc, #712]	; (801d924 <__gethex+0x2e0>)
 801d65a:	681b      	ldr	r3, [r3, #0]
 801d65c:	4618      	mov	r0, r3
 801d65e:	9301      	str	r3, [sp, #4]
 801d660:	f7e2 fe0a 	bl	8000278 <strlen>
 801d664:	9b01      	ldr	r3, [sp, #4]
 801d666:	f8db 2000 	ldr.w	r2, [fp]
 801d66a:	4682      	mov	sl, r0
 801d66c:	4403      	add	r3, r0
 801d66e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d672:	9305      	str	r3, [sp, #20]
 801d674:	1c93      	adds	r3, r2, #2
 801d676:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d67a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d67e:	32fe      	adds	r2, #254	; 0xfe
 801d680:	18d1      	adds	r1, r2, r3
 801d682:	461f      	mov	r7, r3
 801d684:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d688:	9100      	str	r1, [sp, #0]
 801d68a:	2830      	cmp	r0, #48	; 0x30
 801d68c:	d0f8      	beq.n	801d680 <__gethex+0x3c>
 801d68e:	f7ff ffc4 	bl	801d61a <__hexdig_fun>
 801d692:	4604      	mov	r4, r0
 801d694:	2800      	cmp	r0, #0
 801d696:	d139      	bne.n	801d70c <__gethex+0xc8>
 801d698:	4652      	mov	r2, sl
 801d69a:	9901      	ldr	r1, [sp, #4]
 801d69c:	4638      	mov	r0, r7
 801d69e:	f001 f977 	bl	801e990 <strncmp>
 801d6a2:	4605      	mov	r5, r0
 801d6a4:	2800      	cmp	r0, #0
 801d6a6:	d167      	bne.n	801d778 <__gethex+0x134>
 801d6a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d6ac:	eb07 060a 	add.w	r6, r7, sl
 801d6b0:	f7ff ffb3 	bl	801d61a <__hexdig_fun>
 801d6b4:	2800      	cmp	r0, #0
 801d6b6:	d061      	beq.n	801d77c <__gethex+0x138>
 801d6b8:	4633      	mov	r3, r6
 801d6ba:	7818      	ldrb	r0, [r3, #0]
 801d6bc:	461f      	mov	r7, r3
 801d6be:	3301      	adds	r3, #1
 801d6c0:	2830      	cmp	r0, #48	; 0x30
 801d6c2:	d0fa      	beq.n	801d6ba <__gethex+0x76>
 801d6c4:	f7ff ffa9 	bl	801d61a <__hexdig_fun>
 801d6c8:	fab0 f480 	clz	r4, r0
 801d6cc:	2301      	movs	r3, #1
 801d6ce:	4635      	mov	r5, r6
 801d6d0:	0964      	lsrs	r4, r4, #5
 801d6d2:	9300      	str	r3, [sp, #0]
 801d6d4:	463a      	mov	r2, r7
 801d6d6:	4616      	mov	r6, r2
 801d6d8:	3201      	adds	r2, #1
 801d6da:	7830      	ldrb	r0, [r6, #0]
 801d6dc:	f7ff ff9d 	bl	801d61a <__hexdig_fun>
 801d6e0:	2800      	cmp	r0, #0
 801d6e2:	d1f8      	bne.n	801d6d6 <__gethex+0x92>
 801d6e4:	4652      	mov	r2, sl
 801d6e6:	9901      	ldr	r1, [sp, #4]
 801d6e8:	4630      	mov	r0, r6
 801d6ea:	f001 f951 	bl	801e990 <strncmp>
 801d6ee:	b980      	cbnz	r0, 801d712 <__gethex+0xce>
 801d6f0:	b94d      	cbnz	r5, 801d706 <__gethex+0xc2>
 801d6f2:	eb06 050a 	add.w	r5, r6, sl
 801d6f6:	462a      	mov	r2, r5
 801d6f8:	4616      	mov	r6, r2
 801d6fa:	3201      	adds	r2, #1
 801d6fc:	7830      	ldrb	r0, [r6, #0]
 801d6fe:	f7ff ff8c 	bl	801d61a <__hexdig_fun>
 801d702:	2800      	cmp	r0, #0
 801d704:	d1f8      	bne.n	801d6f8 <__gethex+0xb4>
 801d706:	1bad      	subs	r5, r5, r6
 801d708:	00ad      	lsls	r5, r5, #2
 801d70a:	e004      	b.n	801d716 <__gethex+0xd2>
 801d70c:	2400      	movs	r4, #0
 801d70e:	4625      	mov	r5, r4
 801d710:	e7e0      	b.n	801d6d4 <__gethex+0x90>
 801d712:	2d00      	cmp	r5, #0
 801d714:	d1f7      	bne.n	801d706 <__gethex+0xc2>
 801d716:	7833      	ldrb	r3, [r6, #0]
 801d718:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d71c:	2b50      	cmp	r3, #80	; 0x50
 801d71e:	d13b      	bne.n	801d798 <__gethex+0x154>
 801d720:	7873      	ldrb	r3, [r6, #1]
 801d722:	2b2b      	cmp	r3, #43	; 0x2b
 801d724:	d02c      	beq.n	801d780 <__gethex+0x13c>
 801d726:	2b2d      	cmp	r3, #45	; 0x2d
 801d728:	d02e      	beq.n	801d788 <__gethex+0x144>
 801d72a:	1c71      	adds	r1, r6, #1
 801d72c:	f04f 0900 	mov.w	r9, #0
 801d730:	7808      	ldrb	r0, [r1, #0]
 801d732:	f7ff ff72 	bl	801d61a <__hexdig_fun>
 801d736:	1e43      	subs	r3, r0, #1
 801d738:	b2db      	uxtb	r3, r3
 801d73a:	2b18      	cmp	r3, #24
 801d73c:	d82c      	bhi.n	801d798 <__gethex+0x154>
 801d73e:	f1a0 0210 	sub.w	r2, r0, #16
 801d742:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d746:	f7ff ff68 	bl	801d61a <__hexdig_fun>
 801d74a:	1e43      	subs	r3, r0, #1
 801d74c:	b2db      	uxtb	r3, r3
 801d74e:	2b18      	cmp	r3, #24
 801d750:	d91d      	bls.n	801d78e <__gethex+0x14a>
 801d752:	f1b9 0f00 	cmp.w	r9, #0
 801d756:	d000      	beq.n	801d75a <__gethex+0x116>
 801d758:	4252      	negs	r2, r2
 801d75a:	4415      	add	r5, r2
 801d75c:	f8cb 1000 	str.w	r1, [fp]
 801d760:	b1e4      	cbz	r4, 801d79c <__gethex+0x158>
 801d762:	9b00      	ldr	r3, [sp, #0]
 801d764:	2b00      	cmp	r3, #0
 801d766:	bf14      	ite	ne
 801d768:	2700      	movne	r7, #0
 801d76a:	2706      	moveq	r7, #6
 801d76c:	4638      	mov	r0, r7
 801d76e:	b009      	add	sp, #36	; 0x24
 801d770:	ecbd 8b02 	vpop	{d8}
 801d774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d778:	463e      	mov	r6, r7
 801d77a:	4625      	mov	r5, r4
 801d77c:	2401      	movs	r4, #1
 801d77e:	e7ca      	b.n	801d716 <__gethex+0xd2>
 801d780:	f04f 0900 	mov.w	r9, #0
 801d784:	1cb1      	adds	r1, r6, #2
 801d786:	e7d3      	b.n	801d730 <__gethex+0xec>
 801d788:	f04f 0901 	mov.w	r9, #1
 801d78c:	e7fa      	b.n	801d784 <__gethex+0x140>
 801d78e:	230a      	movs	r3, #10
 801d790:	fb03 0202 	mla	r2, r3, r2, r0
 801d794:	3a10      	subs	r2, #16
 801d796:	e7d4      	b.n	801d742 <__gethex+0xfe>
 801d798:	4631      	mov	r1, r6
 801d79a:	e7df      	b.n	801d75c <__gethex+0x118>
 801d79c:	1bf3      	subs	r3, r6, r7
 801d79e:	4621      	mov	r1, r4
 801d7a0:	3b01      	subs	r3, #1
 801d7a2:	2b07      	cmp	r3, #7
 801d7a4:	dc0b      	bgt.n	801d7be <__gethex+0x17a>
 801d7a6:	ee18 0a10 	vmov	r0, s16
 801d7aa:	f000 fa83 	bl	801dcb4 <_Balloc>
 801d7ae:	4604      	mov	r4, r0
 801d7b0:	b940      	cbnz	r0, 801d7c4 <__gethex+0x180>
 801d7b2:	4b5d      	ldr	r3, [pc, #372]	; (801d928 <__gethex+0x2e4>)
 801d7b4:	4602      	mov	r2, r0
 801d7b6:	21de      	movs	r1, #222	; 0xde
 801d7b8:	485c      	ldr	r0, [pc, #368]	; (801d92c <__gethex+0x2e8>)
 801d7ba:	f001 f90b 	bl	801e9d4 <__assert_func>
 801d7be:	3101      	adds	r1, #1
 801d7c0:	105b      	asrs	r3, r3, #1
 801d7c2:	e7ee      	b.n	801d7a2 <__gethex+0x15e>
 801d7c4:	f100 0914 	add.w	r9, r0, #20
 801d7c8:	f04f 0b00 	mov.w	fp, #0
 801d7cc:	f1ca 0301 	rsb	r3, sl, #1
 801d7d0:	f8cd 9008 	str.w	r9, [sp, #8]
 801d7d4:	f8cd b000 	str.w	fp, [sp]
 801d7d8:	9306      	str	r3, [sp, #24]
 801d7da:	42b7      	cmp	r7, r6
 801d7dc:	d340      	bcc.n	801d860 <__gethex+0x21c>
 801d7de:	9802      	ldr	r0, [sp, #8]
 801d7e0:	9b00      	ldr	r3, [sp, #0]
 801d7e2:	f840 3b04 	str.w	r3, [r0], #4
 801d7e6:	eba0 0009 	sub.w	r0, r0, r9
 801d7ea:	1080      	asrs	r0, r0, #2
 801d7ec:	0146      	lsls	r6, r0, #5
 801d7ee:	6120      	str	r0, [r4, #16]
 801d7f0:	4618      	mov	r0, r3
 801d7f2:	f000 fb53 	bl	801de9c <__hi0bits>
 801d7f6:	1a30      	subs	r0, r6, r0
 801d7f8:	f8d8 6000 	ldr.w	r6, [r8]
 801d7fc:	42b0      	cmp	r0, r6
 801d7fe:	dd63      	ble.n	801d8c8 <__gethex+0x284>
 801d800:	1b87      	subs	r7, r0, r6
 801d802:	4620      	mov	r0, r4
 801d804:	4639      	mov	r1, r7
 801d806:	f000 fef9 	bl	801e5fc <__any_on>
 801d80a:	4682      	mov	sl, r0
 801d80c:	b1a8      	cbz	r0, 801d83a <__gethex+0x1f6>
 801d80e:	1e7b      	subs	r3, r7, #1
 801d810:	f04f 0a01 	mov.w	sl, #1
 801d814:	1159      	asrs	r1, r3, #5
 801d816:	f003 021f 	and.w	r2, r3, #31
 801d81a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d81e:	fa0a f202 	lsl.w	r2, sl, r2
 801d822:	420a      	tst	r2, r1
 801d824:	d009      	beq.n	801d83a <__gethex+0x1f6>
 801d826:	4553      	cmp	r3, sl
 801d828:	dd05      	ble.n	801d836 <__gethex+0x1f2>
 801d82a:	1eb9      	subs	r1, r7, #2
 801d82c:	4620      	mov	r0, r4
 801d82e:	f000 fee5 	bl	801e5fc <__any_on>
 801d832:	2800      	cmp	r0, #0
 801d834:	d145      	bne.n	801d8c2 <__gethex+0x27e>
 801d836:	f04f 0a02 	mov.w	sl, #2
 801d83a:	443d      	add	r5, r7
 801d83c:	4639      	mov	r1, r7
 801d83e:	4620      	mov	r0, r4
 801d840:	f7ff fe9a 	bl	801d578 <rshift>
 801d844:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d848:	42ab      	cmp	r3, r5
 801d84a:	da4c      	bge.n	801d8e6 <__gethex+0x2a2>
 801d84c:	4621      	mov	r1, r4
 801d84e:	ee18 0a10 	vmov	r0, s16
 801d852:	f000 fa6f 	bl	801dd34 <_Bfree>
 801d856:	2300      	movs	r3, #0
 801d858:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d85a:	27a3      	movs	r7, #163	; 0xa3
 801d85c:	6013      	str	r3, [r2, #0]
 801d85e:	e785      	b.n	801d76c <__gethex+0x128>
 801d860:	1e73      	subs	r3, r6, #1
 801d862:	9a05      	ldr	r2, [sp, #20]
 801d864:	9303      	str	r3, [sp, #12]
 801d866:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d86a:	4293      	cmp	r3, r2
 801d86c:	d019      	beq.n	801d8a2 <__gethex+0x25e>
 801d86e:	f1bb 0f20 	cmp.w	fp, #32
 801d872:	d107      	bne.n	801d884 <__gethex+0x240>
 801d874:	9b02      	ldr	r3, [sp, #8]
 801d876:	9a00      	ldr	r2, [sp, #0]
 801d878:	f843 2b04 	str.w	r2, [r3], #4
 801d87c:	9302      	str	r3, [sp, #8]
 801d87e:	2300      	movs	r3, #0
 801d880:	469b      	mov	fp, r3
 801d882:	9300      	str	r3, [sp, #0]
 801d884:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d888:	f7ff fec7 	bl	801d61a <__hexdig_fun>
 801d88c:	f000 000f 	and.w	r0, r0, #15
 801d890:	9b00      	ldr	r3, [sp, #0]
 801d892:	fa00 f00b 	lsl.w	r0, r0, fp
 801d896:	f10b 0b04 	add.w	fp, fp, #4
 801d89a:	4303      	orrs	r3, r0
 801d89c:	9300      	str	r3, [sp, #0]
 801d89e:	9b03      	ldr	r3, [sp, #12]
 801d8a0:	e00d      	b.n	801d8be <__gethex+0x27a>
 801d8a2:	9b03      	ldr	r3, [sp, #12]
 801d8a4:	9a06      	ldr	r2, [sp, #24]
 801d8a6:	4413      	add	r3, r2
 801d8a8:	42bb      	cmp	r3, r7
 801d8aa:	d3e0      	bcc.n	801d86e <__gethex+0x22a>
 801d8ac:	4618      	mov	r0, r3
 801d8ae:	4652      	mov	r2, sl
 801d8b0:	9901      	ldr	r1, [sp, #4]
 801d8b2:	9307      	str	r3, [sp, #28]
 801d8b4:	f001 f86c 	bl	801e990 <strncmp>
 801d8b8:	9b07      	ldr	r3, [sp, #28]
 801d8ba:	2800      	cmp	r0, #0
 801d8bc:	d1d7      	bne.n	801d86e <__gethex+0x22a>
 801d8be:	461e      	mov	r6, r3
 801d8c0:	e78b      	b.n	801d7da <__gethex+0x196>
 801d8c2:	f04f 0a03 	mov.w	sl, #3
 801d8c6:	e7b8      	b.n	801d83a <__gethex+0x1f6>
 801d8c8:	da0a      	bge.n	801d8e0 <__gethex+0x29c>
 801d8ca:	1a37      	subs	r7, r6, r0
 801d8cc:	4621      	mov	r1, r4
 801d8ce:	ee18 0a10 	vmov	r0, s16
 801d8d2:	463a      	mov	r2, r7
 801d8d4:	1bed      	subs	r5, r5, r7
 801d8d6:	f000 fc49 	bl	801e16c <__lshift>
 801d8da:	4604      	mov	r4, r0
 801d8dc:	f100 0914 	add.w	r9, r0, #20
 801d8e0:	f04f 0a00 	mov.w	sl, #0
 801d8e4:	e7ae      	b.n	801d844 <__gethex+0x200>
 801d8e6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d8ea:	42a8      	cmp	r0, r5
 801d8ec:	dd72      	ble.n	801d9d4 <__gethex+0x390>
 801d8ee:	1b45      	subs	r5, r0, r5
 801d8f0:	42ae      	cmp	r6, r5
 801d8f2:	dc35      	bgt.n	801d960 <__gethex+0x31c>
 801d8f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d8f8:	2b02      	cmp	r3, #2
 801d8fa:	d029      	beq.n	801d950 <__gethex+0x30c>
 801d8fc:	2b03      	cmp	r3, #3
 801d8fe:	d02b      	beq.n	801d958 <__gethex+0x314>
 801d900:	2b01      	cmp	r3, #1
 801d902:	d11b      	bne.n	801d93c <__gethex+0x2f8>
 801d904:	42ae      	cmp	r6, r5
 801d906:	d119      	bne.n	801d93c <__gethex+0x2f8>
 801d908:	2e01      	cmp	r6, #1
 801d90a:	d111      	bne.n	801d930 <__gethex+0x2ec>
 801d90c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d910:	2762      	movs	r7, #98	; 0x62
 801d912:	9a04      	ldr	r2, [sp, #16]
 801d914:	6013      	str	r3, [r2, #0]
 801d916:	2301      	movs	r3, #1
 801d918:	6123      	str	r3, [r4, #16]
 801d91a:	f8c9 3000 	str.w	r3, [r9]
 801d91e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d920:	601c      	str	r4, [r3, #0]
 801d922:	e723      	b.n	801d76c <__gethex+0x128>
 801d924:	08074920 	.word	0x08074920
 801d928:	080748a8 	.word	0x080748a8
 801d92c:	080748b9 	.word	0x080748b9
 801d930:	1e71      	subs	r1, r6, #1
 801d932:	4620      	mov	r0, r4
 801d934:	f000 fe62 	bl	801e5fc <__any_on>
 801d938:	2800      	cmp	r0, #0
 801d93a:	d1e7      	bne.n	801d90c <__gethex+0x2c8>
 801d93c:	4621      	mov	r1, r4
 801d93e:	ee18 0a10 	vmov	r0, s16
 801d942:	f000 f9f7 	bl	801dd34 <_Bfree>
 801d946:	2300      	movs	r3, #0
 801d948:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d94a:	2750      	movs	r7, #80	; 0x50
 801d94c:	6013      	str	r3, [r2, #0]
 801d94e:	e70d      	b.n	801d76c <__gethex+0x128>
 801d950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d952:	2b00      	cmp	r3, #0
 801d954:	d1f2      	bne.n	801d93c <__gethex+0x2f8>
 801d956:	e7d9      	b.n	801d90c <__gethex+0x2c8>
 801d958:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d1d6      	bne.n	801d90c <__gethex+0x2c8>
 801d95e:	e7ed      	b.n	801d93c <__gethex+0x2f8>
 801d960:	1e6f      	subs	r7, r5, #1
 801d962:	f1ba 0f00 	cmp.w	sl, #0
 801d966:	d132      	bne.n	801d9ce <__gethex+0x38a>
 801d968:	b127      	cbz	r7, 801d974 <__gethex+0x330>
 801d96a:	4639      	mov	r1, r7
 801d96c:	4620      	mov	r0, r4
 801d96e:	f000 fe45 	bl	801e5fc <__any_on>
 801d972:	4682      	mov	sl, r0
 801d974:	117b      	asrs	r3, r7, #5
 801d976:	2101      	movs	r1, #1
 801d978:	f007 071f 	and.w	r7, r7, #31
 801d97c:	4620      	mov	r0, r4
 801d97e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d982:	1b76      	subs	r6, r6, r5
 801d984:	fa01 f707 	lsl.w	r7, r1, r7
 801d988:	4629      	mov	r1, r5
 801d98a:	421f      	tst	r7, r3
 801d98c:	f04f 0702 	mov.w	r7, #2
 801d990:	bf18      	it	ne
 801d992:	f04a 0a02 	orrne.w	sl, sl, #2
 801d996:	f7ff fdef 	bl	801d578 <rshift>
 801d99a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d99e:	f1ba 0f00 	cmp.w	sl, #0
 801d9a2:	d048      	beq.n	801da36 <__gethex+0x3f2>
 801d9a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d9a8:	2b02      	cmp	r3, #2
 801d9aa:	d015      	beq.n	801d9d8 <__gethex+0x394>
 801d9ac:	2b03      	cmp	r3, #3
 801d9ae:	d017      	beq.n	801d9e0 <__gethex+0x39c>
 801d9b0:	2b01      	cmp	r3, #1
 801d9b2:	d109      	bne.n	801d9c8 <__gethex+0x384>
 801d9b4:	f01a 0f02 	tst.w	sl, #2
 801d9b8:	d006      	beq.n	801d9c8 <__gethex+0x384>
 801d9ba:	f8d9 0000 	ldr.w	r0, [r9]
 801d9be:	ea4a 0a00 	orr.w	sl, sl, r0
 801d9c2:	f01a 0f01 	tst.w	sl, #1
 801d9c6:	d10e      	bne.n	801d9e6 <__gethex+0x3a2>
 801d9c8:	f047 0710 	orr.w	r7, r7, #16
 801d9cc:	e033      	b.n	801da36 <__gethex+0x3f2>
 801d9ce:	f04f 0a01 	mov.w	sl, #1
 801d9d2:	e7cf      	b.n	801d974 <__gethex+0x330>
 801d9d4:	2701      	movs	r7, #1
 801d9d6:	e7e2      	b.n	801d99e <__gethex+0x35a>
 801d9d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d9da:	f1c3 0301 	rsb	r3, r3, #1
 801d9de:	9315      	str	r3, [sp, #84]	; 0x54
 801d9e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	d0f0      	beq.n	801d9c8 <__gethex+0x384>
 801d9e6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d9ea:	f104 0314 	add.w	r3, r4, #20
 801d9ee:	f04f 0c00 	mov.w	ip, #0
 801d9f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d9f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d9fa:	4618      	mov	r0, r3
 801d9fc:	f853 2b04 	ldr.w	r2, [r3], #4
 801da00:	f1b2 3fff 	cmp.w	r2, #4294967295
 801da04:	d01c      	beq.n	801da40 <__gethex+0x3fc>
 801da06:	3201      	adds	r2, #1
 801da08:	6002      	str	r2, [r0, #0]
 801da0a:	2f02      	cmp	r7, #2
 801da0c:	f104 0314 	add.w	r3, r4, #20
 801da10:	d13f      	bne.n	801da92 <__gethex+0x44e>
 801da12:	f8d8 2000 	ldr.w	r2, [r8]
 801da16:	3a01      	subs	r2, #1
 801da18:	42b2      	cmp	r2, r6
 801da1a:	d10a      	bne.n	801da32 <__gethex+0x3ee>
 801da1c:	1171      	asrs	r1, r6, #5
 801da1e:	2201      	movs	r2, #1
 801da20:	f006 061f 	and.w	r6, r6, #31
 801da24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801da28:	fa02 f606 	lsl.w	r6, r2, r6
 801da2c:	421e      	tst	r6, r3
 801da2e:	bf18      	it	ne
 801da30:	4617      	movne	r7, r2
 801da32:	f047 0720 	orr.w	r7, r7, #32
 801da36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801da38:	601c      	str	r4, [r3, #0]
 801da3a:	9b04      	ldr	r3, [sp, #16]
 801da3c:	601d      	str	r5, [r3, #0]
 801da3e:	e695      	b.n	801d76c <__gethex+0x128>
 801da40:	4299      	cmp	r1, r3
 801da42:	f843 cc04 	str.w	ip, [r3, #-4]
 801da46:	d8d8      	bhi.n	801d9fa <__gethex+0x3b6>
 801da48:	68a3      	ldr	r3, [r4, #8]
 801da4a:	459b      	cmp	fp, r3
 801da4c:	db19      	blt.n	801da82 <__gethex+0x43e>
 801da4e:	6861      	ldr	r1, [r4, #4]
 801da50:	ee18 0a10 	vmov	r0, s16
 801da54:	3101      	adds	r1, #1
 801da56:	f000 f92d 	bl	801dcb4 <_Balloc>
 801da5a:	4681      	mov	r9, r0
 801da5c:	b918      	cbnz	r0, 801da66 <__gethex+0x422>
 801da5e:	4b1b      	ldr	r3, [pc, #108]	; (801dacc <__gethex+0x488>)
 801da60:	4602      	mov	r2, r0
 801da62:	2184      	movs	r1, #132	; 0x84
 801da64:	e6a8      	b.n	801d7b8 <__gethex+0x174>
 801da66:	6922      	ldr	r2, [r4, #16]
 801da68:	f104 010c 	add.w	r1, r4, #12
 801da6c:	300c      	adds	r0, #12
 801da6e:	3202      	adds	r2, #2
 801da70:	0092      	lsls	r2, r2, #2
 801da72:	f7fd f87b 	bl	801ab6c <memcpy>
 801da76:	4621      	mov	r1, r4
 801da78:	464c      	mov	r4, r9
 801da7a:	ee18 0a10 	vmov	r0, s16
 801da7e:	f000 f959 	bl	801dd34 <_Bfree>
 801da82:	6923      	ldr	r3, [r4, #16]
 801da84:	1c5a      	adds	r2, r3, #1
 801da86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801da8a:	6122      	str	r2, [r4, #16]
 801da8c:	2201      	movs	r2, #1
 801da8e:	615a      	str	r2, [r3, #20]
 801da90:	e7bb      	b.n	801da0a <__gethex+0x3c6>
 801da92:	6922      	ldr	r2, [r4, #16]
 801da94:	455a      	cmp	r2, fp
 801da96:	dd0b      	ble.n	801dab0 <__gethex+0x46c>
 801da98:	2101      	movs	r1, #1
 801da9a:	4620      	mov	r0, r4
 801da9c:	f7ff fd6c 	bl	801d578 <rshift>
 801daa0:	3501      	adds	r5, #1
 801daa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801daa6:	42ab      	cmp	r3, r5
 801daa8:	f6ff aed0 	blt.w	801d84c <__gethex+0x208>
 801daac:	2701      	movs	r7, #1
 801daae:	e7c0      	b.n	801da32 <__gethex+0x3ee>
 801dab0:	f016 061f 	ands.w	r6, r6, #31
 801dab4:	d0fa      	beq.n	801daac <__gethex+0x468>
 801dab6:	4453      	add	r3, sl
 801dab8:	f1c6 0620 	rsb	r6, r6, #32
 801dabc:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801dac0:	f000 f9ec 	bl	801de9c <__hi0bits>
 801dac4:	42b0      	cmp	r0, r6
 801dac6:	dbe7      	blt.n	801da98 <__gethex+0x454>
 801dac8:	e7f0      	b.n	801daac <__gethex+0x468>
 801daca:	bf00      	nop
 801dacc:	080748a8 	.word	0x080748a8

0801dad0 <L_shift>:
 801dad0:	f1c2 0208 	rsb	r2, r2, #8
 801dad4:	0092      	lsls	r2, r2, #2
 801dad6:	b570      	push	{r4, r5, r6, lr}
 801dad8:	f1c2 0620 	rsb	r6, r2, #32
 801dadc:	6843      	ldr	r3, [r0, #4]
 801dade:	6804      	ldr	r4, [r0, #0]
 801dae0:	fa03 f506 	lsl.w	r5, r3, r6
 801dae4:	40d3      	lsrs	r3, r2
 801dae6:	432c      	orrs	r4, r5
 801dae8:	6004      	str	r4, [r0, #0]
 801daea:	f840 3f04 	str.w	r3, [r0, #4]!
 801daee:	4288      	cmp	r0, r1
 801daf0:	d3f4      	bcc.n	801dadc <L_shift+0xc>
 801daf2:	bd70      	pop	{r4, r5, r6, pc}

0801daf4 <__match>:
 801daf4:	6803      	ldr	r3, [r0, #0]
 801daf6:	3301      	adds	r3, #1
 801daf8:	b530      	push	{r4, r5, lr}
 801dafa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dafe:	b914      	cbnz	r4, 801db06 <__match+0x12>
 801db00:	6003      	str	r3, [r0, #0]
 801db02:	2001      	movs	r0, #1
 801db04:	bd30      	pop	{r4, r5, pc}
 801db06:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801db0e:	2d19      	cmp	r5, #25
 801db10:	bf98      	it	ls
 801db12:	3220      	addls	r2, #32
 801db14:	42a2      	cmp	r2, r4
 801db16:	d0f0      	beq.n	801dafa <__match+0x6>
 801db18:	2000      	movs	r0, #0
 801db1a:	e7f3      	b.n	801db04 <__match+0x10>

0801db1c <__hexnan>:
 801db1c:	680b      	ldr	r3, [r1, #0]
 801db1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db22:	115e      	asrs	r6, r3, #5
 801db24:	f013 031f 	ands.w	r3, r3, #31
 801db28:	f04f 0500 	mov.w	r5, #0
 801db2c:	b087      	sub	sp, #28
 801db2e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801db32:	4690      	mov	r8, r2
 801db34:	4682      	mov	sl, r0
 801db36:	6802      	ldr	r2, [r0, #0]
 801db38:	bf18      	it	ne
 801db3a:	3604      	addne	r6, #4
 801db3c:	46ab      	mov	fp, r5
 801db3e:	9301      	str	r3, [sp, #4]
 801db40:	1f37      	subs	r7, r6, #4
 801db42:	f846 5c04 	str.w	r5, [r6, #-4]
 801db46:	9502      	str	r5, [sp, #8]
 801db48:	46b9      	mov	r9, r7
 801db4a:	463c      	mov	r4, r7
 801db4c:	1c53      	adds	r3, r2, #1
 801db4e:	7851      	ldrb	r1, [r2, #1]
 801db50:	9303      	str	r3, [sp, #12]
 801db52:	b341      	cbz	r1, 801dba6 <__hexnan+0x8a>
 801db54:	4608      	mov	r0, r1
 801db56:	9205      	str	r2, [sp, #20]
 801db58:	9104      	str	r1, [sp, #16]
 801db5a:	f7ff fd5e 	bl	801d61a <__hexdig_fun>
 801db5e:	2800      	cmp	r0, #0
 801db60:	d14f      	bne.n	801dc02 <__hexnan+0xe6>
 801db62:	9904      	ldr	r1, [sp, #16]
 801db64:	9a05      	ldr	r2, [sp, #20]
 801db66:	2920      	cmp	r1, #32
 801db68:	d818      	bhi.n	801db9c <__hexnan+0x80>
 801db6a:	9b02      	ldr	r3, [sp, #8]
 801db6c:	459b      	cmp	fp, r3
 801db6e:	dd13      	ble.n	801db98 <__hexnan+0x7c>
 801db70:	454c      	cmp	r4, r9
 801db72:	d206      	bcs.n	801db82 <__hexnan+0x66>
 801db74:	2d07      	cmp	r5, #7
 801db76:	dc04      	bgt.n	801db82 <__hexnan+0x66>
 801db78:	462a      	mov	r2, r5
 801db7a:	4649      	mov	r1, r9
 801db7c:	4620      	mov	r0, r4
 801db7e:	f7ff ffa7 	bl	801dad0 <L_shift>
 801db82:	4544      	cmp	r4, r8
 801db84:	d94f      	bls.n	801dc26 <__hexnan+0x10a>
 801db86:	2300      	movs	r3, #0
 801db88:	f1a4 0904 	sub.w	r9, r4, #4
 801db8c:	f8cd b008 	str.w	fp, [sp, #8]
 801db90:	f844 3c04 	str.w	r3, [r4, #-4]
 801db94:	461d      	mov	r5, r3
 801db96:	464c      	mov	r4, r9
 801db98:	9a03      	ldr	r2, [sp, #12]
 801db9a:	e7d7      	b.n	801db4c <__hexnan+0x30>
 801db9c:	2929      	cmp	r1, #41	; 0x29
 801db9e:	d155      	bne.n	801dc4c <__hexnan+0x130>
 801dba0:	3202      	adds	r2, #2
 801dba2:	f8ca 2000 	str.w	r2, [sl]
 801dba6:	f1bb 0f00 	cmp.w	fp, #0
 801dbaa:	d04f      	beq.n	801dc4c <__hexnan+0x130>
 801dbac:	454c      	cmp	r4, r9
 801dbae:	d206      	bcs.n	801dbbe <__hexnan+0xa2>
 801dbb0:	2d07      	cmp	r5, #7
 801dbb2:	dc04      	bgt.n	801dbbe <__hexnan+0xa2>
 801dbb4:	462a      	mov	r2, r5
 801dbb6:	4649      	mov	r1, r9
 801dbb8:	4620      	mov	r0, r4
 801dbba:	f7ff ff89 	bl	801dad0 <L_shift>
 801dbbe:	4544      	cmp	r4, r8
 801dbc0:	d933      	bls.n	801dc2a <__hexnan+0x10e>
 801dbc2:	f1a8 0204 	sub.w	r2, r8, #4
 801dbc6:	4623      	mov	r3, r4
 801dbc8:	f853 1b04 	ldr.w	r1, [r3], #4
 801dbcc:	429f      	cmp	r7, r3
 801dbce:	f842 1f04 	str.w	r1, [r2, #4]!
 801dbd2:	d2f9      	bcs.n	801dbc8 <__hexnan+0xac>
 801dbd4:	1b3b      	subs	r3, r7, r4
 801dbd6:	3e03      	subs	r6, #3
 801dbd8:	3401      	adds	r4, #1
 801dbda:	2200      	movs	r2, #0
 801dbdc:	f023 0303 	bic.w	r3, r3, #3
 801dbe0:	3304      	adds	r3, #4
 801dbe2:	42b4      	cmp	r4, r6
 801dbe4:	bf88      	it	hi
 801dbe6:	2304      	movhi	r3, #4
 801dbe8:	4443      	add	r3, r8
 801dbea:	f843 2b04 	str.w	r2, [r3], #4
 801dbee:	429f      	cmp	r7, r3
 801dbf0:	d2fb      	bcs.n	801dbea <__hexnan+0xce>
 801dbf2:	683b      	ldr	r3, [r7, #0]
 801dbf4:	b91b      	cbnz	r3, 801dbfe <__hexnan+0xe2>
 801dbf6:	4547      	cmp	r7, r8
 801dbf8:	d126      	bne.n	801dc48 <__hexnan+0x12c>
 801dbfa:	2301      	movs	r3, #1
 801dbfc:	603b      	str	r3, [r7, #0]
 801dbfe:	2005      	movs	r0, #5
 801dc00:	e025      	b.n	801dc4e <__hexnan+0x132>
 801dc02:	3501      	adds	r5, #1
 801dc04:	f10b 0b01 	add.w	fp, fp, #1
 801dc08:	2d08      	cmp	r5, #8
 801dc0a:	dd05      	ble.n	801dc18 <__hexnan+0xfc>
 801dc0c:	4544      	cmp	r4, r8
 801dc0e:	d9c3      	bls.n	801db98 <__hexnan+0x7c>
 801dc10:	2300      	movs	r3, #0
 801dc12:	3c04      	subs	r4, #4
 801dc14:	2501      	movs	r5, #1
 801dc16:	6023      	str	r3, [r4, #0]
 801dc18:	6822      	ldr	r2, [r4, #0]
 801dc1a:	f000 000f 	and.w	r0, r0, #15
 801dc1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801dc22:	6022      	str	r2, [r4, #0]
 801dc24:	e7b8      	b.n	801db98 <__hexnan+0x7c>
 801dc26:	2508      	movs	r5, #8
 801dc28:	e7b6      	b.n	801db98 <__hexnan+0x7c>
 801dc2a:	9b01      	ldr	r3, [sp, #4]
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d0e0      	beq.n	801dbf2 <__hexnan+0xd6>
 801dc30:	f04f 32ff 	mov.w	r2, #4294967295
 801dc34:	f1c3 0320 	rsb	r3, r3, #32
 801dc38:	fa22 f303 	lsr.w	r3, r2, r3
 801dc3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801dc40:	401a      	ands	r2, r3
 801dc42:	f846 2c04 	str.w	r2, [r6, #-4]
 801dc46:	e7d4      	b.n	801dbf2 <__hexnan+0xd6>
 801dc48:	3f04      	subs	r7, #4
 801dc4a:	e7d2      	b.n	801dbf2 <__hexnan+0xd6>
 801dc4c:	2004      	movs	r0, #4
 801dc4e:	b007      	add	sp, #28
 801dc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc54 <_localeconv_r>:
 801dc54:	4800      	ldr	r0, [pc, #0]	; (801dc58 <_localeconv_r+0x4>)
 801dc56:	4770      	bx	lr
 801dc58:	20000a88 	.word	0x20000a88

0801dc5c <__ascii_mbtowc>:
 801dc5c:	b082      	sub	sp, #8
 801dc5e:	b901      	cbnz	r1, 801dc62 <__ascii_mbtowc+0x6>
 801dc60:	a901      	add	r1, sp, #4
 801dc62:	b142      	cbz	r2, 801dc76 <__ascii_mbtowc+0x1a>
 801dc64:	b14b      	cbz	r3, 801dc7a <__ascii_mbtowc+0x1e>
 801dc66:	7813      	ldrb	r3, [r2, #0]
 801dc68:	600b      	str	r3, [r1, #0]
 801dc6a:	7812      	ldrb	r2, [r2, #0]
 801dc6c:	1e10      	subs	r0, r2, #0
 801dc6e:	bf18      	it	ne
 801dc70:	2001      	movne	r0, #1
 801dc72:	b002      	add	sp, #8
 801dc74:	4770      	bx	lr
 801dc76:	4610      	mov	r0, r2
 801dc78:	e7fb      	b.n	801dc72 <__ascii_mbtowc+0x16>
 801dc7a:	f06f 0001 	mvn.w	r0, #1
 801dc7e:	e7f8      	b.n	801dc72 <__ascii_mbtowc+0x16>

0801dc80 <memchr>:
 801dc80:	b2c9      	uxtb	r1, r1
 801dc82:	4402      	add	r2, r0
 801dc84:	b510      	push	{r4, lr}
 801dc86:	4290      	cmp	r0, r2
 801dc88:	4603      	mov	r3, r0
 801dc8a:	d101      	bne.n	801dc90 <memchr+0x10>
 801dc8c:	2300      	movs	r3, #0
 801dc8e:	e003      	b.n	801dc98 <memchr+0x18>
 801dc90:	781c      	ldrb	r4, [r3, #0]
 801dc92:	3001      	adds	r0, #1
 801dc94:	428c      	cmp	r4, r1
 801dc96:	d1f6      	bne.n	801dc86 <memchr+0x6>
 801dc98:	4618      	mov	r0, r3
 801dc9a:	bd10      	pop	{r4, pc}

0801dc9c <__malloc_lock>:
 801dc9c:	4801      	ldr	r0, [pc, #4]	; (801dca4 <__malloc_lock+0x8>)
 801dc9e:	f000 beca 	b.w	801ea36 <__retarget_lock_acquire_recursive>
 801dca2:	bf00      	nop
 801dca4:	20004474 	.word	0x20004474

0801dca8 <__malloc_unlock>:
 801dca8:	4801      	ldr	r0, [pc, #4]	; (801dcb0 <__malloc_unlock+0x8>)
 801dcaa:	f000 bec5 	b.w	801ea38 <__retarget_lock_release_recursive>
 801dcae:	bf00      	nop
 801dcb0:	20004474 	.word	0x20004474

0801dcb4 <_Balloc>:
 801dcb4:	b570      	push	{r4, r5, r6, lr}
 801dcb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801dcb8:	4604      	mov	r4, r0
 801dcba:	460d      	mov	r5, r1
 801dcbc:	b976      	cbnz	r6, 801dcdc <_Balloc+0x28>
 801dcbe:	2010      	movs	r0, #16
 801dcc0:	f7fc ff4c 	bl	801ab5c <malloc>
 801dcc4:	4602      	mov	r2, r0
 801dcc6:	6260      	str	r0, [r4, #36]	; 0x24
 801dcc8:	b920      	cbnz	r0, 801dcd4 <_Balloc+0x20>
 801dcca:	4b18      	ldr	r3, [pc, #96]	; (801dd2c <_Balloc+0x78>)
 801dccc:	2166      	movs	r1, #102	; 0x66
 801dcce:	4818      	ldr	r0, [pc, #96]	; (801dd30 <_Balloc+0x7c>)
 801dcd0:	f000 fe80 	bl	801e9d4 <__assert_func>
 801dcd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dcd8:	6006      	str	r6, [r0, #0]
 801dcda:	60c6      	str	r6, [r0, #12]
 801dcdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801dcde:	68f3      	ldr	r3, [r6, #12]
 801dce0:	b183      	cbz	r3, 801dd04 <_Balloc+0x50>
 801dce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dce4:	68db      	ldr	r3, [r3, #12]
 801dce6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801dcea:	b9b8      	cbnz	r0, 801dd1c <_Balloc+0x68>
 801dcec:	2101      	movs	r1, #1
 801dcee:	4620      	mov	r0, r4
 801dcf0:	fa01 f605 	lsl.w	r6, r1, r5
 801dcf4:	1d72      	adds	r2, r6, #5
 801dcf6:	0092      	lsls	r2, r2, #2
 801dcf8:	f000 fca1 	bl	801e63e <_calloc_r>
 801dcfc:	b160      	cbz	r0, 801dd18 <_Balloc+0x64>
 801dcfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801dd02:	e00e      	b.n	801dd22 <_Balloc+0x6e>
 801dd04:	2221      	movs	r2, #33	; 0x21
 801dd06:	2104      	movs	r1, #4
 801dd08:	4620      	mov	r0, r4
 801dd0a:	f000 fc98 	bl	801e63e <_calloc_r>
 801dd0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dd10:	60f0      	str	r0, [r6, #12]
 801dd12:	68db      	ldr	r3, [r3, #12]
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	d1e4      	bne.n	801dce2 <_Balloc+0x2e>
 801dd18:	2000      	movs	r0, #0
 801dd1a:	bd70      	pop	{r4, r5, r6, pc}
 801dd1c:	6802      	ldr	r2, [r0, #0]
 801dd1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801dd22:	2300      	movs	r3, #0
 801dd24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801dd28:	e7f7      	b.n	801dd1a <_Balloc+0x66>
 801dd2a:	bf00      	nop
 801dd2c:	08074836 	.word	0x08074836
 801dd30:	08074934 	.word	0x08074934

0801dd34 <_Bfree>:
 801dd34:	b570      	push	{r4, r5, r6, lr}
 801dd36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801dd38:	4605      	mov	r5, r0
 801dd3a:	460c      	mov	r4, r1
 801dd3c:	b976      	cbnz	r6, 801dd5c <_Bfree+0x28>
 801dd3e:	2010      	movs	r0, #16
 801dd40:	f7fc ff0c 	bl	801ab5c <malloc>
 801dd44:	4602      	mov	r2, r0
 801dd46:	6268      	str	r0, [r5, #36]	; 0x24
 801dd48:	b920      	cbnz	r0, 801dd54 <_Bfree+0x20>
 801dd4a:	4b09      	ldr	r3, [pc, #36]	; (801dd70 <_Bfree+0x3c>)
 801dd4c:	218a      	movs	r1, #138	; 0x8a
 801dd4e:	4809      	ldr	r0, [pc, #36]	; (801dd74 <_Bfree+0x40>)
 801dd50:	f000 fe40 	bl	801e9d4 <__assert_func>
 801dd54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dd58:	6006      	str	r6, [r0, #0]
 801dd5a:	60c6      	str	r6, [r0, #12]
 801dd5c:	b13c      	cbz	r4, 801dd6e <_Bfree+0x3a>
 801dd5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801dd60:	6862      	ldr	r2, [r4, #4]
 801dd62:	68db      	ldr	r3, [r3, #12]
 801dd64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801dd68:	6021      	str	r1, [r4, #0]
 801dd6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801dd6e:	bd70      	pop	{r4, r5, r6, pc}
 801dd70:	08074836 	.word	0x08074836
 801dd74:	08074934 	.word	0x08074934

0801dd78 <__multadd>:
 801dd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd7c:	f101 0c14 	add.w	ip, r1, #20
 801dd80:	4607      	mov	r7, r0
 801dd82:	460c      	mov	r4, r1
 801dd84:	461e      	mov	r6, r3
 801dd86:	690d      	ldr	r5, [r1, #16]
 801dd88:	2000      	movs	r0, #0
 801dd8a:	f8dc 3000 	ldr.w	r3, [ip]
 801dd8e:	3001      	adds	r0, #1
 801dd90:	b299      	uxth	r1, r3
 801dd92:	4285      	cmp	r5, r0
 801dd94:	fb02 6101 	mla	r1, r2, r1, r6
 801dd98:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801dd9c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801dda0:	b289      	uxth	r1, r1
 801dda2:	fb02 3306 	mla	r3, r2, r6, r3
 801dda6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ddaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ddae:	f84c 1b04 	str.w	r1, [ip], #4
 801ddb2:	dcea      	bgt.n	801dd8a <__multadd+0x12>
 801ddb4:	b30e      	cbz	r6, 801ddfa <__multadd+0x82>
 801ddb6:	68a3      	ldr	r3, [r4, #8]
 801ddb8:	42ab      	cmp	r3, r5
 801ddba:	dc19      	bgt.n	801ddf0 <__multadd+0x78>
 801ddbc:	6861      	ldr	r1, [r4, #4]
 801ddbe:	4638      	mov	r0, r7
 801ddc0:	3101      	adds	r1, #1
 801ddc2:	f7ff ff77 	bl	801dcb4 <_Balloc>
 801ddc6:	4680      	mov	r8, r0
 801ddc8:	b928      	cbnz	r0, 801ddd6 <__multadd+0x5e>
 801ddca:	4602      	mov	r2, r0
 801ddcc:	4b0c      	ldr	r3, [pc, #48]	; (801de00 <__multadd+0x88>)
 801ddce:	21b5      	movs	r1, #181	; 0xb5
 801ddd0:	480c      	ldr	r0, [pc, #48]	; (801de04 <__multadd+0x8c>)
 801ddd2:	f000 fdff 	bl	801e9d4 <__assert_func>
 801ddd6:	6922      	ldr	r2, [r4, #16]
 801ddd8:	f104 010c 	add.w	r1, r4, #12
 801dddc:	300c      	adds	r0, #12
 801ddde:	3202      	adds	r2, #2
 801dde0:	0092      	lsls	r2, r2, #2
 801dde2:	f7fc fec3 	bl	801ab6c <memcpy>
 801dde6:	4621      	mov	r1, r4
 801dde8:	4644      	mov	r4, r8
 801ddea:	4638      	mov	r0, r7
 801ddec:	f7ff ffa2 	bl	801dd34 <_Bfree>
 801ddf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ddf4:	3501      	adds	r5, #1
 801ddf6:	615e      	str	r6, [r3, #20]
 801ddf8:	6125      	str	r5, [r4, #16]
 801ddfa:	4620      	mov	r0, r4
 801ddfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de00:	080748a8 	.word	0x080748a8
 801de04:	08074934 	.word	0x08074934

0801de08 <__s2b>:
 801de08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de0c:	4615      	mov	r5, r2
 801de0e:	461f      	mov	r7, r3
 801de10:	2209      	movs	r2, #9
 801de12:	3308      	adds	r3, #8
 801de14:	460c      	mov	r4, r1
 801de16:	4606      	mov	r6, r0
 801de18:	2100      	movs	r1, #0
 801de1a:	fb93 f3f2 	sdiv	r3, r3, r2
 801de1e:	2201      	movs	r2, #1
 801de20:	429a      	cmp	r2, r3
 801de22:	db09      	blt.n	801de38 <__s2b+0x30>
 801de24:	4630      	mov	r0, r6
 801de26:	f7ff ff45 	bl	801dcb4 <_Balloc>
 801de2a:	b940      	cbnz	r0, 801de3e <__s2b+0x36>
 801de2c:	4602      	mov	r2, r0
 801de2e:	4b19      	ldr	r3, [pc, #100]	; (801de94 <__s2b+0x8c>)
 801de30:	21ce      	movs	r1, #206	; 0xce
 801de32:	4819      	ldr	r0, [pc, #100]	; (801de98 <__s2b+0x90>)
 801de34:	f000 fdce 	bl	801e9d4 <__assert_func>
 801de38:	0052      	lsls	r2, r2, #1
 801de3a:	3101      	adds	r1, #1
 801de3c:	e7f0      	b.n	801de20 <__s2b+0x18>
 801de3e:	9b08      	ldr	r3, [sp, #32]
 801de40:	2d09      	cmp	r5, #9
 801de42:	6143      	str	r3, [r0, #20]
 801de44:	f04f 0301 	mov.w	r3, #1
 801de48:	6103      	str	r3, [r0, #16]
 801de4a:	dd16      	ble.n	801de7a <__s2b+0x72>
 801de4c:	f104 0909 	add.w	r9, r4, #9
 801de50:	442c      	add	r4, r5
 801de52:	46c8      	mov	r8, r9
 801de54:	f818 3b01 	ldrb.w	r3, [r8], #1
 801de58:	4601      	mov	r1, r0
 801de5a:	220a      	movs	r2, #10
 801de5c:	4630      	mov	r0, r6
 801de5e:	3b30      	subs	r3, #48	; 0x30
 801de60:	f7ff ff8a 	bl	801dd78 <__multadd>
 801de64:	45a0      	cmp	r8, r4
 801de66:	d1f5      	bne.n	801de54 <__s2b+0x4c>
 801de68:	f1a5 0408 	sub.w	r4, r5, #8
 801de6c:	444c      	add	r4, r9
 801de6e:	1b2d      	subs	r5, r5, r4
 801de70:	1963      	adds	r3, r4, r5
 801de72:	42bb      	cmp	r3, r7
 801de74:	db04      	blt.n	801de80 <__s2b+0x78>
 801de76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de7a:	340a      	adds	r4, #10
 801de7c:	2509      	movs	r5, #9
 801de7e:	e7f6      	b.n	801de6e <__s2b+0x66>
 801de80:	f814 3b01 	ldrb.w	r3, [r4], #1
 801de84:	4601      	mov	r1, r0
 801de86:	220a      	movs	r2, #10
 801de88:	4630      	mov	r0, r6
 801de8a:	3b30      	subs	r3, #48	; 0x30
 801de8c:	f7ff ff74 	bl	801dd78 <__multadd>
 801de90:	e7ee      	b.n	801de70 <__s2b+0x68>
 801de92:	bf00      	nop
 801de94:	080748a8 	.word	0x080748a8
 801de98:	08074934 	.word	0x08074934

0801de9c <__hi0bits>:
 801de9c:	0c03      	lsrs	r3, r0, #16
 801de9e:	041b      	lsls	r3, r3, #16
 801dea0:	b9d3      	cbnz	r3, 801ded8 <__hi0bits+0x3c>
 801dea2:	0400      	lsls	r0, r0, #16
 801dea4:	2310      	movs	r3, #16
 801dea6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801deaa:	bf04      	itt	eq
 801deac:	0200      	lsleq	r0, r0, #8
 801deae:	3308      	addeq	r3, #8
 801deb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801deb4:	bf04      	itt	eq
 801deb6:	0100      	lsleq	r0, r0, #4
 801deb8:	3304      	addeq	r3, #4
 801deba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801debe:	bf04      	itt	eq
 801dec0:	0080      	lsleq	r0, r0, #2
 801dec2:	3302      	addeq	r3, #2
 801dec4:	2800      	cmp	r0, #0
 801dec6:	db05      	blt.n	801ded4 <__hi0bits+0x38>
 801dec8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801decc:	f103 0301 	add.w	r3, r3, #1
 801ded0:	bf08      	it	eq
 801ded2:	2320      	moveq	r3, #32
 801ded4:	4618      	mov	r0, r3
 801ded6:	4770      	bx	lr
 801ded8:	2300      	movs	r3, #0
 801deda:	e7e4      	b.n	801dea6 <__hi0bits+0xa>

0801dedc <__lo0bits>:
 801dedc:	6803      	ldr	r3, [r0, #0]
 801dede:	4601      	mov	r1, r0
 801dee0:	f013 0207 	ands.w	r2, r3, #7
 801dee4:	d00b      	beq.n	801defe <__lo0bits+0x22>
 801dee6:	07da      	lsls	r2, r3, #31
 801dee8:	d423      	bmi.n	801df32 <__lo0bits+0x56>
 801deea:	0798      	lsls	r0, r3, #30
 801deec:	bf47      	ittee	mi
 801deee:	085b      	lsrmi	r3, r3, #1
 801def0:	2001      	movmi	r0, #1
 801def2:	089b      	lsrpl	r3, r3, #2
 801def4:	2002      	movpl	r0, #2
 801def6:	bf4c      	ite	mi
 801def8:	600b      	strmi	r3, [r1, #0]
 801defa:	600b      	strpl	r3, [r1, #0]
 801defc:	4770      	bx	lr
 801defe:	b298      	uxth	r0, r3
 801df00:	b9a8      	cbnz	r0, 801df2e <__lo0bits+0x52>
 801df02:	0c1b      	lsrs	r3, r3, #16
 801df04:	2010      	movs	r0, #16
 801df06:	b2da      	uxtb	r2, r3
 801df08:	b90a      	cbnz	r2, 801df0e <__lo0bits+0x32>
 801df0a:	3008      	adds	r0, #8
 801df0c:	0a1b      	lsrs	r3, r3, #8
 801df0e:	071a      	lsls	r2, r3, #28
 801df10:	bf04      	itt	eq
 801df12:	091b      	lsreq	r3, r3, #4
 801df14:	3004      	addeq	r0, #4
 801df16:	079a      	lsls	r2, r3, #30
 801df18:	bf04      	itt	eq
 801df1a:	089b      	lsreq	r3, r3, #2
 801df1c:	3002      	addeq	r0, #2
 801df1e:	07da      	lsls	r2, r3, #31
 801df20:	d403      	bmi.n	801df2a <__lo0bits+0x4e>
 801df22:	085b      	lsrs	r3, r3, #1
 801df24:	f100 0001 	add.w	r0, r0, #1
 801df28:	d005      	beq.n	801df36 <__lo0bits+0x5a>
 801df2a:	600b      	str	r3, [r1, #0]
 801df2c:	4770      	bx	lr
 801df2e:	4610      	mov	r0, r2
 801df30:	e7e9      	b.n	801df06 <__lo0bits+0x2a>
 801df32:	2000      	movs	r0, #0
 801df34:	4770      	bx	lr
 801df36:	2020      	movs	r0, #32
 801df38:	4770      	bx	lr
	...

0801df3c <__i2b>:
 801df3c:	b510      	push	{r4, lr}
 801df3e:	460c      	mov	r4, r1
 801df40:	2101      	movs	r1, #1
 801df42:	f7ff feb7 	bl	801dcb4 <_Balloc>
 801df46:	4602      	mov	r2, r0
 801df48:	b928      	cbnz	r0, 801df56 <__i2b+0x1a>
 801df4a:	4b05      	ldr	r3, [pc, #20]	; (801df60 <__i2b+0x24>)
 801df4c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801df50:	4804      	ldr	r0, [pc, #16]	; (801df64 <__i2b+0x28>)
 801df52:	f000 fd3f 	bl	801e9d4 <__assert_func>
 801df56:	2301      	movs	r3, #1
 801df58:	6144      	str	r4, [r0, #20]
 801df5a:	6103      	str	r3, [r0, #16]
 801df5c:	bd10      	pop	{r4, pc}
 801df5e:	bf00      	nop
 801df60:	080748a8 	.word	0x080748a8
 801df64:	08074934 	.word	0x08074934

0801df68 <__multiply>:
 801df68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df6c:	4691      	mov	r9, r2
 801df6e:	690a      	ldr	r2, [r1, #16]
 801df70:	460c      	mov	r4, r1
 801df72:	b085      	sub	sp, #20
 801df74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801df78:	429a      	cmp	r2, r3
 801df7a:	bfbe      	ittt	lt
 801df7c:	460b      	movlt	r3, r1
 801df7e:	464c      	movlt	r4, r9
 801df80:	4699      	movlt	r9, r3
 801df82:	6927      	ldr	r7, [r4, #16]
 801df84:	68a3      	ldr	r3, [r4, #8]
 801df86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801df8a:	6861      	ldr	r1, [r4, #4]
 801df8c:	eb07 060a 	add.w	r6, r7, sl
 801df90:	42b3      	cmp	r3, r6
 801df92:	bfb8      	it	lt
 801df94:	3101      	addlt	r1, #1
 801df96:	f7ff fe8d 	bl	801dcb4 <_Balloc>
 801df9a:	b930      	cbnz	r0, 801dfaa <__multiply+0x42>
 801df9c:	4602      	mov	r2, r0
 801df9e:	4b44      	ldr	r3, [pc, #272]	; (801e0b0 <__multiply+0x148>)
 801dfa0:	f240 115d 	movw	r1, #349	; 0x15d
 801dfa4:	4843      	ldr	r0, [pc, #268]	; (801e0b4 <__multiply+0x14c>)
 801dfa6:	f000 fd15 	bl	801e9d4 <__assert_func>
 801dfaa:	f100 0514 	add.w	r5, r0, #20
 801dfae:	2200      	movs	r2, #0
 801dfb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801dfb4:	462b      	mov	r3, r5
 801dfb6:	4543      	cmp	r3, r8
 801dfb8:	d321      	bcc.n	801dffe <__multiply+0x96>
 801dfba:	f104 0314 	add.w	r3, r4, #20
 801dfbe:	f104 0115 	add.w	r1, r4, #21
 801dfc2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801dfc6:	f109 0314 	add.w	r3, r9, #20
 801dfca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801dfce:	9202      	str	r2, [sp, #8]
 801dfd0:	1b3a      	subs	r2, r7, r4
 801dfd2:	3a15      	subs	r2, #21
 801dfd4:	f022 0203 	bic.w	r2, r2, #3
 801dfd8:	3204      	adds	r2, #4
 801dfda:	428f      	cmp	r7, r1
 801dfdc:	bf38      	it	cc
 801dfde:	2204      	movcc	r2, #4
 801dfe0:	9201      	str	r2, [sp, #4]
 801dfe2:	9a02      	ldr	r2, [sp, #8]
 801dfe4:	9303      	str	r3, [sp, #12]
 801dfe6:	429a      	cmp	r2, r3
 801dfe8:	d80c      	bhi.n	801e004 <__multiply+0x9c>
 801dfea:	2e00      	cmp	r6, #0
 801dfec:	dd03      	ble.n	801dff6 <__multiply+0x8e>
 801dfee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d05a      	beq.n	801e0ac <__multiply+0x144>
 801dff6:	6106      	str	r6, [r0, #16]
 801dff8:	b005      	add	sp, #20
 801dffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dffe:	f843 2b04 	str.w	r2, [r3], #4
 801e002:	e7d8      	b.n	801dfb6 <__multiply+0x4e>
 801e004:	f8b3 a000 	ldrh.w	sl, [r3]
 801e008:	f1ba 0f00 	cmp.w	sl, #0
 801e00c:	d024      	beq.n	801e058 <__multiply+0xf0>
 801e00e:	f104 0e14 	add.w	lr, r4, #20
 801e012:	46a9      	mov	r9, r5
 801e014:	f04f 0c00 	mov.w	ip, #0
 801e018:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e01c:	f8d9 1000 	ldr.w	r1, [r9]
 801e020:	fa1f fb82 	uxth.w	fp, r2
 801e024:	4577      	cmp	r7, lr
 801e026:	b289      	uxth	r1, r1
 801e028:	fb0a 110b 	mla	r1, sl, fp, r1
 801e02c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801e030:	f8d9 2000 	ldr.w	r2, [r9]
 801e034:	4461      	add	r1, ip
 801e036:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e03a:	fb0a c20b 	mla	r2, sl, fp, ip
 801e03e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e042:	b289      	uxth	r1, r1
 801e044:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e048:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e04c:	f849 1b04 	str.w	r1, [r9], #4
 801e050:	d8e2      	bhi.n	801e018 <__multiply+0xb0>
 801e052:	9a01      	ldr	r2, [sp, #4]
 801e054:	f845 c002 	str.w	ip, [r5, r2]
 801e058:	9a03      	ldr	r2, [sp, #12]
 801e05a:	3304      	adds	r3, #4
 801e05c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e060:	f1b9 0f00 	cmp.w	r9, #0
 801e064:	d020      	beq.n	801e0a8 <__multiply+0x140>
 801e066:	6829      	ldr	r1, [r5, #0]
 801e068:	f104 0c14 	add.w	ip, r4, #20
 801e06c:	46ae      	mov	lr, r5
 801e06e:	f04f 0a00 	mov.w	sl, #0
 801e072:	f8bc b000 	ldrh.w	fp, [ip]
 801e076:	b289      	uxth	r1, r1
 801e078:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e07c:	fb09 220b 	mla	r2, r9, fp, r2
 801e080:	4492      	add	sl, r2
 801e082:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801e086:	f84e 1b04 	str.w	r1, [lr], #4
 801e08a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e08e:	f8be 1000 	ldrh.w	r1, [lr]
 801e092:	0c12      	lsrs	r2, r2, #16
 801e094:	4567      	cmp	r7, ip
 801e096:	fb09 1102 	mla	r1, r9, r2, r1
 801e09a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801e09e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e0a2:	d8e6      	bhi.n	801e072 <__multiply+0x10a>
 801e0a4:	9a01      	ldr	r2, [sp, #4]
 801e0a6:	50a9      	str	r1, [r5, r2]
 801e0a8:	3504      	adds	r5, #4
 801e0aa:	e79a      	b.n	801dfe2 <__multiply+0x7a>
 801e0ac:	3e01      	subs	r6, #1
 801e0ae:	e79c      	b.n	801dfea <__multiply+0x82>
 801e0b0:	080748a8 	.word	0x080748a8
 801e0b4:	08074934 	.word	0x08074934

0801e0b8 <__pow5mult>:
 801e0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e0bc:	4615      	mov	r5, r2
 801e0be:	f012 0203 	ands.w	r2, r2, #3
 801e0c2:	4606      	mov	r6, r0
 801e0c4:	460f      	mov	r7, r1
 801e0c6:	d007      	beq.n	801e0d8 <__pow5mult+0x20>
 801e0c8:	3a01      	subs	r2, #1
 801e0ca:	4c25      	ldr	r4, [pc, #148]	; (801e160 <__pow5mult+0xa8>)
 801e0cc:	2300      	movs	r3, #0
 801e0ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e0d2:	f7ff fe51 	bl	801dd78 <__multadd>
 801e0d6:	4607      	mov	r7, r0
 801e0d8:	10ad      	asrs	r5, r5, #2
 801e0da:	d03d      	beq.n	801e158 <__pow5mult+0xa0>
 801e0dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e0de:	b97c      	cbnz	r4, 801e100 <__pow5mult+0x48>
 801e0e0:	2010      	movs	r0, #16
 801e0e2:	f7fc fd3b 	bl	801ab5c <malloc>
 801e0e6:	4602      	mov	r2, r0
 801e0e8:	6270      	str	r0, [r6, #36]	; 0x24
 801e0ea:	b928      	cbnz	r0, 801e0f8 <__pow5mult+0x40>
 801e0ec:	4b1d      	ldr	r3, [pc, #116]	; (801e164 <__pow5mult+0xac>)
 801e0ee:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e0f2:	481d      	ldr	r0, [pc, #116]	; (801e168 <__pow5mult+0xb0>)
 801e0f4:	f000 fc6e 	bl	801e9d4 <__assert_func>
 801e0f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e0fc:	6004      	str	r4, [r0, #0]
 801e0fe:	60c4      	str	r4, [r0, #12]
 801e100:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e108:	b94c      	cbnz	r4, 801e11e <__pow5mult+0x66>
 801e10a:	f240 2171 	movw	r1, #625	; 0x271
 801e10e:	4630      	mov	r0, r6
 801e110:	f7ff ff14 	bl	801df3c <__i2b>
 801e114:	2300      	movs	r3, #0
 801e116:	4604      	mov	r4, r0
 801e118:	f8c8 0008 	str.w	r0, [r8, #8]
 801e11c:	6003      	str	r3, [r0, #0]
 801e11e:	f04f 0900 	mov.w	r9, #0
 801e122:	07eb      	lsls	r3, r5, #31
 801e124:	d50a      	bpl.n	801e13c <__pow5mult+0x84>
 801e126:	4639      	mov	r1, r7
 801e128:	4622      	mov	r2, r4
 801e12a:	4630      	mov	r0, r6
 801e12c:	f7ff ff1c 	bl	801df68 <__multiply>
 801e130:	4680      	mov	r8, r0
 801e132:	4639      	mov	r1, r7
 801e134:	4630      	mov	r0, r6
 801e136:	4647      	mov	r7, r8
 801e138:	f7ff fdfc 	bl	801dd34 <_Bfree>
 801e13c:	106d      	asrs	r5, r5, #1
 801e13e:	d00b      	beq.n	801e158 <__pow5mult+0xa0>
 801e140:	6820      	ldr	r0, [r4, #0]
 801e142:	b938      	cbnz	r0, 801e154 <__pow5mult+0x9c>
 801e144:	4622      	mov	r2, r4
 801e146:	4621      	mov	r1, r4
 801e148:	4630      	mov	r0, r6
 801e14a:	f7ff ff0d 	bl	801df68 <__multiply>
 801e14e:	6020      	str	r0, [r4, #0]
 801e150:	f8c0 9000 	str.w	r9, [r0]
 801e154:	4604      	mov	r4, r0
 801e156:	e7e4      	b.n	801e122 <__pow5mult+0x6a>
 801e158:	4638      	mov	r0, r7
 801e15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e15e:	bf00      	nop
 801e160:	08074a80 	.word	0x08074a80
 801e164:	08074836 	.word	0x08074836
 801e168:	08074934 	.word	0x08074934

0801e16c <__lshift>:
 801e16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e170:	460c      	mov	r4, r1
 801e172:	4607      	mov	r7, r0
 801e174:	4691      	mov	r9, r2
 801e176:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e17a:	6923      	ldr	r3, [r4, #16]
 801e17c:	6849      	ldr	r1, [r1, #4]
 801e17e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e182:	68a3      	ldr	r3, [r4, #8]
 801e184:	f108 0601 	add.w	r6, r8, #1
 801e188:	42b3      	cmp	r3, r6
 801e18a:	db0b      	blt.n	801e1a4 <__lshift+0x38>
 801e18c:	4638      	mov	r0, r7
 801e18e:	f7ff fd91 	bl	801dcb4 <_Balloc>
 801e192:	4605      	mov	r5, r0
 801e194:	b948      	cbnz	r0, 801e1aa <__lshift+0x3e>
 801e196:	4602      	mov	r2, r0
 801e198:	4b2a      	ldr	r3, [pc, #168]	; (801e244 <__lshift+0xd8>)
 801e19a:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e19e:	482a      	ldr	r0, [pc, #168]	; (801e248 <__lshift+0xdc>)
 801e1a0:	f000 fc18 	bl	801e9d4 <__assert_func>
 801e1a4:	3101      	adds	r1, #1
 801e1a6:	005b      	lsls	r3, r3, #1
 801e1a8:	e7ee      	b.n	801e188 <__lshift+0x1c>
 801e1aa:	2300      	movs	r3, #0
 801e1ac:	f100 0114 	add.w	r1, r0, #20
 801e1b0:	f100 0210 	add.w	r2, r0, #16
 801e1b4:	4618      	mov	r0, r3
 801e1b6:	4553      	cmp	r3, sl
 801e1b8:	db37      	blt.n	801e22a <__lshift+0xbe>
 801e1ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e1be:	f104 0314 	add.w	r3, r4, #20
 801e1c2:	6920      	ldr	r0, [r4, #16]
 801e1c4:	f019 091f 	ands.w	r9, r9, #31
 801e1c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e1cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e1d0:	d02f      	beq.n	801e232 <__lshift+0xc6>
 801e1d2:	f1c9 0e20 	rsb	lr, r9, #32
 801e1d6:	468a      	mov	sl, r1
 801e1d8:	f04f 0c00 	mov.w	ip, #0
 801e1dc:	681a      	ldr	r2, [r3, #0]
 801e1de:	fa02 f209 	lsl.w	r2, r2, r9
 801e1e2:	ea42 020c 	orr.w	r2, r2, ip
 801e1e6:	f84a 2b04 	str.w	r2, [sl], #4
 801e1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801e1ee:	4298      	cmp	r0, r3
 801e1f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801e1f4:	d8f2      	bhi.n	801e1dc <__lshift+0x70>
 801e1f6:	1b03      	subs	r3, r0, r4
 801e1f8:	f104 0215 	add.w	r2, r4, #21
 801e1fc:	3b15      	subs	r3, #21
 801e1fe:	f023 0303 	bic.w	r3, r3, #3
 801e202:	3304      	adds	r3, #4
 801e204:	4290      	cmp	r0, r2
 801e206:	bf38      	it	cc
 801e208:	2304      	movcc	r3, #4
 801e20a:	f841 c003 	str.w	ip, [r1, r3]
 801e20e:	f1bc 0f00 	cmp.w	ip, #0
 801e212:	d001      	beq.n	801e218 <__lshift+0xac>
 801e214:	f108 0602 	add.w	r6, r8, #2
 801e218:	3e01      	subs	r6, #1
 801e21a:	4638      	mov	r0, r7
 801e21c:	4621      	mov	r1, r4
 801e21e:	612e      	str	r6, [r5, #16]
 801e220:	f7ff fd88 	bl	801dd34 <_Bfree>
 801e224:	4628      	mov	r0, r5
 801e226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e22a:	3301      	adds	r3, #1
 801e22c:	f842 0f04 	str.w	r0, [r2, #4]!
 801e230:	e7c1      	b.n	801e1b6 <__lshift+0x4a>
 801e232:	3904      	subs	r1, #4
 801e234:	f853 2b04 	ldr.w	r2, [r3], #4
 801e238:	4298      	cmp	r0, r3
 801e23a:	f841 2f04 	str.w	r2, [r1, #4]!
 801e23e:	d8f9      	bhi.n	801e234 <__lshift+0xc8>
 801e240:	e7ea      	b.n	801e218 <__lshift+0xac>
 801e242:	bf00      	nop
 801e244:	080748a8 	.word	0x080748a8
 801e248:	08074934 	.word	0x08074934

0801e24c <__mcmp>:
 801e24c:	6902      	ldr	r2, [r0, #16]
 801e24e:	b530      	push	{r4, r5, lr}
 801e250:	690c      	ldr	r4, [r1, #16]
 801e252:	1b12      	subs	r2, r2, r4
 801e254:	d10e      	bne.n	801e274 <__mcmp+0x28>
 801e256:	f100 0314 	add.w	r3, r0, #20
 801e25a:	3114      	adds	r1, #20
 801e25c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e260:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e264:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e268:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e26c:	42a5      	cmp	r5, r4
 801e26e:	d003      	beq.n	801e278 <__mcmp+0x2c>
 801e270:	d305      	bcc.n	801e27e <__mcmp+0x32>
 801e272:	2201      	movs	r2, #1
 801e274:	4610      	mov	r0, r2
 801e276:	bd30      	pop	{r4, r5, pc}
 801e278:	4283      	cmp	r3, r0
 801e27a:	d3f3      	bcc.n	801e264 <__mcmp+0x18>
 801e27c:	e7fa      	b.n	801e274 <__mcmp+0x28>
 801e27e:	f04f 32ff 	mov.w	r2, #4294967295
 801e282:	e7f7      	b.n	801e274 <__mcmp+0x28>

0801e284 <__mdiff>:
 801e284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e288:	460c      	mov	r4, r1
 801e28a:	4606      	mov	r6, r0
 801e28c:	4611      	mov	r1, r2
 801e28e:	4692      	mov	sl, r2
 801e290:	4620      	mov	r0, r4
 801e292:	f7ff ffdb 	bl	801e24c <__mcmp>
 801e296:	1e05      	subs	r5, r0, #0
 801e298:	d110      	bne.n	801e2bc <__mdiff+0x38>
 801e29a:	4629      	mov	r1, r5
 801e29c:	4630      	mov	r0, r6
 801e29e:	f7ff fd09 	bl	801dcb4 <_Balloc>
 801e2a2:	b930      	cbnz	r0, 801e2b2 <__mdiff+0x2e>
 801e2a4:	4b3d      	ldr	r3, [pc, #244]	; (801e39c <__mdiff+0x118>)
 801e2a6:	4602      	mov	r2, r0
 801e2a8:	f240 2132 	movw	r1, #562	; 0x232
 801e2ac:	483c      	ldr	r0, [pc, #240]	; (801e3a0 <__mdiff+0x11c>)
 801e2ae:	f000 fb91 	bl	801e9d4 <__assert_func>
 801e2b2:	2301      	movs	r3, #1
 801e2b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e2b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2bc:	bfa4      	itt	ge
 801e2be:	4653      	movge	r3, sl
 801e2c0:	46a2      	movge	sl, r4
 801e2c2:	4630      	mov	r0, r6
 801e2c4:	bfa8      	it	ge
 801e2c6:	2500      	movge	r5, #0
 801e2c8:	f8da 1004 	ldr.w	r1, [sl, #4]
 801e2cc:	bfac      	ite	ge
 801e2ce:	461c      	movge	r4, r3
 801e2d0:	2501      	movlt	r5, #1
 801e2d2:	f7ff fcef 	bl	801dcb4 <_Balloc>
 801e2d6:	b920      	cbnz	r0, 801e2e2 <__mdiff+0x5e>
 801e2d8:	4b30      	ldr	r3, [pc, #192]	; (801e39c <__mdiff+0x118>)
 801e2da:	4602      	mov	r2, r0
 801e2dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e2e0:	e7e4      	b.n	801e2ac <__mdiff+0x28>
 801e2e2:	f8da 7010 	ldr.w	r7, [sl, #16]
 801e2e6:	f104 0914 	add.w	r9, r4, #20
 801e2ea:	6926      	ldr	r6, [r4, #16]
 801e2ec:	f100 0814 	add.w	r8, r0, #20
 801e2f0:	60c5      	str	r5, [r0, #12]
 801e2f2:	f10a 0514 	add.w	r5, sl, #20
 801e2f6:	f10a 0210 	add.w	r2, sl, #16
 801e2fa:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e2fe:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 801e302:	46c2      	mov	sl, r8
 801e304:	f04f 0c00 	mov.w	ip, #0
 801e308:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e30c:	f859 3b04 	ldr.w	r3, [r9], #4
 801e310:	fa1f f18b 	uxth.w	r1, fp
 801e314:	454e      	cmp	r6, r9
 801e316:	448c      	add	ip, r1
 801e318:	b299      	uxth	r1, r3
 801e31a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801e31e:	ebac 0101 	sub.w	r1, ip, r1
 801e322:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e326:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801e32a:	b289      	uxth	r1, r1
 801e32c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801e330:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801e334:	f84a 3b04 	str.w	r3, [sl], #4
 801e338:	d8e6      	bhi.n	801e308 <__mdiff+0x84>
 801e33a:	1b33      	subs	r3, r6, r4
 801e33c:	3415      	adds	r4, #21
 801e33e:	3b15      	subs	r3, #21
 801e340:	f023 0303 	bic.w	r3, r3, #3
 801e344:	3304      	adds	r3, #4
 801e346:	42a6      	cmp	r6, r4
 801e348:	bf38      	it	cc
 801e34a:	2304      	movcc	r3, #4
 801e34c:	441d      	add	r5, r3
 801e34e:	4443      	add	r3, r8
 801e350:	462c      	mov	r4, r5
 801e352:	461e      	mov	r6, r3
 801e354:	4574      	cmp	r4, lr
 801e356:	d30e      	bcc.n	801e376 <__mdiff+0xf2>
 801e358:	f10e 0203 	add.w	r2, lr, #3
 801e35c:	1b52      	subs	r2, r2, r5
 801e35e:	3d03      	subs	r5, #3
 801e360:	f022 0203 	bic.w	r2, r2, #3
 801e364:	45ae      	cmp	lr, r5
 801e366:	bf38      	it	cc
 801e368:	2200      	movcc	r2, #0
 801e36a:	441a      	add	r2, r3
 801e36c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e370:	b18b      	cbz	r3, 801e396 <__mdiff+0x112>
 801e372:	6107      	str	r7, [r0, #16]
 801e374:	e7a0      	b.n	801e2b8 <__mdiff+0x34>
 801e376:	f854 8b04 	ldr.w	r8, [r4], #4
 801e37a:	fa1f f288 	uxth.w	r2, r8
 801e37e:	4462      	add	r2, ip
 801e380:	1411      	asrs	r1, r2, #16
 801e382:	b292      	uxth	r2, r2
 801e384:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 801e388:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801e38c:	ea4f 4c21 	mov.w	ip, r1, asr #16
 801e390:	f846 2b04 	str.w	r2, [r6], #4
 801e394:	e7de      	b.n	801e354 <__mdiff+0xd0>
 801e396:	3f01      	subs	r7, #1
 801e398:	e7e8      	b.n	801e36c <__mdiff+0xe8>
 801e39a:	bf00      	nop
 801e39c:	080748a8 	.word	0x080748a8
 801e3a0:	08074934 	.word	0x08074934

0801e3a4 <__ulp>:
 801e3a4:	b082      	sub	sp, #8
 801e3a6:	4913      	ldr	r1, [pc, #76]	; (801e3f4 <__ulp+0x50>)
 801e3a8:	ed8d 0b00 	vstr	d0, [sp]
 801e3ac:	9b01      	ldr	r3, [sp, #4]
 801e3ae:	4019      	ands	r1, r3
 801e3b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e3b4:	2900      	cmp	r1, #0
 801e3b6:	dd05      	ble.n	801e3c4 <__ulp+0x20>
 801e3b8:	2200      	movs	r2, #0
 801e3ba:	460b      	mov	r3, r1
 801e3bc:	ec43 2b10 	vmov	d0, r2, r3
 801e3c0:	b002      	add	sp, #8
 801e3c2:	4770      	bx	lr
 801e3c4:	4249      	negs	r1, r1
 801e3c6:	2200      	movs	r2, #0
 801e3c8:	2300      	movs	r3, #0
 801e3ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e3ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e3d2:	da04      	bge.n	801e3de <__ulp+0x3a>
 801e3d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e3d8:	fa41 f300 	asr.w	r3, r1, r0
 801e3dc:	e7ee      	b.n	801e3bc <__ulp+0x18>
 801e3de:	f1a0 0114 	sub.w	r1, r0, #20
 801e3e2:	291e      	cmp	r1, #30
 801e3e4:	bfd6      	itet	le
 801e3e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e3ea:	2101      	movgt	r1, #1
 801e3ec:	fa20 f101 	lsrle.w	r1, r0, r1
 801e3f0:	460a      	mov	r2, r1
 801e3f2:	e7e3      	b.n	801e3bc <__ulp+0x18>
 801e3f4:	7ff00000 	.word	0x7ff00000

0801e3f8 <__b2d>:
 801e3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3fa:	6905      	ldr	r5, [r0, #16]
 801e3fc:	f100 0714 	add.w	r7, r0, #20
 801e400:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e404:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e408:	1f2e      	subs	r6, r5, #4
 801e40a:	4620      	mov	r0, r4
 801e40c:	f7ff fd46 	bl	801de9c <__hi0bits>
 801e410:	f1c0 0320 	rsb	r3, r0, #32
 801e414:	280a      	cmp	r0, #10
 801e416:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e494 <__b2d+0x9c>
 801e41a:	600b      	str	r3, [r1, #0]
 801e41c:	dc15      	bgt.n	801e44a <__b2d+0x52>
 801e41e:	f1c0 0e0b 	rsb	lr, r0, #11
 801e422:	42b7      	cmp	r7, r6
 801e424:	f100 0015 	add.w	r0, r0, #21
 801e428:	fa24 f10e 	lsr.w	r1, r4, lr
 801e42c:	fa04 f000 	lsl.w	r0, r4, r0
 801e430:	ea41 030c 	orr.w	r3, r1, ip
 801e434:	bf34      	ite	cc
 801e436:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e43a:	2100      	movcs	r1, #0
 801e43c:	fa21 f10e 	lsr.w	r1, r1, lr
 801e440:	ea40 0201 	orr.w	r2, r0, r1
 801e444:	ec43 2b10 	vmov	d0, r2, r3
 801e448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e44a:	42b7      	cmp	r7, r6
 801e44c:	bf3a      	itte	cc
 801e44e:	f1a5 0608 	subcc.w	r6, r5, #8
 801e452:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e456:	2100      	movcs	r1, #0
 801e458:	380b      	subs	r0, #11
 801e45a:	d017      	beq.n	801e48c <__b2d+0x94>
 801e45c:	f1c0 0c20 	rsb	ip, r0, #32
 801e460:	fa04 f500 	lsl.w	r5, r4, r0
 801e464:	42be      	cmp	r6, r7
 801e466:	fa01 f000 	lsl.w	r0, r1, r0
 801e46a:	fa21 f40c 	lsr.w	r4, r1, ip
 801e46e:	ea45 0504 	orr.w	r5, r5, r4
 801e472:	bf8c      	ite	hi
 801e474:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e478:	2400      	movls	r4, #0
 801e47a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e47e:	fa24 f40c 	lsr.w	r4, r4, ip
 801e482:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e486:	ea40 0204 	orr.w	r2, r0, r4
 801e48a:	e7db      	b.n	801e444 <__b2d+0x4c>
 801e48c:	ea44 030c 	orr.w	r3, r4, ip
 801e490:	460a      	mov	r2, r1
 801e492:	e7d7      	b.n	801e444 <__b2d+0x4c>
 801e494:	3ff00000 	.word	0x3ff00000

0801e498 <__d2b>:
 801e498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e49c:	4689      	mov	r9, r1
 801e49e:	2101      	movs	r1, #1
 801e4a0:	4690      	mov	r8, r2
 801e4a2:	ec57 6b10 	vmov	r6, r7, d0
 801e4a6:	f7ff fc05 	bl	801dcb4 <_Balloc>
 801e4aa:	4604      	mov	r4, r0
 801e4ac:	b930      	cbnz	r0, 801e4bc <__d2b+0x24>
 801e4ae:	4602      	mov	r2, r0
 801e4b0:	4b25      	ldr	r3, [pc, #148]	; (801e548 <__d2b+0xb0>)
 801e4b2:	f240 310a 	movw	r1, #778	; 0x30a
 801e4b6:	4825      	ldr	r0, [pc, #148]	; (801e54c <__d2b+0xb4>)
 801e4b8:	f000 fa8c 	bl	801e9d4 <__assert_func>
 801e4bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e4c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e4c4:	bb35      	cbnz	r5, 801e514 <__d2b+0x7c>
 801e4c6:	2e00      	cmp	r6, #0
 801e4c8:	9301      	str	r3, [sp, #4]
 801e4ca:	d028      	beq.n	801e51e <__d2b+0x86>
 801e4cc:	4668      	mov	r0, sp
 801e4ce:	9600      	str	r6, [sp, #0]
 801e4d0:	f7ff fd04 	bl	801dedc <__lo0bits>
 801e4d4:	9900      	ldr	r1, [sp, #0]
 801e4d6:	b300      	cbz	r0, 801e51a <__d2b+0x82>
 801e4d8:	9a01      	ldr	r2, [sp, #4]
 801e4da:	f1c0 0320 	rsb	r3, r0, #32
 801e4de:	fa02 f303 	lsl.w	r3, r2, r3
 801e4e2:	40c2      	lsrs	r2, r0
 801e4e4:	430b      	orrs	r3, r1
 801e4e6:	9201      	str	r2, [sp, #4]
 801e4e8:	6163      	str	r3, [r4, #20]
 801e4ea:	9b01      	ldr	r3, [sp, #4]
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	61a3      	str	r3, [r4, #24]
 801e4f0:	bf14      	ite	ne
 801e4f2:	2202      	movne	r2, #2
 801e4f4:	2201      	moveq	r2, #1
 801e4f6:	6122      	str	r2, [r4, #16]
 801e4f8:	b1d5      	cbz	r5, 801e530 <__d2b+0x98>
 801e4fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e4fe:	4405      	add	r5, r0
 801e500:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e504:	f8c9 5000 	str.w	r5, [r9]
 801e508:	f8c8 0000 	str.w	r0, [r8]
 801e50c:	4620      	mov	r0, r4
 801e50e:	b003      	add	sp, #12
 801e510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e518:	e7d5      	b.n	801e4c6 <__d2b+0x2e>
 801e51a:	6161      	str	r1, [r4, #20]
 801e51c:	e7e5      	b.n	801e4ea <__d2b+0x52>
 801e51e:	a801      	add	r0, sp, #4
 801e520:	f7ff fcdc 	bl	801dedc <__lo0bits>
 801e524:	9b01      	ldr	r3, [sp, #4]
 801e526:	2201      	movs	r2, #1
 801e528:	3020      	adds	r0, #32
 801e52a:	6163      	str	r3, [r4, #20]
 801e52c:	6122      	str	r2, [r4, #16]
 801e52e:	e7e3      	b.n	801e4f8 <__d2b+0x60>
 801e530:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e534:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e538:	f8c9 0000 	str.w	r0, [r9]
 801e53c:	6918      	ldr	r0, [r3, #16]
 801e53e:	f7ff fcad 	bl	801de9c <__hi0bits>
 801e542:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e546:	e7df      	b.n	801e508 <__d2b+0x70>
 801e548:	080748a8 	.word	0x080748a8
 801e54c:	08074934 	.word	0x08074934

0801e550 <__ratio>:
 801e550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e554:	4688      	mov	r8, r1
 801e556:	4681      	mov	r9, r0
 801e558:	4669      	mov	r1, sp
 801e55a:	f7ff ff4d 	bl	801e3f8 <__b2d>
 801e55e:	a901      	add	r1, sp, #4
 801e560:	4640      	mov	r0, r8
 801e562:	ec55 4b10 	vmov	r4, r5, d0
 801e566:	f7ff ff47 	bl	801e3f8 <__b2d>
 801e56a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e56e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801e572:	462f      	mov	r7, r5
 801e574:	eba3 0c02 	sub.w	ip, r3, r2
 801e578:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e57c:	ec51 0b10 	vmov	r0, r1, d0
 801e580:	1a9b      	subs	r3, r3, r2
 801e582:	468b      	mov	fp, r1
 801e584:	4620      	mov	r0, r4
 801e586:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	bfd5      	itete	le
 801e58e:	460a      	movle	r2, r1
 801e590:	462a      	movgt	r2, r5
 801e592:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e596:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e59a:	bfd8      	it	le
 801e59c:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801e5a0:	ee10 2a10 	vmov	r2, s0
 801e5a4:	4639      	mov	r1, r7
 801e5a6:	465b      	mov	r3, fp
 801e5a8:	f7e2 f954 	bl	8000854 <__aeabi_ddiv>
 801e5ac:	ec41 0b10 	vmov	d0, r0, r1
 801e5b0:	b003      	add	sp, #12
 801e5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e5b6 <__copybits>:
 801e5b6:	3901      	subs	r1, #1
 801e5b8:	f102 0314 	add.w	r3, r2, #20
 801e5bc:	1149      	asrs	r1, r1, #5
 801e5be:	b570      	push	{r4, r5, r6, lr}
 801e5c0:	3101      	adds	r1, #1
 801e5c2:	6914      	ldr	r4, [r2, #16]
 801e5c4:	1f05      	subs	r5, r0, #4
 801e5c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e5ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e5ce:	42a3      	cmp	r3, r4
 801e5d0:	d30c      	bcc.n	801e5ec <__copybits+0x36>
 801e5d2:	1aa3      	subs	r3, r4, r2
 801e5d4:	3211      	adds	r2, #17
 801e5d6:	3b11      	subs	r3, #17
 801e5d8:	f023 0303 	bic.w	r3, r3, #3
 801e5dc:	42a2      	cmp	r2, r4
 801e5de:	bf88      	it	hi
 801e5e0:	2300      	movhi	r3, #0
 801e5e2:	4418      	add	r0, r3
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	4288      	cmp	r0, r1
 801e5e8:	d305      	bcc.n	801e5f6 <__copybits+0x40>
 801e5ea:	bd70      	pop	{r4, r5, r6, pc}
 801e5ec:	f853 6b04 	ldr.w	r6, [r3], #4
 801e5f0:	f845 6f04 	str.w	r6, [r5, #4]!
 801e5f4:	e7eb      	b.n	801e5ce <__copybits+0x18>
 801e5f6:	f840 3b04 	str.w	r3, [r0], #4
 801e5fa:	e7f4      	b.n	801e5e6 <__copybits+0x30>

0801e5fc <__any_on>:
 801e5fc:	f100 0214 	add.w	r2, r0, #20
 801e600:	114b      	asrs	r3, r1, #5
 801e602:	6900      	ldr	r0, [r0, #16]
 801e604:	4298      	cmp	r0, r3
 801e606:	b510      	push	{r4, lr}
 801e608:	db11      	blt.n	801e62e <__any_on+0x32>
 801e60a:	dd0a      	ble.n	801e622 <__any_on+0x26>
 801e60c:	f011 011f 	ands.w	r1, r1, #31
 801e610:	d007      	beq.n	801e622 <__any_on+0x26>
 801e612:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e616:	fa24 f001 	lsr.w	r0, r4, r1
 801e61a:	fa00 f101 	lsl.w	r1, r0, r1
 801e61e:	428c      	cmp	r4, r1
 801e620:	d10b      	bne.n	801e63a <__any_on+0x3e>
 801e622:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e626:	4293      	cmp	r3, r2
 801e628:	d803      	bhi.n	801e632 <__any_on+0x36>
 801e62a:	2000      	movs	r0, #0
 801e62c:	bd10      	pop	{r4, pc}
 801e62e:	4603      	mov	r3, r0
 801e630:	e7f7      	b.n	801e622 <__any_on+0x26>
 801e632:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e636:	2900      	cmp	r1, #0
 801e638:	d0f5      	beq.n	801e626 <__any_on+0x2a>
 801e63a:	2001      	movs	r0, #1
 801e63c:	e7f6      	b.n	801e62c <__any_on+0x30>

0801e63e <_calloc_r>:
 801e63e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e640:	fba1 2402 	umull	r2, r4, r1, r2
 801e644:	b94c      	cbnz	r4, 801e65a <_calloc_r+0x1c>
 801e646:	4611      	mov	r1, r2
 801e648:	9201      	str	r2, [sp, #4]
 801e64a:	f7fc fb11 	bl	801ac70 <_malloc_r>
 801e64e:	9a01      	ldr	r2, [sp, #4]
 801e650:	4605      	mov	r5, r0
 801e652:	b930      	cbnz	r0, 801e662 <_calloc_r+0x24>
 801e654:	4628      	mov	r0, r5
 801e656:	b003      	add	sp, #12
 801e658:	bd30      	pop	{r4, r5, pc}
 801e65a:	220c      	movs	r2, #12
 801e65c:	2500      	movs	r5, #0
 801e65e:	6002      	str	r2, [r0, #0]
 801e660:	e7f8      	b.n	801e654 <_calloc_r+0x16>
 801e662:	4621      	mov	r1, r4
 801e664:	f7fc fa8f 	bl	801ab86 <memset>
 801e668:	e7f4      	b.n	801e654 <_calloc_r+0x16>

0801e66a <_realloc_r>:
 801e66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e66e:	4680      	mov	r8, r0
 801e670:	4614      	mov	r4, r2
 801e672:	460e      	mov	r6, r1
 801e674:	b921      	cbnz	r1, 801e680 <_realloc_r+0x16>
 801e676:	4611      	mov	r1, r2
 801e678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e67c:	f7fc baf8 	b.w	801ac70 <_malloc_r>
 801e680:	b92a      	cbnz	r2, 801e68e <_realloc_r+0x24>
 801e682:	4625      	mov	r5, r4
 801e684:	f7fc fa88 	bl	801ab98 <_free_r>
 801e688:	4628      	mov	r0, r5
 801e68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e68e:	f000 f9ee 	bl	801ea6e <_malloc_usable_size_r>
 801e692:	4284      	cmp	r4, r0
 801e694:	4607      	mov	r7, r0
 801e696:	d802      	bhi.n	801e69e <_realloc_r+0x34>
 801e698:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e69c:	d812      	bhi.n	801e6c4 <_realloc_r+0x5a>
 801e69e:	4621      	mov	r1, r4
 801e6a0:	4640      	mov	r0, r8
 801e6a2:	f7fc fae5 	bl	801ac70 <_malloc_r>
 801e6a6:	4605      	mov	r5, r0
 801e6a8:	2800      	cmp	r0, #0
 801e6aa:	d0ed      	beq.n	801e688 <_realloc_r+0x1e>
 801e6ac:	42bc      	cmp	r4, r7
 801e6ae:	4622      	mov	r2, r4
 801e6b0:	4631      	mov	r1, r6
 801e6b2:	bf28      	it	cs
 801e6b4:	463a      	movcs	r2, r7
 801e6b6:	f7fc fa59 	bl	801ab6c <memcpy>
 801e6ba:	4631      	mov	r1, r6
 801e6bc:	4640      	mov	r0, r8
 801e6be:	f7fc fa6b 	bl	801ab98 <_free_r>
 801e6c2:	e7e1      	b.n	801e688 <_realloc_r+0x1e>
 801e6c4:	4635      	mov	r5, r6
 801e6c6:	e7df      	b.n	801e688 <_realloc_r+0x1e>

0801e6c8 <__ssputs_r>:
 801e6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e6cc:	688e      	ldr	r6, [r1, #8]
 801e6ce:	4682      	mov	sl, r0
 801e6d0:	460c      	mov	r4, r1
 801e6d2:	4690      	mov	r8, r2
 801e6d4:	429e      	cmp	r6, r3
 801e6d6:	461f      	mov	r7, r3
 801e6d8:	d838      	bhi.n	801e74c <__ssputs_r+0x84>
 801e6da:	898a      	ldrh	r2, [r1, #12]
 801e6dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e6e0:	d032      	beq.n	801e748 <__ssputs_r+0x80>
 801e6e2:	6825      	ldr	r5, [r4, #0]
 801e6e4:	3301      	adds	r3, #1
 801e6e6:	6909      	ldr	r1, [r1, #16]
 801e6e8:	eba5 0901 	sub.w	r9, r5, r1
 801e6ec:	6965      	ldr	r5, [r4, #20]
 801e6ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e6f2:	444b      	add	r3, r9
 801e6f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e6f8:	106d      	asrs	r5, r5, #1
 801e6fa:	429d      	cmp	r5, r3
 801e6fc:	bf38      	it	cc
 801e6fe:	461d      	movcc	r5, r3
 801e700:	0553      	lsls	r3, r2, #21
 801e702:	d531      	bpl.n	801e768 <__ssputs_r+0xa0>
 801e704:	4629      	mov	r1, r5
 801e706:	f7fc fab3 	bl	801ac70 <_malloc_r>
 801e70a:	4606      	mov	r6, r0
 801e70c:	b950      	cbnz	r0, 801e724 <__ssputs_r+0x5c>
 801e70e:	230c      	movs	r3, #12
 801e710:	f04f 30ff 	mov.w	r0, #4294967295
 801e714:	f8ca 3000 	str.w	r3, [sl]
 801e718:	89a3      	ldrh	r3, [r4, #12]
 801e71a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e71e:	81a3      	strh	r3, [r4, #12]
 801e720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e724:	464a      	mov	r2, r9
 801e726:	6921      	ldr	r1, [r4, #16]
 801e728:	f7fc fa20 	bl	801ab6c <memcpy>
 801e72c:	89a3      	ldrh	r3, [r4, #12]
 801e72e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e736:	81a3      	strh	r3, [r4, #12]
 801e738:	6126      	str	r6, [r4, #16]
 801e73a:	444e      	add	r6, r9
 801e73c:	6165      	str	r5, [r4, #20]
 801e73e:	eba5 0509 	sub.w	r5, r5, r9
 801e742:	6026      	str	r6, [r4, #0]
 801e744:	463e      	mov	r6, r7
 801e746:	60a5      	str	r5, [r4, #8]
 801e748:	42be      	cmp	r6, r7
 801e74a:	d900      	bls.n	801e74e <__ssputs_r+0x86>
 801e74c:	463e      	mov	r6, r7
 801e74e:	4632      	mov	r2, r6
 801e750:	4641      	mov	r1, r8
 801e752:	6820      	ldr	r0, [r4, #0]
 801e754:	f000 f971 	bl	801ea3a <memmove>
 801e758:	68a3      	ldr	r3, [r4, #8]
 801e75a:	2000      	movs	r0, #0
 801e75c:	1b9b      	subs	r3, r3, r6
 801e75e:	60a3      	str	r3, [r4, #8]
 801e760:	6823      	ldr	r3, [r4, #0]
 801e762:	4433      	add	r3, r6
 801e764:	6023      	str	r3, [r4, #0]
 801e766:	e7db      	b.n	801e720 <__ssputs_r+0x58>
 801e768:	462a      	mov	r2, r5
 801e76a:	f7ff ff7e 	bl	801e66a <_realloc_r>
 801e76e:	4606      	mov	r6, r0
 801e770:	2800      	cmp	r0, #0
 801e772:	d1e1      	bne.n	801e738 <__ssputs_r+0x70>
 801e774:	6921      	ldr	r1, [r4, #16]
 801e776:	4650      	mov	r0, sl
 801e778:	f7fc fa0e 	bl	801ab98 <_free_r>
 801e77c:	e7c7      	b.n	801e70e <__ssputs_r+0x46>
	...

0801e780 <_svfiprintf_r>:
 801e780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e784:	4698      	mov	r8, r3
 801e786:	898b      	ldrh	r3, [r1, #12]
 801e788:	b09d      	sub	sp, #116	; 0x74
 801e78a:	4607      	mov	r7, r0
 801e78c:	061b      	lsls	r3, r3, #24
 801e78e:	460d      	mov	r5, r1
 801e790:	4614      	mov	r4, r2
 801e792:	d50e      	bpl.n	801e7b2 <_svfiprintf_r+0x32>
 801e794:	690b      	ldr	r3, [r1, #16]
 801e796:	b963      	cbnz	r3, 801e7b2 <_svfiprintf_r+0x32>
 801e798:	2140      	movs	r1, #64	; 0x40
 801e79a:	f7fc fa69 	bl	801ac70 <_malloc_r>
 801e79e:	6028      	str	r0, [r5, #0]
 801e7a0:	6128      	str	r0, [r5, #16]
 801e7a2:	b920      	cbnz	r0, 801e7ae <_svfiprintf_r+0x2e>
 801e7a4:	230c      	movs	r3, #12
 801e7a6:	603b      	str	r3, [r7, #0]
 801e7a8:	f04f 30ff 	mov.w	r0, #4294967295
 801e7ac:	e0d1      	b.n	801e952 <_svfiprintf_r+0x1d2>
 801e7ae:	2340      	movs	r3, #64	; 0x40
 801e7b0:	616b      	str	r3, [r5, #20]
 801e7b2:	2300      	movs	r3, #0
 801e7b4:	f8cd 800c 	str.w	r8, [sp, #12]
 801e7b8:	f04f 0901 	mov.w	r9, #1
 801e7bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 801e96c <_svfiprintf_r+0x1ec>
 801e7c0:	9309      	str	r3, [sp, #36]	; 0x24
 801e7c2:	2320      	movs	r3, #32
 801e7c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e7c8:	2330      	movs	r3, #48	; 0x30
 801e7ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e7ce:	4623      	mov	r3, r4
 801e7d0:	469a      	mov	sl, r3
 801e7d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e7d6:	b10a      	cbz	r2, 801e7dc <_svfiprintf_r+0x5c>
 801e7d8:	2a25      	cmp	r2, #37	; 0x25
 801e7da:	d1f9      	bne.n	801e7d0 <_svfiprintf_r+0x50>
 801e7dc:	ebba 0b04 	subs.w	fp, sl, r4
 801e7e0:	d00b      	beq.n	801e7fa <_svfiprintf_r+0x7a>
 801e7e2:	465b      	mov	r3, fp
 801e7e4:	4622      	mov	r2, r4
 801e7e6:	4629      	mov	r1, r5
 801e7e8:	4638      	mov	r0, r7
 801e7ea:	f7ff ff6d 	bl	801e6c8 <__ssputs_r>
 801e7ee:	3001      	adds	r0, #1
 801e7f0:	f000 80aa 	beq.w	801e948 <_svfiprintf_r+0x1c8>
 801e7f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e7f6:	445a      	add	r2, fp
 801e7f8:	9209      	str	r2, [sp, #36]	; 0x24
 801e7fa:	f89a 3000 	ldrb.w	r3, [sl]
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	f000 80a2 	beq.w	801e948 <_svfiprintf_r+0x1c8>
 801e804:	2300      	movs	r3, #0
 801e806:	f04f 32ff 	mov.w	r2, #4294967295
 801e80a:	f10a 0a01 	add.w	sl, sl, #1
 801e80e:	9304      	str	r3, [sp, #16]
 801e810:	9307      	str	r3, [sp, #28]
 801e812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e816:	931a      	str	r3, [sp, #104]	; 0x68
 801e818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e81c:	4654      	mov	r4, sl
 801e81e:	2205      	movs	r2, #5
 801e820:	4852      	ldr	r0, [pc, #328]	; (801e96c <_svfiprintf_r+0x1ec>)
 801e822:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e826:	f7ff fa2b 	bl	801dc80 <memchr>
 801e82a:	9a04      	ldr	r2, [sp, #16]
 801e82c:	b9d8      	cbnz	r0, 801e866 <_svfiprintf_r+0xe6>
 801e82e:	06d0      	lsls	r0, r2, #27
 801e830:	bf44      	itt	mi
 801e832:	2320      	movmi	r3, #32
 801e834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e838:	0711      	lsls	r1, r2, #28
 801e83a:	bf44      	itt	mi
 801e83c:	232b      	movmi	r3, #43	; 0x2b
 801e83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e842:	f89a 3000 	ldrb.w	r3, [sl]
 801e846:	2b2a      	cmp	r3, #42	; 0x2a
 801e848:	d015      	beq.n	801e876 <_svfiprintf_r+0xf6>
 801e84a:	9a07      	ldr	r2, [sp, #28]
 801e84c:	4654      	mov	r4, sl
 801e84e:	2000      	movs	r0, #0
 801e850:	f04f 0c0a 	mov.w	ip, #10
 801e854:	4621      	mov	r1, r4
 801e856:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e85a:	3b30      	subs	r3, #48	; 0x30
 801e85c:	2b09      	cmp	r3, #9
 801e85e:	d94e      	bls.n	801e8fe <_svfiprintf_r+0x17e>
 801e860:	b1b0      	cbz	r0, 801e890 <_svfiprintf_r+0x110>
 801e862:	9207      	str	r2, [sp, #28]
 801e864:	e014      	b.n	801e890 <_svfiprintf_r+0x110>
 801e866:	eba0 0308 	sub.w	r3, r0, r8
 801e86a:	46a2      	mov	sl, r4
 801e86c:	fa09 f303 	lsl.w	r3, r9, r3
 801e870:	4313      	orrs	r3, r2
 801e872:	9304      	str	r3, [sp, #16]
 801e874:	e7d2      	b.n	801e81c <_svfiprintf_r+0x9c>
 801e876:	9b03      	ldr	r3, [sp, #12]
 801e878:	1d19      	adds	r1, r3, #4
 801e87a:	681b      	ldr	r3, [r3, #0]
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	9103      	str	r1, [sp, #12]
 801e880:	bfbb      	ittet	lt
 801e882:	425b      	neglt	r3, r3
 801e884:	f042 0202 	orrlt.w	r2, r2, #2
 801e888:	9307      	strge	r3, [sp, #28]
 801e88a:	9307      	strlt	r3, [sp, #28]
 801e88c:	bfb8      	it	lt
 801e88e:	9204      	strlt	r2, [sp, #16]
 801e890:	7823      	ldrb	r3, [r4, #0]
 801e892:	2b2e      	cmp	r3, #46	; 0x2e
 801e894:	d10c      	bne.n	801e8b0 <_svfiprintf_r+0x130>
 801e896:	7863      	ldrb	r3, [r4, #1]
 801e898:	2b2a      	cmp	r3, #42	; 0x2a
 801e89a:	d135      	bne.n	801e908 <_svfiprintf_r+0x188>
 801e89c:	9b03      	ldr	r3, [sp, #12]
 801e89e:	3402      	adds	r4, #2
 801e8a0:	1d1a      	adds	r2, r3, #4
 801e8a2:	681b      	ldr	r3, [r3, #0]
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	9203      	str	r2, [sp, #12]
 801e8a8:	bfb8      	it	lt
 801e8aa:	f04f 33ff 	movlt.w	r3, #4294967295
 801e8ae:	9305      	str	r3, [sp, #20]
 801e8b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e97c <_svfiprintf_r+0x1fc>
 801e8b4:	2203      	movs	r2, #3
 801e8b6:	7821      	ldrb	r1, [r4, #0]
 801e8b8:	4650      	mov	r0, sl
 801e8ba:	f7ff f9e1 	bl	801dc80 <memchr>
 801e8be:	b140      	cbz	r0, 801e8d2 <_svfiprintf_r+0x152>
 801e8c0:	2340      	movs	r3, #64	; 0x40
 801e8c2:	eba0 000a 	sub.w	r0, r0, sl
 801e8c6:	3401      	adds	r4, #1
 801e8c8:	fa03 f000 	lsl.w	r0, r3, r0
 801e8cc:	9b04      	ldr	r3, [sp, #16]
 801e8ce:	4303      	orrs	r3, r0
 801e8d0:	9304      	str	r3, [sp, #16]
 801e8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8d6:	2206      	movs	r2, #6
 801e8d8:	4825      	ldr	r0, [pc, #148]	; (801e970 <_svfiprintf_r+0x1f0>)
 801e8da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e8de:	f7ff f9cf 	bl	801dc80 <memchr>
 801e8e2:	2800      	cmp	r0, #0
 801e8e4:	d038      	beq.n	801e958 <_svfiprintf_r+0x1d8>
 801e8e6:	4b23      	ldr	r3, [pc, #140]	; (801e974 <_svfiprintf_r+0x1f4>)
 801e8e8:	bb1b      	cbnz	r3, 801e932 <_svfiprintf_r+0x1b2>
 801e8ea:	9b03      	ldr	r3, [sp, #12]
 801e8ec:	3307      	adds	r3, #7
 801e8ee:	f023 0307 	bic.w	r3, r3, #7
 801e8f2:	3308      	adds	r3, #8
 801e8f4:	9303      	str	r3, [sp, #12]
 801e8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8f8:	4433      	add	r3, r6
 801e8fa:	9309      	str	r3, [sp, #36]	; 0x24
 801e8fc:	e767      	b.n	801e7ce <_svfiprintf_r+0x4e>
 801e8fe:	fb0c 3202 	mla	r2, ip, r2, r3
 801e902:	460c      	mov	r4, r1
 801e904:	2001      	movs	r0, #1
 801e906:	e7a5      	b.n	801e854 <_svfiprintf_r+0xd4>
 801e908:	2300      	movs	r3, #0
 801e90a:	3401      	adds	r4, #1
 801e90c:	f04f 0c0a 	mov.w	ip, #10
 801e910:	4619      	mov	r1, r3
 801e912:	9305      	str	r3, [sp, #20]
 801e914:	4620      	mov	r0, r4
 801e916:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e91a:	3a30      	subs	r2, #48	; 0x30
 801e91c:	2a09      	cmp	r2, #9
 801e91e:	d903      	bls.n	801e928 <_svfiprintf_r+0x1a8>
 801e920:	2b00      	cmp	r3, #0
 801e922:	d0c5      	beq.n	801e8b0 <_svfiprintf_r+0x130>
 801e924:	9105      	str	r1, [sp, #20]
 801e926:	e7c3      	b.n	801e8b0 <_svfiprintf_r+0x130>
 801e928:	fb0c 2101 	mla	r1, ip, r1, r2
 801e92c:	4604      	mov	r4, r0
 801e92e:	2301      	movs	r3, #1
 801e930:	e7f0      	b.n	801e914 <_svfiprintf_r+0x194>
 801e932:	ab03      	add	r3, sp, #12
 801e934:	462a      	mov	r2, r5
 801e936:	a904      	add	r1, sp, #16
 801e938:	4638      	mov	r0, r7
 801e93a:	9300      	str	r3, [sp, #0]
 801e93c:	4b0e      	ldr	r3, [pc, #56]	; (801e978 <_svfiprintf_r+0x1f8>)
 801e93e:	f7fc faab 	bl	801ae98 <_printf_float>
 801e942:	1c42      	adds	r2, r0, #1
 801e944:	4606      	mov	r6, r0
 801e946:	d1d6      	bne.n	801e8f6 <_svfiprintf_r+0x176>
 801e948:	89ab      	ldrh	r3, [r5, #12]
 801e94a:	065b      	lsls	r3, r3, #25
 801e94c:	f53f af2c 	bmi.w	801e7a8 <_svfiprintf_r+0x28>
 801e950:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e952:	b01d      	add	sp, #116	; 0x74
 801e954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e958:	ab03      	add	r3, sp, #12
 801e95a:	462a      	mov	r2, r5
 801e95c:	a904      	add	r1, sp, #16
 801e95e:	4638      	mov	r0, r7
 801e960:	9300      	str	r3, [sp, #0]
 801e962:	4b05      	ldr	r3, [pc, #20]	; (801e978 <_svfiprintf_r+0x1f8>)
 801e964:	f7fc fd3e 	bl	801b3e4 <_printf_i>
 801e968:	e7eb      	b.n	801e942 <_svfiprintf_r+0x1c2>
 801e96a:	bf00      	nop
 801e96c:	08074a8c 	.word	0x08074a8c
 801e970:	08074a96 	.word	0x08074a96
 801e974:	0801ae99 	.word	0x0801ae99
 801e978:	0801e6c9 	.word	0x0801e6c9
 801e97c:	08074a92 	.word	0x08074a92

0801e980 <nan>:
 801e980:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e988 <nan+0x8>
 801e984:	4770      	bx	lr
 801e986:	bf00      	nop
 801e988:	00000000 	.word	0x00000000
 801e98c:	7ff80000 	.word	0x7ff80000

0801e990 <strncmp>:
 801e990:	b510      	push	{r4, lr}
 801e992:	b17a      	cbz	r2, 801e9b4 <strncmp+0x24>
 801e994:	4603      	mov	r3, r0
 801e996:	3901      	subs	r1, #1
 801e998:	1884      	adds	r4, r0, r2
 801e99a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e99e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e9a2:	4290      	cmp	r0, r2
 801e9a4:	d101      	bne.n	801e9aa <strncmp+0x1a>
 801e9a6:	42a3      	cmp	r3, r4
 801e9a8:	d101      	bne.n	801e9ae <strncmp+0x1e>
 801e9aa:	1a80      	subs	r0, r0, r2
 801e9ac:	bd10      	pop	{r4, pc}
 801e9ae:	2800      	cmp	r0, #0
 801e9b0:	d1f3      	bne.n	801e99a <strncmp+0xa>
 801e9b2:	e7fa      	b.n	801e9aa <strncmp+0x1a>
 801e9b4:	4610      	mov	r0, r2
 801e9b6:	e7f9      	b.n	801e9ac <strncmp+0x1c>

0801e9b8 <__ascii_wctomb>:
 801e9b8:	b149      	cbz	r1, 801e9ce <__ascii_wctomb+0x16>
 801e9ba:	2aff      	cmp	r2, #255	; 0xff
 801e9bc:	bf8d      	iteet	hi
 801e9be:	238a      	movhi	r3, #138	; 0x8a
 801e9c0:	2001      	movls	r0, #1
 801e9c2:	700a      	strbls	r2, [r1, #0]
 801e9c4:	6003      	strhi	r3, [r0, #0]
 801e9c6:	bf88      	it	hi
 801e9c8:	f04f 30ff 	movhi.w	r0, #4294967295
 801e9cc:	4770      	bx	lr
 801e9ce:	4608      	mov	r0, r1
 801e9d0:	4770      	bx	lr
	...

0801e9d4 <__assert_func>:
 801e9d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e9d6:	4614      	mov	r4, r2
 801e9d8:	461a      	mov	r2, r3
 801e9da:	4b09      	ldr	r3, [pc, #36]	; (801ea00 <__assert_func+0x2c>)
 801e9dc:	4605      	mov	r5, r0
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	68d8      	ldr	r0, [r3, #12]
 801e9e2:	b14c      	cbz	r4, 801e9f8 <__assert_func+0x24>
 801e9e4:	4b07      	ldr	r3, [pc, #28]	; (801ea04 <__assert_func+0x30>)
 801e9e6:	9100      	str	r1, [sp, #0]
 801e9e8:	4907      	ldr	r1, [pc, #28]	; (801ea08 <__assert_func+0x34>)
 801e9ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e9ee:	462b      	mov	r3, r5
 801e9f0:	f000 f80e 	bl	801ea10 <fiprintf>
 801e9f4:	f000 fa5c 	bl	801eeb0 <abort>
 801e9f8:	4b04      	ldr	r3, [pc, #16]	; (801ea0c <__assert_func+0x38>)
 801e9fa:	461c      	mov	r4, r3
 801e9fc:	e7f3      	b.n	801e9e6 <__assert_func+0x12>
 801e9fe:	bf00      	nop
 801ea00:	20000930 	.word	0x20000930
 801ea04:	08074a9d 	.word	0x08074a9d
 801ea08:	08074aaa 	.word	0x08074aaa
 801ea0c:	08074ad8 	.word	0x08074ad8

0801ea10 <fiprintf>:
 801ea10:	b40e      	push	{r1, r2, r3}
 801ea12:	b503      	push	{r0, r1, lr}
 801ea14:	ab03      	add	r3, sp, #12
 801ea16:	4601      	mov	r1, r0
 801ea18:	4805      	ldr	r0, [pc, #20]	; (801ea30 <fiprintf+0x20>)
 801ea1a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea1e:	6800      	ldr	r0, [r0, #0]
 801ea20:	9301      	str	r3, [sp, #4]
 801ea22:	f000 f855 	bl	801ead0 <_vfiprintf_r>
 801ea26:	b002      	add	sp, #8
 801ea28:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea2c:	b003      	add	sp, #12
 801ea2e:	4770      	bx	lr
 801ea30:	20000930 	.word	0x20000930

0801ea34 <__retarget_lock_init_recursive>:
 801ea34:	4770      	bx	lr

0801ea36 <__retarget_lock_acquire_recursive>:
 801ea36:	4770      	bx	lr

0801ea38 <__retarget_lock_release_recursive>:
 801ea38:	4770      	bx	lr

0801ea3a <memmove>:
 801ea3a:	4288      	cmp	r0, r1
 801ea3c:	b510      	push	{r4, lr}
 801ea3e:	eb01 0402 	add.w	r4, r1, r2
 801ea42:	d902      	bls.n	801ea4a <memmove+0x10>
 801ea44:	4284      	cmp	r4, r0
 801ea46:	4623      	mov	r3, r4
 801ea48:	d807      	bhi.n	801ea5a <memmove+0x20>
 801ea4a:	1e43      	subs	r3, r0, #1
 801ea4c:	42a1      	cmp	r1, r4
 801ea4e:	d008      	beq.n	801ea62 <memmove+0x28>
 801ea50:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ea54:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ea58:	e7f8      	b.n	801ea4c <memmove+0x12>
 801ea5a:	4402      	add	r2, r0
 801ea5c:	4601      	mov	r1, r0
 801ea5e:	428a      	cmp	r2, r1
 801ea60:	d100      	bne.n	801ea64 <memmove+0x2a>
 801ea62:	bd10      	pop	{r4, pc}
 801ea64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ea68:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ea6c:	e7f7      	b.n	801ea5e <memmove+0x24>

0801ea6e <_malloc_usable_size_r>:
 801ea6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ea72:	1f18      	subs	r0, r3, #4
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	bfbc      	itt	lt
 801ea78:	580b      	ldrlt	r3, [r1, r0]
 801ea7a:	18c0      	addlt	r0, r0, r3
 801ea7c:	4770      	bx	lr

0801ea7e <__sfputc_r>:
 801ea7e:	6893      	ldr	r3, [r2, #8]
 801ea80:	3b01      	subs	r3, #1
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	6093      	str	r3, [r2, #8]
 801ea86:	b410      	push	{r4}
 801ea88:	da08      	bge.n	801ea9c <__sfputc_r+0x1e>
 801ea8a:	6994      	ldr	r4, [r2, #24]
 801ea8c:	42a3      	cmp	r3, r4
 801ea8e:	db01      	blt.n	801ea94 <__sfputc_r+0x16>
 801ea90:	290a      	cmp	r1, #10
 801ea92:	d103      	bne.n	801ea9c <__sfputc_r+0x1e>
 801ea94:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ea98:	f000 b94a 	b.w	801ed30 <__swbuf_r>
 801ea9c:	6813      	ldr	r3, [r2, #0]
 801ea9e:	1c58      	adds	r0, r3, #1
 801eaa0:	6010      	str	r0, [r2, #0]
 801eaa2:	4608      	mov	r0, r1
 801eaa4:	7019      	strb	r1, [r3, #0]
 801eaa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eaaa:	4770      	bx	lr

0801eaac <__sfputs_r>:
 801eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eaae:	4606      	mov	r6, r0
 801eab0:	460f      	mov	r7, r1
 801eab2:	4614      	mov	r4, r2
 801eab4:	18d5      	adds	r5, r2, r3
 801eab6:	42ac      	cmp	r4, r5
 801eab8:	d101      	bne.n	801eabe <__sfputs_r+0x12>
 801eaba:	2000      	movs	r0, #0
 801eabc:	e007      	b.n	801eace <__sfputs_r+0x22>
 801eabe:	463a      	mov	r2, r7
 801eac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eac4:	4630      	mov	r0, r6
 801eac6:	f7ff ffda 	bl	801ea7e <__sfputc_r>
 801eaca:	1c43      	adds	r3, r0, #1
 801eacc:	d1f3      	bne.n	801eab6 <__sfputs_r+0xa>
 801eace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ead0 <_vfiprintf_r>:
 801ead0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ead4:	460d      	mov	r5, r1
 801ead6:	b09d      	sub	sp, #116	; 0x74
 801ead8:	4614      	mov	r4, r2
 801eada:	4698      	mov	r8, r3
 801eadc:	4606      	mov	r6, r0
 801eade:	b118      	cbz	r0, 801eae8 <_vfiprintf_r+0x18>
 801eae0:	6983      	ldr	r3, [r0, #24]
 801eae2:	b90b      	cbnz	r3, 801eae8 <_vfiprintf_r+0x18>
 801eae4:	f000 fb04 	bl	801f0f0 <__sinit>
 801eae8:	4b89      	ldr	r3, [pc, #548]	; (801ed10 <_vfiprintf_r+0x240>)
 801eaea:	429d      	cmp	r5, r3
 801eaec:	d11b      	bne.n	801eb26 <_vfiprintf_r+0x56>
 801eaee:	6875      	ldr	r5, [r6, #4]
 801eaf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eaf2:	07d9      	lsls	r1, r3, #31
 801eaf4:	d405      	bmi.n	801eb02 <_vfiprintf_r+0x32>
 801eaf6:	89ab      	ldrh	r3, [r5, #12]
 801eaf8:	059a      	lsls	r2, r3, #22
 801eafa:	d402      	bmi.n	801eb02 <_vfiprintf_r+0x32>
 801eafc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eafe:	f7ff ff9a 	bl	801ea36 <__retarget_lock_acquire_recursive>
 801eb02:	89ab      	ldrh	r3, [r5, #12]
 801eb04:	071b      	lsls	r3, r3, #28
 801eb06:	d501      	bpl.n	801eb0c <_vfiprintf_r+0x3c>
 801eb08:	692b      	ldr	r3, [r5, #16]
 801eb0a:	b9eb      	cbnz	r3, 801eb48 <_vfiprintf_r+0x78>
 801eb0c:	4629      	mov	r1, r5
 801eb0e:	4630      	mov	r0, r6
 801eb10:	f000 f960 	bl	801edd4 <__swsetup_r>
 801eb14:	b1c0      	cbz	r0, 801eb48 <_vfiprintf_r+0x78>
 801eb16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eb18:	07dc      	lsls	r4, r3, #31
 801eb1a:	d50e      	bpl.n	801eb3a <_vfiprintf_r+0x6a>
 801eb1c:	f04f 30ff 	mov.w	r0, #4294967295
 801eb20:	b01d      	add	sp, #116	; 0x74
 801eb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb26:	4b7b      	ldr	r3, [pc, #492]	; (801ed14 <_vfiprintf_r+0x244>)
 801eb28:	429d      	cmp	r5, r3
 801eb2a:	d101      	bne.n	801eb30 <_vfiprintf_r+0x60>
 801eb2c:	68b5      	ldr	r5, [r6, #8]
 801eb2e:	e7df      	b.n	801eaf0 <_vfiprintf_r+0x20>
 801eb30:	4b79      	ldr	r3, [pc, #484]	; (801ed18 <_vfiprintf_r+0x248>)
 801eb32:	429d      	cmp	r5, r3
 801eb34:	bf08      	it	eq
 801eb36:	68f5      	ldreq	r5, [r6, #12]
 801eb38:	e7da      	b.n	801eaf0 <_vfiprintf_r+0x20>
 801eb3a:	89ab      	ldrh	r3, [r5, #12]
 801eb3c:	0598      	lsls	r0, r3, #22
 801eb3e:	d4ed      	bmi.n	801eb1c <_vfiprintf_r+0x4c>
 801eb40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eb42:	f7ff ff79 	bl	801ea38 <__retarget_lock_release_recursive>
 801eb46:	e7e9      	b.n	801eb1c <_vfiprintf_r+0x4c>
 801eb48:	2300      	movs	r3, #0
 801eb4a:	f8cd 800c 	str.w	r8, [sp, #12]
 801eb4e:	f04f 0901 	mov.w	r9, #1
 801eb52:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801ed1c <_vfiprintf_r+0x24c>
 801eb56:	9309      	str	r3, [sp, #36]	; 0x24
 801eb58:	2320      	movs	r3, #32
 801eb5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801eb5e:	2330      	movs	r3, #48	; 0x30
 801eb60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801eb64:	4623      	mov	r3, r4
 801eb66:	469a      	mov	sl, r3
 801eb68:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eb6c:	b10a      	cbz	r2, 801eb72 <_vfiprintf_r+0xa2>
 801eb6e:	2a25      	cmp	r2, #37	; 0x25
 801eb70:	d1f9      	bne.n	801eb66 <_vfiprintf_r+0x96>
 801eb72:	ebba 0b04 	subs.w	fp, sl, r4
 801eb76:	d00b      	beq.n	801eb90 <_vfiprintf_r+0xc0>
 801eb78:	465b      	mov	r3, fp
 801eb7a:	4622      	mov	r2, r4
 801eb7c:	4629      	mov	r1, r5
 801eb7e:	4630      	mov	r0, r6
 801eb80:	f7ff ff94 	bl	801eaac <__sfputs_r>
 801eb84:	3001      	adds	r0, #1
 801eb86:	f000 80aa 	beq.w	801ecde <_vfiprintf_r+0x20e>
 801eb8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eb8c:	445a      	add	r2, fp
 801eb8e:	9209      	str	r2, [sp, #36]	; 0x24
 801eb90:	f89a 3000 	ldrb.w	r3, [sl]
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	f000 80a2 	beq.w	801ecde <_vfiprintf_r+0x20e>
 801eb9a:	2300      	movs	r3, #0
 801eb9c:	f04f 32ff 	mov.w	r2, #4294967295
 801eba0:	f10a 0a01 	add.w	sl, sl, #1
 801eba4:	9304      	str	r3, [sp, #16]
 801eba6:	9307      	str	r3, [sp, #28]
 801eba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ebac:	931a      	str	r3, [sp, #104]	; 0x68
 801ebae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ebb2:	4654      	mov	r4, sl
 801ebb4:	2205      	movs	r2, #5
 801ebb6:	4859      	ldr	r0, [pc, #356]	; (801ed1c <_vfiprintf_r+0x24c>)
 801ebb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ebbc:	f7ff f860 	bl	801dc80 <memchr>
 801ebc0:	9a04      	ldr	r2, [sp, #16]
 801ebc2:	b9d8      	cbnz	r0, 801ebfc <_vfiprintf_r+0x12c>
 801ebc4:	06d1      	lsls	r1, r2, #27
 801ebc6:	bf44      	itt	mi
 801ebc8:	2320      	movmi	r3, #32
 801ebca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ebce:	0713      	lsls	r3, r2, #28
 801ebd0:	bf44      	itt	mi
 801ebd2:	232b      	movmi	r3, #43	; 0x2b
 801ebd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ebd8:	f89a 3000 	ldrb.w	r3, [sl]
 801ebdc:	2b2a      	cmp	r3, #42	; 0x2a
 801ebde:	d015      	beq.n	801ec0c <_vfiprintf_r+0x13c>
 801ebe0:	9a07      	ldr	r2, [sp, #28]
 801ebe2:	4654      	mov	r4, sl
 801ebe4:	2000      	movs	r0, #0
 801ebe6:	f04f 0c0a 	mov.w	ip, #10
 801ebea:	4621      	mov	r1, r4
 801ebec:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ebf0:	3b30      	subs	r3, #48	; 0x30
 801ebf2:	2b09      	cmp	r3, #9
 801ebf4:	d94e      	bls.n	801ec94 <_vfiprintf_r+0x1c4>
 801ebf6:	b1b0      	cbz	r0, 801ec26 <_vfiprintf_r+0x156>
 801ebf8:	9207      	str	r2, [sp, #28]
 801ebfa:	e014      	b.n	801ec26 <_vfiprintf_r+0x156>
 801ebfc:	eba0 0308 	sub.w	r3, r0, r8
 801ec00:	46a2      	mov	sl, r4
 801ec02:	fa09 f303 	lsl.w	r3, r9, r3
 801ec06:	4313      	orrs	r3, r2
 801ec08:	9304      	str	r3, [sp, #16]
 801ec0a:	e7d2      	b.n	801ebb2 <_vfiprintf_r+0xe2>
 801ec0c:	9b03      	ldr	r3, [sp, #12]
 801ec0e:	1d19      	adds	r1, r3, #4
 801ec10:	681b      	ldr	r3, [r3, #0]
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	9103      	str	r1, [sp, #12]
 801ec16:	bfbb      	ittet	lt
 801ec18:	425b      	neglt	r3, r3
 801ec1a:	f042 0202 	orrlt.w	r2, r2, #2
 801ec1e:	9307      	strge	r3, [sp, #28]
 801ec20:	9307      	strlt	r3, [sp, #28]
 801ec22:	bfb8      	it	lt
 801ec24:	9204      	strlt	r2, [sp, #16]
 801ec26:	7823      	ldrb	r3, [r4, #0]
 801ec28:	2b2e      	cmp	r3, #46	; 0x2e
 801ec2a:	d10c      	bne.n	801ec46 <_vfiprintf_r+0x176>
 801ec2c:	7863      	ldrb	r3, [r4, #1]
 801ec2e:	2b2a      	cmp	r3, #42	; 0x2a
 801ec30:	d135      	bne.n	801ec9e <_vfiprintf_r+0x1ce>
 801ec32:	9b03      	ldr	r3, [sp, #12]
 801ec34:	3402      	adds	r4, #2
 801ec36:	1d1a      	adds	r2, r3, #4
 801ec38:	681b      	ldr	r3, [r3, #0]
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	9203      	str	r2, [sp, #12]
 801ec3e:	bfb8      	it	lt
 801ec40:	f04f 33ff 	movlt.w	r3, #4294967295
 801ec44:	9305      	str	r3, [sp, #20]
 801ec46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ed2c <_vfiprintf_r+0x25c>
 801ec4a:	2203      	movs	r2, #3
 801ec4c:	7821      	ldrb	r1, [r4, #0]
 801ec4e:	4650      	mov	r0, sl
 801ec50:	f7ff f816 	bl	801dc80 <memchr>
 801ec54:	b140      	cbz	r0, 801ec68 <_vfiprintf_r+0x198>
 801ec56:	2340      	movs	r3, #64	; 0x40
 801ec58:	eba0 000a 	sub.w	r0, r0, sl
 801ec5c:	3401      	adds	r4, #1
 801ec5e:	fa03 f000 	lsl.w	r0, r3, r0
 801ec62:	9b04      	ldr	r3, [sp, #16]
 801ec64:	4303      	orrs	r3, r0
 801ec66:	9304      	str	r3, [sp, #16]
 801ec68:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec6c:	2206      	movs	r2, #6
 801ec6e:	482c      	ldr	r0, [pc, #176]	; (801ed20 <_vfiprintf_r+0x250>)
 801ec70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ec74:	f7ff f804 	bl	801dc80 <memchr>
 801ec78:	2800      	cmp	r0, #0
 801ec7a:	d03f      	beq.n	801ecfc <_vfiprintf_r+0x22c>
 801ec7c:	4b29      	ldr	r3, [pc, #164]	; (801ed24 <_vfiprintf_r+0x254>)
 801ec7e:	bb1b      	cbnz	r3, 801ecc8 <_vfiprintf_r+0x1f8>
 801ec80:	9b03      	ldr	r3, [sp, #12]
 801ec82:	3307      	adds	r3, #7
 801ec84:	f023 0307 	bic.w	r3, r3, #7
 801ec88:	3308      	adds	r3, #8
 801ec8a:	9303      	str	r3, [sp, #12]
 801ec8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec8e:	443b      	add	r3, r7
 801ec90:	9309      	str	r3, [sp, #36]	; 0x24
 801ec92:	e767      	b.n	801eb64 <_vfiprintf_r+0x94>
 801ec94:	fb0c 3202 	mla	r2, ip, r2, r3
 801ec98:	460c      	mov	r4, r1
 801ec9a:	2001      	movs	r0, #1
 801ec9c:	e7a5      	b.n	801ebea <_vfiprintf_r+0x11a>
 801ec9e:	2300      	movs	r3, #0
 801eca0:	3401      	adds	r4, #1
 801eca2:	f04f 0c0a 	mov.w	ip, #10
 801eca6:	4619      	mov	r1, r3
 801eca8:	9305      	str	r3, [sp, #20]
 801ecaa:	4620      	mov	r0, r4
 801ecac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ecb0:	3a30      	subs	r2, #48	; 0x30
 801ecb2:	2a09      	cmp	r2, #9
 801ecb4:	d903      	bls.n	801ecbe <_vfiprintf_r+0x1ee>
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	d0c5      	beq.n	801ec46 <_vfiprintf_r+0x176>
 801ecba:	9105      	str	r1, [sp, #20]
 801ecbc:	e7c3      	b.n	801ec46 <_vfiprintf_r+0x176>
 801ecbe:	fb0c 2101 	mla	r1, ip, r1, r2
 801ecc2:	4604      	mov	r4, r0
 801ecc4:	2301      	movs	r3, #1
 801ecc6:	e7f0      	b.n	801ecaa <_vfiprintf_r+0x1da>
 801ecc8:	ab03      	add	r3, sp, #12
 801ecca:	462a      	mov	r2, r5
 801eccc:	a904      	add	r1, sp, #16
 801ecce:	4630      	mov	r0, r6
 801ecd0:	9300      	str	r3, [sp, #0]
 801ecd2:	4b15      	ldr	r3, [pc, #84]	; (801ed28 <_vfiprintf_r+0x258>)
 801ecd4:	f7fc f8e0 	bl	801ae98 <_printf_float>
 801ecd8:	4607      	mov	r7, r0
 801ecda:	1c78      	adds	r0, r7, #1
 801ecdc:	d1d6      	bne.n	801ec8c <_vfiprintf_r+0x1bc>
 801ecde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ece0:	07d9      	lsls	r1, r3, #31
 801ece2:	d405      	bmi.n	801ecf0 <_vfiprintf_r+0x220>
 801ece4:	89ab      	ldrh	r3, [r5, #12]
 801ece6:	059a      	lsls	r2, r3, #22
 801ece8:	d402      	bmi.n	801ecf0 <_vfiprintf_r+0x220>
 801ecea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ecec:	f7ff fea4 	bl	801ea38 <__retarget_lock_release_recursive>
 801ecf0:	89ab      	ldrh	r3, [r5, #12]
 801ecf2:	065b      	lsls	r3, r3, #25
 801ecf4:	f53f af12 	bmi.w	801eb1c <_vfiprintf_r+0x4c>
 801ecf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ecfa:	e711      	b.n	801eb20 <_vfiprintf_r+0x50>
 801ecfc:	ab03      	add	r3, sp, #12
 801ecfe:	462a      	mov	r2, r5
 801ed00:	a904      	add	r1, sp, #16
 801ed02:	4630      	mov	r0, r6
 801ed04:	9300      	str	r3, [sp, #0]
 801ed06:	4b08      	ldr	r3, [pc, #32]	; (801ed28 <_vfiprintf_r+0x258>)
 801ed08:	f7fc fb6c 	bl	801b3e4 <_printf_i>
 801ed0c:	e7e4      	b.n	801ecd8 <_vfiprintf_r+0x208>
 801ed0e:	bf00      	nop
 801ed10:	08074afc 	.word	0x08074afc
 801ed14:	08074b1c 	.word	0x08074b1c
 801ed18:	08074adc 	.word	0x08074adc
 801ed1c:	08074a8c 	.word	0x08074a8c
 801ed20:	08074a96 	.word	0x08074a96
 801ed24:	0801ae99 	.word	0x0801ae99
 801ed28:	0801eaad 	.word	0x0801eaad
 801ed2c:	08074a92 	.word	0x08074a92

0801ed30 <__swbuf_r>:
 801ed30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed32:	460e      	mov	r6, r1
 801ed34:	4614      	mov	r4, r2
 801ed36:	4605      	mov	r5, r0
 801ed38:	b118      	cbz	r0, 801ed42 <__swbuf_r+0x12>
 801ed3a:	6983      	ldr	r3, [r0, #24]
 801ed3c:	b90b      	cbnz	r3, 801ed42 <__swbuf_r+0x12>
 801ed3e:	f000 f9d7 	bl	801f0f0 <__sinit>
 801ed42:	4b21      	ldr	r3, [pc, #132]	; (801edc8 <__swbuf_r+0x98>)
 801ed44:	429c      	cmp	r4, r3
 801ed46:	d12b      	bne.n	801eda0 <__swbuf_r+0x70>
 801ed48:	686c      	ldr	r4, [r5, #4]
 801ed4a:	69a3      	ldr	r3, [r4, #24]
 801ed4c:	60a3      	str	r3, [r4, #8]
 801ed4e:	89a3      	ldrh	r3, [r4, #12]
 801ed50:	071a      	lsls	r2, r3, #28
 801ed52:	d52f      	bpl.n	801edb4 <__swbuf_r+0x84>
 801ed54:	6923      	ldr	r3, [r4, #16]
 801ed56:	b36b      	cbz	r3, 801edb4 <__swbuf_r+0x84>
 801ed58:	6923      	ldr	r3, [r4, #16]
 801ed5a:	b2f6      	uxtb	r6, r6
 801ed5c:	6820      	ldr	r0, [r4, #0]
 801ed5e:	4637      	mov	r7, r6
 801ed60:	1ac0      	subs	r0, r0, r3
 801ed62:	6963      	ldr	r3, [r4, #20]
 801ed64:	4283      	cmp	r3, r0
 801ed66:	dc04      	bgt.n	801ed72 <__swbuf_r+0x42>
 801ed68:	4621      	mov	r1, r4
 801ed6a:	4628      	mov	r0, r5
 801ed6c:	f000 f92c 	bl	801efc8 <_fflush_r>
 801ed70:	bb30      	cbnz	r0, 801edc0 <__swbuf_r+0x90>
 801ed72:	68a3      	ldr	r3, [r4, #8]
 801ed74:	3001      	adds	r0, #1
 801ed76:	3b01      	subs	r3, #1
 801ed78:	60a3      	str	r3, [r4, #8]
 801ed7a:	6823      	ldr	r3, [r4, #0]
 801ed7c:	1c5a      	adds	r2, r3, #1
 801ed7e:	6022      	str	r2, [r4, #0]
 801ed80:	701e      	strb	r6, [r3, #0]
 801ed82:	6963      	ldr	r3, [r4, #20]
 801ed84:	4283      	cmp	r3, r0
 801ed86:	d004      	beq.n	801ed92 <__swbuf_r+0x62>
 801ed88:	89a3      	ldrh	r3, [r4, #12]
 801ed8a:	07db      	lsls	r3, r3, #31
 801ed8c:	d506      	bpl.n	801ed9c <__swbuf_r+0x6c>
 801ed8e:	2e0a      	cmp	r6, #10
 801ed90:	d104      	bne.n	801ed9c <__swbuf_r+0x6c>
 801ed92:	4621      	mov	r1, r4
 801ed94:	4628      	mov	r0, r5
 801ed96:	f000 f917 	bl	801efc8 <_fflush_r>
 801ed9a:	b988      	cbnz	r0, 801edc0 <__swbuf_r+0x90>
 801ed9c:	4638      	mov	r0, r7
 801ed9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eda0:	4b0a      	ldr	r3, [pc, #40]	; (801edcc <__swbuf_r+0x9c>)
 801eda2:	429c      	cmp	r4, r3
 801eda4:	d101      	bne.n	801edaa <__swbuf_r+0x7a>
 801eda6:	68ac      	ldr	r4, [r5, #8]
 801eda8:	e7cf      	b.n	801ed4a <__swbuf_r+0x1a>
 801edaa:	4b09      	ldr	r3, [pc, #36]	; (801edd0 <__swbuf_r+0xa0>)
 801edac:	429c      	cmp	r4, r3
 801edae:	bf08      	it	eq
 801edb0:	68ec      	ldreq	r4, [r5, #12]
 801edb2:	e7ca      	b.n	801ed4a <__swbuf_r+0x1a>
 801edb4:	4621      	mov	r1, r4
 801edb6:	4628      	mov	r0, r5
 801edb8:	f000 f80c 	bl	801edd4 <__swsetup_r>
 801edbc:	2800      	cmp	r0, #0
 801edbe:	d0cb      	beq.n	801ed58 <__swbuf_r+0x28>
 801edc0:	f04f 37ff 	mov.w	r7, #4294967295
 801edc4:	e7ea      	b.n	801ed9c <__swbuf_r+0x6c>
 801edc6:	bf00      	nop
 801edc8:	08074afc 	.word	0x08074afc
 801edcc:	08074b1c 	.word	0x08074b1c
 801edd0:	08074adc 	.word	0x08074adc

0801edd4 <__swsetup_r>:
 801edd4:	4b32      	ldr	r3, [pc, #200]	; (801eea0 <__swsetup_r+0xcc>)
 801edd6:	b570      	push	{r4, r5, r6, lr}
 801edd8:	681d      	ldr	r5, [r3, #0]
 801edda:	4606      	mov	r6, r0
 801eddc:	460c      	mov	r4, r1
 801edde:	b125      	cbz	r5, 801edea <__swsetup_r+0x16>
 801ede0:	69ab      	ldr	r3, [r5, #24]
 801ede2:	b913      	cbnz	r3, 801edea <__swsetup_r+0x16>
 801ede4:	4628      	mov	r0, r5
 801ede6:	f000 f983 	bl	801f0f0 <__sinit>
 801edea:	4b2e      	ldr	r3, [pc, #184]	; (801eea4 <__swsetup_r+0xd0>)
 801edec:	429c      	cmp	r4, r3
 801edee:	d10f      	bne.n	801ee10 <__swsetup_r+0x3c>
 801edf0:	686c      	ldr	r4, [r5, #4]
 801edf2:	89a3      	ldrh	r3, [r4, #12]
 801edf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801edf8:	0719      	lsls	r1, r3, #28
 801edfa:	d42c      	bmi.n	801ee56 <__swsetup_r+0x82>
 801edfc:	06dd      	lsls	r5, r3, #27
 801edfe:	d411      	bmi.n	801ee24 <__swsetup_r+0x50>
 801ee00:	2309      	movs	r3, #9
 801ee02:	6033      	str	r3, [r6, #0]
 801ee04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ee08:	f04f 30ff 	mov.w	r0, #4294967295
 801ee0c:	81a3      	strh	r3, [r4, #12]
 801ee0e:	e03e      	b.n	801ee8e <__swsetup_r+0xba>
 801ee10:	4b25      	ldr	r3, [pc, #148]	; (801eea8 <__swsetup_r+0xd4>)
 801ee12:	429c      	cmp	r4, r3
 801ee14:	d101      	bne.n	801ee1a <__swsetup_r+0x46>
 801ee16:	68ac      	ldr	r4, [r5, #8]
 801ee18:	e7eb      	b.n	801edf2 <__swsetup_r+0x1e>
 801ee1a:	4b24      	ldr	r3, [pc, #144]	; (801eeac <__swsetup_r+0xd8>)
 801ee1c:	429c      	cmp	r4, r3
 801ee1e:	bf08      	it	eq
 801ee20:	68ec      	ldreq	r4, [r5, #12]
 801ee22:	e7e6      	b.n	801edf2 <__swsetup_r+0x1e>
 801ee24:	0758      	lsls	r0, r3, #29
 801ee26:	d512      	bpl.n	801ee4e <__swsetup_r+0x7a>
 801ee28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ee2a:	b141      	cbz	r1, 801ee3e <__swsetup_r+0x6a>
 801ee2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ee30:	4299      	cmp	r1, r3
 801ee32:	d002      	beq.n	801ee3a <__swsetup_r+0x66>
 801ee34:	4630      	mov	r0, r6
 801ee36:	f7fb feaf 	bl	801ab98 <_free_r>
 801ee3a:	2300      	movs	r3, #0
 801ee3c:	6363      	str	r3, [r4, #52]	; 0x34
 801ee3e:	89a3      	ldrh	r3, [r4, #12]
 801ee40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ee44:	81a3      	strh	r3, [r4, #12]
 801ee46:	2300      	movs	r3, #0
 801ee48:	6063      	str	r3, [r4, #4]
 801ee4a:	6923      	ldr	r3, [r4, #16]
 801ee4c:	6023      	str	r3, [r4, #0]
 801ee4e:	89a3      	ldrh	r3, [r4, #12]
 801ee50:	f043 0308 	orr.w	r3, r3, #8
 801ee54:	81a3      	strh	r3, [r4, #12]
 801ee56:	6923      	ldr	r3, [r4, #16]
 801ee58:	b94b      	cbnz	r3, 801ee6e <__swsetup_r+0x9a>
 801ee5a:	89a3      	ldrh	r3, [r4, #12]
 801ee5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ee60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ee64:	d003      	beq.n	801ee6e <__swsetup_r+0x9a>
 801ee66:	4621      	mov	r1, r4
 801ee68:	4630      	mov	r0, r6
 801ee6a:	f000 fa03 	bl	801f274 <__smakebuf_r>
 801ee6e:	89a0      	ldrh	r0, [r4, #12]
 801ee70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ee74:	f010 0301 	ands.w	r3, r0, #1
 801ee78:	d00a      	beq.n	801ee90 <__swsetup_r+0xbc>
 801ee7a:	2300      	movs	r3, #0
 801ee7c:	60a3      	str	r3, [r4, #8]
 801ee7e:	6963      	ldr	r3, [r4, #20]
 801ee80:	425b      	negs	r3, r3
 801ee82:	61a3      	str	r3, [r4, #24]
 801ee84:	6923      	ldr	r3, [r4, #16]
 801ee86:	b943      	cbnz	r3, 801ee9a <__swsetup_r+0xc6>
 801ee88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ee8c:	d1ba      	bne.n	801ee04 <__swsetup_r+0x30>
 801ee8e:	bd70      	pop	{r4, r5, r6, pc}
 801ee90:	0781      	lsls	r1, r0, #30
 801ee92:	bf58      	it	pl
 801ee94:	6963      	ldrpl	r3, [r4, #20]
 801ee96:	60a3      	str	r3, [r4, #8]
 801ee98:	e7f4      	b.n	801ee84 <__swsetup_r+0xb0>
 801ee9a:	2000      	movs	r0, #0
 801ee9c:	e7f7      	b.n	801ee8e <__swsetup_r+0xba>
 801ee9e:	bf00      	nop
 801eea0:	20000930 	.word	0x20000930
 801eea4:	08074afc 	.word	0x08074afc
 801eea8:	08074b1c 	.word	0x08074b1c
 801eeac:	08074adc 	.word	0x08074adc

0801eeb0 <abort>:
 801eeb0:	2006      	movs	r0, #6
 801eeb2:	b508      	push	{r3, lr}
 801eeb4:	f000 fa46 	bl	801f344 <raise>
 801eeb8:	2001      	movs	r0, #1
 801eeba:	f7e4 feb5 	bl	8003c28 <_exit>
	...

0801eec0 <__sflush_r>:
 801eec0:	898a      	ldrh	r2, [r1, #12]
 801eec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eec6:	4605      	mov	r5, r0
 801eec8:	0710      	lsls	r0, r2, #28
 801eeca:	460c      	mov	r4, r1
 801eecc:	d458      	bmi.n	801ef80 <__sflush_r+0xc0>
 801eece:	684b      	ldr	r3, [r1, #4]
 801eed0:	2b00      	cmp	r3, #0
 801eed2:	dc05      	bgt.n	801eee0 <__sflush_r+0x20>
 801eed4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	dc02      	bgt.n	801eee0 <__sflush_r+0x20>
 801eeda:	2000      	movs	r0, #0
 801eedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eee2:	2e00      	cmp	r6, #0
 801eee4:	d0f9      	beq.n	801eeda <__sflush_r+0x1a>
 801eee6:	2300      	movs	r3, #0
 801eee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801eeec:	682f      	ldr	r7, [r5, #0]
 801eeee:	602b      	str	r3, [r5, #0]
 801eef0:	d032      	beq.n	801ef58 <__sflush_r+0x98>
 801eef2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801eef4:	89a3      	ldrh	r3, [r4, #12]
 801eef6:	075a      	lsls	r2, r3, #29
 801eef8:	d505      	bpl.n	801ef06 <__sflush_r+0x46>
 801eefa:	6863      	ldr	r3, [r4, #4]
 801eefc:	1ac0      	subs	r0, r0, r3
 801eefe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ef00:	b10b      	cbz	r3, 801ef06 <__sflush_r+0x46>
 801ef02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ef04:	1ac0      	subs	r0, r0, r3
 801ef06:	2300      	movs	r3, #0
 801ef08:	4602      	mov	r2, r0
 801ef0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ef0c:	4628      	mov	r0, r5
 801ef0e:	6a21      	ldr	r1, [r4, #32]
 801ef10:	47b0      	blx	r6
 801ef12:	1c43      	adds	r3, r0, #1
 801ef14:	89a3      	ldrh	r3, [r4, #12]
 801ef16:	d106      	bne.n	801ef26 <__sflush_r+0x66>
 801ef18:	6829      	ldr	r1, [r5, #0]
 801ef1a:	291d      	cmp	r1, #29
 801ef1c:	d82c      	bhi.n	801ef78 <__sflush_r+0xb8>
 801ef1e:	4a29      	ldr	r2, [pc, #164]	; (801efc4 <__sflush_r+0x104>)
 801ef20:	40ca      	lsrs	r2, r1
 801ef22:	07d6      	lsls	r6, r2, #31
 801ef24:	d528      	bpl.n	801ef78 <__sflush_r+0xb8>
 801ef26:	2200      	movs	r2, #0
 801ef28:	04d9      	lsls	r1, r3, #19
 801ef2a:	6062      	str	r2, [r4, #4]
 801ef2c:	6922      	ldr	r2, [r4, #16]
 801ef2e:	6022      	str	r2, [r4, #0]
 801ef30:	d504      	bpl.n	801ef3c <__sflush_r+0x7c>
 801ef32:	1c42      	adds	r2, r0, #1
 801ef34:	d101      	bne.n	801ef3a <__sflush_r+0x7a>
 801ef36:	682b      	ldr	r3, [r5, #0]
 801ef38:	b903      	cbnz	r3, 801ef3c <__sflush_r+0x7c>
 801ef3a:	6560      	str	r0, [r4, #84]	; 0x54
 801ef3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ef3e:	602f      	str	r7, [r5, #0]
 801ef40:	2900      	cmp	r1, #0
 801ef42:	d0ca      	beq.n	801eeda <__sflush_r+0x1a>
 801ef44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ef48:	4299      	cmp	r1, r3
 801ef4a:	d002      	beq.n	801ef52 <__sflush_r+0x92>
 801ef4c:	4628      	mov	r0, r5
 801ef4e:	f7fb fe23 	bl	801ab98 <_free_r>
 801ef52:	2000      	movs	r0, #0
 801ef54:	6360      	str	r0, [r4, #52]	; 0x34
 801ef56:	e7c1      	b.n	801eedc <__sflush_r+0x1c>
 801ef58:	6a21      	ldr	r1, [r4, #32]
 801ef5a:	2301      	movs	r3, #1
 801ef5c:	4628      	mov	r0, r5
 801ef5e:	47b0      	blx	r6
 801ef60:	1c41      	adds	r1, r0, #1
 801ef62:	d1c7      	bne.n	801eef4 <__sflush_r+0x34>
 801ef64:	682b      	ldr	r3, [r5, #0]
 801ef66:	2b00      	cmp	r3, #0
 801ef68:	d0c4      	beq.n	801eef4 <__sflush_r+0x34>
 801ef6a:	2b1d      	cmp	r3, #29
 801ef6c:	d001      	beq.n	801ef72 <__sflush_r+0xb2>
 801ef6e:	2b16      	cmp	r3, #22
 801ef70:	d101      	bne.n	801ef76 <__sflush_r+0xb6>
 801ef72:	602f      	str	r7, [r5, #0]
 801ef74:	e7b1      	b.n	801eeda <__sflush_r+0x1a>
 801ef76:	89a3      	ldrh	r3, [r4, #12]
 801ef78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef7c:	81a3      	strh	r3, [r4, #12]
 801ef7e:	e7ad      	b.n	801eedc <__sflush_r+0x1c>
 801ef80:	690f      	ldr	r7, [r1, #16]
 801ef82:	2f00      	cmp	r7, #0
 801ef84:	d0a9      	beq.n	801eeda <__sflush_r+0x1a>
 801ef86:	0793      	lsls	r3, r2, #30
 801ef88:	680e      	ldr	r6, [r1, #0]
 801ef8a:	600f      	str	r7, [r1, #0]
 801ef8c:	bf0c      	ite	eq
 801ef8e:	694b      	ldreq	r3, [r1, #20]
 801ef90:	2300      	movne	r3, #0
 801ef92:	eba6 0807 	sub.w	r8, r6, r7
 801ef96:	608b      	str	r3, [r1, #8]
 801ef98:	f1b8 0f00 	cmp.w	r8, #0
 801ef9c:	dd9d      	ble.n	801eeda <__sflush_r+0x1a>
 801ef9e:	4643      	mov	r3, r8
 801efa0:	463a      	mov	r2, r7
 801efa2:	6a21      	ldr	r1, [r4, #32]
 801efa4:	4628      	mov	r0, r5
 801efa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801efa8:	47b0      	blx	r6
 801efaa:	2800      	cmp	r0, #0
 801efac:	dc06      	bgt.n	801efbc <__sflush_r+0xfc>
 801efae:	89a3      	ldrh	r3, [r4, #12]
 801efb0:	f04f 30ff 	mov.w	r0, #4294967295
 801efb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801efb8:	81a3      	strh	r3, [r4, #12]
 801efba:	e78f      	b.n	801eedc <__sflush_r+0x1c>
 801efbc:	4407      	add	r7, r0
 801efbe:	eba8 0800 	sub.w	r8, r8, r0
 801efc2:	e7e9      	b.n	801ef98 <__sflush_r+0xd8>
 801efc4:	20400001 	.word	0x20400001

0801efc8 <_fflush_r>:
 801efc8:	b538      	push	{r3, r4, r5, lr}
 801efca:	690b      	ldr	r3, [r1, #16]
 801efcc:	4605      	mov	r5, r0
 801efce:	460c      	mov	r4, r1
 801efd0:	b913      	cbnz	r3, 801efd8 <_fflush_r+0x10>
 801efd2:	2500      	movs	r5, #0
 801efd4:	4628      	mov	r0, r5
 801efd6:	bd38      	pop	{r3, r4, r5, pc}
 801efd8:	b118      	cbz	r0, 801efe2 <_fflush_r+0x1a>
 801efda:	6983      	ldr	r3, [r0, #24]
 801efdc:	b90b      	cbnz	r3, 801efe2 <_fflush_r+0x1a>
 801efde:	f000 f887 	bl	801f0f0 <__sinit>
 801efe2:	4b14      	ldr	r3, [pc, #80]	; (801f034 <_fflush_r+0x6c>)
 801efe4:	429c      	cmp	r4, r3
 801efe6:	d11b      	bne.n	801f020 <_fflush_r+0x58>
 801efe8:	686c      	ldr	r4, [r5, #4]
 801efea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801efee:	2b00      	cmp	r3, #0
 801eff0:	d0ef      	beq.n	801efd2 <_fflush_r+0xa>
 801eff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801eff4:	07d0      	lsls	r0, r2, #31
 801eff6:	d404      	bmi.n	801f002 <_fflush_r+0x3a>
 801eff8:	0599      	lsls	r1, r3, #22
 801effa:	d402      	bmi.n	801f002 <_fflush_r+0x3a>
 801effc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801effe:	f7ff fd1a 	bl	801ea36 <__retarget_lock_acquire_recursive>
 801f002:	4628      	mov	r0, r5
 801f004:	4621      	mov	r1, r4
 801f006:	f7ff ff5b 	bl	801eec0 <__sflush_r>
 801f00a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f00c:	4605      	mov	r5, r0
 801f00e:	07da      	lsls	r2, r3, #31
 801f010:	d4e0      	bmi.n	801efd4 <_fflush_r+0xc>
 801f012:	89a3      	ldrh	r3, [r4, #12]
 801f014:	059b      	lsls	r3, r3, #22
 801f016:	d4dd      	bmi.n	801efd4 <_fflush_r+0xc>
 801f018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f01a:	f7ff fd0d 	bl	801ea38 <__retarget_lock_release_recursive>
 801f01e:	e7d9      	b.n	801efd4 <_fflush_r+0xc>
 801f020:	4b05      	ldr	r3, [pc, #20]	; (801f038 <_fflush_r+0x70>)
 801f022:	429c      	cmp	r4, r3
 801f024:	d101      	bne.n	801f02a <_fflush_r+0x62>
 801f026:	68ac      	ldr	r4, [r5, #8]
 801f028:	e7df      	b.n	801efea <_fflush_r+0x22>
 801f02a:	4b04      	ldr	r3, [pc, #16]	; (801f03c <_fflush_r+0x74>)
 801f02c:	429c      	cmp	r4, r3
 801f02e:	bf08      	it	eq
 801f030:	68ec      	ldreq	r4, [r5, #12]
 801f032:	e7da      	b.n	801efea <_fflush_r+0x22>
 801f034:	08074afc 	.word	0x08074afc
 801f038:	08074b1c 	.word	0x08074b1c
 801f03c:	08074adc 	.word	0x08074adc

0801f040 <std>:
 801f040:	2300      	movs	r3, #0
 801f042:	b510      	push	{r4, lr}
 801f044:	4604      	mov	r4, r0
 801f046:	6083      	str	r3, [r0, #8]
 801f048:	8181      	strh	r1, [r0, #12]
 801f04a:	4619      	mov	r1, r3
 801f04c:	6643      	str	r3, [r0, #100]	; 0x64
 801f04e:	81c2      	strh	r2, [r0, #14]
 801f050:	2208      	movs	r2, #8
 801f052:	6183      	str	r3, [r0, #24]
 801f054:	e9c0 3300 	strd	r3, r3, [r0]
 801f058:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f05c:	305c      	adds	r0, #92	; 0x5c
 801f05e:	f7fb fd92 	bl	801ab86 <memset>
 801f062:	4b05      	ldr	r3, [pc, #20]	; (801f078 <std+0x38>)
 801f064:	6224      	str	r4, [r4, #32]
 801f066:	6263      	str	r3, [r4, #36]	; 0x24
 801f068:	4b04      	ldr	r3, [pc, #16]	; (801f07c <std+0x3c>)
 801f06a:	62a3      	str	r3, [r4, #40]	; 0x28
 801f06c:	4b04      	ldr	r3, [pc, #16]	; (801f080 <std+0x40>)
 801f06e:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f070:	4b04      	ldr	r3, [pc, #16]	; (801f084 <std+0x44>)
 801f072:	6323      	str	r3, [r4, #48]	; 0x30
 801f074:	bd10      	pop	{r4, pc}
 801f076:	bf00      	nop
 801f078:	0801f37d 	.word	0x0801f37d
 801f07c:	0801f39f 	.word	0x0801f39f
 801f080:	0801f3d7 	.word	0x0801f3d7
 801f084:	0801f3fb 	.word	0x0801f3fb

0801f088 <_cleanup_r>:
 801f088:	4901      	ldr	r1, [pc, #4]	; (801f090 <_cleanup_r+0x8>)
 801f08a:	f000 b8af 	b.w	801f1ec <_fwalk_reent>
 801f08e:	bf00      	nop
 801f090:	0801efc9 	.word	0x0801efc9

0801f094 <__sfmoreglue>:
 801f094:	b570      	push	{r4, r5, r6, lr}
 801f096:	2268      	movs	r2, #104	; 0x68
 801f098:	1e4d      	subs	r5, r1, #1
 801f09a:	460e      	mov	r6, r1
 801f09c:	4355      	muls	r5, r2
 801f09e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f0a2:	f7fb fde5 	bl	801ac70 <_malloc_r>
 801f0a6:	4604      	mov	r4, r0
 801f0a8:	b140      	cbz	r0, 801f0bc <__sfmoreglue+0x28>
 801f0aa:	2100      	movs	r1, #0
 801f0ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f0b0:	e9c0 1600 	strd	r1, r6, [r0]
 801f0b4:	300c      	adds	r0, #12
 801f0b6:	60a0      	str	r0, [r4, #8]
 801f0b8:	f7fb fd65 	bl	801ab86 <memset>
 801f0bc:	4620      	mov	r0, r4
 801f0be:	bd70      	pop	{r4, r5, r6, pc}

0801f0c0 <__sfp_lock_acquire>:
 801f0c0:	4801      	ldr	r0, [pc, #4]	; (801f0c8 <__sfp_lock_acquire+0x8>)
 801f0c2:	f7ff bcb8 	b.w	801ea36 <__retarget_lock_acquire_recursive>
 801f0c6:	bf00      	nop
 801f0c8:	20004475 	.word	0x20004475

0801f0cc <__sfp_lock_release>:
 801f0cc:	4801      	ldr	r0, [pc, #4]	; (801f0d4 <__sfp_lock_release+0x8>)
 801f0ce:	f7ff bcb3 	b.w	801ea38 <__retarget_lock_release_recursive>
 801f0d2:	bf00      	nop
 801f0d4:	20004475 	.word	0x20004475

0801f0d8 <__sinit_lock_acquire>:
 801f0d8:	4801      	ldr	r0, [pc, #4]	; (801f0e0 <__sinit_lock_acquire+0x8>)
 801f0da:	f7ff bcac 	b.w	801ea36 <__retarget_lock_acquire_recursive>
 801f0de:	bf00      	nop
 801f0e0:	20004476 	.word	0x20004476

0801f0e4 <__sinit_lock_release>:
 801f0e4:	4801      	ldr	r0, [pc, #4]	; (801f0ec <__sinit_lock_release+0x8>)
 801f0e6:	f7ff bca7 	b.w	801ea38 <__retarget_lock_release_recursive>
 801f0ea:	bf00      	nop
 801f0ec:	20004476 	.word	0x20004476

0801f0f0 <__sinit>:
 801f0f0:	b510      	push	{r4, lr}
 801f0f2:	4604      	mov	r4, r0
 801f0f4:	f7ff fff0 	bl	801f0d8 <__sinit_lock_acquire>
 801f0f8:	69a3      	ldr	r3, [r4, #24]
 801f0fa:	b11b      	cbz	r3, 801f104 <__sinit+0x14>
 801f0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f100:	f7ff bff0 	b.w	801f0e4 <__sinit_lock_release>
 801f104:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f108:	6523      	str	r3, [r4, #80]	; 0x50
 801f10a:	4620      	mov	r0, r4
 801f10c:	4b12      	ldr	r3, [pc, #72]	; (801f158 <__sinit+0x68>)
 801f10e:	4a13      	ldr	r2, [pc, #76]	; (801f15c <__sinit+0x6c>)
 801f110:	681b      	ldr	r3, [r3, #0]
 801f112:	62a2      	str	r2, [r4, #40]	; 0x28
 801f114:	42a3      	cmp	r3, r4
 801f116:	bf04      	itt	eq
 801f118:	2301      	moveq	r3, #1
 801f11a:	61a3      	streq	r3, [r4, #24]
 801f11c:	f000 f820 	bl	801f160 <__sfp>
 801f120:	6060      	str	r0, [r4, #4]
 801f122:	4620      	mov	r0, r4
 801f124:	f000 f81c 	bl	801f160 <__sfp>
 801f128:	60a0      	str	r0, [r4, #8]
 801f12a:	4620      	mov	r0, r4
 801f12c:	f000 f818 	bl	801f160 <__sfp>
 801f130:	2200      	movs	r2, #0
 801f132:	2104      	movs	r1, #4
 801f134:	60e0      	str	r0, [r4, #12]
 801f136:	6860      	ldr	r0, [r4, #4]
 801f138:	f7ff ff82 	bl	801f040 <std>
 801f13c:	2201      	movs	r2, #1
 801f13e:	2109      	movs	r1, #9
 801f140:	68a0      	ldr	r0, [r4, #8]
 801f142:	f7ff ff7d 	bl	801f040 <std>
 801f146:	2202      	movs	r2, #2
 801f148:	2112      	movs	r1, #18
 801f14a:	68e0      	ldr	r0, [r4, #12]
 801f14c:	f7ff ff78 	bl	801f040 <std>
 801f150:	2301      	movs	r3, #1
 801f152:	61a3      	str	r3, [r4, #24]
 801f154:	e7d2      	b.n	801f0fc <__sinit+0xc>
 801f156:	bf00      	nop
 801f158:	08074694 	.word	0x08074694
 801f15c:	0801f089 	.word	0x0801f089

0801f160 <__sfp>:
 801f160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f162:	4607      	mov	r7, r0
 801f164:	f7ff ffac 	bl	801f0c0 <__sfp_lock_acquire>
 801f168:	4b1e      	ldr	r3, [pc, #120]	; (801f1e4 <__sfp+0x84>)
 801f16a:	681e      	ldr	r6, [r3, #0]
 801f16c:	69b3      	ldr	r3, [r6, #24]
 801f16e:	b913      	cbnz	r3, 801f176 <__sfp+0x16>
 801f170:	4630      	mov	r0, r6
 801f172:	f7ff ffbd 	bl	801f0f0 <__sinit>
 801f176:	3648      	adds	r6, #72	; 0x48
 801f178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f17c:	3b01      	subs	r3, #1
 801f17e:	d503      	bpl.n	801f188 <__sfp+0x28>
 801f180:	6833      	ldr	r3, [r6, #0]
 801f182:	b30b      	cbz	r3, 801f1c8 <__sfp+0x68>
 801f184:	6836      	ldr	r6, [r6, #0]
 801f186:	e7f7      	b.n	801f178 <__sfp+0x18>
 801f188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f18c:	b9d5      	cbnz	r5, 801f1c4 <__sfp+0x64>
 801f18e:	4b16      	ldr	r3, [pc, #88]	; (801f1e8 <__sfp+0x88>)
 801f190:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f194:	6665      	str	r5, [r4, #100]	; 0x64
 801f196:	60e3      	str	r3, [r4, #12]
 801f198:	f7ff fc4c 	bl	801ea34 <__retarget_lock_init_recursive>
 801f19c:	f7ff ff96 	bl	801f0cc <__sfp_lock_release>
 801f1a0:	2208      	movs	r2, #8
 801f1a2:	4629      	mov	r1, r5
 801f1a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f1a8:	6025      	str	r5, [r4, #0]
 801f1aa:	61a5      	str	r5, [r4, #24]
 801f1ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f1b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f1b4:	f7fb fce7 	bl	801ab86 <memset>
 801f1b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f1bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f1c0:	4620      	mov	r0, r4
 801f1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1c4:	3468      	adds	r4, #104	; 0x68
 801f1c6:	e7d9      	b.n	801f17c <__sfp+0x1c>
 801f1c8:	2104      	movs	r1, #4
 801f1ca:	4638      	mov	r0, r7
 801f1cc:	f7ff ff62 	bl	801f094 <__sfmoreglue>
 801f1d0:	4604      	mov	r4, r0
 801f1d2:	6030      	str	r0, [r6, #0]
 801f1d4:	2800      	cmp	r0, #0
 801f1d6:	d1d5      	bne.n	801f184 <__sfp+0x24>
 801f1d8:	f7ff ff78 	bl	801f0cc <__sfp_lock_release>
 801f1dc:	230c      	movs	r3, #12
 801f1de:	603b      	str	r3, [r7, #0]
 801f1e0:	e7ee      	b.n	801f1c0 <__sfp+0x60>
 801f1e2:	bf00      	nop
 801f1e4:	08074694 	.word	0x08074694
 801f1e8:	ffff0001 	.word	0xffff0001

0801f1ec <_fwalk_reent>:
 801f1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f1f0:	4606      	mov	r6, r0
 801f1f2:	4688      	mov	r8, r1
 801f1f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f1f8:	2700      	movs	r7, #0
 801f1fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f1fe:	f1b9 0901 	subs.w	r9, r9, #1
 801f202:	d505      	bpl.n	801f210 <_fwalk_reent+0x24>
 801f204:	6824      	ldr	r4, [r4, #0]
 801f206:	2c00      	cmp	r4, #0
 801f208:	d1f7      	bne.n	801f1fa <_fwalk_reent+0xe>
 801f20a:	4638      	mov	r0, r7
 801f20c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f210:	89ab      	ldrh	r3, [r5, #12]
 801f212:	2b01      	cmp	r3, #1
 801f214:	d907      	bls.n	801f226 <_fwalk_reent+0x3a>
 801f216:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f21a:	3301      	adds	r3, #1
 801f21c:	d003      	beq.n	801f226 <_fwalk_reent+0x3a>
 801f21e:	4629      	mov	r1, r5
 801f220:	4630      	mov	r0, r6
 801f222:	47c0      	blx	r8
 801f224:	4307      	orrs	r7, r0
 801f226:	3568      	adds	r5, #104	; 0x68
 801f228:	e7e9      	b.n	801f1fe <_fwalk_reent+0x12>

0801f22a <__swhatbuf_r>:
 801f22a:	b570      	push	{r4, r5, r6, lr}
 801f22c:	460e      	mov	r6, r1
 801f22e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f232:	b096      	sub	sp, #88	; 0x58
 801f234:	4614      	mov	r4, r2
 801f236:	2900      	cmp	r1, #0
 801f238:	461d      	mov	r5, r3
 801f23a:	da08      	bge.n	801f24e <__swhatbuf_r+0x24>
 801f23c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f240:	2200      	movs	r2, #0
 801f242:	602a      	str	r2, [r5, #0]
 801f244:	061a      	lsls	r2, r3, #24
 801f246:	d410      	bmi.n	801f26a <__swhatbuf_r+0x40>
 801f248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f24c:	e00e      	b.n	801f26c <__swhatbuf_r+0x42>
 801f24e:	466a      	mov	r2, sp
 801f250:	f000 f8fa 	bl	801f448 <_fstat_r>
 801f254:	2800      	cmp	r0, #0
 801f256:	dbf1      	blt.n	801f23c <__swhatbuf_r+0x12>
 801f258:	9a01      	ldr	r2, [sp, #4]
 801f25a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f25e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f262:	425a      	negs	r2, r3
 801f264:	415a      	adcs	r2, r3
 801f266:	602a      	str	r2, [r5, #0]
 801f268:	e7ee      	b.n	801f248 <__swhatbuf_r+0x1e>
 801f26a:	2340      	movs	r3, #64	; 0x40
 801f26c:	2000      	movs	r0, #0
 801f26e:	6023      	str	r3, [r4, #0]
 801f270:	b016      	add	sp, #88	; 0x58
 801f272:	bd70      	pop	{r4, r5, r6, pc}

0801f274 <__smakebuf_r>:
 801f274:	898b      	ldrh	r3, [r1, #12]
 801f276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f278:	079d      	lsls	r5, r3, #30
 801f27a:	4606      	mov	r6, r0
 801f27c:	460c      	mov	r4, r1
 801f27e:	d507      	bpl.n	801f290 <__smakebuf_r+0x1c>
 801f280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f284:	6023      	str	r3, [r4, #0]
 801f286:	6123      	str	r3, [r4, #16]
 801f288:	2301      	movs	r3, #1
 801f28a:	6163      	str	r3, [r4, #20]
 801f28c:	b002      	add	sp, #8
 801f28e:	bd70      	pop	{r4, r5, r6, pc}
 801f290:	ab01      	add	r3, sp, #4
 801f292:	466a      	mov	r2, sp
 801f294:	f7ff ffc9 	bl	801f22a <__swhatbuf_r>
 801f298:	9900      	ldr	r1, [sp, #0]
 801f29a:	4605      	mov	r5, r0
 801f29c:	4630      	mov	r0, r6
 801f29e:	f7fb fce7 	bl	801ac70 <_malloc_r>
 801f2a2:	b948      	cbnz	r0, 801f2b8 <__smakebuf_r+0x44>
 801f2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2a8:	059a      	lsls	r2, r3, #22
 801f2aa:	d4ef      	bmi.n	801f28c <__smakebuf_r+0x18>
 801f2ac:	f023 0303 	bic.w	r3, r3, #3
 801f2b0:	f043 0302 	orr.w	r3, r3, #2
 801f2b4:	81a3      	strh	r3, [r4, #12]
 801f2b6:	e7e3      	b.n	801f280 <__smakebuf_r+0xc>
 801f2b8:	4b0d      	ldr	r3, [pc, #52]	; (801f2f0 <__smakebuf_r+0x7c>)
 801f2ba:	62b3      	str	r3, [r6, #40]	; 0x28
 801f2bc:	89a3      	ldrh	r3, [r4, #12]
 801f2be:	6020      	str	r0, [r4, #0]
 801f2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f2c4:	6120      	str	r0, [r4, #16]
 801f2c6:	81a3      	strh	r3, [r4, #12]
 801f2c8:	9b00      	ldr	r3, [sp, #0]
 801f2ca:	6163      	str	r3, [r4, #20]
 801f2cc:	9b01      	ldr	r3, [sp, #4]
 801f2ce:	b15b      	cbz	r3, 801f2e8 <__smakebuf_r+0x74>
 801f2d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f2d4:	4630      	mov	r0, r6
 801f2d6:	f000 f8c9 	bl	801f46c <_isatty_r>
 801f2da:	b128      	cbz	r0, 801f2e8 <__smakebuf_r+0x74>
 801f2dc:	89a3      	ldrh	r3, [r4, #12]
 801f2de:	f023 0303 	bic.w	r3, r3, #3
 801f2e2:	f043 0301 	orr.w	r3, r3, #1
 801f2e6:	81a3      	strh	r3, [r4, #12]
 801f2e8:	89a0      	ldrh	r0, [r4, #12]
 801f2ea:	4305      	orrs	r5, r0
 801f2ec:	81a5      	strh	r5, [r4, #12]
 801f2ee:	e7cd      	b.n	801f28c <__smakebuf_r+0x18>
 801f2f0:	0801f089 	.word	0x0801f089

0801f2f4 <_raise_r>:
 801f2f4:	291f      	cmp	r1, #31
 801f2f6:	b538      	push	{r3, r4, r5, lr}
 801f2f8:	4604      	mov	r4, r0
 801f2fa:	460d      	mov	r5, r1
 801f2fc:	d904      	bls.n	801f308 <_raise_r+0x14>
 801f2fe:	2316      	movs	r3, #22
 801f300:	6003      	str	r3, [r0, #0]
 801f302:	f04f 30ff 	mov.w	r0, #4294967295
 801f306:	bd38      	pop	{r3, r4, r5, pc}
 801f308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f30a:	b112      	cbz	r2, 801f312 <_raise_r+0x1e>
 801f30c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f310:	b94b      	cbnz	r3, 801f326 <_raise_r+0x32>
 801f312:	4620      	mov	r0, r4
 801f314:	f000 f830 	bl	801f378 <_getpid_r>
 801f318:	462a      	mov	r2, r5
 801f31a:	4601      	mov	r1, r0
 801f31c:	4620      	mov	r0, r4
 801f31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f322:	f000 b817 	b.w	801f354 <_kill_r>
 801f326:	2b01      	cmp	r3, #1
 801f328:	d00a      	beq.n	801f340 <_raise_r+0x4c>
 801f32a:	1c59      	adds	r1, r3, #1
 801f32c:	d103      	bne.n	801f336 <_raise_r+0x42>
 801f32e:	2316      	movs	r3, #22
 801f330:	6003      	str	r3, [r0, #0]
 801f332:	2001      	movs	r0, #1
 801f334:	e7e7      	b.n	801f306 <_raise_r+0x12>
 801f336:	2400      	movs	r4, #0
 801f338:	4628      	mov	r0, r5
 801f33a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f33e:	4798      	blx	r3
 801f340:	2000      	movs	r0, #0
 801f342:	e7e0      	b.n	801f306 <_raise_r+0x12>

0801f344 <raise>:
 801f344:	4b02      	ldr	r3, [pc, #8]	; (801f350 <raise+0xc>)
 801f346:	4601      	mov	r1, r0
 801f348:	6818      	ldr	r0, [r3, #0]
 801f34a:	f7ff bfd3 	b.w	801f2f4 <_raise_r>
 801f34e:	bf00      	nop
 801f350:	20000930 	.word	0x20000930

0801f354 <_kill_r>:
 801f354:	b538      	push	{r3, r4, r5, lr}
 801f356:	2300      	movs	r3, #0
 801f358:	4d06      	ldr	r5, [pc, #24]	; (801f374 <_kill_r+0x20>)
 801f35a:	4604      	mov	r4, r0
 801f35c:	4608      	mov	r0, r1
 801f35e:	4611      	mov	r1, r2
 801f360:	602b      	str	r3, [r5, #0]
 801f362:	f7e4 fc51 	bl	8003c08 <_kill>
 801f366:	1c43      	adds	r3, r0, #1
 801f368:	d102      	bne.n	801f370 <_kill_r+0x1c>
 801f36a:	682b      	ldr	r3, [r5, #0]
 801f36c:	b103      	cbz	r3, 801f370 <_kill_r+0x1c>
 801f36e:	6023      	str	r3, [r4, #0]
 801f370:	bd38      	pop	{r3, r4, r5, pc}
 801f372:	bf00      	nop
 801f374:	20004470 	.word	0x20004470

0801f378 <_getpid_r>:
 801f378:	f7e4 bc3e 	b.w	8003bf8 <_getpid>

0801f37c <__sread>:
 801f37c:	b510      	push	{r4, lr}
 801f37e:	460c      	mov	r4, r1
 801f380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f384:	f000 f894 	bl	801f4b0 <_read_r>
 801f388:	2800      	cmp	r0, #0
 801f38a:	bfab      	itete	ge
 801f38c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f38e:	89a3      	ldrhlt	r3, [r4, #12]
 801f390:	181b      	addge	r3, r3, r0
 801f392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f396:	bfac      	ite	ge
 801f398:	6563      	strge	r3, [r4, #84]	; 0x54
 801f39a:	81a3      	strhlt	r3, [r4, #12]
 801f39c:	bd10      	pop	{r4, pc}

0801f39e <__swrite>:
 801f39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3a2:	461f      	mov	r7, r3
 801f3a4:	898b      	ldrh	r3, [r1, #12]
 801f3a6:	4605      	mov	r5, r0
 801f3a8:	460c      	mov	r4, r1
 801f3aa:	05db      	lsls	r3, r3, #23
 801f3ac:	4616      	mov	r6, r2
 801f3ae:	d505      	bpl.n	801f3bc <__swrite+0x1e>
 801f3b0:	2302      	movs	r3, #2
 801f3b2:	2200      	movs	r2, #0
 801f3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f3b8:	f000 f868 	bl	801f48c <_lseek_r>
 801f3bc:	89a3      	ldrh	r3, [r4, #12]
 801f3be:	4632      	mov	r2, r6
 801f3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f3c4:	4628      	mov	r0, r5
 801f3c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f3ca:	81a3      	strh	r3, [r4, #12]
 801f3cc:	463b      	mov	r3, r7
 801f3ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f3d2:	f000 b817 	b.w	801f404 <_write_r>

0801f3d6 <__sseek>:
 801f3d6:	b510      	push	{r4, lr}
 801f3d8:	460c      	mov	r4, r1
 801f3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f3de:	f000 f855 	bl	801f48c <_lseek_r>
 801f3e2:	1c43      	adds	r3, r0, #1
 801f3e4:	89a3      	ldrh	r3, [r4, #12]
 801f3e6:	bf15      	itete	ne
 801f3e8:	6560      	strne	r0, [r4, #84]	; 0x54
 801f3ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f3ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f3f2:	81a3      	strheq	r3, [r4, #12]
 801f3f4:	bf18      	it	ne
 801f3f6:	81a3      	strhne	r3, [r4, #12]
 801f3f8:	bd10      	pop	{r4, pc}

0801f3fa <__sclose>:
 801f3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f3fe:	f000 b813 	b.w	801f428 <_close_r>
	...

0801f404 <_write_r>:
 801f404:	b538      	push	{r3, r4, r5, lr}
 801f406:	4604      	mov	r4, r0
 801f408:	4d06      	ldr	r5, [pc, #24]	; (801f424 <_write_r+0x20>)
 801f40a:	4608      	mov	r0, r1
 801f40c:	4611      	mov	r1, r2
 801f40e:	2200      	movs	r2, #0
 801f410:	602a      	str	r2, [r5, #0]
 801f412:	461a      	mov	r2, r3
 801f414:	f7e4 fc2f 	bl	8003c76 <_write>
 801f418:	1c43      	adds	r3, r0, #1
 801f41a:	d102      	bne.n	801f422 <_write_r+0x1e>
 801f41c:	682b      	ldr	r3, [r5, #0]
 801f41e:	b103      	cbz	r3, 801f422 <_write_r+0x1e>
 801f420:	6023      	str	r3, [r4, #0]
 801f422:	bd38      	pop	{r3, r4, r5, pc}
 801f424:	20004470 	.word	0x20004470

0801f428 <_close_r>:
 801f428:	b538      	push	{r3, r4, r5, lr}
 801f42a:	2300      	movs	r3, #0
 801f42c:	4d05      	ldr	r5, [pc, #20]	; (801f444 <_close_r+0x1c>)
 801f42e:	4604      	mov	r4, r0
 801f430:	4608      	mov	r0, r1
 801f432:	602b      	str	r3, [r5, #0]
 801f434:	f7e4 fc3b 	bl	8003cae <_close>
 801f438:	1c43      	adds	r3, r0, #1
 801f43a:	d102      	bne.n	801f442 <_close_r+0x1a>
 801f43c:	682b      	ldr	r3, [r5, #0]
 801f43e:	b103      	cbz	r3, 801f442 <_close_r+0x1a>
 801f440:	6023      	str	r3, [r4, #0]
 801f442:	bd38      	pop	{r3, r4, r5, pc}
 801f444:	20004470 	.word	0x20004470

0801f448 <_fstat_r>:
 801f448:	b538      	push	{r3, r4, r5, lr}
 801f44a:	2300      	movs	r3, #0
 801f44c:	4d06      	ldr	r5, [pc, #24]	; (801f468 <_fstat_r+0x20>)
 801f44e:	4604      	mov	r4, r0
 801f450:	4608      	mov	r0, r1
 801f452:	4611      	mov	r1, r2
 801f454:	602b      	str	r3, [r5, #0]
 801f456:	f7e4 fc36 	bl	8003cc6 <_fstat>
 801f45a:	1c43      	adds	r3, r0, #1
 801f45c:	d102      	bne.n	801f464 <_fstat_r+0x1c>
 801f45e:	682b      	ldr	r3, [r5, #0]
 801f460:	b103      	cbz	r3, 801f464 <_fstat_r+0x1c>
 801f462:	6023      	str	r3, [r4, #0]
 801f464:	bd38      	pop	{r3, r4, r5, pc}
 801f466:	bf00      	nop
 801f468:	20004470 	.word	0x20004470

0801f46c <_isatty_r>:
 801f46c:	b538      	push	{r3, r4, r5, lr}
 801f46e:	2300      	movs	r3, #0
 801f470:	4d05      	ldr	r5, [pc, #20]	; (801f488 <_isatty_r+0x1c>)
 801f472:	4604      	mov	r4, r0
 801f474:	4608      	mov	r0, r1
 801f476:	602b      	str	r3, [r5, #0]
 801f478:	f7e4 fc35 	bl	8003ce6 <_isatty>
 801f47c:	1c43      	adds	r3, r0, #1
 801f47e:	d102      	bne.n	801f486 <_isatty_r+0x1a>
 801f480:	682b      	ldr	r3, [r5, #0]
 801f482:	b103      	cbz	r3, 801f486 <_isatty_r+0x1a>
 801f484:	6023      	str	r3, [r4, #0]
 801f486:	bd38      	pop	{r3, r4, r5, pc}
 801f488:	20004470 	.word	0x20004470

0801f48c <_lseek_r>:
 801f48c:	b538      	push	{r3, r4, r5, lr}
 801f48e:	4604      	mov	r4, r0
 801f490:	4d06      	ldr	r5, [pc, #24]	; (801f4ac <_lseek_r+0x20>)
 801f492:	4608      	mov	r0, r1
 801f494:	4611      	mov	r1, r2
 801f496:	2200      	movs	r2, #0
 801f498:	602a      	str	r2, [r5, #0]
 801f49a:	461a      	mov	r2, r3
 801f49c:	f7e4 fc2e 	bl	8003cfc <_lseek>
 801f4a0:	1c43      	adds	r3, r0, #1
 801f4a2:	d102      	bne.n	801f4aa <_lseek_r+0x1e>
 801f4a4:	682b      	ldr	r3, [r5, #0]
 801f4a6:	b103      	cbz	r3, 801f4aa <_lseek_r+0x1e>
 801f4a8:	6023      	str	r3, [r4, #0]
 801f4aa:	bd38      	pop	{r3, r4, r5, pc}
 801f4ac:	20004470 	.word	0x20004470

0801f4b0 <_read_r>:
 801f4b0:	b538      	push	{r3, r4, r5, lr}
 801f4b2:	4604      	mov	r4, r0
 801f4b4:	4d06      	ldr	r5, [pc, #24]	; (801f4d0 <_read_r+0x20>)
 801f4b6:	4608      	mov	r0, r1
 801f4b8:	4611      	mov	r1, r2
 801f4ba:	2200      	movs	r2, #0
 801f4bc:	602a      	str	r2, [r5, #0]
 801f4be:	461a      	mov	r2, r3
 801f4c0:	f7e4 fbbc 	bl	8003c3c <_read>
 801f4c4:	1c43      	adds	r3, r0, #1
 801f4c6:	d102      	bne.n	801f4ce <_read_r+0x1e>
 801f4c8:	682b      	ldr	r3, [r5, #0]
 801f4ca:	b103      	cbz	r3, 801f4ce <_read_r+0x1e>
 801f4cc:	6023      	str	r3, [r4, #0]
 801f4ce:	bd38      	pop	{r3, r4, r5, pc}
 801f4d0:	20004470 	.word	0x20004470

0801f4d4 <expf>:
 801f4d4:	b508      	push	{r3, lr}
 801f4d6:	ed2d 8b02 	vpush	{d8}
 801f4da:	eef0 8a40 	vmov.f32	s17, s0
 801f4de:	f000 f84d 	bl	801f57c <__ieee754_expf>
 801f4e2:	eeb0 8a40 	vmov.f32	s16, s0
 801f4e6:	eeb0 0a68 	vmov.f32	s0, s17
 801f4ea:	f000 f93b 	bl	801f764 <finitef>
 801f4ee:	b160      	cbz	r0, 801f50a <expf+0x36>
 801f4f0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801f530 <expf+0x5c>
 801f4f4:	eef4 8ae7 	vcmpe.f32	s17, s15
 801f4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4fc:	dd0a      	ble.n	801f514 <expf+0x40>
 801f4fe:	f7fb fb03 	bl	801ab08 <__errno>
 801f502:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801f534 <expf+0x60>
 801f506:	2322      	movs	r3, #34	; 0x22
 801f508:	6003      	str	r3, [r0, #0]
 801f50a:	eeb0 0a48 	vmov.f32	s0, s16
 801f50e:	ecbd 8b02 	vpop	{d8}
 801f512:	bd08      	pop	{r3, pc}
 801f514:	eddf 7a08 	vldr	s15, [pc, #32]	; 801f538 <expf+0x64>
 801f518:	eef4 8ae7 	vcmpe.f32	s17, s15
 801f51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f520:	d5f3      	bpl.n	801f50a <expf+0x36>
 801f522:	f7fb faf1 	bl	801ab08 <__errno>
 801f526:	2322      	movs	r3, #34	; 0x22
 801f528:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801f53c <expf+0x68>
 801f52c:	6003      	str	r3, [r0, #0]
 801f52e:	e7ec      	b.n	801f50a <expf+0x36>
 801f530:	42b17180 	.word	0x42b17180
 801f534:	7f800000 	.word	0x7f800000
 801f538:	c2cff1b5 	.word	0xc2cff1b5
 801f53c:	00000000 	.word	0x00000000

0801f540 <sqrtf>:
 801f540:	b508      	push	{r3, lr}
 801f542:	ed2d 8b02 	vpush	{d8}
 801f546:	eeb0 8a40 	vmov.f32	s16, s0
 801f54a:	f000 f8e5 	bl	801f718 <__ieee754_sqrtf>
 801f54e:	eeb4 8a48 	vcmp.f32	s16, s16
 801f552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f556:	d60c      	bvs.n	801f572 <sqrtf+0x32>
 801f558:	eddf 8a07 	vldr	s17, [pc, #28]	; 801f578 <sqrtf+0x38>
 801f55c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801f560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f564:	d505      	bpl.n	801f572 <sqrtf+0x32>
 801f566:	f7fb facf 	bl	801ab08 <__errno>
 801f56a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801f56e:	2321      	movs	r3, #33	; 0x21
 801f570:	6003      	str	r3, [r0, #0]
 801f572:	ecbd 8b02 	vpop	{d8}
 801f576:	bd08      	pop	{r3, pc}
 801f578:	00000000 	.word	0x00000000

0801f57c <__ieee754_expf>:
 801f57c:	ee10 2a10 	vmov	r2, s0
 801f580:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801f584:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f588:	d902      	bls.n	801f590 <__ieee754_expf+0x14>
 801f58a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f58e:	4770      	bx	lr
 801f590:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801f594:	d105      	bne.n	801f5a2 <__ieee754_expf+0x26>
 801f596:	2b00      	cmp	r3, #0
 801f598:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801f6d0 <__ieee754_expf+0x154>
 801f59c:	fe00 0a27 	vseleq.f32	s0, s0, s15
 801f5a0:	4770      	bx	lr
 801f5a2:	484c      	ldr	r0, [pc, #304]	; (801f6d4 <__ieee754_expf+0x158>)
 801f5a4:	4282      	cmp	r2, r0
 801f5a6:	dd02      	ble.n	801f5ae <__ieee754_expf+0x32>
 801f5a8:	2000      	movs	r0, #0
 801f5aa:	f000 b8d5 	b.w	801f758 <__math_oflowf>
 801f5ae:	2a00      	cmp	r2, #0
 801f5b0:	da05      	bge.n	801f5be <__ieee754_expf+0x42>
 801f5b2:	4a49      	ldr	r2, [pc, #292]	; (801f6d8 <__ieee754_expf+0x15c>)
 801f5b4:	4291      	cmp	r1, r2
 801f5b6:	d902      	bls.n	801f5be <__ieee754_expf+0x42>
 801f5b8:	2000      	movs	r0, #0
 801f5ba:	f000 b8c7 	b.w	801f74c <__math_uflowf>
 801f5be:	4a47      	ldr	r2, [pc, #284]	; (801f6dc <__ieee754_expf+0x160>)
 801f5c0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f5c4:	4291      	cmp	r1, r2
 801f5c6:	d952      	bls.n	801f66e <__ieee754_expf+0xf2>
 801f5c8:	4a45      	ldr	r2, [pc, #276]	; (801f6e0 <__ieee754_expf+0x164>)
 801f5ca:	4291      	cmp	r1, r2
 801f5cc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801f5d0:	d834      	bhi.n	801f63c <__ieee754_expf+0xc0>
 801f5d2:	4944      	ldr	r1, [pc, #272]	; (801f6e4 <__ieee754_expf+0x168>)
 801f5d4:	4411      	add	r1, r2
 801f5d6:	ed91 7a00 	vldr	s14, [r1]
 801f5da:	4943      	ldr	r1, [pc, #268]	; (801f6e8 <__ieee754_expf+0x16c>)
 801f5dc:	ee30 7a47 	vsub.f32	s14, s0, s14
 801f5e0:	440a      	add	r2, r1
 801f5e2:	edd2 7a00 	vldr	s15, [r2]
 801f5e6:	f1c3 0201 	rsb	r2, r3, #1
 801f5ea:	1ad2      	subs	r2, r2, r3
 801f5ec:	ee37 0a67 	vsub.f32	s0, s14, s15
 801f5f0:	ee20 6a00 	vmul.f32	s12, s0, s0
 801f5f4:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801f6ec <__ieee754_expf+0x170>
 801f5f8:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801f6f0 <__ieee754_expf+0x174>
 801f5fc:	eee6 6a05 	vfma.f32	s13, s12, s10
 801f600:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801f6f4 <__ieee754_expf+0x178>
 801f604:	eea6 5a86 	vfma.f32	s10, s13, s12
 801f608:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801f6f8 <__ieee754_expf+0x17c>
 801f60c:	eee5 6a06 	vfma.f32	s13, s10, s12
 801f610:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801f6fc <__ieee754_expf+0x180>
 801f614:	eea6 5a86 	vfma.f32	s10, s13, s12
 801f618:	eef0 6a40 	vmov.f32	s13, s0
 801f61c:	eee5 6a46 	vfms.f32	s13, s10, s12
 801f620:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801f624:	ee20 5a26 	vmul.f32	s10, s0, s13
 801f628:	bb92      	cbnz	r2, 801f690 <__ieee754_expf+0x114>
 801f62a:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801f62e:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801f632:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f636:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801f63a:	4770      	bx	lr
 801f63c:	4b30      	ldr	r3, [pc, #192]	; (801f700 <__ieee754_expf+0x184>)
 801f63e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801f704 <__ieee754_expf+0x188>
 801f642:	4413      	add	r3, r2
 801f644:	eddf 6a30 	vldr	s13, [pc, #192]	; 801f708 <__ieee754_expf+0x18c>
 801f648:	edd3 7a00 	vldr	s15, [r3]
 801f64c:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f650:	eeb0 7a40 	vmov.f32	s14, s0
 801f654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f658:	ee17 2a90 	vmov	r2, s15
 801f65c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f660:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801f664:	eddf 6a29 	vldr	s13, [pc, #164]	; 801f70c <__ieee754_expf+0x190>
 801f668:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f66c:	e7be      	b.n	801f5ec <__ieee754_expf+0x70>
 801f66e:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 801f672:	d20b      	bcs.n	801f68c <__ieee754_expf+0x110>
 801f674:	eddf 6a26 	vldr	s13, [pc, #152]	; 801f710 <__ieee754_expf+0x194>
 801f678:	ee70 6a26 	vadd.f32	s13, s0, s13
 801f67c:	eef4 6ae5 	vcmpe.f32	s13, s11
 801f680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f684:	dd02      	ble.n	801f68c <__ieee754_expf+0x110>
 801f686:	ee30 0a25 	vadd.f32	s0, s0, s11
 801f68a:	4770      	bx	lr
 801f68c:	2200      	movs	r2, #0
 801f68e:	e7af      	b.n	801f5f0 <__ieee754_expf+0x74>
 801f690:	ee76 6a66 	vsub.f32	s13, s12, s13
 801f694:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801f698:	bfb8      	it	lt
 801f69a:	3264      	addlt	r2, #100	; 0x64
 801f69c:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801f6a0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f6a4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801f6a8:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801f6ac:	ee17 3a90 	vmov	r3, s15
 801f6b0:	bfb5      	itete	lt
 801f6b2:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801f714 <__ieee754_expf+0x198>
 801f6b6:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801f6ba:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801f6be:	ee00 3a10 	vmovge	s0, r3
 801f6c2:	bfbc      	itt	lt
 801f6c4:	ee00 3a10 	vmovlt	s0, r3
 801f6c8:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801f6cc:	4770      	bx	lr
 801f6ce:	bf00      	nop
 801f6d0:	00000000 	.word	0x00000000
 801f6d4:	42b17217 	.word	0x42b17217
 801f6d8:	42cff1b5 	.word	0x42cff1b5
 801f6dc:	3eb17218 	.word	0x3eb17218
 801f6e0:	3f851591 	.word	0x3f851591
 801f6e4:	08074b44 	.word	0x08074b44
 801f6e8:	08074b4c 	.word	0x08074b4c
 801f6ec:	3331bb4c 	.word	0x3331bb4c
 801f6f0:	b5ddea0e 	.word	0xb5ddea0e
 801f6f4:	388ab355 	.word	0x388ab355
 801f6f8:	bb360b61 	.word	0xbb360b61
 801f6fc:	3e2aaaab 	.word	0x3e2aaaab
 801f700:	08074b3c 	.word	0x08074b3c
 801f704:	3fb8aa3b 	.word	0x3fb8aa3b
 801f708:	3f317180 	.word	0x3f317180
 801f70c:	3717f7d1 	.word	0x3717f7d1
 801f710:	7149f2ca 	.word	0x7149f2ca
 801f714:	0d800000 	.word	0x0d800000

0801f718 <__ieee754_sqrtf>:
 801f718:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801f71c:	4770      	bx	lr

0801f71e <with_errnof>:
 801f71e:	b513      	push	{r0, r1, r4, lr}
 801f720:	4604      	mov	r4, r0
 801f722:	ed8d 0a01 	vstr	s0, [sp, #4]
 801f726:	f7fb f9ef 	bl	801ab08 <__errno>
 801f72a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801f72e:	6004      	str	r4, [r0, #0]
 801f730:	b002      	add	sp, #8
 801f732:	bd10      	pop	{r4, pc}

0801f734 <xflowf>:
 801f734:	b130      	cbz	r0, 801f744 <xflowf+0x10>
 801f736:	eef1 7a40 	vneg.f32	s15, s0
 801f73a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f73e:	2022      	movs	r0, #34	; 0x22
 801f740:	f7ff bfed 	b.w	801f71e <with_errnof>
 801f744:	eef0 7a40 	vmov.f32	s15, s0
 801f748:	e7f7      	b.n	801f73a <xflowf+0x6>
	...

0801f74c <__math_uflowf>:
 801f74c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f754 <__math_uflowf+0x8>
 801f750:	f7ff bff0 	b.w	801f734 <xflowf>
 801f754:	10000000 	.word	0x10000000

0801f758 <__math_oflowf>:
 801f758:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f760 <__math_oflowf+0x8>
 801f75c:	f7ff bfea 	b.w	801f734 <xflowf>
 801f760:	70000000 	.word	0x70000000

0801f764 <finitef>:
 801f764:	b082      	sub	sp, #8
 801f766:	ed8d 0a01 	vstr	s0, [sp, #4]
 801f76a:	9801      	ldr	r0, [sp, #4]
 801f76c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f770:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801f774:	bfac      	ite	ge
 801f776:	2000      	movge	r0, #0
 801f778:	2001      	movlt	r0, #1
 801f77a:	b002      	add	sp, #8
 801f77c:	4770      	bx	lr
	...

0801f780 <_init>:
 801f780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f782:	bf00      	nop
 801f784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f786:	bc08      	pop	{r3}
 801f788:	469e      	mov	lr, r3
 801f78a:	4770      	bx	lr

0801f78c <_fini>:
 801f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f78e:	bf00      	nop
 801f790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f792:	bc08      	pop	{r3}
 801f794:	469e      	mov	lr, r3
 801f796:	4770      	bx	lr
