/**
  ******************************************************************************
  * @file    mx.h
  * @author  STMicroelectronics - AIS - MCD Team
  * @version 1.0.0
  * @date    Jul 3, 2020
  *
  * @brief Project peripherals configuration files.
  *
  * This files declares the peripherals configuration parameters that can be used
  * in the Low Level API of an ODeV driver - IDrvInit(). It creates a link
  * between the initialization code generated by CubeMX (see the .ioc file
  * in the tools folder) and the ODeV framework.
  *
  * This example show how a managed task allocates an SPI driver that must be
  * connected to the SPI3 (that has been configured using CubeMX):
  * ~~~{.c}
  * p_task->p_driver = SPIMasterDriverAlloc();
  * if (p_task->p_driver != NULL)
  * {
  *   res = IDrvInit((IDriver*)p_task->p_driver, (void*)&MX_SPI3InitParams);
  *   if (SYS_IS_ERROR_CODE(res)) {
  *     SYS_DEBUGF(SYS_DBG_LEVEL_SEVERE, ("SPIBus task: error during driver initialization\r\n"));
  *   }
  * }
  * ~~~
  *
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
#ifndef INCLUDE_MX_MX_H_
#define INCLUDE_MX_MX_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "stm32u5xx_hal.h"

/* Private defines -----------------------------------------------------------*/
#define USER_BUTTON_Pin GPIO_PIN_0
#define USER_BUTTON_GPIO_Port GPIOE
#define USER_BUTTON_EXTI_IRQn EXTI0_IRQn
#define INT_HTS_Pin GPIO_PIN_6
#define INT_HTS_GPIO_Port GPIOI
#define INT_HTS_EXTI_IRQn EXTI6_IRQn
#define WIFI_FLOW_Pin GPIO_PIN_15
#define WIFI_FLOW_GPIO_Port GPIOG
#define CS_DHCX_Pin GPIO_PIN_15
#define CS_DHCX_GPIO_Port GPIOH
#define DCDC_2_EN_Pin GPIO_PIN_5
#define DCDC_2_EN_GPIO_Port GPIOI
#define C_EN_Pin GPIO_PIN_0
#define C_EN_GPIO_Port GPIOD
#define EX_SPI_NSS_Pin GPIO_PIN_0
#define EX_SPI_NSS_GPIO_Port GPIOI
#define LED1_Pin GPIO_PIN_12
#define LED1_GPIO_Port GPIOH
#define CS_ICLX_Pin GPIO_PIN_7
#define CS_ICLX_GPIO_Port GPIOI
#define BLE_SPI_CS_Pin GPIO_PIN_1
#define BLE_SPI_CS_GPIO_Port GPIOE
#define BOOT0_Pin GPIO_PIN_3
#define BOOT0_GPIO_Port GPIOH
#define LED2_Pin GPIO_PIN_10
#define LED2_GPIO_Port GPIOH
#define USR_BUTTON_Pin GPIO_PIN_0
#define USR_BUTTON_GPIO_Port GPIOE
#define USR_BUTTON_EXTI_IRQn EXTI0_IRQn
#define SPI2_MISO_p2_Pin GPIO_PIN_2
#define SPI2_MISO_p2_GPIO_Port GPIOI
#define RTC_TAMP1_Pin GPIO_PIN_13
#define RTC_TAMP1_GPIO_Port GPIOC
#define INT1_DHCX_Pin GPIO_PIN_8
#define INT1_DHCX_GPIO_Port GPIOB
#define INT1_DHCX_EXTI_IRQn EXTI8_IRQn
#define STSAFE_RESET_Pin GPIO_PIN_9
#define STSAFE_RESET_GPIO_Port GPIOH
#define CS_DLPC_Pin GPIO_PIN_6
#define CS_DLPC_GPIO_Port GPIOH
#define GPIO2_EX_Pin GPIO_PIN_8
#define GPIO2_EX_GPIO_Port GPIOF
#define INT1_DLPC_Pin GPIO_PIN_1
#define INT1_DLPC_GPIO_Port GPIOF
#define INT1_DLPC_EXTI_IRQn EXTI1_IRQn
#define INT2_DLPC_Pin GPIO_PIN_2
#define INT2_DLPC_GPIO_Port GPIOF
#define INT2_DLPC_EXTI_IRQn EXTI2_IRQn
#define WIFI_CS_Pin GPIO_PIN_7
#define WIFI_CS_GPIO_Port GPIOH
#define BLE_TEST9_Pin GPIO_PIN_7
#define BLE_TEST9_GPIO_Port GPIOF
#define INT_MAG_Pin GPIO_PIN_9
#define INT_MAG_GPIO_Port GPIOF
#define INT_MAG_EXTI_IRQn EXTI9_IRQn
#define INT_STT_Pin GPIO_PIN_5
#define INT_STT_GPIO_Port GPIOF
#define INT_STT_EXTI_IRQn EXTI5_IRQn
#define INT1_ICLX_Pin GPIO_PIN_3
#define INT1_ICLX_GPIO_Port GPIOF
#define INT1_ICLX_EXTI_IRQn EXTI3_IRQn
#define INT2_DHCX_Pin GPIO_PIN_4
#define INT2_DHCX_GPIO_Port GPIOF
#define INT2_DHCX_EXTI_IRQn EXTI4_IRQn
#define SW_SEL_Pin GPIO_PIN_8
#define SW_SEL_GPIO_Port GPIOA
#define GPIO3_EX_Pin GPIO_PIN_10
#define GPIO3_EX_GPIO_Port GPIOF
#define BLE_TEST8_Pin GPIO_PIN_6
#define BLE_TEST8_GPIO_Port GPIOF
#define SD_DETECT_Pin GPIO_PIN_1
#define SD_DETECT_GPIO_Port GPIOG
#define INT_EX_Pin GPIO_PIN_6
#define INT_EX_GPIO_Port GPIOG
#define TIM3_PWM_Pin GPIO_PIN_6
#define TIM3_PWM_GPIO_Port GPIOC
#define uC_ADC_BATT_Pin GPIO_PIN_2
#define uC_ADC_BATT_GPIO_Port GPIOC
#define INT_EXG5_Pin GPIO_PIN_5
#define INT_EXG5_GPIO_Port GPIOG
#define INT_EXD15_Pin GPIO_PIN_15
#define INT_EXD15_GPIO_Port GPIOD
#define ADC_EX_Pin GPIO_PIN_3
#define ADC_EX_GPIO_Port GPIOC
#define CHRG_Pin GPIO_PIN_0
#define CHRG_GPIO_Port GPIOA
#define CS_DWB_Pin GPIO_PIN_12
#define CS_DWB_GPIO_Port GPIOF
#define BUTTON_PWR_Pin GPIO_PIN_10
#define BUTTON_PWR_GPIO_Port GPIOD
#define BUTTON_PWR_EXTI_IRQn EXTI10_IRQn
#define BLE_RST_Pin GPIO_PIN_13
#define BLE_RST_GPIO_Port GPIOD
#define BLE_INT_Pin GPIO_PIN_14
#define BLE_INT_GPIO_Port GPIOF
#define BLE_INT_EXTI_IRQn EXTI14_IRQn
#define WIFI_NOTIFY_Pin GPIO_PIN_7
#define WIFI_NOTIFY_GPIO_Port GPIOE
#define WIFI_NOTIFY_EXTI_IRQn EXTI7_IRQn
#define SPI2_MOSI_p2_Pin GPIO_PIN_15
#define SPI2_MOSI_p2_GPIO_Port GPIOB
#define WIFI_BOOT_Pin GPIO_PIN_9
#define WIFI_BOOT_GPIO_Port GPIOD
#define INT2_ICLX_Pin GPIO_PIN_11
#define INT2_ICLX_GPIO_Port GPIOF
#define INT2_ICLX_EXTI_IRQn EXTI11_IRQn
#define LDO_EN_Pin GPIO_PIN_15
#define LDO_EN_GPIO_Port GPIOE
#define GPIO1_EX_Pin GPIO_PIN_1
#define GPIO1_EX_GPIO_Port GPIOB
#define INT1_DWB_Pin GPIO_PIN_15
#define INT1_DWB_GPIO_Port GPIOF
#define INT1_DWB_EXTI_IRQn EXTI15_IRQn
#define WIFI_EN_Pin GPIO_PIN_12
#define WIFI_EN_GPIO_Port GPIOE
#define NFC_INT_Pin GPIO_PIN_13
#define NFC_INT_GPIO_Port GPIOB
#define NFC_INT_EXTI_IRQn EXTI13_IRQn
/* USER CODE BEGIN Private defines */

/* USER CODE END Private defines */

/* Driver initialization parameters */
/************************************/
/**
  * GPIO Configuration parameters.
  */
typedef struct _MX_GPIOParams_t
{
  void (*p_mx_init_f)(void); /*!< MX GPIO initialization function */
  IRQn_Type irq_n; /*!< External interrupt number. */
  uint32_t pin;
  GPIO_TypeDef *port;
} MX_GPIOParams_t;

/**
  * PCD configuration parameters.
  */
typedef struct _MX_PCDParams_t
{
  PCD_HandleTypeDef *p_pcd;
  IRQn_Type irq_n; /*!< External interrupt number. */
  void (*p_mx_init_f)(void); /*!< MX PCD initialization function */
} MX_PCDParams_t;

/**
  * SPI configuration parameters.
  */
typedef struct _MX_SPIParams_t
{
  SPI_HandleTypeDef *p_spi_handle; /*!< HAL SPI handle */
  IRQn_Type spi_dma_rx_irq_n; /*!< DMA channel rx interrupt number. */
  IRQn_Type spi_dma_tx_irq_n; /*!< DMA channel tx interrupt number. */
  void (*p_mx_init_f)(void); /*!< MX SPI initialization function */
  void (*p_mx_dma_init_f)(void); /*!< MX DMA initialization function */
} MX_SPIParams_t;

/**
  * I2C configuration parameters.
  */
typedef struct _MX_I2CParams_t
{
  I2C_HandleTypeDef *p_i2c_handle; /*!< HAL I2C handle */
  IRQn_Type i2c_ev_irq_n; /*!< I2C EV interrupt number. */
  IRQn_Type i2c_er_irq_n; /*!< I2C ER interrupt number. */
  IRQn_Type i2c_dma_rx_irq_n; /*!< DMA channel rx interrupt number. */
  IRQn_Type i2c_dma_tx_irq_n; /*!< DMA channel tx interrupt number. */
  void (*p_mx_init_f)(void); /*!< MX I2C initialization function */
  void (*p_mx_dma_init_f)(void); /*!< MX DMA initialization function */
} MX_I2CParams_t;

/**
  * MDF configuration parameters.
  */
typedef struct _MX_MDFParams_t
{
  MDF_FilterConfigTypeDef *p_mdf_config; /*!< HAL MDF filter configuration */
  MDF_HandleTypeDef *p_mdf; /*!< HAL MDF handle */
  MDF_DmaConfigTypeDef *p_mdf_dma_config;
  IRQn_Type irq_n; /*!< External interrupt number. */
  void (*p_mx_init_f)(void); /*!< MX MDF initialization function */
  void (*p_mx_dma_init_f)(void); /*!< MX DMA initialization function */
} MX_MDFParams_t;

/**
  * ADC configuration parameters.
  */
typedef struct _MX_ADCParams_t
{
  ADC_HandleTypeDef *p_adc; /*!< HAL ADC handle */
  void (*p_mx_init_f)(void); /*!< MX ADC initialization function */
} MX_ADCParams_t;

/**
  * TIM configuration parameters.
  */
typedef struct _MX_TIMParams_t
{
  TIM_HandleTypeDef *p_tim; /*!< HAL TIM handle */
  IRQn_Type irq_n; /*!< External interrupt number. */
  void (*p_mx_init_f)(void); /*!< MX TIM initialization function */
} MX_TIMParams_t;

extern const MX_GPIOParams_t MX_GPIO_UBInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT_HTSInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT_STTInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT_MAGInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT1_ICLXInitParams;
extern const MX_GPIOParams_t MX_GPIO_CS_ICLXInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT2_DLPCInitParams;
extern const MX_GPIOParams_t MX_GPIO_CS_DLPCInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT1_DHCXInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT2_DHCXInitParams;
extern const MX_GPIOParams_t MX_GPIO_CS_DHCXInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT1_DWBInitParams;
extern const MX_GPIOParams_t MX_GPIO_CS_DWBInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT1_EXTERNAL_DWBInitParams;
extern const MX_GPIOParams_t MX_GPIO_CS_EXTERNAL_DWBInitParams;
extern const MX_GPIOParams_t MX_GPIO_PA8InitParams;
extern const MX_GPIOParams_t MX_GPIO_PA0InitParams;
extern const MX_GPIOParams_t MX_GPIO_PD0InitParams;

/**
  * SPI2 configuration parameters.
  */
extern const MX_SPIParams_t MX_SPI2InitParams;

/**
  * SPI3 configuration parameters.
  */
extern const MX_SPIParams_t MX_SPI3InitParams;

/**
  * I2C2 configuration parameters.
  */
extern const MX_I2CParams_t MX_I2C2InitParams;

/**
  * MDF CH0 F1 configuration parameters.
  */
extern const MX_MDFParams_t MX_MDF1InitParams;

/**
  * ADF CH0 F1 configuration parameters.
  */
extern const MX_MDFParams_t MX_ADF1InitParams;

/**
  * ADC1 configuration parameters.
  */
extern const MX_ADCParams_t MX_ADC1InitParams;

/**
  * ADC4 configuration parameters.
  */
extern const MX_ADCParams_t MX_ADC4InitParams;

/**
  * TIM4 configuration parameters.
  */
extern const MX_TIMParams_t MX_TIM4InitParams;

/**
  * TIM5 configuration parameters.
  */
extern const MX_TIMParams_t MX_TIM5InitParams;

extern const MX_PCDParams_t MX_PCDInitParams;

#ifdef __cplusplus
}
#endif

#endif /* INCLUDE_MX_MX_H_ */
